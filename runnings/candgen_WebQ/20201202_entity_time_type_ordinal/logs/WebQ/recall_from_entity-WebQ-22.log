[smart_candgen] ...  {
  Loading Webquestions from cPickle ...
  5810 WebQuesetions loaded.
args.linking_only: False
  QueryService initialize ...  {
    Loading ComplexQuestions from cPickle ...
    2100 ComplexQuestions loaded.
    Loading Webquestions from cPickle ...
    5810 WebQuesetions loaded.
    7910 QA loaded from WebQ & CompQ.
    Loading SPARQL cache ... {
      1527 SPARQL cache loaded.
    } [0.331s]
    Loading <q_sc, stat> cache ... {
      15703 <q_sc, stat> cache loaded.
    } [0.514s]
    Initialize complete.
  } [0.888s]
  Loading <word, idx> pairs from [../../data/word_emb_in_use/word_emb.indices] ... 
  84320 <word, idx> loaded.
  Loading word embeddings for [../../data/word_emb_in_use/word_emb.glove_300.npy] ...
  (84320, 300) word embedding loaded.
  44 dependency name loaded.
  GlobalLinker initializing ...  {
    201 ordinal & 235 superlative words loaded.
    Load entity linking table from [../../data/linkings/WebQ/webq.all.top3_source_ensemble_data.q_links]: {
      5810 questions of link data loaded.
    } [0.285s]
    FBHelper: 12237 type names loaded.
    12237 type embedding loaded.
    Initialize complete.
  } [1.011s]
  simple type match = False
  simple time match = False
  Entering Q 2200 / 5810 [b'what school did burne hogarth establish?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2201 / 5810 [b'what is the economy of china?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2202 / 5810 [b'who is marilyn monroe and why is she famous?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2203 / 5810 [b'where is port charlotte florida located?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2204 / 5810 [b'what time zone is it in california?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2205 / 5810 [b"who is reba mcentire's son?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2206 / 5810 [b'who helped form the american federation of labor?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2207 / 5810 [b'who did julie andrews play in shrek?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2208 / 5810 [b'what songs did whitney houston?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2209 / 5810 [b'when did the celtics win championship?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2210 / 5810 [b'what does canada export and import the most?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2211 / 5810 [b'what episode does eric northman come in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2212 / 5810 [b'what was elijah mccoy famous for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2213 / 5810 [b'who did john paul jones fight for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2214 / 5810 [b'where does hudson river start?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2215 / 5810 [b'where was brad paisley born and raised?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2216 / 5810 [b'what is charlotte north carolina known for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2217 / 5810 [b'where is glastonbury connecticut?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2218 / 5810 [b"what is george washington's hometown?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2219 / 5810 [b'what is arlington texas zip code?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2220 / 5810 [b'what years did yankees win championships?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2221 / 5810 [b'what characters does seth macfarlane play in family guy?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2222 / 5810 [b'what airport fly into miami?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2223 / 5810 [b'what year did steve nash play for the mavericks?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2224 / 5810 [b'where is arabic used?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2225 / 5810 [b'what book did charles darwin write on evolution?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2226 / 5810 [b'what are all songs by taylor swift?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2227 / 5810 [b'what instruments does katy perry play?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2228 / 5810 [b'who was francis drake married to?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2229 / 5810 [b'where were the chickasaw indians located?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2230 / 5810 [b'where does don king live?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2231 / 5810 [b'when was tom brady first superbowl win?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2232 / 5810 [b'who did deborah sampson married?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2233 / 5810 [b'what form of government does mexico?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2234 / 5810 [b'who played mickey on days of our lives?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2235 / 5810 [b'what movies does nicole kidman star in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2236 / 5810 [b'who was michael jackson first girlfriend?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2237 / 5810 [b'where to stay in san francisco ca?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2238 / 5810 [b'what team does reggie bush play for 2011?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2239 / 5810 [b'where did kate chopin grow up?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2240 / 5810 [b'who is the current president of dominican republic 2011?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2241 / 5810 [b'what money system does greece use?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2242 / 5810 [b'who played obi wan kenobi in phantom menace?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2243 / 5810 [b'what is the newspaper in phoenix?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2244 / 5810 [b'where is luke bryan from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2245 / 5810 [b'who invented facebook wikipedia?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2246 / 5810 [b'what country surrounds spain?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2247 / 5810 [b'when and where was william shakespeare buried?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2248 / 5810 [b'what type of tennis racket does john mcenroe use?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2249 / 5810 [b'where did captain james cook grow up?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2250 / 5810 [b'where is sony headquarters located?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2251 / 5810 [b'who wore the darth vader suit in revenge of the sith?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2252 / 5810 [b'what movies has scarlett johansson in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2253 / 5810 [b'where is alex rodriguez from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2254 / 5810 [b'what school did michael jordan play for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2255 / 5810 [b'who invented morse code?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2256 / 5810 [b'what happened to adolf hitler at the end of the war?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2257 / 5810 [b'what is the political system in england?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2258 / 5810 [b'who was vice president under ronald reagan?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2259 / 5810 [b'what does rupert murdoch own 2012?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2260 / 5810 [b'where did william howard taft go to high school?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2261 / 5810 [b'when did the chicago bulls win their first championship?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2262 / 5810 [b'which four states touch mexico?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2263 / 5810 [b'what did sammy davis jr die of?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2264 / 5810 [b'what did anna nicole smith died from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2265 / 5810 [b'what country did francis drake explored for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2266 / 5810 [b'what two countries share a border with the great lakes?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2267 / 5810 [b'what year did dwayne wade came to the nba?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2268 / 5810 [b'where is the dan patrick studio?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2269 / 5810 [b'where did jackie kennedy go to college?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2270 / 5810 [b'what do italy people eat for breakfast?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2271 / 5810 [b'what religion does tom cruise follow?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2272 / 5810 [b"what is the president of france's name?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2273 / 5810 [b'what language do lakota indians speak?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2274 / 5810 [b'what is the money called in spain?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2275 / 5810 [b'where is the great pyramid of giza situated?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2276 / 5810 [b'where is john deere made?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2277 / 5810 [b'what money is used in the ukraine?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2278 / 5810 [b'where did ayn rand live?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2279 / 5810 [b'when was the civil war in libya?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2280 / 5810 [b'where are the headquarters of the united nations organization found?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2281 / 5810 [b'what did charles lindbergh became famous for in the 1920s?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2282 / 5810 [b'what influenced roy lichtenstein artwork?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2283 / 5810 [b'what state did romney governor?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2284 / 5810 [b'which countries border lake victoria?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2285 / 5810 [b'what movies does ryan gosling star in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2286 / 5810 [b'where is kentucky located?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2287 / 5810 [b'where john tyler was born?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2288 / 5810 [b'where the english came from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2289 / 5810 [b'what place did thomas jefferson died?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2290 / 5810 [b'when is next t20 world cup cricket?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2291 / 5810 [b'what is the time zone in france?']: {
    Read 15 links from file.
    Show 5 E + 10 T + 0 Tm + 0 Ord = 15 linkings: {
      #00 Entity: [2, 4) (the time) == m.09rkd (the times) {'score': 984.506007, 'source': 2.0}
      #01 Entity: [3, 5) (time zone) == m.035jym (Time_Zone_(video_game)) {'score': 2.072783, 'source': 0.0}
      #02 Entity: [3, 5) (time zone) == m.07llf (Time_zone) {'score': 14.719904, 'source': 0.0}
      #03 Entity: [6, 7) (france) == m.01l3vx (France_national_football_team) {'score': 2.995188, 'source': 1.0}
      #04 Entity: [6, 7) (france) == m.0f8l9c (France) {'score': 7432.400892, 'source': 1.0}
      #05 Type: [3, 5) (time zone) == time.time_zone (time zone) {'sim': 1.0}
      #06 Type: [3, 5) (time zone) == time.defunct_time_zone (defunct time zone) {'sim': 0.887955}
      #07 Type: [2, 4) (the time) == measurement_unit.time_unit (unit of time) {'sim': 0.823592}
      #08 Type: [3, 4) (time) == measurement_unit.time_interval (time interval) {'sim': 0.797323}
      #09 Type: [2, 4) (the time) == book.place_of_publication_period (place of publication period) {'sim': 0.790658}
      #10 Type: [2, 4) (the time) == time.day_of_year (day of year) {'sim': 0.79042}
      #11 Type: [1, 4) (is the time) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.788942}
      #12 Type: [1, 4) (is the time) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.777942}
      #13 Type: [2, 4) (the time) == time.day_of_week (day of week) {'sim': 0.768547}
      #14 Type: [4, 5) (zone) == meteorology.forecast_zone (forecast zone) {'sim': 0.761289}
    } [0.000s]
    Coarse level searching (total entities = 5): {
      [Len-1||F1/5] (2020-12-03 14:15:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01l3vx ?p1 ?o1 . }
        [2020-12-03 14:15:44] SPARQL hit!
        FBHelper: 66554 domain + 65935 range info loaded.
        FBHelper: 1729 mediator types loaded.
        Filt_Query_Ret = 6 / 21 ( 0.174s)
        FBHelper: 11388 inverse predicate info loaded.
        [Len-1||F1/5||2/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01l3vx ?p1 ?o1 . ?o1 ?p2 fb:m.035jym . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F1/5||3/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01l3vx ?p1 ?o1 . ?o1 ?p2 fb:m.07llf . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F1/5||4/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01l3vx ?p1 ?o1 . ?o1 ?p2 fb:m.09rkd . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.190s]
      [Len-1||F2/5] (2020-12-03 14:15:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.035jym ?p1 ?o1 . }
        [2020-12-03 14:15:44] SPARQL hit!
        Filt_Query_Ret = 6 / 12 ( 0.000s)
        [Len-1||F2/5||1/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035jym ?p1 ?o1 . ?o1 ?p2 fb:m.01l3vx . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F2/5||5/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035jym ?p1 ?o1 . ?o1 ?p2 fb:m.0f8l9c . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.000s]
      [Len-1||F3/5] (2020-12-03 14:15:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.07llf ?p1 ?o1 . }
        [2020-12-03 14:15:44] SPARQL hit!
        Filt_Query_Ret = 0 / 8 ( 0.000s)
      } [0.000s]
      [Len-1||F4/5] (2020-12-03 14:15:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.09rkd ?p1 ?o1 . }
        [2020-12-03 14:15:44] SPARQL hit!
        Filt_Query_Ret = 4 / 22 ( 0.000s)
        [Len-1||F4/5||1/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09rkd ?p1 ?o1 . ?o1 ?p2 fb:m.01l3vx . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F4/5||5/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09rkd ?p1 ?o1 . ?o1 ?p2 fb:m.0f8l9c . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.000s]
      [Len-1||F5/5] (2020-12-03 14:15:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0f8l9c ?p1 ?o1 . }
        [2020-12-03 14:15:44] SPARQL hit!
        Filt_Query_Ret = 67 / 145 ( 0.000s)
        [Len-1||F5/5||2/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0f8l9c ?p1 ?o1 . ?o1 ?p2 fb:m.035jym . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F5/5||3/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0f8l9c ?p1 ?o1 . ?o1 ?p2 fb:m.07llf . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F5/5||4/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0f8l9c ?p1 ?o1 . ?o1 ?p2 fb:m.09rkd . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.001s]
      [Len-2||F1/5] (2020-12-03 14:15:44) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01l3vx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:44] SPARQL hit!
        Filt_Query_Ret = 31 / 349 ( 0.001s)
        [Len-2||F1/5||2/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01l3vx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.035jym . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F1/5||2/5-2] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01l3vx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.035jym . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F1/5||3/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01l3vx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.07llf . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F1/5||3/5-2] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01l3vx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.07llf . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F1/5||4/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01l3vx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09rkd . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F1/5||4/5-2] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01l3vx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09rkd . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.002s]
      [Len-2||F2/5] (2020-12-03 14:15:44) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035jym ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:44] SPARQL hit!
        Filt_Query_Ret = 0 / 95 ( 0.000s)
      } [0.000s]
      [Len-2||F3/5] (2020-12-03 14:15:44) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.07llf ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:44] SPARQL hit!
        Filt_Query_Ret = 2 / 49 ( 0.000s)
        [Len-2||F3/5||1/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.07llf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01l3vx . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F3/5||1/5-2] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.07llf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01l3vx . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F3/5||5/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.07llf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0f8l9c . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F3/5||5/5-2] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.07llf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0f8l9c . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.001s]
      [Len-2||F4/5] (2020-12-03 14:15:44) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09rkd ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:44] SPARQL hit!
        Filt_Query_Ret = 27 / 296 ( 0.001s)
        [Len-2||F4/5||1/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09rkd ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01l3vx . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F4/5||1/5-2] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09rkd ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01l3vx . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F4/5||5/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09rkd ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0f8l9c . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F4/5||5/5-2] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09rkd ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0f8l9c . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.002s]
      [Len-2||F5/5] (2020-12-03 14:15:44) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0f8l9c ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:44] SPARQL hit!
        Filt_Query_Ret = 228 / 2984 ( 0.012s)
        [Len-2||F5/5||2/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0f8l9c ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.035jym . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F5/5||2/5-2] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0f8l9c ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.035jym . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F5/5||3/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0f8l9c ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.07llf . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F5/5||3/5-2] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0f8l9c ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.07llf . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 2 ( 0.000s)
        } [0.000s]
        [Len-2||F5/5||4/5-1] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0f8l9c ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09rkd . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F5/5||4/5-2] (2020-12-03 14:15:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0f8l9c ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09rkd . }
          [2020-12-03 14:15:44] SPARQL hit!
          Filt_Query_Ret = 0 / 4 ( 0.000s)
        } [0.000s]
      } [0.014s]
      371 coarse schemas retrieved from scratch.
      Calculating F1 for 371 coarse schemas: {
        Current: 0 / 371
        Checking schema 0 / 371: {
          [('Main', '==', 'm.01l3vx', ['soccer.football_team.current_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01l3vx fb:soccer.football_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 1 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01l3vx fb:sports.sports_team.founded ?o1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 2 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01l3vx fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 3 / 371: {
          [('Main', '==', 'm.01l3vx', ['soccer.football_team.matches'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01l3vx fb:soccer.football_team.matches ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 4 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01l3vx fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 5 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.arena_stadium'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01l3vx fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 6 / 371: {
          [('Main', '==', 'm.035jym', ['cvg.computer_videogame.publisher'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035jym fb:cvg.computer_videogame.publisher ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 7 / 371: {
          [('Main', '==', 'm.035jym', ['cvg.computer_videogame.cvg_genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035jym fb:cvg.computer_videogame.cvg_genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 8 / 371: {
          [('Main', '==', 'm.035jym', ['cvg.computer_videogame.game_series'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035jym fb:cvg.computer_videogame.game_series ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 9 / 371: {
          [('Main', '==', 'm.035jym', ['cvg.computer_videogame.gameplay_modes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035jym fb:cvg.computer_videogame.gameplay_modes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 10 / 371: {
          [('Main', '==', 'm.035jym', ['cvg.computer_videogame.release_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.035jym fb:cvg.computer_videogame.release_date ?o1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 11 / 371: {
          [('Main', '==', 'm.035jym', ['cvg.computer_videogame.versions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035jym fb:cvg.computer_videogame.versions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 12 / 371: {
          [('Main', '==', 'm.09rkd', ['book.newspaper.owner'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09rkd fb:book.newspaper.owner ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 13 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09rkd fb:book.periodical.language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 14 / 371: {
          [('Main', '==', 'm.09rkd', ['book.newspaper.circulation_areas'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09rkd fb:book.newspaper.circulation_areas ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 15 / 371: {
          [('Main', '==', 'm.09rkd', ['award.ranked_list_compiler.ranked_lists'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09rkd fb:award.ranked_list_compiler.ranked_lists ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 16 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 17 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 18 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 142, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 19 / 371: {
          [('Main', '==', 'm.0f8l9c', ['travel.travel_destination.tourist_attractions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 20 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 22 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 23 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 24 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 25 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 26 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 27 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2075, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 28 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.partially_contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 29 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.belongs_to_combatant_group'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 30 / 371: {
          [('Main', '==', 'm.0f8l9c', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 31 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 32 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:olympics.olympic_athlete_affiliation.athlete ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 33 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.locations.countries.continent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 34 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.locations.countries.planet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.locations.countries.planet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 35 / 371: {
          [('Main', '==', 'm.0f8l9c', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 102, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 36 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.thoroughbredracing.thoroughbred_racehorse_origin.horses_from_this_location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.thoroughbredracing.thoroughbred_racehorse_origin.horses_from_this_location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 96, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 37 / 371: {
          [('Main', '==', 'm.0f8l9c', ['biology.breed_origin.breeds_originating_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 38 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 39 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 40 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 41 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.first_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 42 / 371: {
          [('Main', '==', 'm.0f8l9c', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 43 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.uncommon.topic.exceptions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.uncommon.topic.exceptions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 44 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 45 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.aareas.schema.administrative_area.subdividing_place'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.aareas.schema.administrative_area.subdividing_place ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 46 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 47 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 48 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0f8l9c fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 49 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2470, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 50 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 201, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 51 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 52 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.partially_containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 53 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 54 / 371: {
          [('Main', '==', 'm.0f8l9c', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 55 / 371: {
          [('Main', '==', 'm.0f8l9c', ['media_common.netflix_genre.titles'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1204, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 56 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.jewlib.parent_institution.judaica_owning_units'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.jewlib.parent_institution.judaica_owning_units ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 57 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 58 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0f8l9c fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 59 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.currency_formerly_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 60 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.second_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.country.second_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 119, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 61 / 371: {
          [('Main', '==', 'm.0f8l9c', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 62 / 371: {
          [('Main', '==', 'm.0f8l9c', ['royalty.kingdom.rulers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:royalty.kingdom.rulers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 63 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 64 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 65 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 66 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 67 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0f8l9c fb:location.location.area ?o1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 68 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.primarily_containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.primarily_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 69 / 371: {
          [('Main', '==', 'm.0f8l9c', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 859, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 70 / 371: {
          [('Main', '==', 'm.0f8l9c', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 71 / 371: {
          [('Main', '==', 'm.0f8l9c', ['fictional_universe.fictional_setting.works_set_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:fictional_universe.fictional_setting.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 72 / 371: {
          [('Main', '==', 'm.0f8l9c', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 137, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 73 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.locations.countries.cities_within'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.locations.countries.cities_within ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 74 / 371: {
          [('Main', '==', 'm.0f8l9c', ['boats.ship_builder.ships_built'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:boats.ship_builder.ships_built ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 45, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 75 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.locations.counties_parishes_and_boroughs.coninent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.locations.counties_parishes_and_boroughs.coninent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 76 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.multi_event_tournaments_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 77 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.caveart.region.caves'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.caveart.region.caves ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 78 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.mystery.cryptid_observation_location.cryptid_s_occurring_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.mystery.cryptid_observation_location.cryptid_s_occurring_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 79 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.fairytales.fairy_tale_origin.fairy_tale_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:base.fairytales.fairy_tale_origin.fairy_tale_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 80 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.mr_kav.default_domain.customer.num'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0f8l9c fb:user.mr_kav.default_domain.customer.num ?o1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 81 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.nuclear_weapons.nuclear_power.nuclear_test_series'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:user.skud.nuclear_weapons.nuclear_power.nuclear_test_series ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 82 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.nuclear_weapons.nuclear_power.nuclear_tests'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:user.skud.nuclear_weapons.nuclear_power.nuclear_tests ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 83 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.roster', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 49, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 84 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.roster', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 85 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.roster', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01l3vx fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 86 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.matches_played'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.matches_played ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 87 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.players'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.players ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 88 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup', 'base.x2010fifaworldcupsouthafrica.world_cup_team.national_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.national_team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 89 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.tournaments.tournament_competitor.tournaments', 'base.tournaments.tournament_participating_competitor.competitor_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.competitor_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 90 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.tournaments.tournament_competitor.tournaments', 'base.tournaments.tournament_participating_competitor.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01l3vx fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.rank ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 91 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.tournaments.tournament_competitor.matches', 'base.tournaments.match_competitor_relationship.match'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.tournaments.tournament_competitor.matches ?o1 . ?o1 fb:base.tournaments.match_competitor_relationship.match ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 92 / 371: {
          [('Main', '==', 'm.01l3vx', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 93 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.roster', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01l3vx fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 94 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 95 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.goals_scored'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.goals_scored ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 96 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.national_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.national_team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 97 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup', 'base.x2010fifaworldcupsouthafrica.world_cup_team.world_cup'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.world_cup ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 98 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup', 'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_as'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_as ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 99 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.tournaments.tournament_competitor.tournaments', 'base.tournaments.tournament_participating_competitor.last_round_played'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.last_round_played ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 100 / 371
        Checking schema 100 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.league', 'sports.sports_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 101 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.tournaments.tournament_competitor.matches', 'base.tournaments.match_competitor_relationship.competitor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.tournaments.tournament_competitor.matches ?o1 . ?o1 fb:base.tournaments.match_competitor_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 102 / 371: {
          [('Main', '==', 'm.01l3vx', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01l3vx fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.to ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 103 / 371: {
          [('Main', '==', 'm.01l3vx', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01l3vx fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.from ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 104 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.roster', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 105 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 106 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.current_club'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.current_club ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 107 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup', 'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 108 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup', 'base.x2010fifaworldcupsouthafrica.world_cup_team.qualification_group'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.qualification_group ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 109 / 371: {
          [('Main', '==', 'm.01l3vx', ['base.tournaments.tournament_competitor.tournaments', 'base.tournaments.tournament_participating_competitor.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 110 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.sports_team.league', 'sports.sports_league_participation.league'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 111 / 371: {
          [('Main', '==', 'm.01l3vx', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.manager'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.manager ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 112 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.tournament_event_competitor.country', 'sports.competitor_country_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:sports.tournament_event_competitor.country ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 113 / 371: {
          [('Main', '==', 'm.01l3vx', ['sports.tournament_event_competitor.country', 'sports.competitor_country_relationship.competitor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01l3vx fb:sports.tournament_event_competitor.country ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 114 / 371: {
          [('Main', '==', 'm.07llf', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.07llf fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 115 / 371: {
          [('Main', '==', 'm.07llf', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.07llf fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 116 / 371: {
          [('Main', '==', 'm.09rkd', ['book.newspaper.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:book.newspaper.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 117 / 371: {
          [('Main', '==', 'm.09rkd', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09rkd fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 118 / 371: {
          [('Main', '==', 'm.09rkd', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 119 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.format', 'book.periodical_format_period.format'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:book.periodical.format ?o1 . ?o1 fb:book.periodical_format_period.format ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 120 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.first_issue_date', 'book.periodical_publication_date.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09rkd fb:book.periodical.first_issue_date ?o1 . ?o1 fb:book.periodical_publication_date.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 121 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.publisher', 'book.periodical_publisher_period.publisher'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:book.periodical.publisher ?o1 . ?o1 fb:book.periodical_publisher_period.publisher ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 122 / 371: {
          [('Main', '==', 'm.09rkd', ['film.film_festival_sponsor.festivals_sponsored', 'film.film_festival_sponsorship.sponsor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:film.film_festival_sponsor.festivals_sponsored ?o1 . ?o1 fb:film.film_festival_sponsorship.sponsor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 123 / 371: {
          [('Main', '==', 'm.09rkd', ['base.newsevents.news_reporting_organisation.news_reports', 'base.newsevents.news_report.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09rkd fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 124 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.editorial_staff', 'book.editorial_tenure.editor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:book.periodical.editorial_staff ?o1 . ?o1 fb:book.editorial_tenure.editor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 125 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.editorial_staff', 'book.editorial_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:book.periodical.editorial_staff ?o1 . ?o1 fb:book.editorial_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 126 / 371: {
          [('Main', '==', 'm.09rkd', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09rkd fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 127 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.publisher', 'book.periodical_publisher_period.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09rkd fb:book.periodical.publisher ?o1 . ?o1 fb:book.periodical_publisher_period.to ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 128 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.frequency_or_issues_per_year', 'book.periodical_frequency.frequency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:book.periodical.frequency_or_issues_per_year ?o1 . ?o1 fb:book.periodical_frequency.frequency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 129 / 371: {
          [('Main', '==', 'm.09rkd', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 130 / 371: {
          [('Main', '==', 'm.09rkd', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 131 / 371: {
          [('Main', '==', 'm.09rkd', ['base.newsevents.news_reporting_organisation.news_reports', 'base.newsevents.news_report.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 132 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.editorial_staff', 'book.editorial_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09rkd fb:book.periodical.editorial_staff ?o1 . ?o1 fb:book.editorial_tenure.to ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 133 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.editorial_staff', 'book.editorial_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09rkd fb:book.periodical.editorial_staff ?o1 . ?o1 fb:book.editorial_tenure.from ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 134 / 371: {
          [('Main', '==', 'm.09rkd', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 135 / 371: {
          [('Main', '==', 'm.09rkd', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 136 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.format', 'book.periodical_format_period.periodical'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:book.periodical.format ?o1 . ?o1 fb:book.periodical_format_period.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 137 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.publisher', 'book.periodical_publisher_period.periodical'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:book.periodical.publisher ?o1 . ?o1 fb:book.periodical_publisher_period.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 138 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.publisher', 'book.periodical_publisher_period.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09rkd fb:book.periodical.publisher ?o1 . ?o1 fb:book.periodical_publisher_period.from ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 139 / 371: {
          [('Main', '==', 'm.09rkd', ['film.film_festival_sponsor.festivals_sponsored', 'film.film_festival_sponsorship.festival'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:film.film_festival_sponsor.festivals_sponsored ?o1 . ?o1 fb:film.film_festival_sponsorship.festival ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 140 / 371: {
          [('Main', '==', 'm.09rkd', ['base.newsevents.news_reporting_organisation.news_reports', 'base.newsevents.news_report.news_reporting_organisation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.news_reporting_organisation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 141 / 371: {
          [('Main', '==', 'm.09rkd', ['base.newsevents.news_reporting_organisation.news_reports', 'base.newsevents.news_report.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 142 / 371: {
          [('Main', '==', 'm.09rkd', ['book.periodical.editorial_staff', 'book.editorial_tenure.periodical'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:book.periodical.editorial_staff ?o1 . ?o1 fb:book.editorial_tenure.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 143 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 94, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 144 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 145 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 146 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 147 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 148 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 149 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 150 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 151 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 152 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 153 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.measurement_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 154 / 371: {
          [('Main', '==', 'm.0f8l9c', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 155 / 371: {
          [('Main', '==', 'm.0f8l9c', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 156 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 157 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 158 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 159 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 359, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 160 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 161 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 95, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 162 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 163 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 164 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 165 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 166 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 167 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 168 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 169 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 170 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 171 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 172 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 173 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 174 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 175 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.government_debt_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 176 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 177 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.broadband_penetration_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 178 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 179 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 180 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 181 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 182 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 183 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 184 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 185 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 186 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 187 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 188 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 189 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 190 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 191 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 192 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 193 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 194 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 195 / 371: {
          [('Main', '==', 'm.0f8l9c', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 196 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 197 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 198 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 199 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 200 / 371
        Checking schema 200 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 201 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 202 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 203 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 204 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 205 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 206 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 207 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 208 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 45, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 209 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 48, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 210 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.government_debt_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 211 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 212 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.broadband_penetration_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 213 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 214 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 215 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 216 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 217 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 218 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 219 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 220 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 221 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 222 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 223 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 224 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 225 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.government_debt_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 226 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 227 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.broadband_penetration_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 228 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 229 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 230 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 231 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 232 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 233 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 234 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 235 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 236 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 237 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 238 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 239 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 240 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 241 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 242 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 243 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjusted_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 244 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 245 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 246 / 371: {
          [('Main', '==', 'm.0f8l9c', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 247 / 371: {
          [('Main', '==', 'm.0f8l9c', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 248 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 249 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 250 / 371: {
          [('Main', '==', 'm.0f8l9c', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 251 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.vacationer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 252 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 253 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 254 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 255 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 506, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 256 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 257 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.casualties', 'military.casualties.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 258 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.casualties', 'military.casualties.type_of_casualties'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.type_of_casualties ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 259 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 260 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 493, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 261 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.thoroughbredracing.thoroughbred_racehorse_owner.horses_owned', 'base.thoroughbredracing.horse_owner_relationship.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:base.thoroughbredracing.thoroughbred_racehorse_owner.horses_owned ?o1 . ?o1 fb:base.thoroughbredracing.horse_owner_relationship.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 262 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.religions', 'location.religion_percentage.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.religions ?o1 . ?o1 fb:location.religion_percentage.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 263 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 264 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 265 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 266 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 267 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.casualties', 'military.casualties.lower_estimate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.lower_estimate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 268 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.casualties', 'military.casualties.upper_estimate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.upper_estimate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 269 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 270 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 271 / 371: {
          [('Main', '==', 'm.0f8l9c', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 272 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 273 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_since'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 274 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 275 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 276 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 277 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 278 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.casualties', 'military.casualties.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 279 / 371: {
          [('Main', '==', 'm.0f8l9c', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 545, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 280 / 371: {
          [('Main', '==', 'm.0f8l9c', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 281 / 371: {
          [('Main', '==', 'm.0f8l9c', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 282 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.country.national_anthem', 'government.national_anthem_of_a_country.anthem'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 283 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 284 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 285 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 286 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 287 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competitors'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competitors ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 288 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.rank ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 289 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.sports'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.sports ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 290 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.competitor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 291 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 292 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competition'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competition ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 293 / 371: {
          [('Main', '==', 'm.0f8l9c', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 294 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 295 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 296 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 56, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 297 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 298 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 299 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 300 / 371
        Checking schema 300 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 301 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 302 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 303 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 304 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 305 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 306 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 307 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 308 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 309 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 310 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 311 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 312 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 313 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 314 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 315 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 316 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 317 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 318 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 319 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 320 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 321 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 322 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 37, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 323 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 324 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 325 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 326 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 327 / 371: {
          [('Main', '==', 'm.0f8l9c', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 328 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.military_commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 329 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.legal.treaty_signatory.treaties_signed', 'user.skud.legal.treaty_signature.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:user.skud.legal.treaty_signatory.treaties_signed ?o1 . ?o1 fb:user.skud.legal.treaty_signature.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 330 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 331 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 332 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.embassies_and_consulates.embassy.ambassadors', 'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.from_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 333 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.embassies_and_consulates.embassy.ambassadors', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.to_date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 334 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.force_deployments', 'military.force_strength.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 335 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.boats.naval_combatant.naval_engagements', 'user.skud.boats.naval_engagement_participation.ship'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.skud.boats.naval_combatant.naval_engagements ?o1 . ?o1 fb:user.skud.boats.naval_engagement_participation.ship ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 336 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.boats.naval_combatant.naval_engagements', 'user.skud.boats.naval_engagement_participation.wounded'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:user.skud.boats.naval_combatant.naval_engagements ?o1 . ?o1 fb:user.skud.boats.naval_engagement_participation.wounded ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 337 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.frequency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.frequency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 338 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 339 / 371: {
          [('Main', '==', 'm.0f8l9c', ['organization.organization_member.member_of', 'organization.organization_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 340 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.military_commanders', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 341 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.legal.treaty_signatory.treaties_signed', 'user.skud.legal.treaty_signature.signatory'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.skud.legal.treaty_signatory.treaties_signed ?o1 . ?o1 fb:user.skud.legal.treaty_signature.signatory ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 342 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 343 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 344 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.embassies_and_consulates.embassy.ambassadors', 'user.skud.embassies_and_consulates.ambassadorial_tenure.ambassador'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.ambassador ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 345 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.embassies_and_consulates.embassy.ambassadors', 'user.skud.embassies_and_consulates.ambassadorial_tenure.attached_to_embassy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.attached_to_embassy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 346 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.force_deployments', 'military.force_strength.force_size'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 347 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.boats.naval_combatant.naval_engagements', 'user.skud.boats.naval_engagement_participation.side'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.skud.boats.naval_combatant.naval_engagements ?o1 . ?o1 fb:user.skud.boats.naval_engagement_participation.side ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 348 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.boats.naval_combatant.naval_engagements', 'user.skud.boats.naval_engagement_participation.outcome'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.skud.boats.naval_combatant.naval_engagements ?o1 . ?o1 fb:user.skud.boats.naval_engagement_participation.outcome ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 349 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 350 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.amount ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 351 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 352 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.index_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 353 / 371: {
          [('Main', '==', 'm.0f8l9c', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 354 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.military_commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 355 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.legal.treaty_signatory.treaties_signed', 'user.skud.legal.treaty_signature.treaty'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.skud.legal.treaty_signatory.treaties_signed ?o1 . ?o1 fb:user.skud.legal.treaty_signature.treaty ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 356 / 371: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 357 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.embassies_and_consulates.embassy.ambassadors', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_countries'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.to_countries ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 358 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.force_deployments', 'military.force_strength.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 359 / 371: {
          [('Main', '==', 'm.0f8l9c', ['military.military_combatant.force_deployments', 'military.force_strength.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.date ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 360 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.boats.naval_combatant.naval_engagements', 'user.skud.boats.naval_engagement_participation.naval_engagement'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:user.skud.boats.naval_combatant.naval_engagements ?o1 . ?o1 fb:user.skud.boats.naval_engagement_participation.naval_engagement ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 361 / 371: {
          [('Main', '==', 'm.0f8l9c', ['user.skud.boats.naval_combatant.naval_engagements', 'user.skud.boats.naval_engagement_participation.casualties'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:user.skud.boats.naval_combatant.naval_engagements ?o1 . ?o1 fb:user.skud.boats.naval_engagement_participation.casualties ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 362 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.championships'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.championships ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 363 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.rank ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 364 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.athlete_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.athlete_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 365 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 366 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 367 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 368 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0f8l9c fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.from ?o2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 369 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 370 / 371: {
          [('Main', '==', 'm.0f8l9c', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.permanent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.permanent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        362 / 371 coarse schemas kept with ans_size > 0.
      } [0.036s]
      Coarse level ended, resulting in 362 schemas.
    } [0.247s]
    Type level searching (total types = 10): {
      Current: 0 / 362
[{'type.datetime'}]
      FBHelper: 1870 sub/super type pairs loaded.
[{'sports.sports_team_location'}]
[{'soccer.football_match'}]
[{'sports.sport'}]
[{'sports.sports_facility'}]
[{'cvg.cvg_publisher'}]
[{'cvg.cvg_genre'}]
[{'cvg.game_series'}]
[{'cvg.gameplay_mode'}]
[{'type.datetime'}]
[{'cvg.game_version'}]
[{'book.newspaper_owner'}]
[{'language.human_language'}]
[{'periodicals.newspaper_circulation_area'}]
[{'award.ranked_list'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'travel.tourist_attraction'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'government.government_agency'}]
[{'people.person'}]
[{'location.location'}]
[{'military.military_combatant'}]
[{'fictional_universe.fictional_character'}]
[{'sports.sports_team'}]
[{'olympics.olympic_athlete'}]
[{'base.locations.continents'}]
[{'base.locations.planets'}]
[{'food.beer'}]
[{'base.thoroughbredracing.thoroughbred_racehorse'}]
[{'biology.animal_breed'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'location.administrative_division'}]
[{'symbols.namesake'}]
[{'base.uncommon.exception'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'base.aareas.schema.administrative_area'}]
[{'government.government_office_or_title'}]
[{'government.government'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.location'}]
[{'olympics.olympic_games'}]
[{'film.film'}]
[{'media_common.netflix_title'}]
[{'base.jewlib.judaica_owner'}]
[{'location.citytown'}]
[{'type.int'}]
[{'finance.currency'}]
[{'location.administrative_division'}]
[{'book.newspaper'}]
[{'royalty.monarch'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.work_of_fiction'}]
[{'organization.organization'}]
[{'base.locations.cities_and_towns'}]
[{'boats.ship'}]
[{'base.locations.continents'}]
[{'sports.multi_event_tournament'}]
[{'base.caveart.cave'}]
[{'base.mystery.cryptid_classification'}]
[{'base.fairytales.fairy_tale'}]
[{'type.int'}]
[{'user.skud.nuclear_weapons.nuclear_test_series'}]
[{'user.skud.nuclear_weapons.nuclear_test'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'type.int'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'base.x2010fifaworldcupsouthafrica.world_cup_participant'}]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team'}, {'base.x2010fifaworldcupsouthafrica.world_cup_participation'}]
[{'base.tournaments.tournament_participating_competitor'}, {'base.tournaments.tournament_competitor'}]
[{'base.tournaments.tournament_participating_competitor'}, {'type.int'}]
[{'base.tournaments.match_competitor_relationship'}, {'base.tournaments.tournament_match'}]
[{'soccer.football_team_management_tenure'}, {'soccer.football_team'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'type.int'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'base.x2010fifaworldcupsouthafrica.world_cup_squad'}]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team'}, {'base.x2010fifaworldcupsouthafrica.fifa_world_cup'}]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team'}, {'base.x2010fifaworldcupsouthafrica.qualification_criteria'}]
[{'base.tournaments.tournament_participating_competitor'}, {'base.tournaments.tournament_round'}]
[{'sports.sports_league_participation'}, {'sports.sports_team'}]
[{'base.tournaments.match_competitor_relationship'}, {'base.tournaments.tournament_competitor'}]
[{'soccer.football_team_management_tenure'}, {'type.datetime'}]
[{'soccer.football_team_management_tenure'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'soccer.football_position'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'soccer.football_team'}]
      Current: 100 / 362
[{'base.x2010fifaworldcupsouthafrica.world_cup_team'}, {'type.datetime'}]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team'}, {'base.x2010fifaworldcupsouthafrica.world_cup_qualification_group'}]
[{'base.tournaments.tournament_participating_competitor'}, {'base.tournaments.tournament'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
[{'soccer.football_team_management_tenure'}, {'soccer.football_team_manager'}]
[{'sports.competitor_country_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_country_relationship'}, {'sports.tournament_event_competitor'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'location.mailing_address'}, {'location.location'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'book.periodical_format_period'}, {'book.periodical_format'}]
[{'book.periodical_publication_date'}, {'type.datetime'}]
[{'book.periodical_publisher_period'}, {'book.periodical_publisher'}]
[{'film.film_festival_sponsorship'}, {'film.film_festival_sponsor'}]
[{'base.newsevents.news_report'}, {'type.datetime'}]
[{'book.editorial_tenure'}, {'book.periodical_editor'}]
[{'book.editorial_tenure'}, {'book.editor_title'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'book.periodical_publisher_period'}, {'type.datetime'}]
[{'book.periodical_frequency'}, {'measurement_unit.unit_of_frequency'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'base.newsevents.news_report'}, {'base.newsevents.news_reported_event'}]
[{'book.editorial_tenure'}, {'type.datetime'}]
[{'book.editorial_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'book.periodical_format_period'}, {'book.periodical'}]
[{'book.periodical_publisher_period'}, {'book.periodical'}]
[{'book.periodical_publisher_period'}, {'type.datetime'}]
[{'film.film_festival_sponsorship'}, {'film.film_festival'}]
[{'base.newsevents.news_report'}, {'base.newsevents.news_reporting_organisation'}]
[{'book.editorial_tenure'}, {'book.periodical'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_metric_ton'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_metric_ton'}, {'type.float'}]
[{'measurement_unit.dated_kgoe'}, {'type.datetime'}]
[{'measurement_unit.dated_kgoe'}, {'dataworld.information_source'}]
[{'measurement_unit.adjusted_money_value'}, {'finance.currency'}]
[{'measurement_unit.adjusted_money_value'}, {'dataworld.information_source'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
      Current: 200 / 362
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_metric_ton'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_kgoe'}, {'type.float'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.celebrity'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'military.casualties'}, {'military.military_combatant'}]
[{'military.casualties'}, {'military.casualties_type'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_event_competition'}]
[{'base.thoroughbredracing.horse_owner_relationship'}, {'base.thoroughbredracing.thoroughbred_racehorse_owner'}]
[{'location.religion_percentage'}, {'religion.religion'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_sport'}]
[{'military.casualties'}, {'type.int'}]
[{'military.casualties'}, {'type.int'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_medal'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_games'}]
[{'military.casualties'}, {'military.military_conflict'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_athlete'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'government.national_anthem_of_a_country'}, {'government.national_anthem'}]
[{'sports.competitor_competition_relationship'}, {'sports.multi_event_tournament'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_medal'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_team'}]
[{'sports.competitor_country_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_competition_relationship'}, {'type.int'}]
[{'sports.competitor_country_relationship'}, {'sports.sport'}]
[{'sports.competitor_country_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competition'}]
[{'sports.competitor_country_relationship'}, {'sports.multi_event_tournament'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
      Current: 300 / 362
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.recurring_money_value'}, {'type.datetime'}]
[{'measurement_unit.recurring_money_value'}, {'finance.currency'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'user.skud.legal.treaty_signature'}, {'type.datetime'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure'}, {'type.datetime'}]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure'}, {'type.datetime'}]
[{'military.force_strength'}, {'military.military_conflict'}]
[{'user.skud.boats.naval_engagement_participation'}, {'user.skud.boats.warship'}]
[{'user.skud.boats.naval_engagement_participation'}, {'type.int'}]
[{'measurement_unit.recurring_money_value'}, {'measurement_unit.time_unit'}]
[{'measurement_unit.dated_index_value'}, {'dataworld.information_source'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'user.skud.legal.treaty_signature'}, {'user.skud.legal.treaty_signatory'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure'}, {'user.skud.embassies_and_consulates.ambassador'}]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure'}, {'user.skud.embassies_and_consulates.embassy'}]
[{'military.force_strength'}, {'type.int'}]
[{'user.skud.boats.naval_engagement_participation'}, {'user.skud.boats.naval_combatant'}]
[{'user.skud.boats.naval_engagement_participation'}, {'user.skud.boats.naval_engagement_outcome'}]
[{'measurement_unit.recurring_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.recurring_money_value'}, {'type.float'}]
[{'measurement_unit.dated_index_value'}, {'type.datetime'}]
[{'measurement_unit.dated_index_value'}, {'type.float'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'military.military_command'}, {'military.military_commander'}]
[{'user.skud.legal.treaty_signature'}, {'user.skud.legal.treaty'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure'}, {'location.country'}]
[{'military.force_strength'}, {'military.military_combatant'}]
[{'military.force_strength'}, {'type.datetime'}]
[{'user.skud.boats.naval_engagement_participation'}, {'user.skud.boats.naval_engagement'}]
[{'user.skud.boats.naval_engagement_participation'}, {'type.int'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_championships'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'type.int'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.track_and_field_athlete'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_championships_competition'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_country'}]
[{'base.unitednations.united_nations_body_membership'}, {'base.unitednations.united_nations_body'}]
[{'base.unitednations.united_nations_body_membership'}, {'type.datetime'}]
[{'base.unitednations.united_nations_body_membership'}, {'base.unitednations.united_nations_member_state'}]
      9 typed schemas retrieved from 362 coarse schemas.
      Calculating F1 for 9 typed schemas: {
        Current: 0 / 9
        Checking schema 0 / 9: {
          [('Main', '==', 'm.0f8l9c', ['location.location.partially_contains']), ('Type', '==', 'meteorology.forecast_zone', ['type.object.type'])]
          var_types: [{'meteorology.forecast_zone', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.type fb:meteorology.forecast_zone . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 1 / 9: {
          [('Main', '==', 'm.0f8l9c', ['location.location.contains']), ('Type', '==', 'meteorology.forecast_zone', ['type.object.type'])]
          var_types: [{'meteorology.forecast_zone', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:meteorology.forecast_zone . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 2 / 9: {
          [('Main', '==', 'm.0f8l9c', ['location.location.partially_containedby']), ('Type', '==', 'meteorology.forecast_zone', ['type.object.type'])]
          var_types: [{'meteorology.forecast_zone', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:meteorology.forecast_zone . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 3 / 9: {
          [('Main', '==', 'm.0f8l9c', ['location.location.time_zones']), ('Type', '==', 'time.time_zone', ['type.object.type'])]
          var_types: [{'time.time_zone'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.time_zones ?o1 . ?o1 fb:type.object.type fb:time.time_zone . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 2, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 4 / 9: {
          [('Main', '==', 'm.0f8l9c', ['location.location.time_zones']), ('Type', '==', 'time.defunct_time_zone', ['type.object.type'])]
          var_types: [{'time.defunct_time_zone', 'time.time_zone'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.time_zones ?o1 . ?o1 fb:type.object.type fb:time.defunct_time_zone . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 5 / 9: {
          [('Main', '==', 'm.0f8l9c', ['location.location.primarily_containedby']), ('Type', '==', 'meteorology.forecast_zone', ['type.object.type'])]
          var_types: [{'meteorology.forecast_zone', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0f8l9c fb:location.location.primarily_containedby ?o1 . ?o1 fb:type.object.type fb:meteorology.forecast_zone . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 6 / 9: {
          [('Main', '==', 'm.09rkd', ['book.newspaper.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'meteorology.forecast_zone', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'meteorology.forecast_zone', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09rkd fb:book.newspaper.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:meteorology.forecast_zone . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 7 / 9: {
          [('Main', '==', 'm.0f8l9c', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'meteorology.forecast_zone', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'meteorology.forecast_zone', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:meteorology.forecast_zone . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 8 / 9: {
          [('Main', '==', 'm.0f8l9c', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.frequency']), ('Type', '==', 'measurement_unit.time_unit', ['type.object.type'])]
          var_types: [{'measurement_unit.recurring_money_value'}, {'measurement_unit.time_unit'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0f8l9c fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.frequency ?o2 . ?o2 fb:type.object.type fb:measurement_unit.time_unit . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:44] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        3 / 9 typed schemas kept with ans_size > 0.
      } [0.001s]
      Typed level ended, resulting in 365 schemas.
    } [0.027s]
    Time level searching (total times = 0): {
      Current: 0 / 365
      FBHelper: 31940 predicate names loaded.
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'cvg.game_version.release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [{'base.thoroughbredracing.thoroughbred_racehorse.foaled', 'base.thoroughbredracing.thoroughbred_racehorse.date_of_death'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'royalty.monarch.from_date', 'royalty.monarch.to_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'boats.ship.keel_laid', 'boats.ship.launched'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.fairytales.fairy_tale.date_published'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'user.skud.nuclear_weapons.nuclear_test_series.end_date', 'user.skud.nuclear_weapons.nuclear_test_series.start_date'}]
self.var_time_preds: [{'user.skud.nuclear_weapons.nuclear_test.date'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
self.var_time_preds: [{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      Current: 100 / 365
self.var_time_preds: [{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
self.var_time_preds: [{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'book.periodical_format_period.to', 'book.periodical_format_period.from'}, set()]
self.var_time_preds: [{'book.periodical_publication_date.date'}, set()]
self.var_time_preds: [{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
self.var_time_preds: [{'film.film_festival_sponsorship.to', 'film.film_festival_sponsorship.from'}, set()]
self.var_time_preds: [{'base.newsevents.news_report.date'}, set()]
self.var_time_preds: [{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
self.var_time_preds: [{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
self.var_time_preds: [{'book.periodical_frequency.to', 'book.periodical_frequency.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.newsevents.news_report.date'}, set()]
self.var_time_preds: [{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
self.var_time_preds: [{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'book.periodical_format_period.to', 'book.periodical_format_period.from'}, set()]
self.var_time_preds: [{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
self.var_time_preds: [{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
self.var_time_preds: [{'film.film_festival_sponsorship.to', 'film.film_festival_sponsorship.from'}, {'film.film_festival.date_founded'}]
self.var_time_preds: [{'base.newsevents.news_report.date'}, set()]
self.var_time_preds: [{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
      Current: 200 / 365
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.thoroughbredracing.horse_owner_relationship.end_date', 'base.thoroughbredracing.horse_owner_relationship.start_date'}, set()]
self.var_time_preds: [{'location.religion_percentage.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
      Current: 300 / 365
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'user.skud.legal.treaty_signature.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
self.var_time_preds: [{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'user.skud.legal.treaty_signature.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
self.var_time_preds: [{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'user.skud.legal.treaty_signature.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, {'base.unitednations.united_nations_member_state.date_of_membership_dissolution', 'base.unitednations.united_nations_member_state.date_joined'}]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
      0 timed schemas retrieved from 365 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 365 schemas.
    } [0.232s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 365
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'cvg.game_version.release_date'}]
[set()]
[set()]
[set()]
[{'award.ranked_list.year_inaugurated'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_agency.date_founded'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'sports.sports_team.founded'}]
[set()]
[set()]
[set()]
[{'food.beer.first_brewed'}]
[{'base.thoroughbredracing.thoroughbred_racehorse.foaled', 'base.thoroughbredracing.thoroughbred_racehorse.date_of_death'}]
[set()]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'royalty.monarch.from_date', 'royalty.monarch.to_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[{'organization.organization.date_founded'}]
[set()]
[{'organization.organization.date_founded'}]
[set()]
[{'boats.ship.keel_laid', 'boats.ship.launched'}]
[set()]
[set()]
[set()]
[set()]
[{'base.fairytales.fairy_tale.date_published'}]
[set()]
[{'user.skud.nuclear_weapons.nuclear_test_series.end_date', 'user.skud.nuclear_weapons.nuclear_test_series.start_date'}]
[{'user.skud.nuclear_weapons.nuclear_test.date'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[set(), set()]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[set(), set()]
[set(), set()]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
[set(), set()]
[set(), {'sports.sports_team.founded'}]
[set(), set()]
[{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
[{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[set(), set()]
      Current: 100 / 365
[{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
[set(), set()]
[set(), set()]
[{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'book.periodical_format_period.to', 'book.periodical_format_period.from'}, set()]
[{'book.periodical_publication_date.date'}, set()]
[{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
[{'film.film_festival_sponsorship.to', 'film.film_festival_sponsorship.from'}, set()]
[{'base.newsevents.news_report.date'}, set()]
[{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
[{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
[{'book.periodical_frequency.to', 'book.periodical_frequency.from'}, set()]
[set(), set()]
[set(), set()]
[{'base.newsevents.news_report.date'}, set()]
[{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
[{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'book.periodical_format_period.to', 'book.periodical_format_period.from'}, set()]
[{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
[{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
[{'film.film_festival_sponsorship.to', 'film.film_festival_sponsorship.from'}, {'film.film_festival.date_founded'}]
[{'base.newsevents.news_report.date'}, set()]
[{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
      Current: 200 / 365
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[set(), set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.thoroughbredracing.horse_owner_relationship.end_date', 'base.thoroughbredracing.horse_owner_relationship.start_date'}, set()]
[{'location.religion_percentage.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
      Current: 300 / 365
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.recurring_money_value.date'}, set()]
[{'measurement_unit.recurring_money_value.date'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[set(), set()]
[{'user.skud.legal.treaty_signature.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.recurring_money_value.date'}, set()]
[{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[set(), set()]
[{'user.skud.legal.treaty_signature.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.recurring_money_value.date'}, set()]
[{'measurement_unit.recurring_money_value.date'}, set()]
[{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
[{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[set(), set()]
[{'user.skud.legal.treaty_signature.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
[{'military.force_strength.date'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, set()]
[{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, set()]
[{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, {'base.unitednations.united_nations_member_state.date_of_membership_dissolution', 'base.unitednations.united_nations_member_state.date_joined'}]
[set()]
[set(), set()]
[{'measurement_unit.recurring_money_value.date'}, set()]
      0 ordinal schemas retrieved from 365 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 365 schemas.
    } [0.008s]
    [2020-12-03 14:15:45] buffer saved.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 "United States dollar"@en ?type2 WHERE { fb:m.0f8l9c fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name "United States dollar"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
    365 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2200-2299/2291_schema].
  } [2m42.830s]
  Entering Q 2292 / 5810 [b'what kind of economy was the soviet union?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [3, 4) (economy) == m.01h56z (World_economy) {'score': 10.022352, 'source': 1.0}
      #01 Entity: [6, 8) (soviet union) == m.05vz3zq (Soviet_Union) {'score': 22145.996185, 'source': 0.0}
      #02 Type: [1, 3) (kind of) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.881879}
      #03 Type: [2, 4) (of economy) == measurement_unit.fuel_economy_unit (unit of fuel economy) {'sim': 0.84382}
      #04 Type: [3, 4) (economy) == automotive.us_fuel_economy (us fuel economy) {'sim': 0.830926}
      #05 Type: [7, 8) (union) == business.trade_union (trade union) {'sim': 0.83084}
      #06 Type: [1, 3) (kind of) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.829182}
      #07 Type: [2, 3) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #08 Type: [1, 3) (kind of) == chemistry.phase_of_matter (phase of matter) {'sim': 0.799467}
      #09 Type: [1, 3) (kind of) == astronomy.type_of_planetographic_feature (type of planetographic feature) {'sim': 0.795514}
      #10 Type: [1, 3) (kind of) == fictional_universe.type_of_fictional_setting (type of fictional setting) {'sim': 0.793135}
      #11 Type: [1, 3) (kind of) == event.type_of_public_presentation (type of public presentation) {'sim': 0.789484}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:18:28) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01h56z ?p1 ?o1 . }
        [2020-12-03 14:18:28] SPARQL hit!
        Filt_Query_Ret = 1 / 8 ( 0.000s)
        [Len-1||F1/2||2/2-1] (2020-12-03 14:18:28) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01h56z ?p1 ?o1 . ?o1 ?p2 fb:m.05vz3zq . }
          [2020-12-03 14:18:28] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01h56z ?p1 ?o1 . ?o1 ?p2 fb:m.05vz3zq . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
      } [0.009s]
      [Len-1||F2/2] (2020-12-03 14:18:28) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.05vz3zq ?p1 ?o1 . }
        [2020-12-03 14:18:28] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.05vz3zq ?p1 ?o1 . }
          Query return lines = 62
        } [0.005s]
        Filt_Query_Ret = 34 / 62 ( 0.006s)
        [Len-1||F2/2||1/2-1] (2020-12-03 14:18:28) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05vz3zq ?p1 ?o1 . ?o1 ?p2 fb:m.01h56z . }
          [2020-12-03 14:18:28] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05vz3zq ?p1 ?o1 . ?o1 ?p2 fb:m.01h56z . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.005s]
      } [0.010s]
      [Len-2||F1/2] (2020-12-03 14:18:28) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01h56z ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:28] SPARQL hit!
        Filt_Query_Ret = 0 / 83 ( 0.000s)
      } [0.000s]
      [Len-2||F2/2] (2020-12-03 14:18:28) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05vz3zq ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:28] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05vz3zq ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 813
        } [0.083s]
        Filt_Query_Ret = 71 / 813 ( 0.086s)
        [Len-2||F2/2||1/2-1] (2020-12-03 14:18:28) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05vz3zq ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01h56z . }
          [2020-12-03 14:18:28] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05vz3zq ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01h56z . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-2||F2/2||1/2-2] (2020-12-03 14:18:28) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05vz3zq ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01h56z . }
          [2020-12-03 14:18:28] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05vz3zq ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01h56z . }
            Query return lines = 0
          } [0.048s]
          Filt_Query_Ret = 0 / 0 ( 0.048s)
        } [0.048s]
      } [0.144s]
      106 coarse schemas retrieved from scratch.
      Calculating F1 for 106 coarse schemas: {
        Current: 0 / 106
        Checking schema 0 / 106: {
          [('Main', '==', 'm.01h56z', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01h56z fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01h56z fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01h56z'}
            Query return lines = 16
            Final Answer: {'The Nature of This Paradigm Dancing', 'Twilight in the Desert: The Coming Saudi Oil Shock and the World Economy', 'The Elephant and the Dragon: The Economic Rise of India and China, and What It Means for the Rest of Us', 'The China Dream: The Quest for the Last Great Untapped Market on Earth', 'Testimony: France in the Twenty-First Century', 'The Empty Cradle: How Falling Birthrates Threaten World Prosperity And What To Do About It', "The Fed: The Inside Story of How the World's Most Powerful Financial Institution Drives the Markets", 'The Box: How the Shipping Container Made the World Smaller and the World Economy Bigger', 'Megatrends Asia: Eight Asian Megatrends that Are Reshaping Our World', 'The Power of Productivity: Wealth, Poverty, and the Threat to Global Stability', 'The Commanding Heights: The Battle for the World Economy', "The White Man's Burden: Why the West's Efforts to Aid the Rest Have Done So Much Ill and So Little Good", 'The Great Depression Ahead: How to Prosper in the Crash Following the Greatest Boom in History', 'Countdown of 10 Amazing Moments from the Year 2011: No. 2 President Obama', 'Economic Puppetmasters: Lessons from the Halls of Power', 'Knowledge and the Wealth of Nations: A Story of Economic Discovery'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 1 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 3
            Final Answer: {'Communist state', 'Socialist state', 'Soviet democracy'}
            Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
          } [0.029s]
          Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
        } [0.029s]
        Checking schema 2 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Russian Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 3 / 106: {
          [('Main', '==', 'm.05vz3zq', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Central Committee of the Communist Party of the Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 4 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.dated_location.date_dissolved'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.05vz3zq fb:location.dated_location.date_dissolved ?o1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 WHERE { fb:m.05vz3zq fb:location.dated_location.date_dissolved ?o1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'1991'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 5 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 625
            Final Answer: {'Nadezhda Olizarenko', 'Valeri Grohovski', 'Diana Starkova', 'Manshuk Mametova', 'Israel Michael Sigal', 'Serhiy Chepornyuk', 'Alexander Tzinker', 'Pavlo Ksyonz', 'Giorgi Chantouria', 'Oleksandr Obrevko', 'Aleksandr Katasonov', 'Anna Astapenko', 'Alina Adams', 'Andriy Pisniy', 'Julia Gomelskaya', 'Nadezhda Kharchenko', 'Margarita Zorbala', 'Alexander Gordon', 'Pavel Palazhchenko', 'Viktor Zhdanov', 'Saulius Atmanavičius', 'Serhiy Bilozir', 'Artem Konovalov', 'Arsen Fadzayev', 'Roman Savenkov', 'Igor Cherevchenko', 'Alexander Markovich Polyakov', 'Yulia Shamalov-Berkovich', 'Viktor Nechaev', 'Vadym Kyrylov', 'Dmytro Brovkin', 'Yukhym Shkolnykov', 'Beniamin Manucharyan', 'Zurab Sakandelidze', 'Leonid Gofshtein', 'Mark Budman', "Andriy Donets'", 'Olga Letyushova', 'Gulnara Gabelia', 'Davit Lomaia', 'Orit Zuaretz', 'Stepan Atayan', 'Barys Pankrataw', 'Sergey Konenkov', 'Vladislav Lungu', 'Aleksandre Koshkadze', 'Sargis Karapetyan', 'Irina Davydova', 'Irina Kalinina', 'Alexander Brudno', 'Oleksiy Kryvoshyyiv', 'Olga Kalyuzhnaya', 'Yevgeny Zhuk', 'David B. Rivkin', 'Olexandr Buryi', 'Valeria Volodymyrivna Ivanenko', 'Alexander Knyazhinsky', 'Dmitri Kulikov', 'Sergei Kutivadze', 'Lana Parshina', 'Urmas Kirs', 'Yury Astravukh', 'Adrian Sosnovschi', 'Serhiy Zeldi', 'Ion Testemiţanu', 'Tyberii Korponai', 'Boris Leskin', 'Ivan Korponai', 'Arkady Plastov', 'Badri Spanderashvili', 'Leonid Koltun', 'Uladzimir Shuneyka', 'Anton Kolobov', 'Ihor Pokarynin', 'Peter E. Kataev', 'Olga Barnet', 'Oleg Strakhanovich', 'Ara E. Khachatryan', 'Vitali Kanevsky', 'Aleksandr Demyanenko', 'Aleksei Olegovich Alekseyev', 'Movsar Barayev', 'Roman Bondarenko', 'Olga Kremleva', 'Nino Khurtsidze', 'Yuri Barinov', 'Vereslav Eingorn', 'Iurie Priganiuc', 'Valentin Kotyk', 'Olga Novikova', 'Vadim Kirichenko', 'Nazim Aliyev', 'Vladimir Syromyatnikov', 'Michael Dumanis', 'Vladimir Tkachenko', 'Sergei Shakhrai', 'Irakli Gemazashvili', 'Yuri Bregel', 'Vladimir Chuchelov', 'Fariz Davlyatov', 'Vitaly Savelyev', 'Alla Rogova', 'Berador Abduraimov', 'Denis Romanenco', 'Denys Ovsyannikov', 'Josefine Krengel', 'Gurgen Askaryan', 'Tetyana Romanenko', 'Gennady Tumilovich', 'Ihor Chuchman', 'Roman Stepanov', 'Tamara Lazakovich', 'Sabina Akhmedova', 'Ara Mkrtchyan', 'Igors Troickis', 'Margarita Žernosekova', 'Ilia Kandelaki', 'Ruslan Baltiev', 'Oleg Antonov', 'Anastasia Poltoratskaya', 'Nina Gulyayeva', 'Sergey Ponomarev', 'Boris Rybakov', 'Alyaksandr Oreshnikow', 'Aleksandrs Glazovs', 'Oleksandr Zayets', 'Yitzhak Gagula', 'Pavlo Yanchuk', 'Mikhail Golubev', 'Gela Inalishvili', 'Alexander Doulerain', 'Lela Chichinadze', 'Alexander Bovin', 'Natasha Mozgovaya', 'Dmytro Sorokin', 'Karim Izrailov', 'Adalbert Korponai', 'Olesya Mashina', 'Serghei Rogaciov', 'Olena Khodyreva', 'Yakov Ehrlich', 'Tengiz Ugrekhelidze', 'Mämmedaly Garadanow', 'Vladimir Stepania', 'Vytautas Apanavičius', 'Aleksandr Beldinov', 'Aleksandr Syomin', 'Boris Teplov', 'Leonid Klimovskiy', 'Viktor Zemskov', 'Roland Rexviashvili', 'Yuri Tyukalov', 'Konstantin Chernyshov', 'Yuri Logvinenko', 'Rimikhan Ziyadov', 'Daniar Kenzhekhanov', 'Viktor Lazarev', 'Rene Kaas', 'Grigory Romanov', 'Bakytbek Mamatov', 'Michael Gorlovsky', 'Vladimir Makarov', 'Oleksandr Kondratyuk', 'Tatyana Dektyareva', 'Natalya Pechonkina', 'Pavlo Kutas', 'Valter Guchua', 'Shmuel Kozokin', 'Yuri Slezkine', 'Dmitriy Buzylyov-Kretso', 'Alec Mazo', 'Valery Kashuba', 'Mukhtar Mukhtarov', 'Seilda Baishakov', 'Evgeny Kolesnikov', 'Tetyana Verezubova', 'Vladimir Pribylovsky', 'Nikoloz Togonidze', 'Stepan Ghazaryan', 'Anton Volkov', 'Sandro Iashvili', 'Serhiy Zhurba', 'Alyaksandr Fyedarovich', 'Viktor Melnyk', 'Elena Fomina', 'Farhat Mustafin', 'Oleg Gazmanov', 'Andrei Bogomolov', 'Maksim Azovskiy', 'Vital Lyadzyanyow', 'Arsen Avakov', 'Audrius Kšanavičius', 'Nikolai Vasilevich Novikov', 'Vitali Yevstigneyev', 'Vyacheslav Amin', 'Ihor Nadein', 'Alyaksandr Klimenka', 'Fyodor Boltunov', 'Jafar Irismetov', 'Sergei Anashkin', 'Andrei Lavrik', 'Ruslan Magomadov', 'Alyaksandr Grenkow', 'Dmitri Klimovich', 'Sergey Kavtaradze', 'Andrey Krasnov', 'Rinat Abdulin', 'Anatoly Gribkov', 'Nikolay Kuznetsov', 'Vitali Golod', 'Tatyana Skotnikova', 'Ignat Akrachkov', 'Boris Pigovat', 'Nataliya Sukhorukova', 'Ildar Nugumanov', 'Mykhaylo Forkash', 'Andrey Balabanov', 'Sergei Neyman', 'Vladimir Fyodorov', 'Victor Comleonoc', 'Yuriy Naydovskiy', 'Oksana Andersson', 'Rustem Usanov', 'Ignat Chekmazov', 'Hikmat Khashimov', 'Levan Gvazava', 'Zaur Tagizade', 'Viktor Makeyev', 'Alexei Savinov', 'Zhana Londoner', 'Kostyantyn Balabanov', 'Vidmantas Vyšniauskas', 'Boris Kievsky', 'Svetlana Baikina', 'Asror Aliqulov', 'Gurbangeldi Durdyýew', 'Elena Filatova', 'Aleksandr Slastin', 'Aidar Kumisbekov', 'Janna Gur', 'Danique Stein', 'Shalva Mumladze', 'Yuri Semenovich Lazurkin', 'Levan Melkadze', 'Slava Tsukerman', 'Jüri Jevdokimov', 'Alexei Gorokhov', 'Dmitrijs Naļivaiko', 'Ruslan Djamshidov', 'Joseph Berger', 'Nikolai Kondratenko', 'Sergey Akhromeyev', 'Volodymyr Konovalchuk', 'Ignas Dedura', 'Baurzhan Baimukhammedov', 'Jānis Gilis', 'Karen Oganyan', 'Dina Kaminskaya', 'Mamuka Tsereteli', 'Kyrylo Tsypun', 'Tamar Nadirashvili', 'Lee Altus', 'Ishref Magomedov', 'Aleksey Jdanov', 'Alexander Sukhanov', 'Israel Brekhman', 'Volodymyr Braila', 'Sergey Petrov', 'Veronika Shulga', 'Zaynitdin Tadjiyev', 'Narek Machkalyan', 'Vladimir Tendryakov', 'Serghei Cleşcenco', 'Myroslav Bundash', 'Oleksandr Mitrofanov', 'Nikita Khokhlov', 'Anatoliy Didenko', 'Pyotr Stepanov', 'Ekaterine Gorgodze', 'Byron Habinsky', 'Vladyslav Hrinchenko', 'Evelyne Kraft', 'Victor Sokolov', 'Oksana Ryabinicheva', 'Sergei Ussoltsev', 'Goderdzi Natroshvili', 'Cholponbek Esenkul Uulu', 'Vitaliy Kafanov', 'Armen Babalaryan', 'Ihor Shopin', 'Almir Kayumov', 'Viktor Chistiakov', 'Eduard Kakosyan', 'Roman Maksymyuk', 'Iona Nikitchenko', 'Vasili Arkhipov', 'Vladimir Voinovich', 'Gennadi Yukhtin', 'Dmytro Khovbosha', 'Vital Shapyatowski', 'Oleksandr Nad', 'Andrei Sergeyevich Semyonov', 'Viktorija Budrytė', 'Mekan Nasyrow', 'Yuri Nesterov', 'Andriy Khomyn', 'Anastasia Kostyukova', 'Renat Abdulin', 'Julia Lutrova', 'S. Manoutcharian', 'Vidadi Rzayev', 'Aleksejs Šarando', 'Sergey Kudrin', 'Amy Knight', 'Nikolai Smolnikov', 'Eldar Kuliev', 'Vasyl Baranov', 'Konstantin Umansky', 'Marietta Shaginyan', 'Vladimir Semyonovich Semyonov', 'Ivan Kozoriz', 'Lyudmyla Lemeshko', 'Vyacheslav Hroznyi', 'Vitaly Daraselia', 'Aleksandr Irkhin', 'Alexei Borisov', 'Alexei Negmatov', 'Tatiana Egorova', 'Serhiy Yesin', 'Sergei Zangareev', 'Sultan Abildaev', 'Armen Tatintsyan', 'Ekaterina Nosik', 'Vladimir Horoshunov', 'Mykola Prystay', 'Yaroslav Vyshnyak', 'Aibek Orozaliev', 'Michail Elgin', 'Igor Dmitriev', 'George Grie', 'Vitaly Yurchenko', 'Darius Regelskis', 'Alexander Rekhviashvili', 'Ivan Nikolayevich Smirnov', 'Ruslan Fomin', 'Nikolai Kardashev', 'Nana Gelbakhiani', 'Farhad Veliyev', 'Begençmuhammet Kulyýew', 'Askar Abildaev', 'Joseph Karakis', 'Tokhirjon Muminov', 'Marcel Rosenberg', 'Vladimir Vapnik', 'Alexei Yuryevich Smirnov', 'Aleksandr Danilovich Aleksandrov', 'Oleksandr Chyzhevskyi', 'Anastassia Morkovkina', 'Evgeni Plushenko', 'Aleksandr Kulik', 'Aleksei Galkin', 'Julia Ivanova', 'Makhmadjon Khabibulloev', 'Nicole Remund', 'Dmitriy Klochko', 'Modestas Stonys', 'Nadezhda Myskiv', 'Igor Oprea', 'Ruslan Akhtakhanov', 'Stanislav Gustavovich Strumilin', 'Klara Luchko', 'Amiran Revishvili', 'Irakli Zoidze', 'Armen Ghazaryan', 'Levchenko Yaroslav', 'Leon Litinetski', 'Andrei Iordan', 'Vilius Lapeikis', 'Alibek Buleshev', 'Anna Linkova', 'Olga Poryadina', 'Dmytro Babenko', 'Vadim Shmelev', 'Hurshil Lutfullaev', 'Tatiana Zaitseva', 'Tengiz Sichinava', 'Boris Weisfeiler', 'Vladimir Akhalaia', 'Evgeniy Najer', 'Oleg Nikolaenko', 'Kirill Korban', 'Elxan Həsənov', 'Vitali Shuhanau', 'Serhiy Semenyuk', 'Igor Birman', 'Hovhannes Harutyunyan', 'Kirill Eydelnant', 'Elina Fuhrman', 'Kursanbek Sheratov', 'Alexander Vilenkin', 'Anton Makarenko', 'Yevgeniy Dolmatovsky', 'Saule Karibayeva', 'Victor Berco', 'Raimondas Vainoras', 'Yevgeniy Lunyov', 'Aleksandr Zhukovskiy', 'Ksenia Milevskaya', 'Denis Rodionov', 'Sergey Korovushkin', 'Olegar Fedoro', 'Marina Salye', 'Yaroslav Dumanskyi', 'Pyotr Karyshkovsky', 'Natalia Saratovtseva', 'Lyudmila Smirnova', 'Tamar Kvelidze', 'Giorgi Megreladze', 'Olga Shukshina', 'Vadym Rybalchenko', 'Ekaterina Avkhimovich', 'Emin Quliyev', 'Gia Chkhaidze', 'Gennady Riger', 'Ranet Lepik', 'Alim Ashirov', 'Baýramnyýaz Berdiýew', 'Alexei Tupolev', 'Ara Nigoyan', 'Aibek Bokoev', 'Nikita Gorbunow', 'Rustam Khojaev', 'Aleksey Shpilevsky', 'Konstantin Rausch', 'Alier Ashurmamadov', 'Ivan Silayev', 'Oleg Mokshantsev', 'Harutyun Abrahamyan', 'Valeriy Zamyatin', 'Aleksandr Petukhov', 'Sergei Mishchenko', 'Dainius Šuliauskas', 'Serhiy Rozhok', 'Faina Kirschenbaum', 'Mikhail Meerovich', 'Viktoras Olšanskis', 'Vakhid Masudov', 'Valentin Belonogov', 'Gert Olesk', 'Svetlana Tsydikova', 'Yuri Saukh', 'Anatoly Filipchenko', 'Yerahmiel Assa', 'Serhiy Maherovych', 'Vitali Milman', 'Petr Sasykov', 'Zviad Sturua', 'Pavel Suchilin', 'Didar Hajyýew', 'Natalia Shlyapina', 'Boriss Monjaks', 'Larisa Savina', 'Aleksei Guschin', 'Michael Glozman', 'Aleksey Shchigolev', 'Nikolay Timofeev-Ressovsky', 'Janek Meet', 'Vladimir Kazantsev', 'Vjačeslavs Ževnerovičs', 'Uladzimir Maroz', 'Fizuli Mammedov', 'Yulia Kornievets', 'Azamat Ishenbaev', 'Vladimir Yankilevsky', 'Zahava Gal-On', 'Ismayil Mammadov', 'Stepan Chervonenko', 'Luba Bigman', 'Andriy Vitoshynskyi', 'Anatol Teslev', 'Svitlana Frishko', 'Yevhen Ivanyak', 'Ildar Amirov', 'Aleksandr Shmarko', 'Stanislav Dubrovin', 'Marina Stepanova', 'Yuliya Novikova', 'Yuliana Fedak', 'Nikolai Fedorenko', 'Rashidjon Gafurov', 'Tatyana Shramok', 'Alexander Maxovich Shilov', 'Natalia Pertseva', 'Uraz Turakulov', 'Guram Makayev', 'Alik Haýdarow', 'Mikhail Mikhin', 'Yuri Galanskov', 'Alexander Kuznetsov', 'Vyacheslav Seletskiy', 'Arsen Tlekhugov', 'Alyaksandr Davidovich', 'Revaz Chelebadze', 'Nematjan Zakirov', 'Dumitru Popovici', 'Valeriy Legchanov', 'Artem Fedorchenko', 'Vladimir Kuzhelev', 'Vasili Ivanov', 'Vadim Zagladin', 'Viktor Savinykh', 'Taras Mykhalyk', 'Roman Ablakimov', 'Oleksandr Pikhur', 'Serhiy Shyshchenko', 'Vladyslav Sukhomlynov', 'Marat Balagula', 'Manuchar Machaidze', 'Anastasia Akimova', 'Otari Gabelia', 'Martin Vartanov', 'Omar Berdiýew', 'Ilham Yadullayev', 'Ibrahim Rabimov', 'Karen Avoyan', 'Rahym Gurbanmämmedow', 'Audrius Žuta', 'Iryna Vasylyuk', 'Sergei Kozyulin', 'Viktor Aristov', 'Oleh Karamushka', 'Anatoliy Povedenok', 'Yuri Savenko', 'Pyotr Gitselov', 'Ruslan Sydykov', 'Dmitri Karsakov', 'Sharif Nazarov', 'Dmytro Vorobyov', 'Chiang Hsiao-wen', 'Adrian Păunescu', 'Ludmila Tsukanova', 'Oleg Hromtov', 'Eduard Sakhnevich', 'Oleksiy Polyanskiy', 'Veniamin Shumeiko', 'Anna Fermanova', 'Anna Tatarinova', 'Yevgeny Zhirov', 'Khoren Veranyan', 'Ivan Milovanov', 'Vitaliy Komarnytskyi', 'Maksatmyrat Şamyradow', 'Aziz Ibrahimov', 'Alyaksandr Vishnyakow', 'Gocha Trapaidze', 'Alevtin Osipov', 'Lev Rukhin', 'Sergei Kosov', 'Viktor Pankrashkin', 'Vasyl Novohatskyi', 'Irina Selyutina', 'Anna Azarova', 'Kakhaber Gogichaishvili', 'Valeria Savinykh', 'Talant Samsaliev', 'Volodymyr Shekhovtsov', 'Agniya Barto', 'Irakli Kortua', 'Farrukh Choriev', 'Valeri Popovitch', 'Vladyslav Holopyorov', 'Ramin Guliyev', 'Gennady Lebedev', 'Arūnas Mika', 'Elena Schegaleva', 'Kola Beldy', 'Dmitri Poliaroush', 'Valentin Tugarin', 'Serhiy Silyuk', 'Georgi Vins', 'Alexandru Jicul', 'Igor Strelkov', 'Gocha Gogrichiani', 'Vladimir Gusev', 'Mark Kopytman', 'Tetyana Chorna', 'Dias Kamelov', 'Felix Vulis', 'Lembit Rajala', 'Azat Muhadow', 'Andrei Aleksandrovich Nikolayev', 'Ashot Khachatryan', 'Ýewgeniý Naboýçenko', 'Viktor Djalilov', 'Aurelijus Skarbalius', 'Vladimir Nemukhin', 'Misha Suslov', 'Kira Soltanovich', 'Tamara Mikhaylovna Smirnova', 'Jan Talesnikov', 'Aleksandr Kuchma', 'Sergei Stolyarov', 'Begaim Kirgizbaeva', 'Marina Cherkasova', 'Ludmila Engquist', 'Larisa Bogoraz', 'Marat Ajiniyazov', 'Vladimir Kotov', 'Vitali Bezrukov', 'Larisa Li', 'Alex Tal', 'Margarita Shirokova', 'Kristina Chichkala', 'Yuri Gorbachev', 'Stanislav Mikheyev', 'Alexander Nesmeyanov', 'Nikolay Gerasimovich Kuznetsov', 'Lidia Alexeyeva', 'Nadir Nabiev', 'Valery Fabrikant', 'Elena Gorbacheva', 'Yevgen Rogachov', 'Alisa Galliamova', 'Sergei Volgin', 'Vitaly Zholobov'}
            Answers = 625, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 625, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 6 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.belongs_to_combatant_group'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Allies of World War II'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 7 / 106: {
          [('Main', '==', 'm.05vz3zq', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 6
            Final Answer: {"Soviet Union men's national volleyball team", 'USSR national volleyball team', "Soviet Union women's national volleyball team", 'Soviet Union national handball team', "Soviet Union women's national handball team", "USSR women's national volleyball team"}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 8 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:olympics.olympic_athlete_affiliation.athlete ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:olympics.olympic_athlete_affiliation.athlete ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Vsevolod Bobrov'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 9 / 106: {
          [('Main', '==', 'm.05vz3zq', ['biology.breed_origin.breeds_originating_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 3
            Final Answer: {'Black Russian Terrier', 'Caucasian Shepherd Dog', 'Moscow Watchdog'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 3
            Final Answer: {'Ukrainian Language', 'Chuvash Language', 'Tatar Language'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 11 / 106: {
          [('Main', '==', 'm.05vz3zq', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Friesennot'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 12 / 106: {
          [('Main', '==', 'm.05vz3zq', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'General Secretary of the Communist Party of the Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 13 / 106: {
          [('Main', '==', 'm.05vz3zq', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Government of the Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.05vz3zq fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 WHERE { fb:m.05vz3zq fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'1922'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 15 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 15
            Final Answer: {'Latvian Soviet Socialist Republic', 'Estonian Soviet Socialist Republic', 'Armenian Soviet Socialist Republic', 'Kutaisi', "Bukharan People's Soviet Republic", "Tuvan People's Republic", 'Georgian Soviet Socialist Republic', 'Almaty Tower', 'Russian Soviet Federative Socialist Republic', 'Kharkiv', 'Moscow', 'Lithuanian Soviet Socialist Republic', 'Transcaucasian Socialist Federative Soviet Republic', 'Ukrainian SSR', 'Byelorussian Soviet Socialist Republic'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 16 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 41
            Final Answer: {'Battle of the Korsun–Cherkassy Pocket', 'Kingisepp–Gdov Offensive', 'Orsha offensives', 'Battle of Voronezh', "1991 Soviet coup d'état attempt", 'Fourth Aliyah', 'Kamenets-Podolsky Pocket', 'Battle of Rostov (1941)', 'Battle of Brody', 'Battle of Kiev', 'Lower Dnieper Offensive', 'Crimean Offensive', 'Sino-Soviet split', 'Krasnoye Selo–Ropsha Offensive', 'Taganrog during World War II', 'Sputnik 1 Mission', 'Battle of Smolensk', 'Operation Barbarossa', 'Case Blue', 'Defense of the Adzhimushkay quarry', 'Battle for Voronezh', 'Baltic Operation', 'Romanian Armies in the Battle of Stalingrad', 'Yelnya Offensive', 'Death and state funeral of Leonid Brezhnev', 'Tatsinskaya Raid', 'Operation Wotan', 'Defense of Brest Fortress', 'Operation Bagration', 'Operation Kutuzov', '1940–44 insurgency in Chechnya', 'Eastern European Anti-Communist Insurgencies', 'Sputnik program', 'Dissolution of the Soviet Union', '1977 Moscow bombings', 'Space Race', 'Axis and Soviet air operations during Operation Barbarossa', 'Project Dark Gene', 'Cold War', 'Sino-Soviet border conflict', 'Great Patriotic War'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 17 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 18 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.location.partially_containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'Europe', 'Asia'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 19 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.armed_forces'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:military.military_combatant.armed_forces ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:military.military_combatant.armed_forces ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Red Army'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 20 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'1952 Summer Olympics', '1980 Winter Olympics'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 21 / 106: {
          [('Main', '==', 'm.05vz3zq', ['base.aliens.ufo_sighting_location.ufo_sighting_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:base.aliens.ufo_sighting_location.ufo_sighting_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:base.aliens.ufo_sighting_location.ufo_sighting_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'Tbilisi-sighting', 'Dyatlov Pass incident'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 22 / 106: {
          [('Main', '==', 'm.05vz3zq', ['spaceflight.space_program_sponsor.space_programs_sponsored'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:spaceflight.space_program_sponsor.space_programs_sponsored ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:spaceflight.space_program_sponsor.space_programs_sponsored ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 8
            Final Answer: {'Voskhod programme', 'Mars program', 'Soviet space program', 'Soyuz programme', 'Sputnik program', 'Vostok programme', 'Lunokhod programme', 'Venera'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 23 / 106: {
          [('Main', '==', 'm.05vz3zq', ['spaceflight.space_agency.astronauts'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:spaceflight.space_agency.astronauts ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:spaceflight.space_agency.astronauts ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 8
            Final Answer: {'Strelka', 'Pchyolka', 'Laika', 'Zvyozdochka', 'Veterok', 'Chernushka', 'Ugolyok', 'Mushka'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 24 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Moscow'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 25 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.05vz3zq fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 WHERE { fb:m.05vz3zq fb:location.country.calling_code ?o1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'7'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 26 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.country.currency_formerly_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet ruble'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 27 / 106: {
          [('Main', '==', 'm.05vz3zq', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 85
            Final Answer: {'Normativnye materialy po kulʹture i iskusstvu', 'Das neue russische Strafgesetzbuch', 'O generalʹnom plane rekonstrukt͡s︡ii gor. Moskvy', 'Pravila tekhnicheskoi ekspluatatsii elektricheskikh stantsii i setei', 'Customs code of the USSR', 'Trudovoe ustroĭstvo invalidov v SSSR', 'Bering Straits Regional Commission', 'O korennoĭ perestroĭke upravlenii͡a︡ ėkonomikoĭ', 'Svod zakonov SSSR', 'Zakon o statuse narodnykh deputatov v SSSR', 'Okhrana truda', 'New Soviet legislation on the economy', 'Ustav zheleznykh dorog Soi͡u︡za SSR', 'Rukovodstvo dli͡a︡ konsulovʺ', 'Przepisy ruchu drogowego w ZSRR', 'The training and utilization of feldshers in the USSR', 'Grazhdanskoe zakonedatelʹstvo', 'Arms limitation', 'Sudebnik 1497 goda', 'Postavka tovarov v torgovle', 'The law on trademarks and service marks', 'The air code of the U.S.S.R', 'Sbornik mezhdunarodnykh dogovorov o vzaimnoĭ pravovoĭ pomoshchi po grazhdanskim i ugolovnym delam', 'Kapitalʹnoe stroitelʹstvo i proektirovanie', 'Statement of the Soviet Government, Sept. 21, 1963', 'Pravovai͡a︡ rabota v narodnom khozi͡a︡ĭstve', 'O rabote s pisʹmami trudi͡a︡shchikhsi͡a︡', 'Gosudarstvennoe sot͡s︡ialʹnoe strakhovanie', 'Zakonodatelʹstvo o kapitalʹnom stroitelʹstve', "Soviet legislation on children's rights", 'The federal criminal law of the Soviet Union : the basic principles of the criminal legislation, the law concerning the crimes against the state, the law concerning military crimes, the basic principles of criminal procedure', 'Zhilishchnye prava grazhdan', 'USSR government statement on March 29, 1969', 'O sobstvennosti v SSSR', 'Ugolovnoe ulozhenie', 'A reply to Peking; Soviet Government statement', 'Okhrana sot͡s︡ialisticheskoĭ sobstvennosti', 'Pension laws', 'Sudebnye ustavy 20 noi͡a︡bri͡a︡ 1864 goda', 'Space cooperation', 'Soviet civil legislation and procedure', 'Tamozhennyĭ kodeks S.S.S.R', 'The Soviet law on marriage', "Costituzione dell' U. R. S. S", 'Spravochnik delovogo cheloveka', 'Pravo na ploshchadʹ', 'Individualʹnai͡a︡ trudovai͡a︡ dei͡a︡telʹnostʹ', 'Oblozhenie obobshchestvlennogo sektora', 'Kollektivizat͡s︡ii͡a︡ selʹskogo khozi͡a︡ĭstva', 'The merchant shipping code of the USSR (1968)', 'Narodnoe obrazovanie v SSSR', 'Defense, dangerous activities', 'Khozi͡a︡ĭstvennye dogovory', 'Commercial, business, and trade laws', "The U.S.S.R. First Congress of People's Deputies", 'The Soviet Union through its laws', 'Das sowjetische Betriebsgesetz', 'Leyes y reglamentos fundamentales de la URSS', 'Maritime boundary', 'Collected legislation of the Union of Soviet Socialist Republics and the constituent union republics', 'Sbornik normativnykh aktov po morskomu transportu', 'Handbuch des gesamten russischen zivilrechts', 'Podokhodnyĭ nalog s naselenii͡a︡', 'Scientific cooperation', 'Vozdushnyĭ kodeks SSSR', 'Labour legislation in the USSR', "Principaux textes législatifs de l'URSS", 'Administrativnye shtrafy', 'La formation et utilisation des feldshers en URSS', 'Text of the new Soviet constitution', 'Kodeks torgovogo moreplavanii︠a︡ Soi︠u︡za SSR', 'Economic industrial and technical cooperation', 'Nuclear risk reduction', 'Sot□s□ialn□oe obespechenie i strakhovanie v SSSR', 'Sbornik deistvuiushchikh postanovlenii Plenumov Verkhovnykh Sudov SSSR, RSFSR i Rossiiskoi Federatsii po ugolovnym delam', 'Direct communications link', 'Proekt Zakona o gosudarstvennykh pensii͡a︡kh', 'Cultural relations, exchanges for 1989-1991', 'Sudebnyi otchet', 'Osnovy zakonodatelʹstva Soi͡u︡za SSR i soi͡u︡znykh respublik o trude', 'Novye zakony SSSR', 'Narodnye deputaty SSSR', 'Die neuen Justizgesetze der UdSSR', 'Zakon SSSR o pensionnom obespechenii grazhdan v SSSR', 'Constitution (basic law) of the Union of Socialist Soviet Republics'}
            Answers = 85, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 85, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 28 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.05vz3zq fb:location.location.area ?o1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 WHERE { fb:m.05vz3zq fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'2.24022e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 29 / 106: {
          [('Main', '==', 'm.05vz3zq', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 183
            Final Answer: {'The cultural front', 'Laissez-Faire And Communism', 'Deterrence and the revolution in Soviet military doctrine', 'Europe Central', 'Ten Days that Shook the World', 'Age of Delirium: The Decline and Fall of the Soviet Union', 'Lenin', 'Fail-Safe', 'Harry S. Truman and the war scare of 1948', 'One Day in the Life of Ivan Denisovich', 'The case of Nikolai Bukharin', 'The Great Gamble', 'Small Fires', 'The testament', 'The Routledge Atlas of Russian History', 'My Disillusionment in Russia', 'Early Cold War Spies', 'Ahead of Time', 'Peasant Russia, civil war', 'Assessing the adversary', 'The age of terror', 'The Great Terror', 'Taras Bulba', 'Russia Under the Bolshevik Regime 1919-1924', 'The Village', 'Ekaterina', 'Dossier: The Secret History of Armand Hammer', 'Policy versus the law', 'In Denial: Historians, Communism and Espionage', 'Stalin', 'Steeltown, USSR', 'Education and social mobility in the Soviet Union, 1921-1934', 'Russian culture', 'Red Storm over the Balkans', 'Russka', 'In the Casa Azul', 'The Super-Powers: The United States, Britain, and the Soviet Union - Their Responsibility for Peace', 'Mother Russia', 'Darkness at Noon', 'Staline', 'The great transition', 'What Every Radical Should Know About State Repression', 'In the blue house', 'Clever Girl', 'Barbarossa', 'From Plotzk to Boston', 'Soviet military intelligence in war', 'The Crusader', 'The formation of the Soviet Union', 'Passage into light', 'In the First Circle', 'KGB', 'The Bolsheviks in Power', 'The Spanish Civil War, The Soviet Union, and Communism', 'The Long Peace', 'King, Queen, Knave', 'Chronique du mensonge communiste', 'The Bolshevik Myth', 'War of the century', 'The Gates of November: Chronicles of the Slepak Family', 'Natasha', 'Thou shalt kill', 'The Main Enemy', 'Bukharin and the Bolshevik Revolution', 'Detente and confrontation', 'Doctor Zhivago', 'The turning', 'The Road to Terror: Stalin and the Self-Destruction of the Bolsheviks, 1932-1939', 'First Russia, Then Tibet', 'The Challenge Of Russia', 'The Russian Revolution', 'Year One of the Russian Revolution', 'The dream that failed', 'The collapse of Soviet communism', '""Left-Wing"" Communism: An Infantile Disorder', 'Von Petersburg bis Budapest', 'Autopsy For An Empire: The Seven Leaders Who Built the Soviet Regime', 'Venona: Decoding Soviet Espionage in America', 'The impossible journey', 'The Discovery of Muscovy', 'Stalin a Critical Survey of Bolshevism', 'Economic Growth in Japan and the USSR', 'Armageddon averted', 'The dancer defects', 'Cancer Ward', 'Travels with a Hungry Bear: A Journey to the Russian Heartland', 'Russian Spacecraft Pocket Space Guide', 'Russia, the Soviet Union, and the United States', 'Reds: McCarthyism in Twentieth-Century America', 'The hidden hand', 'The Harvest of Sorrow', 'Russian Rambles', 'Space race', 'Everyday Stalinism', 'Khrushchev', 'The Cultural Gradient', 'The Great Game', 'The Green Lantern: A Romance of Stalinist Russia', 'The Volga Germans', 'Russia and the formation of the Romanian national state, 1821-1878', 'The Unknown Lenin', 'From Lenin to Stalin', 'The dark valley : a panorama of the 1930s', 'The Russian revolution', 'Heart of a Dog', 'The mystery of Olga Chekhova', 'Rulers and Victims: The Russians in the Soviet Union', 'The Jew accused', 'The Bolsheviks come to power', 'Winter garden', 'The decision to use the atomic bomb and the architecture of an American myth', 'Persuasive images', 'A World Transformed: The Collapse of the Soviet Empire, The Unification of Germany, Tiananmen Square, The Gulf War', 'The Collapse of the Soviet Military', 'The Soviet experiment', 'Khrushchev: The Man and His Era', 'The Gulag Archipelago', 'Arrested Voices: Resurrecting the Disappeared Writers of the Soviet Regime', 'Rethinking the Soviet Experience', 'Bolsheviks and British Jews', 'The dream life of Sukhanov', 'The furies', 'The making of modern Russia', 'With God in Russia', 'We the Living', 'American Communism and Soviet Russia', 'The Life and Extraordinary Adventures of Private Ivan Chonkin', 'Colossus reborn', 'States and Social Revolutions', 'Soviet military operational art', 'The Russian Century', 'The Jews of silence', 'The rise and fall of the Soviet Empire', 'Stumbling colossus', 'Voices of Glasnost', 'The Military Strategy of the Soviet Union', 'Vixi: Memoirs of a Non-Belonger', "The cult of Ivan the terrible in Stalin's Russia", 'The Russian Album', 'Tomorrow Will Come', 'Homeward my heart', 'Red victory', 'Winter in Moscow', 'Operation Schneewolf.', 'Art and revolution', 'The United States and the Origins of the Cold War, 1941-1947', 'Afghan wars, 1839-1992', 'Nicholas and Alexandra', 'Interpreting the Russian Revolution', 'The White Nights of St.Petersburg', 'Soviet Russia', 'At the Highest Levels', 'Bread of exile', 'Stalin in Power', 'War and Peace', 'The Commissariat of Enlightenment', 'The Master and Margarita', 'The revenge of the past', 'Julia and the Third Bad Thing', 'The End of Commitment: Intellectuals, Revolutionaries, and Political Morality', 'Day Before Midnight', 'Valse des fleurs', 'Prelude to revolution', 'Glory', 'Koba the dread', 'Streets of gold', 'Spain Betrayed: The Soviet Union in the Spanish Civil War', 'Mary', 'Magnetic Mountain', 'Setting the East ablaze', 'The Russian Anarchists', 'Gorbachev and Yeltsin as leaders', 'Yezhov', 'Russia in the Shadows', 'The Unquiet Ghost', 'The secret state', 'Comrade J', 'Flawed Succession', 'The Russian Worker', 'Burying the sun', 'My dissillusionment in Russia', 'The Whisperers'}
            Answers = 182, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 182, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 30 / 106: {
          [('Main', '==', 'm.05vz3zq', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'United Nations'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 31 / 106: {
          [('Main', '==', 'm.05vz3zq', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Communist Party of the Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 32 / 106: {
          [('Main', '==', 'm.05vz3zq', ['base.rivalries.rival.rivals'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:base.rivalries.rival.rivals ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:base.rivalries.rival.rivals ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'Space Race', 'US vs. USSR'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 33 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.skud.nuclear_weapons.nuclear_power.nuclear_test_series'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:user.skud.nuclear_weapons.nuclear_power.nuclear_test_series ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:user.skud.nuclear_weapons.nuclear_power.nuclear_test_series ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'The K Project'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 34 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.skud.nuclear_weapons.nuclear_power.nuclear_tests'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:user.skud.nuclear_weapons.nuclear_power.nuclear_tests ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05vz3zq fb:user.skud.nuclear_weapons.nuclear_power.nuclear_tests ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'Chagan', 'Tsar Bomba'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 35 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 11
            Final Answer: {'2720', '2930', '1625', '1486', '1705', '2090', '1685', '1967', '2417', '1823', '2909'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 36 / 106: {
          [('Main', '==', 'm.05vz3zq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 37 / 106: {
          [('Main', '==', 'm.05vz3zq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 3
            Final Answer: {'Premier', 'Foreign Minister', 'Chairman'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 38 / 106: {
          [('Main', '==', 'm.05vz3zq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'Central Committee of the Communist Party of the Soviet Union', 'Government of the Russian Soviet Federative Socialist Republic'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 39 / 106: {
          [('Main', '==', 'm.05vz3zq', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 40 / 106: {
          [('Main', '==', 'm.05vz3zq', ['organization.organization_member.member_of', 'organization.organization_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.to ?o2 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'1939', '1991'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 41 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 162
            Final Answer: {'Kingisepp–Gdov Offensive', 'Ethio-Somali War', 'Battles of Zhawar', 'Battle of Lima Site 85', 'East Prussian Offensive', 'Battle of Moscow', 'Battle of Rostov (1941)', 'Battle of Salla', 'Battle of Brody', 'Minsk Offensive', 'Battle of Petsamo', 'Invasion of Poland', 'Taganrog during World War II', 'Toropets–Kholm Offensive', 'Nicaraguan Revolution', 'Mogilev Offensive', 'Demyansk Pocket', 'The War That Came Early', 'Dnieper–Carpathian Offensive', 'Gumbinnen Operation', 'Battle of Memel', 'Operation Barbarossa', 'Operation Hannover', 'Battle of Krivasoo', 'Cambodian–Vietnamese War', 'Operation Ostra Brama', 'Narva Offensive (1–4 March 1944)', 'Tatsinskaya Raid', 'Operation Bagration', 'First Indochina War', 'Estonia in World War II', 'Operation Doppelkopf', 'Soviet withdrawal from Afghanistan', 'Battle of Krasny Bor', 'Operation Arctic Fox', 'First Battle of Târgu Frumos', 'Battle of Paju', 'Ostrogozhsk–Rossosh Offensive', 'Battle of Podu Iloaiei', 'Battle of Suomussalmi', 'Belostock Offensive', 'Great Patriotic War', 'Osovets Offensive', 'Polotsk Offensive', 'Battle of Voronezh', 'Battle of Porkuni', 'Kamenets-Podolsky Pocket', 'Baltic Offensive', 'Lower Dnieper Offensive', 'Kengir uprising', 'Operation Solstice', 'Operation Platinum Fox', 'Narva Offensive', 'Battle of Massawa', 'Riga Offensive', 'Korean War', 'Second Battle of Târgu Frumos', 'Eastern Front', 'Petsamo–Kirkenes Offensive', 'Battle of Narva', 'Lvov–Sandomierz Offensive', 'Battle of Bautzen', 'Vistula–Oder Offensive', 'Soviet invasion of Manchuria', 'Battle of Kabul', 'Battle of Stalingrad', 'Šiauliai Offensive', 'Yelnya Offensive', 'Battle of Laagna', 'War of Attrition', 'Soviet–Japanese border conflicts', 'Battle of Tannenberg Line', 'Warsaw Ghetto Uprising', 'Battle of Lake Khasan', 'Heiligenbeil Pocket', 'Battle of Auvere', 'Nagykanizsa–Körmend Offensive', 'Battle for Narva Bridgehead', 'Battles of Khalkhin Gol', 'Battle of Wilno', 'Chadian–Libyan conflict', 'Lower Silesian Offensive', 'Command & Conquer: Red Alert 2', 'Battle of Prokhorovka', 'Upper Silesian Offensive', 'Battle of Kursk', 'Aerial engagements of the Second Sino-Japanese War', 'Bobruysk Offensive', 'First Quarter Storm', 'Badaber Uprising', 'Uprising of 1953 in East Germany', 'Tallinn Offensive', 'Battle of Berlin', 'Battle for Velikiye Luki', 'Battle of Tolvajärvi', 'Krasnoye Selo–Ropsha Offensive', 'East Pomeranian Offensive', 'Operation Rimon 20', 'Evacuation of East Prussia', 'Battle of Studzianki', 'Battle of Slivice', 'Attack on the Sui-ho Dam', 'Estonian Liberation War', 'Siege of Sevastopol', 'Defense of the Adzhimushkay quarry', 'Tartu Offensive', 'Battle of Afabet', 'Operation Wotan', 'Race to Berlin', 'Battle of Raseiniai', 'Operation Storm-333', 'Battle of Păuliş', 'Battle of Wytyczno', 'Bay of Pigs Invasion', 'North Vietnamese invasion of Laos', 'Lublin–Brest Offensive', 'Second Battle of Kharkov', 'Battle of Vyborg Bay', 'Third Battle of Kharkov', 'First Battle of Kharkov', 'Operation Silver Fox', 'Battle of Turda', 'Samland Offensive', 'Battle of Szack', 'Battle of the Transdanubian Hills', 'Soviet war in Afghanistan', 'Battle of the Korsun–Cherkassy Pocket', "1991 Soviet coup d'état attempt", 'Laotian Civil War', 'World War II', 'Vitebsk–Orsha Offensive', 'Battle of Utria', 'Angolan Civil War', 'Battle in Berlin', 'Battle of Kiev', 'Vietnam War', 'Siege of Odessa', 'Winter War', 'Siege of Barentu', 'August Uprising', 'Iran–Iraq War', 'Operation Ivory Coast', 'Hungarian Revolution of 1956', 'Jassy–Kishinev Offensive', 'Baltic Operation', 'Second Sino-Japanese War', 'Romanian Armies in the Battle of Stalingrad', 'Defense of Brest Fortress', 'Operation München', 'Greek Civil War', 'Convoy PQ 17', 'Battle of Lvov', 'Battle of Nanking', 'Moonsund Landing Operation', 'Cold War', 'First Jassy–Kishinev Offensive', 'Ethiopian Civil War', 'Spanish Civil War', 'Battle of Königsberg'}
            Answers = 159, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 159, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 42 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 36
            Final Answer: {'Taiwan', "Tuvan People's Republic", 'Mexico', 'North Korea', 'Greece', 'Kingdom of Romania', 'Canada', 'Democratic Republic of Afghanistan', 'Cuba', 'Russia', 'Yugoslavia', 'Pathet Lao', 'Nazi Germany', 'United States of America', 'Khmer Rouge', 'Norway', 'Poland', 'Kingdom of Bulgaria', 'United Arab Republic', 'China', 'United Kingdom', 'Netherlands', 'Bulgaria', 'Brazil', 'Slovak Republic', 'Czechoslovakia', 'France', 'Viet Cong', 'Belgium', 'Palestine Liberation Organization', 'New Zealand', 'Germany', 'Australia', 'North Vietnam', 'South Africa'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 43 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.military_commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 9
            Final Answer: {'Cuban missile crisis', 'Battle of Kursk', 'World War II', 'Battle of Berlin', 'Korean War', 'Winter War', 'Invasion of Poland', 'Hungarian Revolution of 1956', 'Great Patriotic War'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 44 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:28] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 45 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 44
            Final Answer: {'Nino Salukvadze', 'Tamara Fedosova-Pogozheva', 'Viktor Romanov', 'Viktor Leontyev', 'Yelena Shevchenko', 'Servard Emirzian', 'Yelena Miroshina', 'Vladimir Aleinik', 'Elena Kudashova', 'Elena Vaytsekhovskaya', 'Natalya Zasulskaya', 'Vladislav Nelyubin', 'Liana Tsotadze', 'Olessya Barel', 'Ninel Krutova', 'Igor Tselovalnikov', 'David Hambartsumyan', 'Irina Kalinina', 'Irina Minkh', 'Irina Sumnikova', 'Otar Dadunashvili', 'Alzhan Zharmukhamedov', 'Olga Buyakina', 'Natalya Kuznetsova-Lobanova', 'Lyudmila Gromova', 'Natalya Voronova', 'Vladimir Leonov', 'Vitalija Tuomaite', 'Aleksandr Panfilov', 'Aleksandra Leonova', 'Galina Savitskaya', 'Vladimir Vasin', 'Sergei Kopylov', 'Sergey Koplyakov', 'Aleksandr Kosenkov', 'Galina Kreft', 'Irina Gerlits', 'Albert Oganezov', 'Galina Zybina', 'Olga Zhevkova', 'Rostislav Vargashkin', 'Aleksandr Portnov', 'Olga Yakovleva', 'Larisa Moskalenko'}
            Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 46 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 47 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.skud.embassies_and_consulates.embassy.ambassadors', 'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.from_date ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'1948', '1953'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 48 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.skud.embassies_and_consulates.embassy.ambassadors', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.to_date ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.to_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'1952'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 49 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.force_deployments', 'military.force_strength.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 4
            Final Answer: {'Vietnam War', 'Battle of Kursk', 'Battle of Tolvajärvi', 'Winter War'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 50 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.casualties', 'military.casualties.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 51 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.casualties', 'military.casualties.type_of_casualties'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.type_of_casualties ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.type_of_casualties ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'Military - Dead', 'Military - Wounded'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 52 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 19
            Final Answer: {'1964 Summer Olympics', '1960 Summer Olympics', '1976 Winter Olympics', '1964 Winter Olympics', '1976 Summer Olympics', '1968 Winter Olympics', '1988 Summer Olympics', '1980 Summer Olympics', '1980 Winter Olympics', '1956 Summer Olympics', '1972 Summer Olympics', '1968 Summer Olympics', '1992 Winter Olympics', '1960 Winter Olympics', '1984 Winter Olympics', '1972 Winter Olympics', '1952 Summer Olympics', '1956 Winter Olympics', '1988 Winter Olympics'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 53 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 758
            Final Answer: {'Boxing at the 1972 Summer Olympics - Middleweight', "Canoeing at the 1960 Summer Olympics – Women's K-1 500 metres", "Speed Skating at the 1956 Winter Olympics - Men's 1500m", "Athletics at the 1968 Summer Olympics - Women's High Jump", "Athletics at the 1972 Summer Olympics - Women's 800 metres", "Weightlifting at the 1956 Summer Olympics - Men's Light Heavyweight 75-82.5 kg", "Shooting at the 1964 Summer Olympics - Men's 300 metre rifle, three positions", "Weightlifting at the 1976 Summer Olympics - Men's Middle Heavyweight  82.5-90 kg", "Athletics at the 1964 Summer Olympics – Men's decathlon", "Weightlifting at the 1964 summer Olympics - Men's Heavyweight +90 kg", "Wrestling at the 1968 Summer Olympics - Men's Greco-Roman Bantamweight", "Canoeing at the 1980 Summer Olympics – Men's C-1 500 metres", "Athletics at the 1980 Summer Olympics - Women's Javelin Throw", "Wrestling at the 1988 Summer Olympics - Men's Freestyle Featherweight", "Judo at the 1988 Summer Olympics - Men's Extra Lightweight (-60kg)", "Wrestling at the 1952 Summer Olympics - Men's Freestyle Heavyweight", "Gymnastics at the 1968 Summer Olympics – Men's vault", "Speed Skating at the 1980 Winter Olympics - Men's 500m", "Gymnastics at the 1952 Summer Olympics - Women's Uneven Bars", "Archery at the 1972 Summer Olympics – Women's individual", "Weightlifting at the 1988 Summer Olympics - Men's Bantamweight 52-56 kg", 'Boxing at the 1960 Summer Olympics - Light Middleweight', "Gymnastics at the 1976 Summer Olympics – Men's pommel horse", "Wrestling at the 1976 Summer Olympics - Men's Greco-Roman Light Flyweight", "Wrestling at the 1988 Summer Olympics - Men's Freestyle Welterweight", "Swimming at the 1980 Summer Olympics – Women's 100 metre breaststroke", 'Boxing at the 1968 Summer Olympics - Welterweight', "Gymnastics at the 1956 Summer Olympics – Men's rings", "Wrestling at the 1980 Summer Olympics - Men's freestyle Super Heavyweight", "Archery at the 1980 Summer Olympics - Men's Individual", "Canoeing at the 1956 Summer Olympics – Men's K-1 1000 metres", "Cycling at the 1960 Summer Olympics – Men's team pursuit", 'Boxing at the 1968 Summer Olympics -  Bantamweight', "Gymnastics at the 1972 Summer Olympics – Women's balance beam", "Athletics at the 1956 Summer Olympics – Men's 50 kilometres walk", "Wrestling at the 1972 Summer Olympics – Men's Greco-Roman 100 kg", "Weightlifting at the 1956 Summer Olympics - Men's Lightweight 60-67.5 kg", "Wrestling at the 1968 Summer Olympics - Men's Freestyle Heavyweight", "Athletics at the 1972 Summer Olympics - Men's Triple Jump", "Cross Country Skiing at the 1992 Winter Olympics - Women's 30 km freestyle", "Gymnastics at the 1952 Summer Olympics - Women's Vault", "Athletics at the 1956 Summer Olympics - Men's 400 metres", 'Equestrian at the 1972 Summer Olympics - Dressage, Individual', "Wrestling at the 1952 Summer Olympics - Men's Greco-Roman Bantamweight", 'Boxing at the 1988 Summer Olympics - Light Welterweight', "Wrestling at the 1964 Summer Olympics - Men's Freestyle Light Heavyweight", "Speed Skating at the 1980 Winter Olympics - Men's 1000m", "Gymnastics at the 1980 Summer Olympics – Women's Floor", "Cross Country Skiing at the 1984 Winter Olympics - Men's 30km", "Canoeing at the 1968 Summer Olympics – Men's C-1 1000 metres", 'Boxing at the 1964 Summer Olympics – Light middleweight', "Athletics at the 1952 Summer Olympics - Women's Javelin Throw", "Athletics at the 1956 Summer Olympics - Women's Long Jump", "Wrestling at the 1952 Summer Olympics - Men's Greco-Roman Flyweight", "Athletics at the 1988 Summer Olympics – Women's 3000 metres", "Swimming at the 1976 Summer Olympics – Men's 100 metre breaststroke", 'Boxing at the 1964 Summer Olympics – Flyweight', "Weightlifting at the 1980 Summer Olympics - Men's Bantamweight 52-56 kg", "Shooting at the 1952 Summer Olympics - Men's 50 metre rifle, three positions", "Speed Skating at the 1980 Winter Olympics - Women's 500m", "Speed Skating at the 1972 Winter Olympics - Men's 500m", "Cycling at the 1980 Summer Olympics - Men's 1000m Time Trial", "Shooting at the 1968 Summer Olympics - Men's 50 metre rifle, three positions", "Swimming at the 1972 Summer Olympics - Women's 100 metre breaststroke", "Wrestling at the 1956 Summer Olympics - Men's Greco-Roman Featherweight", "Wrestling at the 1972 Summer Olympics - Men's freestyle Super Heavyweight", "Athletics at the 1960 Summer Olympics – Men's hammer throw", "Speed Skating at the 1960 Winter Olympics - Men's 10000m", "Gymnastics at the 1960 Summer Olympics – Women's floor", 'Wrestling at the 1952 Summer Olympics - Greco-Roman Heavyweight', "Weightlifting at the 1956 Summer Olympics - Men's Featherweight 56-60 kg", "Gymnastics at the 1968 Summer Olympics – Women's balance beam", "Speed Skating at the 1984 Winter Olympics - Men's 10000m", "Cycling at the 1988 Summer Olympics - Men's Individual Pursuit", "Athletics at the 1988 Summer Olympics – Men's high jump", "Biathlon at the 1964 Winter Olympics - Men's 20km Individual", "Wrestling at the 1960 Summer Olympics - Men's Greco-Roman Lightweight", "Wrestling at the 1968 Summer Olympics - Men's Greco-Roman Heavyweight", "Athletics at the 1980 Summer Olympics – Men's 400 metres hurdles", "Cross Country Skiing at the 1960 Winter Olympics - Women's 10km", 'Boxing at the 1956 Summer Olympics - Light Welterweight', "Gymnastics at the 1988 Summer Olympics – Men's artistic individual all-around", "athletics at the 1968 Summer Olympics - Men's Hammer Throw", "Cross Country Skiing at the 1984 Winter Olympics -Women's 10km", "Gymnastics at the 1960 Summer Olympics – Men's parallel bars", "Wrestling at the 1968 Summer Olympics - Men's Freestyle Light Heavyweight", "Biathlon at the 1960 Winter Olympics - Men's 20km Individual", "Athletics at the 1964 Summer Olympics – Men's high jump", "Gymnastics at the 1956 Summer Olympics – Women's uneven bars", "Athletics at the 1952 Summer Olympics - Men's 3000 metre Steeplechase", "Judo at the 1988 Summer Olympics - Men's Heavyweight (+95kg)", 'Boxing at the 1952 Summer Olympics - Flyweight', "Cross Country Skiing at the 1976 Winter Olympics - Women's 5km", "Athletics at the 1988 Summer Olympics – Women's high jump", "Athletics at the 1956 Summer Olympics - Women's Javelin Throw", "Cross Country Skiing at the 1992 Winter Olympics -Women's 10km pursuit", "Weightlifting at the 1988 Summer Olympics - Men's Light Heavyweight 75-82.5 kg", "Athletics at the 1960 Summer Olympics - Women's discus throw", 'Boxing at the 1956 Summer Olympics - Heavyweight', "Athletics at the 1988 Summer Olympics – Men's discus throw", "Gymnastics at the 1980 Summer Olympics – Women's artistic individual all-around", "Wrestling at the 1988 Summer Olympics - Men's Greco-Roman Lightweight", "Gymnastics at the 1956 Summer Olympics – Men's parallel bars", "Athletics at the 1956 Summer Olympics – Men's hammer throw", "Gymnastics at the 1968 Summer Olympics – Women's floor", "Athletics at the 1988 Summer Olympics – Women's shot put", "Swimming at the 1956 Summer Olympics – Men's 200 metre breaststroke", "Swimming at the 1968 Summer Olympics – Men's 100 metre breaststroke", "Athletics at the 1968 Summer Olympics - Men's 20 km Walk", 'Boxing at the 1980 Summer Olympics - Light Middleweight', "Gymnastics at the 1980 Summer Olympics – Men's Vault", "Swimming at the 1988 Summer Olympics – Men's 100 metre backstroke", "Athletics at the 1956 Summer Olympics - Men's Decathlon", "Diving at the 1976 Summer Olympics – Men's 10 metre platform", "Fencing at the 1960 Summer Olympics - Women's Foil, Individual", 'Shooting at the 1988 Summer Olympics – Trap', "Rowing at the 1980 Summer Olympics - Women's Single Sculls", "Speed Skating at the 1956 Winter Olympics - Men's 5000m", "Cross-Country Skiing at the 1976 Winter Olympics - Men's 15km", "Cycling at the 1988 Summer Olympics - Men's Sprint", "Diving at the 1976 Summer Olympics – Men's 3 metre springboard", "Weightlifting at the 1972 Summer Olympics - Men's Lightweight 60-67.5 kg", "Athletics at the 1980 Summer Olympics – Men's javelin throw", "Fencing at the 1976 Summer Olympics - Women's Foil, Individual", "Freestyle Skiing at the 1992 Winter Olympics - Women's Moguls", "Cross Country Skiing at the 1964 Winter Olympics - Women's 5km", "Wrestling at the 1956 Summer Olympics - Men's Freestyle Middleweight", "Gymnastics at the 1952 Summer Olympics - Men's Parallel Bars", "Wrestling at the 1960 Summer Olympics - Men's Greco-Roman Featherweight", "Gymnastics at the 1972 Summer Olympics – Men's pommel horse", "Athletics at the 1972 Summer Olympics – Men's 800 metres", "Shooting at the 1960 Summer Olympics – Men's 50 metre rifle three positions", "Gymnastics at the 1952 Summer Olympics - Men's artistic individual all-around", "Figure Skating at the 1972 Winter Olympics - Men's Singles", "Weightlifting at the 1972 Summer Olympics - Men's Featherweight 56-60 kg", "Wrestling at the 1972 Summer Olympics - Men's Greco-Roman Lightweight", "Biathlon at the 1980 Winter Olympics - Men's 20km Individual", "Swimming at the 1980 Summer Olympics – Men's 1500 metre freestyle", "Athletics at the 1988 Summer Olympics – Women's long jump", "Gymnastics at the 1960 Summer Olympics – Men's rings", "Cross Country Skiing at the 1988 Winter Olympics - Women's 5km", "Gymnastics at the 1956 Summer Olympics – Men's vault", 'Boxing at the 1988 Summer Olympics - Flyweight', "Fencing at the 1964 Summer Olympics - Men's Sabre, Individual", "Wrestling at the 1988 Summer Olympics - Men's Greco-Roman Super Heavyweight", "Speed Skating at the 1960 Winter Olympics - Men's 5000m", "Athletics at the 1960 Summer Olympics - Women's shot put", "Canoeing at the 1964 Summer Olympics – Women's K-1 500 metres", "Wrestling at the 1980 Summer Olympics - Men's Freestyle Bantamweight", 'Shooting at the 1980 Summer Olympics - Trap Shooting', "Athletics at the 1972 Summer Olympics - Women's Discus Throw", "Wrestling at the 1960 Summer Olympics - Men's Freestyle Middleweight", "Cross Country Skiing at the 1980 Winter Olympics - Women's 5km", "Athletics at the 1980 Summer Olympics – Women's 200 metres", "Weightlifting at the 1988 Summer Olympics - Men's Super Heavyweight +110 kg", "Judo at the 1972 Summer Olympics - Men's Half Middleweight (70kg)", "Gymnastics at the 1964 Summer Olympics - Women's Vault", "Shooting at the 1968 Summer Olympics - Men's 25 metre rapid fire pistol", "Wrestling at the 1976 Summer Olympics - Men's freestyle Middleweight", "Gymnastics at the 1960 Summer Olympics – Men's vault", "Wrestling at the 1952 Summer Olympics - Men's Greco-Roman Light Heavyweight", "Gymnastics at the 1964 Summer Olympics - Women's Floor", "Wrestling at the 1956 Summer Olympics - Men's Greco-Roman Light Heavyweight", "Rowing at the 1956 Summer Olympics - Men's Single Sculls", "Wrestling at the 1988 Summer Olympics - Men's Freestyle Bantamweight", "Cross Country Skiing at the 1988 Winter Olympics -Women's 10km", "Swimming at the 1968 Summer Olympics - Women's 200 metre breaststroke", "Athletics at the 1988 Summer Olympics – Men's triple jump", "Gymnastics at the 1980 Summer Olympics – Men's pommel horse", "Weightlifting at the 1952 Summer Olympics - Men's Middle Heavyweight  82.5-90 kg", "Wrestling at the 1980 Summer Olympics - Men's freestyle Flyweight", "Rowing at the 1964 Summer Olympics - Men's Single sculls", "Weightlifting at the 1980 Summer Olympics - Men's Middleweight 67.5-75 kg", "Speed Skating at the 1968 Winter Olympics - Women's 1000m", "Speed Skating at the 1976 Winter Olympics - Men's 1500m", "Gymnastics at the 1980 Summer Olympics – Men's Horizontal Bar", "Gymnastics at the 1976 Summer Olympics – Women's Floor", "Gymnastics at the 1960 Summer Olympics - Men's Floor Exercises", "Athletics at the 1976 Summer Olympics – Men's 100 metres", "Wrestling at the 1988 Summer Olympics - Men's Greco-Roman Featherweight", 'Boxing at the 1980 Summer Olympics - Middleweight', "Judo at the 1964 Summer Olympics – Men's +80 kg", 'Boxing at the 1952 Summer Olympics - Light Heavyweight', "Gymnastics at the 1956 Summer Olympics – Men's pommel horse", "Gymnastics at the 1964 Summer Olympics - Men's artistic individual all-around", "Judo at the 1980 Summer Olympics - Men's Half Middleweight (78kg)", "Weightlifting at the 1964 summer Olympics - Men's Middleweight 67.5-75 kg", "Wrestling at the 1988 Summer Olympics - Men's Greco-Roman Middleweight", "Athletics at the 1976 Summer Olympics - Men's 400 metre hurdles", "Wrestling at the 1964 summer Olympics - Men's Freestyle Welterweight", "Canoeing at the 1956 Summer Olympics – Women's K-1 500 metres", "Figure Skating at the 1992 Winter Olympics - Men's Singles", "Weightlifting at the 1956 Summer Olympics - Men's Bantamweight -56 kg", "Wrestling at the 1960 Summer Olympics - Men's Greco-Roman Heavyweight", "Basketball at the 1988 Summer Olympics - Men's tournament", "Speed Skating at the 1976 Winter Olympics - Men's 1000m", "Athletics at the 1964 Summer Olympics - Men's 20 km walk", "Rowing at the 1960 Summer Olympics - Men's Single Sculls", 'Sailing at the 1968 Summer Olympics - Finn', 'Judo at the 1972 Summer Olympics - Open Category', 'Basketball at the 1972 Summer Olympics', "Athletics at the 1972 Summer Olympics - Men's Decathlon", "Canoeing at the 1956 Summer Olympics – Men's C-1 1000 metres", "Wrestling at the 1972 Summer Olympics - Men's freestyle Middleweight", "Cross-Country Skiing at the 1964 Winter Olympics - Men's 30km", "Cross-Country Skiing at the 1956 Winter Olympics - Men's 30km", "Gymnastics at the 1976 Summer Olympics – Men's artistic individual all-around", "Athletics at the 1960 Summer Olympics - Men's 10000 metres", "Athletics at the 1980 Summer Olympics – Men's long jump", "Gymnastics at the 1968 Summer Olympics – Men's horizontal bar", "Fencing at the 1976 Summer Olympics - Men's Sabre, Individual", "Speed Skating at the 1964 Winter Olympics -Women's 1000m", "Athletics at the 1960 Summer Olympics - Men's triple jump", "Judo at the 1980 Summer Olympics - Men's Half Lightweight  (65kg)", "Gymnastics at the 1964 Summer Olympics - Men's Vault", "Weightlifting at the 1988 Summer Olympics - Men's First Heavyweight 90-100 kg", "Shooting at the 1972 Summer Olympics - Men's Skeet", "Figure Skating at the 1976 Winter Olympics - Men's Singles", "Swimming at the 1976 Summer Olympics – Men's 400 metre freestyle", "Gymnastics at the 1952 Summer Olympics - Men's pommel horse", "Gymnastics at the 1980 Summer Olympics – Men's artistic individual all-around", "Speed Skating at the 1976 Winter Olympics - Men's 500m", "Wrestling at the 1976 Summer Olympics - Men's Freestyle Bantamweight", "Athletics at the 1980 Summer Olympics – Men's hammer throw", "Athletics at the 1980 Summer Olympics – Men's 800 metres", "Cross-Country Skiing at the 1968 Winter Olympics - Men's 50km", "Gymnastics at the 1968 Summer Olympics – Women's Vault", "Wrestling at the 1976 Summer Olympics - Men's freestyle Lightweight", "Athletics at the 1972 Summer Olympics - Men's Javelin Throw", "Wrestling at the 1980 Summer Olympics – Men's Greco-Roman 52 kg", "Athletics at the 1964 Summer Olympics – Men's javelin throw", "Weightlifting at the 1972 Summer Olympics - Men's Bantamweight 52-56 kg", "Speed Skating at the 1964 Winter Olympics - Men's 1500m", "Cycling at the 1980 Summer Olympics - Men's Sprint", "Luge at the 1988 Winter Olympics - Men's Singles", "Cycling at the 1960 Summer Olympics - Men's individual road race", "Gymnastics at the 1960 Summer Olympics – Women's uneven bars", "Gymnastics at the 1960 Summer Olympics – Women's balance beam", "Cycling at the 1972 Summer Olympics - Men's Sprint", "Weightlifting at the 1960 Summer Olympics - Men's Heavyweight +90 kg", "Swimming at the 1988 Summer Olympics – Men's 1500 metre freestyle", "Canoeing at the 1956 Summer Olympics – Men's C-1 10000 metres", "Weightlifting at the 1988 Summer Olympics - Men's Lightweight 60-67.5 kg", "Gymnastics at the 1988 Summer Olympics – Men's horizontal bar", "Wrestling at the 1972 Summer Olympics - Men's Greco-Roman Middleweight", "Weightlifting at the 1968 Summer Olympics - Men's Middleweight 67.5-75 kg", "Wrestling at the 1980 Summer Olympics - Men's Greco-Roman Middleweight", "Judo at the 1988 Summer Olympics - Men's Lightweight (71kg)", "Weightlifting at the 1988 Summer Olympics - Men's Heavyweight 100-110 kg", "Luge at the 1980 Winter Olympics - Women's Singles", "Wrestling at the 1988 Summer Olympics - Men's Freestyle Heavyweight", 'Boxing at the 1968 Summer Olympics - Middleweight', "Athletics at the 1956 Summer Olympics – Men's high jump", "Canoeing at the 1976 Summer Olympics – Women's K-1 500 metres", "Athletics at the 1972 Summer Olympics – Men's 100 metres", "Fencing at the 1972 Summer Olympics - Men's Sabre, Individual", "Gymnastics at the 1988 Summer Olympics – Women's artistic individual all-around", "Gymnastics at the 1972 Summer Olympics – Men's rings", "Canoeing at the 1980 Summer Olympics – Women's K-1 500 metres", "Gymnastics at the 1956 Summer Olympics – Men's horizontal bar", "Athletics at the 1988 Summer Olympics – Women's 400 metres hurdles", "Weightlifting at the 1960 Summer Olympics - Men's Featherweight 56-60 kg", "Alpine Skiing at the 1956 Winter Olympics - Women's Slalom", 'Handball at the 1972 Summer Olympics', "Weightlifting at the 1980 Summer Olympics - Men's Flyweight -52 kg", "Weightlifting at the 1968 Summer Olympics - Men's Heavyweight +90 kg", "Athletics at the 1976 Summer Olympics - Women's Long Jump", "Fencing at the 1988 Summer Olympics - Men's Épée, Individual", "Athletics at the 1980 Summer Olympics – Men's discus throw", "Wrestling at the 1980 Summer Olympics - Men's freestyle Light Flyweight", "Gymnastics at the 1960 Summer Olympics - Men's pmmel horse", "Cycling at the 1960 Summer Olympics – Men's tandem", "Shooting at the 1968 Summer Olympics - Men's 50 metre Pistol", 'Boxing at the 1976 Summer Olympics - Lightweight', "Speed Skating at the 1956 Winter Olympics - Men's 500m", 'Wrestling at the 1956 Summer Olympics - Greco-Roman Welterweight', "Athletics at the 1964 Summer Olympics - Women's Discus Throw", "Swimming at the 1980 Summer Olympics – Women's 200 metre breaststroke", 'Boxing at the 1988 Summer Olympics - Light Heavyweight', "Gymnastics at the 1956 Summer Olympics - Men's artistic individual all-around", "Swimming at the 1988 Summer Olympics – Men's 200 metre backstroke", "Swimming at the 1980 Summer Olympics – Men's 400 metre freestyle", "Athletics at the 1968 Summer Olympics - Men's Javelin Throw", "Swimming at the 1964 Summer Olympics – Women's 200 metre breaststroke", "Gymnastics at the 1988 Summer Olympics – Women's rhythmic individual all-around", "Wrestling at the 1976 Summer Olympics - Men's freestyle Flyweight", "Biathlon at the 1992 Winter Olympics - Women's 7.5km Sprint", "Wrestling at the 1960 Summer Olympics - Men's Greco-Roman Light Heavyweight", 'Boxing at the 1956 Summer Olympics - Light Heavyweight', "Athletics at the 1980 Summer Olympics – Women's pentathlon", "Athletics at the 1980 Summer Olympics – Women's 1500 metres", "Wrestling at the 1956 Summer Olympics - Men's Freestyle Flyweight", 'Boxing at the 1952 Summer Olympics - Light Welterweight', "Athletics at the 1976 Summer Olympics - Women's 800 metres", "Swimming at the 1980 Summer Olympics – Men's 100 metre breaststroke", "Wrestling at the 1976 Summer Olympics - Men's Greco-Roman Super Heavyweight", "Speed Skating at the 1960 Winter Olympics - Women's 1000m", "Weightlifting at the 1976 Summer Olympics - Men's Lightweight 60-67.5 kg", "Shooting at the 1976 Summer Olympics - Men's 50 metre running target", "Swimming at the 1988 Summer Olympics – Men's 100 metre breaststroke", "Fencing at the 1972 Summer Olympics - Women's Foil, Individual", "Cross-Country Skiing at the 1956 Winter Olympics - Men's 50km", "Athletics at the 1960 Summer Olympics - Men's 3000 metre steeplechase", "Speed Skating at the 1956 Winter Olympics - Men's 10000m", "Canoeing at the 1980 Summer Olympics – Men's C-1 1000 metres", "Wrestling at the 1980 Summer Olympics - Men's freestyle Light Heavyweight", "Gymnastics at the 1972 Summer Olympics – Women's artistic individual all-around", 'Boxing at the 1980 Summer Olympics - Featherweight', "Athletics at the 1968 Summer Olympics - Men's Shot Put", "Speed Skating at the 1984 Winter Olympics - Women's 1500m", "Cross-Country Skiing at the 1972 Winter Olympics - Men's 15km", "Athletics at the 1964 Summer Olympics – Men's triple jump", 'Boxing at the 1968 Summer Olympics - Heavyweight', "Cycling at the 1968 Summer Olympics - Men's individual road race", "Cross-Country Skiing at the 1980 Winter Olympics - Men's 30km", "Athletics at the 1980 Summer Olympics – Men's 400 metres", "Gymnastics at the 1988 Summer Olympics - Men's Floor Exercises", "Wrestling at the 1964 summer Olympics - Men's Greco-Roman Featherweight", "Athletics at the 1964 Summer Olympics – Women's shot put", "Weightlifting at the 1952 Summer Olympics - Men's Bantamweight -56 kg", "Athletics at the 1952 Summer Olympics - Women's 200 metres", "Shooting at the 1988 Summer Olympics - Men's 50 metre rifle, three positions", "Athletics at the 1988 Summer Olympics – Men's hammer throw", "Gymnastics at the 1952 Summer Olympics - Men's Rings", "Fencing at the 1968 Summer Olympics - Women's Foil, Individual", "Fencing at the 1956 Summer Olympics - Men's Sabre, Individual", "Swimming at the 1976 Summer Olympics – Men's 4 × 200 metre freestyle relay", "Wrestling at the 1988 Summer Olympics - Men's freestyle Super Heavyweight", 'Boxing at the 1980 Summer Olympics - Light Flyweight', "Swimming at the 1980 Summer Olympics – Men's 200 metre breaststroke", 'Boxing at the 1976 Summer Olympics - Middleweight', "Shooting at the 1956 Summer Olympics - Men's 25 metre rapid fire pistol", "Volleyball at the 1988 Summer Olympics – Women's tournament", "Gymnastics at the 1968 Summer Olympics – Men's parallel bars", 'Sailing at the 1972 Summer Olympics - Finn Class', "Athletics at the 1972 Summer Olympics - Women's shot put", "Speed Skating at the 1984 Winter Olympics - Men's 500m", "Athletics at the 1964 Summer Olympics - Women's Javelin Throw", "Shooting at the 1988 Summer Olympics – Women's 10 metre air rifle", 'Boxing at the 1956 Summer Olympics - Featherweight', "Luge at the 1984 Winter Olympics - Men's Singles", "Cross Country Skiing at the 1992 Winter Olympics - Women's 15km", "Gymnastics at the 1960 Summer Olympics - Men's artistic individual all-around", "Speed Skating at the 1960 Winter Olympics - Men's 1500m", 'Boxing at the 1960 Summer Olympics - Middleweight', "Gymnastics at the 1960 Summer Olympics – Men's horizontal bar", "Athletics at the 1972 Summer Olympics - Women's 1500 metres", "Canoeing at the 1972 Summer Olympics – Men's K-1 1000 metres", "Athletics at the 1980 Summer Olympics - Women's Discus Throw", 'Boxing at the 1956 Summer Olympics - Lightweight', "Wrestling at the 1976 Summer Olympics - Men's Greco-Roman Light Heavyweight", "Wrestling at the 1964 summer Olympics - Men's Greco-Roman Lightweight", "Speed Skating at the 1960 Winter Olympics - Women's 500m", "Wrestling at the 1976 Summer Olympics - Men's Greco-Roman Middleweight", "Cross Country Skiing at the 1988 Winter Olympics -Women's 20km", 'Equestrian at the 1960 Summer Olympics - Dressage, Individual', "Fencing at the 1968 Summer Olympics - Men's Épée, Individual", "Canoeing at the 1960 Summer Olympics – Men's C-1 1000 metres", "Wrestling at the 1956 Summer Olympics - Men's Greco-Roman Bantamweight", "Weightlifting at the 1964 summer Olympics - Men's Lightweight 60-67.5 kg", "Canoeing at the 1976 Summer Olympics – Men's C-1 500 metres", "Gymnastics at the 1972 Summer Olympics – Women's floor", "Wrestling at the 1980 Summer Olympics - Men's Greco-Roman Super Heavyweight", "Wrestling at the 1960 Summer Olympics - Men's Freestyle Heavyweight", "Athletics at the 1960 Summer Olympics - Women's 80m Hurdles", "Cycling at the 1988 Summer Olympics – Women's road race", "Archery at the 1988 Summer Olympics - Men's individual", "Wrestling at the 1976 Summer Olympics - Men's freestyle Light Flyweight", "Fencing at the 1988 Summer Olympics - Men's Foil, Individual", "Swimming at the 1976 Summer Olympics – Women's 100 metre breaststroke", "Athletics at the 1988 Summer Olympics – Men's pole vault", "Wrestling at the 1964 summer Olympics - Men's Greco-Roman Heavyweight", 'Boxing at the 1964 Summer Olympics – Lightweight', "Gymnastics at the 1964 Summer Olympics - Women's Uneven Bars", "Gymnastics at the 1980 Summer Olympics – Women's Vault", "Weightlifting at the 1976 Summer Olympics - Men's Flyweight -52 kg", "Cross Country Skiing at the 1972 Winter Olympics -Women's 10km", "Athletics at the 1980 Summer Olympics – Men's 50 kilometres walk", 'Boxing at the 1980 Summer Olympics - Lightweight', "Cross-Country Skiing at the 1972 Winter Olympics - Men's 50km", "Cycling at the 1988 Summer Olympics - Men's 1000m Time Trial", "Gymnastics at the 1988 Summer Olympics – Women's Floor", "Athletics at the 1952 Summer Olympics - Women's Shot Put", "Wrestling at the 1972 Summer Olympics - Men's freestyle Light Heavyweight", "Athletics at the 1964 Summer Olympics – Men's hammer throw", "Fencing at the 1968 Summer Olympics - Men's Sabre, Individual", "Diving at the 1968 Summer Olympics – Women's 10 metre platform", 'Judo at the 1976 Summer Olympics - Open Category', "Athletics at the 1960 Summer Olympics – Men's decathlon", "Cross Country Skiing at the 1976 Winter Olympics -Women's 10km", "Athletics at the 1952 Summer Olympics - Women's 80m Hurdles", "Athletics at the 1988 Summer Olympics – Men's 50 kilometres walk", "Fencing at the 1960 Summer Olympics - Men's Foil, Individual", "Wrestling at the 1976 Summer Olympics - Men's Greco-Roman Featherweight", "Athletics at the 1972 Summer Olympics - Men's 200 metres", "Gymnastics at the 1968 Summer Olympics – Women's artistic individual all-around", 'Equestrian at the 1980 Summer Olympics - Dressage, Individual', "Weightlifting at the 1952 Summer Olympics - Men's Featherweight 56-60 kg", "Cross-Country Skiing at the 1980 Winter Olympics - Men's 50km", 'Boxing at the 1960 Summer Olympics - Bantamweight', "Wrestling at the 1960 Summer Olympics - Men's Freestyle Light Heavyweight", 'Wrestling at the 1956 Summer Olympics - Greco-Roman Middleweight', "Swimming at the 1980 Summer Olympics – Men's 100 metre backstroke", "Wrestling at the 1980 Summer Olympics - Men's Greco-Roman Light Flyweight", "Basketball at the 1988 Summer Olympics - Women's tournament", "Speed Skating at the 1968 Winter Olympics - Women's 500m", "Speed Skating at the 1960 Winter Olympics - Women's 1500m", "Wrestling at the 1980 Summer Olympics - Men's freestyle Middleweight", "Judo at the 1980 Summer Olympics - Men's Middleweight (86kg)", "Judo at the 1980 Summer Olympics - Men's Extra Lightweight  (-60kg)", "Swimming at the 1976 Summer Olympics – Women's 200 metre breaststroke", "Gymnastics at the 1968 Summer Olympics – Men's pommel horse", "Biathlon at the 1992 Winter Olympics - Women's 15km Individual", "Wrestling at the 1952 Summer Olympics - Men's Freestyle Middleweight", "Weightlifting at the 1980 Summer Olympics - Men's Light Heavyweight 75-82.5 kg", "Swimming at the 1976 Summer Olympics – Men's 400 metre individual medley", "Athletics at the 1960 Summer Olympics - Women's javelin throw", "Gymnastics at the 1988 Summer Olympics – Women's uneven bars", "Wrestling at the 1972 Summer Olympics - Men's freestyle Lightweight", "Wrestling at the 1976 Summer Olympics - Men's Greco-Roman Bantamweight", "Speed Skating at the 1984 Winter Olympics - Men's 1000m", "Gymnastics at the 1956 Summer Olympics - Men's Floor Exercises", "Athletics at the 1960 Summer Olympics - Women's long jump", "Wrestling at the 1968 Summer Olympics – Men's Greco-Roman 52 kg", 'Nordic Combined at the 1964 Winter Olympics - Individual', "Athletics at the 1976 Summer Olympics - Men's Decathlon", "Speed Skating at the 1976 Winter Olympics - Women's 500m", "Gymnastics at the 1976 Summer Olympics – Men's parallel bars", "Wrestling at the 1972 Summer Olympics - Men's Freestyle Featherweight", "Wrestling at the 1956 Summer Olympics - Men's Freestyle Light Heavyweight", "Cycling at the 1980 Summer Olympics - Men's individual road race", "Diving at the 1960 Summer Olympics – Women's 10 metre platform", 'Boxing at the 1956 Summer Olympics - Middleweight', "Speed skating at the 1960 Winter Olympics - Men's 500m", "Swimming at the 1964 Summer Olympics – Men's 200 metre breaststroke", "Diving at the 1980 Summer Olympics – Women's 3 metre springboard", "Weightlifting at the 1956 Summer Olympics - Men's Middleweight 67.5-75 kg", "Volleyball at the 1988 Summer Olympics – Men's tournament", "Wrestling at the 1972 Summer Olympics - Men's freestyle Light Flyweight", "Judo at the 1976 Summer Olympics - Men's Half Middleweight (70kg)", "Gymnastics at the 1988 Summer Olympics – Men's rings", "Athletics at the 1976 Summer Olympics – Women's shot put", "Weightlifting at the 1972 Summer Olympics - Men's Heavyweight 90-110 kg", 'Boxing at the 1988 Summer Olympics - Super Heavyweight', "Wrestling at the 1968 Summer Olympics - Men's Greco-Roman Middleweight", "Wrestling at the 1960 Summer Olympics - Men's Greco-Roman Bantamweight", "Swimming at the 1968 Summer Olympics - Women's 100 metre breaststroke", "Athletics at the 1968 Summer Olympics - Women's shot put", "Speed Skating at the 1984 Winter Olympics - Women's 1000m", "Biathlon at the 1992 Winter Olympics - Men's 20km Individual", "Speed Skating at the 1964 Winter Olympics - Men's 500m", "Modern Pentathlon at the 1988 Summer Olympics - Men's Individual", "Cross-Country Skiing at the 1972 Winter Olympics - Men's 30km", 'Nordic Combined at the 1960 Winter Olympics - Individual', "Gymnastics at the 1976 Summer Olympics – Men's Floor Exercises", "Canoeing at the 1980 Summer Olympics – Men's K-1 500 metres", "Canoeing at the 1988 Summer Olympics – Men's C-1 500 metres", "Canoeing at the 1964 Summer Olympics – Men's C-1 1000 metres", "Wrestling at the 1964 summer Olympics - Men's Greco-Roman Bantamweight", "Wrestling at the 1952 Summer Olympics - Men's Greco-Roman Lightweight", "Wrestling at the 1960 Summer Olympics - Men's Freestyle Featherweight", "Gymnastics at the 1964 Summer Olympics - Women's artistic individual all-around", "Biathlon at the 1968 Winter Olympics - Men's 20km Individual", "Swimming at the 1988 Summer Olympics - Men's 50 metre freestyle", "Weightlifting at the 1968 Summer Olympics - Men's Middle Heavyweight  82.5-90 kg", 'Boxing at the 1964 Summer Olympics – Featherweight', "Athletics at the 1972 Summer Olympics - Men's 20 km Walk", "Wrestling at the 1956 Summer Olympics - Men's Freestyle Bantamweight", 'Boxing at the 1952 Summer Olympics - Bantamweight', "Cross-Country Skiing at the 1976 Winter Olympics - Men's 30km", "Gymnastics at the 1976 Summer Olympics – Women's artistic individual all-around", 'Boxing at the 1980 Summer Olympics - Light Welterweight', 'Boxing at the 1964 Summer Olympics – Welterweight', "Gymnastics at the 1988 Summer Olympics – Women's Vault", "Gymnastics at the 1980 Summer Olympics – Men's Floor Exercises", "Weightlifting at the 1976 Summer Olympics - Men's Featherweight 56-60 kg", "Figure Skating at the 1984 Winter Olympics - Women's Singles", "Wrestling at the 1980 Summer Olympics - Men's Freestyle Featherweight", "Athletics at the 1988 Summer Olympics – Women's 1500 metres", "Athletics at the 1960 Summer Olympics – Men's javelin throw", "Athletics at the 1976 Summer Olympics - Men's Triple Jump", "Speed Skating at the 1976 Winter Olympics - Women's 3000m", "Athletics at the 1952 Summer Olympics - Women's High Jump", "Gymnastics at the 1968 Summer Olympics – Men's artistic individual all-around", "Cross-Country Skiing at the 1956 Winter Olympics - Men's 15km", "Shooting at the 1956 Summer Olympics - Men's 50 metre rifle, prone", 'Wrestling at the 1956 Summer Olympics - Freestyle Welterweight', "Wrestling at the 1976 Summer Olympics - Men's freestyle Light Heavyweight", "Athletics at the 1980 Summer Olympics – Men's pole vault", "Wrestling at the 1980 Summer Olympics - Men's Greco-Roman Welterweight", "Canoeing at the 1952 Summer Olympics – Women's K-1 500 metres", "Shooting at the 1952 Summer Olympics - Men's 50 metre rifle, prone", 'Judo at the 1964 Summer Olympics - Lightweight (-68)', "Cross Country Skiing at the 1968 Winter Olympics - Women's 5km", "Speed Skating at the 1960 Winter Olympics - Women's 3000m", "Athletics at the 1972 Summer Olympics - Men's Hammer Throw", "Gymnastics at the 1988 Summer Olympics – Women's Balance Beam", "Wrestling at the 1976 Summer Olympics - Men's freestyle Super Heavyweight", "Modern Pentathlon at the 1976 Summer Olympics - Men's Individual", "Athletics at the 1980 Summer Olympics - Women's Long Jump", "Wrestling at the 1988 Summer Olympics - Men's freestyle Light Flyweight", "Rowing at the 1972 Summer Olympics - Men's Single Sculls", "Gymnastics at the 1976 Summer Olympics – Men's Vault", "Wrestling at the 1980 Summer Olympics – Men's Greco-Roman 57 kg", "Athletics at the 1988 Summer Olympics – Women's 10,000 metres", "Shooting at the 1972 Summer Olympics - Men's 300 metre rifle, three positions", "Weightlifting at the 1988 Summer olympics - Men's Middle Heavyweight  82.5-90 kg", "Wrestling at the 1988 Summer Olympics - Men's freestyle Light Heavyweight", "Shooting at the 1976 Summer Olympics - Men's 50 metre rifle, prone", "Gymnastics at the 1964 Summer Olympics – Men's pommel horse", "Modern pentathlon at the 1964 Summer Olympics - Men's Individual", "Weightlifting at the 1964 summer Olympics - Men's Middle Heavyweight  82.5-90 kg", "Athletics at the 1952 Summer Olympics - Men's 400 metre hurdles", "Wrestling at the 1972 Summer Olympics - Men's freestyle Flyweight", "Canoeing at the 1972 Summer Olympics – Women's K-1 500 metres", "Shooting at the 1952 Summer Olympics - Men's 300 metre rifle, three positions", "Wrestling at the 1976 Summer Olympics - Men's Greco-Roman Flyweight", "Athletics at the 1968 Summer Olympics - Men's Triple Jump", "Gymnastics at the 1976 Summer Olympics – Women's Balance Beam", "Cross Country Skiing at the 1964 Winter Olympics - Women's 10km", "Shooting at the 1988 Summer Olympics – Men's 50 metre running target", "Shooting at the 1956 Summer Olympics - Men's 50 metre pistol", "Archery  at the 1976 Summer Olympics - Women's Individual", 'Shooting at the 1964 summer Olympics - Trap', "Wrestling at the 1972 Summer Olympics - Men's Greco-Roman Super Heavyweight", "Athletics at the 1964 Summer Olympics – Women's high jump", "Cross-Country Skiing at the 1988 Winter Olympics - Men's 30km", "Athletics at the 1980 Summer Olympics – Men's 20 kilometres walk", "Judo at the 1972 Summer Olympics - Men's Heavyweight  (+93)", "Weightlifting at the 1976 Summer Olympics - Men's Super Heavyweight +110 kg", "Cycling at the 1952 Summer Olympics – Men's sprint", "Shooting at the 1960 Summer Olympics -Men's 25 metre rapid fire pistol", "Weightlifting at the 1972 Summer Olympics - Men's Super Heavyweight +110 kg", "Weightlifting at the 1976 Summer Olympics - Men's Heavyweight  90-110 kg", "Wrestling at the 1980 Summer Olympics - Men's Greco-Roman Light Heavyweight", "Athletics at the 1964 Summer Olympics - Women's Pentathlon", "Gymnastics at the 1952 Summer Olympics - Men's Vault", "Speed Skating at the 1976 Winter Olympics - Women's 1000m", 'Sailing at the 1976 Summer Olympics - Finn Class', "Diving at the 1980 Summer Olympics – Women's 10 metre platform", "Athletics at the 1980 Summer Olympics – Women's shot put", "Fencing at the 1964 Summer Olympics - Men's Épée, Individual", 'Boxing at the 1968 Summer Olympics - Light Middleweight', 'Wrestling at the 1952 Summer Olympics - Greco-Roman Middleweight', "Swimming at the 1988 Summer Olympics – Men's 200 metre individual medley", "Canoeing at the 1968 Summer Olympics – Men's K-1 1000 metres", "Weightlifting at the 1980 Summer Olympics - Men's First Heavyweight 90-100 kg", 'Boxing at the 1964 Summer Olympics – Light welterweight', 'Equestrian at the 1964 Summer Olympics - Dressage, Individual', "Wrestling at the 1988 Summer Olympics - Men's Greco-Roman Light Heavyweight", "Wrestling at the 1968 Summer Olympics - Men's Freestyle Middleweight", "Athletics at the 1976 Summer Olympics - Women's 1500 metres", "Athletics at the 1956 Summer Olympics – Men's triple jump", "Gymnastics at the 1976 Summer Olympics – Women's Vault", 'Ski Jumping at the 1968 Winter Olympics - Large Hill', "Athletics at the 1960 Summer Olympics - Men's high jump", "Diving at the 1964 Summer Olympics – Women's 10 metre platform", "Wrestling at the 1952 Summer Olympics - Men's Freestyle Bantamweight", "Swimming at the 1980 Summer Olympics – Men's 200 metre freestyle", "Weightlifting at the 1952 Summer Olympics - Men's Light Heavyweight 75-82.5 kg", "Wrestling at the 1964 summer Olympics - Men's Freestyle Bantamweight", "Gymnastics at the 1964 Summer Olympics - Women's Balance Beam", "Gymnastics at the 1960 Summer Olympics - Women's artistic individual all-around", "Athletics at the 1980 Summer Olympics – Men's triple jump", 'Boxing at the 1964 Summer Olympics – Light heavyweight', "Athletics at the 1956 Summer Olympics – Men's javelin throw", "Judo at the 1976 Summer Olympics - Men's Half-Heavyweight (93kg)", "Athletics at the 1964 Summer Olympics - Women's Long Jump", "Athletics at the 1952 Summer Olympics - Men's 10 Kilometre Walk", "Gymnastics at the 1972 Summer Olympics – Women's vault", "Swimming at the 1980 Summer Olympics – Men's 400 metre individual medley", "Gymnastics at the 1956 Summer Olympics – Women's vault", "Athletics at the 1980 Summer Olympics – Men's shot put", "Shooting at the 1960 Summer Olympics - Men's 25m Rifle, 3 Positions", "Weightlifting at the 1960 Summer Olympics - Men's Middle Heavyweight  82.5-90 kg", "Gymnastics at the 1980 Summer Olympics – Men's parallel bars", "Shooting at the 1956 Summer Olympics - Men's 300 metre rifle, three positions", 'Shooting at the 1956 Summer Olympics - Running Deer, Single & Double Shot', "Speed Skating at the 1976 Winter Olympics - Women's 1500m", "Athletics at the 1980 Summer Olympics - Women's 100 metres hurdles", "Cycling at the 1988 Summer Olympics – Men's points race", "Athletics at the 1976 Summer Olympics - Men's Shot Put", "Judo at the 1972 Summer Olympics - Men's Half-Heavyweight (93kg)", "Wrestling at the 1956 Summer Olympics - Men's Greco-Roman Flyweight", "Gymnastics at the 1956 Summer Olympics – Women's balance beam", "Cycling at the 1988 Summer Olympics - Women's Sprint", "Diving at the 1976 Summer Olympics – Women's 10 metre platform", "Gymnastics at the 1972 Summer Olympics – Women's uneven bars", "Shooting at the 1988 Summer Olympics – Women's 10 metre air pistol", "Handball at the 1976 Summer Olympics - Women's tournament", "Athletics at the 1972 Summer Olympics - Men's High Jump", "Athletics at the 1980 Summer Olympics – Men's 110 metres hurdles", 'Equestrian at the 1968 Summer Olympics - Dressage, Individual', "Shooting at the 1980 Summer Olympics - Men's  50 metre running target", "Diving at the 1980 Summer Olympics – Men's 10 metre platform", "Judo at the 1976 Summer Olympics - Men's Middleweight (80kg)", "Weightlifting at the 1956 Summer Olympics - Men's Middle Heavyweight  82.5-90 kg", "Swimming at the 1988 Summer Olympics – Women's 200 metre individual medley", 'Boxing at the 1960 Summer Olympics - Flyweight', "Athletics at the 1988 Summer Olympics – Women's 400 metres", "Speed Skating at the 1984 Winter Olympics - Men's 1500m", "Weightlifting at the 1980 Summer Olympics - Men's Featherweight 56-60 kg", "Judo at the 1988 Summer Olympics - Men's Middleweight (86kg)", "Athletics at the 1964 Summer Olympics – Men's 3000 metres steeplechase", "Canoeing at the 1988 Summer Olympics – Men's C-1 1000 metres", "Cross-Country Skiing at the 1988 Winter Olympics - Men's 15km", "Wrestling at the 1988 Summer Olympics - Men's Freestyle Lightweight", 'Boxing at the 1952 Summer Olympics - Light Middleweight', 'Boxing at the 1964 Summer Olympics – Heavyweight', "Cross Country Skiing at the 1984 Winter Olympics -Women's 20km", "Shooting at the 1960 Summer olympics - Men's 300 metre rifle, three positions", "Shooting at the 1968 Summer Olympics - Men's Skeet", "Wrestling at the 1964 summer Olympics - Men's Greco-Roman Welterweight", "Canoeing at the 1968 Summer Olympics – Women's K-1 500 metres", "Weightlifting at the 1968 Summer Olympics - Men's Light Heavyweight 75-82.5 kg", "Fencing at the 1976 Summer Olympics - Men's Foil, Individual", "Athletics at the 1960 Summer Olympics - Men's long jump", "Wrestling at the 1988 Summer Olympics - Men's Greco-Roman Welterweight", "Canoeing at the 1976 Summer Olympics – Men's C-1 1000 metres", 'Boxing at the 1980 Summer Olympics - Heavyweight', 'Boxing at the 1976 Summer Olympics - Flyweight', "Modern Pentathlon at the 1968 Summer Olympics - Men's Individual", "Weightlifting at the 1960 Summer Olympics - Men's Middleweight 67.5-75 kg", "Weightlifting at the 1980 Summer Olympics - Men's Heavyweight 100-110 kg", "Figure Skating at the 1988 Winter Olympics - Men's Singles", "Weightlifting at the 1964 summer Olympics - Men's Light Heavyweight 75-82.5 kg", "Gymnastics at the 1972 Summer Olympics – Men's Floor Exercises", "Weightlifting at the 1976 Summer Olympics - Men's Middleweight 67.5-75 kg", "Cycling at the 1952 Summer Olympics - Men's individual road race", "athletics at the 1968 Summer Olympics - Men's High Jump", "Wrestling at the 1964 summer Olympics - Men's Freestyle Heavyweight", 'Boxing at the 1960 Summer Olympics - Welterweight', "Shooting at the 1980 Summer Olympics - Men's 50 metre rifle, three positions", "Athletics at the 1980 Summer Olympics – Women's 100 metres", "Athletics at the 1976 Summer Olympics - Women's 100 metres hurdles", 'Nordic Combined at the 1988 Winter Olympics - Individual', 'Boxing at the 1980 Summer Olympics - Flyweight', "Gymnastics at the 1952 Summer Olympics - Women's artistic individual all-around", 'Boxing at the 1952 Summer Olympics - Welterweight', "Wrestling at the 1956 Summer Olympics - Men's Freestyle Lightweight", "athletics at the 1952 Summer Olympics - Women's Discus Throw", "Swimming at the 1972 Summer Olympics - Men's 100 metre freestyle", "Athletics at the 1956 Summer Olympics – Men's 5000 metres", "Wrestling at the 1976 Summer Olympics - Men's Greco-Roman Heavyweight", "Shooting at the 1972 Summer Olympics - Men's 25 metre rapid fire pistol", "Shooting at the 1988 Summer Olympics - Women's 50 metre rifle, three positions", 'Wrestling at the 1956 Summer Olympics - Greco-Roman Heavyweight', "Fencing at the 1980 Summer Olympics - Men's Sabre, Individual", "Wrestling at the 1968 Summer Olympics - Men's Greco-Roman Featherweight", "Gymnastics at the 1988 Summer Olympics – Men's pommel horse", "Shooting at the 1972 Summer Olympics - Men's  50 metre running target", 'Boxing at the 1976 Summer Olympics - Bantamweight', "Gymnastics at the 1968 Summer Olympics – Men's rings", "Modern Pentathlon at the 1972 Summer Olympics - Men's Individual", "Cross-Country Skiing at the 1960 Winter Olympics - Men's 30km", "Gymnastics at the 1964 Summer Olympics - Men's Floor Exercises", "Gymnastics at the 1980 Summer Olympics – Men's rings", "Swimming at the 1968 Summer Olympics – Men's 200 metre breaststroke", "Athletics at the 1976 Summer Olympics - Men's Hammer Throw", "Biathlon at the 1980 Winter Olympics - Men's 10km Sprint", "Shooting at the 1988 Summer Olympics – Men's 25 metre rapid fire pistol", "Cross Country Skiing at the 1972 Winter Olympics - Women's 5km", "Athletics at the 1956 Summer Olympics – Women's shot put", "Gymnastics at the 1968 Summer Olympics – Women's uneven bars", "Wrestling at the 1980 Summer Olympics - Men's Greco-Roman Featherweight", "Gymnastics at the 1952 Summer Olympics - Women's Balance Beam", 'Shooting at the 1960 Summer Olympics - Trap', "Wrestling at the 1980 Summer Olympics - Men's freestyle Lightweight", "Gymnastics at the 1952 Summer Olympics - Women's Floor", "Cross Country Skiing at the 1992 Winter Olympics - Women's 5km", "Swimming at the 1980 Summer Olympics – Men's 200 metre butterfly", "Wrestling at the 1964 summer Olympics - Men's Freestyle Featherweight", "Athletics at the 1968 Summer Olympics - Women's 400 metres", "Rowing at the 1980 Summer Olympics - Men's Single Sculls", "Judo at the 1976 Summer Olympics - Men's Heavyweight  (+93)", "Diving at the 1972 Summer Olympics – Men's 3 metre springboard", "Cycling at the 1960 Summer Olympics - Men's 1000m Time Trial", 'Judo at the 1980 Summer Olympics - Half-Heavyweight (95kg) Men', "Gymnastics at the 1980 Summer Olympics – Women's Uneven Bars", "Speed Skating at the 1980 Winter Olympics - Women's 1000m", "Speed Skating at the 1984 Winter Olympics - Women's 500m", "Speed Skating at the 1972 Winter Olympics - Women's 500m", "Judo at the 1988 Summer Olympics - Men's Half Middleweight (78kg)", "Fencing at the 1980 Summer Olympics - Men's Foil, Individual", "Athletics at the 1960 Summer Olympics - Women's 800 metres", 'Boxing at the 1972 Summer Olympics - Featherweight', "Biathlon at the 1988 Winter Olympics - Men's 20km Individual", "Wrestling at the 1952 Summer Olympics - Men's Greco-Roman Featherweight", "Weightlifting at the 1980 Summer Olympics - Men's Super Heavyweight +110 kg", 'Equestrian at the 1980 Summer Olympics - Individual Eventing', "Shooting at the 1968 Summer Olympics - Men's 300 metre rifle, three positions", "Swimming at the 1972 Summer Olympics – Men's 4 × 200 metre freestyle relay", "Gymnastics at the 1964 Summer Olympics - Men's Horizontal Bar", "Weightlifting at the 1968 Summer Olympics - Men's Featherweight 56-60 kg", "Athletics at the 1980 Summer Olympics – Men's decathlon", "Weightlifting at the 1964 summer Olympics - Men's Bantamweight -56 kg", "Diving at the 1980 Summer Olympics – Men's 3 metre springboard", "Athletics at the 1964 Summer Olympics – Men's 110 metres hurdles", "Athletics at the 1956 Summer Olympics - Women's Discus Throw", "Athletics at the 1956 Summer Olympics – Women's high jump", "Fencing at the 1960 Summer Olympics - Men's Épée, Individual", "Athletics at the 1980 Summer Olympics – Women's 800 metres", "Athletics at the 1980 Summer Olympics – Men's marathon", "Shooting at the 1960 Summer Olympics - Men's 50 metre Pistol", "Speed Skating at the 1964 Winter Olympics - Women's 1500m", "Athletics at the 1956 Summer Olympics – Men's 20 kilometres walk", "Swimming at the 1972 Summer Olympics - Women's 200 metre breaststroke", "Athletics at the 1952 Summer Olympics – Men's triple jump", "Athletics at the 1952 Summer Olympics – Men's 10,000 metres", "Biathlon at the 1988 Winter Olympics - Men's 10km Sprint", 'Boxing at the 1976 Summer Olympics - Light Middleweight', "Weightlifting at the 1952 Summer Olympics - Men's Lightweight 60-67.5 kg", "Wrestling at the 1972 Summer Olympics – Men's Greco-Roman 90 kg", "Biathlon at the 1976 Winter Olympics - Men's 20km Individual", 'Boxing at the 1968 Summer Olympics - Light Heavyweight', "Gymnastics at the 1976 Summer Olympics – Men's rings", 'Sailing at the 1960 Summer Olympics - Finn', "Wrestling at the 1980 Summer Olympics - Men's Freestyle Heavyweight", "Wrestling at the 1976 Summer Olympics - Men's Greco-Roman Welterweight", "Rowing at the 1976 Summer Olympics - Women's Single Sculls", "Gymnastics at the 1956 Summer Olympics – Women's artistic individual all-around", "Gymnastics at the 1956 Summer Olympics – Women's floor", "Rowing at the 1952 Summer Olympics - Men's Single Sculls", "Wrestling at the 1972 Summer Olympics - Men's Greco-Roman Bantamweight", "Wrestling at the 1972 Summer Olympics - Men's Freestyle Heavyweight", "Shooting at the 1988 Summer Olympics – Women's 25 metre pistol", "Athletics at the 1972 Summer Olympics - Men's 50 km Walk", "Shooting at the 1956 Summer Olympics - Men's 50 metre rifle, three positions", "Athletics at the 1964 Summer Olympics – Men's long jump", "Wrestling at the 1960 Summer Olympics - Men's Freestyle Lightweight", "Athletics at the 1952 Summer Olympics - Women's Long Jump", "Athletics at the 1960 Summer Olympics - Men's 20 km Walk", "Weightlifting at the 1960 Summer Olympics - Men's Lightweight 60-67.5 kg", "Archery at the 1980 Summer Olympics - Women's Individual", 'Boxing at the 1964 Summer Olympics – Middleweight', "Gymnastics at the 1980 Summer Olympics – Women's Balance Beam", "Weightlifting at the 1976 Summer Olympics - Men's Light Heavyweight 75-82.5 kg", 'Sailing at the 1980 Summer Olympics - Finn Class', 'Equestrian at the 1980 Summer Olympics - Jumping, Individual', "Speed Skating at the 1964 Winter Olympics - Women's 3000m", "Athletics at the 1956 Summer Olympics – Men's 10,000 metres", "Athletics at the 1968 Summer Olympics - Women's Long Jump", "Wrestling at the 1976 Summer Olympics - Men's Greco-Roman Lightweight", "Wrestling at the 1976 Summer Olympics - Men's Freestyle Heavyweight", "Gymnastics at the 1964 Summer Olympics – Men's rings", "Shooting at the 1980 Summer Olympics - Men's 50 metre pistol", "Cross Country Skiing at the 1956 Winter Olympics - Women's 10km", "Speed Skating at the 1984 Winter Olympics - Men's 5000m", "Wrestling at the 1968 Summer Olympics - Men's Greco-Roman Light Heavyweight", "Speed Skating at the 1988 Winter Olympics - Men's 1000m", "Speed Skating at the 1964 Winter Olympics - Women's 500m", "Gymnastics at the 1972 Summer Olympics – Men's vault", "Diving at the 1968 Summer Olympics – Women's 3 metre springboard", "Gymnastics at the 1988 Summer Olympics – Men's parallel bars", "Modern Pentathlon at the 1980 Summer Olympics - Men's Individual", "Gymnastics at the 1960 Summer Olympics – Women's vault", "Shooting at the 1988 Summer Olympics – Men's 50 metre pistol"}
            Answers = 757, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 757, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 54 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 11
            Final Answer: {'1926', '1941', '1970', '1990', '1985', '1991', '1951', '1946', '1939', '1959', '1937'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 55 / 106: {
          [('Main', '==', 'm.05vz3zq', ['aviation.aircraft_owner.aircraft_fleet_composition', 'aviation.aircraft_ownership_count.aircraft_owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 56 / 106: {
          [('Main', '==', 'm.05vz3zq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 11
            Final Answer: {'Vladimir Lenin', 'Vyacheslav Molotov', 'Konstantin Chernenko', 'Leonid Brezhnev', 'Nikita Khrushchev', 'Vladimir Ivashko', 'Georgy Malenkov', 'Vagit Alekperov', 'Mikhail Gorbachev', 'Yuri Andropov', 'Joseph Stalin'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 57 / 106: {
          [('Main', '==', 'm.05vz3zq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'Premier of the Soviet Union', 'General Secretary of the Communist Party of the Soviet Union'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 58 / 106: {
          [('Main', '==', 'm.05vz3zq', ['organization.organization_member.member_of', 'organization.organization_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 3
            Final Answer: {'1934', '1943', '1945'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 59 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.military_commanders', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 60 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'6598'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 61 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 10
            Final Answer: {'Sailing', 'Diving', 'Team handball', 'Swimming', 'Track cycling', 'Cycling', 'Track and field athletics', 'Artistic gymnastics', 'Shooting sport', 'Basketball'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 62 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.skud.embassies_and_consulates.embassy.ambassadors', 'user.skud.embassies_and_consulates.ambassadorial_tenure.ambassador'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.ambassador ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.ambassador ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Yakov Malik'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 63 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.skud.embassies_and_consulates.embassy.ambassadors', 'user.skud.embassies_and_consulates.ambassadorial_tenure.attached_to_embassy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.attached_to_embassy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.attached_to_embassy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 64 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.force_deployments', 'military.force_strength.force_size'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 8
            Final Answer: {'2000', '3800', '3600', '520000', '6541', '1300', '2792', '1000'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 65 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.force_deployments', 'military.force_strength.resource'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.resource ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.resource ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 4
            Final Answer: {'Personnel', 'Infantry', 'Military aircraft', 'Tank'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 66 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.casualties', 'military.casualties.lower_estimate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.lower_estimate ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.lower_estimate ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 5
            Final Answer: {'722', '1268', '2649', '1000', '1251'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 67 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.casualties', 'military.casualties.upper_estimate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.upper_estimate ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.upper_estimate ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'5000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 68 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 69 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 3
            Final Answer: {'Silver medal', 'Gold medal', 'Bronze medal'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 70 / 106: {
          [('Main', '==', 'm.05vz3zq', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 71 / 106: {
          [('Main', '==', 'm.05vz3zq', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 72 / 106: {
          [('Main', '==', 'm.05vz3zq', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 73 / 106: {
          [('Main', '==', 'm.05vz3zq', ['symbols.flag_referent.flag', 'symbols.flag_use.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.to_date ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.to_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'1991'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 74 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 75 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_since'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'1922', '1944'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 76 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'61.524'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 77 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'105.319'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 78 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 5
            Final Answer: {'Wołyń Voivodeship - II RP', 'Polesie Voivodeship - II RP', 'Nowogródek Voivodeship - II RP', 'Wilno Voivodeship - II RP'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 79 / 106: {
          [('Main', '==', 'm.05vz3zq', ['aviation.aircraft_owner.aircraft_fleet_composition', 'aviation.aircraft_ownership_count.aircraft_model'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_model ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_model ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Mil V-16'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 80 / 106: {
          [('Main', '==', 'm.05vz3zq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 12
            Final Answer: {'1941', '1939', '1982', '1990', '1985', '1991', '1964', '1984', '1922', '1917', '1953'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 81 / 106: {
          [('Main', '==', 'm.05vz3zq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 10
            Final Answer: {'1956', '1985', '1949', '1991', '1964', '1924', '1984', '1982', '1953'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 82 / 106: {
          [('Main', '==', 'm.05vz3zq', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 3
            Final Answer: {'United Nations Relief and Rehabilitation Administration', 'United Nations', 'League of Nations'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 83 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.military_commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 14
            Final Answer: {'Kirill Meretskov', 'Mikhail Kovalyov', 'Georgy Abashvili', 'Nikolai Fyodorovich Vatutin', 'Ivan Konev', 'Semyon Timoshenko', 'Nikita Khrushchev', 'Konstantin Rokossovsky', 'Georgy Malenkov', 'Georgy Zhukov', 'Issa Pliyev', 'Rodion Malinovsky', 'Kliment Voroshilov', 'Joseph Stalin'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 84 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 85 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'6500'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 86 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 9
            Final Answer: {'1964 Summer Olympics', '1960 Summer Olympics', '1976 Summer Olympics', '1988 Summer Olympics', '1980 Summer Olympics', '1956 Summer Olympics', '1972 Summer Olympics', '1968 Summer Olympics', '1952 Summer Olympics'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 87 / 106: {
          [('Main', '==', 'm.05vz3zq', ['user.skud.embassies_and_consulates.embassy.ambassadors', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_countries'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.to_countries ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:user.skud.embassies_and_consulates.embassy.ambassadors ?o1 . ?o1 fb:user.skud.embassies_and_consulates.ambassadorial_tenure.to_countries ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'United Nations', 'United Kingdom'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 88 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.force_deployments', 'military.force_strength.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 6
            Final Answer: {'North Korea', 'Khmer Rouge', 'Viet Cong', 'North Vietnam', 'China'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 89 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.force_deployments', 'military.force_strength.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.date ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'1968'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 90 / 106: {
          [('Main', '==', 'm.05vz3zq', ['military.military_combatant.casualties', 'military.casualties.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 3
            Final Answer: {'Battle of Tolvajärvi', 'Hungarian Revolution of 1956', 'Winter War'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 91 / 106: {
          [('Main', '==', 'm.05vz3zq', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 735
            Final Answer: {'Galina Chistyakova', 'Nadezhda Olizarenko', 'Nelson Davidyan', 'Raimonds Vilde', 'Serhiy Novikov', 'Valery Dudin', 'Viktor Mazin', 'Tamara Tyshkevich', 'Yelena Antonova', 'Leri Khabelov', 'Svetlana Krachevskaya', 'Nadezhda Chizhova', 'Igor Kanygin', 'Antanas Mikėnas', 'Aleksandr Belostennyi', 'Ivan Garanin', 'Aleksandr Makarov', 'Elena Volkova', 'Anatoly Alyabyev', 'Eduard Gushchin', 'Yelena Dendeberova', 'Tatyana Samolenko', 'Tamara Tikhonova', 'Leonid Zhabotinsky', 'Arsen Fadzayev', 'Vladimir Sinyavsky', 'Tamara Rylova', 'Roman Dmitriyev', 'Viktor Potapov', 'Omar Pkhakadze', 'Vladimir Yesheyev', 'Arsen Alakhverdiev', 'Rafael Chimishkyan', 'Anatoly Bondarchuck', 'Nataliya Tymoshkina', 'Elvīra Ozoliņa', 'Natalya Butuzova', 'Natalya Lisovskaya', 'Sergei Scherbakov', 'Stepan Sarkisyan', 'Stanislav Sorokin', 'Yelena Belova', 'Saida Gunba', 'Grant Shaginyan', 'Shamil Khisamutdinov', 'Vera Zozula', 'Georgi Kulikov', 'Vasily Rudenkov', 'Vasiliy Khmelevskiy', 'Vladimir Belyaev', 'Yakov Zheleznyak', 'Irina Kalinina', 'Aleksandr Privalov', 'Viktor Demyanenko', 'Nikolay Solovyov', 'Roman Dmitriev', 'Pavel Senitsev', 'Arvidas Juozaitis', 'Tatyana Sidorenko', 'Vladimir Rubashvili', 'Ivan Bogdan', 'Galina Kulakova', 'Gintautas Umaras', 'Vartan Militosyan', 'Sergei Karamchakov', 'Robert Shavlakadze', 'Natalia Shaposhnikova', 'Veniamin Soldatenko', 'Viktor Kuznetsov', 'Vyacheslav Yanovskiy', 'Lyudmila Pinayeva', 'Yelena Gorchakova', 'Valentin Gavrilov', 'Ivans Klementjevs', 'Mukharbi Kirzhinov', 'Sergey Koplyakov', 'Anna Malukhina', 'Valery Medvedtsev', 'Evgeni Krasilnikov', 'Viktor Kravchenko', 'Tatiana Korshunova', 'Larisa Latynina', 'Nino Salukvadze', 'Vladimir Musalimov', 'Gennadiy Shatkov', 'Vladimir Marchenko', 'Pyotr Pochinchuk', 'Maria Gorokhovskaya', 'Alexander Tikhonov', 'Valeri Borzov', 'Yuri Barinov', 'Larysa Karlova', 'Fyodor Bogdanovsky', 'Alexander Dityatin', 'Viktor Torshin', 'Natalia Kuchinskaya', 'Makharbek Khadartsev', 'Aydyn Ibragimov', 'Aleksandr Pervi', 'Mikhail Mamiashvili', 'Ljubov Kozyreva', 'Viktor Vlassov', 'Valeriy Brumel', 'Stanislav Stepashkin', 'Viacheslav Zaitsev', 'Aleksei Ivanovich Kiselyov', 'Olga Kuragina', 'Valery Dvoinikov', 'Inese Jaunzeme', 'Fyodor Simashev', 'Aleksandr Kolchinsky', 'Viktor Saneyev', 'Aleksandr Yelizarov', 'Halyna Zakharova', 'Leonid Spirin', 'Vladimir Bure', 'Maria Pisareva', 'Jaak Uudmäe', 'Maria Filatova', 'Elvira Vasilkova', 'Boris Selitsky', 'Vladimir Lobanov', 'Vakhtang Balavadze', 'Shota Khabareli', 'Lidia Skoblikova', 'Sergey Fesenko, Sr.', 'Antonina Melnikova', 'Bruno Habārovs', 'Dito Shanidze', 'Gennadi Strakhov', 'Sergei Postrekhin', 'Albert Oganezov', 'Ihor Rybak', 'Tamara Lazakovich', 'Yevgeniya Sidorova', 'Nikolay Fyodorovich Kiselyov', 'Olga Zhevkova', 'Robertas Žulpa', 'Adlan Varayev', 'Aleksandr Sidorenko', 'Grigory Verichev', 'Vasil Yakusha', 'Rustam Kazakov', 'Yevgeni Lopatin', 'Vladimir Kosinsky', 'Boris Onishchenko', 'Nadezhda Tkachenko', 'Yelisaveta Bagriantseva', 'Yevgeny Frolov', 'Olga Mineyeva', 'Timofey Skryabin', 'Sergey Khlebnikov', 'Natalya Pechenkina', 'Romualdas Murauskas', 'Alexander Anatolyevich Volkov', 'Andrei Bogdanov', 'Nikolai Anikin', 'Vladimir Gundartsev', 'Anatoly Perov', 'Gennadi Chetin', 'Svetlana Boginskaya', 'Igor Malkov', 'Alimberg Bestayev', 'Boris Tishin', 'Murat Niyazov', 'Erika Salumäe', 'Viktor Klimenko', 'Alzhan Zharmukhamedov', 'Vladimir Goryaev', 'Boris Shilkov', 'Ārons Bogoļubovs', 'Zagalav Abdulbekov', 'Valentin Kornev', 'Nikolay Nikolayevich Sokolov', 'Klavdiya Tochonova', 'Sergei Bubka', 'Magomedgasan Abushev', 'Nina Fyodorova', 'Artem Teryan', 'Birutė Kalėdienė', 'Yuri Tyukalov', 'Kanybek Osmonaliev', 'Nikolai Solodukhin', 'Guram Kostava', 'Svetlana Petcherskaia', 'Galina Zybina', 'Tatyana Averina', 'Aleksei Vakhonin', 'Yevgeniy Arzhanov', 'Viktor Mazanov', 'Aleksandr Gazov', 'Boris Kuznetsov', 'Shota Chochishvili', 'Viktor Romanov', 'Yaroslav Antonov', 'Nataliya Donchenko', 'Servard Emirzian', 'Viktor Tsybulenko', 'Dmitry Nelyubin', 'Boris Isachenko', 'Yevgeny Gavrilenko', 'Dmitry Bilozerchev', 'Nina Bocharova', 'Yevgeny Romanovich Grishin', 'Lyudmila Kondratyeva', 'Nikolay Kolesnikov', 'Israil Arsamakov', 'Vladimir Stogov', 'Bruno Junk', 'Svetlana Korytova', 'Yury Zakharevitch', 'Lyudmila Shevtsova', 'Aleksandr Kirichenko', 'Tatyana Anisimova', 'Vyacheslav Vedenin', 'Dmitri Leonkin', 'Grigory Kriss', 'Viktor Petrenko', 'Rufat Riskiyev', 'Keto Losaberidze', 'Sergey Litvinov', 'Vladimir Melanin', 'Yuri Salnikov', 'Vassily Kuznetsov', 'Igor Lapshin', 'Shazam Safin', 'Aleksandr Tsutselov', 'Aleksey Spiridonov', 'Nikolay Kruglov', 'Umyar Mavlikhanov', 'Tamara Bykova', 'Galina Gorokhova', 'Olga Yakovleva', 'Antonina Makhina', 'Olga Rukavishnikova', 'Aldona Nenėnienė', 'Yuri Mikhaylov', 'Viktor Kurentsov', 'Aleksandr Zabelin', 'Viktor Chukarin', 'Aleksandr Shaparenko', 'Aleksandr Puchkov', 'Rudolf Povarnitsyn', 'Vladimir Aleinik', 'Alexandr Gazov', 'Oleg Stepanov', 'Viktor Lisitsky', 'Tatyana Kolpakova', 'Marina Nikulina', 'Natalya Shive', 'Trofim Lomakin', 'Otar Dadunashvili', 'Yelizaveta Dementyeva', 'Anatoli Bogdanov', 'Jānis Lūsis', 'Boris Gurevich', 'Radion Gataullin', 'Tatyana Krainova', 'Soslan Andiyev', 'Ionas Chepulis', 'Yevgeny Feofanov', 'Andrey Smirnov', 'Gennady Bukharin', 'Zinaida Turchyna', 'Levan Tediashvili', 'Laima Zilporytė', 'Galina Minaicheva', 'Irina Gerlits', 'Ingrida Amantova', 'Leonid Shcherbakov', 'Ivan Yarygin', 'Gennady Garbuzov', 'Nikolay Yakovenko', 'David Rigert', 'Vakhtang Yagorashvili', 'Konstantin Vyrupayev', 'Vladimir Kaplunov', 'Yevgeni Korolkov', 'Jüri Tamm', 'Hennadiy Avdyeyenko', 'Irina Press', 'Vladimir Shkurikhin', 'Yuriy Kutsenko', 'Olha Bryzhina', 'Igor Voronchikin', 'Igor Basinski', 'Ekaterina Kalinchuk', 'Nikolai Saksonov', 'Viktor Ugryumov', 'Vladimir Kiselyov', 'Fyodor Terentyev', 'Yevgeni Minaev', 'Gennadi Lushchikov', 'Vitalija Tuomaite', 'Valentin Nikolayev', 'Lyubov Yegorova', 'Anatoli Kolesov', 'Roman Dzeneladze', 'Nikolay Gusakov', 'Aleksei Shumakov', 'Aleksandr Blinov', 'Vladimir Parfenovich', 'Shamil Sabirov', 'Tatyana Lesovaya', 'Oleg Goncharenko', 'Vyacheslav Nikolayevich Ivanov', 'Yuriy Panchenko', 'Pavel Kolchin', 'Tatyana Kazankina', 'Igor Pissarov', 'Valeri Popenchenko', 'Galina Bystrova', 'Rimas Kurtinaitis', 'Yulia Ryabchinskaya', 'Tamara Press', 'Ants Antson', 'Anfisa Reztsova', 'Natalya Petrusyova', 'Vakhtang Blagidze', 'Vasyl Yurchenko', 'Margarita Nikolaeva', 'Aleksandr Chaev', 'Shota Lomidze', 'Antonina Zelikovich', 'Romas Ubartas', 'Johannes Kotkas', 'Maria Gusakova', 'Vitold Kreyer', 'Valdemaras Chomičius', 'Irina Minkh', 'Alexander Medved', 'Boris Shakhlin', 'Boris Kramorenko', 'Sergei Zhelanov', 'Vladimir Yumin', 'Natalya Bochina', 'Yelena Zhupiyeva-Vyazova', 'Dainis Kūla', 'Georgi Prokopenko', 'Yuri Kharchenko', 'Vera Krasnova', 'Vladimir Vasin', 'Vladimir Portnoi', 'Semyon Rzhishchin', 'Israil Militosyan', 'Anatoly Khrapaty', 'Sergey Tchepikov', 'Marina Yurchenya', 'Nikolay Smaga', 'Ričardas Tamulis', 'Marina Kumysh', 'Olga Nazarova', 'Nurmagomed Shanavazov', 'Tamara Manina', 'Elena Kudashova', 'Elena Vaytsekhovskaya', 'Nadezhda Konyayeva', 'Aleksandr Kedyarov', 'Aleksandr Miroshnichenko', 'Pavel Pinigin', 'Aleksandr Savyalov', 'Lyudmila Titova', 'Romuald Klim', 'Vera Komisova', 'Rein Aun', 'Michał Śliwiński', 'Sergey Danilin', 'Anzor Kiknadze', 'Vladimir Maneyev', 'Vitali Romanenko', 'Yury Vlasov', 'Daulet Turlykhanov', 'Viktor Kosichkin', 'Boris Kulaev', 'Vasily Pavlovich Rochev', 'Anatoli Roshchin', 'Vitali Parkhimovich', 'Oleg Fyodoseyev', 'Galina Savitskaya', 'Valery Shary', 'Lyudmila Bragina', 'Oksen Mirzoyan', 'Anatoli Beloglazov', 'Viktor Zhdanovich', 'Lyudmyla Panchuk', 'Viktor Bushuev', 'Aleksandr Kurynov', 'Vladimir Smirnov', 'Yakov Punkin', 'Alexandr Romankov', 'Viktor Markin', 'Anatoliy Novikov', 'Mark Rakita', 'Anatoly Mikhailov', 'Igor Polyanskiy', 'Yuri Sisikin', 'Petro Korol', 'Valeri Podluzhnyi', 'Shalva Chikhladze', 'Anatoli Albul', 'Zebiniso Rustamova', 'Avtandil Koridze', 'Danas Pozniakas', 'Valentin Muratov', 'Vassily Anatolyevich Solomin', 'Vitali Kuznetsov', 'Pavel Lednyov', 'Mariya Litoshenko', 'Vladimir Artemov', 'Alexey Prokurorov', 'Irina Sumnikova', 'Roman Rurua', 'Valentyna Kovpan', 'Faina Melnyk', 'Olexandra Tymoshenko', 'Nikolay Bazhukov', 'Konstantin Volkov', 'Kharis Yunichev', 'Antonina Okorokova', 'Vladimir Bakulin', 'Aleksandr Kovalenko', 'Nikolai Balboshin', 'Berta Kolokoltseva', 'Aramby Emizh', 'Tatyana Skachko', 'Saipulla Absaidov', 'Ivan Kochergin', 'Mikhail Burtsev', 'Olga Bondarenko', 'Lidiya Alfeyeva', 'Igor Sokolov', 'Antonina Seredina', 'Taisa Chenchyk', 'Valentyna Kozyr', 'Valery Muratov', 'Yelena Davydova', 'Ramaz Kharshiladze', 'Natalya Kuznetsova-Lobanova', 'Ivar Stukolkin', 'Viktor Novozhilov', 'Aleksandr Silayev', 'Savkus Dzarasov', 'Sergei Sivko', 'Yurik Sarkisyan', 'Tatyana Providokhina', 'Sergei Kornilaev', 'Tatyana Sidorova', 'Yevgeny Belyayev', 'Ivan Udodov', 'Mikhail Krivonosov', 'Vladimir Sevryugin', 'Sergey Fokichev', 'Viktor Savchenko', 'Sergei Diomidov', 'Vladimir Raskatov', 'Vladimir Belussov', 'Polina Astakhova', 'Sofia Muratova', 'Viktor Rashchupkin', 'Yurik Vardanyan', 'Makhmud Umarov', 'Yevgeni Petrov', 'Nodar Khokhashvili', 'Anatoli Starostin', 'Igor Polyansky', 'Lyudmila Poradnyk', 'Šarūnas Marčiulionis', 'Vasiliy Alekseyev', 'Aleksandr Baryshnikov', 'Aleksandr Ivanov', 'Anatoli Bykov', 'Vladimir Nazlymov', 'Vyacheslav Lemeshev', 'Sergei Filatov', 'Nina Romashkova', 'Aleksandra Leonova', 'Aleksandr Anufriyev', 'Jaan Talts', 'David Gobezhishvili', 'Viktor Mednov', 'Grigory Novak', 'Olga Krivosheeva', 'Arsen Miskarov', 'Yelena Välbe', 'Nadezhda Khnykina-Dvalishvili', 'Nina Savina', 'Yuri Malishev', 'Ravil Khabutdinov', 'Rostislav Vargashkin', 'Irina Smirnova', 'Liana Tsotadze', 'Nijolė Sabaitė', 'Gennadiy Prigoda', 'Irina Egorova', 'Afanasijs Kuzmins', 'Igor Zhelezovski', 'Suren Nalbandyan', 'Andrei Chouvalov', 'Yuri Cherednik', 'Kira Ivanova', 'Marat Ganeyev', 'Aleksandra Chudina', 'Mykola Avilov', 'Pyotr Bolotnikov', 'Irina Beglyakova', 'Ilia Mate', 'Mikhail Devyatyarov', 'Nina Lobova', 'Aleksandr Ivanitsky', 'Rafiga Shabanova', 'Yevgeny Maskinskov', 'Vladlen Trostyansky', 'Alexander Kurlovitch', 'Aleksei Gushchin', 'Igor Novikov', 'Andrei Kuznetsov', 'Igors Miglinieks', 'Viktor Miroshnichenko', 'Tengiz Khubuluri', 'Svetlana Babanina', 'Alexander Tkachev', 'Shamil Serikov', 'Vadim Yemelyanov', 'Vladimir Kazantsev', 'Vladimir Shestakov', 'Yuriy Sedykh', 'Mikhail Voronin', 'Vyacheslav Ivanenko', 'Maria Golubnichaya', 'Allan Erdman', 'David Torosyan', 'Olga Shkurnova', 'Zhaksylyk Ushkempirov', 'Oleg Bozhev', 'Yevgeny Penyayev', 'Gennadi Avramenko', 'Tetyana Kocherhina', 'Yevgeny Mironov', 'Yelena Shushunova', 'Irina Shilova', 'Yuri Kovshov', 'Rashid Mamedbekov', 'Nina Dumbadze', 'Valeri Rezantsev', 'Larissa Petrik', 'Andrei Balashov', 'Vladimir Popov', 'Olessya Barel', 'Vasyl Arkhypenko', 'Igor Runov', 'Galina Prozumenshchikova', 'Nikolay Gulyayev', 'Pavel Kuznetsov', 'Anatoly Pisarenko', 'Galina Stepanskaya', 'Raisa Smetanina', 'Farkhad Mustafin', 'Alexander Karelin', 'Vasily Borisov', 'Sergei Sukhoruchenkov', 'Alevtina Kolchina', 'Viktor Shamburkin', 'Anatoliy Samotsvetov', 'Radia Yeroshina', 'Mikhail Shakhov', 'Aleksandr Panfilov', 'Yevgeniy Ivchenko', 'Sergey Savelyev', 'Parnaos Chikviladze', 'Andrey Krylov', 'Amiran Totikashvili', 'Lev Mukhin', 'Gennady Korban', 'Sanasar Oganisyan', 'Lina Kačiušytė', 'Yuri Kondakov', 'Elena Novikova-Belova', 'David Tsimakuridze', 'Galina Kreft', 'Viktor Kapitonov', 'Boris Stenin', 'Aleksandr Melentyev', 'Igor Kashkarov', 'Arkady Vorobyov', 'Aleksandr Koshkyn', 'Valery Goborov', 'Yuri Tsapenko', 'Lyudmila Shubina', 'David Gvanteladze', 'Anatoly Lagetko', 'Yevgeniy Redkin', 'Arsen Mekokishvili', 'Valentina Cherkasova', 'Valentin Oleinik', 'Marina Dobrancheva', 'Grigoriy Yegorov', 'Valeri Liukin', 'Vitali Konstantinov', 'Vladimir Nevzorov', 'Vasili Stepanov', 'Jüri Tarmak', 'Igor Grivennikov', 'Yevdokiya Mekshilo', 'Elena Ovchinnikova', 'Kirill Ivanov', 'Yevgeny Klevtsov', 'Oleg Grigoryev', 'Alevtina Olyunina', 'Valentin Mankin', 'Yuri Sapega', 'Vladimir Dolgov', 'Valeri Losev', 'Yuriy Lituyev', 'Vladimir Cheboksarov', 'Igor Nikitin', 'Tatyana Ledovskaya', 'Sergei Beloglazov', 'Sergei Chetverukhin', 'Tatyana Shchelkanova', 'Nikolay Kirov', 'Tamara Lyukhina-Zamotailova', 'Sergei Tarakanov', 'Lyubov Odynokova', 'Serik Konakbayev', 'Valentina Stenina', 'Guliko Sagaradze', 'Svetlana Varganova', 'Givi Kartoziya', 'Vladimir Golovanov', 'Yuri Titov', 'Valentina Ogienko', 'Emma Gapchenko', 'Valeriy Sokolov', 'Laimutė Baikauskaitė', 'Vladimir Alikin', 'Lev Vainshtein', 'Sergei Kopylov', 'Ardalion Ignatyev', 'Vladimir Safronov', 'Dmitry Volkov', 'Vadim Yaroshchuk', 'Tamara Fedosova-Pogozheva', 'Igor Ter-Ovanesyan', 'Albert Azaryan', 'Bashir Varaev', 'Renart Suleimanov', 'Nikolay Grigoryevich Belov', 'Zinaida Voronina', 'Nellie Kim', 'Aleksandr Sorokolet', 'Natalya Zasulskaya', 'Vladislav Nelyubin', 'Yuri Zaitsev', 'Nikolai Kovsh', 'Boris Melnik', 'Dmitry Monakov', 'Boris Andreev', 'Marina Lobatch', 'Viktor Pankrashkin', 'Sergei Kalinin', 'Leonid Lytvynenko', 'Allar Levandi', 'Irina Perkhomchuk', 'Albert Mokeyev', 'Nail Mukhamedyarov', 'Viktor Sidjak', 'Nikolai Andrianov', 'Tatyana Talysheva', 'Natalya Lebedyeva', 'Vladimir Leonov', 'Boris Lagutin', 'Lyubov Rusanova', 'Oleg Karavayev', 'Velikton Barannikov', 'Kamandar Madzhidov', 'Vladimir Orlov', 'Vitaly Galkov', 'Rustam Yambulatov', 'Ivan Kizimov', 'Ruslan Ashuraliev', 'Shota Kveliashvili', 'Aleksandr Kosenkov', 'Aleksandr Voronin', 'Aleksandr Rogov', 'Vladimir Kovalev', 'Valentina Rastvorova', 'Anatoli Bulakov', 'Klavdija Bojarskikh', 'Tiit Sokk', 'Volodymyr Holubnychy', 'Givi Onashvili', 'Georgy Tenadze', 'Yuri Radonyak', 'Georgi Skhirtladze', 'Sergei Kharkov', 'Aleksandrs Jackēvičs', 'Rudolf Plyukfelder', 'Arvydas Sabonis', 'Vladimir Yengibaryan', 'Tetyana Hlushchenko', 'Ivan Belyayev', 'Yevgeny Chernyshov', 'Ninel Krutova', 'Pyotr Zayev', 'David Hambartsumyan', 'Levon Julfalakyan', 'Nikolay Zimyatov', 'Nikolai Pankin', 'Vladimir Salnikov', 'Sultan Rakhmanov', 'Yevgeny Kulikov', 'Olga Buyakina', 'Leonid Taranenko', 'Yulia Bogdanova', 'Marina Kosheveya', 'Nikolai Korolkov', 'Mirian Tsalkalamanidze', 'Ludmilla Tourischeva', 'Satymkul Dzhumanazarov', 'Vida Vencienė', 'Viktor Krovopuskov', 'Grigori Kosykh', 'Vera Krepkina', 'Magomedkhan Aratsilov', 'Lev Kuznetsov', 'Vladimir Kuts', 'Rafayel Grach', 'Valeri Tikhonenko', 'Klara Guseva', 'Yelena Petushkova', 'Viktor Rybakov', 'Olga Korbut', 'Aleksandr Portnov', 'Yelizaveta Kozhevnikova', 'Anatoly Parfyonov'}
            Answers = 735, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.052s]
          Answers = 735, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.052s]
        Checking schema 92 / 106: {
          [('Main', '==', 'm.05vz3zq', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Flag of the Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 93 / 106: {
          [('Main', '==', 'm.05vz3zq', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'1941'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 94 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_until'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_until ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_until ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'1944', '1991'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 95 / 106: {
          [('Main', '==', 'm.05vz3zq', ['location.country.national_anthem', 'government.national_anthem_of_a_country.anthem'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 2
            Final Answer: {'The Internationale', 'National Anthem of the Soviet Union'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 96 / 106: {
          [('Main', '==', 'm.05vz3zq', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'1986 European Athletics Championships'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 97 / 106: {
          [('Main', '==', 'm.05vz3zq', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competitors'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competitors ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competitors ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Viktor Kalinkin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 98 / 106: {
          [('Main', '==', 'm.05vz3zq', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.rank ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'8'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 99 / 106: {
          [('Main', '==', 'm.05vz3zq', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Current: 100 / 106
        Checking schema 100 / 106: {
          [('Main', '==', 'm.05vz3zq', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competition'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competition ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competition ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {"1986 European Athletics Championships – Men's 800 metres"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 101 / 106: {
          [('Main', '==', 'm.05vz3zq', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'United Nations Security Council'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 102 / 106: {
          [('Main', '==', 'm.05vz3zq', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.to ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'1991'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 103 / 106: {
          [('Main', '==', 'm.05vz3zq', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.from ?o2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 WHERE { fb:m.05vz3zq fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'1946'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 104 / 106: {
          [('Main', '==', 'm.05vz3zq', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 1
            Final Answer: {'Soviet Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 105 / 106: {
          [('Main', '==', 'm.05vz3zq', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.permanent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.permanent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:29] Q_Schema Request: {
            WebQ_2292|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05vz3zq fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.permanent ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05vz3zq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        104 / 106 coarse schemas kept with ans_size > 0.
      } [1.286s]
      Coarse level ended, resulting in 104 schemas.
    } [1.450s]
    Type level searching (total types = 10): {
      Current: 0 / 104
[{'book.written_work'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'government.governmental_body'}]
[{'type.datetime'}]
[{'people.person'}]
[{'military.military_combatant'}]
[{'sports.sports_team'}]
[{'olympics.olympic_athlete'}]
[{'biology.animal_breed'}]
[{'language.human_language'}]
[{'film.film'}]
[{'government.government_office_or_title'}]
[{'government.government'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.location'}]
[{'military.armed_force'}]
[{'olympics.olympic_games'}]
[{'base.mystery.ufo_sighting'}]
[{'spaceflight.space_program'}]
[{'spaceflight.astronaut'}]
[{'location.citytown'}]
[{'type.int'}]
[{'finance.currency'}]
[{'book.written_work'}]
[{'type.float'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'organization.organization'}]
[{'base.rivalries.rivalry'}]
[{'user.skud.nuclear_weapons.nuclear_test_series'}]
[{'user.skud.nuclear_weapons.nuclear_test'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure'}, {'type.datetime'}]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure'}, {'type.datetime'}]
[{'military.force_strength'}, {'military.military_conflict'}]
[{'military.casualties'}, {'military.military_combatant'}]
[{'military.casualties'}, {'military.casualties_type'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_event_competition'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'aviation.aircraft_ownership_count'}, {'aviation.aircraft_owner'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_sport'}]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure'}, {'user.skud.embassies_and_consulates.ambassador'}]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure'}, {'user.skud.embassies_and_consulates.embassy'}]
[{'military.force_strength'}, {'type.int'}]
[{'military.force_strength'}, {'military.military_resource'}]
[{'military.casualties'}, {'type.int'}]
[{'military.casualties'}, {'type.int'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_medal'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'aviation.aircraft_ownership_count'}, {'aviation.aircraft_model'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'military.military_command'}, {'military.military_commander'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_games'}]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure'}, {'location.country'}]
[{'military.force_strength'}, {'military.military_combatant'}]
[{'military.force_strength'}, {'type.datetime'}]
[{'military.casualties'}, {'military.military_conflict'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_athlete'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'government.national_anthem_of_a_country'}, {'government.national_anthem'}]
[{'sports.competitor_competition_relationship'}, {'sports.multi_event_tournament'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_competition_relationship'}, {'type.int'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competition'}]
      Current: 100 / 104
[{'base.unitednations.united_nations_body_membership'}, {'base.unitednations.united_nations_body'}]
[{'base.unitednations.united_nations_body_membership'}, {'type.datetime'}]
[{'base.unitednations.united_nations_body_membership'}, {'type.datetime'}]
[{'base.unitednations.united_nations_body_membership'}, {'base.unitednations.united_nations_member_state'}]
      0 typed schemas retrieved from 104 coarse schemas.
      Calculating F1 for 0 typed schemas: {
        0 / 0 typed schemas kept with ans_size > 0.
      } [0.000s]
      Typed level ended, resulting in 104 schemas.
    } [0.005s]
    Time level searching (total times = 0): {
      Current: 0 / 104
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'spaceflight.space_program.started', 'spaceflight.space_program.completed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'base.rivalries.rivalry.end_of_rivalry', 'base.rivalries.rivalry.start_of_rivalry'}]
self.var_time_preds: [{'user.skud.nuclear_weapons.nuclear_test_series.end_date', 'user.skud.nuclear_weapons.nuclear_test_series.start_date'}]
self.var_time_preds: [{'user.skud.nuclear_weapons.nuclear_test.date'}]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
self.var_time_preds: [{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
self.var_time_preds: [{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'aviation.aircraft_model.maiden_flight', 'aviation.aircraft_model.retired', 'aviation.aircraft_model.introduced'}]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      Current: 100 / 104
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, {'base.unitednations.united_nations_member_state.date_of_membership_dissolution', 'base.unitednations.united_nations_member_state.date_joined'}]
      0 timed schemas retrieved from 104 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 104 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 104
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'sports.sports_team.founded'}]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[{'spaceflight.space_program.started', 'spaceflight.space_program.completed'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[set()]
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[{'organization.organization.date_founded'}]
[{'organization.organization.date_founded'}]
[{'base.rivalries.rivalry.end_of_rivalry', 'base.rivalries.rivalry.start_of_rivalry'}]
[{'user.skud.nuclear_weapons.nuclear_test_series.end_date', 'user.skud.nuclear_weapons.nuclear_test_series.start_date'}]
[{'user.skud.nuclear_weapons.nuclear_test.date'}]
[{'measurement_unit.dated_integer.year'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
[{'military.force_strength.date'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), {'aviation.aircraft_model.maiden_flight', 'aviation.aircraft_model.retired', 'aviation.aircraft_model.introduced'}]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'user.skud.embassies_and_consulates.ambassadorial_tenure.from_date', 'user.skud.embassies_and_consulates.ambassadorial_tenure.to_date'}, set()]
[{'military.force_strength.date'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
      Current: 100 / 104
[{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, set()]
[{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, set()]
[{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, set()]
[{'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to'}, {'base.unitednations.united_nations_member_state.date_of_membership_dissolution', 'base.unitednations.united_nations_member_state.date_joined'}]
      0 ordinal schemas retrieved from 104 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 104 schemas.
    } [0.003s]
    [2020-12-03 14:18:29] buffer saved.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Left-Wing"" Communism: An Infantile Disorder"@en ?type1 WHERE { fb:m.05vz3zq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Left-Wing"" Communism: An Infantile Disorder"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
    104 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2200-2299/2292_schema].
  } [1m2.803s]
  Entering Q 2293 / 5810 [b'what county is lancaster ca located in?']: {
    Show 4 E + 10 T + 0 Tm + 0 Ord = 14 linkings: {
      #00 Entity: [3, 4) (lancaster) == m.0dbdy (lancashire) {'score': 2428.590678, 'source': 2.0}
      #01 Entity: [3, 5) (lancaster ca) == m.0r0jv (Lancaster%2c_California) {'score': 15106.688618, 'source': 1.0}
      #02 Entity: [4, 5) (ca) == m.0czcvlx (empress dowager cao) {'score': 115.673053, 'source': 2.0}
      #03 Entity: [5, 7) (located in) == m.09k5szc (international law and israeli settlements) {'score': 59.602868, 'source': 2.0}
      #04 Type: [0, 2) (what county) == location.us_county (us county) {'sim': 0.903678}
      #05 Type: [1, 2) (county) == location.hud_county_place (hud county place) {'sim': 0.841621}
      #06 Type: [1, 2) (county) == location.tw_county (taiwanese county) {'sim': 0.757356}
      #07 Type: [1, 2) (county) == location.uk_non_metropolitan_county (english non-metropolitan county) {'sim': 0.721089}
      #08 Type: [0, 3) (what county is) == location.us_state (us state) {'sim': 0.714063}
      #09 Type: [1, 2) (county) == location.cn_autonomous_county (chinese autonomous county) {'sim': 0.71079}
      #10 Type: [4, 7) (ca located in) == people.place_lived (place lived) {'sim': 0.696205}
      #11 Type: [6, 8) (in ?) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.689696}
      #12 Type: [6, 7) (in) == fictional_universe.school_in_fiction (school in fiction) {'sim': 0.677541}
      #13 Type: [0, 3) (what county is) == medicine.notable_person_with_medical_condition (public figure with medical condition) {'sim': 0.676999}
    } [0.000s]
    14 link data save to file.
    Coarse level searching (total entities = 4): {
      [Len-1||F1/4] (2020-12-03 14:19:31) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.09k5szc ?p1 ?o1 . }
        [2020-12-03 14:19:31] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.09k5szc ?p1 ?o1 . }
          Query return lines = 4
        } [0.009s]
        Filt_Query_Ret = 0 / 4 ( 0.009s)
      } [0.010s]
      [Len-1||F2/4] (2020-12-03 14:19:31) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0czcvlx ?p1 ?o1 . }
        [2020-12-03 14:19:31] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0czcvlx ?p1 ?o1 . }
          Query return lines = 6
        } [0.012s]
        Filt_Query_Ret = 1 / 6 ( 0.012s)
        [Len-1||F2/4||1/4-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0czcvlx ?p1 ?o1 . ?o1 ?p2 fb:m.09k5szc . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0czcvlx ?p1 ?o1 . ?o1 ?p2 fb:m.09k5szc . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-1||F2/4||3/4-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0czcvlx ?p1 ?o1 . ?o1 ?p2 fb:m.0dbdy . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0czcvlx ?p1 ?o1 . ?o1 ?p2 fb:m.0dbdy . }
            Query return lines = 0
          } [0.027s]
          Filt_Query_Ret = 0 / 0 ( 0.027s)
        } [0.027s]
      } [0.056s]
      [Len-1||F3/4] (2020-12-03 14:19:31) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0dbdy ?p1 ?o1 . }
        [2020-12-03 14:19:31] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0dbdy ?p1 ?o1 . }
          Query return lines = 31
        } [0.015s]
        Filt_Query_Ret = 19 / 31 ( 0.015s)
        [Len-1||F3/4||1/4-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 fb:m.09k5szc . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 fb:m.09k5szc . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-1||F3/4||2/4-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 fb:m.0czcvlx . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 fb:m.0czcvlx . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
      } [0.036s]
      [Len-1||F4/4] (2020-12-03 14:19:31) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0r0jv ?p1 ?o1 . }
        [2020-12-03 14:19:31] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0r0jv ?p1 ?o1 . }
          Query return lines = 29
        } [0.008s]
        Filt_Query_Ret = 11 / 29 ( 0.008s)
        [Len-1||F4/4||1/4-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0r0jv ?p1 ?o1 . ?o1 ?p2 fb:m.09k5szc . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0r0jv ?p1 ?o1 . ?o1 ?p2 fb:m.09k5szc . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
      } [0.021s]
      [Len-2||F1/4] (2020-12-03 14:19:31) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09k5szc ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:31] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09k5szc ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 18
        } [0.012s]
        Filt_Query_Ret = 0 / 18 ( 0.012s)
      } [0.012s]
      [Len-2||F2/4] (2020-12-03 14:19:31) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0czcvlx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:31] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0czcvlx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 67
        } [0.018s]
        Filt_Query_Ret = 0 / 67 ( 0.018s)
      } [0.018s]
      [Len-2||F3/4] (2020-12-03 14:19:31) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:31] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 943
        } [0.063s]
        Filt_Query_Ret = 8 / 943 ( 0.067s)
        [Len-2||F3/4||1/4-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09k5szc . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09k5szc . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-2||F3/4||1/4-2] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09k5szc . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09k5szc . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.017s]
        [Len-2||F3/4||2/4-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0czcvlx . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0czcvlx . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
        [Len-2||F3/4||2/4-2] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0czcvlx . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0dbdy ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0czcvlx . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.006s]
      } [0.100s]
      [Len-2||F4/4] (2020-12-03 14:19:31) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0r0jv ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:31] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0r0jv ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 564
        } [0.064s]
        Filt_Query_Ret = 28 / 564 ( 0.066s)
        [Len-2||F4/4||1/4-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0r0jv ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09k5szc . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0r0jv ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09k5szc . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
        [Len-2||F4/4||1/4-2] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0r0jv ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09k5szc . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0r0jv ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09k5szc . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
      } [0.090s]
      67 coarse schemas retrieved from scratch.
      Calculating F1 for 67 coarse schemas: {
        Current: 0 / 67
        Checking schema 0 / 67: {
          [('Main', '==', 'm.0czcvlx', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0czcvlx fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0czcvlx fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0czcvlx'}
            Query return lines = 1
            Final Answer: {'Female'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 1 / 67: {
          [('Main', '==', 'm.0dbdy', ['travel.travel_destination.tourist_attractions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'Three Brothers'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.administrative_division.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.administrative_division.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.administrative_division.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'United Kingdom'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 3 / 67: {
          [('Main', '==', 'm.0dbdy', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 4 / 67: {
          [('Main', '==', 'm.0dbdy', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'North West England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 5 / 67: {
          [('Main', '==', 'm.0dbdy', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'English non metropolitan county'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 6 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 176
            Final Answer: {'James Frost', 'Don Cupitt', 'Martin Wharton', 'Mandy Sellars', 'John Southworth', 'Rajeev Balasubramanyam', 'George Romney', 'John Mitchinson', 'Judy Astley', 'Aiden J. Harvey', 'Jack Kershaw', 'Geoff Billington', 'Brian Morris', 'Samuel Youd', 'Paul Reade', 'Ian Berry', 'Ryan Pope', 'John Crank', 'Bill Bland', 'Rachael Fleming', 'Alan Ashworth', 'Kathryn Harvey', 'Jack Seddon', 'Mike Wooller', 'Charles Cowper', 'Arthur Appleby', 'Samuel Bealey', 'David Allison', 'Sarah Stephens', 'Jo Beverley', 'Anna Jacobs', 'Benjamin Cowburn', 'Derek Clayton', 'Fred Valentine', 'John Plessington', 'Mabel Esplin', 'Samuel Oldknow', 'Edward A. Irving', 'Joan Abse', 'Michael Wooller', 'Geoff Pimblett', 'Thomas Postlethwaite', 'Sajjad Karim', 'Nigel Pilkington', 'Elsie Kelly', 'Joe Morris', 'Tom Burke', 'Neil Bell', 'Edmund Hamer Broadbent', 'John Lees', 'Phil Rickman', 'Philip Robinson', 'Anthony St Ledger', 'Graham Clark', 'Thelma Holt', 'Ted Needham', 'Pauline Challoner', 'Nuala Ní Dhomhnaill', 'Thomas Peel', 'Joanna Riding', 'Cathy Rogers', 'Thomas Anderton', 'Robert Bolton', 'Harry Rawson', 'John Chamberlain', 'Richard Lumsden', 'Victor Kiernan', 'Ann Pilling', 'Elisabeth Kirkby', 'Joe Stretch', 'Donald Hardman', 'Phil Rice', 'Katherine Moreau', 'Sally Douglas', 'R. A. Cross, 1st Viscount Cross', 'Theo Harding', 'Brian Redman', 'Michael Jeffers', 'Elizabeth Redgate', 'Richard Suart', 'Iain Coyle', 'Morton Lowry', 'Ian Gorst', 'Sarah Bates', 'Jeff Barlow', 'Margaret Fell', 'Wilf Gillow', 'Stephanie Kirkham', 'Anne Rafferty', 'Peter Gunn', 'Daf Hobson', 'Barbara Wood', 'Charles G. Booth', 'James Sharples', 'Ralph Copeland', 'Thomas Cottam', 'Gerry Bates', 'Trellis', 'Donald Jackson', 'Noreen Murray', 'Simon Procter', 'Richard Mather', 'Lemn Sissay', 'John Thulis', 'Lynne Hamilton', 'George Bradshaw', 'Graham Hough', 'David Ward', 'Roger Newcombe', 'Richard Barnes', 'Siobhan Finneran', 'Arthur Merriman', 'Suzie Toase', 'James Simpson', 'Ernest Marsden', 'Peter Lawrence', 'William Flynn', 'John Brophy', 'William Brodrick', 'Albert Pimblett', 'Marie Joseph', 'Andy Eastwood', 'William Barrow', 'Lady Dorothy Macmillan', 'Rosanna Lavelle', 'George Lowe Sutton', 'Adrian Rigby', 'Hugh Oldham', 'Edward Harrison', 'John Atherton', 'David Macaulay', 'Michael Hurst', 'Ray Connolly', 'Debbie Howard', 'Joan Fleming', 'Jackie Burroughs', 'Tom Eckersley', 'Steve Kemp', 'Chris Clarke', 'Graham Gouldman', 'John Bleasdale', 'Keith Wilkinson', 'Roger Evans', 'Roger Fenton', 'George Crompton', 'Humphrey Atherton', 'Ainsley Howard', 'Tom McGuire', 'Eric Ollerenshaw', 'John Christian Walker', 'Joanne Colan', 'Henry Hopwood', 'Magdalen Nabb', 'Nora Kershaw Chadwick', 'Richard Skelton', 'Matthew Dunster', 'Martin Gilbert Barrow', 'Freda Lightfoot', 'Rachel Sternberg', 'Laurence Chaderton', 'Ada Jones', 'John Bennet', 'Tom Clegg', 'Peter Hargreaves', 'William Edward Petty Hartnell', 'Robin Philipson', 'Sir George Bullough, 1st Baronet', 'Dawn Airey', 'Arthur Chambers', 'James Ormerod', 'Martin Booth', 'Ernest Butterworth', 'Philip Bond', 'Mary Bousted', 'Sarah Roache'}
            Answers = 175, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.064s]
          Answers = 175, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.064s]
        Checking schema 7 / 67: {
          [('Main', '==', 'm.0dbdy', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'Lancashire County Cricket Club'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 8 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.uk_non_metropolitan_county.administrative_headquarters'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.uk_non_metropolitan_county.administrative_headquarters ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.uk_non_metropolitan_county.administrative_headquarters ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'Preston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 9 / 67: {
          [('Main', '==', 'm.0dbdy', ['base.biblioness.bibs_location.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 10 / 67: {
          [('Main', '==', 'm.0dbdy', ['base.uncommon.topic.exceptions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.uncommon.topic.exceptions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.uncommon.topic.exceptions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'Metropolitan Borough of Oldham is contained in both Greater Manchester and Lancashire.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 11 / 67: {
          [('Main', '==', 'm.0dbdy', ['base.aareas.schema.administrative_area.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.aareas.schema.administrative_area.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.aareas.schema.administrative_area.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'Preston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 12 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 153
            Final Answer: {'Blackburn', 'Bispham High School Performing Arts College', 'River Lostock', 'Nelson and Colne College', 'Fair Snape Fell', 'High Bullough Reservoir', "Ward's Reservoir", 'Borough of Chorley', 'Leyland', 'Runshaw College, Chorley Town Centre', 'River Wenning', 'Accrington and Rossendale College', 'River Keer', 'Blackpool and The Fylde College, Fleetwood Nautical', 'Blackburn College', 'Marton Mere Local Nature Reserve', 'Palatine Community Sports College', 'Rossendale', 'Blackpool and The Fylde College, University Centre', 'Blackpool', 'University of Central Lancashire', 'Accrington', 'Blackpool Sixth Form College', 'Graduate College', 'Eagley Brook', 'Naden Brook', 'West Lancashire', 'River Ribble', 'Ogden Reservoirs', 'River Roddlesworth', 'Yarrow Reservoir', 'Marsden Heights Community College', 'Broad Fleet', 'Rivington Pike', 'Whalley Range, Blackburn', 'Blackpool and The Fylde College, Carleton Court', 'Green Hill', 'River Darwen', 'Fylde College, Lancaster University', 'The Adult College, Lancaster', 'River Winster', 'Black Brook', 'Hameldon Community College', 'River Conder', 'Worden Sports College', 'River Brock', 'Blackpool and The Fylde College, Seasiders Learning Centre', 'Blackstone Edge Reservoir', 'Skelmersdale and Holland', 'Healey Nab', 'Abbey Village Reservoir', 'St Helens', 'City of Lancaster', 'South Ribble', 'Cardinal Newman College', 'Hyndburn', 'Preston', 'Skirden Beck', 'Ashworth Moor Reservoir', 'Calf Hey Reservoir', 'Blackpool and The Fylde College, Ansdell', 'Southport', 'City of Preston, Lancashire', 'River Lune', 'River Loud', 'Lancaster and Morecambe College', 'River Cocker, Lancashire', 'River Yarrow', 'Pendle Water', 'Leck Beck', 'Highfield High Humanities College', 'River Spodden', 'Unity College', 'Upper Rivington Reservoir', 'River Brun', 'River Hindburn', 'River Irwell', 'Ashton-under-Lyne', 'Artle Beck', 'River Chor', 'Borough of Fylde', 'Bolton', 'River Grizedale', 'Rawtenstall', 'River Hodder', 'River Laneshaw', 'Wyre', 'Gragareth', 'Colne Water', 'Bishop Rawstorne', 'The Witchwood', 'Three Brothers', 'Tottington', 'River Hyndburn', 'Turton and Entwistle Reservoir', 'Shuttleworth College', 'Burnley', 'Stock Beck', 'Sabden Brook', 'Rake Brook Reservoir', 'Weets Hill', 'Myerscough College', 'Fleetwood Lodge', 'Pendleton Brook', 'Blackburn with Darwen', "Our Lady's Catholic College", 'Main Dyke', 'Pendle', 'Liverpool', 'Chorley', 'Bowland College, Lancaster University', 'Dingle Reservoir', 'River Greta', 'Winter Hill', 'University of Cumbria, Lancaster', 'The County College, Lancaster University', 'Upper Roddlesworth Reservoir', 'Bradshaw Brook', 'Bashall Brook', 'River Calder, Lancashire', 'Blessed Trinity RC College', 'River Calder, Wyre', 'River Roeburn', 'Stocks Reservoir', 'Pendle Vale College', 'River Blakewater, Lancashire', 'Martin Mere', 'Ribble Valley', 'Lower Roddlesworth Reservoir', 'Edge Hill University', 'Grizedale College, Lancaster University', 'River Wyre', 'Farnworth', 'River Ogden', 'Wycoller Beck', 'Skelmersdale & Ormskirk College,main campus', 'Runshaw College', 'River Douglas', 'Borough of Burnley', 'Boulsworth Hill', 'Hyndburn Brook', 'Oldham', 'Blackpool and The Fylde College, Park Road', 'Lancaster University', 'Parlick', 'River Don, Lancashire', 'Stydd Brook', 'Stonyhurst College', 'Green Withins Brook', 'Sir John Thursby Community College', 'Pendle Hill', 'Collegiate High School, Blackpool'}
            Answers = 152, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 152, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 13 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 3
            Final Answer: {'Twicket', 'Siege of Lathom House', 'Battle of Clitheroe'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 14 / 67: {
          [('Main', '==', 'm.0dbdy', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'North West Enquirer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 15 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.administrative_division.second_level_division_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.administrative_division.second_level_division_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.administrative_division.second_level_division_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 67: {
          [('Main', '==', 'm.0dbdy', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 4
            Final Answer: {'Blackpool', 'Blackburn with Darwen', 'City of Preston, Lancashire', 'Chorley'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 17 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0dbdy fb:location.location.area ?o1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 WHERE { fb:m.0dbdy fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'3075'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 18 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 3
            Final Answer: {'United Kingdom, with Dependencies and Territories', 'United Kingdom', 'North West England'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 19 / 67: {
          [('Main', '==', 'm.0dbdy', ['base.localfood.regional_food_source.food'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.localfood.regional_food_source.food ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.localfood.regional_food_source.food ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'Lancashire hotpot'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 20 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 24
            Final Answer: {'Jeff Springer', 'Charles Bruce', 'Jennifer L. Knox', 'Matthew Freeman', 'Tina Landon', 'Chaz Schilens', 'Bob Hannah', "D'Andre Goodwin", 'Bruce Van Dyke', 'Steve Buechele', 'Forrest Pruett', 'Chris Gocong', 'Kelsey Lewis', 'Kevin Bowe ', 'Sean Douglass', 'Christopher Avalos', 'Kevin Appier', 'Vixen LaMoore', 'Taveon Rogers', 'Sarah Williford', 'Tyrone Culver', 'Adam Wheeler', 'Kazeka Muniz', 'Ron emmerson'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 21 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_county_place.county'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.county ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.county ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'Los Angeles County'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.017s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.017s]
        Checking schema 22 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 8
            Final Answer: {'Antelope Valley Fairgrounds', 'Antelope Valley Indian Museum', 'Career Care Institute', 'West Coast Baptist College', 'Lancaster Beauty School', 'Antelope Valley Medical College', 'Antelope Valley College', 'California State Prison, Los Angeles County'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 23 / 67: {
          [('Main', '==', 'm.0r0jv', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 2
            Final Answer: {'Land of the Lost', 'Born Free'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 24 / 67: {
          [('Main', '==', 'm.0r0jv', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'Antelope Valley Press'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 25 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_county_place.place'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'Lancaster'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 26 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.citytown.postal_codes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.citytown.postal_codes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.citytown.postal_codes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 6
            Final Answer: {'93586', '93535', '93534', '93584', '93536', '93539'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 27 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'Pacific Time Zone'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 28 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0r0jv fb:location.location.area ?o1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 WHERE { fb:m.0r0jv fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'244.876'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 29 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 5
            Final Answer: {'Mojave Desert', 'Los Angeles County', 'United States of America', 'California', 'Area code 661'}
            Answers = 5, P = 0.200000, R = 1.000000, F1 = 0.333333
          } [0.006s]
          Answers = 5, P = 0.200000, R = 1.000000, F1 = 0.333333
        } [0.006s]
        Checking schema 30 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.location.nearby_airports'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'General William J. Fox Airfield'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 31 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0dbdy fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0dbdy fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'1449'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 32 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.administrative_division'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'Lancashire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 33 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0dbdy fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0dbdy fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'2006'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 34 / 67: {
          [('Main', '==', 'm.0dbdy', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 35 / 67: {
          [('Main', '==', 'm.0dbdy', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'Lancashire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 36 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0dbdy fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0dbdy fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'53.8'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 37 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0dbdy fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0dbdy fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'-2.6'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 38 / 67: {
          [('Main', '==', 'm.0dbdy', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.capital'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'Preston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 39 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 22
            Final Answer: {'1441', '1273', '1210', '98578', '1219', '1232', '1576', '1198', '1414', '1089', '1239', '1323', '1063', '1138', '1182', '1567', '1171', '1191', '1457', '1382', '1165', '1247'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 40 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.total_residential_addresses', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'50335'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 41 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.hhuniv', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'38157'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 42 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.total_90_day_vacant_residential_addresses', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'1803'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 43 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.estimated_number_of_mortgages', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'40228'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 44 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.estimated_number_foreclosures', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'4182'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 45 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.ofheo_price_change', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.ofheo_price_change ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.ofheo_price_change ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'-0.1428'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 46 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.bls_unemployment_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.bls_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.bls_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'0.101'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 47 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.location.geolocation', 'location.geocode.datum'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.datum ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.datum ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 48 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 22
            Final Answer: {'2007', '2002', '2011', '1992', '2006', '2001', '1996', '1994', '1999', '2009', '2000', '1997', '2003', '1995', '1998', '2005', '1990', '1991', '2004', '1993', '2010', '2008'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 49 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.total_residential_addresses', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 50 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.hhuniv', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 51 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.total_90_day_vacant_residential_addresses', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 52 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.estimated_number_of_mortgages', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 53 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.estimated_number_foreclosures', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 54 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'Unemployment rate, Unemployment in the U.S., U.S. Bureau of Labor Statistics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 55 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.ofheo_price_change', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.ofheo_price_change ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.ofheo_price_change ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 56 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.bls_unemployment_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.bls_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.bls_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 57 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 2
            Final Answer: {'United States Census Bureau, Population', 'Population, Population in the U.S., U.S. Census Bureau'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 58 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.total_residential_addresses', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'United States Department of Housing and Urban Development'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 59 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.hhuniv', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:31] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'United States Department of Housing and Urban Development'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 60 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.total_90_day_vacant_residential_addresses', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'United States Department of Housing and Urban Development'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 61 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.estimated_number_of_mortgages', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'United States Department of Housing and Urban Development'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 62 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.hud_foreclosure_area.estimated_number_foreclosures', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0r0jv fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'United States Department of Housing and Urban Development'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 63 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 94
            Final Answer: {'6.2', '5.3', '14.1', '14.6', '16.4', '8.6', '8.1', '17.7', '17.9', '8.7', '9', '6', '9.3', '17.2', '15.2', '18.5', '9.2', '9.4', '10', '10.1', '16.2', '12.5', '8.8', '15.6', '7.2', '16.5', '8.2', '14.4', '11', '6.5', '6.8', '16.6', '16.8', '4.9', '5.1', '11.9', '13.5', '9.6', '8.3', '7.9', '7', '9.1', '8.9', '17.1', '16.7', '7.1', '8.4', '15.1', '9.7', '7.5', '15.5', '8', '14.9', '6.9', '14', '7.6', '7.4', '6.4', '6.7', '5.8', '17.4', '15.3', '11.7', '5.6', '7.8', '7.7', '9.8', '15', '15.8', '10.6', '18.2', '5.7', '5.4', '12', '8.5', '17', '10.2', '11.6', '6.3', '5.2', '9.9', '16.9', '5.9', '5', '9.5', '18.4', '7.3', '6.6', '14.8', '17.3', '10.3', '14.5', '17.5'}
            Answers = 93, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 93, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 64 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 279
            Final Answer: {'2007', '2002', '2011', '1992', '2013', '2006', '2001', '1996', '1994', '2009', '1999', '2000', '1997', '2003', '1995', '1998', '2005', '2012', '1990', '1991', '2004', '1993', '2010', '2008'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 65 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'34.6981'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 66 / 67: {
          [('Main', '==', 'm.0r0jv', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 WHERE { fb:m.0r0jv fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'-118.136'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        65 / 67 coarse schemas kept with ans_size > 0.
      } [0.626s]
      Coarse level ended, resulting in 65 schemas.
    } [0.969s]
    Type level searching (total types = 10): {
      Current: 0 / 65
[{'people.gender'}]
[{'travel.tourist_attraction'}]
[{'location.country'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'people.person'}]
[{'sports.sports_team'}]
[{'location.citytown'}]
[{'location.location'}]
[{'base.uncommon.exception'}]
[{'base.aareas.schema.earth.citytown'}]
[{'location.location'}]
[{'time.event'}]
[{'book.newspaper'}]
[{'location.country'}]
[{'base.aareas.schema.administrative_area'}]
[{'type.float'}]
[{'location.location'}]
[{'base.localfood.regional_food'}]
[{'people.person'}]
[{'location.us_county'}]
[{'location.location'}]
[{'film.film'}]
[{'book.newspaper'}]
[{'location.location'}]
[{'location.postal_code'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'aviation.airport'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'location.administrative_division_capital_relationship'}, {'location.administrative_division'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.administrative_division_capital_relationship'}, {'location.capital_of_administrative_division'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
      37 typed schemas retrieved from 65 coarse schemas.
      Calculating F1 for 37 typed schemas: {
        Current: 0 / 37
        Checking schema 0 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.people_born_here']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 1 / 37: {
          [('Main', '==', 'm.0dbdy', ['base.biblioness.bibs_location.country']), ('Type', '==', 'location.us_county', ['type.object.type'])]
          var_types: [{'location.us_county', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 37: {
          [('Main', '==', 'm.0dbdy', ['base.biblioness.bibs_location.country']), ('Type', '==', 'location.hud_county_place', ['type.object.type'])]
          var_types: [{'location.hud_county_place', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 3 / 37: {
          [('Main', '==', 'm.0dbdy', ['base.biblioness.bibs_location.country']), ('Type', '==', 'location.uk_non_metropolitan_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.uk_non_metropolitan_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 4 / 37: {
          [('Main', '==', 'm.0dbdy', ['base.biblioness.bibs_location.country']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 5 / 37: {
          [('Main', '==', 'm.0dbdy', ['base.biblioness.bibs_location.country']), ('Type', '==', 'location.cn_autonomous_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.cn_autonomous_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 6 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.contains']), ('Type', '==', 'location.us_county', ['type.object.type'])]
          var_types: [{'location.us_county', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 7 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.contains']), ('Type', '==', 'location.hud_county_place', ['type.object.type'])]
          var_types: [{'location.hud_county_place', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 8 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.contains']), ('Type', '==', 'location.uk_non_metropolitan_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.uk_non_metropolitan_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 9 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.contains']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 10 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.contains']), ('Type', '==', 'location.cn_autonomous_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.cn_autonomous_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 11 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.containedby']), ('Type', '==', 'location.us_county', ['type.object.type'])]
          var_types: [{'location.us_county', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 12 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.containedby']), ('Type', '==', 'location.hud_county_place', ['type.object.type'])]
          var_types: [{'location.hud_county_place', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 13 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.containedby']), ('Type', '==', 'location.uk_non_metropolitan_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.uk_non_metropolitan_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.containedby']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 15 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.location.containedby']), ('Type', '==', 'location.cn_autonomous_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.cn_autonomous_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0dbdy fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 16 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.people_born_here']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 17 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.hud_county_place.county']), ('Type', '==', 'location.us_county', ['type.object.type'])]
          var_types: [{'location.us_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.county ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.county ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'Los Angeles County'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.010s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.010s]
        Checking schema 18 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.contains']), ('Type', '==', 'location.us_county', ['type.object.type'])]
          var_types: [{'location.us_county', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 19 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.contains']), ('Type', '==', 'location.hud_county_place', ['type.object.type'])]
          var_types: [{'location.hud_county_place', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 20 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.contains']), ('Type', '==', 'location.uk_non_metropolitan_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.uk_non_metropolitan_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 21 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.contains']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 22 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.contains']), ('Type', '==', 'location.cn_autonomous_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.cn_autonomous_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 23 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.hud_county_place.place']), ('Type', '==', 'location.us_county', ['type.object.type'])]
          var_types: [{'location.us_county', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 24 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.hud_county_place.place']), ('Type', '==', 'location.hud_county_place', ['type.object.type'])]
          var_types: [{'location.hud_county_place', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'Lancaster'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 25 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.hud_county_place.place']), ('Type', '==', 'location.uk_non_metropolitan_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.uk_non_metropolitan_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 26 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.hud_county_place.place']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 27 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.hud_county_place.place']), ('Type', '==', 'location.cn_autonomous_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.cn_autonomous_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 28 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.containedby']), ('Type', '==', 'location.us_county', ['type.object.type'])]
          var_types: [{'location.us_county', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'Los Angeles County'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.024s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.024s]
        Checking schema 29 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.containedby']), ('Type', '==', 'location.hud_county_place', ['type.object.type'])]
          var_types: [{'location.hud_county_place', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.hud_county_place . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 30 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.containedby']), ('Type', '==', 'location.uk_non_metropolitan_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.uk_non_metropolitan_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 31 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.containedby']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 1
            Final Answer: {'California'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 32 / 37: {
          [('Main', '==', 'm.0r0jv', ['location.location.containedby']), ('Type', '==', 'location.cn_autonomous_county', ['type.object.type'])]
          var_types: [{'location.location', 'location.cn_autonomous_county'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0r0jv fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.cn_autonomous_county . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0r0jv'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 33 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.administrative_division']), ('Type', '==', 'location.us_county', ['type.object.type'])]
          var_types: [{'location.administrative_division_capital_relationship'}, {'location.us_county', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.type fb:location.us_county . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.type fb:location.us_county . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 34 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.administrative_division']), ('Type', '==', 'location.uk_non_metropolitan_county', ['type.object.type'])]
          var_types: [{'location.administrative_division_capital_relationship'}, {'location.uk_non_metropolitan_county', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.type fb:location.uk_non_metropolitan_county . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 1
            Final Answer: {'Lancashire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 35 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.administrative_division']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.administrative_division_capital_relationship'}, {'location.us_state', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 36 / 37: {
          [('Main', '==', 'm.0dbdy', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.administrative_division']), ('Type', '==', 'location.cn_autonomous_county', ['type.object.type'])]
          var_types: [{'location.administrative_division_capital_relationship'}, {'location.cn_autonomous_county', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.type fb:location.cn_autonomous_county . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:32] Q_Schema Request: {
            WebQ_2293|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0dbdy fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.type fb:location.cn_autonomous_county . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0dbdy'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        5 / 37 typed schemas kept with ans_size > 0.
      } [0.382s]
      Typed level ended, resulting in 70 schemas.
    } [0.389s]
    Time level searching (total times = 0): {
      Current: 0 / 70
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
      0 timed schemas retrieved from 70 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 70 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 70
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[{'sports.sports_team.founded'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[set(), set()]
[set(), set()]
[set()]
[set()]
[set()]
[set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
      0 ordinal schemas retrieved from 70 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 70 schemas.
    } [0.001s]
    [2020-12-03 14:19:32] buffer saved.
    70 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2200-2299/2293_schema].
  } [23.429s]
  Entering Q 2294 / 5810 [b'who is steve nash married to?']: {
    Show 1 E + 10 T + 0 Tm + 0 Ord = 11 linkings: {
      #00 Entity: [2, 4) (steve nash) == m.01yqrk (Steve_Nash) {'score': 22151.932108, 'source': 0.0}
      #01 Type: [0, 2) (who is) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.754711}
      #02 Type: [0, 2) (who is) == film.person_or_entity_appearing_in_film (person or entity appearing in film) {'sim': 0.687774}
      #03 Type: [4, 5) (married) == fictional_universe.marriage_of_fictional_characters (marriage) {'sim': 0.686736}
      #04 Type: [4, 5) (married) == people.marriage (marriage) {'sim': 0.686736}
      #05 Type: [0, 2) (who is) == film.film_company_role_or_service (film company role or service) {'sim': 0.669089}
      #06 Type: [0, 2) (who is) == people.person (person) {'sim': 0.667663}
      #07 Type: [0, 2) (who is) == medicine.notable_person_with_medical_condition (public figure with medical condition) {'sim': 0.658346}
      #08 Type: [0, 2) (who is) == business.company_name_change (organization name change) {'sim': 0.651978}
      #09 Type: [0, 2) (who is) == media_common.lost_work (lost work) {'sim': 0.647699}
      #10 Type: [0, 2) (who is) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.646793}
    } [0.000s]
    11 link data save to file.
    Coarse level searching (total entities = 1): {
      [Len-1||F1/1] (2020-12-03 14:19:54) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01yqrk ?p1 ?o1 . }
        [2020-12-03 14:19:54] SPARQL hit!
        Filt_Query_Ret = 18 / 42 ( 0.000s)
      } [0.000s]
      [Len-2||F1/1] (2020-12-03 14:19:54) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01yqrk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:54] SPARQL hit!
        Filt_Query_Ret = 75 / 504 ( 0.002s)
      } [0.003s]
      93 coarse schemas retrieved from scratch.
      Calculating F1 for 93 coarse schemas: {
        Current: 0 / 93
        Checking schema 0 / 93: {
          [('Main', '==', 'm.01yqrk', ['tv.tv_director.episodes_directed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:tv.tv_director.episodes_directed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:tv.tv_director.episodes_directed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Into the Wind'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 1 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01yqrk fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 WHERE { fb:m.01yqrk fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'1974'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'Canada', 'England'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 3 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'Jean Nash', 'John Nash'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 4 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01yqrk fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 WHERE { fb:m.01yqrk fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'1.91'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 5 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.team'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:basketball.basketball_player.team ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:basketball.basketball_player.team ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 6 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.daylifetopics.daylife_id.daylife_topic_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:base.daylifetopics.daylife_id.daylife_topic_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:base.daylifetopics.daylife_id.daylife_topic_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 7 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 3
            Final Answer: {'Bella Nash', 'Lola Nash', 'Matteo Joel Nash'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 8 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01yqrk fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 WHERE { fb:m.01yqrk fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'81'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 9 / 93: {
          [('Main', '==', 'm.01yqrk', ['film.director.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Into the Wind'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 10 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:basketball.basketball_player.position_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:basketball.basketball_player.position_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Point guard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 11 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.daylifetopics.daylife_id.daylife_topic_id'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:base.daylifetopics.daylife_id.daylife_topic_id ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:base.daylifetopics.daylife_id.daylife_topic_id ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 12 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'Basketball player', 'Athlete'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 13 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Johannesburg'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 15 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.career_start'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01yqrk fb:sports.pro_athlete.career_start ?o1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 WHERE { fb:m.01yqrk fb:sports.pro_athlete.career_start ?o1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'1996'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.former_teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:basketball.basketball_player.former_teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:basketball.basketball_player.former_teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 17 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.daylifetopics.daylife_id.daylife_url_token'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:base.daylifetopics.daylife_id.daylife_url_token ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:base.daylifetopics.daylife_id.daylife_url_token ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 18 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'5.5e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 19 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.teams', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 20 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.teams', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 21 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.teams', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 4
            Final Answer: {'2012', '1996', '1998', '2004'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 22 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 23 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 24 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 3
            Final Answer: {'Joann Nash', 'Martin Nash'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 25 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.sports_award_winner.awards', 'sports.sports_award.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.season ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'2004–05 NBA season', '2005–06 NBA season'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 26 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'Alejandra Amarilla'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.023s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.023s]
        Checking schema 27 / 93: {
          [('Main', '==', 'm.01yqrk', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 28 / 93: {
          [('Main', '==', 'm.01yqrk', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'2005'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 29 / 93: {
          [('Main', '==', 'm.01yqrk', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 30 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 31 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.blocks'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.blocks ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.blocks ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 8
            Final Answer: {'8', '0', '2', '5', '4', '6', '12', '3'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 32 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fta'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fta ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fta ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'238', '51', '245', '85', '86', '293', '339', '46', '258', '251', '247', '279'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 33 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.ftm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ftm ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ftm ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 11
            Final Answer: {'257', '42', '260', '222', '230', '231', '75', '74', '38', '308', '211'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 34 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.ft_percentage'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ft_percentage ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ft_percentage ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 11
            Final Answer: {'0.909', '0.826', '0.824', '0.921', '0.916', '0.899', '0.906', '0.882', '0.86', '0.887', '0.895'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 35 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.offensive_rebounds'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.offensive_rebounds ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.offensive_rebounds ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 11
            Final Answer: {'28', '34', '63', '16', '59', '50', '32', '30', '57', '46', '47'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 36 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_player_fouls'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_player_fouls ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_player_fouls ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 9
            Final Answer: {'1.8', '1.4', '2', '2.3', '1.6', '1.9', '1.5', '2.5', '2.2'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 37 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.three_fga'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fga ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fga ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 11
            Final Answer: {'257', '381', '342', '55', '131', '218', '219', '269', '343', '195', '149'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 38 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.games'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.games ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.games ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 10
            Final Answer: {'76', '65', '81', '75', '79', '56', '40', '78', '70', '82'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 39 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_assists'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_assists ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_assists ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 11
            Final Answer: {'11.5', '5.5', '3.4', '11.6', '10.5', '8.8', '4.9', '2.1', '11.1', '7.7', '7.3'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 40 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.three_fgm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fgm ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fgm ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 11
            Final Answer: {'179', '49', '23', '81', '156', '60', '104', '150', '111', '89', '94'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 41 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.player_fouls'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player_fouls ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player_fouls ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'117', '98', '136', '134', '122', '145', '92', '164', '120', '139', '113', '158'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 42 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 43 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.salary'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.salary ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.salary ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'8.9e+06', '1.16891e+07'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 44 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'Phoenix Suns', 'Los Angeles Lakers'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 45 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 46 / 93: {
          [('Main', '==', 'm.01yqrk', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 4
            Final Answer: {'Basketball Man', 'Life as We Know It', '9 - Un chiffre, un homme', 'NBA Street Series: Vol. 5: The Journey to Becoming an All-Star'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 47 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.teams', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 3
            Final Answer: {'1998', '2012', '2004'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 48 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.teams', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 3
            Final Answer: {'Dallas Mavericks', 'Phoenix Suns', 'Los Angeles Lakers'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 49 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Victoria'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 50 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.sports_award_winner.awards', 'sports.sports_award.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'NBA Most Valuable Player Award'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 51 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'2005'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 52 / 93: {
          [('Main', '==', 'm.01yqrk', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'Basketball Man', 'Like Mike'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 53 / 93: {
          [('Main', '==', 'm.01yqrk', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 54 / 93: {
          [('Main', '==', 'm.01yqrk', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:54] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 55 / 93: {
          [('Main', '==', 'm.01yqrk', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 56 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.rebounds'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.rebounds ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.rebounds ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'234', '114', '269', '223', '121', '63', '254', '232', '249', '282', '333', '160'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 57 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_rebounds'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_rebounds ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_rebounds ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 10
            Final Answer: {'4.2', '3.5', '1', '2.9', '3.1', '2.2', '3.2', '3.3', '3', '2.1'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 58 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fga'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fga ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fga ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'314', '1056', '363', '584', '845', '961', '1114', '1088', '792', '971', '857', '175'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 59 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.turnovers'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.turnovers ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.turnovers ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'98', '192', '205', '83', '63', '245', '295', '229', '102', '287', '209', '276'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 60 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fg_percentage'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fg_percentage ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fg_percentage ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'0.465', '0.487', '0.512', '0.505', '0.532', '0.363', '0.477', '0.423', '0.483', '0.502', '0.459', '0.47'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 61 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.season ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'1999–2000 NBA season', '2001–02 NBA season', '1997–98 NBA season', '2002–03 NBA season', '2004–05 NBA season', '2003–04 NBA season', '2005–06 NBA season', '2007–08 NBA season', '1998–99 NBA season', '2006–07 NBA season', '1996–97 NBA season', '2000–01 NBA season'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 62 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.steals'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.steals ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.steals ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 10
            Final Answer: {'20', '53', '63', '61', '37', '85', '74', '57', '72', '67'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 63 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fgm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fgm ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fgm ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'525', '114', '386', '173', '517', '541', '485', '268', '430', '397', '518', '74'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 64 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Basketball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 65 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 66 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 67 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 68 / 93: {
          [('Main', '==', 'm.01yqrk', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 69 / 93: {
          [('Main', '==', 'm.01yqrk', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 70 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.teams', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Point guard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 71 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 72 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Los Angeles Lakers'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 73 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'Santa Clara University', 'St. Michaels University School'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 74 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 75 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.sports_award_winner.awards', 'sports.sports_award.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 76 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.sports_award_winner.awards', 'sports.sports_award.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Phoenix Suns'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 77 / 93: {
          [('Main', '==', 'm.01yqrk', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 78 / 93: {
          [('Main', '==', 'm.01yqrk', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 79 / 93: {
          [('Main', '==', 'm.01yqrk', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Best NBA Player ESPY Award'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 80 / 93: {
          [('Main', '==', 'm.01yqrk', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'A Short Story and a Tall Tale'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 81 / 93: {
          [('Main', '==', 'm.01yqrk', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'The Buried Life'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 82 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'Dallas Mavericks', 'Phoenix Suns'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 83 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_blocks'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_blocks ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_blocks ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 3
            Final Answer: {'0.2', '0', '0.1'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 84 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.points'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.points ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.points ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'213', '691', '1412', '1466', '1092', '1455', '315', '1489', '1371', '1165', '481', '1128'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 85 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.defensive_rebounds'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.defensive_rebounds ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.defensive_rebounds ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'173', '192', '171', '286', '177', '254', '128', '204', '47', '87', '82', '239'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 86 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_turnovers'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_turnovers ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_turnovers ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'1.8', '3.5', '2.3', '1', '2.9', '2.8', '3.8', '3.3', '3.6', '2.7', '1.3', '2.1'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 87 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_steals'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_steals ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_steals ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 6
            Final Answer: {'0.3', '0.6', '1', '0.8', '0.7', '0.9'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 88 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.three_point_percentage'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_point_percentage ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_point_percentage ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 11
            Final Answer: {'0.415', '0.413', '0.403', '0.418', '0.374', '0.455', '0.405', '0.406', '0.431', '0.47', '0.439'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 89 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.assists'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.assists ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.assists ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'138', '598', '509', '884', '634', '262', '219', '272', '897', '861', '826', '687'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 90 / 93: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_points'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_points ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_points ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 12
            Final Answer: {'8.6', '9.1', '17.7', '17.9', '3.3', '14.5', '15.6', '16.9', '18.8', '15.5', '7.9', '18.6'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 91 / 93: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.career_start'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_start ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_start ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'1996'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 92 / 93: {
          [('Main', '==', 'm.01yqrk', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.date ?o2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 WHERE { fb:m.01yqrk fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'2012', '2011'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        87 / 93 coarse schemas kept with ans_size > 0.
      } [0.985s]
      Coarse level ended, resulting in 87 schemas.
    } [0.989s]
    Type level searching (total types = 10): {
      Current: 0 / 87
[{'tv.tv_series_episode'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'type.float'}]
[{'people.person'}]
[{'type.float'}]
[{'film.film'}]
[{'basketball.basketball_position'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'sports.sports_award'}, {'sports.sports_league_season'}]
[{'people.marriage'}, {'people.person'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'basketball.basketball_player_stats'}, {'basketball.basketball_player'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'sports.pro_sports_played'}, {'sports.pro_athlete'}]
[{'base.schemastaging.athlete_salary'}, {'type.float'}]
[{'base.schemastaging.athlete_salary'}, {'base.schemastaging.sports_team_extra'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'film.performance'}, {'film.film'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'people.place_lived'}, {'location.location'}]
[{'sports.sports_award'}, {'sports.sports_award_type'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'sports.sports_league_season'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'sports.pro_sports_played'}, {'sports.sport'}]
[{'base.schemastaging.athlete_salary'}, {'finance.currency'}]
[{'base.schemastaging.athlete_salary'}, {'base.schemastaging.athlete_extra'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'sports.sports_award'}, {'sports.sports_award_winner'}]
[{'sports.sports_award'}, {'sports.sports_team'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_program'}]
[{'basketball.basketball_player_stats'}, {'basketball.basketball_team'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'sports.pro_sports_played'}, {'type.datetime'}]
[{'base.schemastaging.athlete_salary'}, {'type.datetime'}]
      30 typed schemas retrieved from 87 coarse schemas.
      Calculating F1 for 30 typed schemas: {
        Current: 0 / 30
        Checking schema 0 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.parents']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:people.person . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:people.person . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'Jean Nash', 'John Nash'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.163s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.163s]
        Checking schema 2 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.parents']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.children']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 4 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.children']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:people.person . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:people.person . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 3
            Final Answer: {'Bella Nash', 'Lola Nash', 'Matteo Joel Nash'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.238s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.238s]
        Checking schema 5 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.children']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01yqrk fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 6 / 30: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.teams', 'sports.sports_team_roster.player']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'sports.sports_team_roster'}, {'sports.pro_athlete', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:55] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.335s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.335s]
        Checking schema 7 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:56] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 8 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:56] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.090s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.090s]
        Checking schema 9 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:56] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:56] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 11 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:56] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 3
            Final Answer: {'Joann Nash', 'Martin Nash'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.320s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.320s]
        Checking schema 12 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:56] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 13 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:56] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 14 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:56] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 2
            Final Answer: {'Alejandra Amarilla'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.163s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.163s]
        Checking schema 15 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:56] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 16 / 30: {
          [('Main', '==', 'm.01yqrk', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.player']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'basketball.basketball_player_stats'}, {'basketball.basketball_player', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:56] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [1.090s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [1.090s]
        Checking schema 17 / 30: {
          [('Main', '==', 'm.01yqrk', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.athlete']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'sports.pro_sports_played'}, {'sports.pro_athlete', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.123s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.123s]
        Checking schema 18 / 30: {
          [('Main', '==', 'm.01yqrk', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'tv.tv_guest_role'}, {'tv.tv_actor', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.126s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.126s]
        Checking schema 19 / 30: {
          [('Main', '==', 'm.01yqrk', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'tv.tv_regular_personal_appearance'}, {'people.person', 'tv.tv_personality'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.126s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.126s]
        Checking schema 20 / 30: {
          [('Main', '==', 'm.01yqrk', ['film.actor.film', 'film.performance.actor']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'film.performance'}, {'film.actor', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.351s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.351s]
        Checking schema 21 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 22 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.116s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.116s]
        Checking schema 23 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 24 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 25 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.education', 'education.education.student']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.195s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.195s]
        Checking schema 26 / 30: {
          [('Main', '==', 'm.01yqrk', ['people.person.education', 'education.education.student']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'education.education'}, {'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 27 / 30: {
          [('Main', '==', 'm.01yqrk', ['sports.sports_award_winner.awards', 'sports.sports_award.award_winner']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'sports.sports_award'}, {'sports.sports_award_winner', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.award_winner ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.award_winner ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.167s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.167s]
        Checking schema 28 / 30: {
          [('Main', '==', 'm.01yqrk', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 29 / 30: {
          [('Main', '==', 'm.01yqrk', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person']), ('Type', '==', 'people.person', ['type.object.type'])]
          var_types: [{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2294|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01yqrk fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:people.person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01yqrk'}
            Query return lines = 1
            Final Answer: {'Steve Nash'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.177s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.177s]
        20 / 30 typed schemas kept with ans_size > 0.
      } [3.978s]
      Typed level ended, resulting in 107 schemas.
    } [3.986s]
    Time level searching (total times = 0): {
      Current: 0 / 107
self.var_time_preds: [{'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start', 'people.person.date_of_birth'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start', 'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
      Current: 100 / 107
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
      0 timed schemas retrieved from 107 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 107 schemas.
    } [0.005s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 107
[{'tv.tv_series_episode.air_date'}]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[set(), set()]
[set(), {'sports.sports_team.founded'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set(), {'tv.tv_series_episode.air_date'}]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'people.person.date_of_birth'}]
[{'people.person.date_of_birth'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start', 'people.person.date_of_birth'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start', 'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
      Current: 100 / 107
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[set(), set()]
[set(), {'people.person.date_of_birth'}]
      0 ordinal schemas retrieved from 107 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 107 schemas.
    } [0.004s]
    [2020-12-03 14:19:59] buffer saved.
    107 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2200-2299/2294_schema].
  } [17.230s]
  Entering Q 2295 / 5810 [b'where is compaq laptops made?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [2, 3) (compaq) == m.025j1 (Compaq) {'score': 20131.438971, 'source': 0.0}
      #01 Entity: [2, 3) (compaq) == m.03mnk (Hewlett-Packard) {'score': 4.097487, 'source': 0.0}
      #02 Type: [0, 2) (where is) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.710855}
      #03 Type: [0, 2) (where is) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.697825}
      #04 Type: [0, 1) (where) == location.place_with_neighborhoods (place with neighborhoods) {'sim': 0.687732}
      #05 Type: [0, 2) (where is) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.67534}
      #06 Type: [0, 2) (where is) == military.military_unit_place_of_origin (military unit place of origin) {'sim': 0.674805}
      #07 Type: [0, 2) (where is) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.674725}
      #08 Type: [0, 2) (where is) == business.company_name_change (organization name change) {'sim': 0.671895}
      #09 Type: [0, 1) (where) == people.place_lived (place lived) {'sim': 0.669691}
      #10 Type: [0, 2) (where is) == film.person_or_entity_appearing_in_film (person or entity appearing in film) {'sim': 0.667002}
      #11 Type: [0, 2) (where is) == measurement_unit.time_unit (unit of time) {'sim': 0.661605}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:20:11) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.025j1 ?p1 ?o1 . }
        [2020-12-03 14:20:11] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.025j1 ?p1 ?o1 . }
          Query return lines = 29
        } [0.008s]
        Filt_Query_Ret = 9 / 29 ( 0.008s)
      } [0.008s]
      [Len-1||F2/2] (2020-12-03 14:20:11) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03mnk ?p1 ?o1 . }
        [2020-12-03 14:20:11] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03mnk ?p1 ?o1 . }
          Query return lines = 56
        } [0.008s]
        Filt_Query_Ret = 20 / 56 ( 0.008s)
      } [0.008s]
      [Len-2||F1/2] (2020-12-03 14:20:11) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025j1 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:11] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025j1 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 180
        } [0.011s]
        Filt_Query_Ret = 41 / 180 ( 0.012s)
      } [0.012s]
      [Len-2||F2/2] (2020-12-03 14:20:11) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03mnk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:11] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03mnk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 580
        } [0.034s]
        Filt_Query_Ret = 93 / 580 ( 0.039s)
      } [0.040s]
      163 coarse schemas retrieved from scratch.
      Calculating F1 for 163 coarse schemas: {
        Current: 0 / 163
        Checking schema 0 / 163: {
          [('Main', '==', 'm.025j1', ['business.defunct_company.reason_for_ceasing_operations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:business.defunct_company.reason_for_ceasing_operations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:business.defunct_company.reason_for_ceasing_operations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Acquisition'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 1 / 163: {
          [('Main', '==', 'm.025j1', ['base.gadgets.brand.products'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:base.gadgets.brand.products ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:base.gadgets.brand.products ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 2
            Final Answer: {'HP Mini 1151NR', 'Compaq Presario'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 2 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.025j1 fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 WHERE { fb:m.025j1 fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'1982'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 3 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.founders'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 3
            Final Answer: {'Benjamin M. Rosen', 'Rod Canion', 'Jim Harris'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 4 / 163: {
          [('Main', '==', 'm.025j1', ['business.business_operation.industry'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Computer hardware'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 5 / 163: {
          [('Main', '==', 'm.025j1', ['business.defunct_company.ceased_operations'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.025j1 fb:business.defunct_company.ceased_operations ?o1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 WHERE { fb:m.025j1 fb:business.defunct_company.ceased_operations ?o1 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'2002'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 6 / 163: {
          [('Main', '==', 'm.025j1', ['computer.software_developer.software'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:computer.software_developer.software ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:computer.software_developer.software ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'DVD Play'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 7 / 163: {
          [('Main', '==', 'm.025j1', ['computer.operating_system_developer.operating_systems_developed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:computer.operating_system_developer.operating_systems_developed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:computer.operating_system_developer.operating_systems_developed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Tru64 UNIX'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 8 / 163: {
          [('Main', '==', 'm.025j1', ['computer.computer_manufacturer_brand.computer_lines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:computer.computer_manufacturer_brand.computer_lines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025j1 fb:computer.computer_manufacturer_brand.computer_lines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'ProLiant'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 9 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.legal_structure'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.legal_structure ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.legal_structure ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Corporation'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 10 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.slogan'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.slogan ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.slogan ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 11 / 163: {
          [('Main', '==', 'm.03mnk', ['business.issuer.issue'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:business.issuer.issue ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:business.issuer.issue ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'HEWLETT-PACKARD CO Common Stock', 'HEWLETT-PACKARD Common Stock'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 12 / 163: {
          [('Main', '==', 'm.03mnk', ['base.gadgets.brand.products'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:base.gadgets.brand.products ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:base.gadgets.brand.products ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 3
            Final Answer: {'HP Mini 1000', 'HP TouchPad', 'HP 2133 Mini-Note PC'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 13 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.place_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.place_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.place_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Palo Alto'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 14 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization_partnership.members'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization_partnership.members ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization_partnership.members ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Linux Foundation'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 15 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03mnk fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 WHERE { fb:m.03mnk fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'1939'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 16 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.founders'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'David Packard', 'William Redington Hewlett'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 17 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.geographic_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.geographic_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.geographic_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'World'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 18 / 163: {
          [('Main', '==', 'm.03mnk', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'Tough Choices: A Memoir', "Bill & Dave: How Hewlett and Packard Built the World's Greatest Company"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 19 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.industry'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 5
            Final Answer: {'Other Computer Peripheral Equipment Manufacturing', 'Computer Peripheral Equipment, NEC', 'Electronic Computer Manufacturing', 'Computer hardware', 'Software'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 20 / 163: {
          [('Main', '==', 'm.03mnk', ['computer.processor_manufacturer.processors_manufactured'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:computer.processor_manufacturer.processors_manufactured ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:computer.processor_manufacturer.processors_manufactured ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'PA-RISC'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 21 / 163: {
          [('Main', '==', 'm.03mnk', ['computer.software_developer.software'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:computer.software_developer.software ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:computer.software_developer.software ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 9
            Final Answer: {'HP LoadRunner', 'HP QuickTest Professional', 'Remote Graphics Software', 'HP Integrity Virtual Machines', 'WebOS', 'LILO', 'Elilo', 'HP Quality Center', 'Jena'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 22 / 163: {
          [('Main', '==', 'm.03mnk', ['conferences.conference_sponsor.conferences'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:conferences.conference_sponsor.conferences ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:conferences.conference_sponsor.conferences ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {"O'Reilly Open Source Convention", 'FOSDEM'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 23 / 163: {
          [('Main', '==', 'm.03mnk', ['computer.computer_manufacturer_brand.computer_models'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:computer.computer_manufacturer_brand.computer_models ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:computer.computer_manufacturer_brand.computer_models ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 5
            Final Answer: {'HP TouchPad', 'HP 2133 Mini-Note PC', 'HP Mini 1000', 'HP Veer', 'ProLiant'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 24 / 163: {
          [('Main', '==', 'm.03mnk', ['computer.operating_system_developer.operating_systems_developed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:computer.operating_system_developer.operating_systems_developed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:computer.operating_system_developer.operating_systems_developed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 5
            Final Answer: {'OpenVMS', 'WebOS', 'Tru64 UNIX', 'HP-UX', 'MIE Linux'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 25 / 163: {
          [('Main', '==', 'm.03mnk', ['business.customer.supplier'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:business.customer.supplier ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:business.customer.supplier ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Dezide ApS'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 26 / 163: {
          [('Main', '==', 'm.03mnk', ['computer.computer_manufacturer_brand.computer_lines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:computer.computer_manufacturer_brand.computer_lines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:computer.computer_manufacturer_brand.computer_lines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'VAX', 'ProLiant'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 27 / 163: {
          [('Main', '==', 'm.03mnk', ['user.robert.mobile_phones.product_brand.products'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:user.robert.mobile_phones.product_brand.products ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:user.robert.mobile_phones.product_brand.products ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'HP Veer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 28 / 163: {
          [('Main', '==', 'm.03mnk', ['digicams.digital_camera_manufacturer.cameras'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:digicams.digital_camera_manufacturer.cameras ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:digicams.digital_camera_manufacturer.cameras ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 7
            Final Answer: {'HP Photosmart R837', 'HP Photosmart M437', 'HP Photosmart R937', 'HP Photosmart M537', 'HP Photosmart R742', 'HP Photosmart Mz67', 'HP Photosmart E337'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 29 / 163: {
          [('Main', '==', 'm.025j1', ['business.business_operation.revenue', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 2
            Final Answer: {'2.8761e+09', '3.8525e+10'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 30 / 163: {
          [('Main', '==', 'm.025j1', ['business.business_operation.net_profit', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 2
            Final Answer: {'3.333e+08', '5.69e+08'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 31 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Houston'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.021s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.021s]
        Checking schema 32 / 163: {
          [('Main', '==', 'm.025j1', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:20:11] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 5
            Final Answer: {'2000', '2002', '1991', '1999', '1998'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 33 / 163: {
          [('Main', '==', 'm.025j1', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 11
            Final Answer: {'Senior Vice President and Chief Technology Officer, Strategy and Technology', 'Vice President, North American Commercial Business', 'Vice President and General Manager', 'Senior Vice President and Chief Financial Officer', 'Director of the Communications Products Group', 'Chief Executive Officer', 'Chief Information Officer', 'Vice President of Corporate Materials', 'Design engineer', 'Chief Operating Officer', 'President'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 34 / 163: {
          [('Main', '==', 'm.025j1', ['venture_capital.venture_funded_company.venture_investors', 'venture_capital.venture_investment.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:venture_capital.venture_funded_company.venture_investors ?o1 . ?o1 fb:venture_capital.venture_investment.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:venture_capital.venture_funded_company.venture_investors ?o1 . ?o1 fb:venture_capital.venture_investment.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 35 / 163: {
          [('Main', '==', 'm.025j1', ['venture_capital.venture_investor.investments', 'venture_capital.venture_investment.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 2
            Final Answer: {'Snapfish', 'Audible Inc.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 36 / 163: {
          [('Main', '==', 'm.025j1', ['venture_capital.venture_investor.investments', 'venture_capital.venture_investment.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.date ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 37 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.board_members', 'organization.organization_board_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 3
            Final Answer: {'1999', '1997', '1995'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 38 / 163: {
          [('Main', '==', 'm.025j1', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 2
            Final Answer: {'20', '158'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 39 / 163: {
          [('Main', '==', 'm.025j1', ['business.business_operation.competitive_space', 'business.competitive_space_mediator.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq Presario'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 40 / 163: {
          [('Main', '==', 'm.025j1', ['business.business_operation.revenue', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 41 / 163: {
          [('Main', '==', 'm.025j1', ['business.business_operation.net_profit', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 42 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.headquarters', 'location.mailing_address.state_province_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Texas'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 43 / 163: {
          [('Main', '==', 'm.025j1', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 2
            Final Answer: {'2002', '1999'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 44 / 163: {
          [('Main', '==', 'm.025j1', ['venture_capital.venture_funded_company.venture_investors', 'venture_capital.venture_investment.investor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:venture_capital.venture_funded_company.venture_investors ?o1 . ?o1 fb:venture_capital.venture_investment.investor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:venture_capital.venture_funded_company.venture_investors ?o1 . ?o1 fb:venture_capital.venture_investment.investor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Kleiner, Perkins, Caufield and Byers'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 45 / 163: {
          [('Main', '==', 'm.025j1', ['venture_capital.venture_investor.investments', 'venture_capital.venture_investment.investor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.investor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.investor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 46 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.board_members', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 47 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.board_members', 'organization.organization_board_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'2002'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 48 / 163: {
          [('Main', '==', 'm.025j1', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 49 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.acquired_by', 'business.acquisition.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:organization.organization.acquired_by ?o1 . ?o1 fb:business.acquisition.date ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:organization.organization.acquired_by ?o1 . ?o1 fb:business.acquisition.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'2002'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 50 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.companies_acquired', 'business.acquisition.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.date ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 3
            Final Answer: {'1998', '1997', '1999'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 51 / 163: {
          [('Main', '==', 'm.025j1', ['business.consumer_company.brands', 'business.company_brand_relationship.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq Presario'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 52 / 163: {
          [('Main', '==', 'm.025j1', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 53 / 163: {
          [('Main', '==', 'm.025j1', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 54 / 163: {
          [('Main', '==', 'm.025j1', ['business.business_operation.competitive_space', 'business.competitive_space_mediator.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 55 / 163: {
          [('Main', '==', 'm.025j1', ['business.business_operation.revenue', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 2
            Final Answer: {'2000', '1990'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 56 / 163: {
          [('Main', '==', 'm.025j1', ['business.business_operation.net_profit', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 2
            Final Answer: {'2000', '1990'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 57 / 163: {
          [('Main', '==', 'm.025j1', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 14
            Final Answer: {'Chris Beukers', 'Timothy D. Cook', 'Eckhard Pfeiffer', 'Shane V. Robison', 'Robert Tarjan', 'Bill Gurley', 'Vic Mahadevan', 'Jesse J. Greene Jr.', 'Robert Fernander', 'Rajiv Mahajan', 'James Hamilton', 'Michael D. Capellas', 'Jerry Kelly', 'Brian Schipper'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 58 / 163: {
          [('Main', '==', 'm.025j1', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 59 / 163: {
          [('Main', '==', 'm.025j1', ['venture_capital.venture_investor.investments', 'venture_capital.venture_investment.investment_round'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.investment_round ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.investment_round ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Series B'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 60 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.board_members', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 5
            Final Answer: {'Judith B. Craven', 'Thomas Perkins', 'Lucille S. Salhany', 'Lawrence T. Babbio, Jr.', 'Michael D. Capellas'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 61 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.board_members', 'organization.organization_board_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 62 / 163: {
          [('Main', '==', 'm.025j1', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Fortune 500'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 63 / 163: {
          [('Main', '==', 'm.025j1', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.025j1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 2
            Final Answer: {'2000', '1990'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 64 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.acquired_by', 'business.acquisition.company_acquired'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.acquired_by ?o1 . ?o1 fb:business.acquisition.company_acquired ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.acquired_by ?o1 . ?o1 fb:business.acquisition.company_acquired ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 65 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.companies_acquired', 'business.acquisition.company_acquired'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.company_acquired ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.company_acquired ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 3
            Final Answer: {'Zip2', 'Digital Equipment Corporation', 'Tandem Computers'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 66 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.acquired_by', 'business.acquisition.acquiring_company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.acquired_by ?o1 . ?o1 fb:business.acquisition.acquiring_company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.acquired_by ?o1 . ?o1 fb:business.acquisition.acquiring_company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 67 / 163: {
          [('Main', '==', 'm.025j1', ['organization.organization.companies_acquired', 'business.acquisition.acquiring_company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.acquiring_company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.acquiring_company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 68 / 163: {
          [('Main', '==', 'm.025j1', ['business.consumer_company.brands', 'business.company_brand_relationship.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Compaq'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 69 / 163: {
          [('Main', '==', 'm.025j1', ['business.business_operation.competitive_space', 'business.competitive_space_mediator.space'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.space ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.space ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Personal computer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 70 / 163: {
          [('Main', '==', 'm.03mnk', ['business.employer.number_of_employees', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.employer.number_of_employees ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.employer.number_of_employees ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'1720', '1560'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 71 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.net_profit', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 6
            Final Answer: {'2.03e+08', '3.491e+09', '6.198e+09', '7.264e+09', '8.329e+09', '8.29e+08'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 72 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.revenue', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 7
            Final Answer: {'1.04286e+11', '9.16e+10', '4.8253e+10', '9.1658e+10', '2.361e+09', '1.1899e+10', '1.18364e+11'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 73 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.operating_income', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'7.264e+09', '8.913e+09'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 74 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.current_assets', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'5.1728e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 75 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.current_liabilities', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'5.2939e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 76 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.assets', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'1.13331e+11'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 77 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.cash', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'1.0153e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 78 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.liabilities', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'7.4389e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 79 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.retained_earnings', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2.4971e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 80 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Palo Alto'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 81 / 163: {
          [('Main', '==', 'm.03mnk', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 35
            Final Answer: {'2007', '2002', '1987', '1981', '2011', '2006', '2001', '1996', '1988', '2000', '1989', '2003', '1995', '1982', '2005', '1980', '1973', '1990', '1978', '1991', '2004', '2010', '2008'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 82 / 163: {
          [('Main', '==', 'm.03mnk', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 61
            Final Answer: {'Executive Vice President, HP Services', 'Vice President of Corporate Communications', 'Executive Vice President, Imaging and Printing Group', 'Vice President of Finance, Enterprise Marketing and Solutions', 'Executive Vice President, Human Resources', 'Executive Vice President, Computer Products Organization', 'Executive Vice President and Chief Administrative Officer', 'Chief Technology Officer', 'Chief Information Officer', 'Senior Vice President and Chief Sales Officer', 'Executive Vice President, Technology Solutions Group', 'Senior Vice President, Treasurer', 'Sales Representative', 'Senior Vice President and Chief Marketing Officer', 'Executive Vice President, Personal Systems Group', 'President, Internet Business', 'Business Operations Strategy & Planning Program Manager', 'Sales Manager, Federal Operations', 'Treasurer', 'Vice President and General Manager', 'Vice President and General Manager, Consulting', 'Corporate Vice President', 'Vice President and General Manager, Worldwide Enterprise Accounts Organization', 'Manager of Asia Pacific Network Marketing Center, Singapore', 'Design engineer', 'Controller, Software Solution Organization', 'Senior Fellow', 'Senior Vice President and General Manager', 'Executive Vice President, General Counsel and Secretary', 'Development engineer', 'Chief Medical Officer', 'Vice President, Server Storage and Infrastructure', 'Acting General Manager, HP Services', 'Vice President', 'Visiting scholar', 'Chief Financial Officer', 'Chief Executive Officer', 'General Manager of the Information Networks Group', 'Executive Vice President', 'Controller', 'Research Associate', 'Secretary', 'R&D Engineer', 'Corporate Accounts Managing Director', 'General Manager, Computer Division', 'Engineer', 'General Manager of Singapore Network Operations', 'Vice President, Federal Operations', 'Executive Vice President and Chief Strategy and Technology Officer', 'Project engineer', 'Vice President and General Manager, Printing Business', 'Vice President of Strategy and Business Planning', 'Senior Project Manager', 'Senior Vice President', 'Director and General Manager,  Enterprise Account Organization', 'President, Imaging and Printing', 'Principal Accounting Officer', 'Member of technical staff', 'President', 'Chief Marketing Officer, Enterprise Computing Business', 'Chief Technologist for Open Source and Linux'}
            Answers = 61, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 61, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 83 / 163: {
          [('Main', '==', 'm.03mnk', ['venture_capital.venture_investor.investments', 'venture_capital.venture_investment.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'Synfora', 'mimeo.com'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 84 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.board_members', 'organization.organization_board_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 13
            Final Answer: {'2006', '2007', '2000', '2002', '1996', '1997', '2009', '2004', '1995', '2011', '1992'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 85 / 163: {
          [('Main', '==', 'm.03mnk', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 8
            Final Answer: {'33', '13', '11', '41', '9', '14', '32', '150'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 86 / 163: {
          [('Main', '==', 'm.03mnk', ['business.sponsor.sponsorship', 'business.sponsorship.sponsored_recipient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_recipient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_recipient ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'GPU Technology Conference 2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 87 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.child', 'organization.organization_relationship.child'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 33
            Final Answer: {'Hewlett Packard Vietnam Ltd', 'Hewlett-Packard Peru S.R.L.', 'Electronic Data Systems', 'Hewlett-Packard Singapore (Sales) Pte. Ltd.', 'Hewlett-Packard (Romania) SRL', 'Hankook Hewlett-Packard', 'Hewlett-Packard (Nigeria) Limited', 'Hewlett-Packard Centre de Competences, France SaS', 'Hewlett Packard France SAS', 'TippingPoint', 'Hewlett-Packard Argentina S.R.L.', 'Hewlett Packard Egypt Ltd', 'Hewlett-Packard Ireland Limited', 'MphasiS ltd', 'Hewlett-Packard Australia Pty. Limited', 'Hewlett Packard Trading (Shanghai) Co Ltd', 'Snapfish', 'Palm, Inc.', 'Opsware', 'MphasiS', 'PolyServe', 'Hewlett Packard Nederland B.V.', 'Neoware', 'Hewlett-Packard Korea Ltd', 'ProCurve', 'Mercury Interactive', 'Hewlett-Packard South Africa Limited', 'Hewlett Packard Taiwan Ltd', 'Peregrine Systems', 'Hewlett-Packard (Thailand) Limited', 'Hewlett Packard Japan Ltd', 'VoodooPC', 'Hewlett-Packard (Canada) Co'}
            Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 88 / 163: {
          [('Main', '==', 'm.03mnk', ['projects.project_participant.projects', 'projects.project_participation.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.from_date ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'2012', '2011'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 89 / 163: {
          [('Main', '==', 'm.03mnk', ['business.consumer_company.products', 'business.company_product_relationship.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.consumer_company.products ?o1 . ?o1 fb:business.company_product_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.consumer_company.products ?o1 . ?o1 fb:business.company_product_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 90 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.competitive_space', 'business.competitive_space_mediator.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 4
            Final Answer: {'HP LaserJet', 'HP Pavilion', 'OfficeJet', 'HP Deskjet'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 91 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.leadership', 'organization.leadership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 3
            Final Answer: {'2010', '2005', '2011'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 92 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.leadership', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Chief Executive Officer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 93 / 163: {
          [('Main', '==', 'm.03mnk', ['education.academic_institution.visiting_scholars_fellows_etc', 'education.academic_post.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 94 / 163: {
          [('Main', '==', 'm.03mnk', ['education.academic_institution.visiting_scholars_fellows_etc', 'education.academic_post.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.to ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 95 / 163: {
          [('Main', '==', 'm.03mnk', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_language'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_language ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_language ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 96 / 163: {
          [('Main', '==', 'm.03mnk', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.hearing_impaired'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.hearing_impaired ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.hearing_impaired ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 97 / 163: {
          [('Main', '==', 'm.03mnk', ['business.employer.number_of_employees', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.employer.number_of_employees ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.employer.number_of_employees ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'2006', '2007'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 98 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.net_profit', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 99 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.revenue', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Current: 100 / 163
        Checking schema 100 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.operating_income', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 101 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.current_assets', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 102 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.current_liabilities', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 103 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.assets', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 104 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.cash', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 105 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.liabilities', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 106 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.retained_earnings', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 107 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.headquarters', 'location.mailing_address.street_address'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 108 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.headquarters', 'location.mailing_address.state_province_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'California'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 109 / 163: {
          [('Main', '==', 'm.03mnk', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 17
            Final Answer: {'2006', '2007', '1990', '2002', '1996', '1999', '1993', '2003', '1995', '2008', '1989', '2005', '2011'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 110 / 163: {
          [('Main', '==', 'm.03mnk', ['venture_capital.venture_investor.investments', 'venture_capital.venture_investment.investor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.investor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:venture_capital.venture_investor.investments ?o1 . ?o1 fb:venture_capital.venture_investment.investor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 111 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.board_members', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 112 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.board_members', 'organization.organization_board_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 4
            Final Answer: {'2002', '2006', '2000', '1999'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 113 / 163: {
          [('Main', '==', 'm.03mnk', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 114 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.companies_acquired', 'business.acquisition.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.date ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 5
            Final Answer: {'2002', '2007', '2005', '2011'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 115 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.involved_in_merger', 'organization.organization_merger.organizations_merging'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.involved_in_merger ?o1 . ?o1 fb:organization.organization_merger.organizations_merging ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.involved_in_merger ?o1 . ?o1 fb:organization.organization_merger.organizations_merging ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'Electronic Data Systems'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 116 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.involved_in_merger', 'organization.organization_merger.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.involved_in_merger ?o1 . ?o1 fb:organization.organization_merger.date ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.involved_in_merger ?o1 . ?o1 fb:organization.organization_merger.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 117 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.child', 'organization.organization_relationship.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.from ?o2 . }
          [2020-12-03 14:20:12] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2005'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 118 / 163: {
          [('Main', '==', 'm.03mnk', ['projects.project_participant.projects', 'projects.project_participation.project'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.project ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.project ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Design and Creation of the Stanford Hospital Corporate Partners Program'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 119 / 163: {
          [('Main', '==', 'm.03mnk', ['projects.project_participant.projects', 'projects.project_participation.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 120 / 163: {
          [('Main', '==', 'm.03mnk', ['business.consumer_company.brands', 'business.company_brand_relationship.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'LightScribe', 'HP Pavilion'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 121 / 163: {
          [('Main', '==', 'm.03mnk', ['business.consumer_company.products', 'business.company_product_relationship.consumer_product'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.consumer_company.products ?o1 . ?o1 fb:business.company_product_relationship.consumer_product ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.consumer_company.products ?o1 . ?o1 fb:business.company_product_relationship.consumer_product ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 4
            Final Answer: {'HP Photosmart M537', 'HP LaserJet 1020', 'HP Wireless Comfort Desktop Keyboard and Mouse FQ634AA#UUF', 'HP DV7-1245dx'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 122 / 163: {
          [('Main', '==', 'm.03mnk', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 123 / 163: {
          [('Main', '==', 'm.03mnk', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 124 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.competitive_space', 'business.competitive_space_mediator.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 125 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.leadership', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 126 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.leadership', 'organization.leadership.as_of_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.as_of_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.as_of_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 127 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.leadership', 'organization.leadership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.to ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'2010', '2011'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 128 / 163: {
          [('Main', '==', 'm.03mnk', ['education.academic_institution.visiting_scholars_fellows_etc', 'education.academic_post.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.from ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2006'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 129 / 163: {
          [('Main', '==', 'm.03mnk', ['education.academic_institution.visiting_scholars_fellows_etc', 'education.academic_post.position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Visiting scholar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 130 / 163: {
          [('Main', '==', 'm.03mnk', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 131 / 163: {
          [('Main', '==', 'm.03mnk', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.toll_free'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.toll_free ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.toll_free ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 132 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.net_profit', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 6
            Final Answer: {'1980', '2007', '2000', '1990', '2008'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 133 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.revenue', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 7
            Final Answer: {'1980', '2006', '2007', '2000', '1990', '2008'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 134 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.operating_income', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'2008', '2006'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 135 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.current_assets', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 136 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.current_liabilities', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 137 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.assets', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 138 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.cash', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 139 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.liabilities', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 140 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.retained_earnings', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 141 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.headquarters', 'location.mailing_address.postal_code'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'94304'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 142 / 163: {
          [('Main', '==', 'm.03mnk', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 91
            Final Answer: {'Pamela A. Wickham', 'Dan Warmenhoven', 'Don Grantham', 'Rick Hutchinson', 'Shyam Pillalamarri', 'James T Murrin', 'Todd Bradley', 'Vlad Gorelik', 'Randall D. Mott', 'Michael Mendenhall', 'Brian Humphries', 'Shane V. Robison', 'Richard A. Hackborn', 'Steve Gomo', 'Jim Gallagher', 'David M. Bloom', 'Christian Hirsch', 'William Kent', 'Sandeep Johri', 'Jim Sherriff', 'Andy Mattes', 'Jon E. Flaxman', 'John Robert Lucas', 'Dick Lampman', 'Peter Sonsini', 'Richard J. Justice', 'Bruce Klein', 'Meg Whitman', 'Douglas Leone', 'Brian Chess', 'Thomas Perkins', 'Stacy Donohue', 'Léo Apotheker', 'Mark Jon Bluth', 'Hau L. Lee', 'Steve Jobs', 'Ann M. Livermore', 'Yasuki Kurosawa', 'Robert Tarjan', 'Michael Richard Lynch', 'Kevin Fong', 'Darryl Weatherspoon', 'Catherine A. Lesjak', 'Bruce Perens', 'Imran Khan', 'Eric Copeland', 'Michael D. Capellas', 'Donn Dobkin', 'John N Mcmullen', 'Bill Kaiser', 'Linda M. Dillman', 'Tunay I. Tunca', 'Rolf Dekleer', 'Mike Holston', 'Jay Kidd', 'Keith Goodwin', 'Jagdeep Singh', 'Greg Papadopoulos', 'Rahul Sood', 'Kent Alan Wilkinson Carey', 'Brad R. Anderson', 'John Walecka', 'Jeffry R. Allen', 'Betsey Nelson', 'Humphrey Williams', 'Jim Lally', 'Georgi Kobilarov', 'Jim Breyer', 'G. Kennedy Thompson', 'Jim Taylor', 'Brian Sager', 'Stephen L. Smith', 'Bdale Garbee', 'Justin Rattner', 'Catherine T Lyons', 'Steve Jurvetson', 'Ben Horowitz', 'Allwyn Sequeira', 'Omid Kordestani', 'Ram Appalaraju', 'Hans-Wolfgang Neumann', 'Bill Gurley', 'Michael Armistead', 'Doug Dennerline', 'Alan Kay', 'Nick Earle', 'Marcela Perez de Alonso', 'Vyomesh Joshi', 'John Steward Wenstrand', 'Michael J. Holston', 'T. M. Ravi'}
            Answers = 91, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 91, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 143 / 163: {
          [('Main', '==', 'm.03mnk', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 144 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.board_members', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 21
            Final Answer: {'Jon E. Flaxman', 'John H. Hammergren', 'Lawrence T. Babbio, Jr.', 'Meg Whitman', 'G. Kennedy Thompson', 'John R. Joyce', 'Marc Andreessen', 'Thomas Perkins', 'Michael D. Capellas', 'David M. Lawrence', 'Condoleezza Rice', 'Robert Wayman', 'Richard A. Hackborn', 'Lucille S. Salhany', 'Mark V. Hurd', 'Joel Z. Hyatt', 'Yasuki Kurosawa', 'Marcela Perez de Alonso', 'Sam Ginn', 'Sari M. Baldauf', 'Robert L. Ryan'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 145 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.board_members', 'organization.organization_board_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 146 / 163: {
          [('Main', '==', 'm.03mnk', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 3
            Final Answer: {'Fortune 500', 'Fortune 1000', 'Fortune Global 500'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 147 / 163: {
          [('Main', '==', 'm.03mnk', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 7
            Final Answer: {'1980', '2006', '2007', '2000', '1990', '2009', '2008'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 148 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.companies_acquired', 'business.acquisition.company_acquired'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.company_acquired ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.company_acquired ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 9
            Final Answer: {'Snapfish', 'Tabblo', 'Palm', 'Logoworks', 'Compaq', 'Vertica', 'TalkingBlocks', 'VoodooPC', 'Convex Computer'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 149 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.companies_acquired', 'business.acquisition.acquiring_company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.acquiring_company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.acquiring_company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 150 / 163: {
          [('Main', '==', 'm.03mnk', ['business.sponsor.sponsorship', 'business.sponsorship.sponsored_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 151 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.child', 'organization.organization_relationship.parent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 152 / 163: {
          [('Main', '==', 'm.03mnk', ['projects.project_participant.projects', 'projects.project_participation.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Sponsor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 153 / 163: {
          [('Main', '==', 'm.03mnk', ['business.consumer_company.brands', 'business.company_brand_relationship.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Hewlett-Packard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 154 / 163: {
          [('Main', '==', 'm.03mnk', ['business.consumer_company.products', 'business.company_product_relationship.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.consumer_company.products ?o1 . ?o1 fb:business.company_product_relationship.from_date ?o2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 WHERE { fb:m.03mnk fb:business.consumer_company.products ?o1 . ?o1 fb:business.company_product_relationship.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'2008', '2005'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 155 / 163: {
          [('Main', '==', 'm.03mnk', ['business.business_operation.competitive_space', 'business.competitive_space_mediator.space'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.space ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.space ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 3
            Final Answer: {'IT Outsourcing', 'Personal computer', 'Desktop Printers'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 156 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.leadership', 'organization.leadership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 157 / 163: {
          [('Main', '==', 'm.03mnk', ['organization.organization.leadership', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 9
            Final Answer: {'Meg Whitman', 'Ann M. Livermore', 'Todd Bradley', 'Shane V. Robison', 'Randall D. Mott', 'Mark V. Hurd', 'Michael J. Holston', 'Léo Apotheker', 'James T Murrin'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 158 / 163: {
          [('Main', '==', 'm.03mnk', ['education.academic_institution.visiting_scholars_fellows_etc', 'education.academic_post.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'Tunay I. Tunca'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 159 / 163: {
          [('Main', '==', 'm.03mnk', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.caller_category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.caller_category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.caller_category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'Business Service', 'Consumer Service'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 160 / 163: {
          [('Main', '==', 'm.03mnk', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.contact_category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.contact_category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.contact_category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 2
            Final Answer: {'Customer service', 'Sales'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 161 / 163: {
          [('Main', '==', 'm.03mnk', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 162 / 163: {
          [('Main', '==', 'm.03mnk', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.product_or_service'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.product_or_service ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.product_or_service ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 3
            Final Answer: {'Compaq', 'HP', 'HP Enterprise Software'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        155 / 163 coarse schemas kept with ans_size > 0.
      } [2.167s]
      Coarse level ended, resulting in 155 schemas.
    } [2.236s]
    Type level searching (total types = 10): {
      Current: 0 / 155
[{'business.company_termination_type'}]
[{'base.gadgets.gadget'}]
[{'type.datetime'}]
[{'organization.organization_founder'}]
[{'business.industry'}]
[{'type.datetime'}]
[{'computer.software'}]
[{'computer.operating_system'}]
[{'computer.computer'}]
[{'business.company_type'}]
[{'business.issue'}]
[{'base.gadgets.gadget'}]
[{'location.location'}]
[{'organization.organization'}]
[{'type.datetime'}]
[{'organization.organization_founder'}]
[{'organization.organization_scope'}]
[{'book.written_work'}]
[{'business.industry'}]
[{'computer.computer_processor'}]
[{'computer.software'}]
[{'conferences.conference_series'}]
[{'computer.computer'}]
[{'computer.operating_system'}]
[{'business.business_operation'}]
[{'computer.computer'}]
[{'user.robert.mobile_phones.product'}]
[{'digicams.digital_camera'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'location.mailing_address'}, {'location.location'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'venture_capital.venture_investment'}, {'venture_capital.venture_funded_company'}]
[{'venture_capital.venture_investment'}, {'venture_capital.venture_funded_company'}]
[{'venture_capital.venture_investment'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'award.ranking'}, {'type.int'}]
[{'business.competitive_space_mediator'}, {'business.brand'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'location.mailing_address'}, {'location.administrative_division'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'venture_capital.venture_investment'}, {'venture_capital.venture_investor'}]
[{'venture_capital.venture_investment'}, {'venture_capital.venture_investor'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'business.acquisition'}, {'type.datetime'}]
[{'business.acquisition'}, {'type.datetime'}]
[{'business.company_brand_relationship'}, {'business.brand'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'business.competitive_space_mediator'}, {'business.business_operation'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'venture_capital.venture_investment'}, {'venture_capital.investment_round'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'business.company_brand_relationship'}, {'business.consumer_company'}]
[{'business.competitive_space_mediator'}, {'business.competitive_space'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'location.mailing_address'}, {'location.location'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'venture_capital.venture_investment'}, {'venture_capital.venture_funded_company'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'award.ranking'}, {'type.int'}]
[{'business.sponsorship'}, {'business.sponsored_recipient'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'projects.project_participation'}, {'type.datetime'}]
[{'business.company_product_relationship'}, {'business.consumer_company'}]
[{'business.competitive_space_mediator'}, {'business.brand'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.leadership'}, {'organization.role'}]
[{'education.academic_post'}, {'education.academic_institution'}]
[{'education.academic_post'}, {'type.datetime'}]
[{'base.schemastaging.phone_sandbox'}, {'language.human_language'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
      Current: 100 / 155
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'location.mailing_address'}, {'location.administrative_division'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'venture_capital.venture_investment'}, {'venture_capital.venture_investor'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'business.acquisition'}, {'type.datetime'}]
[{'organization.organization_merger'}, {'organization.organization'}]
[{'organization.organization_merger'}, {'type.datetime'}]
[{'organization.organization_relationship'}, {'type.datetime'}]
[{'projects.project_participation'}, {'projects.project'}]
[{'projects.project_participation'}, {'projects.project_participant'}]
[{'business.company_brand_relationship'}, {'business.brand'}]
[{'business.company_product_relationship'}, {'business.consumer_product'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'business.competitive_space_mediator'}, {'business.business_operation'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'education.academic_post'}, {'type.datetime'}]
[{'education.academic_post'}, {'education.academic_post_title'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'location.mailing_address'}, {'location.postal_code'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'business.sponsorship'}, {'business.sponsor'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'projects.project_participation'}, {'projects.project_role'}]
[{'business.company_brand_relationship'}, {'business.consumer_company'}]
[{'business.company_product_relationship'}, {'type.datetime'}]
[{'business.competitive_space_mediator'}, {'business.competitive_space'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'education.academic_post'}, {'education.academic'}]
[{'base.schemastaging.phone_sandbox'}, {'base.schemastaging.contactor_category'}]
[{'base.schemastaging.phone_sandbox'}, {'organization.contact_category'}]
[{'base.schemastaging.phone_sandbox'}, {'location.location'}]
[{'base.schemastaging.phone_sandbox'}, {'base.schemastaging.contact_product'}]
      10 typed schemas retrieved from 155 coarse schemas.
      Calculating F1 for 10 typed schemas: {
        Current: 0 / 10
        Checking schema 0 / 10: {
          [('Main', '==', 'm.03mnk', ['organization.organization.place_founded']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.place_founded ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.place_founded ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 10: {
          [('Main', '==', 'm.03mnk', ['organization.organization.place_founded']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.place_founded ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03mnk fb:organization.organization.place_founded ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 2 / 10: {
          [('Main', '==', 'm.025j1', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 1
            Final Answer: {'Houston'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.017s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.018s]
        Checking schema 3 / 10: {
          [('Main', '==', 'm.025j1', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 4 / 10: {
          [('Main', '==', 'm.025j1', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025j1 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025j1'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 5 / 10: {
          [('Main', '==', 'm.03mnk', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 6 / 10: {
          [('Main', '==', 'm.03mnk', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 7 / 10: {
          [('Main', '==', 'm.03mnk', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 3
            Final Answer: {'Steve Jobs', 'Thomas Perkins', 'Alan Kay'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 8 / 10: {
          [('Main', '==', 'm.03mnk', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_location']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'base.schemastaging.phone_sandbox'}, {'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 9 / 10: {
          [('Main', '==', 'm.03mnk', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_location']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'base.schemastaging.phone_sandbox'}, {'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:13] Q_Schema Request: {
            WebQ_2295|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03mnk fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03mnk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        2 / 10 typed schemas kept with ans_size > 0.
      } [0.141s]
      Typed level ended, resulting in 157 schemas.
    } [0.150s]
    Time level searching (total times = 0): {
      Current: 0 / 157
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'computer.software.first_released', 'computer.software.latest_release_date'}]
self.var_time_preds: [{'computer.operating_system.release_date'}]
self.var_time_preds: [{'computer.computer.introduced', 'computer.computer.discontinued'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'business.issue.cancellation_date', 'business.issue.first_issued'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'computer.computer_processor.introduced'}]
self.var_time_preds: [{'computer.software.first_released', 'computer.software.latest_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'computer.computer.introduced', 'computer.computer.discontinued'}]
self.var_time_preds: [{'computer.operating_system.release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'computer.computer.introduced', 'computer.computer.discontinued'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'digicams.digital_camera.announced', 'digicams.digital_camera.released'}]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'venture_capital.venture_investment.date'}, set()]
self.var_time_preds: [{'venture_capital.venture_investment.date'}, set()]
self.var_time_preds: [{'venture_capital.venture_investment.date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'venture_capital.venture_investment.date'}, set()]
self.var_time_preds: [{'venture_capital.venture_investment.date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'business.acquisition.date'}, set()]
self.var_time_preds: [{'business.acquisition.date'}, set()]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'venture_capital.venture_investment.date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'venture_capital.venture_investment.date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
self.var_time_preds: [{'business.company_product_relationship.from_date', 'business.company_product_relationship.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'education.academic_post.from', 'education.academic_post.to'}, set()]
self.var_time_preds: [{'education.academic_post.from', 'education.academic_post.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
      Current: 100 / 157
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'venture_capital.venture_investment.date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'business.acquisition.date'}, set()]
self.var_time_preds: [{'organization.organization_merger.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_merger.date'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, set()]
self.var_time_preds: [{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, {'projects.project.actual_completion_date', 'projects.project.planned_completion_date', 'projects.project.start_date'}]
self.var_time_preds: [{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [{'business.company_product_relationship.from_date', 'business.company_product_relationship.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'education.academic_post.from', 'education.academic_post.to'}, set()]
self.var_time_preds: [{'education.academic_post.from', 'education.academic_post.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [{'business.company_product_relationship.from_date', 'business.company_product_relationship.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'education.academic_post.from', 'education.academic_post.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
      0 timed schemas retrieved from 157 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 157 schemas.
    } [0.003s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 157
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'computer.software.first_released', 'computer.software.latest_release_date'}]
[{'computer.operating_system.release_date'}]
[{'computer.computer.introduced', 'computer.computer.discontinued'}]
[set()]
[{'business.issue.cancellation_date', 'business.issue.first_issued'}]
[set()]
[set()]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[set()]
[{'computer.computer_processor.introduced'}]
[{'computer.software.first_released', 'computer.software.latest_release_date'}]
[set()]
[{'computer.computer.introduced', 'computer.computer.discontinued'}]
[{'computer.operating_system.release_date'}]
[set()]
[{'computer.computer.introduced', 'computer.computer.discontinued'}]
[set()]
[{'digicams.digital_camera.announced', 'digicams.digital_camera.released'}]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'venture_capital.venture_investment.date'}, set()]
[{'venture_capital.venture_investment.date'}, set()]
[{'venture_capital.venture_investment.date'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[{'award.ranking.year'}, set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'venture_capital.venture_investment.date'}, set()]
[{'venture_capital.venture_investment.date'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, {'organization.organization.date_founded'}]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[{'award.ranking.year'}, set()]
[{'business.acquisition.date'}, set()]
[{'business.acquisition.date'}, set()]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'venture_capital.venture_investment.date'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'venture_capital.venture_investment.date'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[{'award.ranking.year'}, set()]
[{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
[{'business.company_product_relationship.from_date', 'business.company_product_relationship.to_date'}, set()]
[set(), set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'education.academic_post.from', 'education.academic_post.to'}, set()]
[{'education.academic_post.from', 'education.academic_post.to'}, set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
      Current: 100 / 157
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'venture_capital.venture_investment.date'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, {'organization.organization.date_founded'}]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[{'award.ranking.year'}, set()]
[{'business.acquisition.date'}, set()]
[{'organization.organization_merger.date'}, {'organization.organization.date_founded'}]
[{'organization.organization_merger.date'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, set()]
[{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, {'projects.project.actual_completion_date', 'projects.project.planned_completion_date', 'projects.project.start_date'}]
[{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[{'business.company_product_relationship.from_date', 'business.company_product_relationship.to_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'education.academic_post.from', 'education.academic_post.to'}, set()]
[{'education.academic_post.from', 'education.academic_post.to'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[{'business.company_product_relationship.from_date', 'business.company_product_relationship.to_date'}, set()]
[set(), set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'education.academic_post.from', 'education.academic_post.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
      0 ordinal schemas retrieved from 157 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 157 schemas.
    } [0.003s]
    [2020-12-03 14:20:13] buffer saved.
    157 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2200-2299/2295_schema].
  } [17.922s]
  Entering Q 2296 / 5810 [b'what is the name of the bengals quarterback?']: {
    Show 5 E + 10 T + 0 Tm + 0 Ord = 15 linkings: {
      #00 Entity: [3, 4) (name) == m.015vq3 (name) {'score': 15236.893959, 'source': 2.0}
      #01 Entity: [5, 7) (the bengals) == m.01y49 (cincinnati bengals) {'score': 5336.215645, 'source': 2.0}
      #02 Entity: [6, 7) (bengals) == m.01y49 (Cincinnati_Bengals) {'score': 615.768819, 'source': 0.0}
      #03 Entity: [6, 7) (bengals) == m.086g2 (West_Bengal) {'score': 1.318172, 'source': 1.0}
      #04 Entity: [7, 8) (quarterback) == m.06b1q (quarterback) {'score': 27003.857361, 'source': 2.0}
      #05 Type: [4, 6) (of the) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.836032}
      #06 Type: [4, 6) (of the) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.825366}
      #07 Type: [4, 5) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #08 Type: [3, 4) (name) == people.family_name (family name) {'sim': 0.804562}
      #09 Type: [1, 4) (is the name) == business.company_name_change (organization name change) {'sim': 0.802313}
      #10 Type: [3, 4) (name) == symbols.name_source (name source) {'sim': 0.799576}
      #11 Type: [4, 6) (of the) == measurement_unit.time_unit (unit of time) {'sim': 0.776986}
      #12 Type: [4, 6) (of the) == symbols.heraldic_variation_of_the_field (heraldic variation of the field) {'sim': 0.768408}
      #13 Type: [4, 6) (of the) == book.place_of_publication_period (place of publication period) {'sim': 0.767254}
      #14 Type: [4, 6) (of the) == government.form_of_government (form of government) {'sim': 0.766525}
    } [0.000s]
    15 link data save to file.
    Coarse level searching (total entities = 5): {
      [Len-1||F1/5] (2020-12-03 14:20:29) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.015vq3 ?p1 ?o1 . }
        [2020-12-03 14:20:29] SPARQL hit!
        Filt_Query_Ret = 0 / 6 ( 0.000s)
      } [0.000s]
      [Len-1||F2/5] (2020-12-03 14:20:29) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01y49 ?p1 ?o1 . }
        [2020-12-03 14:20:29] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01y49 ?p1 ?o1 . }
          Query return lines = 31
        } [0.005s]
        Filt_Query_Ret = 17 / 31 ( 0.005s)
        [Len-1||F2/5||1/5-1] (2020-12-03 14:20:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
          [2020-12-03 14:20:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
        [Len-1||F2/5||4/5-1] (2020-12-03 14:20:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 fb:m.06b1q . }
          [2020-12-03 14:20:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 fb:m.06b1q . }
            Query return lines = 10
          } [0.100s]
          Filt_Query_Ret = 7 / 10 ( 0.100s)
        } [0.101s]
      } [0.110s]
      [Len-1||F3/5] (2020-12-03 14:20:29) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01y49 ?p1 ?o1 . }
        [2020-12-03 14:20:29] SPARQL hit!
        Filt_Query_Ret = 17 / 31 ( 0.000s)
        [Len-1||F3/5||1/5-1] (2020-12-03 14:20:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
          [2020-12-03 14:20:29] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F3/5||4/5-1] (2020-12-03 14:20:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 fb:m.06b1q . }
          [2020-12-03 14:20:29] SPARQL hit!
          Filt_Query_Ret = 7 / 10 ( 0.000s)
        } [0.000s]
      } [0.001s]
      [Len-1||F4/5] (2020-12-03 14:20:29) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06b1q ?p1 ?o1 . }
        [2020-12-03 14:20:29] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.06b1q ?p1 ?o1 . }
          Query return lines = 20
        } [0.023s]
        Filt_Query_Ret = 8 / 20 ( 0.023s)
        [Len-1||F4/5||1/5-1] (2020-12-03 14:20:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
          [2020-12-03 14:20:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
            Query return lines = 0
          } [0.023s]
          Filt_Query_Ret = 0 / 0 ( 0.023s)
        } [0.023s]
        [Len-1||F4/5||2/5-1] (2020-12-03 14:20:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 fb:m.01y49 . }
          [2020-12-03 14:20:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 fb:m.01y49 . }
            Query return lines = 8
          } [0.031s]
          Filt_Query_Ret = 4 / 8 ( 0.031s)
        } [0.031s]
        [Len-1||F4/5||3/5-1] (2020-12-03 14:20:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 fb:m.01y49 . }
          [2020-12-03 14:20:29] SPARQL hit!
          Filt_Query_Ret = 4 / 8 ( 0.000s)
        } [0.000s]
        [Len-1||F4/5||5/5-1] (2020-12-03 14:20:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 fb:m.086g2 . }
          [2020-12-03 14:20:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 fb:m.086g2 . }
            Query return lines = 0
          } [0.044s]
          Filt_Query_Ret = 0 / 0 ( 0.044s)
        } [0.044s]
      } [0.122s]
      [Len-1||F5/5] (2020-12-03 14:20:29) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.086g2 ?p1 ?o1 . }
        [2020-12-03 14:20:29] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.086g2 ?p1 ?o1 . }
          Query return lines = 28
        } [0.011s]
        Filt_Query_Ret = 17 / 28 ( 0.011s)
        [Len-1||F5/5||1/5-1] (2020-12-03 14:20:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
          [2020-12-03 14:20:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-1||F5/5||4/5-1] (2020-12-03 14:20:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 fb:m.06b1q . }
          [2020-12-03 14:20:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 fb:m.06b1q . }
            Query return lines = 0
          } [0.081s]
          Filt_Query_Ret = 0 / 0 ( 0.081s)
        } [0.081s]
      } [0.104s]
      [Len-2||F1/5] (2020-12-03 14:20:30) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.015vq3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:30] SPARQL hit!
        Filt_Query_Ret = 0 / 29 ( 0.000s)
      } [0.000s]
      [Len-2||F2/5] (2020-12-03 14:20:30) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:30] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 370
        } [0.126s]
        Filt_Query_Ret = 30 / 370 ( 0.128s)
        [Len-2||F2/5||1/5-1] (2020-12-03 14:20:30) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:20:30] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.024s]
          Filt_Query_Ret = 0 / 0 ( 0.024s)
        } [0.024s]
        [Len-2||F2/5||1/5-2] (2020-12-03 14:20:30) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:20:30] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.064s]
          Filt_Query_Ret = 0 / 0 ( 0.064s)
        } [0.064s]
        [Len-2||F2/5||4/5-1] (2020-12-03 14:20:30) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06b1q . }
          [2020-12-03 14:20:30] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06b1q . }
            Query return lines = 157
          } [0.102s]
          Filt_Query_Ret = 17 / 157 ( 0.103s)
        } [0.103s]
        [Len-2||F2/5||4/5-2] (2020-12-03 14:20:30) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06b1q . }
          [2020-12-03 14:20:30] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06b1q . }
            Query return lines = 21
          } [1.465s]
          Filt_Query_Ret = 4 / 21 ( 1.465s)
        } [1.465s]
      } [1.786s]
      [Len-2||F3/5] (2020-12-03 14:20:31) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:31] SPARQL hit!
        Filt_Query_Ret = 30 / 370 ( 0.002s)
        [Len-2||F3/5||1/5-1] (2020-12-03 14:20:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:20:31] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F3/5||1/5-2] (2020-12-03 14:20:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:20:31] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F3/5||4/5-1] (2020-12-03 14:20:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06b1q . }
          [2020-12-03 14:20:31] SPARQL hit!
          Filt_Query_Ret = 17 / 157 ( 0.001s)
        } [0.001s]
        [Len-2||F3/5||4/5-2] (2020-12-03 14:20:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01y49 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06b1q . }
          [2020-12-03 14:20:31] SPARQL hit!
          Filt_Query_Ret = 4 / 21 ( 0.000s)
        } [0.000s]
      } [0.003s]
      [Len-2||F4/5] (2020-12-03 14:20:31) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:31] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 419
        } [0.273s]
        Filt_Query_Ret = 15 / 419 ( 0.275s)
        [Len-2||F4/5||1/5-1] (2020-12-03 14:20:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:20:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-2||F4/5||1/5-2] (2020-12-03 14:20:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:20:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.069s]
          Filt_Query_Ret = 0 / 0 ( 0.069s)
        } [0.069s]
        [Len-2||F4/5||2/5-1] (2020-12-03 14:20:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01y49 . }
          [2020-12-03 14:20:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01y49 . }
            Query return lines = 181
          } [0.030s]
          Filt_Query_Ret = 19 / 181 ( 0.031s)
        } [0.031s]
        [Len-2||F4/5||2/5-2] (2020-12-03 14:20:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01y49 . }
          [2020-12-03 14:20:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01y49 . }
            Query return lines = 37
          } [0.557s]
          Filt_Query_Ret = 3 / 37 ( 0.557s)
        } [0.557s]
        [Len-2||F4/5||3/5-1] (2020-12-03 14:20:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01y49 . }
          [2020-12-03 14:20:32] SPARQL hit!
          Filt_Query_Ret = 19 / 181 ( 0.001s)
        } [0.001s]
        [Len-2||F4/5||3/5-2] (2020-12-03 14:20:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01y49 . }
          [2020-12-03 14:20:32] SPARQL hit!
          Filt_Query_Ret = 3 / 37 ( 0.000s)
        } [0.000s]
        [Len-2||F4/5||5/5-1] (2020-12-03 14:20:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.086g2 . }
          [2020-12-03 14:20:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.086g2 . }
            Query return lines = 0
          } [0.046s]
          Filt_Query_Ret = 0 / 0 ( 0.046s)
        } [0.046s]
        [Len-2||F4/5||5/5-2] (2020-12-03 14:20:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.086g2 . }
          [2020-12-03 14:20:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06b1q ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.086g2 . }
            Query return lines = 0
          } [1.001s]
          Filt_Query_Ret = 0 / 0 ( 1.001s)
        } [1.001s]
      } [1.996s]
      [Len-2||F5/5] (2020-12-03 14:20:33) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:33] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 846
        } [0.261s]
        Filt_Query_Ret = 10 / 846 ( 0.264s)
        [Len-2||F5/5||1/5-1] (2020-12-03 14:20:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:20:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F5/5||1/5-2] (2020-12-03 14:20:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:20:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.105s]
          Filt_Query_Ret = 0 / 0 ( 0.105s)
        } [0.105s]
        [Len-2||F5/5||4/5-1] (2020-12-03 14:20:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06b1q . }
          [2020-12-03 14:20:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06b1q . }
            Query return lines = 0
          } [0.089s]
          Filt_Query_Ret = 0 / 0 ( 0.089s)
        } [0.089s]
        [Len-2||F5/5||4/5-2] (2020-12-03 14:20:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06b1q . }
          [2020-12-03 14:20:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.086g2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06b1q . }
            Query return lines = 0
          } [1.535s]
          Filt_Query_Ret = 0 / 0 ( 1.535s)
        } [1.535s]
      } [2.002s]
      252 coarse schemas retrieved from scratch.
      Calculating F1 for 252 coarse schemas: {
        Current: 0 / 252
        Checking schema 0 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01y49 fb:sports.sports_team.founded ?o1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 WHERE { fb:m.01y49 fb:sports.sports_team.founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'1968'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 1 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.team_mascot'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.team_mascot ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.team_mascot ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Who Dey'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 2 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.historical_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.historical_roster ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 3 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.division'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.division ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.division ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'AFC North'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 4 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.conference'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.conference ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.conference ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'American Football Conference'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 5 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Cincinnati'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 6 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.colors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.colors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.colors ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 3
            Final Answer: {'Black', 'Orange', 'White'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 7 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.abbreviation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.abbreviation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.abbreviation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 8 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.nfl_team ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.nfl_team ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 9 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.current_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 10 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.home_games'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.home_games ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.home_games ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 17
            Final Answer: {'Washington Redskins at Cincinnati Bengals, 2008-12-14', 'Jacksonville Jaguars at Cincinnati Bengals, 2008-11-02', 'Denver Broncos at Cincinnati Bengals, 2009-09-13', 'Detroit Lions at Cincinnati Bengals, 2009-12-06', 'Pittsburgh Steelers at Cincinnati Bengals, 2009-09-27', 'Chicago Bears at Cincinnati Bengals, 2009-10-25', 'Philadelphia Eagles at Cincinnati Bengals, 2008-11-16', 'Baltimore Ravens at Cincinnati Bengals, 2009-11-08', 'Cleveland Browns at Cincinnati Bengals, 2009-11-29', 'Houston Texans at Cincinnati Bengals, 2009-10-18', 'Kansas City Chiefs at Cincinnati Bengals, 2008-12-28', 'Kansas City Chiefs at Cincinnati Bengals, 2009-12-27', 'New York Jets at Cincinnati Bengals, 2010-01-09', 'Baltimore Ravens at Cincinnati Bengals, 2008-11-30', 'Pittsburgh Steelers at Cincinnati Bengals, 2008-10-19', 'Cleveland Browns at Cincinnati Bengals, 2008-09-28', 'Tennessee Titans at Cincinnati Bengals, 2008-09-14'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 11 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.away_games'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.away_games ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.away_games ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 16
            Final Answer: {'Cincinnati Bengals at Dallas Cowboys, 2008-10-05', 'Cincinnati Bengals at San Diego Chargers, 2009-12-20', 'Cincinnati Bengals at New York Jets, 2008-10-12', 'Cincinnati Bengals at Green Bay Packers, 2009-09-20', 'Cincinnati Bengals at Minnesota Vikings, 2009-12-13', 'Cincinnati Bengals at Cleveland Browns, 2008-12-21', 'Cincinnati Bengals at New York Giants, 2008-09-21', 'Cincinnati Bengals at Cleveland Browns, 2009-10-04', 'Cincinnati Bengals at Oakland Raiders, 2009-11-22', 'Cincinnati Bengals at New York Jets, 2010-01-03', 'Cincinnati Bengals at Indianapolis Colts, 2008-12-07', 'Cincinnati Bengals at Pittsburgh Steelers, 2009-11-15', 'Cincinnati Bengals at Houston Texans, 2008-10-26', 'Cincinnati Bengals at Baltimore Ravens, 2009-10-11', 'Cincinnati Bengals at Baltimore Ravens, 2008-09-07', 'Cincinnati Bengals at Pittsburgh Steelers, 2008-11-20'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 12 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:35] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'American football'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 13 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.arena_stadium'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Paul Brown Stadium'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 14 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.owner_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.professional_sports_team.owner_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.professional_sports_team.owner_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Mike Brown'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 15 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.position'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.position ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.position ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Defensive Unit'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.current_head_coach'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_head_coach ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_head_coach ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Marvin Lewis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 17 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_roster']), ('Entity', '==', 'm.06b1q', ['sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.historical_roster ?o1 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.historical_roster ?o1 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 18 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_roster']), ('Entity', '==', 'm.06b1q', ['american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.historical_roster ?o1 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.historical_roster ?o1 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 19 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.sport']), ('Entity', '==', 'm.06b1q', ['sports.sport.positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.sport ?o1 . ?o1 fb:sports.sport.positions fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.sport ?o1 . ?o1 fb:sports.sport.positions fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'American football'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 20 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.owner_s']), ('Entity', '==', 'm.06b1q', ['american_football.football_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.professional_sports_team.owner_s ?o1 . ?o1 fb:american_football.football_player.position_s fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.professional_sports_team.owner_s ?o1 . ?o1 fb:american_football.football_player.position_s fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Mike Brown'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 21 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.current_head_coach']), ('Entity', '==', 'm.06b1q', ['american_football.football_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_head_coach ?o1 . ?o1 fb:american_football.football_player.position_s fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_head_coach ?o1 . ?o1 fb:american_football.football_player.position_s fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Marvin Lewis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 22 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.current_roster']), ('Entity', '==', 'm.06b1q', ['sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_roster ?o1 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_roster ?o1 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 23 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.current_roster']), ('Entity', '==', 'm.06b1q', ['american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_roster ?o1 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_roster ?o1 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 24 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01y49 fb:sports.sports_team.founded ?o1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 25 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.team_mascot'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.team_mascot ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 26 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.historical_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 27 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.division'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.division ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 28 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.conference'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.conference ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 29 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 30 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.colors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.colors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 31 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.abbreviation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.abbreviation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 32 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.nfl_team ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 33 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.current_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 34 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.home_games'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.home_games ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 35 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.away_games'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.away_games ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 36 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 37 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.arena_stadium'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 38 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.owner_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.professional_sports_team.owner_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 39 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.position'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.position ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 40 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.current_head_coach'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_head_coach ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 41 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_roster']), ('Entity', '==', 'm.06b1q', ['sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.historical_roster ?o1 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 42 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_roster']), ('Entity', '==', 'm.06b1q', ['american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.historical_roster ?o1 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 43 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.sport']), ('Entity', '==', 'm.06b1q', ['sports.sport.positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.sports_team.sport ?o1 . ?o1 fb:sports.sport.positions fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 44 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.owner_s']), ('Entity', '==', 'm.06b1q', ['american_football.football_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:sports.professional_sports_team.owner_s ?o1 . ?o1 fb:american_football.football_player.position_s fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 45 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.current_head_coach']), ('Entity', '==', 'm.06b1q', ['american_football.football_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_head_coach ?o1 . ?o1 fb:american_football.football_player.position_s fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 46 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.current_roster']), ('Entity', '==', 'm.06b1q', ['sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_roster ?o1 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 47 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.current_roster']), ('Entity', '==', 'm.06b1q', ['american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01y49 fb:american_football.football_team.current_roster ?o1 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 48 / 252: {
          [('Main', '==', 'm.06b1q', ['american_football.football_position.players'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1671
            Final Answer: {'Max Browne', 'Drew Weatherford', 'Cliff Brown', 'Dinty Moore', 'Evan Sharpley', 'Jordan Wynn', 'Matt Blundin', 'Kerry Joseph', 'Ken Karcher', 'Willie Wood', 'Reggie Collier', 'Mike Livingston', 'Sol Metzger', 'George Ceithaml', 'Frank Carideo', 'Nate Hybl', "Tommy O'Connell", 'Scott Campbell', 'Jim Gaffney', 'Edwin Hale', 'Terry Andrysiak', 'Erik Kramer', 'Charley Trippi', 'Ben Olson', 'James Joy Miller', 'Lynn Amedee', 'Bob Laraba', 'Benny Friedman', 'Ed Brown', 'John Stocco', 'Max Fiske', 'John Fourcade', 'Andrew Luck', 'Craig Erickson', 'Zak Kustok', 'Tom Slade', 'Archie Weston', 'Greg Cook', 'Sal Aunese', 'Shorty Miller', 'Cornelius Greene', 'Mike Jay', 'Dan LeFevour', 'Johnny Cain', 'Pete Beathard', 'George Ratterman', 'Rick Arrington', 'Ron Miller', 'Freddie Milons', 'Marcus Brady', 'Doug Pederson', 'Jim Hart', 'Josh Harris', 'Darrell Shepard', 'Joe Tereshinski III', 'Gary Cuozzo', 'Max Choboian', 'Jack Scarbath', 'Dieter Brock', 'Roman Gabriel', 'Ken Stabler', 'James Brown', 'Ray Stachowicz', 'Darrell Hackney', 'Chuck Jaskwhich', 'Colt McCoy', 'Matt Gutierrez', 'Micah Brown', 'Bob Berry', 'Zack Eskridge', 'Ronnie Knox', 'Jim Ninowski', 'David Walker', 'John Fitzgerald', 'Frank Seurer', 'Bob Lee', 'Mike Hohensee', 'Craig Whelihan', 'Erik Meyer', 'Allen Boren', 'Bert Bell', 'Dan Fouts', 'Alfred Bergman', 'Bob Davis', 'Daryle Lamonica', 'Buddy Humphrey', 'George Blanda', 'Cam Newton', 'Don James', 'Kim McQuilken', 'Don Gault', 'Mike Courey', 'George Mira', 'Matt Grothe', 'Nick Foles', 'Jimmy Johnson', 'Bruce Eugene', 'Victor Butler', 'Joe Urso', 'Terrelle Pryor', 'Jackie Parker', 'Harold Pogue', 'Garin Higgins', 'Kliff Kingsbury', 'Chase Clement', 'Jim Del Gaizo', 'Danny Bradley', 'Sage Rosenfels', 'Frank Ryan', 'Bob Wiese', 'Nick Hill', 'Russ Reader', 'Tom Ramsey', 'Brad Johnson', 'Zac Lee', 'Todd Bouman', 'Tom Shaw', 'Tommy Jones', 'Stacy Tutt', 'Brion Carnes', 'Tom Wilson', 'Mike Kafka', 'Matt Flynn', 'Nick Stephens', 'Jack Ankerson', 'Jeff Kemp', 'Casey Printers', 'Steve Bono', 'Kirk Baumgartner', 'Mark Herrmann', 'Irv Comp', 'Bryn Renner', 'Sam Hollenbach', 'Lang Campbell', 'Walter Fondren', 'Daunte Culpepper', 'Joe Gilliam', 'Matt Brown', 'Joe Dufek', 'Phil Simms', 'Darrell Dickey', 'John McCarthy', 'Kelly Phelps', 'Tavita Pritchard', 'Mickey Slaughter', 'John Skelton', 'Major Applewhite', 'Sean Canfield', 'Don Panciera', 'Bobby Hoying', 'Taylor Martinez', 'Dustin Long', 'Bob Avellini', 'Jake Gibbs', 'Terry Allen', 'Ross Fichtner', 'Bobby Lackey', 'Stephen Wasil', 'King Hill', 'Carl Brumbaugh', 'Donald Sellers', 'Al Kincaid', 'David Archer', 'Henry J. McGlew', 'Billy Kilmer', 'Jeff Brohm', 'Bart Andrus', 'Stan Pincura', 'Todd McShay', 'Ed Baker', 'Ed Matesic', 'Brett Basanez', 'Casey Pachall', 'Derek Devine', "Andre' Woodson", 'Austin Davis', 'Jeff Tedford', 'Jeff Garcia', 'Philip King', 'Jesse Freitas', 'Noah Shepard', 'Chic Harley', 'Marty Mornhinweg', 'Howard Shipley', 'Dennis Claridge', 'Terry Nofsinger', 'Jeff Rowe', 'Dick Kazmaier', 'Eli Manning', "J. T. O'Sullivan", 'Ockie Anderson', 'George Cartier', 'Paul Smith', 'Ed Rubbert', 'Dave Wilson', 'Matt Dunigan', 'Wilson Matthews', 'Boomer Esiason', 'Ron Coder', 'Tim Tebow', 'John Friesz', 'Lewis H. Brown', 'Bill Kelly', 'Rick Neuheisel', 'Nathan Brown', 'Craig Ochs', 'John Parker Wilson', 'Rick Trocano', 'Rick Norton', 'Frank Thomas', 'Steve Sarkisian', 'Jim Ballard', 'Brian Dowling', 'Patrick Nix', 'Chris Chandler', 'Adam DiMichele', 'Charles Thompson', 'Tommy Thompson', 'Alex Smith', 'Darian Hagan', 'Jeff Bentrim', 'Frank Patrick', 'Ken Niumatalolo', 'Willie Thrower', 'Dewey Warren', 'Mike Kruczek', 'Charley Way', 'Josh Freeman', 'Zeke Bratkowski', 'Greg Frey', 'Jesse Palmer', 'Steve Ramsey', 'John Dewberry', 'Brian Schottenheimer', 'Rick Clausen', 'Joe Namath', 'Robert Griffin III', 'Frank Budka', 'Josh Betts', 'Tony Adams', 'Browning Nagle', 'Chuck Hixson', 'Steve Bellisari', 'King Corcoran', 'Mike Shula', 'Bob Holly', 'Jim Crocicchia', 'Jeff Rutledge', 'Tom Tupa', 'Richard Bartel', 'Notre Dame starting quarterbacks', 'Harry Stuhldreher', 'Ryan Mallett', 'Doug Kay', 'Noel Mazzone', 'Brandon Weeden', 'Buck Saunders', 'Charlie Whitehurst', 'Allison Hubert', 'Tyrone Willingham', 'Don Breaux', 'Chris Leak', 'Tommy Mont', 'Jerry Rhome', 'Steven Threet', 'Roy Lumpkin', 'Tobin Rote', 'Bill Hartman', "Ken O'Brien", 'T. C. Ostrander', 'Nick Sebek', 'Daryll Clark', 'David Humm', 'Preston Parsons', 'Billy Joe Hobert', 'Steve Myer', 'Gil Bartosh', 'Doug Dickey', 'Tommy Hodson', 'Hayden Fry', 'Galen Hall', 'Zach Mettenberger', 'Gus Dorais', 'Riley Dodge', 'Matt Ryan', 'Steadman S. Shealy', 'Stewart Patridge', 'Jeff Bower', 'Danny Barrett', 'Casey Dick', 'Erwin Gehrke', 'Philip Nelson', 'Dan Orlovsky', 'Cale Gundy', 'Rudy Bukich', 'Jose Davis', 'Carson Palmer', 'Randal Bond', 'Lynn Dickey', 'Sammy Garza', 'Matt Blanchard', 'Nick Davila', 'Ernie Case', 'Cliff Montgomery', 'Todd Marinovich', 'Kevin Craft', 'Johnny Martin', 'J. W. Hinton', 'Chuck Ealey', 'Jim Kubiak', 'Adam Tafralis', 'Geno Smith', 'Ted Tollner', 'Mark Hartsell', 'Ken Strong', 'Chan Gailey', 'Doug Hudson', 'Alan Autry', 'Red Edwards', 'John L. Smith', 'Jackie Robinson', 'Ben Bennett', 'James Franklin', 'Kyle Wachholtz', 'Babe Parilli', 'John David Booty', 'Bob Chappuis', 'Johnny Gildea', 'Butch Songin', 'Lou Saban', 'Stan Heath', 'Mike Phipps', 'Tyler Hansen', 'Tully Blanchard', 'Jerry Babb', 'Curtis Painter', 'Craig Stump', 'Gaius Shaver', 'John Roach', 'Don Fuell', 'Craig Krenzel', 'Lafayette Russell', 'Josh Booty', 'Paul Chryst', 'Charles Daly', 'Nate Silver', 'James Kilian', 'John McGovern', 'Jesse Jackson', 'Dennis Morrison', 'Phil Danaher', 'Barry Wood', 'Jim Root', 'Leeman Bennett', 'Paul Thompson', 'Cullen Harper', 'Luke McCown', 'Rich Campbell', 'Fred Enke', 'Stan Humphries', 'Adrian Ford', 'Scott Mutryn', 'Gary Beban', 'Joey Halzle', 'Raymond Philyaw', 'Nick Caserio', 'Mike Tomczak', 'Neil Lomax', 'Shane Matthews', 'Karl Sweetan', 'Riley Smith', 'Sammy Baugh', 'Kevin McDougal', 'Drew Stanton', 'Ricky Ray', 'Jeff Carlson', 'Angus Daniel McDonald', 'Dee Dowis', 'Dick Norman', 'Joe Francis', 'Billy Patterson', 'Jeff Van Camp', 'Steve Dils', 'Brock Berlin', 'Don Meredith', 'Mitch Mustain', 'Vinny Testaverde', 'Glenn Killinger', 'Matt Hasselbeck', 'Chris Miller', 'Colby Cameron', 'Mal Stevens', 'Ray Mallouf', 'Thomas Hughlitt', 'Glenn Carano', 'Gary Huff', 'Johnny Clement', 'George Terlep', 'Marcus Arroyo', 'Ryan Nassib', 'Kent Austin', 'Tom Flick', 'Jeff Otis', 'Peyton Manning', 'Russ Michna', 'Corey Jenkins', 'Mike Johnson', 'Ralph Guglielmi', 'Kyle Rowley', 'Damarius Bilbo', 'Bennie Owen', 'Bubby Brister', 'Everett Golson', 'Aaron Rodgers', 'Bryan Randall', 'Ted Marchibroda', 'Ben Mauk', 'Kevin Daft', 'Romaro Miller', 'Alex Mortensen', 'Chris Rix', 'Joe Scannella', 'Tyler Palko', 'Jack Graf', 'Tom Brandstater', 'Joe Krol', 'Henry Burris', 'Chris Petersen', 'Mike Cawley', 'Bob Gagliano', 'Boss Weeks', 'Cleve Bryant', "Tom O'Malley", 'Dave Dickenson', 'Jammal Lord', 'Christian Ponder', 'Ray Buivid', 'Bernard Masterson', 'Mark Sanchez', 'Bo Molenda', 'Mike Neu', 'Jay Fiedler', 'Barrick Nealy', 'Jimmy Hitchcock', 'Dave Ragone', 'Aaron Brooks', 'Steve Pisarkiewicz', 'Vince Pazzetti', 'Paul Peterson', 'Don Majkowski', 'Babe Laufenberg', 'Bruce Arians', 'Jason Palumbis', 'Dan Devine', 'Kevin Kolb', 'Matt Schaub', 'Jim Traber', 'Tony Robinson', 'Kay Stephenson', 'Phil Sarboe', 'Adam Dunn', 'Sonny Jurgensen', 'David Rader', 'Todd Philcox', 'Jay Cutler', 'Tyler Bray', 'Eric Kresser', 'Bobby Garrett', 'Joe Paterno', 'Al Dorow', 'Peter Lalich', 'Steve McNair', 'R. J. Archer', 'Mike Groh', 'Marques Hagans', 'Young Bussey', 'Jack Thompson', 'Armin Mahrt', 'Bobby Layne', 'Ira Rodgers', 'Brook Berringer', 'Scott Rislov', 'Rhett Bomar', 'Bud Schwenk', 'Ken Mastrole', 'Eddie Crowder', 'John Michelosen', 'Jim Youel', 'Doug Flutie', 'Kim King', 'James Cox', 'Elbert Bloodgood', 'Pat Coady', 'Ben Sankey', 'Omar Jacobs', 'Rodney Allison', 'Jared Allen', 'Dalton Williams', 'Chris Crane', 'Dick Thornton', 'Steven Gachette', 'Randy Dean', 'Bill Mohn', 'Diondre Borel', 'Terry Bradshaw', 'Russell Wilson', 'Chase Holbrook', 'Jordan Palmer', 'Nick Sorensen', 'David Carr', 'Syvelle Newton', 'Trevor Vittatoe', 'Bobby Dodd', 'Johnny Lujack', 'Scott Zolak', 'Matt Cassel', 'Steve Mariucci', 'Quincy Carter', 'Norb Sacksteder', 'Tom Luginbill', 'Darnell Kennedy', 'Alex Tanney', 'Bill DeCorrevont', 'Chad Hutchinson', 'Alan Pastrana', 'Ian ""Rocky"" Butler', 'Hugh Millen', 'Archie Manning', 'Ryan Fitzpatrick', 'Scott Stankavage', 'Gerald Mann', 'Todd Husak', 'Wesley Carroll', 'Marc Trestman', 'Chase Patton', 'Jack McBride', 'Ryan Colburn', 'Bill Callahan', 'John Kimbrough', 'Ed Goddard', 'Cliff Stoudt', 'Matt LoVecchio', 'Steve Kragthorpe', 'George Izo', 'Kyle Bissinger', 'Graeme McFarland', 'George Gipp', 'Parnell Dickinson', 'Brooks Bollinger', 'Jim Sorgi', 'Brady Leaf', 'Nick Nardacci', 'Marques Tuiasosopo', 'Joe Geri', 'Charlie Richardson', 'Jack Reilly', 'Joe Barnes', 'Quinn Grovey', 'Dick Wood', 'David Norrie', 'Scott Frost', 'Tippy Dye', 'Ryan Vena', 'Leonard Bahan', 'Dan McGwire', 'Jack Concannon', 'Trent Dilfer', 'Tommy Hughitt', 'Y. A. Tittle', 'George Adee', 'Albie Reisz', 'Dick Flowers', 'Gary Lane', 'Corey Bramlet', 'Blair Kiel', 'Doug Johnson', 'Paul Justin', 'Nate Montana', 'Chad Henne', 'Harry Mattos', 'Rusty Hilger', 'Marcus Griffin', 'Will Furrer', 'Ed Westfall', 'Coley McDonough', 'Jim Miller', 'Jon Kitna', 'Timm Rosenbach', 'Tony Romo', 'Weeb Ewbank', 'Nealon Greene', 'Arnie Herber', 'Mike Kirkland', 'Elvis Grbac', 'Vince Young', 'Branndon Stewart', 'Bud Bonar', 'Walt Holmer', 'Andrew Walter', 'Danny Wuerffel', 'Tim Couch', 'Gale Gilbert', 'Bobby Ross', 'Trevor Harris', 'Andy Puplis', 'John Rauch', 'Chuck Riley', 'Steve Fairchild', 'Tom Arth', 'Jim Zorn', 'Brian Hoyer', 'Jim Harbaugh', 'Dusty Bonner', 'Jim Jensen', 'Clint Chelf', 'John McCormick', 'Billy Ryan', 'Larry Rakestraw', 'John Dutton', 'Michael Henig', 'Dameyune Craig', 'Kyle Israel', 'George Haffner', 'Chad Manis', 'Reggie Ball', 'Chris Cagle', 'Tyler Sheehan', 'Mike Elkins', 'Benny Boynton', 'Jeff Mroz', 'Pat Steenberge', 'Bart Starr', 'Bill Snyder', 'Chris Pizzotti', 'Kenny Kelly', 'Max Hall', 'J. P. Losman', 'Jon Gruden', 'Bruce Lemmerman', 'Earl Morrall', 'Steve DeBerg', 'Norv Turner', "Davey O'Brien", 'Don McPherson', 'John Mazur', 'Scott Brunner', 'Sam Adkins', 'Marcus Crandell', 'Bill Hutchinson', 'John Hufnagel', 'Matt Lytle', 'David Jaynes', 'Eric Randall', 'Tarvaris Jackson', 'Bobby Scott', 'Brad Calip', 'Carl S. Williams', 'Kellen Moore', 'A. J. Feeley', 'Joey Sternaman', 'John Huarte', 'Todd Whitten', 'Jeff Lewis', 'Randy Fasani', 'Cody Hodges', 'Damien Bell', 'Cliff Lewis', 'Marc Wilson', 'Jevan Snead', 'Ed Coady', 'B. J. Daniels', 'Drew Henson', 'Mike Martir', 'David Klingler', 'Jeremiah Masoli', 'George Pfann', 'Eddie McAshan', 'Guido Merkens', 'Charlie Milstead', 'Frankie Albert', 'Anthony Calvillo', 'Don Jonas', 'Warren Heller', 'David Neill', 'Shea Morenz', 'John Witkowski', 'Woodrow Dantzler', 'Aaron Garcia', 'Travis Brown', 'Tommy Kramer', 'George Cafego', 'Eagle Day', 'Brian Mann', 'Ken Riley', 'Robert Brewer', 'Taylor Tharp', 'Bobby Thomason', 'Jack Cosgrove', 'Mark Farris', 'Jason White', 'Gino Torretta', 'Rex Kern', 'Bill Nelsen', 'Kodi Burns', 'Ingle Martin', 'Brad Childress', 'Bill Morley', 'Everett Bacon', 'Fred Ratterman', 'Bob Ptacek', 'Tom Farris', 'Ricky Santos', 'Doc Fenton', 'Milton Romney', 'Carl Sanders', 'Brandon Kirsch', 'Steve Clarkson', 'Brock Huard', 'Keith Nichol', 'Jake Delhomme', 'Cotton Warburton', "Chad O'Shea", 'Jack Crabtree', 'Joe Webb', 'Jimmy Conzelman', 'Warren Moon', "Pat O'Hara", 'Scott Tinsley', 'Bob Celeri', 'Jamie Martin', 'Frank Spaziani', 'Kyle Orton', 'Glynn Griffing', 'Major Harris', 'Shawn Jones', 'Clarence Diebold', 'Jack Mildren', 'Garrett Gilbert', 'Pat Ryan', 'Martevious Young', 'Khari Jones', 'John Beck', 'Bobby Hebert', 'Steve Matthews', 'Charles Dudley Daly', 'Chad Johnston', 'Luke Drone', 'Johnny Genung', 'Tommy Rees', 'Paul Burmeister', 'Adrian Burk', 'Craig Kupp', 'Wally Richardson', 'Bill Kenney', 'Angelo Bertelli', 'Brian Knorr', 'Brandon Daniels', 'Mike Rae', 'Doug Kenna', 'Steve Stenstrom', 'Ken Dorsey', 'Billy Joe Tolliver', 'Gene Mayfield', 'Brent Pease', 'Casey Clausen', 'Nick Browder', 'Joey Harrington', 'Keith Null', 'George Taliaferro', 'Mack Reynolds', 'Clyde LeForce', 'Tory Woodbury', 'Ken Anderson', 'James Phelan', 'Jim McElwain', 'Bobby Lamb', 'Skip Gougler', 'Chuck Curtis', 'Glenn Dobbs', 'Gabe Gross', 'Ed Podolak', 'Harry Agganis', 'Joe Roth', 'Mike Quinn', 'Ray Goff', 'Jim Finks', 'Keith Molesworth', 'Isiah Williams', 'Ryan Tannehill', 'Pepper Rodgers', 'John Kaleo', 'Mark Brunell', 'Ed Doherty', 'Shaun Hill', 'Kurt Warner', 'Kent Graham', 'Michael Robinson', 'Todd Helton', 'Bobby Petrino', 'Kerry Meier', 'Jay Gruden', 'Paul Stagg', 'Landry Jones', 'William J. Zloch', 'Billy Wasmund', 'Zac Taylor', 'Doug Russell', 'Randy Sanders', 'Drew Willy', 'Thaddeus Lewis', 'Drew Brees', 'Randy McCown', 'Taylor Potts', 'Tom Sherman', 'Gene Keady', 'Bill Mackrides', 'Ron Randleman', 'Joe Kapp', 'Brady Quinn', 'Kelly Holcomb', 'Josh Johnson', 'Ryan Griffin', 'Vernon Glass', 'Dan Marino', 'Stone Phillips', 'Gary Hogeboom', 'Kyle Boller', 'Danny Kanell', 'Fred McNair', 'Maurice Gordon Clarke', 'Joey Elliott', 'Scott Secules', 'Quinn Gray', 'Moses Moreno', 'Damon Huard', 'Hunter Enis', 'Mal Moore', 'Norm Snead', 'Matt Mauck', 'Zach Collaros', 'Chet Grant', 'Cecil Isbell', 'Bob Williams', 'Riley Skinner', 'Frank Reich', 'Harry Theofiledes', 'Jason Campbell', 'John Walton', 'Leon Murray', 'Don Horn', 'Antwaan Randle El', 'J. R. House', 'Dennis Erickson', 'Eric Zeier', 'Brett Salisbury', 'Jim Karsatos', 'Joe Hamilton', 'Bob Bracken', 'Jason Boltus', 'Matt Moore', 'Cleo Lemon', 'Ed Rutkowski', 'Jake Locker', 'David Lee', 'Arnaz Battle', 'Ed Rate', 'Bob Schloredt', 'Frank Dancewicz', 'Ambrose Schindler', 'Danny Wimprine', 'Cameron Higgins', 'Jimmy Kemp', 'Tony Rice', 'Terry Baker', 'Bill Bloss', 'Brett Dietz', 'Scott Dreisbach', 'Mike Teel', 'Chris Greisen', 'Pard Pearce', 'Harold Davis', 'Matt Simms', 'B. J. Coleman', 'Jake Christensen', 'Manch Wheeler', 'Dave Brown', 'Grant Noel', 'Guy Benjamin', 'Jim German', 'Kevin Sweeney', 'Pat Sullivan', 'Al Dekdebrun', 'Don Bunce', 'Harry Dayhoff', 'David Garrard', 'Troy Smith', 'Gary Kubiak', 'William A. Walsh', 'Lamar McHan', 'Luke Getsy', 'John Sciarra', 'Jack Ernst', 'Gary Wood', 'Brad Otton', 'Nolan Cromwell', 'Jeff Driskel', 'Allie Sherman', 'Dan Raudabaugh', 'Homer Jordan', 'Cory Sauter', 'Mike Brown', 'Sam Keller', 'Jim Fassel', 'Kyle Mackey', 'Drew Tate', 'Kelan Luker', 'Dirk Koetter', 'Chris Todd', 'Sam Bradford', 'Ryan Dinwiddie', 'Tyrod Taylor', 'Walter Steffen', 'Tyler Wilson', 'Pete Liske', 'Neil Graff', 'Josh Fields', 'Joe Flacco', 'Chris Simms', 'Steve Joachim', 'Dudley Dean', 'Billy Stevens', 'Randy Duncan', 'Mike Pagel', 'Charlie Weatherbie', 'Rodney Landers', 'Mark Grieb', 'Eddie Wilson', 'Amos Alonzo Stagg, Jr.', 'Anthony Morelli', 'Devin Gardner', 'Jared Lorenzen', 'Shane Stafford', 'Cullen Finnerty', 'Pat Devlin', 'Jim Sears', 'Jordan Jefferson', 'Paul Christman', 'Merle Gulick', 'Brent Rausch', 'George Shaw', 'Corey Pullig', 'Kevin Murray', 'Steve Young', 'Dave Krieg', 'Fran Curci', 'Brad Banks', 'Kevin Thompson', 'Earl Sprackling', 'Daniel Evans', 'Len Dawson', 'Vernon Prichard', 'Fred Mortensen', 'Danny McManus', 'Vince Dooley', 'Johnny Unitas', 'Isaiah Stanback', 'Matt Jones', 'Rich Gannon', 'Joshua Nesbitt', 'Clyde Crabtree', 'Fritz Shiverick', 'Donald Hollas', 'Vinny Cerrato', 'Butch Hobson', 'Rick Strom', 'Nicholas Dinkel', 'Ryan Clement', 'Craig Penrose', "Danny O'Neil", 'Mike McQueary', 'Vic Hall', 'Ed Danowski', 'Donold Lourie', 'Harlan Carr', 'Harvey White', 'Tony Graziani', 'Milt Plum', 'Chandler Harnish', 'T. J. Yates', 'Bryson Spinner', 'Stan Gelbaugh', 'Steve Sloan', 'Ron Powlus', 'Dixie Howell', 'Ken Ploen', 'Joe Theismann', 'Walter Eckersall', 'Corby Jones', 'Tommy Maddox', 'Chase Daniel', 'Tom Landry', 'Sean Payton', 'Matt Baker', 'Jim Haluska', 'Chuck Long', 'Hunter Cantwell', 'Keith Price', 'Brian Balazik', 'Frisman Jackson', 'Joe Ayoob', 'Jayson Foster', 'Steve Beuerlein', 'Parker Hall', 'Zac Robinson', 'Hoge Workman', 'Case Keenum', 'Mike Riley', 'Reggie Slack', 'Mike Sanford', 'Jeff Komlo', 'David Greene', 'Jimmy Clausen', 'Brian Wrobel', 'Kirby Freeman', 'Fran Nagle', 'Brad Roach', 'Peter Tom Willis', 'Cody Hawkins', 'Jim Everett', 'Cotton Davidson', 'Robbie Bosco', 'Brandon Cox', 'John Bonamego', 'Burton Shipley', 'Koy Detmer', 'John Brodie', 'Frank Filchock', 'Bradlee Van Pelt', 'Toby Korrodi', "Bob O'Connor", 'Chad May', 'Marty Cherry', 'Alan Risher', 'Eddie LeBaron', 'Matthew McGloin', 'Dave Mays', 'Jarious Jackson', 'Jim Tressel', 'Willie Totten', 'Rich Ingold', 'Steve Bartkowski', 'Hutson Mason', 'Duane Akina', 'Casey Weldon', 'Tom Myers', 'Edd Hargett', 'Mike Taliaferro', 'John Elway', 'Condredge Holloway', 'A. J. McCarron', 'Steve Taneyhill', 'Rudy Carpenter', 'Braxton Miller', 'Bernard Morris', 'Wilson Homer Elkins', 'Joe Cusack', 'Jonathan Quinn', 'Patrick Ramsey', 'Dale Rogers', 'Pat Brady', 'Stan White', "Kevin O'Connell", 'Quinton Porter', 'Elmer Madar', 'Bob Guiney', 'Mark Carlson', 'Tony Pike', 'Graham Harrell', 'Shane Montgomery', 'D. J. Shockley', 'G. J. Kinne', 'David Woodley', 'Tom Brady', 'Bernie Faloney', 'Wally Fromhart', 'Rusty Smith', 'Frank Niehaus', 'Bobby Douglass', 'Brian Brohm', 'Herb Tyler', 'Michael Vick', 'Jon Beutjer', 'Fred Besana', 'Dave Smith', 'Chuck Fusina', 'Rich Badar', 'Ronnie McAda', 'Adolph Kliebhan', 'Chris Sanders', 'Kerwin Bell', 'Blake Bell', 'Cliff Sparks', 'Eddie Scharer', 'Vince Evans', 'Ricky Stanzi', 'James Street', 'Gerry Faust', 'Charley Barrett', 'Warren Rabb', 'Nobby Wirkowski', 'John Grigas', 'Mike Palm', 'David Whitehurst', 'Alex Van Pelt', 'Chance Mock', 'Travis Lulay', 'Elgie Tobin', 'Dave Bernard', "Matt D'Orazio", 'Leo Stasica', 'Paul Failla', 'Zach Miller', 'Paul McDonald', 'Dave Havern', 'Bruce Gradkowski', 'Brian Sipe', 'Tony Holm', 'Joe Ferguson', 'Rick McIvor', 'Rex Grossman', 'Kyle Reed', 'Hugh Campbell', 'Ben Roethlisberger', 'Sonny Wade', 'Scotty Glacken', 'Joe Maniaci', 'Joe McKenney', 'Robert Williams', 'Kirk Herbstreit', 'Frank Costa', 'Freddie Kitchens', 'Buzz Warren', 'Giulio Caravatta', 'Billy Davis', 'Bill Troup', 'Joe Germaine', 'Billy Jack Haskins', 'Joseph Drum', 'Wade Wilson', 'Taylor Kelly', 'Matt Barkley', 'Shea Smith', 'Jordan Rodgers', 'Jerrod Johnson', 'Aaron Murray', 'D. Bryant', 'Craig Fertig', 'John Faiman', 'Donovan McNabb', 'Jeb Blount', 'Mark Kamphaus', 'Andy Dalton', 'Bill Redell', 'Red Kirkman', 'Scott Tolzien', 'J.C. Watts', 'Marquel Blackwell', 'George Cole', 'Matt Stevens', 'Cliff Duggan', 'Gary Banks', 'Giovanni Carmazzi', 'Jim McMahon', 'Levi Brown', 'Gaylord Stinchcomb', 'Brian White', 'John Stofa', 'Paul Withington', 'Charlie Green', 'Armanti Edwards', 'Blaine Gabbert', 'Pug Rentner', 'Dave Odom', 'Michael Bishop', 'Rasheed Marshall', 'Nate Longshore', 'Gene Dahlquist', 'Mike Pawlawski', 'Kellen Clemens', 'Brian Wilbur', 'Jimmy Simpson', 'Steve Grogan', 'Rod Rutherford', 'Joe Pisarcik', 'Charley Johnson', 'Bill Blankenship', 'Harry Gilmer', 'Tee Martin', 'Scott Hunter', 'Dayne Crist', 'Joe Brandy', 'Mark Harmon', 'Kyle Newhall-Caballero', 'Gibran Hamdan', 'JaMarcus Russell', 'Kordell Stewart', 'Faye Abbott', 'Chad Salisbury', 'Gary Danielson', 'Jason Fife', 'Jim Kelly', "Neil O'Donnell", 'Cecil Shorts III', 'Johnny Green', 'John Hadl', 'Will Proctor', 'Matt Kofler', 'Fred Wyant', 'Andy Hall', 'Doug Elmore', 'Jeff Hostetler', 'Jason Garrett', 'Todd Boeckman', 'Jay Schroeder', 'Ed Foley, Sr.', 'Philip Rivers', 'Danny White', 'Cody Pickett', 'Kent Nix', 'Greg Landry', 'Charlie Conerly', 'Mike Cotten', 'Matt Leinart', 'Gino Guidugli', 'Chase Rettig', 'Mike Kerrigan', 'Clint Stoerner', 'Willie Tuitama', 'Dennis Dixon', 'Ed Schultz', 'Nathan Enderle', 'Jim Druckenmiller', 'Al Woodall', 'Shane Boyd', 'Paddy Driscoll', 'Joel Klatt', 'Erik Wilhelm', 'Sid Luckman', 'Tim Hiller', 'Norm Van Brocklin', 'Dan Whalen', 'John Brantley', 'Colin Kaepernick', 'Stoney Case', 'Dutch Clark', 'Bob Hargrave', 'Mike Potts', 'Charlie Frye', 'Randy Johnson', 'Dan Darragh', 'Mike Cavan', 'Steve Pelluer', 'Kyle Wright', 'Brett Favre', 'Irby Curry', 'Greg McElroy', 'Kerry Collins', 'Pat White', 'Andre Ware', 'Dalton Bell', 'Pat Barnes', 'Mike Boryla', 'Ell Roberson III', 'Jim Brady', 'Cornelius Ingram', 'Mike McMahon', 'John Congemi', 'Harlan Page', 'Mark Malone', 'George Wilson', 'Billy Lothridge', 'Bill Spears', 'Walt Rankin', 'Shawn Halloran', 'Lester Lautenschlaeger', 'Dan Reeves', 'Ron Jaworski', 'Kurt Kittner', 'Rodney Peete', 'Seth Adams', 'Todd Reesing', 'George Burnside', 'Spergon Wynn', 'Adam Weber', 'Bernie Kosar', 'Mike Reilly', 'Colt Brennan', 'Rusty Lisch', 'Cecil Chaing', 'Billy Anderson', 'Adrian McPherson', 'Trent Edwards', 'Lane Kiffin', 'Blake Mitchell', 'Bill Stull', 'Dick Shiner', 'Virgil Carter', 'Bill Meek', 'Dylan Meier', 'Ronald Curry', 'Brandon Doman', 'Steve Collins', 'Chuck DeShane', 'Merl Condit', 'Randy Wright', 'Shaun King', 'Marlin Briscoe', 'Brian Johnson', 'Doug Nussmeier', 'Kirk Cousins', 'Tom Flores', 'Robert Marve', 'Don Nehlen', 'Wilmeth Sidat-Singh', 'Larry Isbell', 'John Paye', 'Darrell Bevell', 'Chris Isaac', 'Buck Belue', 'Tracy Ham', 'Frank Kirkleski', 'Edgar Allan Poe', 'Laurie Walquist', 'Don Strock', 'Bill Wade', 'Jamelle Holieway', 'Cody Carlson', 'Brodie Croyle', 'Charley Brewer', 'Chuck Hartlieb', 'Tommy Wade', 'Ed Salem', 'Josh McCown', "Dan O'Connor", 'Richard Todd', 'Marty Domres', 'Bill Musgrave', 'Denard Robinson', 'Marc Verica', 'Todd Hammel', 'Jameel Sewell', 'Tino Sunseri', 'Turk Schonert', 'Roy Zimmerman', 'Billy Volek', 'Richard Brehaut', 'Don Milan', 'Marcus Randall', 'Anthony Wright', 'Don Heinrich', 'Brad Smith', 'Rickey Foggie', 'Stefan LeFors', 'Bobby Reid', 'Vern Huffman', 'Troy Aikman', 'Marshall Glenn', 'Jared Zabransky', 'Steve Tensi', 'Nate Davis', 'Josh Heupel', 'Bob Griese', 'Bernard Jackson', 'Wes Bautovich', 'Marvin Lewis', 'T. J. Rubley', 'Clint Dolezel', 'Casey Hansen', 'Ty Detmer', 'Phil Cutchin', 'Dominic Randolph', 'Chris Redman', 'Two-Bits Homan', 'A. J. Suggs', 'Derek Anderson', 'Moxie Dalton', 'Dave Lewis', 'Eric Bjornson', 'Frank Harris', 'Matthew Stafford', 'Joe DiVito', 'Dennis Franklin', 'Dan Henning', 'Pat Haden', 'Chris Pazan', 'Rick Venturi', 'Gilbert Renfroe', 'Curtis Pulley', 'Joe Reed', 'Tom Clements', 'Rick Slager', 'Steve Sitko', 'Bucky Richardson', 'Akili Smith', 'Ryan Leaf', 'Jack Trudeau', 'Joe Sparma', 'Otto Graham', 'Josh Portis', 'Chip Bowden', 'Tom Owen', 'Bob Timberlake', 'Jake Heaps', 'Whit Taylor', 'Jay Arnold', 'Mark Vlasic', 'Nick Rolovich', 'Harry Newman', 'Jay Walker', 'Dennis Shaw', 'Jimmy Raye II', 'E. J. Manuel', 'Joe Cox', 'Don Moorhead', 'Tom Dublinski', 'Roger Staubach', 'Ray Morrison', 'Mark Miller', 'Seneca Wallace', 'Johnny Evans', 'Brent Schaeffer', 'Jimmy Brewster', 'Dominique Davis', 'William Renner', 'Walt Masters', 'Kenneth Hall', 'Wally Gabler', 'Jeff Francis', 'Jonathan Crompton', 'Don Trull', 'John Sciarra, Jr.', 'Craig Morton', 'Tommy Grady', 'George Welsh', 'Lou Brock', 'Don Allard', 'Jeff Terrell', 'Frank Tripucka', 'Zack Mills', 'Frank Broyles', 'Terry Hanratty', 'Tony Eason', 'Donnie Davis', 'Jim Hardy', 'Norris Weese', 'Paul T. Hogan', 'Brock Osweiler', 'Tyler Thigpen', 'John Amabile', 'Marcus Vick', 'Justin Rascati', 'Mike Moroski', 'Brian Griese', 'Len Calligaro', 'Andy Kelly', 'Jack Jacobs', 'Brad Goebel', 'Gary Keithley', 'Tim Rattay', 'Kinsmon Lancaster', 'Everett Shelton', 'Todd Dodge', 'Glenn Foley', 'Don Hamilton', 'Tony Sacca', 'Art Howe', 'Jerry Tagge', 'Scott McBrien', 'Lorne Sam', 'Alex Espinoza', 'Dennis Sproul', 'Wayne Clark', 'Mark Rypien', 'Dave Wiemers', 'Rocky Long', 'Bill Munson', 'Ken Hobart', 'Clint Longley', 'Kelly Stouffer', 'Ace Parker', 'Stanley Jackson', 'Scott Shafer', 'Jason Gesser', 'Demetrius Jones', 'Bill Etter', 'Tom Yewcic', 'Brian St. Pierre', 'Morley Drury', 'Danny Southwick', 'Scott Bull', 'Jeff Blake', 'Clint Wyckoff', 'Dave Barr', 'Jerry Keeling', 'Mike McCoy', 'Mike Kelley', 'Kiehl Frazier', 'Paul Governali', 'Drew Bennett', 'Todd Blackledge', 'Vince Ferragamo', 'Byron Leftwich', 'Marv Mattox', 'Jarrett Lee', 'Richie Lucas', 'Charles de Saulles', 'Carlyle Holiday', 'Mike Van Raaphorst', 'Ron C. Smith', 'Randy Hedberg', 'John Cartwright', 'John Navarre', 'Sam Wyche', 'Larry Weldon', 'Brett Ratliff', 'Aaron Corp', 'Matt Robinson', 'Gary Marangi', 'Bert Jones', 'Paul Duhart', 'Hank Lauricella', 'Jeff Kelly', 'Bruce Mathison', 'Mike Hartline', 'Scott Covington', 'Gifford Nielsen', 'Kim Hammond', 'Jimmy Jones', 'Myles Eden', 'Charles Zeitler', 'Chris Smelley', 'Bob Waterfield', 'Lester Ricard', 'Buck Pierce', 'Chris Turner', 'Eldon Fortie', 'Hobey Baker', 'Jason Maas', 'Fred Benners', 'Bill Bradley', 'Sean Glennon', 'Trent Green', 'Matt Scott', 'Cary Conklin', 'Matt Nagy', 'Jacky Lee', 'Arnie Arenz', 'Don Doll', 'Eldridge Dickey', "Charlie O'Rourke", 'Jerry Burns', 'Rick Mirer', 'Matt Cavanaugh', 'Gary Kerkorian', 'Mike Bobo', 'Anthony Dilweg', 'Jim Leavitt', 'Ray Lucas', 'Stephen McGee', 'Steve Walsh', 'Mike Vanderjagt', 'Houston Nutt', 'Drew Olson', 'Scott Milanovich', 'Jim Leonard', 'Sonny Sixkiller', 'Bob Adkins', 'Ox Eckhardt', 'Steve Fuller', 'Oliver Luck', 'Juan Joseph', 'Mike Holmgren', 'Ryan Lindley', 'Sonny Cumbie', 'Milt Ghee', 'Reggie McNeal', 'Gus Frerotte', 'Charlie Batch', 'Charley Seabright', 'Kevin Riley', 'Eric Crouch', 'David Johnson', 'Steve Romanik', 'Les Horvath', 'Jimmy Jemail', 'Len Barnum', 'Damon Allen', 'Mike Buck', 'Shawn Moore', 'Caleb Hanie', 'Bobby Gage', 'Brian Mitchell', 'Cade McNown', 'Troy Taylor', 'Kiel Gunner', 'Steve Davis', 'Dan Pastorini', 'Justin Lightfoot', 'Jeff Smoker', 'Art Schlichter', 'Mark Whipple', 'Duke Carlisle', 'Eric Hipple', 'George Clark', 'Darian Durant', 'Marvin Graves', 'Verne Lewellen', 'Joe Fields', 'Ellery Huntington, Jr.', 'Dean Look', 'Rohan Davey', 'Timmy Chang', 'Ben Owen', 'Todd Collins', 'Ryan Perrilloux', 'Jerry Golsteyn', 'Dan Manucci', 'Doug Williams', 'Daryl Dickey', 'Craig Nall', 'Kevin Eakin', 'Asad Abdul-Khaliq', 'Xavier Lee', 'Kevin Prince', 'Taylor Bennett', 'Turner Gill', 'Erik Watts', 'Myrl Goodwin', 'Mark Manges', 'Tom Sorley', 'Casey Bramlet', 'Justin Zwick', 'Heath Shuler', 'Chester Stewart', 'Patrick Cowan', 'Scott Linehan', 'Buddy Teevens', 'B. J. Symons', 'Jacory Harris', 'Rob Johnson', 'Steve Hokuf', 'Harry Robb', 'Alex Brink', 'McLeod Bethel-Thompson', 'Eck Curtis', 'Arnold Tucker', 'Vince Stevenson', 'Bud Wilkinson', 'John Reaves', 'Brian McClure', 'Mike Tice', 'Zac Champion', 'Spec Sanders', 'Craig Kusick, Jr.', 'Mike Gundy', "Harry O'Boyle", 'Tony Banks', 'James Harris', 'Joe Montana', 'June Jones', 'Jarrett Brown'}
            Answers = 1671, P = 0.000598, R = 1.000000, F1 = 0.001196
          } [0.054s]
          Answers = 1671, P = 0.000598, R = 1.000000, F1 = 0.001196
        } [0.055s]
        Checking schema 49 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:sports.sports_position.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:sports.sports_position.sport ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1
            Final Answer: {'American football'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 50 / 252: {
          [('Main', '==', 'm.06b1q', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1
            Final Answer: {'Paper Lion: Confessions of a Last-String Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 51 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position_limit.maximum'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position_limit.maximum ?o1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position_limit.maximum ?o1 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1
            Final Answer: {'3'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 52 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position_limit.target'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position_limit.target ?o1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position_limit.target ?o1 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1
            Final Answer: {'2'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 53 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position.abbreviation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.abbreviation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.abbreviation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 54 / 252: {
          [('Main', '==', 'm.06b1q', ['soccer.football_position.players'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:soccer.football_position.players ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:soccer.football_position.players ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1
            Final Answer: {'Max Browne'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 55 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position_limit.minimum'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position_limit.minimum ?o1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position_limit.minimum ?o1 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1
            Final Answer: {'1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 56 / 252: {
          [('Main', '==', 'm.06b1q', ['american_football.football_position.players']), ('Entity', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 2
            Final Answer: {'Doug Johnson', 'Carson Palmer'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 57 / 252: {
          [('Main', '==', 'm.06b1q', ['american_football.football_position.players']), ('Entity', '==', 'm.01y49', ['sports.sports_team_owner.teams_owned'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:sports.sports_team_owner.teams_owned fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:sports.sports_team_owner.teams_owned fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Mike Brown'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 58 / 252: {
          [('Main', '==', 'm.06b1q', ['american_football.football_position.players']), ('Entity', '==', 'm.01y49', ['american_football.football_coach.current_team_head_coached'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:american_football.football_coach.current_team_head_coached fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:american_football.football_coach.current_team_head_coached fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Marvin Lewis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 59 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.sport']), ('Entity', '==', 'm.01y49', ['sports.sport.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:sports.sports_position.sport ?o1 . ?o1 fb:sports.sport.teams fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:sports.sports_position.sport ?o1 . ?o1 fb:sports.sport.teams fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'American football'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 60 / 252: {
          [('Main', '==', 'm.06b1q', ['american_football.football_position.players']), ('Entity', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 61 / 252: {
          [('Main', '==', 'm.06b1q', ['american_football.football_position.players']), ('Entity', '==', 'm.01y49', ['sports.sports_team_owner.teams_owned'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:sports.sports_team_owner.teams_owned fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 62 / 252: {
          [('Main', '==', 'm.06b1q', ['american_football.football_position.players']), ('Entity', '==', 'm.01y49', ['american_football.football_coach.current_team_head_coached'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:american_football.football_position.players ?o1 . ?o1 fb:american_football.football_coach.current_team_head_coached fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 63 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.sport']), ('Entity', '==', 'm.01y49', ['sports.sport.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06b1q fb:sports.sports_position.sport ?o1 . ?o1 fb:sports.sport.teams fb:m.01y49 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 64 / 252: {
          [('Main', '==', 'm.086g2', ['location.administrative_division.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.administrative_division.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.administrative_division.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'India'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 65 / 252: {
          [('Main', '==', 'm.086g2', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'India'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 66 / 252: {
          [('Main', '==', 'm.086g2', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'Indian state'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 67 / 252: {
          [('Main', '==', 'm.086g2', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'West Bengal Legislative Assembly'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 68 / 252: {
          [('Main', '==', 'm.086g2', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 67
            Final Answer: {'Mausam Noor', 'Pannalal Bhattacharya', 'Monotosh Ghosh', 'Sankha Chatterjee', 'Mouma Das', 'Dev', 'Narahari Mahato', 'Ranjan Bose', 'Satarupa Sanyal', 'Ishwar Chandra Gupta', 'Krishna Kumari', 'Arup Raha', 'Tarun Mandal', 'Sudip Bandyopadhyay', 'Arpita Singh', 'Antara Mitra', 'Robin Banerjee', 'Prafulla Chandra Sen', 'Shafiur Rahman', 'Madan Tamang', 'Choudhury Mohan Jatua', 'Muhammad Shahidullah', 'Dhananjoy Chatterjee', 'Abhik Mukhopadhyay', 'Manohari Singh', 'Abbas Uddin', 'Pronay Halder', 'Subir Raha', 'Gopal Kundu', 'Richmond Shakespear', 'Prabir Ghosh', 'Pramod Chakravorty', 'Aveek Mukhopadhyay', 'Prabir Das', 'Sandhya Roy', 'D. K. Bandyopadhyay', 'Saraswati Saha', 'Debalina Majumder', 'Amitabha Chattopadhyay', 'Muhammad Qudrat-i-Khuda', 'Priyanath Mukhopadhyay', 'Poulomi Ghatak', 'Sailoz Mookherjea', 'Avinabo Bag', 'Sankar Chatterjee', 'Dhananjay Bhattacharya', 'Tathagata Roy', 'Mumtaz Sorcar', 'Bhaskar Pramanik', 'Shouvik Ghosh', 'Baby Halder', 'Kalim Sharafi', 'Bedabrato Pain', 'Sharmila Chakraborty', 'Azizul Huque', 'Shonal Rawat', 'Subhash Bhowmick', 'Chandidas', 'Sandhya Mazumdar', 'Anjolie Ela Menon', 'Purnendu Patri', 'Swami Bhuteshananda', 'Partha Chatterjee', 'Buddhadeb Dasgupta', 'Sambhu Nath De', 'Kuljeet Randhawa', 'Amala'}
            Answers = 67, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 67, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 69 / 252: {
          [('Main', '==', 'm.086g2', ['location.in_state.legislative_capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.in_state.legislative_capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.in_state.legislative_capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'Kolkata'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 70 / 252: {
          [('Main', '==', 'm.086g2', ['base.aareas.schema.administrative_area.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:base.aareas.schema.administrative_area.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:base.aareas.schema.administrative_area.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'Kolkata'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 71 / 252: {
          [('Main', '==', 'm.086g2', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'Speaker of the West Bengal Legislative Assembly'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 72 / 252: {
          [('Main', '==', 'm.086g2', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 658
            Final Answer: {'Chandannagar', 'Uttar Dinajpur district', 'Kolkata district', 'Bagula', 'Puttabong (Tukvar) Tea Estate', 'Bally', 'Bardhaman', 'La Martiniere Calcutta', 'Egra', 'Chanchal', 'Garbeta', 'Titagarh', 'Champdani', 'Chapui', 'Dhakuria', 'Baharampur', 'Haldia', 'Jagacha', 'Haringhata', 'Indpur (community development block)', 'Barjora', 'Kanchrapara', 'Ballavpur', 'New Cooch Behar railway station', 'Vidyasagar College', 'Arambag', 'Patulia', 'Dignala', 'Ramakrishna Mission Vivekananda Centenary College', 'Podara', 'Manbazar I (community development block)', 'Krishnapur', 'Sonatikiri', 'Chhora', 'Murshidabad district', 'Mirik', 'Raghudebbati', 'Nakashipara (community development block)', 'Goaljan', 'Bhanowara', 'Bilandapur', 'Durgachak', 'Rajiv Gandhi School of Intellectual Property Law', 'Cossipore', 'Bidhan Chandra College', 'Char Maijdia', 'Alipurduar Railway Junction', 'Janbazar', 'Kharsarai', 'Ghorsala', 'Cossimbazar', 'Dhupguri', 'Paniara', 'North Barrackpur', 'Baruipur', 'Ratua I (community development block)', 'Petrapole', 'Raghunathpur', 'Bansberia', 'Dhulian', 'Garhbeta College', 'Hijuli', 'Jot Kamal', 'Nadanghat', 'Jaigaon', 'Naupala', 'Kharar', 'Bandwan (community development block)', 'RCC Institute of Information Technology', 'Konardihi', 'Bakreshwar', 'Mandarbani', 'Bandel', 'Gazole (community development block)', 'Mecheda', 'Kakdihi', 'Bablari Dewanganj', 'Rangeet River', 'University of Calcutta', 'Jamalpur', 'Balarampur, Purulia', 'Harinavi', 'Tufanganj', 'Posta, Burrabazar', 'Rishra', 'Keshiari', 'Narendrapur', 'Chandpur', 'Jaynagar Mazilpur', 'Uluberia', 'Sainthia', 'Rajabhatkhawa', 'Mandarmani', 'Noapara, India', 'Garalgachha', 'Sitarampur', 'Gopalpur, Nadia', 'Midnapore College', 'Goalpokhar I (community development block)', 'Chhatna (community development block)', 'Hooghly district', 'Guriahati', 'Ratibati', 'Mongalkote (community development block)', 'Mansinhapur', 'Nalhati', 'Galsi', 'Vidyasagar University', 'Sandeshkhali I (community development block)', 'Bagbazar', 'Duttapukur', 'Chandrakona', 'Jamuria', 'Dharmapur, West Bengal', 'Malbazar', 'Barakar', 'Aiho', 'Uttar Durgapur', 'Barakar River', 'Mundeswari River', 'Madhyamgram', 'Joypur, Purulia', 'Kidderpore', 'Sukhiapokhri', 'Gaighata (community development block)', 'Uttar Bagdogra', 'Rathtala', 'Shyambazar', 'Arra, India', "St. Joseph's College", 'Balurghat College', 'Kasim Bazar', 'Bardhaman district', 'Paschim Medinipur district', 'Dharla River', 'Cities and towns in West Bengal', 'Tehatta', 'College of Engineering and Management, Kolaghat', 'Harharia Chak', 'Balurghat', 'Debipur, India', 'Kultali', 'Sanskrit College', 'Baruihuda', 'Gobardanga', 'Memari', 'Belebathan', "St. Xavier's College, Calcutta", 'Uttar Kalas', 'Sahajadpur', 'West Bengal University of Animal and Fishery Sciences', 'West Bengal State University', 'Kulpi', 'Bholar Dabri', 'Bhatpara', 'Deganga', 'Ruiya', 'Tarakeswar', 'Radhanagore', 'Par Beliya', 'Ausgram I (community development block)', 'Khodarampur', 'Kaliaganj', 'Chelad', 'National Institute of Technology, Durgapur', 'Chakdaha', 'Beldubi', 'Ghum, West Bengal', 'Badkulla', 'Gangarampur', 'Mohanpur', 'Murshidabad', 'Old Maldah', 'Teesta River', 'Khandaghosh (community development block)', 'Gondalpara', 'Mogra', 'Birpara', 'Chapra, Nadia', 'Patuli', 'Shankhanagar', 'Birati', 'Institute of Engineering and Management', 'Uttar Latabari', 'Srikantabati', 'Bipra Noapara', 'Kolaghat', 'Ghurni', 'Kharagpur', 'Pandabeswar (community development block)', 'Mayapur', 'Bakkhali', 'Bhangar Raghunathpur', 'Palashi', 'Lake Town, Kolkata', 'Shibpur', 'Harishchandrapur I (community development block)', 'Mohammad Bazar (community development block)', 'Singla', 'Birbhum district', 'Darjeeling', 'Brahmananda Keshab Chandra College', 'Chak Bansberia', 'Dakshin Dinajpur district', 'Jiaganj Azimganj', 'Melli', 'Asutosh College, Calcutta', 'Monoharpur', 'Ahmedpur, Birbhum', 'Uttar Goara', 'Sodepur', 'Kanksa', 'Bankura Sammilani Medical College', 'Jadavpur', 'Khadimpur', 'Aranghata', 'Dhatrigram', 'Begampur, India', 'Bowbazar', 'Farakka Barrage Township', 'Eksara', "St. Joseph's College, Calcutta", 'R. G. Kar Medical College and Hospital', 'Kulti', "Cooper's Camp", 'Durganagar', 'Charka', 'MCKV Institute of Engineering', 'Kulihanda', 'Ramakrishna Mission Residential College', 'Baranagar', 'Batanagar', 'Acharya Prafulla Chandra College', 'Kalara', 'Uttar Kamakhyaguri', 'Parbbatipur', 'Jorasanko', 'Bankura', 'Hugli-Chuchura', 'Ajay River', 'Chechakhata', 'Kamarhati', 'Suri, Birbhum', 'Uttarpara', 'Nabgram', 'Dum Dum', 'Pangachhiya', 'Dhusaripara', 'Hatsimla', 'Dalurband', 'Tentulkuli', 'Kharba', 'Shyamnagar', 'Goasafat', 'Ramakrishna Mission Vivekananda University, Narendrapur', 'Kumortuli', 'Jorabagan', 'Khirpai', 'Ramjibanpur', 'Suri Vidyasagar College, main campus', 'Ramakrishna Mission Vidyalaya, Narendrapur', 'Makardaha', 'University of Kalyani', 'Islampur, Uttar Dinajpur', 'Jorai', 'Singur', 'Raigachhi', 'Phansidewa (community development block)', 'Konnagar', 'Guskara', 'Ramakrishna Mission Vidyamandira', 'Dhanyakuria', 'Haldibari, India', 'Bairatisal', 'Purulia', 'Senate of Serampore College', 'New Barrackpur', 'Jetia', 'Ichapore', 'Esplanade, Kolkata', 'Salboni', 'Entally', 'Gabberia', 'Dantan I', 'Kasba, Uttar Dinajpur', 'Barasat Government College', 'Jahangirpur, West Bengal', 'Rampurhat', 'Durgapur Government College', 'Kesabpur, India', 'Purbasthali', 'Purulia district', 'Gairkata', 'Panchla', 'Kolkata', 'Barijhati', 'Champapukur', 'Taki Government College', 'Khardaha', 'Serpur', 'Durgapur', 'Amtala', 'Amkula', 'Talbandha', 'Nadia district', 'Haripur', 'Bolpur', 'Lalgola', 'Kanaipur', 'Beliatore', 'Badhagachhi', 'Midnapore', 'Raiganj', 'Bhadreswar, Hooghly', 'Amdanga (community development block)', 'Dinhata', 'Antpur', 'Kantlia', 'Happy Valley Tea Estate', 'Mahira', 'Visva-Bharati University', 'Buxa Tiger Reserve', 'Sarpi', 'Bhangri Pratham Khanda', 'New Jalpaiguri railway station', 'Cooch Behar College', 'Calcutta National Medical College', 'Namkhana (community development block)', 'Itahar (community development block)', 'Mekhliganj', 'Serampore College', 'Siliguri', 'Chak Kashipur', 'Labhpur', 'Darappur', 'Darjeeling district', 'Jhalda', 'Kankuria', 'Neamatpur', 'Krishnanagar, Nadia', 'Sirsha, India', 'Digha', 'Kosai River', 'Ilambazar', 'Bahiri', 'Diamond Harbour', 'Paschim Jitpur', 'Cooch Behar', 'Goyerkata', 'Mukutmanipur', 'Nasra', 'Ranaghat', 'Dr. B.C. Roy Engineering College, Durgapur', 'Burdwan Medical College', 'Sankrail', 'Susunia', 'Sarenga', 'Raina', 'Taki', 'Pairagachha', 'Bamunari', 'Partition of Midnapore', 'Bowali', 'Algarah', 'Panchpara', 'Nicco park', 'Dihika', 'Indian Institute of Technology Kharagpur, main campus', 'Natibpur', 'Santaldih', 'Canning, South 24 Parganas', 'Beldanga', 'Payradanga', 'Habra', 'Halisahar', 'Aistala', 'Jagtaj', 'Chak Enayetnagar', 'Damodar River', 'Arsha (community development block)', 'University of Gour Banga', 'Jafarpur', 'Nabagram Colony', 'Pedong', 'Baska', 'Raghunathchak', 'Dafahat', 'Char Brahmanagar', 'Hasnabad (community development block)', 'Banshra', 'Satigachha', 'Kharimala Khagrabari', 'Nayagram', 'Chata Kalikapur', 'Balaram Pota', 'Aliah University', 'Andul', 'Dubrajpur', 'Jagatdal', 'Midnapore district', 'Burrabazar', 'North 24 Parganas district', 'Jalpaiguri district', 'Contai', 'Madhusudanpur', 'Kachu Pukur', 'Bagdogra Airport', 'Bankura district', 'Sajnakhali Wildlife Sanctuary', 'Nachhratpur Katabari', 'Hooghly River', 'Purba Tajpur', 'Cooch Behar district', 'National Institute for the Orthopaedically Handicapped, main campus', 'Khagrabari', 'Pathuriaghata', 'Falakata', 'Kadamtala', 'Nabadwip', 'Kendua, West Bengal', 'Mathabhanga', 'Bikihakola', 'Nabagram, India', 'Gayespur', 'Mayurakshi River', 'Nil Ratan Sarkar Medical College and Hospital', 'Nanoor', 'Sonamukhi', 'Siduli', 'Khatra', 'Gaur', 'Indian Association for the Cultivation of Science', 'Faridpur', 'Bagnan', 'Karandighi (community development block)', 'Karimpur', 'Muragachha', 'Kalyani', 'Maldah district', 'Kamarpukur', 'Naihati', 'Baduria', 'Ukhra', 'Indian Institute of Management Calcutta', 'Jhargram', 'Ankurhati', 'Salap', 'Loleygaon', 'Lava, West Bengal', 'Kalna, India', 'Fatellapur', 'Budge Budge', '24 Parganas', 'Gopiballavpur', 'Manbhum', 'Kshidirpur', 'Kendra Khottamdi', 'Baneswar', 'Murgathaul', 'Bahula', 'Kunustara', 'Sukdal', 'Pandua, Malda', 'Chapari', 'Purba Medinipur district', 'Sobhaganj', 'Shobhabazar', 'Howrah district', 'Bankra', 'Ramnagar', 'Chamrail', 'Jagadishpur', 'Garden Reach (Vidhan Sabha constituency)', 'Andal (community development block)', 'Gopinathpur, West Bengal', 'Barabani (community development block)', 'Uttar Raypur', 'Burnpur', 'Dharmatala', 'Rupnarainpur', 'The University of Burdwan', 'Jhorhat', 'Chachanda', 'Howrah', 'Hetampur', 'Alipurduar', 'Basirhat', 'Keshiary', 'Harishpur', 'Dakshin Jhapardaha', 'Sutahata (community development block)', 'Sankarpur, Bardhaman', 'Chakapara', 'Bijpur, North 24 Parganas', 'Kajora', 'North Dumdum', 'Guptipara', 'Hasimara', 'Santiniketan', 'Paschim Punropara', 'Bidhan Nagar', 'Sahapur', 'Kodalia', 'Nalpur', 'Tamluk', 'Pandua', 'Chitpur', 'Phulia', 'Rajarhat', 'Nungi', 'Panihati', 'Dainhat', 'English Bazar', 'Katwa', 'Amodghata', 'Gora Bazar', 'Nandigram', 'Jamuna River', 'Bhatar (community development block)', 'South Dumdum', 'Bud Bud', 'Jagadanandapur', 'Raniganj', 'Bara Bamonia', 'Barabazar', 'Mayureswar II', 'West Bengal National University of Juridical Sciences', 'Cart Road', 'South 24 Parganas district', 'Kukrahati', 'Garshyamnagar', 'Binnaguri', 'Ashoknagar Kalyangarh', 'Khantora', 'Argari', 'Belda College', 'Mejia (community development block)', 'Balarampur', 'Daspur', 'Anup Nagar', 'Parashkol', 'Jala Kendua', 'Institute of Business Management, Jadavpur University', 'Rajnagar, Birbhum', 'Taherpur', 'Nokpul', 'Hindmotor', 'Khalor', 'Bangaon', 'Dewanhat', 'Dakshin Baguan', 'Gangajalghati (community development block)', 'Rajpur Sonarpur', 'Malda College', 'Lothian Island Wildlife Sanctuary', 'Teesta Bazaar', 'I.C.V. Polytechnic, Jhargram', 'Bishnupur, South 24 Parganas', 'Belur', 'Mainaguri', 'Maheshtala', 'Jalpaiguri', 'Uttar Mahammadpur', 'Mrigala', 'Indian Statistical Institute', 'Chak Bankola', 'Manteswar (community development block)', 'Banarhat', 'Tarapith', 'Durllabhganj', 'Hatgachha', 'Basanti, South 24 Parganas', 'Guma, India', 'Maslandapur', 'Baidyabati', 'Kurseong', 'Mahiari', 'Jemari', 'Deuli, India', 'Belda', 'Khandra', 'Madanpur, India', 'Ghatal', 'Dalkhola', 'Birlapur', 'Kandi', 'Dakshineswar', 'Hanskhali (community development block)', 'Gosaba', 'Pujali', 'Kharagpur Railway Settlement', 'Panuhat', 'Chopra (community development block)', 'Kalimpong', 'Kaugachhi', 'University of North Bengal', 'Asansol', 'Loreto College, Kolkata', 'Salanpur (community development block)', 'Prayagpur', 'Raichak', 'Dakshin Rajyadharpur', 'Bankura Unnayani Institute of Engineering', 'Santoshpur', 'Ichhapur Defence Estate', 'Bhandardaha', 'Balagarh (community development block)', 'Bagdah (community development block)', 'Khalia', 'Domjur', 'Churulia', 'Jaldhaka River', 'Bilpahari', 'Srirampur, India', 'Barasat', 'Manikpur, West Bengal', 'Kenda', 'Chittaranjan', 'Bishnupur', 'Chikrand', 'Bidhan Chandra Krishi Vishva Vidyalaya', 'Balichak', 'Dhandadihi', 'Barrackpur Cantonment', 'Adra, Purulia', 'Sagar Island', 'Jayrambati', 'Simla', 'Ajodhya Hills', 'Garulia', 'Murarai I', 'Bahirgram', 'Panskura', 'Kanyanagar', 'Nibra', 'Kirnahar', 'Dhuilya', 'Panagarh', 'Ramchandrapur, India', 'Alipore', 'Dankuni', 'Shantipur', 'Banupur', 'Medical College Kolkata', 'Baishnabghata Patuli Township', 'Hridaypur', 'Birnagar', 'Torsa River', 'Barrackpore', 'Uttar Pirpur', 'Chowringhee', 'Serampore', 'Palashban'}
            Answers = 653, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.040s]
          Answers = 653, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.040s]
        Checking schema 73 / 252: {
          [('Main', '==', 'm.086g2', ['location.location.geometry'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.location.geometry ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.location.geometry ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 74 / 252: {
          [('Main', '==', 'm.086g2', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 7
            Final Answer: {'2006 Kolkata leather factory fire', '2006 West Bengal train disaster', 'Naxalite–Maoist insurgency', 'Chhoto Angaria massacre', 'Battle of Giria', 'Silda camp attack', '2010 Eastern Indian storm'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 75 / 252: {
          [('Main', '==', 'm.086g2', ['location.in_state.judicial_capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.in_state.judicial_capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.in_state.judicial_capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'Kolkata'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 76 / 252: {
          [('Main', '==', 'm.086g2', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 2
            Final Answer: {'Dainik Jagran', 'Kalantar'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 77 / 252: {
          [('Main', '==', 'm.086g2', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 22
            Final Answer: {'Cooch Behar district', 'Uttar Dinajpur district', '24 Parganas', 'Kolkata district', 'Hooghly district', 'Darjeeling district', 'Purulia district', 'Paschim Medinipur district', 'Bardhaman district', 'Purba Medinipur district', 'Howrah district', 'Nadia district', 'Maldah district', 'Partition of Midnapore', 'Birbhum district', 'Midnapore district', 'North 24 Parganas district', 'Murshidabad district', 'Jalpaiguri district', 'South 24 Parganas district', 'Dakshin Dinajpur district', 'Bankura district'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 78 / 252: {
          [('Main', '==', 'm.086g2', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.086g2 fb:location.location.area ?o1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 WHERE { fb:m.086g2 fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'88752'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 79 / 252: {
          [('Main', '==', 'm.086g2', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 2
            Final Answer: {'East India', 'India'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 80 / 252: {
          [('Main', '==', 'm.086g2', ['location.in_state.administrative_capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.in_state.administrative_capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.086g2 fb:location.in_state.administrative_capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'Kolkata'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 81 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 198
            Final Answer: {'Andre Caldwell', 'Antwan Odom', 'Brandon Tate', 'Donald Lee', 'Shayne Graham', 'Ryan Whalen', 'Devon Still', 'Dre Kirkpatrick', 'J.K. Schaffer', 'Kelly Jennings', 'Andrew Whitworth', 'Margus Hunt', 'Jordan Palmer', 'Brian Pillman', 'Cedric Benson', 'Scott Mitchell', 'Matt Jones', "J. T. O'Sullivan", 'Jeff Faine', 'Stacy Andrews', 'Peter Warrick', 'Thomas Howard', 'Carson Palmer', 'Mike Pollak', 'Brandon Joiner', 'Reggie McNeal', 'Edgerton Hartwell', 'Chris Crocker', 'Tank Johnson', 'Boomer Esiason', 'Milt Stegall', 'Tom Nelson', 'Bo Scaife', 'Gus Frerotte', 'Taveon Rogers', 'Akili Smith', 'Dan Skuta', 'Jermaine Gresham', 'Daniel Coats', 'Otis Hudson', 'DeDe Dorsey', 'Ryan Fitzpatrick', 'Armon Binns', 'Gibril Wilson', 'Dan Knapp', 'Domata Peko', 'Takeo Spikes', 'George Iloka', 'Fui Vakapuna', 'David Jones', 'J. P. Foschi', 'Ickey Woods', 'Morgan Trent', 'Sirr Parker', 'Carlos Dunlap', 'Kevin Zeitler', 'Brandon Johnson', 'Bernard Scott', 'Jeff Blake', 'Cobi Hamilton', 'Josh Brown', 'Ben Bennett', 'Clinton McDonald', 'Archie Griffin', 'Colin Cochart', 'Jason Shirley', 'Lavasier Tuinei', 'Justin Hilton', 'Madieu Williams', 'Nate Livings', 'Marvin Jones', 'Andre Smith', 'Jordan Shipley', 'Vontaze Burfict', 'Darius Hill', 'Mike McGlynn', 'Clint Boling', 'Alex Smith', 'Jonathan Luigs', 'Anthony Muñoz', 'Freddie Brown', 'Laveranues Coles', 'Kelley Washington', 'Dan Herron', 'Jamaal Anderson', 'Mike Nugent', 'Kevin Huber', 'Giovani Bernard', 'Zac Robinson', 'Dane Sanzenbacher', 'Rex Burkhead', 'Dan LeFevour', 'Ken Anderson', 'Nate Clements', 'Larry Johnson', 'Kyries Hebert', 'Jeromy Miles', 'Brad St. Louis', 'Richard Quinn', 'Corey Dillon', 'Manny Lawson', 'Dale Livingston', 'BenJarvus Green-Ellis', 'Clark Harris', 'T. J. Houshmandzadeh', 'Reggie Nelson', 'Chinedum Ndukwe', 'Reid Fragel', 'Terrell Owens', 'Bruce Gradkowski', 'Jacob Bell', 'Pat Sims', 'Eric Steinbach', 'Michael Johnson', 'Anthony Collins', 'Chad Ochocinco', 'Terence Newman', 'Bryce Davis', 'Brandon Thompson', 'Roddrick Muckelroy', 'Emmanuel Lamur', 'A. J. Green', 'Chris Pressley', 'Victor Hobson', 'John Skelton', 'Robert Geathers', 'John Conner', 'Dennis Roland', 'Abdul Hodge', 'Pete Koch', 'Chase Coffman', 'Evan Mathis', 'Jason Allen', 'Wallace Gilberry', 'Vaughn Meatoga', 'Dhani Jones', 'Jason Tucker', 'Robert Sands', 'Vincent Rey', 'Orson Charles', 'Cedric Peerman', 'Taylor Mays', 'Chris Lewis-Harris', 'Corey Lynch', 'Nate Webster', 'Geoff Pope', 'Rey Maualuga', 'Travelle Wharton', 'Tommie Smith', 'Jerome Simpson', 'Skyler Green', 'Keith Rivers', 'Leon Hall', 'Frostee Rucker', 'Quan Cosby', 'Rashad Jeanty', 'Andrew Hawkins', 'Terrence Stephens', 'Jonathan Fanene', 'Adam Jones', 'Quinn Sharp', 'Geno Atkins', 'Nick Hayden', 'James Harrison', 'Jesse Holley', 'Trevor Robinson', 'David Pollack', 'Jourdan Brooks', 'Thomas Weber', 'Rico Murray', 'Mohamed Sanu', 'Ben Utecht', 'Jeremi Johnson', 'Dontay Moch', 'Aaron Maybin', 'Shaun Prater', 'Chris Henry', 'Brian Leonard', 'Brandon Ghee', 'Josh Johnson', 'Onterio McCalebb', 'Scott Kooistra', 'Johnathan Joseph', 'Kyle Cook', 'Andy Dalton', 'Lorenzo Neal', 'Roy Williams', 'Jordan Campbell', 'Bobbie Williams', 'Cris Collinsworth', 'John Copeland', 'Tony Dye', 'Michael Westbrook', 'Tanner Hawkinson', 'Sean Porter', 'Shaun Smith', 'T. J. Johnson', 'DeQuin Evans'}
            Answers = 198, P = 0.005051, R = 1.000000, F1 = 0.010050
          } [0.028s]
          Answers = 198, P = 0.005051, R = 1.000000, F1 = 0.010050
        } [0.028s]
        Checking schema 82 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 83 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 33
            Final Answer: {'2007', '2002', '1987', '1981', '2011', '1992', '2013', '2006', '2001', '1994', '1976', '2009', '1999', '1984', '1988', '2000', '1997', '2003', '1968', '1969', '1998', '2005', '1980', '2012', '1971', '2004', '2010', '2008'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 84 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.projection', 'user.szaijan.fantasy_football.projection.ff_points'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.ff_points ?o2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.ff_points ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'95'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 85 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.projection', 'user.szaijan.fantasy_football.projection.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.season ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 86 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 87 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_coaching_staff', 'american_football.football_historical_coach_position.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.to ?o2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 88 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_coaching_staff', 'american_football.football_historical_coach_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 89 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.season_record', 'sports.sports_team_season_record.losses'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.losses ?o2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.losses ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 13
            Final Answer: {'13', '7', '8', '2', '5', '3', '11', '9', '6', '4', '14', '12', '10'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 90 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.season_record', 'sports.sports_team_season_record.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.season ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 41
            Final Answer: {'1989 NFL season', '1981 NFL season', '2002 NFL season', '1976 NFL season', '1985 NFL season', '1984 NFL season', '1998 NFL season', '1999 NFL season', '2006 NFL season', '1996 NFL season', '2000 NFL season', '1993 NFL season', '1990 NFL season', '1977 NFL season', '1992 NFL season', '1983 NFL season', '1973 NFL season', '2008 NFL season', '1970 NFL season', '1972 NFL season', '1978 NFL season', '1986 NFL season', '1994 NFL season', '1968 NFL season', '1979 NFL season', '1982 NFL season', '2001 NFL season', '2005 NFL season', '1995 NFL season', '2004 NFL season', '1997 NFL season', '2003 NFL season', '1971 NFL season', '1980 NFL season', '1975 NFL season', '1988 NFL season', '2007 NFL season', '1991 NFL season', '1987 NFL season', '1969 NFL season', '1974 NFL season'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 91 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.season_record', 'sports.sports_team_season_record.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 92 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 28
            Final Answer: {'2007', '2002', '1987', '1972', '2011', '1992', '2013', '2006', '2001', '1994', '2009', '1999', '1988', '2003', '1969', '1982', '2005', '2012', '1986', '1991', '2010', '2008'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 93 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 94 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.projection', 'user.szaijan.fantasy_football.projection.scoring'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.scoring ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.scoring ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'PPR, 6 pt Pass TD, -2 INT, Standard Performance'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 95 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.projection', 'user.szaijan.fantasy_football.projection.adp'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.adp ?o2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.adp ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 4
            Final Answer: {'0', '1615', '161.55', '161'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 96 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 8
            Final Answer: {'David Pollack', 'Cris Collinsworth', 'Stacy Andrews', 'Johnathan Joseph', 'Chris Perry', 'Keith Rivers', 'Carson Palmer', 'Leon Hall'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 97 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.school'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.school ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.school ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 5
            Final Answer: {'University of Southern California', 'University of South Carolina', 'University of Mississippi', 'University of Michigan', 'University of Florida'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 98 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_coaching_staff', 'american_football.football_historical_coach_position.coach'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.coach ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.coach ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Hue Jackson'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 99 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_coaching_staff', 'american_football.football_historical_coach_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 2
            Final Answer: {'Running backs coach', 'Defensive Backs Coach'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Current: 100 / 252
        Checking schema 100 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.season_record', 'sports.sports_team_season_record.ties'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.ties ?o2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.ties ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 2
            Final Answer: {'0', '1'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 101 / 252: {
          [('Main', '==', 'm.01y49', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 102 / 252: {
          [('Main', '==', 'm.01y49', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 103 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.league', 'sports.sports_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 104 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 19
            Final Answer: {'Linebacker', 'Dimeback', 'Cornerback', 'Running back', 'Tackle', 'Quarterback', 'Defensive tackle', 'Placekicker', 'Fullback', 'Tight end', 'Center', 'Punter', 'Safety', 'Defensive lineman', 'Defensive end', 'Wide receiver', 'Long snapper', 'Right Inside Linebacker', 'Guard'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 105 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.projection', 'user.szaijan.fantasy_football.projection.x_factor'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.x_factor ?o2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.x_factor ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 1
            Final Answer: {'95'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 106 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.pick_overall'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.pick_overall ?o2 . }
          [2020-12-03 14:20:36] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.pick_overall ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 7
            Final Answer: {'37', '1', '9', '18', '26', '17', '24'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 107 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.draft'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.draft ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.draft ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 7
            Final Answer: {'2006 NFL Draft', '1981 NFL Draft', '2008 NFL Draft', '2007 NFL Draft', '2003 NFL Draft', '2005 NFL Draft', '2004 NFL Draft'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 108 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_coaching_staff', 'american_football.football_historical_coach_position.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.from ?o2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 2
            Final Answer: {'2013', '2012'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 109 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.season_record', 'sports.sports_team_season_record.wins'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.wins ?o2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.wins ?o2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 11
            Final Answer: {'7', '8', '2', '5', '3', '11', '9', '4', '6', '12', '10'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 110 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.league', 'sports.sports_league_participation.league'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49'}
            Query return lines = 5
            Final Answer: {'AFC West', 'AFC North', 'American Football League', 'National Football League', 'American Football Conference'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 111 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.06b1q', ['sports.pro_athlete.teams', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 8
            Final Answer: {'Bruce Gradkowski', 'Scott Mitchell', "J. T. O'Sullivan", 'Dan LeFevour', 'Ken Anderson', 'Boomer Esiason', 'Jordan Palmer', 'Carson Palmer'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 112 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.06b1q', ['sports.pro_athlete.teams', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 13
            Final Answer: {'Zac Robinson', 'Josh Johnson', 'Bruce Gradkowski', 'Scott Mitchell', "J. T. O'Sullivan", 'Dan LeFevour', 'Ryan Fitzpatrick', 'Ken Anderson', 'John Skelton', 'Boomer Esiason', 'Jordan Palmer', 'Andy Dalton', 'Carson Palmer'}
            Answers = 13, P = 0.076923, R = 1.000000, F1 = 0.142857
          } [0.016s]
          Answers = 13, P = 0.076923, R = 1.000000, F1 = 0.142857
        } [0.016s]
        Checking schema 113 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.number', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 114 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.number', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 115 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.from', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 8
            Final Answer: {'2000', '1971', '1997', '2009', '2010', '2003', '2008', '2011'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 116 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.from', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 10
            Final Answer: {'2013', '2007', '2000', '1971', '1997', '2009', '2010', '2003', '2008', '2011'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 117 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.to']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.to', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 7
            Final Answer: {'2012', '2001', '2009', '2010', '1986', '2011'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 118 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.to']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.to', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 8
            Final Answer: {'2012', '2001', '2009', '2010', '1986', '2008', '2011'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 119 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.06b1q', ['sports.sports_team.roster', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 120 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.06b1q', ['sports.sports_team.roster', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 121 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.06b1q', ['sports.sports_position.players', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 122 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 123 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.06b1q', ['sports.pro_athlete.teams', 'american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 3
            Final Answer: {'Zac Robinson', 'Andy Dalton', 'Josh Johnson'}
            Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
          } [0.005s]
          Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
        } [0.005s]
        Checking schema 124 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.number', 'american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 125 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.from', 'american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'2013'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 126 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.06b1q', ['sports.sports_team.roster', 'american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 127 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.06b1q', ['sports.sports_position.players', 'american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 128 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.06b1q', ['american_football.football_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:american_football.football_player.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:american_football.football_player.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 18
            Final Answer: {'Ben Bennett', 'Zac Robinson', 'Josh Johnson', 'Akili Smith', 'Bruce Gradkowski', 'Matt Jones', 'Reggie McNeal', "J. T. O'Sullivan", 'Dan LeFevour', 'Ryan Fitzpatrick', 'Andy Dalton', 'John Skelton', 'Ken Anderson', 'Boomer Esiason', 'Jeff Blake', 'Jordan Palmer', 'Gus Frerotte', 'Carson Palmer'}
            Answers = 18, P = 0.055556, R = 1.000000, F1 = 0.105263
          } [0.009s]
          Answers = 18, P = 0.055556, R = 1.000000, F1 = 0.105263
        } [0.009s]
        Checking schema 129 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.06b1q', ['user.szaijan.fantasy_football.player.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 2
            Final Answer: {'Gus Frerotte', 'Carson Palmer'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 130 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.player']), ('Entity', '==', 'm.06b1q', ['american_football.football_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:american_football.football_player.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:american_football.football_player.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Carson Palmer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 131 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.player']), ('Entity', '==', 'm.06b1q', ['user.szaijan.fantasy_football.player.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Carson Palmer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 132 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 198, P = 0.005051, R = 1.000000, F1 = 0.010050
        } [0.000s]
        Checking schema 133 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 134 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 135 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.projection', 'user.szaijan.fantasy_football.projection.ff_points'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.ff_points ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 136 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.projection', 'user.szaijan.fantasy_football.projection.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 137 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 138 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_coaching_staff', 'american_football.football_historical_coach_position.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.to ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 139 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_coaching_staff', 'american_football.football_historical_coach_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 140 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.season_record', 'sports.sports_team_season_record.losses'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.losses ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 141 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.season_record', 'sports.sports_team_season_record.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 142 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.season_record', 'sports.sports_team_season_record.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 143 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 144 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 145 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.projection', 'user.szaijan.fantasy_football.projection.scoring'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.scoring ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 146 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.projection', 'user.szaijan.fantasy_football.projection.adp'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.adp ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 147 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 148 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.school'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.school ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 149 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_coaching_staff', 'american_football.football_historical_coach_position.coach'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.coach ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 150 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_coaching_staff', 'american_football.football_historical_coach_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 151 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.season_record', 'sports.sports_team_season_record.ties'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.ties ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 152 / 252: {
          [('Main', '==', 'm.01y49', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 153 / 252: {
          [('Main', '==', 'm.01y49', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 154 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.league', 'sports.sports_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 155 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 156 / 252: {
          [('Main', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.projection', 'user.szaijan.fantasy_football.projection.x_factor'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:user.szaijan.fantasy_football.player.projection ?o1 . ?o1 fb:user.szaijan.fantasy_football.projection.x_factor ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 157 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.pick_overall'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.pick_overall ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 158 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.draft'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.draft ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 159 / 252: {
          [('Main', '==', 'm.01y49', ['american_football.football_team.historical_coaching_staff', 'american_football.football_historical_coach_position.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:american_football.football_team.historical_coaching_staff ?o1 . ?o1 fb:american_football.football_historical_coach_position.from ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 160 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.season_record', 'sports.sports_team_season_record.wins'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.season_record ?o1 . ?o1 fb:sports.sports_team_season_record.wins ?o2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 161 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.league', 'sports.sports_league_participation.league'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 162 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.06b1q', ['sports.pro_athlete.teams', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 163 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.06b1q', ['sports.pro_athlete.teams', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 13, P = 0.076923, R = 1.000000, F1 = 0.142857
        } [0.000s]
        Checking schema 164 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.number', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 165 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.number', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 166 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.from', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 167 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.from', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 168 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.to']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.to', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 169 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.to']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.to', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 170 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.06b1q', ['sports.sports_team.roster', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 171 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.06b1q', ['sports.sports_team.roster', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 172 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.06b1q', ['sports.sports_position.players', 'american_football.football_historical_roster_position.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 173 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:sports.sports_team_roster.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 174 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.06b1q', ['sports.pro_athlete.teams', 'american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
        } [0.000s]
        Checking schema 175 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.number', 'american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 176 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.06b1q', ['!sports.sports_team_roster.from', 'american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 177 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.06b1q', ['sports.sports_team.roster', 'american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 178 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.06b1q', ['sports.sports_position.players', 'american_football.football_roster_position.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_roster_position.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 179 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.06b1q', ['american_football.football_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:american_football.football_player.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 18, P = 0.055556, R = 1.000000, F1 = 0.105263
        } [0.000s]
        Checking schema 180 / 252: {
          [('Main', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.06b1q', ['user.szaijan.fantasy_football.player.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 181 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.player']), ('Entity', '==', 'm.06b1q', ['american_football.football_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:american_football.football_player.position_s fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 182 / 252: {
          [('Main', '==', 'm.01y49', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.player']), ('Entity', '==', 'm.06b1q', ['user.szaijan.fantasy_football.player.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01y49 fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.position fb:m.06b1q . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 183 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 492
            Final Answer: {'Zach Collaros', 'Evan Sharpley', 'Ryan Nassib', 'Jordan Wynn', 'Riley Skinner', 'Jason Campbell', 'Adam Weber', 'Bernie Kosar', 'Colt Brennan', 'David Gilbertson', 'James Summers', 'Peyton Manning', 'Dennis Erickson', 'Jack Kennedy', 'Clint Trickett', 'Max Arnold', 'Trent Edwards', 'Barrett Trotter', 'Max Heltzer', 'Matt Moore', 'Blake Mitchell', 'Jace Edwards', 'Jake Locker', 'Everett Golson', 'Aaron Rodgers', 'Kenny Mayne', 'Tyler Palko', 'Tom Brandstater', 'Brad Sorensen', 'Mike Teel', 'Chris Greisen', 'Andrew Luck', 'Trevone Boykin', 'Christian Ponder', 'Matt Simms', 'B. J. Coleman', 'Kirk Cousins', 'Robert Marve', 'Mark Sanchez', 'Andrew Nowels', 'David Garrard', 'Jesse Scroggins', 'Shane Cranmore', 'Troy Smith', 'Gary Kubiak', 'James Vandenberg', 'Brett Hundley', 'Dan LeFevour', 'Jerrard Randall', 'Kevin Kolb', 'Jacoby Brissett', 'Matt Schaub', 'Jeff Driskel', 'Drew Tate', 'Sonny Jurgensen', 'Brodie Croyle', 'Jay Cutler', 'Sam Bradford', 'Tyler Bray', 'Ryan Parrish', 'Josh McCown', 'Joe Paterno', 'John Dodson', 'Tyrod Taylor', 'Ken Stabler', 'Steve McNair', 'Erik Wilson', 'Colt McCoy', 'Denard Robinson', 'Matt Gutierrez', 'Tyler Wilson', 'Bobby Layne', 'Emon Saee', 'Jack Elway', 'Rhett Bomar', 'Derrick Brown', 'Michael Eubank', 'Joe Flacco', 'Chris Simms', 'Tino Sunseri', 'Cody Kessler', 'Nathan Peterman', 'Doug Flutie', 'Billy Volek', 'Richard Brehaut', 'Ben Fry', 'Devin Gardner', 'Brad Smith', 'Jared Lorenzen', 'Dan Fouts', 'Christian LeMay', 'Pat Devlin', 'Jordan Jefferson', 'Bobby Reid', 'Dalton Williams', 'Cam Newton', 'Troy Aikman', 'Dave Shinskie', 'Nate Davis', 'Steve Young', 'Nick Foles', 'Evan Ingram', 'Brendon Kay', 'Jacob Coker', 'Ty Detmer', 'Tommy Vento', 'Terry Bradshaw', 'Chris Redman', 'Russell Wilson', 'Derek Anderson', 'Terrel Hunt', 'Jordan Palmer', 'Anthony Gonzalez', 'Matthew Stafford', 'Cody Clements', 'Terrelle Pryor', 'David Carr', 'Mack Spees', 'Vince Dooley', 'Scott Mitchell', 'Johnny Unitas', 'Matt Jones', 'Rich Gannon', 'Joshua Nesbitt', 'Pat Haden', 'Zack Stoudt', 'Matt Cassel', 'Quincy Carter', 'Sage Rosenfels', 'Alex Tanney', 'Randall Mackey', 'Nick Hill', 'Brad Johnson', 'Jeff George', 'Ryan Leaf', 'Archie Manning', 'Ryan Fitzpatrick', 'Chandler Carr', 'Brion Carnes', 'Otto Graham', 'T. J. Yates', 'Chandler Harnish', 'Josh Portis', 'Mike Marscovetra', 'Lee Corso', 'Bob Timberlake', 'Steve Wilson', 'Mike Kafka', 'Jake Heaps', 'Robert Ratliff', 'John Kinder', 'Matt Flynn', 'Nick Stephens', 'Marshall Lobbestael', 'Matthew Mulvey', 'Chase Daniel', 'Sean Payton', 'Keith Price', 'Tony Horne', 'E. J. Manuel', 'Marc Bulger', 'Bryn Renner', 'Zac Robinson', 'Anthony Neyer', 'Chris Weinke', 'Daunte Culpepper', 'Roger Staubach', 'Case Keenum', 'Matt Brown', 'Darius Bell', 'Jim Sorgi', 'Seneca Wallace', 'Phil Simms', 'Dwight Clark', 'Barry Brunetti', 'Jeff Komlo', 'Jerry Neuheisel', 'Dominique Davis', 'Jimmy Clausen', 'Nick Crissman', 'Cooper Jones', 'Stephen Rivers', 'John Skelton', 'Major Applewhite', 'Sean Canfield', 'Jonathan Crompton', 'Jim Everett', 'Taylor Martinez', 'Tyler Murphy', 'Brian Castello', 'Trent Dilfer', 'Marty Cherry', 'Derrick Teegarden', 'Rick Settle', 'Matthew McGloin', 'Brock Osweiler', 'Tyler Thigpen', 'Nate Montana', 'Jim Tressel', 'Marcus Vick', 'Nick Sheridan', 'Chad Henne', 'Brian Griese', 'Nick Montana', 'Billy Cosh', 'Hutson Mason', 'Jon Kitna', 'Tony Romo', 'Mark Richt', 'Casey Pachall', 'Austin Davis', 'John Elway', 'Condredge Holloway', 'A. J. McCarron', 'Vince Young', 'Andrew McNulty', 'Rudy Carpenter', 'Jeff Garcia', 'Braxton Miller', 'Danny Wuerffel', 'Gino DeBartolo', 'Patrick Ramsey', 'Corey Edsall', 'Alex Carder', 'Zac Dysert', "Kevin O'Connell", 'Bob Guiney', 'Cody Jackson', 'Morgan Ogilvie', 'Will Secord', 'Graham Harrell', 'Brian Hoyer', 'D. J. Shockley', 'Eli Manning', 'G. J. Kinne', "J. T. O'Sullivan", 'Darrell Royal', 'Cummings, Mike', 'Tom Brady', 'Clint Chelf', 'Rusty Smith', 'Jared Foster', 'Brian Brohm', 'Mark Myers', 'Boomer Esiason', 'Michael Vick', 'Jordan Luallen', 'Tim Tebow', 'Brian St. Pierre', 'Seth Smith', 'Mike Bercovici', 'Rick Neuheisel', 'John Parker Wilson', 'Charlie Ward', 'Bart Starr', 'Steve Sarkisian', 'Blake Bell', 'Phillip Sims', 'Chris Chandler', 'Max Hall', 'J. P. Losman', 'Kiehl Frazier', 'Ricky Stanzi', 'Jon Gruden', 'Anthony Ridder', 'Alex Smith', 'Byron Leftwich', 'Jarrett Lee', 'Josh Freeman', 'Patrick Coyne', 'Jesse Palmer', 'Peter Badovinac', 'Travis Lulay', 'Tommie Frazier', 'Chris Palmer', 'Chad Pennington', 'Joe Namath', 'Robert Griffin III', 'Tarvaris Jackson', 'Hue Jackson', 'Anquan Boldin', 'A. J. Feeley', 'Kellen Moore', 'Brett Ratliff', 'Connor Cook', 'Aaron Corp', 'Bruce Gradkowski', 'Brian Sipe', 'Justin Worley', 'Fran Tarkenton', 'Jevan Snead', 'B. J. Daniels', 'Drew Henson', 'Richard Bartel', 'Rex Grossman', 'Ryan Mallett', 'Jeremiah Masoli', 'Sean Salisbury', 'Justin Siems', 'Ben Roethlisberger', 'Anthony Calvillo', 'Brandon Weeden', 'Michael Tamburo', 'Charlie Whitehurst', 'Tyson Broekemeier', 'Kirk Herbstreit', 'Buck Pierce', 'Aaron Garcia', 'Drew Bledsoe', 'Logan Paul', 'Andrew Hendrix', 'Chris Leak', 'Ethan Gilbert', 'Randall Cunningham', 'Parker Hite', 'Steven Threet', 'Tim Jenkins', 'Matt Scott', 'Taylor Kelly', 'Matt Barkley', 'Ryan McGriff', 'Jordan Rodgers', 'Jerrod Johnson', 'Aaron Murray', 'Jack Kemp', 'Jason White', 'Greg Bingham', 'Trey Anderson', 'Donovan McNabb', 'Jablonski, Blake', 'Andy Dalton', 'Daryll Clark', 'John Lynch', 'Cris Collinsworth', 'Tim Hasselbeck', 'Scott Tolzien', 'Stephen McGee', 'Houston Nutt', 'Sonny Sixkiller', 'Connor Halliday', 'Zach Mettenberger', 'Matt Ryan', 'Carl Sanders', 'Caleb Pressley', 'Jim McMahon', 'Angel Santiago', 'Phillip Ely', 'Philip Nelson', 'Jake Delhomme', 'Dan Orlovsky', 'Ridge Read', 'Danny Lewis', 'Mike Holmgren', 'Joe Webb', 'Brent Osborn', 'Ryan Lindley', 'Warren Moon', 'Carson Palmer', 'Maxwell Schuh', 'Blaine Gabbert', 'Randall Cobb', 'Matt Blanchard', 'Kyle Orton', 'Charlie Batch', 'Todd Marinovich', 'Bobby Bowden', 'Kellen Clemens', 'Ken Guiton', 'Geno Smith', 'John Beck', 'Parker Welch', 'Eric Crouch', 'Alan Autry', 'Jim Donnan', 'Christoph Bono', 'Dayne Crist', 'Max Wittek', 'Tommy Rees', 'Mark Harmon', 'Kyle Newhall-Caballero', 'Gibran Hamdan', 'Clint Moseley', 'Damon Allen', 'Drew Allen', 'JaMarcus Russell', 'Caleb Hanie', 'Kordell Stewart', 'Ben Bennett', 'Justin Thorpe', 'Ron Kellogg III', 'John David Booty', 'Cade McNown', 'Kanler Coker', 'Mike Hermann', 'Kiel Gunner', 'Erik Ainge', 'Trent Steelman', 'Christian Suntrup', 'Jeff Tuel', 'Steve Davis', 'Christian Provancha', 'Jim Kelly', 'Jake Plummer', 'Jonny Miller', 'Joey Harrington', 'Keith Null', 'Charley Loeb', 'John Manoogian', 'Curtis Painter', 'Art Schlichter', 'Alex Swieca', 'Russell Bellomy', 'Julian Edelman', 'Darian Durant', 'Craig Krenzel', 'Ken Anderson', 'Nathaniel Forer', 'Jeff Hostetler', 'Ryan Howard', 'Andrew Maxwell', 'Philip Rivers', 'Marquise Williams', 'Wirth Campbell', 'Nick West', 'Harry Agganis', 'Ryker Fyfe', 'Matt Leinart', 'Todd Collins', 'Isiah Williams', 'Ryan Perrilloux', 'Doug Williams', 'Ryan Tannehill', 'Chase Rettig', 'Munchie Legaux', 'Tyler Page', 'Mark Brunell', 'Kevin Prince', 'Shaun Hill', 'Kurt Warner', 'Turner Gill', 'Erik Watts', 'Dennis Dixon', 'Luke McCown', 'Braden Hanson', 'Jay Gruden', 'Caleb TerBush', 'Landry Jones', 'Nathan Enderle', 'Jim Plunkett', 'Josh Bordner', 'Heath Shuler', 'John Brantley', 'Colin Kaepernick', 'Chester Stewart', 'Thaddeus Lewis', 'Charlie Frye', 'David Cone', 'Drew Brees', 'Jacory Harris', 'Taylor Potts', 'Ben Sherrard', 'Thomas Vincent', 'Drew Stanton', 'Jesse Brown', 'McLeod Bethel-Thompson', 'Brady Quinn', 'Brett Favre', 'Greg McElroy', 'Kerry Collins', 'Josh Johnson', 'Ryan Griffin', 'Pat White', 'Andre Ware', 'Wil Smith', 'Dan Marino', 'Steve Spurrier', 'Stone Phillips', 'Don Meredith', 'Mike Gundy', 'Derek Thompson', 'Mitch Mustain', 'Kyle Boller', 'James Harris', 'Josh Cribbs', 'Joe Montana', 'Vinny Testaverde', 'Matt Hasselbeck', 'Chris Miller', 'Colby Cameron', 'June Jones', 'Jarrett Brown'}
            Answers = 491, P = 0.002037, R = 1.000000, F1 = 0.004065
          } [0.020s]
          Answers = 491, P = 0.002037, R = 1.000000, F1 = 0.004065
        } [0.020s]
        Checking schema 184 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 185 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 101
            Final Answer: {'1956', '2007', '1963', '2002', '1985', '1987', '1966', '2010', '1972', '1948', '1965', '1981', '2011', '1992', '1957', '2006', '2001', '1996', '1994', '1976', '2009', '1999', '1951', '1964', '1984', '1946', '1983', '1988', '1962', '1944', '1970', '2000', '1949', '1997', '1974', '1954', '1975', '1989', '2003', '1995', '1967', '1968', '1969', '1982', '1998', '2005', '1960', '1953', '1980', '1961', '2012', '1986', '1973', '1990', '1979', '1971', '1978', '1991', '1958', '2004', '1993', '1977', '2013', '2008'}
            Answers = 64, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 64, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 186 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 91
            Final Answer: {'1956', '2007', '1963', '2002', '1985', '1952', '1987', '1966', '2010', '1972', '1981', '2011', '1992', '1957', '2006', '2001', '1996', '1947', '1994', '1976', '2009', '1999', '1964', '1984', '1983', '1988', '2000', '1949', '1997', '1974', '1975', '2003', '1989', '1968', '1995', '1967', '1969', '1982', '1998', '2005', '1960', '1953', '1955', '1980', '1973', '2012', '1986', '1979', '1990', '1971', '1978', '1991', '2004', '1993', '1977', '2013', '2008'}
            Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 187 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 169
            Final Answer: {'Jacksonville Sharks', 'Illinois Fighting Illini football', 'Arkansas Razorbacks', 'Southern Connecticut State University', 'Arizona Rattlers', 'Clemson Tigers football', 'Jacksonville Jaguars', 'Bossier–Shreveport Battle Wings', 'Tennessee Volunteers football', 'Toledo Rockets football', 'TCU Horned Frogs football', 'Purdue Boilermakers football', 'Hawaii Warriors football', 'Las Vegas Locomotives', 'Northwestern Wildcats football', 'Ottawa Rough Riders', 'Utah Utes football', 'West Virginia Mountaineers football', 'Penn State Nittany Lions football', 'UTEP Miners football', 'Frankfurt Galaxy', 'SMU Mustangs football', 'Arizona State Sun Devils football', 'Yale Bulldogs football', 'Houston Texans', 'Baltimore Ravens', 'USC Trojans football', 'Georgia Force', 'Syracuse Orange football', 'Chicago Slaughter', 'Louisville Cardinals football', 'Alabama Crimson Tide Football', 'Washington Huskies football', 'Green Bay Packers', 'Tennessee Titans', 'Colorado State Rams football', 'Las Vegas Posse', 'Stanford Cardinal football', 'Harvard Crimson football', 'Central Michigan Chippewas football', 'Virginia Tech Hokies football', 'Calgary Stampeders', "Louisiana–Lafayette Ragin' Cajuns football", 'Leicester Panthers', 'Pasadena City College football team', 'Wisconsin Badgers football', 'New Jersey Generals', 'Alcorn State Braves football', 'Chicago Bears', 'Oregon Ducks football', 'Rhein Fire', 'Occidental Tigers Football', 'Montreal Alouettes', 'Cincinnati Bengals', 'Hamilton Tiger-Cats', 'Boston University Terriers Football', 'Miami Dolphins', 'UCLA Bruins football', 'New Orleans Saints', 'Dayton Flyers football team', 'Montana Grizzlies football', 'Georgia Tech Yellow Jackets football', 'Winnipeg Blue Bombers', 'Michigan State Spartans football', 'St. Louis Rams', 'Sacramento Mountain Lions', 'Coastal Carolina Chanticleers football', 'Toronto Argonauts', 'Montana State Bobcats football', 'Navy Midshipmen football', 'Texas Tech Red Raiders football', 'Minnesota Vikings', 'Auburn Tigers football', 'Cal State Fullerton Titans football', 'Kansas Jayhawks football', 'Grambling State Tigers football', 'Carolina Panthers', 'New England Patriots', 'Washington Redskins', 'Seattle Seahawks', 'North Texas Mean Green football', 'Minnesota Golden Gophers football', 'Boise State Broncos football', 'Houston Cougars football', 'Iowa State Cyclones football', 'Oakland Raiders', 'Michigan Wolverines football', 'Kent State Golden Flashes football', 'Los Angeles Raiders', 'South Carolina Gamecocks football', 'Samford Bulldogs', 'Nebraska Cornhuskers football', 'Cincinnati Bearcats football', 'Washington State Cougars football', 'Arizona Cardinals', 'San Antonio Talons', 'North Carolina Tar Heels football', 'Amsterdam Admirals', 'Georgia Bulldogs football', 'Jacksonville State Gamecocks', 'San Francisco 49ers', 'Jacksonville Bulls', 'Barcelona Dragons', 'TSU Tigers football', 'BC Lions', 'Brown Bears football', 'Kansas City Command', 'Buffalo Bills', 'NC State Wolfpack football', 'Houston Gamblers', 'Atlanta Falcons', 'Indianapolis Colts', 'Baldwin Wallace Yellow Jackets', 'San Antonio Gunslingers', 'Arkansas Razorbacks football', 'James Madison Dukes football', 'Boston College Eagles football', 'Wake Forest Demon Deacons football', 'LSU Tigers football', 'BYU Cougars football', 'Chicago Rush', 'Duke Blue Devils football', 'UNLV Rebels football', 'Texas A&M Aggies football', 'UCF Knights football', 'Oklahoma Sooners football', 'Denver Broncos', 'Houston Oilers', 'Iowa Barnstormers', 'Los Angeles Rams', 'Chicago Bruisers', 'Missouri Tigers football', 'Notre Dame Fighting Irish football', 'San Diego Chargers', "Delaware Fightin' Blue Hens football", 'Oregon State Beavers football', 'Texas Longhorns football', 'Tampa Bay Buccaneers', 'Connecticut Huskies football', 'Iowa Hawkeyes football', 'Pittsburgh Steelers', 'California Golden Bears football', 'Sam Houston State Bearkats', 'Kentucky Wildcats football', 'Omaha Nighthawks', 'Florida Gators football', 'Pacific Tigers football', 'Oklahoma State Cowboys football', 'New York Giants', 'Ohio State Buckeyes football', 'Cleveland Browns', 'Army Black Knights football', 'Ole Miss Rebels football', 'Florida State Seminoles football', 'Los Angeles Avengers', 'Philadelphia Eagles', 'Pittsburgh Panthers football', 'Utah State Aggies football', 'East Carolina Pirates football', 'Kansas City Chiefs', 'New York Jets', 'Phoenix Cardinals', 'Miami Hurricanes football', 'Detroit Lions', 'UAB Blazers football', 'Baltimore Colts', 'Dallas Cowboys', 'Saskatchewan Roughriders'}
            Answers = 168, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 168, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 188 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position.player', 'user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 32
            Final Answer: {'Carolina Panthers', 'New England Patriots', 'Washington Redskins', 'Denver Broncos', 'Seattle Seahawks', 'San Diego Chargers', 'Jacksonville Jaguars', 'Chicago Bears', 'Tampa Bay Buccaneers', 'Pittsburgh Steelers', 'Cincinnati Bengals', 'Oakland Raiders', 'New York Giants', 'Miami Dolphins', 'New Orleans Saints', 'Cleveland Browns', 'Philadelphia Eagles', 'Arizona Cardinals', 'Kansas City Chiefs', 'Houston Texans', 'San Francisco 49ers', 'New York Jets', 'St. Louis Rams', 'Baltimore Ravens', 'Detroit Lions', 'Buffalo Bills', 'Atlanta Falcons', 'Minnesota Vikings', 'Indianapolis Colts', 'Dallas Cowboys', 'Green Bay Packers', 'Tennessee Titans'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 189 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 11
            Final Answer: {'Cornerback', 'Return specialist', 'Running back', 'Placekicker', 'Halfback', 'Tight end', 'Defensive back', 'Punter', 'Safety', 'Wide receiver'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 190 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position.player', 'user.szaijan.fantasy_football.player.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1
            Final Answer: {'Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 191 / 252: {
          [('Main', '==', 'm.06b1q', ['business.job_title.people_with_this_title', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 3
            Final Answer: {'2008', '1992', '1999'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 192 / 252: {
          [('Main', '==', 'm.06b1q', ['business.job_title.people_with_this_title', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1
            Final Answer: {'Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 193 / 252: {
          [('Main', '==', 'm.06b1q', ['business.job_title.people_with_this_title', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 3
            Final Answer: {'2008', '2007', '2009'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 194 / 252: {
          [('Main', '==', 'm.06b1q', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 195 / 252: {
          [('Main', '==', 'm.06b1q', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 1
            Final Answer: {'Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 196 / 252: {
          [('Main', '==', 'm.06b1q', ['business.job_title.people_with_this_title', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 2
            Final Answer: {'Brett Favre', 'Tom Brady'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 197 / 252: {
          [('Main', '==', 'm.06b1q', ['business.job_title.people_with_this_title', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06b1q'}
            Query return lines = 3
            Final Answer: {'Green Bay Packers', 'New England Patriots', 'New York Jets'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 198 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.01y49', ['sports.pro_athlete.teams', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 9
            Final Answer: {'Bruce Gradkowski', 'Scott Mitchell', "J. T. O'Sullivan", 'Dan LeFevour', 'Ryan Fitzpatrick', 'Ken Anderson', 'Boomer Esiason', 'Jordan Palmer', 'Carson Palmer'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 199 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.01y49', ['sports.pro_athlete.teams', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 13
            Final Answer: {'Zac Robinson', 'Josh Johnson', 'Bruce Gradkowski', 'Scott Mitchell', "J. T. O'Sullivan", 'Dan LeFevour', 'Ryan Fitzpatrick', 'Ken Anderson', 'John Skelton', 'Boomer Esiason', 'Jordan Palmer', 'Andy Dalton', 'Carson Palmer'}
            Answers = 13, P = 0.076923, R = 1.000000, F1 = 0.142857
          } [0.014s]
          Answers = 13, P = 0.076923, R = 1.000000, F1 = 0.142857
        } [0.014s]
        Current: 200 / 252
        Checking schema 200 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.01y49', ['sports.pro_athlete.teams', 'american_football.football_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 3
            Final Answer: {'Zac Robinson', 'Andy Dalton', 'Josh Johnson'}
            Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
          } [0.022s]
          Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
        } [0.022s]
        Checking schema 201 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.number', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 202 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.number', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 203 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.number', 'american_football.football_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 204 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.from', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 9
            Final Answer: {'2007', '2000', '1971', '1997', '2009', '2010', '2003', '2008', '2011'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 205 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.from', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 10
            Final Answer: {'2013', '2007', '2000', '1971', '1997', '2009', '2010', '2003', '2008', '2011'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 206 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.from', 'american_football.football_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'2013'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 207 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.to']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.to', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 8
            Final Answer: {'2012', '2001', '2009', '2010', '1986', '2008', '2011'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 208 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.to']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.to', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 8
            Final Answer: {'2012', '2001', '2009', '2010', '1986', '2008', '2011'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 209 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.01y49', ['sports.sports_team.roster', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 210 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 211 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.01y49', ['sports.sports_team.roster', 'american_football.football_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 212 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position.player', 'user.szaijan.fantasy_football.player.nfl_team']), ('Entity', '==', 'm.01y49', ['!user.szaijan.fantasy_football.player.nfl_team', 'user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team ?o2 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team ?o2 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 213 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.01y49', ['sports.sports_position.players', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 214 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.01y49', ['sports.sports_position.players', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 215 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.01y49', ['sports.sports_position.players', 'american_football.football_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 216 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position.player', 'user.szaijan.fantasy_football.player.position']), ('Entity', '==', 'm.01y49', ['user.szaijan.fantasy_football.position.player', 'user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.position ?o2 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.position ?o2 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Quarterback'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 217 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.040s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.041s]
        Checking schema 218 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Carson Palmer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 219 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position.player', 'user.szaijan.fantasy_football.player.nfl_team']), ('Entity', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01y49', 'm.06b1q'}
            Query return lines = 1
            Final Answer: {'Cincinnati Bengals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 220 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.01y49', ['sports.pro_athlete.teams', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 221 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.01y49', ['sports.pro_athlete.teams', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 13, P = 0.076923, R = 1.000000, F1 = 0.142857
        } [0.000s]
        Checking schema 222 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.01y49', ['sports.pro_athlete.teams', 'american_football.football_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
        } [0.000s]
        Checking schema 223 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.number', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 224 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.number', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 225 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.number']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.number', 'american_football.football_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 226 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.from', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 227 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.from', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 228 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.from']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.from', 'american_football.football_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 229 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.to']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.to', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 230 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.to']), ('Entity', '==', 'm.01y49', ['!sports.sports_team_roster.to', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 231 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.01y49', ['sports.sports_team.roster', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 232 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.01y49', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 233 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.01y49', ['sports.sports_team.roster', 'american_football.football_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 234 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position.player', 'user.szaijan.fantasy_football.player.nfl_team']), ('Entity', '==', 'm.01y49', ['!user.szaijan.fantasy_football.player.nfl_team', 'user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team ?o2 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 235 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.01y49', ['sports.sports_position.players', 'american_football.football_historical_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_historical_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 236 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.01y49', ['sports.sports_position.players', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:sports.sports_team_roster.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 237 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.position']), ('Entity', '==', 'm.01y49', ['sports.sports_position.players', 'american_football.football_roster_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o1 fb:american_football.football_roster_position.team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 238 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position.player', 'user.szaijan.fantasy_football.player.position']), ('Entity', '==', 'm.01y49', ['user.szaijan.fantasy_football.position.player', 'user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.position ?o2 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 239 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.team']), ('Entity', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 240 / 252: {
          [('Main', '==', 'm.06b1q', ['sports.sports_position.players', 'sports.sports_team_roster.player']), ('Entity', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:sports.sports_position.players ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 241 / 252: {
          [('Main', '==', 'm.06b1q', ['user.szaijan.fantasy_football.position.player', 'user.szaijan.fantasy_football.player.nfl_team']), ('Entity', '==', 'm.01y49', ['user.szaijan.fantasy_football.player.nfl_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06b1q fb:user.szaijan.fantasy_football.position.player ?o1 . ?o1 fb:user.szaijan.fantasy_football.player.nfl_team ?o2 . ?o2 fb:user.szaijan.fantasy_football.player.nfl_team fb:m.01y49 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 242 / 252: {
          [('Main', '==', 'm.086g2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'West Bengal'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 243 / 252: {
          [('Main', '==', 'm.086g2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'Chief Minister'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 244 / 252: {
          [('Main', '==', 'm.086g2', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.administrative_division'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'West Bengal'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 245 / 252: {
          [('Main', '==', 'm.086g2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 4
            Final Answer: {'Siddhartha Shankar Ray', 'Prafulla Chandra Ghosh', 'Jyoti Basu', 'Buddhadeb Bhattacharjee'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 246 / 252: {
          [('Main', '==', 'm.086g2', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 247 / 252: {
          [('Main', '==', 'm.086g2', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'West Bengal'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 248 / 252: {
          [('Main', '==', 'm.086g2', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.086g2 fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.from ?o2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.086g2 fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'1947'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 249 / 252: {
          [('Main', '==', 'm.086g2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 6
            Final Answer: {'2000', '1971', '1947', '1972', '1977', '1967'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 250 / 252: {
          [('Main', '==', 'm.086g2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 WHERE { fb:m.086g2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 5
            Final Answer: {'2000', '1971', '1977', '1968', '1948'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 251 / 252: {
          [('Main', '==', 'm.086g2', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.capital'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:37] Q_Schema Request: {
            WebQ_2296|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.086g2 fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.086g2'}
            Query return lines = 1
            Final Answer: {'Kolkata'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        221 / 252 coarse schemas kept with ans_size > 0.
      } [1.964s]
      Coarse level ended, resulting in 221 schemas.
    } [8.087s]
    Type level searching (total types = 10): {
      Current: 0 / 221
[{'type.datetime'}]
[{'sports.mascot'}]
[{'american_football.football_division'}]
[{'american_football.football_conference'}]
[{'sports.sports_team_location'}]
[{'visual_art.color'}]
[{'american_football.football_team'}]
[{'american_football.football_game'}]
[{'american_football.football_game'}]
[{'sports.sport'}]
[{'sports.sports_facility'}]
[{'sports.sports_team_owner'}]
[{'user.szaijan.fantasy_football.position'}]
[{'american_football.football_coach'}]
[{'sports.sport'}]
[{'sports.sports_team_owner'}]
[{'american_football.football_coach'}]
[{'type.datetime'}]
[{'sports.mascot'}]
[{'american_football.football_division'}]
[{'american_football.football_conference'}]
[{'sports.sports_team_location'}]
[{'visual_art.color'}]
[{'american_football.football_team'}]
[{'american_football.football_game'}]
[{'american_football.football_game'}]
[{'sports.sport'}]
[{'sports.sports_facility'}]
[{'sports.sports_team_owner'}]
[{'user.szaijan.fantasy_football.position'}]
[{'american_football.football_coach'}]
[{'sports.sport'}]
[{'sports.sports_team_owner'}]
[{'american_football.football_coach'}]
[set()]
[{'sports.sport'}]
[{'book.written_work'}]
[{'type.int'}]
[{'type.float'}]
[{'soccer.football_player'}]
[{'type.int'}]
[set()]
[set()]
[set()]
[{'sports.sport'}]
[set()]
[set()]
[set()]
[{'sports.sport'}]
[{'location.country'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'people.person'}]
[{'location.in_city'}]
[{'base.aareas.schema.earth.citytown'}]
[{'government.government_office_or_title'}]
[{'location.location'}]
[{'time.event'}]
[{'location.in_city'}]
[{'book.newspaper'}]
[{'base.aareas.schema.administrative_area'}]
[{'type.float'}]
[{'location.location'}]
[{'location.in_city'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'user.szaijan.fantasy_football.projection'}, {'type.int'}]
[{'user.szaijan.fantasy_football.projection'}, {'user.szaijan.fantasy_football.season'}]
[{'sports.sports_league_draft_pick'}, {'sports.professional_sports_team'}]
[{'american_football.football_historical_coach_position'}, {'type.datetime'}]
[{'american_football.football_historical_coach_position'}, {'american_football.football_team'}]
[{'sports.sports_team_season_record'}, {'type.int'}]
[{'sports.sports_team_season_record'}, {'sports.sports_league_season'}]
[{'sports.sports_team_season_record'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'user.szaijan.fantasy_football.projection'}, {'user.szaijan.fantasy_football.scoring'}]
[{'user.szaijan.fantasy_football.projection'}, {'type.float'}]
[{'sports.sports_league_draft_pick'}, {'sports.drafted_athlete'}]
[{'sports.sports_league_draft_pick'}, {'education.educational_institution'}]
[{'american_football.football_historical_coach_position'}, {'american_football.football_coach'}]
[{'american_football.football_historical_coach_position'}, {'american_football.football_coach_position'}]
[{'sports.sports_team_season_record'}, {'type.int'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'sports.sports_league_participation'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'user.szaijan.fantasy_football.projection'}, {'type.int'}]
[{'sports.sports_league_draft_pick'}, {'type.int'}]
[{'sports.sports_league_draft_pick'}, {'sports.sports_league_draft'}]
[{'american_football.football_historical_coach_position'}, {'type.datetime'}]
[{'sports.sports_team_season_record'}, {'type.int'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
      Current: 100 / 221
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_league_draft_pick'}, {'sports.drafted_athlete'}]
[{'sports.sports_league_draft_pick'}, {'sports.drafted_athlete'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'user.szaijan.fantasy_football.projection'}, {'type.int'}]
[{'user.szaijan.fantasy_football.projection'}, {'user.szaijan.fantasy_football.season'}]
[{'sports.sports_league_draft_pick'}, {'sports.professional_sports_team'}]
[{'american_football.football_historical_coach_position'}, {'type.datetime'}]
[{'american_football.football_historical_coach_position'}, {'american_football.football_team'}]
[{'sports.sports_team_season_record'}, {'type.int'}]
[{'sports.sports_team_season_record'}, {'sports.sports_league_season'}]
[{'sports.sports_team_season_record'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'user.szaijan.fantasy_football.projection'}, {'user.szaijan.fantasy_football.scoring'}]
[{'user.szaijan.fantasy_football.projection'}, {'type.float'}]
[{'sports.sports_league_draft_pick'}, {'sports.drafted_athlete'}]
[{'sports.sports_league_draft_pick'}, {'education.educational_institution'}]
[{'american_football.football_historical_coach_position'}, {'american_football.football_coach'}]
[{'american_football.football_historical_coach_position'}, {'american_football.football_coach_position'}]
[{'sports.sports_team_season_record'}, {'type.int'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'sports.sports_league_participation'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'user.szaijan.fantasy_football.projection'}, {'type.int'}]
[{'sports.sports_league_draft_pick'}, {'type.int'}]
[{'sports.sports_league_draft_pick'}, {'sports.sports_league_draft'}]
[{'american_football.football_historical_coach_position'}, {'type.datetime'}]
[{'sports.sports_team_season_record'}, {'type.int'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_league_draft_pick'}, {'sports.drafted_athlete'}]
[{'sports.sports_league_draft_pick'}, {'sports.drafted_athlete'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'user.szaijan.fantasy_football.player'}, {'american_football.football_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'user.szaijan.fantasy_football.player'}, {'user.szaijan.fantasy_football.position'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'user.szaijan.fantasy_football.player'}, {'american_football.football_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'user.szaijan.fantasy_football.player'}, {'user.szaijan.fantasy_football.position'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'user.szaijan.fantasy_football.player'}, {'american_football.football_team'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
      Current: 200 / 221
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'user.szaijan.fantasy_football.player'}, {'american_football.football_team'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'user.szaijan.fantasy_football.player'}, {'user.szaijan.fantasy_football.position'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'user.szaijan.fantasy_football.player'}, {'american_football.football_team'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'location.administrative_division_capital_relationship'}, {'location.administrative_division'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'location.administrative_division_capital_relationship'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'location.administrative_division_capital_relationship'}, {'location.capital_of_administrative_division'}]
      0 typed schemas retrieved from 221 coarse schemas.
      Calculating F1 for 0 typed schemas: {
        0 / 0 typed schemas kept with ans_size > 0.
      } [0.000s]
      Typed level ended, resulting in 221 schemas.
    } [0.009s]
    Time level searching (total times = 0): {
      Current: 0 / 221
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'american_football.football_game.date'}]
self.var_time_preds: [{'american_football.football_game.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'american_football.football_game.date'}]
self.var_time_preds: [{'american_football.football_game.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
self.var_time_preds: [{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
self.var_time_preds: [{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_league_draft.year'}]
self.var_time_preds: [{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
      Current: 100 / 221
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
self.var_time_preds: [{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
self.var_time_preds: [{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_league_draft.year'}]
self.var_time_preds: [{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
      Current: 200 / 221
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
      0 timed schemas retrieved from 221 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 221 schemas.
    } [0.004s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 221
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'american_football.football_game.date'}]
[{'american_football.football_game.date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'american_football.football_game.date'}]
[{'american_football.football_game.date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
[{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
[set(), set()]
[set(), set()]
[set(), {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
[{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[set(), set()]
[set(), {'sports.sports_league_draft.year'}]
[{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
[set(), set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
      Current: 100 / 221
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[set(), set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
[{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
[set(), set()]
[set(), set()]
[set(), {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
[{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[set(), set()]
[set(), {'sports.sports_league_draft.year'}]
[{'american_football.football_historical_coach_position.to', 'american_football.football_historical_coach_position.from'}, set()]
[set(), set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[set(), set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
      Current: 200 / 221
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[set(), set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[set(), set()]
[set(), set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
      0 ordinal schemas retrieved from 221 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 221 schemas.
    } [0.004s]
    [2020-12-03 14:20:37] buffer saved.
    221 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2200-2299/2296_schema].
  } [1m48.790s]
  Entering Q 2297 / 5810 [b'what job does janelle brown have?']: {
    Show 6 E + 10 T + 0 Tm + 0 Ord = 16 linkings: {
      #00 Entity: [1, 2) (job) == m.03hc9y (Job_(biblical_figure)) {'score': 15.364249, 'source': 0.0}
      #01 Entity: [1, 2) (job) == m.04115t2 (job) {'score': 6195.137567, 'source': 2.0}
      #02 Entity: [3, 4) (janelle) == m.077z3j (Janelle_Pierzina) {'score': 19.0834, 'source': 1.0}
      #03 Entity: [4, 5) (brown) == m.01bm_ (Brown_University) {'score': 22.264178, 'source': 0.0}
      #04 Entity: [4, 5) (brown) == m.021dcw (ian brown) {'score': 2965.058377, 'source': 2.0}
      #05 Entity: [4, 5) (brown) == m.09q2t (brown) {'score': 28194.043184, 'source': 2.0}
      #06 Type: [1, 2) (job) == business.job_title (job title) {'sim': 0.809829}
      #07 Type: [1, 2) (job) == film.film_job (film job) {'sim': 0.73695}
      #08 Type: [0, 3) (what job does) == media_common.lost_work (lost work) {'sim': 0.723199}
      #09 Type: [0, 2) (what job) == fictional_universe.fictional_job_title (fictional job title) {'sim': 0.716347}
      #10 Type: [0, 2) (what job) == music.music_video_job (music video job) {'sim': 0.715892}
      #11 Type: [0, 3) (what job does) == business.company_name_change (organization name change) {'sim': 0.681242}
      #12 Type: [0, 3) (what job does) == film.film_company_role_or_service (film company role or service) {'sim': 0.681064}
      #13 Type: [2, 3) (does) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.676212}
      #14 Type: [0, 3) (what job does) == book.written_work (written work) {'sim': 0.673324}
      #15 Type: [0, 2) (what job) == media_common.creative_work (creative work) {'sim': 0.670505}
    } [0.000s]
    16 link data save to file.
    Coarse level searching (total entities = 6): {
      [Len-1||F1/6] (2020-12-03 14:22:18) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01bm_ ?p1 ?o1 . }
        [2020-12-03 14:22:18] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01bm_ ?p1 ?o1 . }
          Query return lines = 47
        } [0.005s]
        Filt_Query_Ret = 19 / 47 ( 0.005s)
        [Len-1||F1/6||3/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 fb:m.03hc9y . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 fb:m.03hc9y . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-1||F1/6||4/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 fb:m.04115t2 . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 fb:m.04115t2 . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-1||F1/6||5/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 fb:m.077z3j . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 fb:m.077z3j . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
      } [0.031s]
      [Len-1||F2/6] (2020-12-03 14:22:18) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.021dcw ?p1 ?o1 . }
        [2020-12-03 14:22:18] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.021dcw ?p1 ?o1 . }
          Query return lines = 29
        } [0.005s]
        Filt_Query_Ret = 15 / 29 ( 0.005s)
        [Len-1||F2/6||3/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 fb:m.03hc9y . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 fb:m.03hc9y . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
        [Len-1||F2/6||4/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 fb:m.04115t2 . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 fb:m.04115t2 . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
        [Len-1||F2/6||5/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 fb:m.077z3j . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 fb:m.077z3j . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
      } [0.029s]
      [Len-1||F3/6] (2020-12-03 14:22:18) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03hc9y ?p1 ?o1 . }
        [2020-12-03 14:22:18] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03hc9y ?p1 ?o1 . }
          Query return lines = 13
        } [0.008s]
        Filt_Query_Ret = 6 / 13 ( 0.008s)
        [Len-1||F3/6||1/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03hc9y ?p1 ?o1 . ?o1 ?p2 fb:m.01bm_ . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03hc9y ?p1 ?o1 . ?o1 ?p2 fb:m.01bm_ . }
            Query return lines = 0
          } [0.042s]
          Filt_Query_Ret = 0 / 0 ( 0.042s)
        } [0.043s]
        [Len-1||F3/6||2/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03hc9y ?p1 ?o1 . ?o1 ?p2 fb:m.021dcw . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03hc9y ?p1 ?o1 . ?o1 ?p2 fb:m.021dcw . }
            Query return lines = 0
          } [0.026s]
          Filt_Query_Ret = 0 / 0 ( 0.026s)
        } [0.026s]
        [Len-1||F3/6||5/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03hc9y ?p1 ?o1 . ?o1 ?p2 fb:m.077z3j . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03hc9y ?p1 ?o1 . ?o1 ?p2 fb:m.077z3j . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-1||F3/6||6/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03hc9y ?p1 ?o1 . ?o1 ?p2 fb:m.09q2t . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03hc9y ?p1 ?o1 . ?o1 ?p2 fb:m.09q2t . }
            Query return lines = 0
          } [0.061s]
          Filt_Query_Ret = 0 / 0 ( 0.061s)
        } [0.061s]
      } [0.155s]
      [Len-1||F4/6] (2020-12-03 14:22:18) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.04115t2 ?p1 ?o1 . }
        [2020-12-03 14:22:18] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.04115t2 ?p1 ?o1 . }
          Query return lines = 8
        } [0.013s]
        Filt_Query_Ret = 2 / 8 ( 0.013s)
        [Len-1||F4/6||1/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 fb:m.01bm_ . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 fb:m.01bm_ . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-1||F4/6||2/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 fb:m.021dcw . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 fb:m.021dcw . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
        [Len-1||F4/6||5/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 fb:m.077z3j . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 fb:m.077z3j . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-1||F4/6||6/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 fb:m.09q2t . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 fb:m.09q2t . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
      } [0.067s]
      [Len-1||F5/6] (2020-12-03 14:22:18) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.077z3j ?p1 ?o1 . }
        [2020-12-03 14:22:18] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.077z3j ?p1 ?o1 . }
          Query return lines = 20
        } [0.008s]
        Filt_Query_Ret = 7 / 20 ( 0.008s)
        [Len-1||F5/6||1/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.01bm_ . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.01bm_ . }
            Query return lines = 1
          } [0.041s]
          Filt_Query_Ret = 1 / 1 ( 0.041s)
          [Len-1||F5/6||1/6-1||3/6-1] (2020-12-03 14:22:18) {
            Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.01bm_ . ?o1 ?p3 fb:m.03hc9y . }
            [2020-12-03 14:22:18] SPARQL Request: {
              SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.01bm_ . ?o1 ?p3 fb:m.03hc9y . }
              Query return lines = 0
            } [0.005s]
            Filt_Query_Ret = 0 / 0 ( 0.005s)
          } [0.005s]
          [Len-1||F5/6||1/6-1||4/6-1] (2020-12-03 14:22:18) {
            Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.01bm_ . ?o1 ?p3 fb:m.04115t2 . }
            [2020-12-03 14:22:18] SPARQL Request: {
              SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.01bm_ . ?o1 ?p3 fb:m.04115t2 . }
              Query return lines = 0
            } [0.013s]
            Filt_Query_Ret = 0 / 0 ( 0.013s)
          } [0.013s]
        } [0.059s]
        [Len-1||F5/6||2/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.021dcw . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.021dcw . }
            Query return lines = 0
          } [0.042s]
          Filt_Query_Ret = 0 / 0 ( 0.042s)
        } [0.042s]
        [Len-1||F5/6||3/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.03hc9y . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.03hc9y . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-1||F5/6||4/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.04115t2 . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.04115t2 . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
        [Len-1||F5/6||6/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.09q2t . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 fb:m.09q2t . }
            Query return lines = 0
          } [0.036s]
          Filt_Query_Ret = 0 / 0 ( 0.037s)
        } [0.037s]
      } [0.172s]
      [Len-1||F6/6] (2020-12-03 14:22:18) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.09q2t ?p1 ?o1 . }
        [2020-12-03 14:22:18] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.09q2t ?p1 ?o1 . }
          Query return lines = 7
        } [0.014s]
        Filt_Query_Ret = 1 / 7 ( 0.014s)
        [Len-1||F6/6||3/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09q2t ?p1 ?o1 . ?o1 ?p2 fb:m.03hc9y . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09q2t ?p1 ?o1 . ?o1 ?p2 fb:m.03hc9y . }
            Query return lines = 0
          } [0.020s]
          Filt_Query_Ret = 0 / 0 ( 0.020s)
        } [0.020s]
        [Len-1||F6/6||4/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09q2t ?p1 ?o1 . ?o1 ?p2 fb:m.04115t2 . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09q2t ?p1 ?o1 . ?o1 ?p2 fb:m.04115t2 . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-1||F6/6||5/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09q2t ?p1 ?o1 . ?o1 ?p2 fb:m.077z3j . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09q2t ?p1 ?o1 . ?o1 ?p2 fb:m.077z3j . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
      } [0.066s]
      [Len-2||F1/6] (2020-12-03 14:22:18) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:22:18] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 644
        } [0.051s]
        Filt_Query_Ret = 65 / 644 ( 0.053s)
        [Len-2||F1/6||3/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03hc9y . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03hc9y . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.008s]
        [Len-2||F1/6||3/6-2] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03hc9y . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03hc9y . }
            Query return lines = 0
          } [0.058s]
          Filt_Query_Ret = 0 / 0 ( 0.058s)
        } [0.058s]
        [Len-2||F1/6||4/6-1] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04115t2 . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04115t2 . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
        [Len-2||F1/6||4/6-2] (2020-12-03 14:22:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04115t2 . }
          [2020-12-03 14:22:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04115t2 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-2||F1/6||5/6-1] (2020-12-03 14:22:19) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.077z3j . }
          [2020-12-03 14:22:19] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.077z3j . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F1/6||5/6-2] (2020-12-03 14:22:19) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.077z3j . }
          [2020-12-03 14:22:19] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bm_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.077z3j . }
            Query return lines = 1
          } [0.874s]
          Filt_Query_Ret = 0 / 1 ( 0.874s)
        } [0.874s]
      } [1.025s]
      [Len-2||F2/6] (2020-12-03 14:22:19) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:22:19] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 497
        } [0.098s]
        Filt_Query_Ret = 15 / 497 ( 0.100s)
        [Len-2||F2/6||3/6-1] (2020-12-03 14:22:19) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03hc9y . }
          [2020-12-03 14:22:19] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03hc9y . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-2||F2/6||3/6-2] (2020-12-03 14:22:19) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03hc9y . }
          [2020-12-03 14:22:19] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03hc9y . }
            Query return lines = 0
          } [0.058s]
          Filt_Query_Ret = 0 / 0 ( 0.058s)
        } [0.058s]
        [Len-2||F2/6||4/6-1] (2020-12-03 14:22:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04115t2 . }
          [2020-12-03 14:22:20] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04115t2 . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-2||F2/6||4/6-2] (2020-12-03 14:22:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04115t2 . }
          [2020-12-03 14:22:20] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04115t2 . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F2/6||5/6-1] (2020-12-03 14:22:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.077z3j . }
          [2020-12-03 14:22:20] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.077z3j . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.009s]
        [Len-2||F2/6||5/6-2] (2020-12-03 14:22:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.077z3j . }
          [2020-12-03 14:22:20] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.021dcw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.077z3j . }
            Query return lines = 0
          } [1.814s]
          Filt_Query_Ret = 0 / 0 ( 1.814s)
        } [1.814s]
      } [2.000s]
      [Len-2||F3/6] (2020-12-03 14:22:21) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03hc9y ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:22:21] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03hc9y ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 174
        } [0.038s]
        Filt_Query_Ret = 0 / 174 ( 0.039s)
      } [0.039s]
      [Len-2||F4/6] (2020-12-03 14:22:21) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:22:21] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 60
        } [0.014s]
        Filt_Query_Ret = 0 / 60 ( 0.014s)
      } [0.014s]
      [Len-2||F5/6] (2020-12-03 14:22:21) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:22:21] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 341
        } [0.066s]
        Filt_Query_Ret = 15 / 341 ( 0.067s)
        [Len-2||F5/6||1/6-1] (2020-12-03 14:22:22) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01bm_ . }
          [2020-12-03 14:22:22] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01bm_ . }
            Query return lines = 182
          } [0.075s]
          Filt_Query_Ret = 0 / 182 ( 0.075s)
        } [0.076s]
        [Len-2||F5/6||1/6-2] (2020-12-03 14:22:22) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01bm_ . }
          [2020-12-03 14:22:22] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01bm_ . }
            Query return lines = 1
          } [1.807s]
          Filt_Query_Ret = 0 / 1 ( 1.807s)
        } [1.807s]
        [Len-2||F5/6||2/6-1] (2020-12-03 14:22:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.021dcw . }
          [2020-12-03 14:22:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.021dcw . }
            Query return lines = 0
          } [0.022s]
          Filt_Query_Ret = 0 / 0 ( 0.022s)
        } [0.022s]
        [Len-2||F5/6||2/6-2] (2020-12-03 14:22:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.021dcw . }
          [2020-12-03 14:22:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.021dcw . }
            Query return lines = 0
          } [1.974s]
          Filt_Query_Ret = 0 / 0 ( 1.974s)
        } [1.974s]
        [Len-2||F5/6||3/6-1] (2020-12-03 14:22:25) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03hc9y . }
          [2020-12-03 14:22:25] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03hc9y . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F5/6||3/6-2] (2020-12-03 14:22:25) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03hc9y . }
          [2020-12-03 14:22:25] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03hc9y . }
            Query return lines = 0
          } [0.064s]
          Filt_Query_Ret = 0 / 0 ( 0.064s)
        } [0.064s]
        [Len-2||F5/6||4/6-1] (2020-12-03 14:22:25) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04115t2 . }
          [2020-12-03 14:22:25] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04115t2 . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
        [Len-2||F5/6||4/6-2] (2020-12-03 14:22:25) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04115t2 . }
          [2020-12-03 14:22:25] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04115t2 . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F5/6||6/6-1] (2020-12-03 14:22:25) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09q2t . }
          [2020-12-03 14:22:25] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09q2t . }
            Query return lines = 0
          } [0.025s]
          Filt_Query_Ret = 0 / 0 ( 0.026s)
        } [0.026s]
        [Len-2||F5/6||6/6-2] (2020-12-03 14:22:25) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09q2t . }
          [2020-12-03 14:22:25] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.077z3j ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09q2t . }
            Query return lines = 2
          } [1.098s]
          Filt_Query_Ret = 0 / 2 ( 1.098s)
        } [1.098s]
      } [5.155s]
      [Len-2||F6/6] (2020-12-03 14:22:27) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09q2t ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:22:27] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09q2t ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 80
        } [0.088s]
        Filt_Query_Ret = 0 / 80 ( 0.088s)
      } [0.089s]
      146 coarse schemas retrieved from scratch.
      Calculating F1 for 146 coarse schemas: {
        Current: 0 / 146
        Checking schema 0 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.school_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.school_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.school_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 2
            Final Answer: {'Private university', 'University'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 1 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.newspaper'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.newspaper ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.newspaper ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'The Brown Daily Herald'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 2 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.nickname'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 3 / 146: {
          [('Main', '==', 'm.01bm_', ['symbols.namesake.named_after'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:symbols.namesake.named_after ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:symbols.namesake.named_after ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Nicholas Brown, Sr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 4 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.colors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.colors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.colors ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 3
            Final Answer: {'Cardinal', 'Seal brown', 'White'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 5 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.mascot'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.mascot ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.mascot ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown Bear'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 6 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution_campus.educational_institution'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution_campus.educational_institution ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution_campus.educational_institution ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 7 / 146: {
          [('Main', '==', 'm.01bm_', ['user.patrick.default_domain.tagged_topic.tags'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:user.patrick.default_domain.tagged_topic.tags ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:user.patrick.default_domain.tagged_topic.tags ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Ivy League'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 8 / 146: {
          [('Main', '==', 'm.01bm_', ['fictional_universe.school_in_fiction.students_graduates'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:fictional_universe.school_in_fiction.students_graduates ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:fictional_universe.school_in_fiction.students_graduates ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 3
            Final Answer: {'Brian Griffin', 'Jaye Tyler', 'Amy Gardner'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 9 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01bm_ fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 WHERE { fb:m.01bm_ fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'1764'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 10 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.founders'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 4
            Final Answer: {'Morgan Edwards', 'James Manning', 'Moses Brown', 'John Brown'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 11 / 146: {
          [('Main', '==', 'm.01bm_', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 3
            Final Answer: {'Rhode Island', 'United States of America', 'Providence'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 12 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.campuses'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.campuses ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.campuses ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 13 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.subsidiary_or_constituent_schools'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.subsidiary_or_constituent_schools ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.subsidiary_or_constituent_schools ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Pembroke College in Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 14 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.motto'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.motto ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.motto ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 15 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.sports_teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.sports_teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.educational_institution.sports_teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {"Brown Bears Men's Basketball"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 16 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.fraternities_and_sororities'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.university.fraternities_and_sororities ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:education.university.fraternities_and_sororities ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 3
            Final Answer: {'St. Anthony Hall', 'Phi Kappa Psi', 'Delta Phi'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 17 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Kappa Chapter of St. Anthony Hall'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 18 / 146: {
          [('Main', '==', 'm.01bm_', ['base.schemastaging.educational_institution_extra.libraries'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:base.schemastaging.educational_institution_extra.libraries ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bm_ fb:base.schemastaging.educational_institution_extra.libraries ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 3
            Final Answer: {'John D. Rockefeller, Jr. Library', 'John Hay Library', 'Sciences Library'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 19 / 146: {
          [('Main', '==', 'm.021dcw', ['music.artist.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 4
            Final Answer: {'Britpop', 'Madchester', 'Indie rock', 'Alternative rock'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 20 / 146: {
          [('Main', '==', 'm.021dcw', ['music.artist.label'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.artist.label ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.artist.label ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 4
            Final Answer: {'Interscope Records', 'E1 Music', 'Polydor Records', 'Fiction Records'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 21 / 146: {
          [('Main', '==', 'm.021dcw', ['broadcast.artist.content'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:broadcast.artist.content ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:broadcast.artist.content ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'radioIO Indie Rock'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 22 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.021dcw fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 WHERE { fb:m.021dcw fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'1963'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 23 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 2
            Final Answer: {'United Kingdom', 'England'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 24 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'English people'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 25 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.021dcw fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 WHERE { fb:m.021dcw fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'1.7272'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 26 / 146: {
          [('Main', '==', 'm.021dcw', ['film.music_contributor.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:film.music_contributor.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:film.music_contributor.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Love + Hate'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 27 / 146: {
          [('Main', '==', 'm.021dcw', ['music.group_member.instruments_played'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.group_member.instruments_played ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.group_member.instruments_played ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 3
            Final Answer: {'Bass guitar', 'Piano', 'Keyboard'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 28 / 146: {
          [('Main', '==', 'm.021dcw', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 19
            Final Answer: {'Thriller / Billie Jean', 'The Greatest', 'Sister Rose', 'Dolphins Were Monkeys', 'My Way', 'Solarized', 'Whispers', 'Music of the Spheres', 'Time Is My Everything', 'Just Like You', 'Illegal Attacks', 'Golden Gaze', 'Golden Greats', 'Remixes / B-Side Tracks', 'Stellify', 'Love Like a Fountain', 'Remixes of the Spheres', 'Unfinished Monkey Business', 'The World Is Yours'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 29 / 146: {
          [('Main', '==', 'm.021dcw', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 267
            Final Answer: {'El mundo pequeño (live acoustic version)', 'Just Like You (The Prodigy remix)', 'Lovebug', 'Neptune', 'Just Like You', 'Always Remember Me', 'Love Like a Fountain (radio version)', 'Lions (feat. Denise)', 'The Feeding of the 5000', 'F.E.A.R (Unklesounds Gu Fear-Edit Part One)', 'Own Brain', 'Dolphins Were Monkeys (UNKLE vs. South remix)', 'In the Year 2525', 'The World Is Yours (Orchestral mix)', "Golden Gaze (Sharktank's Dirt It Up mix)", 'Destiny or Circumstance', 'The World Is Yours', 'Cokane in My Brain (DJ Mek Numburg Scratch mix)', 'Corpses in Their Mouths', 'F.E.A.R. (UNKLE remix)', 'Submission', 'Ice Cold Cube', 'Time Is My Everything (album version)', 'The Gravy Train (Nightwares on Wax Mix)', 'Stardust (instrumental)', 'Be There', 'Upside Down', 'Illegal Attacks', 'F.E.A.R. (DJ Mek Bulletproof Freestyle version)', 'Stardust', 'One Way Ticket to Paradise', 'Northern Lights', 'Me and You Forever', 'The Fisherman', 'Free My Way', 'So High', 'F.E.A.R. (U.N.K.L.E. instrumental)', 'Some Folks Are Hollow (Orchestral mix)', 'Vanity Kills', 'Save Us', 'All Ablaze', 'Longsight M13', 'By All Means Necessary', 'Laugh Now', 'Bubbles', 'Sister Rose (feat. Pharoahe Monch)', 'Goodbye to the Broken', 'So Many Soldiers', 'Dolphins Were Monkeys (Goldfinger mix)', 'Illegal Attacks (Sway Soldier Story remix)', 'Time Is My Everything', 'Dolphins Were Monkeys (UNKLE mix)', 'Corpses In Their Mouth', 'Golden Gaze', 'See The Dawn', 'What Happened to Ya, Part 1', 'Set My Babe Free', 'Golden Gaze (single version)', 'Deep Pile Dreams', 'Me and You Forever (Orchestral mix)', 'Babasonicos', "Can't See Me (Bacon & Quarmby vocal dub)", 'Billie Jean', 'Dolphins Were Monkeys (new version)', 'Intro Under the Paving Stones: The Beach', 'Love Like a Fountain (Infected by Scourge of the Earth)', 'Love Like a Fountain (Infected by Scourge of the Earth mix)', 'Street Children (Orchestral mix)', "Can't See Me (Bacon & Quarmby remix)", 'Return of the Fisherman', 'Dolphins Were Monkeys', 'Golden Gaze (Andy Gray remix)', "Can't See Me", 'Solarized', 'Crowning of the Poor', 'Love Like a Fountain (Aim mix)', 'Sister Rose (Steve Fitzmaurice single mix)', 'Eternal Flame', 'Time Is My Everything (Scratch Perverts vocal mix)', 'Jesus on the Move', 'On Track', 'El Mundo Pequeño', 'Solarised (instrumental)', 'Destiny or Circumstance (live at Brixton Academy)', 'My Star 2002', 'Lions', 'F.E.A.R.', 'Whispers', "Can't See Me (Harvey's Invisible remix)", 'The Gravy Brain (Nightmare on Wax instrumental)', 'Desire (Ian Brown Full Length remix)', 'First World', 'Forever and a Day (CedarBlue mix)', 'Sister Rose', 'Sister Rose (Various Production remix)', 'Dolphins Were Monkeys (Unkle Versus South remix)', 'Forever and a Day', "Under the Paving Stones: The Beach (Gabriel's 13th Dream remix)", 'Dolphins Were Monkeys (single version)', 'F.E.A.R', 'The Gravy Train (Nightmares on Wax Remix)', 'Open Your Eyes', 'What Happened to Ya, Part 2', 'Time Is My Everything (Stateside Hombres Over Easy mix)', 'My Star (2002)', 'Thriller', 'Time Is My Everything (Them Lads remix)', 'Home Is Where the Heart Is', 'Sister Rose (DJ Mek remix) (feat. Starkey Banton)', 'El Mundo Pequeno (live acoustic version)', 'Home is Where the Heart Is', 'Gravy Train (N.O.W mix)', 'The Feeding of the 5000 (Orchestral mix)', 'Love Like a Fountain (single version)', 'Lions (With Denise)', "Love Like a Fountain (Andy Votel's Bespoke-Opus mix)", 'Eternal Flame (Orchestral mix)', 'For the Glory', 'Reign (False Prophet mix)', 'Fear (U.N.K.L.E. remix)', 'Fear', 'Illegal Attacks (Orchestral mix)', 'The World Is Yours (Reprise)', 'The Sweet Fantastic', 'Unfinished Monkey Business', 'Sunshine', 'Lovebug (The Greatest version)', 'F.E.A.R. (UNKLE mix)', 'F.E.A.R. (feat. Dann)', 'Dolphins Were Monkeys (UNKLE vs South remix)', 'Love Like a Fountain (U.S. version)', 'REIGN', 'Come Again', 'Love Like a Fountain', 'Street Children', 'The Gravy Train (Nightmare on Wax mix)', 'Fourteen', 'Some Folks Are Hollow', 'Northern Lights (The Freelance Hellraiser mix)', 'The Sweet Fantastic (live at Brixton Academy)', 'Keep What Ya Got', 'Kiss Ya Lips (No I.D.)', 'Fear (UNKLE mix)', "Can't See Me (Harvey's Invisible mix)", 'Hear No See No', 'Happy Ever After', 'Goodbye to the Broken (Orchestral mix)', 'The World Is Yours (reprise)', 'Time Is My Everything (UNKLE Reconstruction)', 'Stellify', 'Kiss Ya Lips (No ID)', 'Dolphins Were Monkey (Unkle remix)', 'Reign', "Gettin' High", "Love Like a Fountain (Stereo MC's mix)", 'Dolphins Were Monkeys (UNKLE remix)', 'Where Angels Play', 'Forever and a Day (The Greatest version)', 'Shadow of a Saint (The Boy Bierton mix)', 'Hear No See No Speak No', 'Sister Rose (Orchestral mix)', 'Nah Nah', 'Set My Baby Free', 'Corpses', 'Shadow of a Saint', 'The Gravy Train', 'Superstar', 'Love Like a Fountain (LAJ & Quakerman mix)', 'My Star', 'Marathon Man', 'Save Us (Orchestral mix)', "Under the Paving Stones: The Beach (Gabriel's 13th Dream mix)", 'On Track (Orchestral mix)', "Illegal Attacks (feat. Sinéad O'Connor)", 'Whispers (radio edit)'}
            Answers = 175, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 175, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 30 / 146: {
          [('Main', '==', 'm.021dcw', ['music.artist.origin'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.artist.origin ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:music.artist.origin ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 2
            Final Answer: {'Manchester', 'The Stone Roses'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 31 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 3
            Final Answer: {'Musician', 'Singer', 'Songwriter'}
            Answers = 3, P = 0.333333, R = 0.500000, F1 = 0.400000
          } [0.006s]
          Answers = 3, P = 0.333333, R = 0.500000, F1 = 0.400000
        } [0.006s]
        Checking schema 32 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 33 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021dcw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Warrington'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 34 / 146: {
          [('Main', '==', 'm.03hc9y', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03hc9y'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 35 / 146: {
          [('Main', '==', 'm.03hc9y', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03hc9y'}
            Query return lines = 3
            Final Answer: {'Keren-happuch', 'Keziah', 'Jemima'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 36 / 146: {
          [('Main', '==', 'm.03hc9y', ['book.book_character.appears_in_book'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:book.book_character.appears_in_book ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:book.book_character.appears_in_book ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03hc9y'}
            Query return lines = 1
            Final Answer: {'The Book of Job'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 37 / 146: {
          [('Main', '==', 'm.03hc9y', ['base.saints.saint.venerated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:base.saints.saint.venerated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:base.saints.saint.venerated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03hc9y'}
            Query return lines = 11
            Final Answer: {'Christianity', "Bahá'í Faith", 'Anglican Communion', 'Armenian Apostolic Church', 'Eastern Catholic Churches', 'Eastern Orthodox Church', 'Judaism', 'Druze', 'Islam', 'Maronite Church', 'Lutheranism'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 38 / 146: {
          [('Main', '==', 'm.03hc9y', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03hc9y'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 39 / 146: {
          [('Main', '==', 'm.03hc9y', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03hc9y fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03hc9y'}
            Query return lines = 1
            Final Answer: {'The Book of Job'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 40 / 146: {
          [('Main', '==', 'm.04115t2', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04115t2 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04115t2 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04115t2'}
            Query return lines = 10
            Final Answer: {'The biggest mistake that you can make is to believe that you are working for somebody else. Job security is gone. The driving force of a career must come from the individual. Remember: Jobs are owned by the company, you own your career!', 'The best way to appreciate your job is to imagine yourself without one.', 'Work harder on yourself than you do on your job.', "There's no scarcity of opportunity to make a living at what you love. There is only a scarcity of resolve to make it happen.", "The trouble with the rat race is that even if you win you're still a rat.", 'The only job where you start at the top, is digging a hole.', 'There is no indispensable man.', "I've met a few people who had to change their jobs in order to change their lives, but I've met many more people who merely had to change their motive to service in order to change their lives.", "My job is never work -- the only time it seems like work is when I'd rather be doing something else.", 'Our job is not to set things right but to see them right.'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 41 / 146: {
          [('Main', '==', 'm.04115t2', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04115t2 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04115t2 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04115t2'}
            Query return lines = 1
            Final Answer: {'The Working Life: The Promise and Betrayal of Modern Work'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 42 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.077z3j fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 WHERE { fb:m.077z3j fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'1980'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 43 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 44 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.077z3j fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 WHERE { fb:m.077z3j fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'1.75'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 45 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Violet Anne DeSanto'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 46 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Actor'}
            Answers = 1, P = 1.000000, R = 0.500000, F1 = 0.666667
          } [0.008s]
          Answers = 1, P = 1.000000, R = 0.500000, F1 = 0.666667
        } [0.008s]
        Checking schema 47 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Female'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 48 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Grand Rapids'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 49 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.nationality']), ('Entity', '==', 'm.01bm_', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.nationality ?o1 . ?o1 fb:location.location.contains fb:m.01bm_ . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.077z3j fb:people.person.nationality ?o1 . ?o1 fb:location.location.contains fb:m.01bm_ . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.077z3j', 'm.01bm_'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 50 / 146: {
          [('Main', '==', 'm.09q2t', ['base.fashionmodels.hair_color.fashion_models_with_this_hair_color'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09q2t fb:base.fashionmodels.hair_color.fashion_models_with_this_hair_color ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09q2t fb:base.fashionmodels.hair_color.fashion_models_with_this_hair_color ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09q2t'}
            Query return lines = 4
            Final Answer: {'Aleksandra Vukovic', 'Marie-Christine Gessinger', 'Katherine Shane', 'Cassie Sumner'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 51 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.number_of_undergraduates', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 3
            Final Answer: {'5701', '6318', '6232'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 52 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.number_of_postgraduates', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.number_of_postgraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.number_of_postgraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 2
            Final Answer: {'2387', '1894'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 53 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.faculty', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'1079'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 54 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.domestic_tuition', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.domestic_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.domestic_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 4
            Final Answer: {'42230', '37718', '40820', '38848'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 55 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.local_tuition', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.local_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.local_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'39928'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 56 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 2
            Final Answer: {'2.3e+09', '2.18e+09'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 57 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Providence'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 58 / 146: {
          [('Main', '==', 'm.01bm_', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 15
            Final Answer: {'1980', '1970', '2007', '2006', '2000', '2001', '1996', '1991', '1997', '1999', '1989', '1981', '1992'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 59 / 146: {
          [('Main', '==', 'm.01bm_', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 21
            Final Answer: {'Dean', 'Professor of Neuroscience', 'Chancellor', 'Emeritus', 'Research Assistant', 'Post-doctoral Research Fellow', 'NSF VIGRE Graduate Research Fellow', 'Assistant Professor of Physics', 'Associate Professor', 'Assistant Professor, Econometrics', 'University Professor', 'Student Consultant', 'Professor of American Civilization', 'Assistant Professor of Sociology', 'Professor of Engineering', 'Chair of Education, Rosebud Sioux Reservation', 'Assistant Professor', 'Clinical Professor of Medicine', 'Professor of Education', 'Admission Officer', 'Chair of Education'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 60 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.students_graduates', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 12
            Final Answer: {"Master's Degree", 'Master of Medical Sciences', 'Master of Science', 'Master of Arts', 'Doctorate', 'PhD', 'M.A.', 'Bachelor of Science', 'Bachelor of Arts', "Bachelor's degree", 'MFA', 'Doctor of Medicine'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 61 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.students_graduates', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 50
            Final Answer: {'2007', '1985', '2002', '1987', '1966', '1972', '1837', '1981', '1992', '1957', '1842', '2006', '2001', '1994', '1996', '1876', '1976', '1951', '1999', '1964', '1984', '1773', '1983', '1988', '1962', '1882', '2000', '1974', '1997', '1975', '1989', '2003', '1995', '1969', '1955', '1998', '1953', '1980', '1973', '1986', '1990', '1971', '1978', '1991', '1977', '1993', '2008'}
            Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 62 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.students_graduates', 'education.education.specialization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 2
            Final Answer: {'French literature', 'Foreign policy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 63 / 146: {
          [('Main', '==', 'm.01bm_', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 2
            Final Answer: {'55', '15'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 64 / 146: {
          [('Main', '==', 'm.01bm_', ['book.periodical_publisher.periodicals_published', 'book.periodical_publisher_period.publisher'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:book.periodical_publisher.periodicals_published ?o1 . ?o1 fb:book.periodical_publisher_period.publisher ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:book.periodical_publisher.periodicals_published ?o1 . ?o1 fb:book.periodical_publisher_period.publisher ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 65 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 66 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.child', 'organization.organization_relationship.child'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 3
            Final Answer: {'Brown University Center for the Study of Human Development', 'Women Writers Project', 'Watson Institute for International Studies'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 67 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.leadership', 'organization.leadership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 2
            Final Answer: {'2012', '2001'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 68 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.leadership', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 69 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.honorary_degrees_awarded', 'education.honorary_degree.awarded_on'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.educational_institution.honorary_degrees_awarded ?o1 . ?o1 fb:education.honorary_degree.awarded_on ?o2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.educational_institution.honorary_degrees_awarded ?o1 . ?o1 fb:education.honorary_degree.awarded_on ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'2006'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 70 / 146: {
          [('Main', '==', 'm.01bm_', ['education.academic_institution.visiting_scholars_fellows_etc', 'education.academic_post.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:27] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 71 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.acceptance_rate', 'education.acceptance_rate.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.year ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 72 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.number_of_undergraduates', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 3
            Final Answer: {'2010', '2007', '2009'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 73 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.number_of_postgraduates', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.number_of_postgraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.number_of_postgraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 74 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.faculty', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 75 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.domestic_tuition', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.university.domestic_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.university.domestic_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 76 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.local_tuition', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.university.local_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.university.local_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 77 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 78 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.headquarters', 'location.mailing_address.state_province_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Rhode Island'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 79 / 146: {
          [('Main', '==', 'm.01bm_', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 12
            Final Answer: {'2007', '1990', '1985', '2002', '1994', '2004', '1993', '2003', '1995', '2008', '1998', '1992'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 80 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.students_graduates', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 40
            Final Answer: {'Playwriting', 'International relations', 'Philology', 'Mathematical Economics', 'English studies', 'Engineering', 'Neuroscience', 'Applied mathematics', 'Electrical engineering', 'English Literature', 'Arts', 'Computer Science and Mathematics', 'Italian Renaissance', 'English Language', 'Theatre Arts', 'American studies', 'Comparative literature', 'Biology', 'Theatre', 'Biochemistry', 'Psychology, Religious Studies', 'Philosophy', 'Semiotics', 'Urban Studies', 'Italian studies', 'Biochemical Pharmacology', 'Economics', 'Computer Science', 'Architectural engineering', 'Mechanical Engineering', 'Fiction', 'Applied Mathematics-Economics', 'Mathematics', 'Mathematical physics', 'Sociology', 'Linguistics', 'History', 'Medicine', 'Physics', 'Musicology'}
            Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 81 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.students_graduates', 'education.education.minor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.minor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.minor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Continental philosophy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 82 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.board_members', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 83 / 146: {
          [('Main', '==', 'm.01bm_', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 84 / 146: {
          [('Main', '==', 'm.01bm_', ['fictional_universe.fictional_employer.employees', 'fictional_universe.fictional_employment_tenure.employee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.employee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.employee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Josiah S. Carberry'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 85 / 146: {
          [('Main', '==', 'm.01bm_', ['fictional_universe.fictional_employer.employees', 'fictional_universe.fictional_employment_tenure.employer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.employer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.employer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 86 / 146: {
          [('Main', '==', 'm.01bm_', ['fictional_universe.fictional_employer.employees', 'fictional_universe.fictional_employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Professor of Psychoceramics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 87 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization_member.member_of', 'organization.organization_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'1933'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 88 / 146: {
          [('Main', '==', 'm.01bm_', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 89 / 146: {
          [('Main', '==', 'm.01bm_', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 90 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.leadership', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 91 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.leadership', 'organization.leadership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.to ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 92 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.honorary_degrees_awarded', 'education.honorary_degree.recipient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.honorary_degrees_awarded ?o1 . ?o1 fb:education.honorary_degree.recipient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.honorary_degrees_awarded ?o1 . ?o1 fb:education.honorary_degree.recipient ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Paul Volcker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 93 / 146: {
          [('Main', '==', 'm.01bm_', ['education.academic_institution.visiting_scholars_fellows_etc', 'education.academic_post.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.from ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'1811'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 94 / 146: {
          [('Main', '==', 'm.01bm_', ['education.academic_institution.visiting_scholars_fellows_etc', 'education.academic_post.position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Professor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 95 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.acceptance_rate', 'education.acceptance_rate.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.rate ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'9'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 96 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.domestic_tuition', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.domestic_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.domestic_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 4
            Final Answer: {'2010', '2008', '2011', '2009'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 97 / 146: {
          [('Main', '==', 'm.01bm_', ['education.university.local_tuition', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.local_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.university.local_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 98 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'2011'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 99 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.headquarters', 'location.mailing_address.postal_code'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'02912'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Current: 100 / 146
        Checking schema 100 / 146: {
          [('Main', '==', 'm.01bm_', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 112
            Final Answer: {'Peter D. Eimas', 'Andries van Dam', 'Robert Creeley', 'Alan Needleman', 'Joe Harris', 'Thomas A. Mutch', 'Horațiu Năstase', 'James Der Derian', 'George Grafton Wilson', 'Hans Rothfels', 'Lars Peter Hansen', 'Erin Cressida Wilson', 'Hugh Llewellyn Keenleyside', 'Howard Swearer', 'George Wilton Field', 'William Feller', 'Joseph H. Silverman', 'Meinolf Sellmann', 'Jeffrey Vitter', 'Gerald Guralnik', 'Brian Munson', 'Ama Ata Aidoo', 'William G. McLoughlin', 'David Kertzer', 'John P Donoghue', 'Sattar Memon', 'Francis Wayland', 'George W. Whitehead', 'Nancy Milford', 'Maurice Herlihy', 'Phillip D. Cagan', 'Kenneth R. Miller', 'William Damon', 'Vesa Kanniainen', 'John Hawkes', 'Eugene Lee', 'Lina Fruzzetti', 'Susan E. Alcock', 'Henry Kucera', 'Clarence Barbour', 'Forrest Gander', 'Henry Wriston', 'Michael S. Harper', 'Joan Wallach Scott', 'Huajian Gao', 'Dwight B. Heath', 'David C. Lewis', 'Michael C. J. Putnam', 'Robert Kates', 'Thomas J. Tisch', 'Kurt Raaflaub', 'James T. Campbell', 'Robert Bruce Lindsay', 'Robert Scholes', 'Carolyn D. Wright', 'Glenn Loury', 'Sergei Khrushchev', 'David Mumford', 'Vartan Gregorian', 'David F. Duncan', 'Brian Weatherson', 'Omer Bartov', 'Roderick Chisholm', 'Eugene Charniak', 'Michael D. Kennedy', 'James A. Anderson', 'Gordon S. Wood', 'Alexis Caswell', 'Thomas Banchoff', 'Paul R. Gross', 'Alpheus Spring Packard', 'Paula Vogel', 'Barbara Herrnstein Smith', 'James Manning', 'Richard Taylor', 'Robert Coover', 'E. Gordon Gee', 'Leonard Carmichael', 'Ricardo E. Dolmetsch', 'James Burrill Angell', 'William Faunce', 'Ezekiel Robinson', 'Walter E. Massey', 'Ruth Simmons', 'Richard Meyer', 'Ron Nelson', 'Anne Fausto-Sterling', 'David Berson', 'William S. Massey', 'Stephen D. Houston', 'Richard Schwartz', 'Lida Shaw King', 'Leon Cooper', 'Glenn R. Carroll', 'Elisha Andrews', 'Herbert E. Walter', 'Prudence L. Carter', 'Richard Longabaugh', 'Gigliola Staffilani', 'Chris Maden', 'Paul Phillips', 'Lars Onsager', 'Carlos Fuentes', 'Albert Harkness', 'Hendrik J. Gerritsen', 'Mark Tribe', 'John Edgar Wideman', 'William Jordy', 'Chia-Chiao Lin', 'A. Hunter Dupree', 'Otto E. Neugebauer', 'Fernando Henrique Cardoso'}
            Answers = 112, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 112, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 101 / 146: {
          [('Main', '==', 'm.01bm_', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 102 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.students_graduates', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 103 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.students_graduates', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1513
            Final Answer: {'Richard Olney', 'Gary P. Naftalis', 'Michael Parenti', 'George Musser', 'John Spaeth', 'Thomas Rothman', 'Bill Lichtenstein', 'Stewart Baker', 'Atrios', 'Matthew Sussman', 'Nelson Dunford', 'Peleg Arnold', 'Benjamin Rosenbaum', 'Gustaf Sobin', 'Dan Greenberg', 'Henry Simmons Frieze', 'Gene Karpinski', 'John W. Mayhew', 'Martin Heller', 'Franklin E. Brooks', 'Emma Watson', 'Richard D. James', 'Tom Bodkin', 'Tim Barsky', 'Omar Saeed', 'George Boas', 'Gerald Maurice Clemence', 'Jen Chapin', 'James Burrill, Jr.', 'Peter Franaszek', 'Thomas Glave', 'Adam Leventhal', 'John Elof Boodin', 'Nick Chinlund', 'David Shields', 'Mark Goresky', 'Michael Huttner', 'Susan Cheever', 'William D. Williamson', 'Dick Dreissigacker', 'Eric Klinenberg', 'Kate Ascher', 'Ken Johnson', 'Fred Turner', 'Kent Greenfield', 'William B. Widnall', 'Robert John Maden', 'Mark Attanasio', 'Mark Farnum', 'Tracee Ellis Ross', 'David Cicilline', 'Stanley Palmer', 'Alex Cohen', 'Samuel S. Cox', 'Silas Weir Mitchell', 'Meyer Jerison', 'Marcella Echavarría', 'Frank Wheaton', 'Scott Snyder', 'Sarah Morris', 'John Connell', 'Robert E. Quinn', 'Cecilia Tan', 'Thomas Alexander Tefft', 'Nathan F. Dixon II', 'Roderick W. Moore', 'Derrick Henry Lehmer', 'Jonathan Klein', 'Charles Stanford', 'Paul Schneider', 'Keith Lehrer', 'Dagmar Herzog', 'Max Hoffman', 'Andrew L. Shapiro', 'Ray Kassar', 'James Cerretani', 'Kelly D. Brownell', 'Donald Kagan', 'William Seeley', 'Sean Hood', 'Thomas Jenckes', 'Harry Zolnierczyk', 'Afaa M. Weaver', 'Jeffrey P. Buzen', 'Xi-Cheng Zhang', 'Tom Gardner', 'Ted Chiang', 'David Onek', 'Sarah Gambito', 'Gareth Cook', 'Charles Warren Greene', 'Emma Lehmer', 'Robert Hale Ives Goddard', 'Simon Newton Dexter', 'Kathleen Kauth', 'Samuel G. Arnold', 'Julius C. Michaelson', 'Bob Wallace', 'Ken Fields', 'Beongcheon Yu', 'Bridget Carpenter', 'Prince Fedor Nikitich Romanov', 'John Maxtone-Graham', 'James Hendler', 'Bill Wirtz', 'Leila Pahlavi', 'Maya Keyes', 'Moultrie Patten', 'Jeff Dennis', 'Jennifer Richeson', 'Joseph Bologna', 'Eli Thayer', 'Theodore Schick', 'Ryan Mulhern', 'Eric Albert', 'Randall Kroszner', 'Phillip Kott', 'Philip W. Noel', 'Edwin Gaustad', 'Colin Cheney', 'Marisa Catalina Casey', 'Hermon Carey Bumpus', 'John W. Wydler', 'Michael Chorost', 'Elizabeth J. Braswell', 'Nathanael West', 'David B. Coe', "Sarah O'Brien", 'Raymond Louis Wilder', 'Bernard Whitman', 'Joseph B. Keenan', 'Barnas Sears', 'Daniel K. Williams', 'Edwards Amasa Park', 'Thomas Ewing, Jr.', 'Franklin J. Dickman', 'Danny Rubin', 'John Reed, Jr.', 'Steven M. Mankoff', 'Raymond J. Barry', 'Shay Youngblood', 'Chas Gessner', 'Michael J. Rosenfeld', 'Gary Ginsberg', 'Brian Lies', 'Joseph Ward', 'Thomas G. Plante', 'Andrew W. Lewis', 'Pamela Arya', 'Peter Pezzelli', 'Asger Aaboe', 'Charles R. Train', 'Theodore F. Green', 'Scott Snibbe', 'Ted Selker', 'Samuel Starkweather', 'Robert Bruce Lindsay', 'William Baylies', 'George Moulton Carpenter, Jr.', 'Choon T. Chon', 'Gavriel David Rosenfeld', 'Arthur R. Taylor', 'Sheila Bridges', 'Horace Everett', 'Bern Porter', 'Michael Bhatia', 'James J. Cimino', 'Gail Albert Halaban', 'Judith Jacobson', 'Joel Cohen', 'Leah Blatt Glasser', 'William Hunter', 'William Cook', 'Pendleton Murrah', 'Susan Minot', 'Samuel C. Eastman', 'Jacob M. Appel', 'Mark A. Musen', 'André Leon Talley', 'Pliny Porter', 'Frederick R. Goff', 'Dan Maffei', 'Larry Leon Hamlin', 'Peter Gevisser', 'Will Luo', 'Billy Lauder', 'Thomas Hale Sill', 'John Stasko', 'Paul Allen', 'John Eisendrath', 'Christopher Myers', 'Ayanna Howard', 'Robert L. Park', 'Wing Tek Lum', 'Paul Laffoley', 'S. T. Joshi', 'Burt Shevelove', 'Anthony Arnove', 'Thalia Field', 'Jude Ciccolella', 'Dean L. May', 'Karl Kroeger', 'Katherine Chon', 'Katharina Galor', 'Irving Stowe', 'Richard Wiese', 'Marcus Morton', 'Al Cornsweet', 'Annette Nazareth', 'Rob Kapuscinski', 'Ferdinand P. Beer', 'Job Durfee', 'Kim Insalaco', 'Marie Lee', 'Wally Snell', 'Zachariah Allen', 'Tom Geismar', 'Catherine Masud', 'John Milton Thayer', 'Tommy Dowd', 'Chelsie J. Senerchia', 'James Naughton', 'Robert Rynasiewicz', 'Marian Thurm', 'Patrick Aebischer', 'Stephen R. Fox', 'Shu Shien-Siu', 'Todd Haynes', 'Mark Trodden', 'James Coulter', 'Clarence Edwin Ayres', 'William Edward White', 'Peter Norvig', 'William L. Marcy', 'Robert Somol', 'Martin Bernheimer', 'Arthur H. Bulbulian', 'Nina Jacobson', 'Edward William Day', 'Leila Feinstein', 'Brian T.  Moynihan', 'Igor Ansoff', 'Ilsley Boone', 'Leslie Winner', 'Theresia Gouw Ranzetta', 'Theodore Shapiro', 'Thomas Gardiner Corcoran', 'Lucas McGee', 'Nancy Rubin Stuart', 'Judith Dupré', 'John Hay', 'Henry Appleton', 'Laura Rothenberg', 'Bruce Riedel', 'Christopher Rice', 'Elizabeth Searle', 'Melvin Dixon', 'Patricia Powell', 'George Crowther', 'Henry F. Lippitt', 'Patricia Keating', 'Lynn J. Rothschild', 'Warren Randolph Burgess', 'James Kaminsky', 'Charles Ansbacher', 'Andrew Dexter, Jr.', 'Ange Mlinko', 'Christopher Bache', "John J. O'Connor", 'Loring Woart Bailey', 'Josh Levin', 'John Welchli', 'James Allen Graff', 'Samuel Genensky', 'W. Tecumseh Fitch', 'Elisha Andrews', 'Adoniram Judson', 'Edward L. Pierce', 'Taryn Simon', 'Jerry White', 'Laura Geller', 'Douglas H. Paal', 'Kathryn Schulz', 'Mark Tribe', 'Charles C. Tillinghast, Jr.', 'Greg Lalas', 'Joseph J. Collins', 'Peter B. Germano', 'Martin J. Badoian', 'John Wesley Gilbert', 'Steven Rattner', 'Arthur Irving Andrews', 'Anisha Tomlinson', 'Zachary Lazar', 'Tahesha Way', 'John Hamburg', 'Lewis M. Feldstein', 'Sidney Frank', 'Eswar Prasad', 'Mark Donohue', 'Suzanne Whang', 'J. Mayo Williams', 'Lori Hope Lefkovitz', 'Josh Friedman', 'John A. Dillon', 'Maria Zuber', 'Alexandra von Fürstenberg', 'Michael B. Silver', 'Robert M. Gagné', 'John Davis', 'David Sosa', 'Ray Tift', 'J. A. Gammons', 'Kátia Lund', 'Seth Berkley', 'Andrew Chaikin', 'Michael A. Cardozo', 'Buddy Dyer', 'Tom Pincince', 'Tim Blake Nelson', 'Joanna Zeiger', 'Samantha Gillison', 'Benjamin Smith', 'Lawrence M. Small', 'Gina Gionfriddo', 'William Tong', 'David Ebershoff', 'Ben Lerner', 'Ayad Akhtar', 'James Brown Mason', 'Daniel Asa Rose', 'Lee Richmond', 'Jill Golick', 'Frederick Irving', 'Kevin V. Mulcahy', 'Saul Shapiro', 'William Leete Stone, Sr.', 'Ben Marcus', 'Steven Millhauser', 'Chauncey Allen Goodrich', 'Monica Breen', 'Rick Moody', 'Chazz Woodson', 'Ted LeFevre', 'Sean Dorrance Kelly', 'Sabina Magliocco', 'Chuck Hoberman', 'John Albert Broadus', 'Horace Mann', 'Paul Barbara', 'Jonathan Franklin', 'Lisa Caputo', 'Leelee Sobieski', 'Liliana Greenfield-Sanders', 'Tom Dey', 'David Allyn', 'John Christopher Mahoney', 'Elizabeth Neel', 'Leora Auslander', 'Ira Magaziner', 'Sean Eldridge', 'John Bonifaz', 'Jay Newman', 'Brian Christian', 'Samuel L. Crocker', 'Davis Guggenheim', 'Raymond Hood', 'Carolyn Stafford Stein', 'Jesselyn Radack', 'Lee Eliot Berk', 'Thomas DeLio', 'Michael C. Nichols', 'Robert Lazarsfeld', 'Thuy Diep', 'Thomas G. Barnes', 'Carl Porter Duncan', 'Lillian Robinson', 'John M. Barry', 'Samuel Cony', 'Nalini Nadkarni', 'Joan Massagué Solé', 'Cory Gibbs', 'Richard Walton', 'Robert G. Flanders, Jr.', 'Alex McAulay', 'Asa Drury', 'Margaret Stumpp', 'Lisa Loeb', 'Annie Sulzberger', 'Ian Maxtone-Graham', 'Robert N. Scola, Jr.', 'William Harrison Courtney', 'Dom Starsia', 'Dutee Jerauld Pearce', 'William Gaston', 'Eric Doeringer', 'Butch Spagna', 'Alexandra Kerry', 'Steve Jordan', 'Jennifer Lowe', 'Katrina Carlson', 'John Sculley', 'Marty Clapton', 'Daniel Kraft', 'Nehemiah Shumway', 'Greg Winter', 'Brian Binnie', 'Adrian C. Louis', 'Abbott Barnes Rice', 'Jason Olim', 'Jimmy Pedro', 'Ployer Peter Hill', 'Prince Feisal bin Al Hussein', 'George B. Hutchinson', 'Rusty Magee', 'Erroll Southers', 'Richard L. Shriner', 'David Schmittlein', 'Jane Rosenthal', 'Danya Ruttenberg', 'Amy Van Nostrand', 'Kyle Rowley', 'Debra L. Lee', 'Jamie Metzl', 'Edgar S. Brightman', 'David Rogerson Williams', 'Clare Burson', 'Dick Bulterman', 'Kathryn S. Fuller', 'Jarod Green', 'Nathan F. Dixon I', 'Charles McCarthy', 'Tai Hernandez', 'Thomas Mallon', 'Margaret Brown', 'John Howland Rowe', 'Ann Harada', 'Bee Vang', 'Jeff Shesol', 'Kurt Mueller-Vollmer', 'Andy Greenwald', 'Alexander Meiklejohn', 'Fritz Pollard', 'Randy Haykin', 'Vernon Rosario', 'Zak DeOssie', 'Everett M. ""Busy"" Arnold', 'John H. Clifford', 'Rachel Sherman', 'Shelley Jackson', 'Bill Bollinger', 'Selmer Bringsjord', 'Edwin Grant Dexter', 'Lisa Strausfeld', 'Oren B. Cheney', "Dilip D'Souza", 'Reif Larsen', 'Aneel Bhusri', 'Francis Wayland III', 'Frank E. Winsor', 'Mark Maremont', 'Tony Horwitz', 'John Dierkes', 'Gwyneth Walker', 'Lloyd Ohlin', 'Michael Gershman', 'Nils Yngve Wessell', 'Ira Lloyd Letts', 'Stanley Falkow', 'Barnaby Evans', 'Lynn Nottage', 'Nancy Northup', 'James Corum', 'Maggie Hassan', 'Usha Lee McFarling', 'Eliphalet Nott', 'Eve Gordon', 'Deirdre Hanford', 'Alexandra Tydings', 'Magee Hickey', 'Nancy Donohue', 'Stephen P. Hill', 'George Frederick Wright', 'Arn Chorn-Pond', 'Aaron Volpatti', 'Gordon Macklin', 'Ellen Greenstein Millender', 'William Donald Kelley', 'Edmund A. Sargus, Jr.', 'Daniel L. Stein', 'David Maxwell', 'Wallace Wade', 'Lester Hyman', 'Karen M. Hoguet', 'Herbert E. Walter', 'Ira Schneider', 'Ben Shenkman', 'Sushma Joshi', 'Barnabas Bidwell', 'Andrew C. Hecht', 'Ruth Root', 'Peter Balakian', 'Asa Messer', 'Adoniram Judson Gordon', 'Albert Harkness', 'John Allen Gable', 'Sandeep Parikh', 'Nathan F. Dixon III', 'Kyle Wailes', 'Ben Harvey', 'Philip Baruth', 'Tarek Shawki', 'Paul Hodge', 'Lucy Jones', 'Thomas O. Paine', 'Matthew Miller', 'Adam Werbach', 'Samuel Eddy', 'Bill Almon', 'Yaya DaCosta', 'Samuel M. Nabrit', 'George Wilton Field', 'Randy Pausch', 'Alison Stewart', 'Dave Given', 'Eduardo Montealegre', 'Robert M. Hall', 'Theron Metcalf', 'Katia Sycara', 'Larry Elder', 'Carol Fowler', 'Chet Nourse', 'Tara Summers', 'Benjamin Ide Wheeler', 'Stephen W. Nease', 'Thomas Tamm', 'Steven Emerson', 'Martin M. Wattenberg', 'Rodrigo Lehtinen', 'William R. Rhodes', 'Daniel L. D. Granger', 'Duncan Sheik', 'Nathaniel Philbrick', 'David A. Burchinal', 'Bobby Sewall', 'George S. Barrett', 'George Lincoln Rockwell', 'Sanford Robinson Gifford', 'Christine Vachon', 'Nilo Cruz', 'Melanie Mitchell', 'David C. Lewis', 'Suzanne Goin', 'Joshua Segall', 'John Krasinski', 'John Henderson', 'Rinku Sen', 'Charles S. Bradley', 'Henry Wheaton', 'Walter Hoving', 'Jayapataka Swami', 'Peter Calabresi', "Dan O'Brien", 'Will Oldham', 'Thomas Hassan', 'James A. Anderson', 'Leah Meyerhoff', 'Robert Royal', 'Charles B. Carter', 'Rosemary A. DiCarlo', 'Ann Arvin', 'Ted Dewan', 'Charles H. Giancarlo', 'Charles Häberl', 'Joshua Toulmin', 'Zechariah Chafee', 'Don Colo', 'Jeff Stibel', 'Stephen M. Kohn', 'Reginald Shepherd', 'S. J. Perelman', 'William Ruggles', 'David Buskin', 'Patricia Regan Maden', 'Thomas Byrne Edsall', 'Nicole Leach', 'Scott Shenker', 'Charles D. Millard', 'Yeheskel Bar-Ness', 'Tara Mounsey', 'Maya Sonenberg', 'Hubert M. Blalock', 'Jeff Farias', 'Lois Lowry', 'George E. Coghill', 'Amy Kellogg', 'Shael Polakow-Suransky', 'Willis Adcock', 'Alex Wagner', 'Lady Gabriella Windsor', 'Joseph Bucklin Bishop', 'Albert Smith', 'Aaron T. Beck', 'Sarah McFarland Taylor', 'Austin Volk', 'Larry Kramer', 'Jack Cera', 'Frank Sexton', 'George H. Browne', 'Ezekiel Whitman', 'Mallika Chopra', 'Robert A. Corrigan', 'Frank Licht', 'Irving R. Levine', 'Robert N. Chatigny', 'Jackson Keefer', 'Kaja Silverman', 'Steven Berlin Johnson', 'A. B. Rogers', 'Mark Malamud', 'Alexander von Fürstenberg', 'Joanna Scott', 'Roland Merullo', 'Kelly Benoit-Bird', 'George Burgess', 'Brian D. Rogers', 'David Lipsky', 'Bernard Budiansky', 'Masi Oka', 'Jonathan Wise', 'Ira Glass', 'Francis Wayland', 'Robert Kovacik', 'Gretchen C. Icenogle', 'Greg Costikyan', 'Bruce Caldwell', 'Kenneth R. Miller', 'A. Richard Caputo', 'Charles Taliaferro', 'Mee Moua', 'Dana Goldstein', 'Timothy Kelly', 'Rafe Judkins', 'Tina Holmes', 'Katie King', 'George Burwell Utley', 'Erich Kunzel', 'William Bullein Johnson', 'Scott Bukatman', 'Heather McGowan', 'Douglas Harriman Kennedy', 'Thomas J. Tisch', 'Ross McElwee', 'Benjamin Bolger', 'Shirish Korde', 'Luther Luedtke', 'Thomas W. Bicknell', 'Steven A. Katz', 'Barbara Baskett', 'Leah Gilliam', 'Virgil Maxcy', 'Samuel Belkin', 'Baltasar Mena Iniesta', 'James Ervin', 'Michael Bell-Smith', 'Dave Cole', 'S. Elizabeth Birnbaum', 'George Maden', 'James A. McIntyre', 'Henry B. Anthony', 'Darren Lowe', 'Jonathan Russell Bullock', 'Richard Holbrooke', 'Elana Greenfield', 'Ann Holmes Redding', 'Aaron Schatz', 'Benjamin Percy', 'Jorge Ignacio Cortiñas', 'Richard Taylor', 'Keiron Bigby', 'Nancy Lublin', 'Dhani Harrison', 'Clea Lewis', 'Dimitrios Gavriel', 'Scott Meyers', 'Rhonda Ross Kendrick', 'John Dukakis', 'Ed Bok Lee', 'Nick Winton', 'Marco Beltrami', 'Ray Schnettgoecke', 'Bill Tindall', 'Solomon Sibley', 'Jessica Straus', 'Harry Wild Jones', 'Christine Lehner', 'Lewis Linn McArthur', 'Brian Parks', 'Fred Feldman', 'Xeno Müller', 'Elizabeth Levy', 'Henry Traphagen', 'Chuck Davis', 'Michael Fessler', 'Raymond G Viault', 'Byron K. Lichtenberg', 'John Hopkins Clarke', 'Jesse Stout', 'Peter Corning', 'Michael Mandiberg', 'Dean Zimmerman', 'Jim Shepard', 'Eliot Stellar', 'Susie Suh', 'Don Share', 'David Yazbek', 'Elvis Perkins', 'Kenneth Alan Ribet', 'Laura Linney', 'Sean Altman', 'Craig Kallman', 'Michael Schober', 'Felice Schachter', 'Nicanor Parra', 'Edward Ball', 'William Augustus Mowry', 'Sam Walter Foss', 'Mary Emma Woolley', 'David Gockley', 'Marian Salzman', 'Jared W. Williams', 'Maureen Raymo', 'Zeinabu irene Davis', 'James Cooley Fletcher', 'William J. Bakrow', 'Oliver Ames', 'Dave Kopel', 'Paul Baier', 'Dallas Lore Sharp', 'Carl Pomerance', 'Chris Bartlett', 'Bryan Cantrill', 'Anthony Dryden Marshall', 'A.J. Jacobs', 'Catie Curtis', 'Katherine L. Adams', 'Prince Nikolaos of Greece and Denmark', 'Jessica Meir', 'Gabriel Kahane', 'Florencio Campomanes', 'James B. Simmons', 'Curly Oden', 'James Coven', 'Albert D. Bosson', 'Lyn Devon', 'Willoughby Sharp', 'Dave Fultz', 'Lloyd B. Minor', 'Doug Liman', 'Linda Martín Alcoff', 'Dave Bartis', 'Francisco Besosa', 'Alan Levy', 'Peter H. Falk', 'James Fenner', 'Frederic M. Sackett', 'John Patrick Hartigan', 'Astra Taylor', 'Ricardo E. Dolmetsch', 'Eric L. Muller', 'Jack D. Schwager', 'Erin McKeown', 'Charles Giancarlo', 'Anne Fausto-Sterling', 'Craig Waters', 'Lida Shaw King', 'Keith Ablow', 'Elisha Dyer, Jr.', 'Fredson Bowers', 'Blair Moody', 'Tad Kinchla', 'Tristam Burges', 'Aaron Hobart', 'Arthur Gregg Sulzberger III', 'Richard Campagna', 'Mere Smith', 'Bruce Donovan', 'Louis L. Redding', 'Princess Theodora of Greece and Denmark', 'Emily Arnold McCully', 'Herman Chernoff', 'John Spellman', 'Tala Hadid', 'Frank Sigel Dietrich', 'Harry Usher', 'Bruce J. Katz', 'Gary A. Robbins', 'Peter Jacobson', 'Alicia Sacramone', 'Paul Fonoroff', 'George Forsythe', 'George Grafton Wilson', 'Tad Devine', 'Kent Haines', 'Melvin Swig', 'Liz Canner', 'Sarah Kay', 'Eva Amurri', 'Peter F. Allgeier', 'Carl Pfaffmann', 'Mara Liasson', 'Janis Mayes', 'Walter Guyton Cady', 'Anne Morgan Spalter', 'M. G. Nadkarni', 'Mark Halliday', 'Kate Burton', 'Ken Starr', 'Lisa Jarnot', 'Louise A. Tilly', 'Manish K. Sethi', 'David H. Goodell', 'William Joo', 'danah boyd', 'Daniel Fischel', 'William E. Cooper', 'Virgil L. Sharpton', 'Jessica Capshaw', 'Stephanie Ittleson', 'Deb Talan', 'Julie Warner', 'Simon Kinberg', 'Constance Beresford-Howe', 'John Ruggles', 'Stan Allen', 'Lili Haydn', 'Jack N. Lightstone', 'Paul Spudis', 'Anna Pierce', 'T. E. D. Klein', 'Rebecca Pronsky', 'David F. Duncan', 'Teg Grenager', 'Mary Dearborn', 'Lafayette S. Foster', 'Aram Chobanian', 'Bill Pepicello', 'Brian Attebery', 'Frank Chipasula', 'Asa Mader', 'Harry Shulman', 'Priscilla Martel', 'Alexis Caswell', 'James Francis Ross', 'Janet Yellen', 'Harry Henshel', 'Nina Katchadourian', 'Bess Armstrong', 'Richard Hart', 'Charles Evans Hughes III', 'Becky Stark', 'Frederick Bernays Wiener', 'James Risen', 'Arthur L. Carter', 'Geoffrey Wawro', 'Nicole Dryden', 'Christian S. Johansson', 'Joan Lescinski', 'Nan Zhang', 'Marvin Bower', 'Pearn P. Niiler', 'Elie Hirschfeld', 'John Seely Brown', 'Darren Erik Vengroff', 'Adam Shulman', 'Ruth Milkman', 'Robin Green', 'Eli Marienthal', 'Chi-Ming Chow', 'Oscar Lapham', 'Murray H. Protter', 'John Tukey', 'Alexander Lyman Holley', 'Emma Cunningham', 'Lila Rose Kaplan', 'L. F. P. Curry', 'Nicholas Brown, Jr.', 'Vance E. Salter', 'Earl Sprackling', 'Michael Panes', 'Steven Zwicker', 'Donald Carcieri', 'Carlos Yushimito', 'Bob Doyle', 'Catherine Imbriglio', 'Joseph H. Silverman', 'Jeremiah Chaplin', 'John Heisman', 'Cecile Richards', 'Nathaniel Davis', 'Stephen Philbrick', 'Michael Scharf', 'David Grinspoon', 'Yann Danis', 'Howard A. Coffin', 'Clark Aldrich', 'Rufus Griscom', 'Frans Johansson', 'Navah Perlman', 'Victoria Nuland', 'Jack E. Robinson III', 'Michael Showalter', 'Jon Moritsugu', 'Lincoln Chafee', 'John Baldwin', 'Adam Ulam', 'Sean Morey', 'Andrew Sean Greer', 'Seth Berry', 'Louis L. Carter', 'Kam Williams', 'Celeste Katz', 'George Park Fisher', 'Ruth Hussey', 'John Bailey', 'Michael P. Breen', 'Malcolm Baker', 'Glenn Kessler', 'Ridley Pearson', 'Brian Selznick', 'Dana Cowin', 'Kriyananda', 'Manuel Rodríguez Orellana', 'John D. Rockefeller, Jr.', 'Steven McElroy', 'Andy Hertzfeld', 'Ed Lawrence', 'Marin Hinkle', 'Mary Chapin Carpenter', 'Bert Shurtleff', 'Angel A. Cortiñas', 'Eddie Eayrs', 'William O. Harbach', 'Robert Schapire', 'Jeremiah Bailey', 'Rufus Babcock', 'Dayton Carr', 'Steven Massarsky', 'Phyllis Jen', 'Charles Sheldon', 'Maud Slye', 'Rex Chiu', 'Heidi Neumark', 'Thornton Chase', 'Edward L. Leahy', 'Jonathan Roberts', 'Clare Johnson', 'John Pleshette', 'Jeffrey Friedman', 'Sherley Anne Williams', 'Benjamin Adams', 'John Brown Francis', 'Adrian Dearnell', 'Winslow Upton', "Bill O'Brien", 'Dick Allen', 'Wilson Jeremiah Moses', 'Jonathan Maxcy', 'Meg Wolitzer', 'Chip Giller', 'John F. Simon Jr.', 'George H. Main', 'Joseph L. Tauro', 'Amy Sohn', 'David Conrad', 'Elizabeth H. Roberts', 'Daisy Prince', 'Susan Holloway Scott', 'Chaka Forman', 'Mark Whitney Mehran', 'Harlan True Stetson', 'William Leete Stone, Jr.', 'Amanda Green', 'Jenny Saffran', 'Insoo Hyun', 'Karen An-hwei Lee', 'Samuel Rotondi', 'Taylor G. Belcher', 'Catherine N. Duckett', 'Joel de la Fuente', 'Winfield Townley Scott', 'Gordon Keith Chalmers', 'Waldo Gifford Leland', 'Thomas Watson, Jr.', 'Andrew Wagner', 'Brian Eklund', 'Jack Murnighan', 'Hal Neubauer', 'Robert Bingham', 'Dwight Foster', 'Frances Cairncross', 'Jonathan M. Nelson', 'Brian Floca', 'Silas Alward', 'George M. C. Fisher', 'Warren A. Cole', 'Richard R. Day', 'Frederick J. Almgren, Jr.', 'Samuel Gridley Howe', 'Liz Garbus', 'Tim Forbes', 'Yang Wei', 'Benjamin F. Hallett', 'John Coleman Moore', 'Charles W. Lippitt', 'Gregory Ilich', 'Mika Yamaji', 'Michael Newdow', 'William H. Bates', 'Paul Kazarian', 'Becky Kellar-Duke', 'Theodore Foster', 'Fred Tenney', 'Peter C. Reiss', 'Kate Bornstein', 'Neil Miller', 'Edward Caldwell Moore', 'Rick Trainor', 'Josh Marshall', 'William H. Frey', 'James A. MacAlister', 'Gordon Kidd Teal', 'Maxim D. Shrayer', 'John Black Lee', 'Frank Philbrick', 'Julie Bowen', 'David Kelley', 'Stephen Gendin', 'Nawal M. Nour', 'William Faunce', 'Michael L. Littman', 'William L. Stone', 'Anne K. Mellor', 'Andrew Revkin', 'Michael E. Wysession', 'Jordan Carlos', 'Sam Lipsyte', 'Mary K. Trigg', 'John J. Sullivan', 'David Kennedy', 'Richard Hertling', 'Hendrik J. Gerritsen', 'Russell ""Busty"" Ashbaugh', 'Charles Edwin Wilbour', 'Charles Evans Hughes, Jr.', 'S. Kent Brown', 'Geoffrey Bowers', 'Tucker Nichols', 'Thomas McCormack', 'Iris Bahr', 'Jerry A. Hausman', 'Robert Cormack', 'Willis Richardson', 'Kitty Chen', 'Daniel R. Anderson', 'Charles H. Mason', 'Jamie Laurie', 'Geoffrey Loftus', 'Geoffrey A. Landis', 'Kip Hawley', 'Willbur Fisk', 'George Makari', 'Kiara Brinkman', 'Matt Marcy', 'James Louis Garvin', 'Augustus O. Bourn', 'Alexander Viets Griswold', 'Charles Colson', 'Elisha Bartlett', 'Margaret L. Anderson', 'Paul Garabedian', 'Michael Gizzi', 'Hannah Pingree', 'Margery Bronster', 'Juliet M. Brodie', 'Daniel R. Schwarz', 'Norman S. Case', 'Marsha Hanen', 'Sara Tanaka', 'Brendan McConville', 'Robert W. Morse', 'Ebenezer Stoddard', 'Arianna Zukerman', 'Buddy Farnham', 'Donna Nesselbush', 'William Paine Sheffield, Jr.', 'Augustus Stout Van Wickle', 'Sunil Tripathi', 'Mallika Kapur', 'Kayce Freed', 'James Mitchell Varnum', 'damali ayo', 'Scott Sanders', 'James H. Higgins', 'John Robert Cobb', 'Mike Purdy', 'Devon Dikeou', 'JoBeth Williams', 'William Williams Keen', 'Richard Karl Goeltz', 'Louis C. Midgley', 'George B. Francis', 'Arthur Upham Pope', 'Sarah Shun-lien Bynum', 'Rashmi Sinha', 'Arthur Evans', 'Edward L. Sittler, Jr.', 'Roderick Chisholm', 'Brian Leach', 'James Petigru Boyce', 'Alfred A. Gemma', 'Chester I. Reed', 'Thomas Dougherty', 'Lafe Solomon', 'James Gillies', 'Morton Gurtin', 'Hal Barwood', 'Jim Yong Kim', 'Hyatt Howe Waggoner', 'Fukuzawa Yukichi', 'Jack Menzel', 'R. P. Eddy', 'Sangeeta N. Bhatia', 'Kenneth Roth', 'Curtin Winsor, Jr.', 'John Kim', 'Ezekiel Robinson', 'Darrell M. West', 'Jonathan Adler', 'Katie Farris', 'Paul Michael', 'Nicolas Jaar', 'Theodore R. Boehm', 'Rahim Aga Khan', 'Coco Fusco', 'Deborah Garrison', 'Ted Turner', 'Jose B. Gonzalez', 'Jonathan Levine', 'Dara Khosrowshahi', 'Nic Kelman', 'Quiara Alegría Hudes', 'Richard Kostelanetz', 'Mark Strama', 'Alfred Uhry', 'James Thomas Stevens', 'Andries van Dam', 'Constance Hunting', 'Eric Nadel', 'Scott Aversano', 'Thomas J. Perrelli', 'Roger C. Carmel', 'Faye Ringel', 'Allyn L. Brown', 'Ojetta Rogeriee Thompson', 'Ethan H. Shagan', 'John G. Haskell', 'David J. Lipman', 'Phyllis Curott', 'Jasper Adams', 'Rudolph Fisher', 'Ze Frank', 'Jeff Zimbalist', 'Rebecca Reed Maden', 'Nicole Cooley', 'Kirsten Johnson', 'Antonia Juhasz', 'David Groh', 'Claudia Moscovici', 'Nikolai Grozni', 'Willard C. Butcher', 'Glenn Cummings', 'Elmar Mammadyarov', 'John J. McConnell, Jr.', 'Andrea Seigel', 'Winthrop Jordan', 'Kevin Young', 'Gary Gerstle', 'Pamela Paul', 'Eriko Hironaka', 'Kerry Kennedy', 'Arnold Buffum Chace', 'James Tallmadge, Jr.', 'David Flaschen', 'Louis Ozawa Changchien', 'Varun Thapar', 'John Holmes', 'Mark Levine', 'William Stevens Perry', 'Darren Eales', 'McCaleb Burnett', 'Rob Feinstein', 'Jack Markell', 'Wingate Hayes', 'Suzy Becker', 'Ed McCrillis', 'John Evans', 'Joe Pritchard', 'Kendall Myers', 'Richard Solomon', 'Richard G. Stilwell', 'Benjamin Thomas', 'Thomas Sayers Ellis', 'Randy Komisar', 'George Boardman the Younger', 'Jeff King', 'Edward Judson', 'Mary Lou Jepsen', 'Orin R Smith', 'Jackie Goss', 'Thurston Towle', 'Michael Kimmel', 'Marty Belafsky', 'Frank Field', 'David Levithan', 'Bill Jacobson', 'John Dix Fisher', 'Josh Bazell', 'John Stewart', 'Jalal Alamgir', 'Gerald A. Donini', 'Chris Fox', 'Melissa Pritchard', 'Edward D. Lazowska', 'Stephen A. Cobb', 'Timothy D. Snyder', 'Eva Struble', 'Benjamin F. Haines', 'George Edward Chalmer Hayes', 'Mark Amerika', 'Renata Bernal', 'Samuel Ward, Jr.', 'Luther Emmett Holt', 'Chris Maden', 'Chris Berman', 'Samuel Ward King', 'Herbert H. Uhlig', 'Krista Tippett', 'MC Paul Barman', 'Nathaniel P. Hill', 'John Hattendorf', 'Elon R. Brown', 'Edward C. Stokes', 'Brie Gertler', 'Sarah Bryant', 'Jonathan Russell', 'Zabdiel Sampson', 'Peter Gizzi', 'Jan Peter Toennies', 'Brad Silverberg', 'Craig Taylor', 'Joseph Jacobson', 'Henry Kirke Porter', 'Allen Hume Renear', 'Dorothy Lewis Bernstein', 'George Hitchcock', 'David Bosworth', 'Gordon Chambers', 'Amy Catlin', 'Alexander A. Reinert', 'Michael E. Foat', 'Brian Munson', 'Terrence Boyle', 'Aunjanue Ellis', 'Richard Slotkin', 'Don Haggerty', 'Solomon Drowne', 'Edmund Barry Gaither', 'Wendy Abrams', 'Charles Evans Hughes', 'Wendy Carlos', 'Halil Mete Soner', 'R. Baxter Miller', 'John Lee Beatty', 'Roland Greene', 'Bradford Simpson', 'Matt Dunne', 'John Barlow', 'Marilyn Jager Adams', 'Paul Ramirez Jonas', 'Richard Minsky', 'Elisha Dyer', 'Ross Greenburg', 'Benjamin Hazard', 'Jeremiah B. Howell', 'Scott Draves', 'Linda Bartoshuk', 'Joan Elizabeth Licata', 'Joshua M. Zeitz', 'Chitra Ganesh', 'Ellen Kuras', 'Andrew E. Gibson', 'Arthur L. Horwich', 'E. Howard Hunt', 'Hill Harper', 'Carolyn Rovee-Collier', 'Chris Elam', 'Ellery Schempp', 'Lawrence Babits', 'Mark Antony De Wolfe Howe', 'Jacques Bailly', 'Otto Kerner, Jr.', 'Tanaz Eshaghian', 'Robert MacArthur', 'Jena Osman', 'Richard L. Morrill', 'George Wallerstein', 'John A. Bolles', 'Lorraine Nicholson', 'Akiko Ichikawa', 'Norman L. Eisen', 'William C. Chase', 'Christopher Robinson', 'Allegra Versace', 'Jeffrey Carver', 'George Macready', 'John Guttag', 'Robert Henry Thurston', 'Art Shaw', 'James Burrill Angell', 'Norman Taber', 'Richard Foreman', 'Elizabeth Robinson', 'Stephen Levin', 'Ogden Lindsley', 'Allan Chernoff', 'Nitya Pibulsonggram', 'Krishna Kumar', 'James Slavet', 'John Berylson', 'Benjamin Moser', 'Elmer Ripley', 'Tejal A. Desai', 'Alan H. Fishman', 'Tricia Rose', 'Lisa Birnbach', 'Warren Brown', 'Jeff Larentowicz', 'Albert T. Corbett', 'Daniel T. Rodgers', 'Percival Everett', 'Raun Kaufman', 'Jaimy Gordon', 'Nicholas Clapp', 'Nathaniel Hazard', 'Scott Haltzman', 'Bump Hadley', 'Daniel Wardwell', 'Leni Zumas', 'Sharon LaFraniere', 'Arthur Lewis Brown', 'Charles Thomas Butler', 'Kevin Kopelson', 'Damian Kulash', 'Nate Gaylinn', 'Karen Leigh King', 'Laurent Manuel', 'Anthony Walton', 'Alexa Hampton', 'John F. Aiso', 'Frederick D. Ely', 'Sam Wineburg', 'Douglas N. Arnold', 'Noah Wardrip-Fruin', 'Leah Allen', 'Gretar Tryggvason', 'Roger Fan', 'Isaac Davis', 'Elijah Hamlin', 'Laurinda Hope Spear', 'Kenneth Lim', 'David Shenk', 'Blue Balliett', 'Beth Kobliner', 'Julian Hartridge', 'Sullivan Ballou', 'Sebastian Ruth', 'Daisy Whitney', 'Margaret Russell', 'Andrés Santo Domingo', 'Maureen Paley', 'Robert Benjamin Hilton', 'Dow Travers', 'Tom Drury', 'Robert Stetson Macfarlane', 'Harry L. Watson', 'Peter C. Bacon', 'Gabe Hudson', 'Ben Brewster', 'Igor Vishnevetsky', 'Naomi Novik', 'Lynn Pasquerella', 'David Walton', 'John F. Kennedy, Jr.', 'Florencia Lozano', 'Pam Dreyer', 'Mark Blumenkranz', 'Chris Hayes', 'Molly Birnbaum', 'Bob Margarita', 'Ben Russell', 'Nate Albert', 'Steve Ralbovsky', 'Chubb Rock', 'Charles Mercer', 'Susan Salms-Moss', 'Rory Kennedy', 'Marilynne Robinson', 'Jeffrey Eugenides', 'Elizabeth Mitchell', 'Charles Jackson', 'Henry Chapin', 'Patrick C. Lynch', 'Herbert Putnam', 'Angela Robinson', 'Hermes Grillo', 'Anthony C. Griffin', 'Terri Alpert', 'Billy Wirth', 'Casey Johnson', 'Jennifer Daskal', 'Meredith Whitney', 'David Corn', 'Joasaph', 'Alfie Kohn', 'Richard Olney II', 'Sam Trammell', 'David Howard', 'Charlie King', 'Marly Youmans', 'Alan Sondheim', 'Edwidge Danticat', 'Keith N. Morgan', 'Jeffrey W. Greenberg', 'Leroy F. Aarons', 'David S. Rohde', 'Peter Bearman', 'Bobby Jindal', 'James De Mille', 'Samuel Penniman Bates', 'Lillian Moller Gilbreth', 'Jimmy Jemail', 'Sankar Das Sarma', 'James Robison', 'Bill Perkins', 'Karyn Bryant', 'John Power Knowles', 'Gayl Jones', 'George Gordon King', 'Dana Carleton Munro', 'Sarah Ruhl', 'Jan Schneider', 'Clarence Barbour', 'Vanessa Vadim', 'Mark Whipple', 'Caitlin Shetterly', 'Alexander R. Galloway', 'Michael Dickinson', 'Robert Parr', 'Charles Edwin Bennett', 'John A. Rizzo', 'Michael Silverstein', 'Eunice Yoon', 'Caroline Knapp', 'Aditi Lahiri', 'Philip Allen', 'Edgar Allen', 'Louis E. Newman', 'Henry J. Spooner', 'Sarah Allen', 'Amy Carter', 'Michael Ellsberg', 'Thomas Perez', 'Delia Sherman', 'Kate Capshaw', 'Andrea Hairston', 'Derek Ellerman', 'Nicholas Gonzalez', 'John S. Chen', 'Alfred W. Anthony', 'Scott Kildall', 'David Summers', 'Seth Wulsin', 'Jim Axelrod', 'Susan Freedman', 'Michael McAlpine', 'Barry Sternlicht', 'Roger Bowen', 'Randall Batinkoff', 'Prudence L. Carter', 'Isca Greenfield-Sanders', 'Francesca Gregorini', 'John Hope', 'Erik Kuselias', 'Sarah Cleveland', 'Franklin Huddle', 'Charles R. Brayton', 'Craig Mello', 'Walter Dean Myers', 'Tatiana von Fürstenberg', 'Lucius Bolles'}
            Answers = 1511, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.056s]
          Answers = 1511, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.056s]
        Checking schema 104 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.students_graduates', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 14
            Final Answer: {'1990', '1985', '1952', '1991', '1987', '2009', '1997', '1995', '1977', '1989', '1972', '1965', '1988'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 105 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.board_members', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 3
            Final Answer: {'Thomas J. Tisch', 'Alain J. P. Belda', 'Chuck Davis'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 106 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.board_members', 'organization.organization_board_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 107 / 146: {
          [('Main', '==', 'm.01bm_', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 2
            Final Answer: {'US News & World Report: National University Rankings', 'Times Higher Education World University Rankings'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 108 / 146: {
          [('Main', '==', 'm.01bm_', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.01bm_ fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 2
            Final Answer: {'2010', '2012'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 109 / 146: {
          [('Main', '==', 'm.01bm_', ['book.periodical_publisher.periodicals_published', 'book.periodical_publisher_period.periodical'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:book.periodical_publisher.periodicals_published ?o1 . ?o1 fb:book.periodical_publisher_period.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:book.periodical_publisher.periodicals_published ?o1 . ?o1 fb:book.periodical_publisher_period.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown Journal of World Affairs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 110 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Association of American Universities'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 111 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.child', 'organization.organization_relationship.parent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 112 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.leadership', 'organization.leadership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 113 / 146: {
          [('Main', '==', 'm.01bm_', ['organization.organization.leadership', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 2
            Final Answer: {'Christina Paxson', 'Ruth Simmons'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 114 / 146: {
          [('Main', '==', 'm.01bm_', ['education.educational_institution.honorary_degrees_awarded', 'education.honorary_degree.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.honorary_degrees_awarded ?o1 . ?o1 fb:education.honorary_degree.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.educational_institution.honorary_degrees_awarded ?o1 . ?o1 fb:education.honorary_degree.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Brown University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 115 / 146: {
          [('Main', '==', 'm.01bm_', ['education.academic_institution.visiting_scholars_fellows_etc', 'education.academic_post.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:education.academic_institution.visiting_scholars_fellows_etc ?o1 . ?o1 fb:education.academic_post.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Solomon Drowne'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 116 / 146: {
          [('Main', '==', 'm.021dcw', ['music.artist.contribution', 'music.recording_contribution.contributor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.artist.contribution ?o1 . ?o1 fb:music.recording_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.artist.contribution ?o1 . ?o1 fb:music.recording_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Ian Brown'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 117 / 146: {
          [('Main', '==', 'm.021dcw', ['music.group_member.membership', 'music.group_membership.group'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'The Stone Roses'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 118 / 146: {
          [('Main', '==', 'm.021dcw', ['music.group_member.membership', 'music.group_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Ian Brown'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 119 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Ian Brown'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 120 / 146: {
          [('Main', '==', 'm.021dcw', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 2
            Final Answer: {'Alfonso Cuarón'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 121 / 146: {
          [('Main', '==', 'm.021dcw', ['music.artist.contribution', 'music.recording_contribution.album'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.artist.contribution ?o1 . ?o1 fb:music.recording_contribution.album ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.artist.contribution ?o1 . ?o1 fb:music.recording_contribution.album ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Second Coming'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 122 / 146: {
          [('Main', '==', 'm.021dcw', ['music.group_member.membership', 'music.group_membership.start'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.021dcw fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.start ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.021dcw fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.start ?o2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 2
            Final Answer: {'1983', '2011'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 123 / 146: {
          [('Main', '==', 'm.021dcw', ['music.group_member.membership', 'music.group_membership.end'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.021dcw fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.end ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.021dcw fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.end ?o2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'1996'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 124 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Warrington'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 125 / 146: {
          [('Main', '==', 'm.021dcw', ['music.artist.track_contributions', 'music.track_contribution.contributor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Ian Brown'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 126 / 146: {
          [('Main', '==', 'm.021dcw', ['music.artist.track_contributions', 'music.track_contribution.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 2
            Final Answer: {'guest', 'Vocals'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 127 / 146: {
          [('Main', '==', 'm.021dcw', ['music.group_member.membership', 'music.group_membership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Vocals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 128 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Altrincham Grammar School for Boys'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 129 / 146: {
          [('Main', '==', 'm.021dcw', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 1
            Final Answer: {'Ian Brown'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 130 / 146: {
          [('Main', '==', 'm.021dcw', ['music.artist.track_contributions', 'music.track_contribution.track'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021dcw fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021dcw'}
            Query return lines = 18
            Final Answer: {'Elizabeth My Dear', 'Made of Stone', 'Be There (feat. Ian Brown) (radio edit)', 'Reign (Anagram remix)', 'I Am The Resurrection', 'I Wanna Be Adored', 'This Is The One', 'Be There', 'REIGN', 'Elephant Stone', 'Be There (feat. Ian Brown)', "Don't Stop", '(Song for My) Sugar Spun Sister', 'She Bangs the Drums', 'Waterfall', 'Bye Bye Bad Man', 'Be There (feat. Ian Brown) (Underdog remix)', 'Shoot You Down'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 131 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Janelle Pierzina'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 132 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 2
            Final Answer: {'Jess DeSanto'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 133 / 146: {
          [('Main', '==', 'm.077z3j', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 134 / 146: {
          [('Main', '==', 'm.077z3j', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Like Mike'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 135 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Minnesota'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 136 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.077z3j fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 WHERE { fb:m.077z3j fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 137 / 146: {
          [('Main', '==', 'm.077z3j', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Janelle Pierzina'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 138 / 146: {
          [('Main', '==', 'm.077z3j', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.seasons'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.seasons ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.seasons ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Big Brother - Season 6'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 139 / 146: {
          [('Main', '==', 'm.077z3j', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.convicted_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Janelle Pierzina'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 140 / 146: {
          [('Main', '==', 'm.077z3j', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Cheerleader #13'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 141 / 146: {
          [('Main', '==', 'm.077z3j', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Janelle Pierzina'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 142 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 2
            Final Answer: {'Grand Rapids High School', 'University of Minnesota Duluth'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 143 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Janelle Pierzina'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 144 / 146: {
          [('Main', '==', 'm.077z3j', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 145 / 146: {
          [('Main', '==', 'm.077z3j', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.guilty_of'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.077z3j fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.077z3j'}
            Query return lines = 1
            Final Answer: {'Drunk driving in the United States'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        141 / 146 coarse schemas kept with ans_size > 0.
      } [1.711s]
      Coarse level ended, resulting in 141 schemas.
    } [10.554s]
    Type level searching (total types = 10): {
      Current: 0 / 141
[{'education.school_category'}]
[{'education.school_newspaper'}]
[{'symbols.name_source'}]
[{'visual_art.color'}]
[{'education.school_mascot'}]
[{'education.educational_institution'}]
[{'user.patrick.default_domain.tag'}]
[{'fictional_universe.fictional_character'}]
[{'type.datetime'}]
[{'organization.organization_founder'}]
[{'location.location'}]
[{'education.educational_institution_campus'}]
[{'education.educational_institution'}]
[{'sports.school_sports_team'}]
[{'education.fraternity_sorority'}]
[{'organization.organization'}]
[{'base.schemastaging.scholastic_library'}]
[{'music.genre'}]
[{'music.record_label'}]
[{'broadcast.content'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'type.float'}]
[{'film.film'}]
[{'music.instrument'}]
[{'music.album'}]
[{'music.recording'}]
[{'location.location'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'people.person'}]
[{'book.book'}]
[{'religion.religion'}]
[{'people.gender'}]
[{'book.written_work'}]
[{'media_common.quotation'}]
[{'book.written_work'}]
[{'type.datetime'}]
[{'location.country'}]
[{'type.float'}]
[{'people.person'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'location.country'}]
[{'base.fashionmodels.fashion_model'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'location.mailing_address'}, {'location.location'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'award.ranking'}, {'type.int'}]
[{'book.periodical_publisher_period'}, {'book.periodical_publisher'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.leadership'}, {'organization.role'}]
[{'education.honorary_degree'}, {'type.datetime'}]
[{'education.academic_post'}, {'education.academic_institution'}]
[{'education.acceptance_rate'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'location.mailing_address'}, {'location.administrative_division'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'education.education'}, {'education.field_of_study'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'fictional_universe.fictional_employment_tenure'}, {'fictional_universe.fictional_character'}]
[{'fictional_universe.fictional_employment_tenure'}, {'fictional_universe.fictional_employer'}]
[{'fictional_universe.fictional_employment_tenure'}, {'fictional_universe.fictional_job_title'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'education.honorary_degree'}, {'education.honorary_degree_recipient'}]
[{'education.academic_post'}, {'type.datetime'}]
[{'education.academic_post'}, {'education.academic_post_title'}]
[{'education.acceptance_rate'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'location.mailing_address'}, {'location.postal_code'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
      Current: 100 / 141
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'book.periodical_publisher_period'}, {'book.periodical'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'education.honorary_degree'}, {'education.educational_institution'}]
[{'education.academic_post'}, {'education.academic'}]
[{'music.recording_contribution'}, {'music.artist'}]
[{'music.group_membership'}, {'music.musical_group'}]
[{'music.group_membership'}, {'music.group_member'}]
[{'people.place_lived'}, {'people.person'}]
[{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
[{'music.recording_contribution'}, {'music.album'}]
[{'music.group_membership'}, {'type.datetime'}]
[{'music.group_membership'}, {'type.datetime'}]
[{'people.place_lived'}, {'location.location'}]
[{'music.track_contribution'}, {'music.artist'}]
[{'music.track_contribution'}, {'music.performance_role'}]
[{'music.group_membership'}, {'music.performance_role'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'music.track_contribution'}, {'music.recording'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'people.marriage'}, {'type.datetime'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_series_season'}]
[{'base.crime.criminal_conviction'}, {'base.crime.convicted_criminal'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'base.crime.criminal_conviction'}, {'base.fight.crime_type'}]
      2 typed schemas retrieved from 141 coarse schemas.
      Calculating F1 for 2 typed schemas: {
        Current: 0 / 2
        Checking schema 0 / 2: {
          [('Main', '==', 'm.01bm_', ['business.employer.employees', 'business.employment_tenure.title']), ('Type', '==', 'business.job_title', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'business.job_title'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.type fb:business.job_title . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.type fb:business.job_title . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 21
            Final Answer: {'Dean', 'Professor of Neuroscience', 'Chancellor', 'Emeritus', 'Research Assistant', 'Post-doctoral Research Fellow', 'NSF VIGRE Graduate Research Fellow', 'Assistant Professor of Physics', 'Associate Professor', 'Assistant Professor, Econometrics', 'University Professor', 'Student Consultant', 'Professor of American Civilization', 'Assistant Professor of Sociology', 'Professor of Engineering', 'Chair of Education, Rosebud Sioux Reservation', 'Assistant Professor', 'Clinical Professor of Medicine', 'Professor of Education', 'Admission Officer', 'Chair of Education'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 1 / 2: {
          [('Main', '==', 'm.01bm_', ['fictional_universe.fictional_employer.employees', 'fictional_universe.fictional_employment_tenure.title']), ('Type', '==', 'fictional_universe.fictional_job_title', ['type.object.type'])]
          var_types: [{'fictional_universe.fictional_employment_tenure'}, {'fictional_universe.fictional_job_title'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.title ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_job_title . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:22:28] Q_Schema Request: {
            WebQ_2297|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bm_ fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.title ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_job_title . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bm_'}
            Query return lines = 1
            Final Answer: {'Professor of Psychoceramics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        2 / 2 typed schemas kept with ans_size > 0.
      } [0.016s]
      Typed level ended, resulting in 143 schemas.
    } [0.023s]
    Time level searching (total times = 0): {
      Current: 0 / 143
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'broadcast.content.production_start', 'broadcast.content.production_end'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'education.honorary_degree.awarded_on'}, set()]
self.var_time_preds: [{'education.academic_post.from', 'education.academic_post.to'}, set()]
self.var_time_preds: [{'education.acceptance_rate.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'education.honorary_degree.awarded_on'}, set()]
self.var_time_preds: [{'education.academic_post.from', 'education.academic_post.to'}, set()]
self.var_time_preds: [{'education.academic_post.from', 'education.academic_post.to'}, set()]
self.var_time_preds: [{'education.acceptance_rate.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
      Current: 100 / 143
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'education.honorary_degree.awarded_on'}, set()]
self.var_time_preds: [{'education.academic_post.from', 'education.academic_post.to'}, set()]
self.var_time_preds: [set(), {'music.artist.active_end', 'music.artist.active_start'}]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
self.var_time_preds: [set(), {'music.album.release_date'}]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [set(), {'music.artist.active_end', 'music.artist.active_start'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'music.recording.date'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 143 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 143 schemas.
    } [0.003s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 143
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[set()]
[{'broadcast.content.production_start', 'broadcast.content.production_end'}]
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[{'music.album.release_date'}]
[{'music.recording.date'}]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[{'media_common.quotation.date'}]
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.ranking.year'}, set()]
[{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'education.honorary_degree.awarded_on'}, set()]
[{'education.academic_post.from', 'education.academic_post.to'}, set()]
[{'education.acceptance_rate.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, {'organization.organization.date_founded'}]
[{'award.ranking.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[set(), set()]
[set(), set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'education.honorary_degree.awarded_on'}, set()]
[{'education.academic_post.from', 'education.academic_post.to'}, set()]
[{'education.academic_post.from', 'education.academic_post.to'}, set()]
[{'education.acceptance_rate.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
      Current: 100 / 143
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'education.honorary_degree.awarded_on'}, set()]
[{'education.academic_post.from', 'education.academic_post.to'}, set()]
[set(), {'music.artist.active_end', 'music.artist.active_start'}]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
[set(), {'music.album.release_date'}]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[set(), {'music.artist.active_end', 'music.artist.active_start'}]
[set(), set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[set(), {'music.recording.date'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[set(), set()]
[set(), set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[set(), set()]
      0 ordinal schemas retrieved from 143 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 143 schemas.
    } [0.003s]
    [2020-12-03 14:22:28] buffer saved.
    143 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2200-2299/2297_schema].
  } [55.510s]
  Entering Q 2298 / 5810 [b'what do michelle obama do for a living?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [2, 4) (michelle obama) == m.025s5v9 (Michelle_Obama) {'score': 27689.534582, 'source': 0.0}
      #01 Entity: [5, 7) (for a) == m.0h2n50 (FOR-A) {'score': 1.187787, 'source': 1.0}
      #02 Type: [5, 8) (for a living) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.741416}
      #03 Type: [0, 2) (what do) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.724825}
      #04 Type: [5, 8) (for a living) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.705125}
      #05 Type: [6, 8) (a living) == people.place_lived (place lived) {'sim': 0.6916}
      #06 Type: [5, 8) (for a living) == measurement_unit.time_unit (unit of time) {'sim': 0.690712}
      #07 Type: [5, 8) (for a living) == medicine.notable_person_with_medical_condition (public figure with medical condition) {'sim': 0.689371}
      #08 Type: [5, 8) (for a living) == government.national_anthem_of_a_country (national anthem of a country) {'sim': 0.683082}
      #09 Type: [5, 8) (for a living) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.679893}
      #10 Type: [5, 8) (for a living) == location.place_with_neighborhoods (place with neighborhoods) {'sim': 0.679298}
      #11 Type: [4, 7) (do for a) == film.person_or_entity_appearing_in_film (person or entity appearing in film) {'sim': 0.678636}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:23:14) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.025s5v9 ?p1 ?o1 . }
        [2020-12-03 14:23:14] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.025s5v9 ?p1 ?o1 . }
          Query return lines = 39
        } [0.008s]
        Filt_Query_Ret = 15 / 39 ( 0.008s)
        [Len-1||F1/2||2/2-1] (2020-12-03 14:23:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s5v9 ?p1 ?o1 . ?o1 ?p2 fb:m.0h2n50 . }
          [2020-12-03 14:23:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s5v9 ?p1 ?o1 . ?o1 ?p2 fb:m.0h2n50 . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
      } [0.012s]
      [Len-1||F2/2] (2020-12-03 14:23:14) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0h2n50 ?p1 ?o1 . }
        [2020-12-03 14:23:14] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0h2n50 ?p1 ?o1 . }
          Query return lines = 8
        } [0.006s]
        Filt_Query_Ret = 1 / 8 ( 0.006s)
        [Len-1||F2/2||1/2-1] (2020-12-03 14:23:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0h2n50 ?p1 ?o1 . ?o1 ?p2 fb:m.025s5v9 . }
          [2020-12-03 14:23:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0h2n50 ?p1 ?o1 . ?o1 ?p2 fb:m.025s5v9 . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
      } [0.013s]
      [Len-2||F1/2] (2020-12-03 14:23:14) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s5v9 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:23:14] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s5v9 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 548
        } [0.056s]
        Filt_Query_Ret = 54 / 548 ( 0.058s)
        [Len-2||F1/2||2/2-1] (2020-12-03 14:23:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s5v9 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0h2n50 . }
          [2020-12-03 14:23:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s5v9 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0h2n50 . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-2||F1/2||2/2-2] (2020-12-03 14:23:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s5v9 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0h2n50 . }
          [2020-12-03 14:23:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s5v9 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0h2n50 . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
      } [0.084s]
      [Len-2||F2/2] (2020-12-03 14:23:14) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0h2n50 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:23:14] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0h2n50 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 48
        } [0.011s]
        Filt_Query_Ret = 1 / 48 ( 0.011s)
        [Len-2||F2/2||1/2-1] (2020-12-03 14:23:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0h2n50 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025s5v9 . }
          [2020-12-03 14:23:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0h2n50 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025s5v9 . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.005s]
        [Len-2||F2/2||1/2-2] (2020-12-03 14:23:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0h2n50 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025s5v9 . }
          [2020-12-03 14:23:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0h2n50 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025s5v9 . }
            Query return lines = 0
          } [0.548s]
          Filt_Query_Ret = 0 / 0 ( 0.548s)
        } [0.548s]
      } [0.565s]
      71 coarse schemas retrieved from scratch.
      Calculating F1 for 71 coarse schemas: {
        Current: 0 / 71
        Checking schema 0 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 1 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.025s5v9 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 WHERE { fb:m.025s5v9 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'1964'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 2 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 3 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'African American'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 4 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Marian Shields Robinson', 'Fraser C. Robinson III'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 5 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'United Church of Christ'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 6 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.025s5v9 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 WHERE { fb:m.025s5v9 fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'1.8'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 7 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.schemastaging.context_name.nickname'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 8 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.crime.lawyer.law_firm'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:base.crime.lawyer.law_firm ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:base.crime.lawyer.law_firm ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Sidley Austin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 9 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Natasha Obama', 'Malia Ann Obama'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 10 / 71: {
          [('Main', '==', 'm.025s5v9', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'American Grown'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 11 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Writer', 'Lawyer'}
            Answers = 2, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.007s]
          Answers = 2, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.007s]
        Checking schema 12 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Female'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 13 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Chicago'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 71: {
          [('Main', '==', 'm.025s5v9', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {"Why Race Mattered in Barack Obama's Re-election", "What Death of Osama Bin Laden Indicates About Barack Obama's Leadership"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 15 / 71: {
          [('Main', '==', 'm.0h2n50', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0h2n50 fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 WHERE { fb:m.0h2n50 fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.0h2n50'}
            Query return lines = 1
            Final Answer: {'1971'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 17 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'First Lady'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 18 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Juris Doctor', 'Bachelor of Arts'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 19 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 3
            Final Answer: {'1985', '1981', '1988'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 20 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Blimp Award for Cutest Couple'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 21 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Craig Robinson'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 22 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:14] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 23 / 71: {
          [('Main', '==', 'm.025s5v9', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 24 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 25 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {"Let's Move!"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 26 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'93', '1'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 27 / 71: {
          [('Main', '==', 'm.025s5v9', ['government.politician.government_positions_held', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'First Lady'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 28 / 71: {
          [('Main', '==', 'm.025s5v9', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 29 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.popstra.celebrity.infidelity_victim', 'base.popstra.infidelity.victim'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.victim ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.victim ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 30 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.litcentral.named_person.individual_names', 'base.litcentral.person_full_name.given_name_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.given_name_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.given_name_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 31 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.litcentral.named_person.individual_names', 'base.litcentral.person_full_name.family_name_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.family_name_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.family_name_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Robinson', 'Obama'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 32 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 4
            Final Answer: {'Natasha Obama', 'Barack Obama', 'Malia Ann Obama'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 33 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Sociology'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 34 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.education', 'education.education.minor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.minor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.minor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'African American studies'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 35 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {"Let's Move!"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 36 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 37 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'1992'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 38 / 71: {
          [('Main', '==', 'm.025s5v9', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 4
            Final Answer: {'By the People: The Election of Barack Obama', 'A Moment in History: The Inauguration of Barack Obama', "Barack Obama: People's President", "Kids' Inaugural: We Are the Future"}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 39 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 40 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {"2010 Kids' Choice Awards"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 41 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 42 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 43 / 71: {
          [('Main', '==', 'm.025s5v9', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 44 / 71: {
          [('Main', '==', 'm.025s5v9', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 45 / 71: {
          [('Main', '==', 'm.025s5v9', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'First Lady of the United States'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 46 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.litcentral.named_person.individual_names', 'base.litcentral.person_full_name.person_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.person_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.person_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 47 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.from ?o2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 48 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 49 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 3
            Final Answer: {'University of Chicago Medical Center', 'United States of America', 'Sidley Austin'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 50 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 3
            Final Answer: {'Harvard Law School', 'Princeton University', 'Whitney M. Young Magnet High School'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 51 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 52 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'1985'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 53 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 54 / 71: {
          [('Main', '==', 'm.025s5v9', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 55 / 71: {
          [('Main', '==', 'm.025s5v9', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 56 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Kids’ Choice Big Help Award'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 57 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Time 100', 'Maxim Hot 100'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 58 / 71: {
          [('Main', '==', 'm.025s5v9', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 59 / 71: {
          [('Main', '==', 'm.025s5v9', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 5
            Final Answer: {'Stealing First Base', 'Episode 886', 'Michelle Obama'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 60 / 71: {
          [('Main', '==', 'm.025s5v9', ['government.politician.government_positions_held', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 61 / 71: {
          [('Main', '==', 'm.025s5v9', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Alpha Phi Omega'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 62 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.popstra.celebrity.infidelity_victim', 'base.popstra.infidelity.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Vera Baker', 'Finance Director'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 63 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.pet'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Bo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 64 / 71: {
          [('Main', '==', 'm.025s5v9', ['biology.animal_owner.animals_owned', 'biology.animal_ownership.animal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:biology.animal_owner.animals_owned ?o1 . ?o1 fb:biology.animal_ownership.animal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:biology.animal_owner.animals_owned ?o1 . ?o1 fb:biology.animal_ownership.animal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Bo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 65 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.conventions_spoken_at'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.conventions_spoken_at ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.conventions_spoken_at ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'2008 Democratic National Convention'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 66 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.introduced_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.introduced_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.introduced_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Craig Robinson'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 67 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.date ?o2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 68 / 71: {
          [('Main', '==', 'm.025s5v9', ['biology.animal_owner.animals_owned', 'biology.animal_ownership.owners'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:biology.animal_owner.animals_owned ?o1 . ?o1 fb:biology.animal_ownership.owners ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:biology.animal_owner.animals_owned ?o1 . ?o1 fb:biology.animal_ownership.owners ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 69 / 71: {
          [('Main', '==', 'm.025s5v9', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.speaker'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.speaker ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.speaker ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 70 / 71: {
          [('Main', '==', 'm.0h2n50', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0h2n50 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0h2n50 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0h2n50'}
            Query return lines = 1
            Final Answer: {'Tokyo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        68 / 71 coarse schemas kept with ans_size > 0.
      } [0.917s]
      Coarse level ended, resulting in 68 schemas.
    } [1.592s]
    Type level searching (total types = 10): {
      Current: 0 / 68
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'base.crime.law_firm'}]
[{'people.person'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'book.written_work'}]
[{'type.datetime'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'award.ranking'}, {'type.int'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.litcentral.person_full_name'}, {'base.givennames.given_name'}]
[{'base.litcentral.person_full_name'}, {'people.family_name'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet_owner'}]
[{'education.education'}, {'education.field_of_study'}]
[{'education.education'}, {'education.field_of_study'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'base.litcentral.person_full_name'}, {'base.litcentral.named_person'}]
[{'base.famouspets.pet_ownership'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet'}]
[{'biology.animal_ownership'}, {'biology.owned_animal'}]
[{'base.politicalconventions.convention_speech'}, {'base.politicalconventions.political_convention'}]
[{'base.politicalconventions.convention_speech'}, {'people.person'}]
[{'base.politicalconventions.convention_speech'}, {'type.datetime'}]
[{'biology.animal_ownership'}, {'biology.animal_owner'}]
[{'base.politicalconventions.convention_speech'}, {'base.politicalconventions.convention_speaker'}]
[{'location.mailing_address'}, {'location.location'}]
      16 typed schemas retrieved from 68 coarse schemas.
      Calculating F1 for 16 typed schemas: {
        Current: 0 / 16
        Checking schema 0 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.parents']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 1 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 2 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.children']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 3 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.children']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Natasha Obama', 'Malia Ann Obama'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 4 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.place_of_birth']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s5v9 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Chicago'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 5 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 6 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 7 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 8 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 2
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 9 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 10 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 11 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.education', 'education.education.student']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'education.education'}, {'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 12 / 16: {
          [('Main', '==', 'm.025s5v9', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 13 / 16: {
          [('Main', '==', 'm.025s5v9', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 1
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 14 / 16: {
          [('Main', '==', 'm.025s5v9', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.introduced_by']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'base.politicalconventions.convention_speech'}, {'medicine.notable_person_with_medical_condition', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.introduced_by ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.introduced_by ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 15 / 16: {
          [('Main', '==', 'm.025s5v9', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.introduced_by']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'base.politicalconventions.convention_speech'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.introduced_by ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:15] Q_Schema Request: {
            WebQ_2298|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s5v9 fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.introduced_by ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s5v9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        7 / 16 typed schemas kept with ans_size > 0.
      } [0.146s]
      Typed level ended, resulting in 75 schemas.
    } [0.152s]
    Time level searching (total times = 0): {
      Current: 0 / 75
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'biology.animal_ownership.from', 'biology.animal_ownership.to'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'biology.animal_ownership.from', 'biology.animal_ownership.to'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 75 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 75 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 75
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[set(), set()]
[set(), set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[set(), set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[set(), set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'biology.animal_ownership.from', 'biology.animal_ownership.to'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'base.politicalconventions.convention_speech.date'}, {'people.person.date_of_birth'}]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'biology.animal_ownership.from', 'biology.animal_ownership.to'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[set(), set()]
[{'people.person.date_of_birth'}]
[set()]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.from', 'business.employment_tenure.to'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[set(), set()]
      0 ordinal schemas retrieved from 75 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 75 schemas.
    } [0.002s]
    [2020-12-03 14:23:15] buffer saved.
    75 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2200-2299/2298_schema].
  } [5.387s]
  Entering Q 2299 / 5810 [b'who was the founder of rhode island?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [5, 7) (rhode island) == m.06btq (Rhode_Island) {'score': 136434.648176, 'source': 0.0}
      #01 Entity: [5, 7) (rhode island) == m.06ky_ (Rhodes) {'score': 2.6283, 'source': 1.0}
      #02 Type: [6, 7) (island) == geography.island (island) {'sim': 1.0}
      #03 Type: [3, 4) (founder) == organization.organization_founder (organization founder) {'sim': 0.860139}
      #04 Type: [6, 7) (island) == geography.island_group (island group) {'sim': 0.822722}
      #05 Type: [4, 5) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #06 Type: [4, 5) (of) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.816341}
      #07 Type: [4, 5) (of) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.814276}
      #08 Type: [2, 4) (the founder) == fictional_universe.fictional_organization_founder (fictional organization founder) {'sim': 0.78453}
      #09 Type: [4, 5) (of) == measurement_unit.time_unit (unit of time) {'sim': 0.759887}
      #10 Type: [0, 3) (who was the) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.743308}
      #11 Type: [4, 5) (of) == chemistry.phase_of_matter (phase of matter) {'sim': 0.74294}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:23:19) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06btq ?p1 ?o1 . }
        [2020-12-03 14:23:19] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.06btq ?p1 ?o1 . }
          Query return lines = 46
        } [0.007s]
        Filt_Query_Ret = 24 / 46 ( 0.007s)
      } [0.008s]
      [Len-1||F2/2] (2020-12-03 14:23:19) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06ky_ ?p1 ?o1 . }
        [2020-12-03 14:23:19] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.06ky_ ?p1 ?o1 . }
          Query return lines = 21
        } [0.010s]
        Filt_Query_Ret = 10 / 21 ( 0.010s)
      } [0.010s]
      [Len-2||F1/2] (2020-12-03 14:23:19) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06btq ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:23:19] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06btq ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 1711
        } [0.287s]
        Filt_Query_Ret = 49 / 1711 ( 0.293s)
      } [0.293s]
      [Len-2||F2/2] (2020-12-03 14:23:19) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06ky_ ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:23:19] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06ky_ ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 323
        } [0.025s]
        Filt_Query_Ret = 6 / 323 ( 0.027s)
      } [0.027s]
      89 coarse schemas retrieved from scratch.
      Calculating F1 for 89 coarse schemas: {
        Current: 0 / 89
        Checking schema 0 / 89: {
          [('Main', '==', 'm.06btq', ['location.administrative_division.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.administrative_division.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.administrative_division.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 1 / 89: {
          [('Main', '==', 'm.06btq', ['location.administrative_division.first_level_division_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.administrative_division.first_level_division_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.administrative_division.first_level_division_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 2 / 89: {
          [('Main', '==', 'm.06btq', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 3 / 89: {
          [('Main', '==', 'm.06btq', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 4 / 89: {
          [('Main', '==', 'm.06btq', ['base.schemastaging.context_name.abbreviation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.schemastaging.context_name.abbreviation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.schemastaging.context_name.abbreviation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 5 / 89: {
          [('Main', '==', 'm.06btq', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 6 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 3
            Final Answer: {'Rhode Island Senate', 'Rhode Island House of Representatives', 'Rhode Island General Assembly'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 7 / 89: {
          [('Main', '==', 'm.06btq', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 92
            Final Answer: {'George E. Read', 'Frank Ferri', 'David Rawlings', 'William ""Billy"" Costello', 'John Wilkinson', 'Jeremiah Olney', 'Mike Cerrone', 'Joseph Aplin', 'Pamela Lambert', 'Lon Casler Bixby', 'George Brayton', 'Robert A. Watson', 'Charlene Lima', 'Eleanor Brown', 'Charles Walter Stetson', 'Daniel Patrick Reilly', 'Craig Mullaney', 'Eric Goode', 'Caleb Gardner', 'Olive de Grasse', 'Lenore Montanaro', 'William H. Sullivan', 'Johnny Nicholas', 'Matthew Sturges', 'Ferdinand Waldo Demara, Sr.', 'John McLaughlin', 'Gary Albright', 'Chelsie J. Senerchia', 'William Bridgehouse', 'Matt Hansen', 'Frank Ronzio', 'Edward Payson Weston', 'Stephen D. Hassenfeld', 'Stephen Champlin', 'Brook Silva-Braga', 'Grant Wilson', 'Robert Serrecchia', 'Dennis Wholey', 'I. P. Durfee', 'Waverley Root', 'Gene Garvin', 'Paul Mecurio', 'Gail Borges', 'Edmund McWilliams', 'Don Bousquet', 'Ryan Westmoreland', 'Robert Clark Corrente', 'Peter Lance', 'David Franklin', 'Kevin Lima', 'Isaac Wilbour', 'Greg Kahn', 'Nicholas Lear', 'William Barton', 'Joey Archibald', 'Charles W. Freeman, Jr.', 'Nicole Picard', 'Marcel Desaulniers', 'Rye Barcott', 'Chris Cosentino', 'Aram Chobanian', 'Maggie Black', 'Jessica Lonardo', 'Jim Eno', 'Don Reo', 'Edward Pelham Brenton', 'Sarah Billington', 'Don Asmussen', 'Kristine Rolofson', 'Rebekah Aramini', 'Don McGregor', "Taaffe O'Connell", 'Esek Hopkins', 'Lila Rhodes', 'Lucy Aldrich', 'Samuel E. Lewis', 'George Araujo', 'John Strong', 'Vincent Pagano', 'Ryland Blackinton', 'Charles Edwards', 'Enzo Edward Allen', 'William Rogers Taylor', 'Jillian Swanson', 'John Martin', 'Robin Green', 'Israel Angell', 'Grace Albee', 'Charlie Hunter', 'Thomas Hayes', 'Mary Cantwell', 'John Albro'}
            Answers = 92, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 92, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 8 / 89: {
          [('Main', '==', 'm.06btq', ['location.us_state.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.us_state.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.us_state.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Providence'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 9 / 89: {
          [('Main', '==', 'm.06btq', ['base.biblioness.bibs_location.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 10 / 89: {
          [('Main', '==', 'm.06btq', ['base.schemastaging.context_name.nickname'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 11 / 89: {
          [('Main', '==', 'm.06btq', ['base.aareas.schema.administrative_area.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.aareas.schema.administrative_area.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.aareas.schema.administrative_area.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Providence'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 12 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 2
            Final Answer: {'Governor of Rhode Island', 'Secretary of State of Rhode Island'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 13 / 89: {
          [('Main', '==', 'm.06btq', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06btq fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 WHERE { fb:m.06btq fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'1790'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 14 / 89: {
          [('Main', '==', 'm.06btq', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1167
            Final Answer: {'Merchants Bank Building', 'Washington Park Sewage Pumping Station', 'Hope', 'North Kingstown', 'Elliot-Harris-Miner House', 'Col. Micah Whitmarsh House', 'Matthew Lynch House', 'Corliss-Carrington House', 'Wilbor House', 'River View', 'Trinity Church, Newport, Rhode Island', "Cady's Tavern", 'Escoheag', 'Canonchet', 'Burdickville', 'South Main Street Historic District', 'Thomas Fenner House', 'Levi H. Gale House', 'Liberty Arming the Patriot', 'RI-702 Fernwood Archeological Site', 'Richmond Paper Company Mill Complex', 'Longmeadow', 'Plain Farm House', 'Smithfield', 'Austin Farm Road Agricultural Area', 'Misquamicut', 'Newport School of Hairdressing-Main Campus', 'Joseph Haile House', 'Meshanticut', 'Buttonwoods', 'United Congregational Church', "St. Mary's Church Complex", 'RI-655 Pine Hill Archeological Site', 'Hopkins Mills', 'Bellefonte', 'Middletown', 'Westerly', 'Stone House Inn', 'Westcote', "Dunkin' Donuts Center", 'Artillery Park', 'Paradise Mobile Home Park', 'RI-151 Three Dog Site', 'Quinnville', 'Barrington', 'Fifth Ward Wardroom', 'Maxfields Corner', 'Eagleville', 'Spring Grove', 'Parkis-Comstock Historic District', 'Bellevue Avenue/Casino Historic District', 'Stephen Winsor House', 'Winsor-Swan-Whitman Farm', 'Alton', "St. Matthew's Church", 'Carolina', "Saint Martin's Church, Providence", 'Pekin Street Historic District', 'Wanskuck', 'Smithville – North Scituate, Rhode Island', 'Simmons Corner', 'Green Hill', 'Shelter Harbor', 'Gardners Corner', 'Nayatt', 'Waterford', 'Narragansett Beach', 'Manton-Hunt-Farnum Farm', 'Blackstone Canal', 'Cold Spring Beach', 'Greene', 'East Providence', 'Kent County Courthouse', 'Joy Homestead', 'South Providence Library-Providence Community Library', 'Kingston Hill Farm', 'Island Place Historic District', 'Hunter House', 'Greenwood', 'Clemence-Irons House', 'Church Hill Industrial District', "O'Bannon Mill", 'Providence City Hall', 'Wakefield-Peacedale', 'Limerock Village Historic District', 'Nooseneck, Rhode Island', 'Jeremiah Dexter House', 'Parris Brook Historic and Archeological District', 'Prudence Park', 'Chepachet Village Historic District', 'G.A. Burnham House', 'Esmond', 'Lucas-Johnston House', 'Westminster Street Historic District', 'Jerusalem', 'Harris Mill', 'Little Compton', 'Governor William Sprague Mansion', 'RI-1072-1079 Carbuncle Hill Archaeological District', 'Bell Street Chapel', 'Greene Inn', 'Charlestown Beach', 'Allen Street Historic District', 'Amos Cooke House', 'Weekapaug', 'Dunn Corner', 'Allen-Madison House', 'Tillinghast Road Historic District', 'Hoxsie', 'Palmer-Northrup House', 'Rochambeau Library-Providence Community Library', 'Roger Williams Park Zoo', 'Wayland Historic District', 'Manton', 'YWCA Site', 'Smithfield Friends Meeting House, Parsonage and Cemetery', 'Fort Hamilton Historic District', 'Stephen Northup House', 'Linton Block', 'Swan Point Cemetery and Trolley Shelter', 'Fisherville Historic and Archeological District', 'Gardencourt', 'Ingrams Corner', 'Market House', 'Bishop Heights', 'Usquepaug', 'Melville', 'Forge Road Historic District', 'Olneyville', 'Hamiltons Corner', 'Matunuck', 'Old Harbor Landing', 'Cowesett', 'Woonasquatucket River Site (RI-163)', 'Johnston', 'Cook-Bateman Farm', "Rhode Island's 2nd congressional district", 'Silver Lake', 'John Cole Farm', 'Benjamin F. Greene House', 'Little Compton Common Historic District', 'Lyman C. Joseph House', 'Peace Dale Historic District', 'Wakefield Historic District', 'Federal Building', 'Empire Beauty School-Providence', 'Nathanael Greene Potowomut Academy', 'Tripps Corner', 'Lower South Providence', 'Tuckertown', 'Washington County', 'Wyoming', 'Hillsdale Historic and Archeological District', 'Daniel Angell House', 'New England Butt Company', 'Tyler Mowry House', 'Richard Wickes Greene House', 'Wreck Sites of HMS Cerberus and HMS Lark', 'Allendale Mill', 'Roger Williams National Memorial', 'Weekapaug Inn', "Poirier's Diner", 'Kent County', 'Governor Stephen Hopkins House', 'Chepachet', 'Clayville Historic District', 'Squantum Association', 'Jamestown Windmill', 'Greystone', 'United States Customshouse', 'Indian Burial Ground', 'Liberty', 'Round Top', 'Isaac Bowen House', 'Six Corners', "St. Matthew's Episcopal Church", 'Harris Warehouse', 'Peter Greene House', 'South Central Falls Historic District', 'Osborn-Bennett Historic District', 'Stimson Avenue Historic District', 'Bernon Worsted Mill', 'Jenckes Mansion', 'Central Falls Congregational Church', 'Elizabeth Spring', 'Arnold-Palmer House', 'Laurel Hill', 'Union Station', 'Merino', 'Johnson & Wales University', 'Great Salt Pond Archeological District', 'Redwood Library and Athenaeum', 'New England Institute of Technology', 'Summit Historic District', 'Oakland', 'Charles Tillinghast House', 'Downtown Providence Historic District', 'Ochre Point-Cliffs Historic District', 'Smith-Ballou House', 'Smith Hill Historic District', 'RI-273 Nursery Site', 'Potterville', 'Pawtucket Elks Lodge Building', 'Branch Village', 'Metcalf-Franklin Farm', 'Fort Barton Site', 'Grace Church', 'Quality Hill Historic District', 'Vernon', 'Armory of the Kentish Guards', 'Ocean Road Historic District', 'Battey-Barden House', 'Portsmouth', 'Oakland Historic District', 'Charles Payne House', 'Lockwood Corner', 'Point Judith Pond', 'Dyerville', 'Burrillville', 'Spring Green', 'Wanskuck Library-Providence Community Library', 'Greystone Mill Historic District', 'Old Congregational Church', 'RI-639 Trafalgar Site', 'RI-1039 Millrace Site', 'Kitts Corner', 'Windmill Hill Historic District', 'Wanton-Lyman-Hazard House', 'Power Street-Cooke Street Historic District', 'Fiskeville', 'Quidnessett', 'Brown University University Hall', 'North Kingston Beach', 'International Yacht Restoration School', 'Globe Village', 'Bahia Corner', 'Farnham Farm', 'Dewey Cottage', 'Lafayette Village', 'William King Covell, III, House', 'Washington County Courthouse', 'Alfred Drowne Road Historic District', 'Forge Farm', "Smith's Castle", 'Hope Webbing Company Mill', 'Scholze-Sayles House', 'Haversham', 'Westcott', 'Shakespeare Hall', 'Annaquatucket', 'Henry Darling House', 'Benjamin Barker House', 'West Barrington', 'Curtis Corner', 'Potter Hill', 'Vaughn Hollow', 'Smithfield Exchange Bank', 'George Douglas House', 'Union Trust Company Building', 'Shannock Historic District', 'Isaac Bell House', 'Silver Hook', 'Woods-Gerry House', 'The Arcade', 'Providence Jewelry Manufacturing Historic District', 'Plum Beach', 'Great Road Historic District', 'West Greenwich', 'Warren Waterfront Historic District', 'Bellevue Avenue Historic District', 'Thomas H. Hughes House', 'Patterson Brothers Commercial Building and House', 'Homestead', 'Social Village', 'Indian Lake Shores', 'Richard Briggs Farm', 'Narragansett Pier', 'Columbus', 'Hope Street School', "St. Ann's Church Complex", 'Burrows Block', 'Woonsocket District Courthouse', 'Ontario Apartments', 'Trinity Square Historic District', 'Historic Village of the Narragansetts in Charlestown', 'Our Lady of Lourdes Church Complex', 'John E. Adams House', 'Earnscliffe Woolen-Paragon Worsted Company Mill Complex', 'Foster Cove Archeological Site', 'John Arnold House', 'Diamond Hill', 'Moshassuck Square', 'Tarkiln', 'Hamlet', 'Comstock Gardens', 'Newport Historic District', 'James Dennis House', 'Rumford', 'Watchaug Pond', 'Salve Regina University', 'Eddy Homestead', 'Slocum', 'Foster', 'John Corliss House', 'Millville', 'Gould', 'Wildes Corner', 'Columbia Heights', "St. Joseph's Roman Catholic Church", 'Hygeia House', 'Clarks Village', 'West Warwick', 'Newport Harbor Lighthouse', 'Newport Casino', 'Oriental Mills', 'Smithfield Road Historic District', 'Garden City', 'Perry Mill', 'East Greenwich Historic District', 'Pocasset', 'Hughesdale', 'Sons of Jacob Synagogue', 'Riverside', 'Deborah Cook Sayles Public Library', 'Woodlawn', 'Fort Ninigret', 'Mohegan', 'Pascoag', 'Pontiac Mills', 'Saylesville', 'Washington', 'Gardiner Pond Shell Midden', 'Marble House', 'Fruit Hill', 'Conimicut Light', 'Sockanosset', 'North Kingstown School District', 'Dexter Arnold Farmstead', 'Potter Pond Archeological District', 'Friends Meeting House and Cemetery', 'Block Island North Light', 'Beaman and Smith Company Mill', 'Arnold Mills Historic District', 'Rocky Brook', 'Oak Valley', 'Woonsocket City Hall', 'Old Narragansett Cemetery', 'Greene-Bowen House', 'Rhode Island Medical Society Building', 'Fairbanks Corner', 'Frenchtown', 'Bristol County Jail', 'Pullen Corner School', 'Bridgeton School', 'Woonsocket Civil War Monument', 'Naval War College', 'Spragueville', 'Scituate Commons Apartments', 'Old Colony House', 'Scituate Reservoir', 'Mitchell-Arnold House', 'Charles', 'Crowfield Historic District', 'Sheffield House', 'Capt. Stephen Olney House', 'Narragansett Baptist Church', 'Calvary Baptist Church', 'Old Narragansett Church', 'River Point', 'Towers Historic District', 'Main Street Bridge', 'Darlington', 'Joseph Smith House', 'Hallville Historic and Archeological District', 'Albion Historic District', 'Covell Street School', "St. Michael's Roman Catholic Church, Convent, Rectory, and School", 'Lawton-Almy-Hall Farm', 'Bernon', 'Woodville', 'Wickford', 'Stephen Allen House', 'Cocumscossoc Archeological Site', 'Waldron Corners', 'Jireh Bull Blockhouse Historic Site', "Rhode Island's 1st congressional district", 'Nooseneck', 'Hay and Owen Buildings', 'West Kingston', 'US Weather Bureau Station', 'Vernon House', 'Bradford', 'Woods Corner', 'Narragansett Pier Life Saving Station', 'District Four School, main campus', 'RI-1227 McGonagle Site', 'Gen. Isaac Peace Rodman House', 'Phillipsdale', 'Hamilton Mill Village Historic District', 'Belleville', 'Henry Eldred Farm', 'Gortons Corner', 'New England Tractor Trailer Training School', 'Anthony', 'Bristol Waterfront Historic District', 'South Kingstown', 'Old Friends Archeological Site', 'Upper Rockville Mill', 'Juniper Hill Cemetery', 'Greenwich Cove Site', 'Glocester Town Pound', 'William Davis Miller House', 'Saylesville Meetinghouse', 'Bristol County', 'Block Island South East Light', 'Brown University', 'Bristol Customshouse and Post Office', 'Rhode Island State Airport Terminal', 'Gazzaville', 'Ike Shippee Corner', 'Edwin H. Farnum House', 'Grants Mills', 'Providence College', 'Watch Hill, Rhode Island', 'Roger Williams University', 'Greystone Historic District', 'Jones Warehouses', 'Shippee Corner', 'Saint Thomas Episcopal Church and Rectory', 'Wanskuck Historic District', 'Charles Dowler House', 'Shannock', 'Poppasquash Farms Historic District', 'Jamestown Shores', 'Phenix', 'Glendale', 'Rhode Island Red', 'Bourne Mill', 'Hope Valley', 'Union Village', 'Slater Mill Historic Site', 'Jamestown Archeological District', 'Lincoln Park', 'Meadow View', 'George M. Bradley House', 'Boston and Providence Railroad Bridge', 'Mount Hope Farm', 'Lincoln Technical Institute', 'Coronet', 'Lonsdale', 'Blackstone Boulevard Realty Plat Historic District', 'Charles H. Baldwin House', 'Watch Hill Historic District', 'Sawyer School', 'Lonsdale Historic District', 'Palace Garden', 'Sayles Bleachery', 'Rhodes Street Historic District', 'Willow Dell', "St. Stephen's Church", 'Spink Farm', 'Broadway-Armory Historic District', 'Capt. Oliver Gardiner House', 'South Street Historic District', 'Dr. Charles Cotton House', 'Crompton', 'Read School, main campus', 'Brick Market', 'Seaweed Beach', 'Spencers Corner', 'Poplar Point Lighthouse', 'Edgewood', 'College Hill Historic District', 'Motoring Technical Training Institute', 'Carolina, Rhode Island', 'World War I Memorial', 'Bristol', 'Pawtuxet Valley Dyeing Company', 'Abbott Run', 'Lapham Institute, main campus', 'Arkwright Bridge', 'Elmgrove Gardens Historic District', 'West Greenwich Baptist Church and Cemetery', 'Capt. John Mawdsley House', 'Warwick', 'Morris Brown House', 'Silas Clapp House', 'Taylor-Chase-Smythe House', 'Lawtons', 'Purgatory', 'Newport Steam Factory', 'RI-279 Cherry Valley Archeological Site', 'Old State House', 'Ellis Flats', 'Providence Gas Company Purifier House', 'General Nathanael Greene Homestead', 'Shore Acres', 'Pottersville', 'Providence Lying-In Hospital', 'Bethel', 'Pawtuxet', 'Nichols Corner', 'Forestdale Mill Village Historic District', 'Ballou House', 'Tomaquag Rock Shelters', 'Pawtucket West High School', 'Lippitt Estate', 'Christ Episcopal Church', 'William Watts Sherman House', 'Wood River Junction', 'Benjamin Church House', 'Potter-Remington House', 'Touisset Highlands', 'Earlscourt Historic District', 'First Ward Wardroom', 'Plum Point', 'Kingscote', 'Hillsdale', 'Auburn', 'Austin', 'Wakefield', 'Brick Schoolhouse', "Oddfellows' Hall", 'Lafayette', 'Foxes Hill', 'Conanicut Battery', 'Holy Trinity Church', 'Arcadia', 'Read School', 'Thornton', 'Wilson-Winslow House', 'Lime Rock', 'Coles', 'Knightsville Meetinghouse', "St. Joseph's Church Complex", 'Jamestown', 'Harmony Chapel and Cemetery', 'Nopkins Mill Historic District', 'Whipple-Jenckes House', 'Elizabeth Building', 'Whipple-Angell-Bennett House', 'Mooresfield', 'Westerly Armory', 'Cottrell House', 'North Foster', 'Witherbee School', 'Potter-Collyer House', 'Lippitt', 'Wesleyan Avenue Historic District', 'Geneva', 'Pocasset Heights', 'John Tillinghast House', 'Harrisdale', 'Portsmouth Park', 'Israel B. Mason House', 'First Universalist Church', 'Babcock-Smith House', '1761 Milestone', 'Moosehorn Corner', 'Tiverton', 'Roger Williams Park Historic District', 'Providence Fruit and Produce Warehouse Company Building', 'Smith Hill Library-Providence Community Library', 'Community College of Rhode Island', 'Arnold Mills', 'Charlestown', 'North Quidnessett', 'Rice City', 'John Brown House', 'Kay Street-Catherine Street-Old Beach Road Historic District', 'United States Rubber Company Mill Complex', 'Christian Hill', 'Fuller Houses', 'Rhodes-on-the Pawtuxet', 'South Portsmouth', 'Black Plain', 'Hope Block and Cheapside', 'Apponaug', 'All Saints Memorial Church', 'Knightsville', 'Foster Center Historic District', 'Greenwich Mills', 'Whipple', 'Theatre-By-the-Sea', 'Providence-Biltmore Hotel', 'Allendale', 'West Winds', 'Hope-Power-Cooke Streets Historic District', 'Christopher Rhodes Greene House', 'Sakonnet Light', 'Pine Street Historic District', 'Pawtucket Post Office', 'United States Post Office', 'Weekapaug Beach', 'First Baptist Church in America', 'Joseph Slocum House', 'Candace Allen House', 'Warren', 'Bailey Farm', 'Richard Henry Deming House', 'Warwick Light', "Honan's Block and 112-114 Main Street", 'Ocean Drive Historic District', 'Dennis J. Murphy House at Ogden Farm', 'Shepard Company Building', 'Frys Corner', 'Common Fence Point', 'Francis Malbone House', 'Edward King House', 'Beach Terrace', 'Broadway-Amory Historic District', 'Dutch Island Lighthouse', 'District 6 Schoolhouse', 'Black Farm', 'Greenvale Farm', 'Rathbun House', 'Bliss Corners', 'Moosup River Site (RI-1153)', 'Bicknell-Armington Lightning Splitter House', 'Nayatt Point Lighthouse', 'Paine House', 'Ezekial Gardner House', 'Conant Thread-Coats & Clark Mill Complex District', 'Pascoag Grammar School', 'Shady Harbor', 'Paul Mitchell the School-Rhode Island', 'West Greenville', 'Ashaway', 'Druidsdream', 'Brenton Village', 'Casey Farm', 'Laurel Park', 'Frank Wilbur House', 'Annawomscutt', 'William Whalley Homestead', 'Primrose', 'White Horse Tavern', 'Oak Lawn Village Historic District', 'Beavertail Lighthouse', 'Albion', 'Hog Island Shoal Light', 'Social', 'Joseph Rogers House', 'Nelson W. Aldrich House', 'Indian Oaks', "Queen's Fort", 'Tootell House', 'Allenville Mill', 'East Warren', 'Esek Hopkins House', 'New Shoreham', 'College Hill', 'Providence Steel and Iron Company Complex', 'Pettaquamscutt Lake Shores', 'North Tiverton', 'Norwood Avenue Historic District', 'Mathewson Farm', 'Cherry Valley', 'Jackson', 'Bonnet Shores', 'Childs-Brown House', 'Paradise School', 'Davol Rubber Company', 'Angell-Ballou House', 'Hamlet Village', 'North End Historic District', 'Bristol Warren Regional School District', 'Ashton Historic District', 'Glen Rock', 'Harmony', 'Olney Street-Alumni Avenue Historic District', 'Wescott Beach', 'Bryant University', 'Waterman Tavern', 'Andrew Dickhaut Cottages Historic District', 'Commodore Oliver Perry Farm', 'Mount Hope Bridge', 'Lippitt Hill Historic District', 'Conanicut Island Light', 'Beneficent Congregational Church', 'Chateau-sur-Mer', 'Red House', 'Bristol Township', 'Peck Corner', 'Constance Witherby Park', 'Luke Jillson House', 'South Street Station', 'Mount View', 'North Burial Ground', 'Grayville', 'Isaac Bell, Jr., House', 'Park Square', 'Avondale', "President's House, Naval War College", 'Newman Congregational Church', 'Ida Lewis Lighthouse', 'Conimicut', 'Hopelands', 'Mount Hope', 'Fisherville', 'Quonochontaug Beach', 'Brudickville', 'West Glocester', 'Hopkins Hollow', 'Gilbert Stuart Birthplace', 'Common Burying Ground and Island Cemetery', 'Narragansett', 'Caleb Greene House', 'William Waterman House', 'Andrews-Luther Farm', 'Hale House', 'Ballou-Weatherhead House', 'Rhode Island Tool Company building', 'Former Immaculate Conception Church', 'Old Ashton Historic District', 'Nathaniel Pearce House', 'Battle of Rhode Island Site', 'US Post Office', 'Cowesett Pound', 'Old Harbor Historic District', "Kenyon's Department Store", 'Exeter', 'Portsmouth Friends Meetinghouse Parsonage and Cemetery', 'Tillinghast Mill Site', 'Fox Point', 'Nasonville', 'Ochee Spring Quarry', "St. Mary's Church of the Immaculate Conception Complex", 'Fountain Spring', 'Lorenzo Crandall House', 'Blackstone Park Historic District', 'Temple Beth-El', 'Silver Spring', 'Tiverton Four Corners', 'Conanicut Park', 'Thomas P. Ives House', 'State Arsenal', 'Snug Harbor', 'Oak Dell Historical Cemetery', 'Huntsville', 'Doyle Avenue Historic District', 'Louis Kotzow House', 'Oakland Beach', 'Slatersville Historic District', 'Oakland Avenue Historic District', 'John Waterman Arnold House', "RI-694 Devil's Foot Cemetery Archeological Site", 'East Natick', 'Eleazer Arnold House', 'Swan Point Cemetery', 'Woonsocket Company Mill Complex', 'William L. Bailey House', 'Lewis Tower House', 'Moosup Valley', 'Marieville', 'Allenton', 'Shawomet', 'Tuckertown Four Corners', 'Sheldon House', 'Mountaindale', 'Berkeley Mill Village', 'Edgewood Historic District-Taft Estate Plat', 'Pawtucket Armory', 'Saundersville', 'Fort Adams', 'Isaacs Corner', 'Burlingame-Noon House', "St. Paul's Church", 'Philmont Worsted Company Mill', 'Collyer Monument', 'Sachuest', 'Jules Desurmont Worsted Company Mill', 'Potowomut', 'Brown and Sharpe Manufacturing Company Complex', 'Dyerville Mill', 'John Griswold House', 'Kingston Railroad Station', 'Hillsgrove', 'Valley Falls', 'Hazard Farmstead (Joyner Site RI-706)', "Vue de l'eau", 'Kent Heights', 'Point Judith', 'Slatersville', 'Edward Dexter House', 'Lymansville', "The Bird's Nest", 'Clambake Club of Newport', 'Lime Kilns', 'Rhode Island College', 'Wayland', 'Rocky Point', 'Central Falls', 'Breezy Hill Site (RI-957)', 'Smith-Gardiner-Norman Farm Historic District', 'North Scituate', 'Bristol Ferry Light', 'Jenckesville', 'Clyde', 'Trinity Church', 'Barrington College', 'Nathan Westcott House', 'Rhode Island Hospital Trust Building', 'McGowan Corners', 'RI-1025 Bouchard Archeological Site', 'Providence', 'Hope Village Historic District', 'Reservoir Avenue Sewage Pumping Station', 'Crompton Free Library', "Boyd's Windmill", 'John Hoxsie House', 'Tiverton Four Corners Historic District', 'Kettle Corner', "Naval War College President's House", 'Wyoming Village Historic District', 'Newport County', 'R. R. Gardner House', 'Woonsocket Rubber Company Mill', 'Newport East', 'Blithewold Mansion, Gardens and Arboretum', 'Coventry', 'Cornell-Randall-Bailey Roadhouse', 'Emmanuel Church', 'Saylesville Historic District', 'Moses Brown School', 'Miscoe Lake', 'Simon Lillibridge Farm', 'Gloria Dei Evangelical Lutheran Church', 'RI-269 Lambert Farm Site', 'Ashton', 'St. John the Baptist Church', 'Galilee', 'Clarke Street Meeting House', 'Pawtucket Times Building', 'Luthers Corners', 'Lewis-Card-Perry House', 'Arkwright', 'Carpenters Corner', 'Lakewood', 'North Providence', 'Scituate', 'Langworthy Corner', 'Cranston', 'Arad Wood House', 'Bridgham–Arch–Wilson Streets Historic District', 'Horsehead-Marbella', 'Bridgetown', 'Joseph Hicks House', 'Clayville', 'Shiloh Church', 'Scarborough Hills', 'Tarbox Corner', 'Happy Hollow', 'Meadows Archeological District', 'Whipple-Cullen House and Barn', 'Providence County', 'Perkins Buildings', 'Bayside', 'Logee House', 'Moses Greene House', 'Touro Synagogue', 'Locustville', 'Fire Station No. 4', 'Warwick Civic Center Historic District', 'Rice City Historic District', 'Bridgham Farm', 'Army and Navy YMCA', 'Henry Marchant Farm', 'Nathaniel Daggett House', 'Leonard Corner', 'Gaspee Point', 'Bartons Corner', 'Esbon Sanford House', 'Peleg Champlin House', 'Union Village, Rhode Island', 'Aylesworth Apartments', 'Bridge Mill Power Plant', 'Lippitt Mill', 'Pontiac', 'Westerly Downtown Historic District', 'Capt. George Dorrance House', 'Waterman-Winsor Farm', 'Whitehall', 'Stadium Building', 'Quidnick', 'Moscow', 'Slater Park', 'Kenyon', 'Wightmans Corner', 'Centerville', 'Stillmanville', 'St. Andrews Episcopal Chapel', 'Elmwood', 'Point Judith Lighthouse', 'North Smithfield', 'Congdon Street Baptist Church', 'Chepiwanoxet', 'Kiefer Park', 'Smith Street Primary School', 'Joseph Jeffrey House', 'Interlaken Mill Bridge', 'Union Church', 'Pine Hill', 'St Joseph School of Nursing', 'South Foster', 'Nathaniel Montgomery House', "L'Eglise du Precieux Sang", 'Mount Vernon Tavern', 'Modern Diner', 'South Ferry', 'Oaklawn', 'Josephine White Block', 'Berkeley', 'RI-960 Moswansicut Pond Site', 'Hanora Mills', 'Fairlawn', 'Ernest Street Sewage Pumping Station', 'Main Street Historic District', 'Rose Island Light', 'Scrabbletown Historic and Archeological District', 'Gladstone Springhouse and Bottling Plant', 'Colvintown', 'Saunderstown', 'Warren United Methodist Church and Parsonage', 'Moosup Valley Historic District', 'Newport', 'Centreville Mill', 'Stillwater', 'Providence Zen Center', 'Fleur-de-lys Studios', 'Wickford Historic District', 'District Four School', 'Grove Street Elementary School', 'Cato Hill Historic District', 'Buttonwoods Beach Historic District', 'Joseph Pierce Farm', 'Harrisville', 'Oliver A. Wickes House', 'Furnace Hill Brook Historic and Archeological District', 'Tug Hollow', 'White Rock', 'Newport Artillery Company Armory', 'Cumberland', 'Pawtucket Congregational Church', 'Downtown Pawtucket Historic District', 'David Sprague House', 'Bristol County Courthouse', 'Greene-Durfee House', 'David G. Fales House', 'Jennys Lane Historic District', 'Christopher Rhodes House', 'Shady Lea Historic District', 'Nausauket', 'South Hopkinton', 'Bristol Ferry', 'Central Street School', 'Hopkinton', 'The Hummocks', 'Mount Hygeia', 'Tower-Flagg Barn Complex', 'Dr. George W. Carr House', 'Caleb Gorton House', "Gilbane's Service Center Building", 'Greenville', 'Peleg Arnold Tavern', 'Baptist Church in Exeter', 'Zachariah Allen House', 'Nicholson File Company Mill Complex', 'Customhouse Historic District', 'Shadow Farm', 'Hamilton', 'George Fayerweather Blacksmith Shop', 'Sakonnet', 'Highland Beach', 'Governor Henry Lippitt House', 'West End', 'Rumford Chemical Works and Mill House Historic District', 'Weybosset Mills Complex', 'RI-781 Ministerial Rd. Site', 'Luce Hall', 'Usquepaug Road Historic District', 'Island Park', 'Perry-Carpenter Grist Mill', 'Roger Williams University School of Law', 'Rockville', 'Ezra Stiles House', 'Bridgeton', 'Arctic', 'Quonochontaug, Rhode Island', 'Royal Mill Complex', 'Furnace Carolina Site', 'Forestdale', "Loew's State Theatre", 'The Towers', 'Clarkville', 'Newman Cemetery', 'William King Covell III House', 'Riverside Cemetery', 'Glenark Mills', 'Nightingale–Brown House', 'Gibbs College', 'Ladd Observatory', 'Perryville', 'Pothier House', 'Simmonsville', 'Babcock House', 'Spring Lake', 'Whitcomb Farm', 'Cranston School District', 'Belton Court', 'Harris', 'Israel Arnold House', 'Barberville', 'Davisville Historic District', 'Hamilton Hoppin House', "Browning's Beach Historic District", 'Rhode Island School of Design', 'Corliss-Brackett House', 'RI-958 Double L Site', 'University of Rhode Island', 'Phillips Insulated Wire Company Complex', 'Six Principle Baptist Church', 'Freeman Plat Historic District', 'Wilcox Park Historic District', 'Armington Corner', 'Joseph Briggs House-Coventry Town Farm', 'Hearthside', 'Bay Spring', 'Budlong Farm', 'The Breakers', 'Knight Estate', 'Coggeshall', 'Pawtuxet Village', 'Natick', 'Pawtucket City Hall', 'Saylesville Highlands', 'Samuel B. Conant House', 'Area code 401', 'Bristol Highlands', 'Southern Thames Historic District', 'Veterans Memorial Auditorium', 'Davisville', 'Kingston', 'Woonsocket', 'The Elms', 'Longfield', 'Plum Beach Lighthouse', 'Valley Falls Mill', 'Mapleville', 'Malbone', 'Georgiaville', 'Central Street Historic District', 'Paradise School, main campus', "St. Mary's Church and Cemetery", 'Samuel Whitehorne House', 'Flying Horse Carousel', 'Providence Telephone Building', 'Oak Glen', 'Kent Corner', 'Little Neck Cemetery', 'Kingston Village Historic District', 'Borden Farm', 'Fort Dumpling Site', 'East Greenwich', 'Globe', 'Hopkinton City Historic District', 'Nag Creek', 'Prudence Island Light', 'Richmond', 'Kingston Station', 'Exchange Street Historic District', 'Chopmist', "Lawton's Mill", 'Jenks Park & Cogswell Tower', 'Valley Queen Mill', 'Louttit Laundry', 'Pitcher-Goff House', 'Cooks Corner', 'Miantonomi Memorial Park', 'Todd Farm', 'Folly Landing', 'Thomas Carr Farmstead Site (Keeler Site RI-707)', 'Wickford Junction', 'Monastery Heights', 'Edgewood Yacht Club', 'Rosedale Apartments', 'Narragansett Terrace', 'Lewis City', 'St. Charles Borromeo Church Complex', 'Windmill Cottage', 'John R. Waterman House', 'Jenckes House', 'Centerdale', 'Cathedral of Saints Peter and Paul, Providence', 'Glocester', 'Thomas F. Hoppin House', 'Norwood', 'Joseph Stanton House', 'Pawtucket', 'Rhode Island Statehouse', 'Manville', 'Harrisville Historic District', 'Dunn Landing', 'Friends Meetinghouse', 'Massie Wireless Station', 'Butler Hospital', 'District Schoolhouse No. 2', 'Adamsville', 'Lincoln', 'Leroy Theatre', 'Valley Falls Mill, Office and Bath House', 'Smith-Appleby House', "Art's Auto", 'Witherbee School, main campus', 'Places Corner', 'Gen. James Mitchell Varnum House', "Fry's Hamlet Historic District", 'Graniteville', 'William Mowry House', 'Brown Avenue Historic District', 'Joseph Spaulding House', 'Block Island', 'Division Street Bridge', 'National and Providence Worsted Mills', 'Foster-Payne House', 'American Street School', 'Camp Endicott', 'Rhode Island Convention Center', 'Phillip Walker House', 'Central Falls Mill Historic District', 'Castle Hill Light', 'Joseph and William Russell House', 'Dunmere', 'Sodom Mill Historic and Archeological District', 'Cumberland Hill'}
            Answers = 1135, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.045s]
          Answers = 1135, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.045s]
        Checking schema 15 / 89: {
          [('Main', '==', 'm.06btq', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 6
            Final Answer: {'United States Senate elections, 2006', "King Philip's War", 'Northeast blackout of 1965', 'Battle of Point Judith', 'Dorr Rebellion', 'Battle of Rhode Island'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 16 / 89: {
          [('Main', '==', 'm.06btq', ['military.military_unit_place_of_origin.military_units'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:military.military_unit_place_of_origin.military_units ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:military.military_unit_place_of_origin.military_units ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 32
            Final Answer: {'Battery G, 1st Rhode Island Light Artillery', 'Battery E, 1st Rhode Island Light Artillery', '1st Rhode Island Infantry', 'Battery B, 3rd Rhode Island Heavy Artillery', 'Battery C, 3rd Rhode Island Heavy Artillery', '2nd Rhode Island Infantry', '14th Rhode Island Heavy Artillery (Colored)', 'Battery H, 1st Rhode Island Light Artillery', 'Battery G, 3rd Rhode Island Heavy Artillery', '4th Rhode Island Infantry', '5th Rhode Island Infantry', '9th Rhode Island Infantry', '2nd Rhode Island Cavalry', '1st Rhode Island Cavalry', 'Battery A, 3rd Rhode Island Heavy Artillery', 'Battery B, 1st Rhode Island Light Artillery', '7th Rhode Island Infantry', 'Battery C, 1st Rhode Island Light Artillery', 'Battery F, 3rd Rhode Island Heavy Artillery', '10th Rhode Island Battery', 'Battery A, 1st Rhode Island Light Artillery', '3rd Rhode Island Infantry', '11th Rhode Island Infantry', 'Battery E, 3rd Rhode Island Heavy Artillery', 'Battery D, 1st Rhode Island Light Artillery', 'Battery F, 1st Rhode Island Light Artillery', 'Battery H, 3rd Rhode Island Heavy Artillery', '7th Squadron, Rhode Island Cavalry', 'Battery D, 3rd Rhode Island Heavy Artillery', '3rd Rhode Island Cavalry', '10th Rhode Island Infantry', '12th Rhode Island Infantry'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 17 / 89: {
          [('Main', '==', 'm.06btq', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 2
            Final Answer: {'The Providence Journal', 'El Latino Expreso'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 18 / 89: {
          [('Main', '==', 'm.06btq', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 2
            Final Answer: {'Eastern Time Zone', 'UTC-5'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 19 / 89: {
          [('Main', '==', 'm.06btq', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06btq fb:location.location.area ?o1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 WHERE { fb:m.06btq fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'3140'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 20 / 89: {
          [('Main', '==', 'm.06btq', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 6
            Final Answer: {'Contiguous United States', 'United States, with Territories', 'United States of America', 'Northeastern United States', 'New England', 'Southern New England'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 21 / 89: {
          [('Main', '==', 'm.06btq', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 20
            Final Answer: {'Whisper in the dark', 'Baptist Piety', 'Mill', 'Rhode Island blues', 'Weekend Walks in Rhode Island', 'Dance with me', 'The Edge of Winter', 'The Survivors Club', 'Summer by the sea', 'The sword and the Grail', 'Liberty of conscience', 'A key into the language of America', 'Roger Williams:  Lives and Legacies', 'Walks and rambles in Rhode Island', 'European Painting and Sculpture Circa 1770 to 1937', 'I, Roger Williams', 'Earthsound', 'The Widows of Eastwick', 'The country', 'Southern New England'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 22 / 89: {
          [('Main', '==', 'm.06btq', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 6
            Final Answer: {'Libertarian Party of Rhode Island', 'Institute of Professional Practice', 'Northern Rhode Island Conservation District', "B'nai B'rith District Grand Lodge 1", 'Eastern Rhode Island Conservation District', 'Southern Rhode Island Conservation District'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 23 / 89: {
          [('Main', '==', 'm.06btq', ['base.locations.states_and_provences.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.locations.states_and_provences.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:base.locations.states_and_provences.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 24 / 89: {
          [('Main', '==', 'm.06ky_', ['travel.travel_destination.tourist_attractions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:19] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 2
            Final Answer: {'Archaeological Museum of Rhodes (Hospital of the Knights)', 'St Pauls Bay'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 25 / 89: {
          [('Main', '==', 'm.06ky_', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 15
            Final Answer: {'Eudemus of Rhodes', 'Niki Xanthou', 'Chares of Lindos', 'Costas Kapakas', 'Franco Fantasia', 'Orpheus Spiliotopoulos', 'Dionysis Makrydimitris', 'Memnon of Rhodes', 'Panaetius', 'Agesander of Rhodes', 'Stergos Felegakis', 'Alexandros Kaklamanos', 'Callixenus of Rhodes', 'Petros Zouroudis', 'Geminus'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 26 / 89: {
          [('Main', '==', 'm.06ky_', ['geography.island.island_group'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:geography.island.island_group ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:geography.island.island_group ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 1
            Final Answer: {'Dodecanese'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 27 / 89: {
          [('Main', '==', 'm.06ky_', ['people.place_of_interment.interred_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:people.place_of_interment.interred_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:people.place_of_interment.interred_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 1
            Final Answer: {'Şahin Giray'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 28 / 89: {
          [('Main', '==', 'm.06ky_', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 4
            Final Answer: {'Monolithos, Greece', 'Gennadi', 'Kattavia', 'Petaloudes'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 29 / 89: {
          [('Main', '==', 'm.06ky_', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 7
            Final Answer: {'Battle of Rhodes', 'Siege of Rhodes', '1998 European Beach Volleyball Championships', 'Operation Anglo', 'Cretan War (205–200 BC)'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 30 / 89: {
          [('Main', '==', 'm.06ky_', ['geography.island.body_of_water'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:geography.island.body_of_water ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:geography.island.body_of_water ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 2
            Final Answer: {'Mediterranean Sea', 'Aegean Sea'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 31 / 89: {
          [('Main', '==', 'm.06ky_', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 4
            Final Answer: {'Eastern European Summer Time', 'UTC+03:00', 'Eastern European Time', 'UTC+02:00'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 32 / 89: {
          [('Main', '==', 'm.06ky_', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 2
            Final Answer: {'Greece', 'Rhodes'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 33 / 89: {
          [('Main', '==', 'm.06ky_', ['location.location.nearby_airports'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 1
            Final Answer: {'Rhodes International Airport'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 34 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 124
            Final Answer: {'963107', '669000', '680000', '899000', '946089', '977340', '953012', '656000', '1012', '787000', '1475', '815000', '578000', '97199', '975738', '687497', '770000', '604000', '519000', '542610', '950382', '2173', '893000', '450000', '823000', '589000', '613000', '686000', '885000', '1050', '675000', '345506', '1065', '1074', '748000', '858000', '567000', '604397', '677000', '701000', '597000', '606000', '951816', '851000', '961895', '1000', '681000', '859488', '968956', '909000', '857000', '922000', '505000', '1088', '1053', '791896', '932000', '76931', '954170', '598000', '950230', '532000', '989605', '430000', '545000', '556000', '776000', '68825', '996407', '956382', '460000', '801000', '1020', '871000', '441000', '947154', '1010', '876000', '1052', '949723', '684000', '840000', '946725', '2765', '1063', '1017', '471000', '1057', '1031', '1040', '1071', '760000', '492000', '481000', '713346', '816000', '678000', '719000', '784000', '629000', '1051', '428556', '731000', '1025', '1015', '644000', '942788', '603000', '1067', '795000', '69122', '855000', '950615', '802000', '1055', '786000', '1005', '974790', '1746', '83059', '694000'}
            Answers = 121, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 121, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 35 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'4.69e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 36 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 124
            Final Answer: {'2007', '1850', '1985', '1860', '1929', '1981', '1965', '1992', '1830', '2001', '1996', '1951', '1927', '1962', '1944', '2000', '1905', '1974', '1997', '1969', '2005', '1953', '1973', '2012', '1950', '1979', '1928', '1971', '1958', '1978', '1945', '2008', '1917', '1956', '1912', '1941', '1930', '1880', '1972', '1959', '1915', '2006', '1964', '1933', '1922', '1983', '1920', '1949', '1932', '1910', '1908', '1960', '1902', '1925', '1961', '1936', '1990', '1890', '1790', '1935', '1907', '1911', '1963', '1810', '1900', '1921', '1924', '1914', '1948', '1940', '2011', '1957', '1999', '1942', '1984', '1840', '1988', '1934', '1970', '1870', '1923', '1989', '2003', '1967', '1955', '1901', '1998', '1980', '1904', '1820', '1993', '1977', '1919', '2010', '1986', '1918', '2002', '1952', '1903', '1987', '1966', '1939', '1947', '1994', '1976', '2009', '1946', '1926', '1916', '1909', '1931', '1913', '1954', '1975', '1995', '1968', '1982', '1906', '1991', '2004', '1943', '1800', '1938', '1937'}
            Answers = 124, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 124, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 37 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 38 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 2
            Final Answer: {'Bureau of Labor Statistics, Unemployment in US States', 'Unemployment rate, Unemployment in the U.S., U.S. Bureau of Labor Statistics'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 39 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 2
            Final Answer: {'United States Census Bureau, Population', 'Population, Population in the U.S., U.S. Census Bureau'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 40 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 41 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 71
            Final Answer: {'6.2', '5.4', '4.2', '8.7', '4.6', '6.9', '5.3', '8.2', '7.6', '6.3', '7.4', '4.1', '8.5', '11.1', '11.8', '10.2', '10.5', '6.4', '11.3', '5.8', '6.7', '5.5', '8.6', '8.1', '10.4', '11.6', '6.8', '11.7', '11', '4.7', '6.1', '6', '5.6', '11.2', '4.9', '7.8', '5.2', '5.1', '11.4', '9.9', '7.7', '5.9', '9.8', '11.5', '5', '4.3', '4.4', '11.9', '7.9', '9.4', '10.9', '7.3', '10', '10.1', '7', '6.6', '8.9', '9.1', '10.8', '8.8', '8.4', '4.8', '7.1', '10.6', '4.5', '9.7', '7.5', '5.7', '7.2', '6.5', '10.7'}
            Answers = 71, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 71, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 42 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 280
            Final Answer: {'2007', '2002', '2010', '2011', '1992', '2006', '2001', '1994', '1996', '2009', '1999', '2000', '1997', '2003', '1995', '1998', '2005', '2012', '1990', '1991', '2004', '1993', '2013', '2008'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 43 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.date ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 2
            Final Answer: {'2013', '2012'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 44 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 45 / 89: {
          [('Main', '==', 'm.06btq', ['government.political_district.representatives', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 46 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Rhode Island'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 47 / 89: {
          [('Main', '==', 'm.06btq', ['government.political_district.representatives', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Senator'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 48 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 3
            Final Answer: {'Secretary of state', 'Governor', 'Attorney general'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 49 / 89: {
          [('Main', '==', 'm.06btq', ['government.political_district.representatives', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 2
            Final Answer: {'Continental Congress', 'United States Senate'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 50 / 89: {
          [('Main', '==', 'm.06btq', ['government.political_district.representatives', 'government.government_position_held.legislative_sessions'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.legislative_sessions ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.legislative_sessions ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 44
            Final Answer: {'5th United States Congress', '113th United States Congress', '3rd United States Congress', '19th United States Congress', '20th United States Congress', '27th United States Congress', '9th United States Congress', '30th United States Congress', '23rd United States Congress', '24th United States Congress', '16th United States Congress', '112th United States Congress', '17th United States Congress', '108th United States Congress', '7th United States Congress', '111th United States Congress', '105th United States Congress', '18th United States Congress', 'First Continental Congress', '109th United States Congress', '10th United States Congress', '12th United States Congress', '29th United States Congress', '4th United States Congress', '28th United States Congress', '106th United States Congress', '6th United States Congress', '110th United States Congress', '33rd United States Congress', '31st United States Congress', '15th United States Congress', '1st United States Congress', '21st United States Congress', '26th United States Congress', '22nd United States Congress', '2nd United States Congress', '25th United States Congress', '11th United States Congress', '107th United States Congress', '13th United States Congress', '32nd United States Congress', '14th United States Congress', '8th United States Congress', '34th United States Congress'}
            Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 51 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.religions', 'location.religion_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.religions ?o1 . ?o1 fb:location.religion_percentage.date ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.religions ?o1 . ?o1 fb:location.religion_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'2002'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 52 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.official_symbols', 'location.location_symbol_relationship.symbol'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.official_symbols ?o1 . ?o1 fb:location.location_symbol_relationship.symbol ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.official_symbols ?o1 . ?o1 fb:location.location_symbol_relationship.symbol ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 6
            Final Answer: {'Hope', 'Viola', 'Coffee milk', 'Rhode Island Red', 'Acer rubrum', 'Striped bass'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 53 / 89: {
          [('Main', '==', 'm.06btq', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 54 / 89: {
          [('Main', '==', 'm.06btq', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.administrative_division'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Rhode Island'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 55 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.frequency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.frequency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.frequency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Hour'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 56 / 89: {
          [('Main', '==', 'm.06btq', ['government.political_district.representatives', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 30
            Final Answer: {'Albert C. Greene', 'Jack Reed', 'Francis Malbone', 'James Burrill, Jr.', 'Philip Allen', 'Asher Robbins', 'Theodore Foster', 'James De Wolf', 'Joseph Stanton, Jr.', 'Claiborne Pell', 'Stephen Hopkins', 'Charles Tillinghast James', 'Christopher Ellery', 'Samuel Ward', 'William Hunter', 'William Sprague', 'Nehemiah R. Knight', 'Benjamin Howland', 'John Brown Francis', 'James Fenner', 'Ray Greene', 'William Bradford', 'Theodore F. Green', 'James F. Simmons', 'Samuel J. Potter', 'John Hopkins Clarke', 'Elisha Mathewson', 'Sheldon Whitehouse', 'Nathan F. Dixon I', 'Christopher G. Champlin'}
            Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 57 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 71
            Final Answer: {'Byron Diman', 'Norman S. Case', 'John O. Pastore', 'Royal C. Taft', 'Alfred H. Littlefield', 'Herbert W. Ladd', 'Bruce Sundlun', 'William S. Flynn', 'Donald Carcieri', 'Philip Allen', 'Elisha Dyer, Jr.', 'Arthur Fenner', 'Christopher Del Sesto', 'Ambrose Burnside', 'J. Joseph Garrahy', 'Charles D. Kimball', 'Lincoln Chafee', 'William Henry Vanderbilt III', 'Henry Smith', 'Henry Lippitt', 'Edward D. DiPrete', 'Thomas Wilson Dorr', 'Dennis J. Roberts', 'Elisha Harris', 'Aram J. Pothier', 'Lemuel H. Arnold', 'John A. Notte, Jr.', 'Lincoln Almond', 'J. Howard McGrath', 'Henry Howard', 'Henry B. Anthony', 'Francis M. Dimond', 'William C. Cozzens', 'William Jones', 'Daniel Russell Brown', 'Charles C. Van Zandt', 'William Sprague', 'John Chafee', 'Peter Kilmartin', 'Nehemiah R. Knight', 'Augustus O. Bourn', 'Isaac Wilbour', 'Emery J. San Souci', 'John W. Davis', 'Elisha Dyer', 'John Brown Francis', 'James Fenner', 'Frank Licht', 'Philip W. Noel', 'Nicholas Cooke', 'Samuel Ward King', 'Robert E. Quinn', 'William Gregory', 'Theodore F. Green', 'Charles Jackson', 'William W. Hoppin', 'James H. Higgins', 'Thomas G. Turner', 'Seth Padelford', 'George H. Utter', 'William C. Gibbs', 'Robert Livingston Beeckman', 'James Y. Smith', 'William Greene', 'George P. Wetmore', 'Charles W. Lippitt', 'John Collins', 'A. Ralph Mollis', 'Lucius F. C. Garvin', 'John S. McKiernan'}
            Answers = 70, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 70, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 58 / 89: {
          [('Main', '==', 'm.06btq', ['government.political_district.representatives', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 2
            Final Answer: {'United States Senator', 'Delegate to the Continental Congress'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 59 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 3
            Final Answer: {'Attorney General of Rhode Island', 'Governor of Rhode Island', 'Secretary of State of Rhode Island'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 60 / 89: {
          [('Main', '==', 'm.06btq', ['government.political_district.representatives', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Rhode Island'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 61 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.religions', 'location.religion_percentage.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.religions ?o1 . ?o1 fb:location.religion_percentage.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.religions ?o1 . ?o1 fb:location.religion_percentage.religion ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 11
            Final Answer: {'Catholicism', 'Christianity', 'United Church of Christ', 'Pentecostalism', 'Methodism', 'Protestantism', 'Baptists', 'Episcopal Church', "Jehovah's Witnesses", 'Seventh-day Adventist Church', 'Presbyterianism'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 62 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.religions', 'location.religion_percentage.percentage'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.religions ?o1 . ?o1 fb:location.religion_percentage.percentage ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.religions ?o1 . ?o1 fb:location.religion_percentage.percentage ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 7
            Final Answer: {'8', '15', '2', '51', '1', '6', '4'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 63 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.official_symbols', 'location.location_symbol_relationship.date_adopted'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.official_symbols ?o1 . ?o1 fb:location.location_symbol_relationship.date_adopted ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.official_symbols ?o1 . ?o1 fb:location.location_symbol_relationship.date_adopted ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 3
            Final Answer: {'1954', '1917', '1993'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 64 / 89: {
          [('Main', '==', 'm.06btq', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'90'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 65 / 89: {
          [('Main', '==', 'm.06btq', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 66 / 89: {
          [('Main', '==', 'm.06btq', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Rhode Island'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 67 / 89: {
          [('Main', '==', 'm.06btq', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Rhode Island'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 68 / 89: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.amount ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 2
            Final Answer: {'7.75', '7.4'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 69 / 89: {
          [('Main', '==', 'm.06btq', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'41.7'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 70 / 89: {
          [('Main', '==', 'm.06btq', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'-71.5'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 71 / 89: {
          [('Main', '==', 'm.06btq', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 3
            Final Answer: {'Massachusetts', 'Connecticut'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 72 / 89: {
          [('Main', '==', 'm.06btq', ['government.political_district.representatives', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 29
            Final Answer: {'2007', '1853', '1811', '1845', '1842', '1817', '1801', '1821', '1847', '1809', '1803', '1839', '1807', '1997', '1851', '1804', '1774', '1805', '1961', '1793', '1825', '1797', '1790', '1844', '1841', '1937'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 73 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 75
            Final Answer: {'1843', '1778', '1875', '1831', '1786', '1963', '1941', '1775', '1880', '1833', '1985', '1857', '1903', '1897', '1860', '1900', '1877', '1859', '1921', '1853', '1939', '1873', '1959', '1895', '1811', '2011', '1915', '1842', '1845', '1817', '1821', '1889', '1951', '1933', '1847', '1846', '1806', '1883', '1839', '1807', '1824', '1923', '1905', '1909', '1885', '1869', '1851', '1838', '2003', '1888', '1995', '2007', '1969', '1866', '1901', '1892', '1925', '1973', '1805', '1891', '1961', '1950', '1928', '1890', '1991', '1790', '1887', '1849', '1854', '1977', '1945', '1907', '1937', '1863'}
            Answers = 74, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 74, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 74 / 89: {
          [('Main', '==', 'm.06btq', ['government.political_district.representatives', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 27
            Final Answer: {'1857', '1859', '1853', '1811', '1845', '1842', '1801', '1821', '1847', '1809', '1803', '1839', '1807', '1997', '1851', '1804', '1774', '1805', '1793', '1961', '1825', '1820', '1797', '1844', '1841'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 75 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 73
            Final Answer: {'1843', '1778', '1941', '1875', '1786', '1963', '1831', '1880', '1833', '1985', '1897', '1903', '1900', '1860', '1857', '1877', '1921', '1859', '1873', '1939', '1853', '1959', '2011', '1811', '1895', '1915', '1845', '1817', '1821', '1889', '1951', '1933', '1847', '1846', '1806', '1883', '1839', '1807', '1824', '1905', '1923', '1909', '1885', '1851', '1869', '1838', '2003', '1888', '1995', '1969', '1866', '1901', '1892', '1925', '1961', '1973', '1891', '1950', '1805', '1928', '1890', '1991', '1790', '1887', '1849', '1854', '1977', '1945', '1907', '1937', '1863'}
            Answers = 71, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 71, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 76 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.official_symbols', 'location.location_symbol_relationship.Kind_of_symbol'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.official_symbols ?o1 . ?o1 fb:location.location_symbol_relationship.Kind_of_symbol ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.official_symbols ?o1 . ?o1 fb:location.location_symbol_relationship.Kind_of_symbol ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 6
            Final Answer: {'State bird', 'State beverage', 'State Fish', 'State flower', 'Motto', 'State tree'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 77 / 89: {
          [('Main', '==', 'm.06btq', ['government.governmental_jurisdiction.official_symbols', 'location.location_symbol_relationship.administrative_division'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.official_symbols ?o1 . ?o1 fb:location.location_symbol_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:government.governmental_jurisdiction.official_symbols ?o1 . ?o1 fb:location.location_symbol_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Rhode Island'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 78 / 89: {
          [('Main', '==', 'm.06btq', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Rhode Island'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 79 / 89: {
          [('Main', '==', 'm.06btq', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'76'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 80 / 89: {
          [('Main', '==', 'm.06btq', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Flag of Rhode Island'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 81 / 89: {
          [('Main', '==', 'm.06btq', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06btq fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'1897'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 82 / 89: {
          [('Main', '==', 'm.06btq', ['location.administrative_division.capital', 'location.administrative_division_capital_relationship.capital'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.administrative_division.capital ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Providence'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 83 / 89: {
          [('Main', '==', 'm.06ky_', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06ky_ fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06ky_ fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 1
            Final Answer: {'1170'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 84 / 89: {
          [('Main', '==', 'm.06ky_', ['location.location.geolocation', 'location.geocode.elevation'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06ky_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.elevation ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06ky_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.elevation ?o2 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 1
            Final Answer: {'1216'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 85 / 89: {
          [('Main', '==', 'm.06ky_', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06ky_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06ky_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 86 / 89: {
          [('Main', '==', 'm.06ky_', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06ky_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06ky_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 1
            Final Answer: {'Rhodes'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 87 / 89: {
          [('Main', '==', 'm.06ky_', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06ky_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06ky_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 1
            Final Answer: {'36.1667'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 88 / 89: {
          [('Main', '==', 'm.06ky_', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06ky_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 WHERE { fb:m.06ky_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 1
            Final Answer: {'28'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        85 / 89 coarse schemas kept with ans_size > 0.
      } [1.157s]
      Coarse level ended, resulting in 85 schemas.
    } [1.495s]
    Type level searching (total types = 10): {
      Current: 0 / 85
[{'location.country'}]
[{'location.country'}]
[{'base.aareas.schema.administrative_area'}]
[{'government.governmental_body'}]
[{'people.person'}]
[{'location.citytown'}]
[{'location.location'}]
[{'base.aareas.schema.earth.citytown'}]
[{'government.government_office_or_title'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'military.military_unit'}]
[{'book.newspaper'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'base.locations.countries'}]
[{'travel.tourist_attraction'}]
[{'people.person'}]
[{'geography.island_group'}]
[{'people.deceased_person'}]
[{'location.location'}]
[{'time.event'}]
[{'geography.body_of_water'}]
[{'time.time_zone'}]
[{'location.location'}]
[{'aviation.airport'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.recurring_money_value'}, {'type.datetime'}]
[{'measurement_unit.recurring_money_value'}, {'finance.currency'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'government.government_position_held'}, {'government.legislative_session'}]
[{'location.religion_percentage'}, {'type.datetime'}]
[{'location.location_symbol_relationship'}, {'location.symbol_of_administrative_division'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'location.administrative_division_capital_relationship'}, {'location.administrative_division'}]
[{'measurement_unit.recurring_money_value'}, {'measurement_unit.time_unit'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'location.religion_percentage'}, {'religion.religion'}]
[{'location.religion_percentage'}, {'type.float'}]
[{'location.location_symbol_relationship'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'measurement_unit.recurring_money_value'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'location.location_symbol_relationship'}, {'location.offical_symbol_variety'}]
[{'location.location_symbol_relationship'}, {'government.governmental_jurisdiction'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'location.administrative_division_capital_relationship'}, {'location.capital_of_administrative_division'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'location.geocode'}, {'type.float'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
      3 typed schemas retrieved from 85 coarse schemas.
      Calculating F1 for 3 typed schemas: {
        Current: 0 / 3
        Checking schema 0 / 3: {
          [('Main', '==', 'm.06btq', ['location.location.people_born_here']), ('Type', '==', 'organization.organization_founder', ['type.object.type'])]
          var_types: [{'people.person', 'organization.organization_founder'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:organization.organization_founder . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06btq fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:organization.organization_founder . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 2
            Final Answer: {'Grant Wilson', 'Rye Barcott'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 1 / 3: {
          [('Main', '==', 'm.06ky_', ['location.location.people_born_here']), ('Type', '==', 'organization.organization_founder', ['type.object.type'])]
          var_types: [{'people.person', 'organization.organization_founder'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:organization.organization_founder . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06ky_ fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:organization.organization_founder . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06ky_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 3: {
          [('Main', '==', 'm.06btq', ['location.statistical_region.minimum_wage', 'measurement_unit.recurring_money_value.frequency']), ('Type', '==', 'measurement_unit.time_unit', ['type.object.type'])]
          var_types: [{'measurement_unit.recurring_money_value'}, {'measurement_unit.time_unit'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.frequency ?o2 . ?o2 fb:type.object.type fb:measurement_unit.time_unit . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:23:20] Q_Schema Request: {
            WebQ_2299|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06btq fb:location.statistical_region.minimum_wage ?o1 . ?o1 fb:measurement_unit.recurring_money_value.frequency ?o2 . ?o2 fb:type.object.type fb:measurement_unit.time_unit . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06btq'}
            Query return lines = 1
            Final Answer: {'Hour'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        2 / 3 typed schemas kept with ans_size > 0.
      } [0.036s]
      Typed level ended, resulting in 87 schemas.
    } [0.040s]
    Time level searching (total times = 0): {
      Current: 0 / 87
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [{'military.military_unit.formed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.deceased_person.date_of_cremation', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_burial'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, {'government.legislative_session.date_ended', 'government.legislative_session.date_began'}]
self.var_time_preds: [{'location.religion_percentage.date'}, set()]
self.var_time_preds: [{'location.location_symbol_relationship.date_adopted', 'location.location_symbol_relationship.date_revoked'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'location.religion_percentage.date'}, set()]
self.var_time_preds: [{'location.religion_percentage.date'}, set()]
self.var_time_preds: [{'location.location_symbol_relationship.date_adopted', 'location.location_symbol_relationship.date_revoked'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
self.var_time_preds: [{'location.location_symbol_relationship.date_adopted', 'location.location_symbol_relationship.date_revoked'}, set()]
self.var_time_preds: [{'location.location_symbol_relationship.date_adopted', 'location.location_symbol_relationship.date_revoked'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'measurement_unit.recurring_money_value.date'}, set()]
      0 timed schemas retrieved from 87 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 87 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 87
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[{'military.military_unit.formed'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.copyright_date', 'book.written_work.date_of_first_publication'}]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'people.deceased_person.date_of_cremation', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_burial'}]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.recurring_money_value.date'}, set()]
[{'measurement_unit.recurring_money_value.date'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_position_held.to', 'government.government_position_held.from'}, {'government.legislative_session.date_ended', 'government.legislative_session.date_began'}]
[{'location.religion_percentage.date'}, set()]
[{'location.location_symbol_relationship.date_adopted', 'location.location_symbol_relationship.date_revoked'}, set()]
[set(), set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
[{'measurement_unit.recurring_money_value.date'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'location.religion_percentage.date'}, set()]
[{'location.religion_percentage.date'}, set()]
[{'location.location_symbol_relationship.date_adopted', 'location.location_symbol_relationship.date_revoked'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'measurement_unit.recurring_money_value.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'government.government_position_held.to', 'government.government_position_held.from'}, set()]
[{'location.location_symbol_relationship.date_adopted', 'location.location_symbol_relationship.date_revoked'}, set()]
[{'location.location_symbol_relationship.date_adopted', 'location.location_symbol_relationship.date_revoked'}, set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'people.person.date_of_birth'}]
[{'measurement_unit.recurring_money_value.date'}, set()]
      0 ordinal schemas retrieved from 87 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 87 schemas.
    } [0.002s]
    [2020-12-03 14:23:20] buffer saved.
    87 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2200-2299/2299_schema].
  } [58.768s]
  All Done.
} [8m34.777s]
Time tracker display: {
              Name	Avg. (s)	    Freq	Time (s)
          single_q	 56.9631	       9	512.6678
       coarse_comb	  1.8631	       9	 16.7682
      query_sparql	  0.0891	     185	 16.4872
   query_q_sc_stat	  0.0105	    1465	 15.4267
         coarse_F1	  1.2056	       9	 10.8508
           linking	  0.6302	       9	  5.6716
              type	  0.7085	       8	  5.6682
          typed_F1	  0.5222	       9	  4.6995
        timed_comb	  0.0283	       9	  0.2549
        typed_comb	  0.0090	       9	  0.0810
          ord_comb	  0.0033	       9	  0.0299
          timed_F1	  0.0000	       9	  0.0004
        ordinal_F1	  0.0000	       9	  0.0004
              time	  0.0000	       8	  0.0003
           ordinal	  0.0000	       8	  0.0001
            entity	  0.0000	       8	  0.0000
} [0.000s]
