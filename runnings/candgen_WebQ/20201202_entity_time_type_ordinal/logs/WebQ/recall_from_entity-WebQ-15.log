[smart_candgen] ...  {
  Loading Webquestions from cPickle ...
  5810 WebQuesetions loaded.
args.linking_only: False
  QueryService initialize ...  {
    Loading ComplexQuestions from cPickle ...
    2100 ComplexQuestions loaded.
    Loading Webquestions from cPickle ...
    5810 WebQuesetions loaded.
    7910 QA loaded from WebQ & CompQ.
    Loading SPARQL cache ... {
      1436 SPARQL cache loaded.
    } [0.719s]
    Loading <q_sc, stat> cache ... {
      14170 <q_sc, stat> cache loaded.
    } [0.451s]
    Initialize complete.
  } [1.210s]
  Loading <word, idx> pairs from [../../data/word_emb_in_use/word_emb.indices] ... 
  84320 <word, idx> loaded.
  Loading word embeddings for [../../data/word_emb_in_use/word_emb.glove_300.npy] ...
  (84320, 300) word embedding loaded.
  44 dependency name loaded.
  GlobalLinker initializing ...  {
    201 ordinal & 235 superlative words loaded.
    Load entity linking table from [../../data/linkings/WebQ/webq.all.top3_source_ensemble_data.q_links]: {
      5810 questions of link data loaded.
    } [0.217s]
    FBHelper: 12237 type names loaded.
    12237 type embedding loaded.
    Initialize complete.
  } [0.861s]
  simple type match = False
  simple time match = False
  Entering Q 1500 / 5810 [b'what does annie leibovitz do?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1501 / 5810 [b'what teams did derek fisher play for in the nba?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1502 / 5810 [b'who did mike tomlin play for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1503 / 5810 [b'what kind of currency does cuba use?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1504 / 5810 [b'who is ben roethlisberger parents?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1505 / 5810 [b'what movies have robert pattinson starred in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1506 / 5810 [b'what are the zoroastrian scriptures called?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1507 / 5810 [b'what political party is barack obama from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1508 / 5810 [b'what organization did martin luther king lead?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1509 / 5810 [b'where did the name nazi come from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1510 / 5810 [b'what was arthur conan doyle famous for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1511 / 5810 [b'what year did michael jordan started his career?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1512 / 5810 [b'what currency should you take to thailand?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1513 / 5810 [b'what kind of guitar does jemaine clement play?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1514 / 5810 [b'where is greyhound station in washington dc?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1515 / 5810 [b'where was lance armstrong born and in what year?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1516 / 5810 [b'what kind of money is used in israel?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1517 / 5810 [b'where is george bush from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1518 / 5810 [b'what did william howe do in the revolutionary war?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1519 / 5810 [b'who is the falcons quarterback 2012?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1520 / 5810 [b'what is the zip code for trenton ohio?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1521 / 5810 [b"what is north dakota state's mascot?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1522 / 5810 [b'what is the work of charles darwin?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1523 / 5810 [b'what movies have adam sandler been in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1524 / 5810 [b"what was one of benjamin franklin's inventions?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1525 / 5810 [b'where did phil mickelson go to college?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1526 / 5810 [b'what is the most practiced religion in the us?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1527 / 5810 [b'what does duffy sing?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1528 / 5810 [b'what school did tupac go to?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1529 / 5810 [b'what does guyana speak?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1530 / 5810 [b'where did the flemish live?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1531 / 5810 [b'what year did the houston rockets win their first championship?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1532 / 5810 [b'what college did harry s. truman attend?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1533 / 5810 [b'what is the official language spoken in mexico?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1534 / 5810 [b'what county is minneapolis mn in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1535 / 5810 [b'what religion in thailand?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1536 / 5810 [b'who is queen elizabeth 1 father?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1537 / 5810 [b'what other languages does switzerland speak?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1538 / 5810 [b'what team is ronaldinho on?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1539 / 5810 [b'who plays paul blart?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1540 / 5810 [b'who is kobe bryant wife bio?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1541 / 5810 [b'what kind of government system does canada have?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1542 / 5810 [b'what type of government did sparta greece have?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1543 / 5810 [b'where to vacation in italy in august?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1544 / 5810 [b'what culture lived in teotihuacan?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1545 / 5810 [b'what kind of voting system does japan have?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1546 / 5810 [b'what are the names of all the countries in africa?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1547 / 5810 [b'who started the first persian gulf war?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1548 / 5810 [b'what is the name of the pittsburgh steelers stadium?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1549 / 5810 [b'who was cleopatra married too?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1550 / 5810 [b'where was nicki minaj born?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1551 / 5810 [b'what was jesse james wife name?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1552 / 5810 [b'who plays spike in buffy the vampire slayer?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1553 / 5810 [b'where was emperor hadrian born?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1554 / 5810 [b'when was gardasil released to the public?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1555 / 5810 [b'who became president when roosevelt died in office?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1556 / 5810 [b'where did martin luther king went to school?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1557 / 5810 [b'where did charles drew go to college?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1558 / 5810 [b'what was the colosseum in rome used for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1559 / 5810 [b'who voice acts peter griffin?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1560 / 5810 [b'who was charles darwin married to?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1561 / 5810 [b'who plays lynette on desperate housewives?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1562 / 5810 [b'what year was michael jordan rookie year?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1563 / 5810 [b'what timezone is the state of texas?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1564 / 5810 [b'what did chadwick identify?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1565 / 5810 [b'what airport is closest to ithaca ny?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1566 / 5810 [b'where did kurt cobain die?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1567 / 5810 [b'what county is jackson michigan in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1568 / 5810 [b'where was the battle of verdun held?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1569 / 5810 [b'what system of government does nigeria have?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1570 / 5810 [b'who played boss hogg dukes of hazzard?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1571 / 5810 [b'who played kitt in knight rider?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1572 / 5810 [b'what religion did the ottoman turks follow?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1573 / 5810 [b'what is vanderbilt university known for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1574 / 5810 [b'what timezone is toronto gmt?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1575 / 5810 [b'what religion is king henry viii?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1576 / 5810 [b'what countries did germany take over during world war 2?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1577 / 5810 [b'where did james baldwin go to school?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1578 / 5810 [b'who was joseph pulitzer and what did he do?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1579 / 5810 [b'where do you fly into for destin?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1580 / 5810 [b'where did jane austen grow up?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1581 / 5810 [b"what was basketball player michael jordan's major in college?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1582 / 5810 [b'who made the american red cross?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 1583 / 5810 [b'what kind government does canada have?']: {
    Read 13 links from file.
    Show 3 E + 10 T + 0 Tm + 0 Ord = 13 linkings: {
      #00 Entity: [2, 3) (government) == m.02wz7x (Government_of_Canada) {'score': 35.386985, 'source': 1.0}
      #01 Entity: [2, 3) (government) == m.04jrx3 (Government_of_Australia) {'score': 4.702844, 'source': 0.0}
      #02 Entity: [4, 5) (canada) == m.0d060g (Canada) {'score': 29037.024454, 'source': 0.0}
      #03 Type: [2, 3) (government) == government.government (government) {'sim': 1.0}
      #04 Type: [2, 3) (government) == government.government_agency (government agency) {'sim': 0.879919}
      #05 Type: [1, 3) (kind government) == government.form_of_government (form of government) {'sim': 0.84551}
      #06 Type: [1, 3) (kind government) == government.government_permit_type (government permit type) {'sim': 0.828766}
      #07 Type: [1, 3) (kind government) == government.government_service_type (government service type) {'sim': 0.823649}
      #08 Type: [2, 3) (government) == government.government_service (government service) {'sim': 0.821197}
      #09 Type: [2, 3) (government) == government.government_issued_permit (government issued permit) {'sim': 0.806588}
      #10 Type: [1, 3) (kind government) == government.government_service_audience (government service audience) {'sim': 0.792283}
      #11 Type: [2, 4) (government does) == government.government_office_or_title (government office or title) {'sim': 0.79135}
      #12 Type: [2, 3) (government) == government.government_office_category (government office category) {'sim': 0.791108}
    } [0.000s]
    Coarse level searching (total entities = 3): {
      [Len-1||F1/3] (2020-12-03 14:15:23) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02wz7x ?p1 ?o1 . }
        [2020-12-03 14:15:23] SPARQL hit!
        FBHelper: 66554 domain + 65935 range info loaded.
        FBHelper: 1729 mediator types loaded.
        Filt_Query_Ret = 4 / 15 ( 0.170s)
        FBHelper: 11388 inverse predicate info loaded.
        [Len-1||F1/3||3/3-1] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02wz7x ?p1 ?o1 . ?o1 ?p2 fb:m.0d060g . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 1 / 1 ( 0.000s)
        } [0.000s]
      } [0.186s]
      [Len-1||F2/3] (2020-12-03 14:15:24) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.04jrx3 ?p1 ?o1 . }
        [2020-12-03 14:15:24] SPARQL hit!
        Filt_Query_Ret = 3 / 12 ( 0.000s)
        [Len-1||F2/3||3/3-1] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04jrx3 ?p1 ?o1 . ?o1 ?p2 fb:m.0d060g . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.000s]
      [Len-1||F3/3] (2020-12-03 14:15:24) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0d060g ?p1 ?o1 . }
        [2020-12-03 14:15:24] SPARQL hit!
        Filt_Query_Ret = 63 / 140 ( 0.000s)
        [Len-1||F3/3||1/3-1] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0d060g ?p1 ?o1 . ?o1 ?p2 fb:m.02wz7x . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 1 / 1 ( 0.000s)
        } [0.000s]
        [Len-1||F3/3||2/3-1] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0d060g ?p1 ?o1 . ?o1 ?p2 fb:m.04jrx3 . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.001s]
      [Len-2||F1/3] (2020-12-03 14:15:24) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02wz7x ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:24] SPARQL hit!
        Filt_Query_Ret = 9 / 249 ( 0.001s)
        [Len-2||F1/3||3/3-1] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02wz7x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0d060g . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 0 / 24 ( 0.000s)
        } [0.000s]
        [Len-2||F1/3||3/3-2] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02wz7x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0d060g . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 0 / 4 ( 0.000s)
        } [0.000s]
      } [0.001s]
      [Len-2||F2/3] (2020-12-03 14:15:24) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04jrx3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:24] SPARQL hit!
        Filt_Query_Ret = 4 / 213 ( 0.001s)
        [Len-2||F2/3||3/3-1] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04jrx3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0d060g . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F2/3||3/3-2] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04jrx3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0d060g . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.001s]
      [Len-2||F3/3] (2020-12-03 14:15:24) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0d060g ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:24] SPARQL hit!
        Filt_Query_Ret = 221 / 2587 ( 0.011s)
        [Len-2||F3/3||1/3-1] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0d060g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02wz7x . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 0 / 24 ( 0.000s)
        } [0.000s]
        [Len-2||F3/3||1/3-2] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0d060g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02wz7x . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 25 / 150 ( 0.001s)
        } [0.001s]
        [Len-2||F3/3||2/3-1] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0d060g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04jrx3 . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F3/3||2/3-2] (2020-12-03 14:15:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0d060g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04jrx3 . }
          [2020-12-03 14:15:24] SPARQL hit!
          Filt_Query_Ret = 0 / 10 ( 0.000s)
        } [0.000s]
      } [0.014s]
      331 coarse schemas retrieved from scratch.
      Calculating F1 for 331 coarse schemas: {
        Current: 0 / 331
        Checking schema 0 / 331: {
          [('Main', '==', 'm.02wz7x', ['government.government.agency'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02wz7x fb:government.government.agency ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 1 / 331: {
          [('Main', '==', 'm.02wz7x', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02wz7x fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 341, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 2 / 331: {
          [('Main', '==', 'm.02wz7x', ['government.government.government_for'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02wz7x fb:government.government.government_for ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 3 / 331: {
          [('Main', '==', 'm.02wz7x', ['business.customer.supplier'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02wz7x fb:business.customer.supplier ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 4 / 331: {
          [('Main', '==', 'm.02wz7x', ['government.government.agency']), ('Entity', '==', 'm.0d060g', ['government.government_agency.jurisdiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02wz7x fb:government.government.agency ?o1 . ?o1 fb:government.government_agency.jurisdiction fb:m.0d060g . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 5 / 331: {
          [('Main', '==', 'm.04jrx3', ['government.government.agency'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04jrx3 fb:government.government.agency ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 6 / 331: {
          [('Main', '==', 'm.04jrx3', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04jrx3 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 246, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 7 / 331: {
          [('Main', '==', 'm.04jrx3', ['government.government.government_for'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04jrx3 fb:government.government.government_for ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 8 / 331: {
          [('Main', '==', 'm.0d060g', ['base.litcentral.focal_location.generic_landscape_description'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.litcentral.focal_location.generic_landscape_description ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 9 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.666667, R = 0.500000, F1 = 0.571429
        } [0.000s]
        Checking schema 10 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 11 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 12 / 331: {
          [('Main', '==', 'm.0d060g', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 13 / 331: {
          [('Main', '==', 'm.0d060g', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 14 / 331: {
          [('Main', '==', 'm.0d060g', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 15 / 331: {
          [('Main', '==', 'm.0d060g', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 16 / 331: {
          [('Main', '==', 'm.0d060g', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 17 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 18 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 108, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 19 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2612, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 20 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.partially_contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 331: {
          [('Main', '==', 'm.0d060g', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 22 / 331: {
          [('Main', '==', 'm.0d060g', ['business.business_location.parent_company'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:business.business_location.parent_company ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 23 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 24 / 331: {
          [('Main', '==', 'm.0d060g', ['cvg.cvg_publisher.games_published'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:cvg.cvg_publisher.games_published ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 25 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:olympics.olympic_athlete_affiliation.athlete ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 26 / 331: {
          [('Main', '==', 'm.0d060g', ['base.locations.countries.continent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 27 / 331: {
          [('Main', '==', 'm.0d060g', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 103, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 28 / 331: {
          [('Main', '==', 'm.0d060g', ['base.thoroughbredracing.thoroughbred_racehorse_origin.horses_from_this_location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.thoroughbredracing.thoroughbred_racehorse_origin.horses_from_this_location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 139, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 29 / 331: {
          [('Main', '==', 'm.0d060g', ['biology.breed_origin.breeds_originating_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 30 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 31 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 32 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 33 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.first_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 34 / 331: {
          [('Main', '==', 'm.0d060g', ['base.uncommon.topic.exceptions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.uncommon.topic.exceptions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 35 / 331: {
          [('Main', '==', 'm.0d060g', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 36 / 331: {
          [('Main', '==', 'm.0d060g', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 37 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 38 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 39 / 331: {
          [('Main', '==', 'm.0d060g', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d060g fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 40 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 5379, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 41 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 63, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 42 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 43 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.partially_containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 44 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.armed_forces'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:military.military_combatant.armed_forces ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 45 / 331: {
          [('Main', '==', 'm.0d060g', ['fictional_universe.fictional_setting.universe'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:fictional_universe.fictional_setting.universe ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 46 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 47 / 331: {
          [('Main', '==', 'm.0d060g', ['base.mystery.cryptid_area_of_occurrence.cryptid_s_found_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.mystery.cryptid_area_of_occurrence.cryptid_s_found_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 48 / 331: {
          [('Main', '==', 'm.0d060g', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 87, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 49 / 331: {
          [('Main', '==', 'm.0d060g', ['law.court_jurisdiction_area.courts'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:law.court_jurisdiction_area.courts ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 50 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 51 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d060g fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 52 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.second_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.country.second_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 199, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 53 / 331: {
          [('Main', '==', 'm.0d060g', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 54 / 331: {
          [('Main', '==', 'm.0d060g', ['royalty.kingdom.rulers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:royalty.kingdom.rulers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 55 / 331: {
          [('Main', '==', 'm.0d060g', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 56 / 331: {
          [('Main', '==', 'm.0d060g', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 57 / 331: {
          [('Main', '==', 'm.0d060g', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 58 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 59 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d060g fb:location.location.area ?o1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 60 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 61 / 331: {
          [('Main', '==', 'm.0d060g', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 539, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 62 / 331: {
          [('Main', '==', 'm.0d060g', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 63 / 331: {
          [('Main', '==', 'm.0d060g', ['fictional_universe.fictional_setting.characters_that_have_lived_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:fictional_universe.fictional_setting.characters_that_have_lived_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 64 / 331: {
          [('Main', '==', 'm.0d060g', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 431, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 65 / 331: {
          [('Main', '==', 'm.0d060g', ['tv.tv_location.tv_shows_filmed_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:tv.tv_location.tv_shows_filmed_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 66 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.multi_event_tournaments_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 67 / 331: {
          [('Main', '==', 'm.0d060g', ['base.folklore.mythical_creature_location.mythical_creature_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.folklore.mythical_creature_location.mythical_creature_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 68 / 331: {
          [('Main', '==', 'm.0d060g', ['cvg.computer_game_region.versions_released_in_this_region'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:cvg.computer_game_region.versions_released_in_this_region ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 69 / 331: {
          [('Main', '==', 'm.0d060g', ['base.charities.geographic_scope.charities'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.charities.geographic_scope.charities ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 70 / 331: {
          [('Main', '==', 'm.0d060g', ['base.horticulture.cultivar_origin.cultivar'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:base.horticulture.cultivar_origin.cultivar ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 71 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.agencies']), ('Entity', '==', 'm.02wz7x', ['government.government_agency.government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:government.government_agency.government fb:m.02wz7x . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 72 / 331: {
          [('Main', '==', 'm.02wz7x', ['business.sponsor.sponsorship', 'business.sponsorship.sponsored_recipient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02wz7x fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_recipient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 73 / 331: {
          [('Main', '==', 'm.02wz7x', ['organization.organization.child', 'organization.organization_relationship.child'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02wz7x fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 74 / 331: {
          [('Main', '==', 'm.02wz7x', ['business.asset_owner.assets_owned', 'business.asset_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02wz7x fb:business.asset_owner.assets_owned ?o1 . ?o1 fb:business.asset_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 75 / 331: {
          [('Main', '==', 'm.02wz7x', ['business.asset_owner.assets_owned', 'business.asset_ownership.percentage_ownership'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02wz7x fb:business.asset_owner.assets_owned ?o1 . ?o1 fb:business.asset_ownership.percentage_ownership ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 76 / 331: {
          [('Main', '==', 'm.02wz7x', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02wz7x fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 77 / 331: {
          [('Main', '==', 'm.02wz7x', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02wz7x fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 78 / 331: {
          [('Main', '==', 'm.02wz7x', ['business.sponsor.sponsorship', 'business.sponsorship.sponsored_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02wz7x fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 79 / 331: {
          [('Main', '==', 'm.02wz7x', ['organization.organization.child', 'organization.organization_relationship.parent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02wz7x fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 80 / 331: {
          [('Main', '==', 'm.02wz7x', ['business.asset_owner.assets_owned', 'business.asset_ownership.owned_asset'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02wz7x fb:business.asset_owner.assets_owned ?o1 . ?o1 fb:business.asset_ownership.owned_asset ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 81 / 331: {
          [('Main', '==', 'm.04jrx3', ['organization.organization.child', 'organization.organization_relationship.child'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04jrx3 fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 82 / 331: {
          [('Main', '==', 'm.04jrx3', ['internet.website_owner.websites_owned_new', 'internet.website_ownership.website'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04jrx3 fb:internet.website_owner.websites_owned_new ?o1 . ?o1 fb:internet.website_ownership.website ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 83 / 331: {
          [('Main', '==', 'm.04jrx3', ['organization.organization.child', 'organization.organization_relationship.parent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04jrx3 fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 84 / 331: {
          [('Main', '==', 'm.04jrx3', ['internet.website_owner.websites_owned_new', 'internet.website_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04jrx3 fb:internet.website_owner.websites_owned_new ?o1 . ?o1 fb:internet.website_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 85 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1047, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 86 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 87 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 61, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 88 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 89 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 90 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 63, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 91 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 92 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 93 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 94 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 95 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 96 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 97 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 98 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 99 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 63, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 100 / 331
        Checking schema 100 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 101 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 102 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 103 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 104 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 105 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 106 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 107 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 108 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 109 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 110 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 111 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 112 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 113 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 114 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 115 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 116 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 117 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 118 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 119 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 120 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 121 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 122 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 123 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 124 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 125 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 126 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 127 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 128 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 129 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 130 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 131 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 132 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 133 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 134 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 135 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 136 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 137 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 138 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 139 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 140 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 141 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 142 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 143 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 144 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 145 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 146 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 147 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 148 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 149 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 150 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 151 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 152 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 153 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 154 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 155 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 156 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 157 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.automobiles_per_capita', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.automobiles_per_capita ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 158 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 159 / 331: {
          [('Main', '==', 'm.0d060g', ['base.datedlocationtest.dated_location_test.formed_by_merger', 'base.datedlocationtest.dated_location_merger.merger_of'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.datedlocationtest.dated_location_test.formed_by_merger ?o1 . ?o1 fb:base.datedlocationtest.dated_location_merger.merger_of ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 160 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.measurement_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 161 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 79, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 162 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 163 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.religions', 'location.religion_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.religions ?o1 . ?o1 fb:location.religion_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 164 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 165 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 166 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.automobiles_per_capita', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.automobiles_per_capita ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 167 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 61, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 168 / 331: {
          [('Main', '==', 'm.0d060g', ['base.datedlocationtest.dated_location_test.formed_by_merger', 'base.datedlocationtest.dated_location_merger.became_location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.datedlocationtest.dated_location_test.formed_by_merger ?o1 . ?o1 fb:base.datedlocationtest.dated_location_merger.became_location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 169 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 170 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 171 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 172 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 173 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.religions', 'location.religion_percentage.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.religions ?o1 . ?o1 fb:location.religion_percentage.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 174 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.religions', 'location.religion_percentage.percentage'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.religions ?o1 . ?o1 fb:location.religion_percentage.percentage ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 175 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 176 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 177 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 178 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_since'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 179 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 180 / 331: {
          [('Main', '==', 'm.0d060g', ['base.datedlocationtest.dated_location_test.formed_by_merger', 'base.datedlocationtest.dated_location_merger.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:base.datedlocationtest.dated_location_test.formed_by_merger ?o1 . ?o1 fb:base.datedlocationtest.dated_location_merger.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 181 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 102, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 182 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 183 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjusted_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 184 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 185 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 186 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 187 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 188 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.national_anthem', 'government.national_anthem_of_a_country.anthem'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 189 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 190 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.sports'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.sports ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 191 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.competitor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 192 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 193 / 331: {
          [('Main', '==', 'm.0d060g', ['exhibitions.exhibition_sponsor.exhibitions_sponsored', 'exhibitions.exhibition_run.exhibition'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:exhibitions.exhibition_sponsor.exhibitions_sponsored ?o1 . ?o1 fb:exhibitions.exhibition_run.exhibition ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 194 / 331: {
          [('Main', '==', 'm.0d060g', ['exhibitions.exhibition_sponsor.exhibitions_sponsored', 'exhibitions.exhibition_run.venue'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:exhibitions.exhibition_sponsor.exhibitions_sponsored ?o1 . ?o1 fb:exhibitions.exhibition_run.venue ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 195 / 331: {
          [('Main', '==', 'm.0d060g', ['exhibitions.exhibition_sponsor.exhibitions_sponsored', 'exhibitions.exhibition_run.opened_on'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:exhibitions.exhibition_sponsor.exhibitions_sponsored ?o1 . ?o1 fb:exhibitions.exhibition_run.opened_on ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 196 / 331: {
          [('Main', '==', 'm.0d060g', ['exhibitions.exhibition_sponsor.exhibitions_sponsored', 'exhibitions.exhibition_run.sponsor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:exhibitions.exhibition_sponsor.exhibitions_sponsored ?o1 . ?o1 fb:exhibitions.exhibition_run.sponsor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 197 / 331: {
          [('Main', '==', 'm.0d060g', ['exhibitions.exhibition_sponsor.exhibitions_sponsored', 'exhibitions.exhibition_run.closed_on'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:exhibitions.exhibition_sponsor.exhibitions_sponsored ?o1 . ?o1 fb:exhibitions.exhibition_run.closed_on ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 198 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 199 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 200 / 331
        Checking schema 200 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 201 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 202 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 203 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 204 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 205 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 206 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 207 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 208 / 331: {
          [('Main', '==', 'm.0d060g', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 209 / 331: {
          [('Main', '==', 'm.0d060g', ['organization.organization_member.member_of', 'organization.organization_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.to ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 210 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.military_commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 211 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 212 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 213 / 331: {
          [('Main', '==', 'm.0d060g', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 214 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.force_deployments', 'military.force_strength.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 215 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.casualties', 'military.casualties.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 216 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.casualties', 'military.casualties.type_of_casualties'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.type_of_casualties ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 217 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 218 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 316, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 219 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.major_exports', 'location.imports_exports_by_industry.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.major_exports ?o1 . ?o1 fb:location.imports_exports_by_industry.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 220 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 221 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 222 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 223 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 224 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 225 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 226 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 227 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 228 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 229 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 230 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 231 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 232 / 331: {
          [('Main', '==', 'm.0d060g', ['organization.organization_member.member_of', 'organization.organization_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 233 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.military_commanders', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 234 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 235 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 236 / 331: {
          [('Main', '==', 'm.0d060g', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 237 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.force_deployments', 'military.force_strength.force_size'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 238 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.casualties', 'military.casualties.lower_estimate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.lower_estimate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 239 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 240 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 241 / 331: {
          [('Main', '==', 'm.0d060g', ['base.popstra.location.arrestee', 'base.popstra.arrest.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.popstra.location.arrestee ?o1 . ?o1 fb:base.popstra.arrest.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 242 / 331: {
          [('Main', '==', 'm.0d060g', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 243 / 331: {
          [('Main', '==', 'm.0d060g', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 244 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.major_exports', 'location.imports_exports_by_industry.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.major_exports ?o1 . ?o1 fb:location.imports_exports_by_industry.amount ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 245 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 246 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 247 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 248 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 249 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 45, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 250 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 251 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 252 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 253 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 254 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 255 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 256 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 257 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 258 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 259 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 260 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 261 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.index_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 262 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 263 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 264 / 331: {
          [('Main', '==', 'm.0d060g', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 265 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.military_commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 266 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 267 / 331: {
          [('Main', '==', 'm.0d060g', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 268 / 331: {
          [('Main', '==', 'm.0d060g', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 269 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.force_deployments', 'military.force_strength.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 270 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.casualties', 'military.casualties.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 271 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 426, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 272 / 331: {
          [('Main', '==', 'm.0d060g', ['base.popstra.location.arrestee', 'base.popstra.arrest.offense'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.popstra.location.arrestee ?o1 . ?o1 fb:base.popstra.arrest.offense ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 273 / 331: {
          [('Main', '==', 'm.0d060g', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.vacationer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 274 / 331: {
          [('Main', '==', 'm.0d060g', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 275 / 331: {
          [('Main', '==', 'm.0d060g', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 276 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.major_exports', 'location.imports_exports_by_industry.industry'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.major_exports ?o1 . ?o1 fb:location.imports_exports_by_industry.industry ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 277 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.major_exports', 'location.imports_exports_by_industry.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.major_exports ?o1 . ?o1 fb:location.imports_exports_by_industry.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 278 / 331: {
          [('Main', '==', 'm.0d060g', ['symbols.coat_of_arms_bearer.coat_of_arms_used', 'symbols.armorial_grant.armiger'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?o1 . ?o1 fb:symbols.armorial_grant.armiger ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 279 / 331: {
          [('Main', '==', 'm.0d060g', ['symbols.coat_of_arms_bearer.coat_of_arms_used', 'symbols.armorial_grant.used_from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?o1 . ?o1 fb:symbols.armorial_grant.used_from ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 280 / 331: {
          [('Main', '==', 'm.0d060g', ['base.sharing.sharing_location.shared_here', 'base.sharing.sharing_relationship.locations'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.sharing.sharing_location.shared_here ?o1 . ?o1 fb:base.sharing.sharing_relationship.locations ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 281 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 282 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 283 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.demonstration_medals_won', 'olympics.olympic_demonstration_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.demonstration_medals_won ?o1 . ?o1 fb:olympics.olympic_demonstration_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 284 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.demonstration_medals_won', 'olympics.olympic_demonstration_medal_honor.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.demonstration_medals_won ?o1 . ?o1 fb:olympics.olympic_demonstration_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 285 / 331: {
          [('Main', '==', 'm.0d060g', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.championships'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.championships ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 286 / 331: {
          [('Main', '==', 'm.0d060g', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d060g fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.rank ?o2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 287 / 331: {
          [('Main', '==', 'm.0d060g', ['symbols.coat_of_arms_bearer.coat_of_arms_used', 'symbols.armorial_grant.coat_of_arms'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?o1 . ?o1 fb:symbols.armorial_grant.coat_of_arms ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 288 / 331: {
          [('Main', '==', 'm.0d060g', ['base.sharing.sharing_location.shared_here', 'base.sharing.sharing_relationship.method'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.sharing.sharing_location.shared_here ?o1 . ?o1 fb:base.sharing.sharing_relationship.method ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 289 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competitors'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competitors ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 290 / 331: {
          [('Main', '==', 'm.0d060g', ['user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas', 'user.jamie.default_domain.yacht_racing.competitor.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas ?o1 . ?o1 fb:user.jamie.default_domain.yacht_racing.competitor.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 291 / 331: {
          [('Main', '==', 'm.0d060g', ['user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas', 'user.jamie.default_domain.yacht_racing.competitor.competition'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas ?o1 . ?o1 fb:user.jamie.default_domain.yacht_racing.competitor.competition ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 292 / 331: {
          [('Main', '==', 'm.0d060g', ['user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas', 'user.jamie.default_domain.yacht_racing.competitor.yacht'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas ?o1 . ?o1 fb:user.jamie.default_domain.yacht_racing.competitor.yacht ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 293 / 331: {
          [('Main', '==', 'm.0d060g', ['user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas', 'user.jamie.default_domain.yacht_racing.competitor.sponsoring_club'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas ?o1 . ?o1 fb:user.jamie.default_domain.yacht_racing.competitor.sponsoring_club ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 294 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.demonstration_medals_won', 'olympics.olympic_demonstration_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.demonstration_medals_won ?o1 . ?o1 fb:olympics.olympic_demonstration_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 295 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.demonstration_medals_won', 'olympics.olympic_demonstration_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.demonstration_medals_won ?o1 . ?o1 fb:olympics.olympic_demonstration_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 296 / 331: {
          [('Main', '==', 'm.0d060g', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.athlete_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.athlete_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 297 / 331: {
          [('Main', '==', 'm.0d060g', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 298 / 331: {
          [('Main', '==', 'm.0d060g', ['base.sharing.sharing_location.shared_here', 'base.sharing.sharing_relationship.shares'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.sharing.sharing_location.shared_here ?o1 . ?o1 fb:base.sharing.sharing_relationship.shares ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 299 / 331: {
          [('Main', '==', 'm.0d060g', ['base.sharing.sharing_location.shared_here', 'base.sharing.sharing_relationship.system'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.sharing.sharing_location.shared_here ?o1 . ?o1 fb:base.sharing.sharing_relationship.system ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 300 / 331
        Checking schema 300 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 301 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competition'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competition ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 302 / 331: {
          [('Main', '==', 'm.0d060g', ['user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas', 'user.jamie.default_domain.yacht_racing.competitor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas ?o1 . ?o1 fb:user.jamie.default_domain.yacht_racing.competitor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 303 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.demonstration_medals_won', 'olympics.olympic_demonstration_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.demonstration_medals_won ?o1 . ?o1 fb:olympics.olympic_demonstration_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 304 / 331: {
          [('Main', '==', 'm.0d060g', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 305 / 331: {
          [('Main', '==', 'm.0d060g', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 306 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 307 / 331: {
          [('Main', '==', 'm.0d060g', ['base.datedlocationtest.dated_location_test.formed_by_merger', 'base.datedlocationtest.dated_location_merger.became_location']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.datedlocationtest.dated_location_test.formed_by_merger ?o1 . ?o1 fb:base.datedlocationtest.dated_location_merger.became_location ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 308 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 309 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.casualties', 'military.casualties.combatant']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.combatant ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 310 / 331: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 311 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.imported_from']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 312 / 331: {
          [('Main', '==', 'm.0d060g', ['organization.organization_member.member_of', 'organization.organization_membership.member']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 313 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 314 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.military_commanders', 'military.military_command.military_combatant']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 315 / 331: {
          [('Main', '==', 'm.0d060g', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 316 / 331: {
          [('Main', '==', 'm.0d060g', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.location']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 317 / 331: {
          [('Main', '==', 'm.0d060g', ['base.popstra.location.arrestee', 'base.popstra.arrest.location']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.popstra.location.arrestee ?o1 . ?o1 fb:base.popstra.arrest.location ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 318 / 331: {
          [('Main', '==', 'm.0d060g', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 319 / 331: {
          [('Main', '==', 'm.0d060g', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 320 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.country']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 321 / 331: {
          [('Main', '==', 'm.0d060g', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 322 / 331: {
          [('Main', '==', 'm.0d060g', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 323 / 331: {
          [('Main', '==', 'm.0d060g', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.country']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 324 / 331: {
          [('Main', '==', 'm.0d060g', ['symbols.coat_of_arms_bearer.coat_of_arms_used', 'symbols.armorial_grant.armiger']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?o1 . ?o1 fb:symbols.armorial_grant.armiger ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 325 / 331: {
          [('Main', '==', 'm.0d060g', ['military.military_combatant.force_deployments', 'military.force_strength.combatant']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 326 / 331: {
          [('Main', '==', 'm.0d060g', ['olympics.olympic_participating_country.demonstration_medals_won', 'olympics.olympic_demonstration_medal_honor.country']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:olympics.olympic_participating_country.demonstration_medals_won ?o1 . ?o1 fb:olympics.olympic_demonstration_medal_honor.country ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 327 / 331: {
          [('Main', '==', 'm.0d060g', ['exhibitions.exhibition_sponsor.exhibitions_sponsored', 'exhibitions.exhibition_run.sponsor']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:exhibitions.exhibition_sponsor.exhibitions_sponsored ?o1 . ?o1 fb:exhibitions.exhibition_run.sponsor ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 328 / 331: {
          [('Main', '==', 'm.0d060g', ['base.sharing.sharing_location.shared_here', 'base.sharing.sharing_relationship.locations']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.sharing.sharing_location.shared_here ?o1 . ?o1 fb:base.sharing.sharing_relationship.locations ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 329 / 331: {
          [('Main', '==', 'm.0d060g', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.country']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.country ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 330 / 331: {
          [('Main', '==', 'm.0d060g', ['user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas', 'user.jamie.default_domain.yacht_racing.competitor.country']), ('Entity', '==', 'm.02wz7x', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:user.jamie.default_domain.yacht_racing.yacht_racing_country.regattas ?o1 . ?o1 fb:user.jamie.default_domain.yacht_racing.competitor.country ?o2 . ?o2 fb:government.governmental_jurisdiction.government fb:m.02wz7x . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        326 / 331 coarse schemas kept with ans_size > 0.
      } [0.030s]
      Coarse level ended, resulting in 326 schemas.
    } [0.233s]
    Type level searching (total types = 10): {
      Current: 0 / 326
[{'government.government_agency'}]
      FBHelper: 1870 sub/super type pairs loaded.
[{'book.written_work'}]
[{'government.governmental_jurisdiction'}]
[{'business.business_operation'}]
[{'government.government_agency'}]
[{'government.government_agency'}]
[{'book.written_work'}]
[{'government.governmental_jurisdiction'}]
[{'base.landcover.geographical_feature_category'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'government.government_agency'}]
[{'people.person'}]
[{'location.location'}]
[{'fictional_universe.fictional_character'}]
[{'organization.organization'}]
[{'sports.sports_team'}]
[{'cvg.computer_videogame'}]
[{'olympics.olympic_athlete'}]
[{'base.locations.continents'}]
[{'food.beer'}]
[{'base.thoroughbredracing.thoroughbred_racehorse'}]
[{'biology.animal_breed'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'location.administrative_division'}]
[{'base.uncommon.exception'}]
[{'film.film'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.government_office_or_title'}]
[{'government.government'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.location'}]
[{'military.armed_force'}]
[{'fictional_universe.fictional_universe'}]
[{'olympics.olympic_games'}]
[{'base.mystery.cryptid'}]
[{'film.film'}]
[{'law.court'}]
[{'location.citytown'}]
[{'type.int'}]
[{'location.administrative_division'}]
[{'book.newspaper'}]
[{'royalty.monarch'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'organization.organization'}]
[{'tv.tv_program'}]
[{'sports.multi_event_tournament'}]
[{'base.folklore.mythical_creature'}]
[{'cvg.game_version'}]
[{'base.charities.charity'}]
[{'base.horticulture.cultivar'}]
[{'government.government_agency'}]
[{'business.sponsorship'}, {'business.sponsored_recipient'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'business.asset_ownership'}, {'business.asset_owner'}]
[{'business.asset_ownership'}, {'type.float'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'business.sponsorship'}, {'business.sponsor'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'business.asset_ownership'}, {'business.asset'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'internet.website_ownership'}, {'internet.website'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'internet.website_ownership'}, {'internet.website_owner'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_sport'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_games'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
      Current: 100 / 326
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_metric_ton'}, {'type.datetime'}]
[{'base.datedlocationtest.dated_location_merger'}, {'base.datedlocationtest.dated_location_test'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'location.religion_percentage'}, {'type.datetime'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_metric_ton'}, {'type.float'}]
[{'base.datedlocationtest.dated_location_merger'}, {'base.datedlocationtest.dated_location_test'}]
[{'measurement_unit.dated_kgoe'}, {'type.datetime'}]
[{'measurement_unit.dated_kgoe'}, {'dataworld.information_source'}]
[{'measurement_unit.adjusted_money_value'}, {'finance.currency'}]
[{'measurement_unit.adjusted_money_value'}, {'dataworld.information_source'}]
[{'location.religion_percentage'}, {'religion.religion'}]
[{'location.religion_percentage'}, {'type.float'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'measurement_unit.dated_metric_ton'}, {'dataworld.information_source'}]
[{'base.datedlocationtest.dated_location_merger'}, {'type.datetime'}]
[{'measurement_unit.dated_kgoe'}, {'type.float'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'government.national_anthem_of_a_country'}, {'government.national_anthem'}]
[{'sports.competitor_country_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_country_relationship'}, {'sports.sport'}]
[{'sports.competitor_country_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_country_relationship'}, {'sports.multi_event_tournament'}]
[{'exhibitions.exhibition_run'}, {'exhibitions.exhibition'}]
[{'exhibitions.exhibition_run'}, {'exhibitions.exhibition_venue'}]
[{'exhibitions.exhibition_run'}, {'type.datetime'}]
[{'exhibitions.exhibition_run'}, {'exhibitions.exhibition_sponsor'}]
[{'exhibitions.exhibition_run'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.float'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
      Current: 200 / 326
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'military.force_strength'}, {'military.military_conflict'}]
[{'military.casualties'}, {'military.military_combatant'}]
[{'military.casualties'}, {'military.casualties_type'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_event_competition'}]
[{'location.imports_exports_by_industry'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_index_value'}, {'dataworld.information_source'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'military.force_strength'}, {'type.int'}]
[{'military.casualties'}, {'type.int'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_medal'}]
[{'base.popstra.arrest'}, {'base.popstra.location'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'location.imports_exports_by_industry'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_index_value'}, {'type.datetime'}]
[{'measurement_unit.dated_index_value'}, {'type.float'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'military.military_command'}, {'military.military_commander'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'military.force_strength'}, {'military.military_combatant'}]
[{'military.casualties'}, {'military.military_conflict'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_athlete'}]
[{'base.popstra.arrest'}, {'base.popstra.criminal_offense'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.celebrity'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'location.imports_exports_by_industry'}, {'business.industry'}]
[{'location.imports_exports_by_industry'}, {'finance.currency'}]
[{'symbols.armorial_grant'}, {'symbols.coat_of_arms_bearer'}]
[{'symbols.armorial_grant'}, {'type.datetime'}]
[{'base.sharing.sharing_relationship'}, {'base.sharing.sharing_location'}]
[{'sports.competitor_competition_relationship'}, {'sports.multi_event_tournament'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_medal'}]
[{'olympics.olympic_demonstration_medal_honor'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_demonstration_medal_honor'}, {'olympics.olympic_medal_demonstration'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_championships'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'type.int'}]
[{'symbols.armorial_grant'}, {'symbols.coat_of_arms'}]
[{'base.sharing.sharing_relationship'}, {'base.sharing.sharing_method'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competitor'}]
[{'user.jamie.default_domain.yacht_racing.competitor'}, {'user.jamie.default_domain.yacht_racing.yacht_owner'}]
[{'user.jamie.default_domain.yacht_racing.competitor'}, {'user.jamie.default_domain.yacht_racing.competition'}]
[{'user.jamie.default_domain.yacht_racing.competitor'}, {'user.jamie.default_domain.yacht_racing.racing_yacht'}]
[{'user.jamie.default_domain.yacht_racing.competitor'}, {'user.jamie.default_domain.yacht_racing.yacht_club'}]
[{'olympics.olympic_demonstration_medal_honor'}, {'olympics.olympic_games'}]
[{'olympics.olympic_demonstration_medal_honor'}, {'olympics.olympic_demonstration_competition'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.track_and_field_athlete'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_medal'}]
[{'base.sharing.sharing_relationship'}, {'base.sharing.sharable_thing'}]
[{'base.sharing.sharing_relationship'}, {'base.sharing.sharing_system'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competition'}]
[{'user.jamie.default_domain.yacht_racing.competitor'}, {'user.jamie.default_domain.yacht_racing.yacht_racing_country'}]
[{'olympics.olympic_demonstration_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_championships_competition'}]
      Current: 300 / 326
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_country'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'base.datedlocationtest.dated_location_merger'}, {'base.datedlocationtest.dated_location_test'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'military.casualties'}, {'military.military_combatant'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
[{'base.popstra.arrest'}, {'base.popstra.location'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'sports.competitor_country_relationship'}, {'sports.sport_country'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_country'}]
[{'symbols.armorial_grant'}, {'symbols.coat_of_arms_bearer'}]
[{'military.force_strength'}, {'military.military_combatant'}]
[{'olympics.olympic_demonstration_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'exhibitions.exhibition_run'}, {'exhibitions.exhibition_sponsor'}]
[{'base.sharing.sharing_relationship'}, {'base.sharing.sharing_location'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_country'}]
[{'user.jamie.default_domain.yacht_racing.competitor'}, {'user.jamie.default_domain.yacht_racing.yacht_racing_country'}]
      9 typed schemas retrieved from 326 coarse schemas.
      Calculating F1 for 9 typed schemas: {
        Current: 0 / 9
        Checking schema 0 / 9: {
          [('Main', '==', 'm.0d060g', ['location.country.form_of_government']), ('Type', '==', 'government.form_of_government', ['type.object.type'])]
          var_types: [{'government.form_of_government'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.666667, R = 0.500000, F1 = 0.571429
        } [0.000s]
        Checking schema 1 / 9: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.agencies']), ('Type', '==', 'government.government_agency', ['type.object.type'])]
          var_types: [{'government.government_agency'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.type fb:government.government_agency . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 108, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 2 / 9: {
          [('Main', '==', 'm.0d060g', ['business.business_location.parent_company']), ('Type', '==', 'government.government_agency', ['type.object.type'])]
          var_types: [{'organization.organization', 'government.government_agency'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:business.business_location.parent_company ?o1 . ?o1 fb:type.object.type fb:government.government_agency . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 3 / 9: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.government_positions']), ('Type', '==', 'government.government_office_or_title', ['type.object.type'])]
          var_types: [{'government.government_office_or_title'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.type fb:government.government_office_or_title . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 4 / 9: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.government']), ('Type', '==', 'government.government', ['type.object.type'])]
          var_types: [{'government.government'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.type fb:government.government . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 5 / 9: {
          [('Main', '==', 'm.0d060g', ['organization.organization_founder.organizations_founded']), ('Type', '==', 'government.government_agency', ['type.object.type'])]
          var_types: [{'organization.organization', 'government.government_agency'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.type fb:government.government_agency . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 6 / 9: {
          [('Main', '==', 'm.0d060g', ['organization.organization_scope.organizations_with_this_scope']), ('Type', '==', 'government.government_agency', ['type.object.type'])]
          var_types: [{'organization.organization', 'government.government_agency'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d060g fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.type fb:government.government_agency . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 7 / 9: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title']), ('Type', '==', 'government.government_office_category', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.government_office_category'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.type fb:government.government_office_category . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 8 / 9: {
          [('Main', '==', 'm.0d060g', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title']), ('Type', '==', 'government.government_office_or_title', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.government_office_or_title'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d060g fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.type fb:government.government_office_or_title . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:24] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        6 / 9 typed schemas kept with ans_size > 0.
      } [0.001s]
      Typed level ended, resulting in 332 schemas.
    } [0.026s]
    Time level searching (total times = 0): {
      Current: 0 / 332
      FBHelper: 31940 predicate names loaded.
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [{'cvg.computer_videogame.release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [{'base.thoroughbredracing.thoroughbred_racehorse.date_of_death', 'base.thoroughbredracing.thoroughbred_racehorse.foaled'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'law.court.dissolved', 'law.court.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'royalty.monarch.to_date', 'royalty.monarch.from_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'cvg.game_version.release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.horticulture.cultivar.first_developed'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.asset_ownership.from', 'business.asset_ownership.to'}, set()]
self.var_time_preds: [{'business.asset_ownership.from', 'business.asset_ownership.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.asset_ownership.from', 'business.asset_ownership.to'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'internet.website_ownership.to', 'internet.website_ownership.from'}, {'internet.website.launched', 'internet.website.ended'}]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'internet.website_ownership.to', 'internet.website_ownership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
      Current: 100 / 332
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'base.datedlocationtest.dated_location_merger.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.religion_percentage.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'base.datedlocationtest.dated_location_merger.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'location.religion_percentage.date'}, set()]
self.var_time_preds: [{'location.religion_percentage.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'base.datedlocationtest.dated_location_merger.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
self.var_time_preds: [{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
self.var_time_preds: [{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
self.var_time_preds: [{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
self.var_time_preds: [{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
      Current: 200 / 332
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_exports_by_industry.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.arrest.date'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'location.imports_exports_by_industry.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.arrest.date'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'location.imports_exports_by_industry.date'}, set()]
self.var_time_preds: [{'location.imports_exports_by_industry.date'}, set()]
self.var_time_preds: [{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
self.var_time_preds: [{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'user.jamie.default_domain.yacht_racing.yacht_club.incorporated'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      Current: 300 / 332
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.datedlocationtest.dated_location_merger.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
self.var_time_preds: [{'base.popstra.arrest.date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
      0 timed schemas retrieved from 332 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 332 schemas.
    } [0.281s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 332
[{'government.government_agency.date_founded'}]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[{'government.government_agency.date_founded'}]
[{'government.government_agency.date_founded'}]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_agency.date_founded'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'organization.organization.date_founded'}]
[{'sports.sports_team.founded'}]
[{'cvg.computer_videogame.release_date'}]
[set()]
[set()]
[{'food.beer.first_brewed'}]
[{'base.thoroughbredracing.thoroughbred_racehorse.date_of_death', 'base.thoroughbredracing.thoroughbred_racehorse.foaled'}]
[set()]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[{'law.court.dissolved', 'law.court.founded'}]
[set()]
[set()]
[set()]
[set()]
[{'royalty.monarch.to_date', 'royalty.monarch.from_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[set()]
[{'organization.organization.date_founded'}]
[{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[set()]
[set()]
[{'cvg.game_version.release_date'}]
[set()]
[{'base.horticulture.cultivar.first_developed'}]
[{'government.government_agency.date_founded'}]
[{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'business.asset_ownership.from', 'business.asset_ownership.to'}, set()]
[{'business.asset_ownership.from', 'business.asset_ownership.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'business.asset_ownership.from', 'business.asset_ownership.to'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'internet.website_ownership.to', 'internet.website_ownership.from'}, {'internet.website.launched', 'internet.website.ended'}]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'internet.website_ownership.to', 'internet.website_ownership.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
      Current: 100 / 332
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'base.datedlocationtest.dated_location_merger.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[set(), set()]
[set(), set()]
[{'location.religion_percentage.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'base.datedlocationtest.dated_location_merger.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'location.religion_percentage.date'}, set()]
[{'location.religion_percentage.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'base.datedlocationtest.dated_location_merger.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
[{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
[{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
[{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
[{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
      Current: 200 / 332
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'location.imports_exports_by_industry.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.popstra.arrest.date'}, set()]
[{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'location.imports_exports_by_industry.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[{'base.popstra.arrest.date'}, set()]
[{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'location.imports_exports_by_industry.date'}, set()]
[{'location.imports_exports_by_industry.date'}, set()]
[{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
[{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), {'user.jamie.default_domain.yacht_racing.yacht_club.incorporated'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
      Current: 300 / 332
[set(), set()]
[set(), set()]
[{'base.datedlocationtest.dated_location_merger.date'}, set()]
[set(), set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[set(), set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
[{'base.popstra.arrest.date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[set(), set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[set(), set()]
[{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[{'exhibitions.exhibition_run.closed_on', 'exhibitions.exhibition_run.opened_on'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set()]
[{'government.government_agency.date_founded'}]
[set()]
[set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
      0 ordinal schemas retrieved from 332 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 332 schemas.
    } [0.008s]
    [2020-12-03 14:15:24] buffer saved.
    332 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1583_schema].
  } [2m34.939s]
  Entering Q 1584 / 5810 [b'where does dr. sanjay gupta practice?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [2, 5) (dr . sanjay gupta) == m.02yyk6 (Sanjay_Gupta) {'score': 61316.985281, 'source': 1.0}
      #01 Entity: [2, 5) (dr. sanjay gupta) == m.02yyk6 (sanjay gupta) {'score': 10046.222779, 'source': 2.0}
      #02 Type: [5, 6) (practice) == religion.religious_practice (religious practice) {'sim': 0.818668}
      #03 Type: [0, 1) (where) == location.place_with_neighborhoods (place with neighborhoods) {'sim': 0.687732}
      #04 Type: [0, 2) (where does) == business.company_name_change (organization name change) {'sim': 0.685718}
      #05 Type: [0, 2) (where does) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.681662}
      #06 Type: [0, 2) (where does) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.677683}
      #07 Type: [0, 1) (where) == people.place_lived (place lived) {'sim': 0.669691}
      #08 Type: [0, 2) (where does) == film.person_or_entity_appearing_in_film (person or entity appearing in film) {'sim': 0.66433}
      #09 Type: [0, 2) (where does) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.664325}
      #10 Type: [0, 2) (where does) == media_common.lost_work (lost work) {'sim': 0.658004}
      #11 Type: [0, 2) (where does) == film.film_company_role_or_service (film company role or service) {'sim': 0.65187}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:17:59) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02yyk6 ?p1 ?o1 . }
        [2020-12-03 14:17:59] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02yyk6 ?p1 ?o1 . }
          Query return lines = 30
        } [0.023s]
        Filt_Query_Ret = 12 / 30 ( 0.023s)
      } [0.023s]
      [Len-1||F2/2] (2020-12-03 14:17:59) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02yyk6 ?p1 ?o1 . }
        [2020-12-03 14:17:59] SPARQL hit!
        Filt_Query_Ret = 12 / 30 ( 0.000s)
      } [0.000s]
      [Len-2||F1/2] (2020-12-03 14:17:59) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02yyk6 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:59] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02yyk6 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 439
        } [0.076s]
        Filt_Query_Ret = 26 / 439 ( 0.078s)
      } [0.079s]
      [Len-2||F2/2] (2020-12-03 14:17:59) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02yyk6 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:59] SPARQL hit!
        Filt_Query_Ret = 26 / 439 ( 0.001s)
      } [0.002s]
      76 coarse schemas retrieved from scratch.
      Calculating F1 for 76 coarse schemas: {
        Current: 0 / 76
        Checking schema 0 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02yyk6 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 WHERE { fb:m.02yyk6 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'1969'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 2
            Final Answer: {'Indian American', 'Agrawal'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Damyanti Gupta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 4 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Hinduism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 5 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02yyk6 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 WHERE { fb:m.02yyk6 fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'1.73'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 6 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 3
            Final Answer: {'Soleil Asha Gupta', 'Sage Ayla Gupta', 'Sky Anjahi Gupta'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 7 / 76: {
          [('Main', '==', 'm.02yyk6', ['medicine.physician.medical_specialty'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:medicine.physician.medical_specialty ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:medicine.physician.medical_specialty ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Neurosurgery'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 8 / 76: {
          [('Main', '==', 'm.02yyk6', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 2
            Final Answer: {'Monday Mornings', 'Chasing Life: New Discoveries in the Search for Immortality to Help You Age Less Today'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 9 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 5
            Final Answer: {'Professor', 'Journalist', 'Neurosurgery', 'TV Personality', 'Physician'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 10 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 11 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Novi'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 12 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02yyk6 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 13 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 14 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 15 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 16 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 17 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02yyk6 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 18 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 19 / 76: {
          [('Main', '==', 'm.02yyk6', ['medicine.physician.medical_specialty'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:medicine.physician.medical_specialty ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 20 / 76: {
          [('Main', '==', 'm.02yyk6', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 22 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 23 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 24 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 5
            Final Answer: {'Assistant Professor of Neurosurgery', 'Chief of Neurosurgery', 'Columnist', 'Chief Health Correspondent', 'Correspondent'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 25 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 2
            Final Answer: {"Bachelor's degree", 'Doctor of Medicine'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 26 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Sanjay Gupta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 27 / 76: {
          [('Main', '==', 'm.02yyk6', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Daytime Emmy Award for Outstanding Special Class Series'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 28 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 2
            Final Answer: {'Planet in Peril', 'American Morning'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 29 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 2
            Final Answer: {'Rebecca Olson Gupta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 30 / 76: {
          [('Main', '==', 'm.02yyk6', ['government.politician.party', 'government.political_party_tenure.politician'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Sanjay Gupta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 31 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 2
            Final Answer: {'Him/Herself', 'Host'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 32 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Biomedical Sciences'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 33 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Atlanta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 34 / 76: {
          [('Main', '==', 'm.02yyk6', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Sanjay Gupta MD'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 35 / 76: {
          [('Main', '==', 'm.02yyk6', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 36 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Sanjay Gupta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 37 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Sanjay Gupta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 38 / 76: {
          [('Main', '==', 'm.02yyk6', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Sanjay Gupta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 39 / 76: {
          [('Main', '==', 'm.02yyk6', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'White House Fellows'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 40 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Sanjay Gupta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 41 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Sanjay Gupta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 42 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 5
            Final Answer: {'Time', 'CNN', 'CBS News', 'Grady Memorial Hospital', 'Emory University School of Medicine'}
            Answers = 5, P = 0.200000, R = 1.000000, F1 = 0.333333
          } [0.005s]
          Answers = 5, P = 0.200000, R = 1.000000, F1 = 0.333333
        } [0.005s]
        Checking schema 43 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 3
            Final Answer: {'University of Michigan Health System', 'University of Michigan', 'Novi High School'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 44 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Sanjay Gupta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 45 / 76: {
          [('Main', '==', 'm.02yyk6', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 23
            Final Answer: {'Elizabeth Cohen', 'Trish Henry', 'Tim Langmaid', 'Ben Tinker', 'Ann Curley', 'Jennifer Bixler', 'Saundra Young', 'Caleb Hellerman', 'Georgiann Caruso', 'William Hudson', 'Danielle Dellorto', 'John Bonifield', 'Nadia Kounang', 'Miriam Falco', 'Val Willingham', 'Roni Selig', 'Stephanie Smith', 'David Martin', 'Aaron Cooper', 'Caitlin Hagan', 'Matt Sloane', 'Leslie Wade'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 46 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 47 / 76: {
          [('Main', '==', 'm.02yyk6', ['government.politician.party', 'government.political_party_tenure.party'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Democratic Party'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 48 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 11
            Final Answer: {'August 29, 2007', 'September 05, 2007', 'October 23, 2007', 'January 10, 2005', 'Sanjay Gupta', 'November 24, 2005', 'August 14, 2007', 'July 20, 2007', 'August 08, 2007', 'June 19, 2009', 'Black Light Attack'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 49 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 3
            Final Answer: {'Sanjay Gupta MD', 'Anderson Cooper 360°', 'Vital Signs'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 50 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 51 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 52 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 53 / 76: {
          [('Main', '==', 'm.02yyk6', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 54 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 55 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 56 / 76: {
          [('Main', '==', 'm.02yyk6', ['government.politician.party', 'government.political_party_tenure.politician'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 57 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 58 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 59 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 60 / 76: {
          [('Main', '==', 'm.02yyk6', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 61 / 76: {
          [('Main', '==', 'm.02yyk6', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 62 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 63 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 64 / 76: {
          [('Main', '==', 'm.02yyk6', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 65 / 76: {
          [('Main', '==', 'm.02yyk6', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 66 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 67 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 68 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 5, P = 0.200000, R = 1.000000, F1 = 0.333333
        } [0.000s]
        Checking schema 69 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 70 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 71 / 76: {
          [('Main', '==', 'm.02yyk6', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 72 / 76: {
          [('Main', '==', 'm.02yyk6', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 73 / 76: {
          [('Main', '==', 'm.02yyk6', ['government.politician.party', 'government.political_party_tenure.party'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 74 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 75 / 76: {
          [('Main', '==', 'm.02yyk6', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        76 / 76 coarse schemas kept with ans_size > 0.
      } [0.300s]
      Coarse level ended, resulting in 76 schemas.
    } [0.404s]
    Type level searching (total types = 10): {
      Current: 0 / 76
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'people.person'}]
[{'medicine.medical_specialty'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'people.person'}]
[{'medicine.medical_specialty'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'people.marriage'}, {'people.person'}]
[{'government.political_party_tenure'}, {'government.politician'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'government.political_party_tenure'}, {'government.political_party'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_program'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'people.marriage'}, {'people.person'}]
[{'government.political_party_tenure'}, {'government.politician'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'government.political_party_tenure'}, {'government.political_party'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_program'}]
      16 typed schemas retrieved from 76 coarse schemas.
      Calculating F1 for 16 typed schemas: {
        Current: 0 / 16
        Checking schema 0 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 1 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.children']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 2 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.place_of_birth']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 3 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 4 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.children']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 5 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.place_of_birth']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02yyk6 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 6 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 7 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 8 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 1
            Final Answer: {'Atlanta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 9 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 10 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema Request: {
            WebQ_1584|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02yyk6'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 11 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 12 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 13 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 14 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 15 / 16: {
          [('Main', '==', 'm.02yyk6', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02yyk6 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:59] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        2 / 16 typed schemas kept with ans_size > 0.
      } [0.127s]
      Typed level ended, resulting in 78 schemas.
    } [0.132s]
    Time level searching (total times = 0): {
      Current: 0 / 78
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
      0 timed schemas retrieved from 78 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 78 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 78
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
      0 ordinal schemas retrieved from 78 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 78 schemas.
    } [0.002s]
    [2020-12-03 14:17:59] buffer saved.
    78 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1584_schema].
  } [5.509s]
  Entering Q 1585 / 5810 [b'what did newton discover or invent?']: {
    Show 4 E + 10 T + 0 Tm + 0 Ord = 14 linkings: {
      #00 Entity: [2, 3) (newton) == m.03s9v (Isaac_Newton) {'score': 6092.438881, 'source': 0.0}
      #01 Entity: [3, 4) (discover) == m.02f8lj (discover (magazine)) {'score': 157.640953, 'source': 2.0}
      #02 Entity: [3, 4) (discover) == m.0bh8dyc (brewers quay) {'score': 58.077597, 'source': 2.0}
      #03 Entity: [3, 4) (discover) == m.0kc8y (discovery channel) {'score': 3639.042949, 'source': 2.0}
      #04 Type: [4, 5) (or) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.754852}
      #05 Type: [3, 5) (discover or) == protected_sites.natural_or_cultural_site_listing (natural or cultural site listing) {'sim': 0.752881}
      #06 Type: [0, 2) (what did) == media_common.lost_work (lost work) {'sim': 0.72612}
      #07 Type: [4, 5) (or) == film.person_or_entity_appearing_in_film (person or entity appearing in film) {'sim': 0.720832}
      #08 Type: [3, 5) (discover or) == protected_sites.natural_or_cultural_site_designation (natural or cultural site designation) {'sim': 0.715843}
      #09 Type: [4, 5) (or) == government.government_office_or_title (government office or title) {'sim': 0.694548}
      #10 Type: [3, 5) (discover or) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.678243}
      #11 Type: [4, 5) (or) == event.speech_or_presentation (speech or presentation) {'sim': 0.659082}
      #12 Type: [3, 5) (discover or) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.655594}
      #13 Type: [0, 1) (what) == location.us_state (us state) {'sim': 0.655521}
    } [0.000s]
    14 link data save to file.
    Coarse level searching (total entities = 4): {
      [Len-1||F1/4] (2020-12-03 14:18:04) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02f8lj ?p1 ?o1 . }
        [2020-12-03 14:18:04] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02f8lj ?p1 ?o1 . }
          Query return lines = 17
        } [0.008s]
        Filt_Query_Ret = 5 / 17 ( 0.008s)
        [Len-1||F1/4||2/4-1] (2020-12-03 14:18:04) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02f8lj ?p1 ?o1 . ?o1 ?p2 fb:m.03s9v . }
          [2020-12-03 14:18:04] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02f8lj ?p1 ?o1 . ?o1 ?p2 fb:m.03s9v . }
            Query return lines = 0
          } [0.027s]
          Filt_Query_Ret = 0 / 0 ( 0.027s)
        } [0.027s]
      } [0.036s]
      [Len-1||F2/4] (2020-12-03 14:18:04) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03s9v ?p1 ?o1 . }
        [2020-12-03 14:18:04] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03s9v ?p1 ?o1 . }
          Query return lines = 52
        } [0.005s]
        Filt_Query_Ret = 36 / 52 ( 0.005s)
        [Len-1||F2/4||1/4-1] (2020-12-03 14:18:04) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 fb:m.02f8lj . }
          [2020-12-03 14:18:04] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 fb:m.02f8lj . }
            Query return lines = 0
          } [0.027s]
          Filt_Query_Ret = 0 / 0 ( 0.027s)
        } [0.027s]
        [Len-1||F2/4||3/4-1] (2020-12-03 14:18:04) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 fb:m.0bh8dyc . }
          [2020-12-03 14:18:04] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 fb:m.0bh8dyc . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
        [Len-1||F2/4||4/4-1] (2020-12-03 14:18:04) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 fb:m.0kc8y . }
          [2020-12-03 14:18:04] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 fb:m.0kc8y . }
            Query return lines = 0
          } [0.089s]
          Filt_Query_Ret = 0 / 0 ( 0.089s)
        } [0.089s]
      } [0.125s]
      [Len-1||F3/4] (2020-12-03 14:18:05) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0bh8dyc ?p1 ?o1 . }
        [2020-12-03 14:18:05] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0bh8dyc ?p1 ?o1 . }
          Query return lines = 5
        } [0.008s]
        Filt_Query_Ret = 0 / 5 ( 0.008s)
      } [0.008s]
      [Len-1||F4/4] (2020-12-03 14:18:05) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0kc8y ?p1 ?o1 . }
        [2020-12-03 14:18:05] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0kc8y ?p1 ?o1 . }
          Query return lines = 26
        } [0.043s]
        Filt_Query_Ret = 9 / 26 ( 0.043s)
        [Len-1||F4/4||2/4-1] (2020-12-03 14:18:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0kc8y ?p1 ?o1 . ?o1 ?p2 fb:m.03s9v . }
          [2020-12-03 14:18:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0kc8y ?p1 ?o1 . ?o1 ?p2 fb:m.03s9v . }
            Query return lines = 0
          } [0.083s]
          Filt_Query_Ret = 0 / 0 ( 0.083s)
        } [0.083s]
      } [0.126s]
      [Len-2||F1/4] (2020-12-03 14:18:05) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02f8lj ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:05] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02f8lj ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 156
        } [0.106s]
        Filt_Query_Ret = 12 / 156 ( 0.106s)
        [Len-2||F1/4||2/4-1] (2020-12-03 14:18:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02f8lj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03s9v . }
          [2020-12-03 14:18:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02f8lj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03s9v . }
            Query return lines = 0
          } [0.095s]
          Filt_Query_Ret = 0 / 0 ( 0.095s)
        } [0.095s]
        [Len-2||F1/4||2/4-2] (2020-12-03 14:18:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02f8lj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03s9v . }
          [2020-12-03 14:18:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02f8lj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03s9v . }
            Query return lines = 1
          } [0.478s]
          Filt_Query_Ret = 0 / 1 ( 0.478s)
        } [0.478s]
      } [0.680s]
      [Len-2||F2/4] (2020-12-03 14:18:05) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:05] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 777
        } [0.058s]
        Filt_Query_Ret = 25 / 777 ( 0.061s)
        [Len-2||F2/4||1/4-1] (2020-12-03 14:18:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02f8lj . }
          [2020-12-03 14:18:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02f8lj . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.009s]
        [Len-2||F2/4||1/4-2] (2020-12-03 14:18:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02f8lj . }
          [2020-12-03 14:18:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02f8lj . }
            Query return lines = 4
          } [0.166s]
          Filt_Query_Ret = 0 / 4 ( 0.166s)
        } [0.166s]
        [Len-2||F2/4||3/4-1] (2020-12-03 14:18:06) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0bh8dyc . }
          [2020-12-03 14:18:06] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0bh8dyc . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-2||F2/4||3/4-2] (2020-12-03 14:18:06) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0bh8dyc . }
          [2020-12-03 14:18:06] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0bh8dyc . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-2||F2/4||4/4-1] (2020-12-03 14:18:06) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0kc8y . }
          [2020-12-03 14:18:06] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0kc8y . }
            Query return lines = 0
          } [0.018s]
          Filt_Query_Ret = 0 / 0 ( 0.018s)
        } [0.018s]
        [Len-2||F2/4||4/4-2] (2020-12-03 14:18:06) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0kc8y . }
          [2020-12-03 14:18:06] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0kc8y . }
            Query return lines = 0
          } [0.670s]
          Filt_Query_Ret = 0 / 0 ( 0.670s)
        } [0.670s]
      } [0.946s]
      [Len-2||F3/4] (2020-12-03 14:18:06) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bh8dyc ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:06] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bh8dyc ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 29
        } [0.011s]
        Filt_Query_Ret = 0 / 29 ( 0.012s)
      } [0.012s]
      [Len-2||F4/4] (2020-12-03 14:18:06) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0kc8y ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:06] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0kc8y ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 258
        } [0.037s]
        Filt_Query_Ret = 26 / 258 ( 0.038s)
        [Len-2||F4/4||2/4-1] (2020-12-03 14:18:06) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0kc8y ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03s9v . }
          [2020-12-03 14:18:06] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0kc8y ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03s9v . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
        [Len-2||F4/4||2/4-2] (2020-12-03 14:18:06) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0kc8y ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03s9v . }
          [2020-12-03 14:18:06] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0kc8y ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03s9v . }
            Query return lines = 0
          } [0.979s]
          Filt_Query_Ret = 0 / 0 ( 0.979s)
        } [0.979s]
      } [1.039s]
      113 coarse schemas retrieved from scratch.
      Calculating F1 for 113 coarse schemas: {
        Current: 0 / 113
        Checking schema 0 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.periodical.subjects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02f8lj fb:book.periodical.subjects ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02f8lj fb:book.periodical.subjects ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Science'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 1 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.periodical.language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02f8lj fb:book.periodical.language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02f8lj fb:book.periodical.language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.magazine.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02f8lj fb:book.magazine.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02f8lj fb:book.magazine.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Science magazine'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 3 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.magazine.issues'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02f8lj fb:book.magazine.issues ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02f8lj fb:book.magazine.issues ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 9
            Final Answer: {'Discover, Dec 1992', 'Discover, Oct 1993', 'Discover, Jun 1985', 'Discover, Jan 1987', 'Discover, Nov 1994', 'Discover, Mar 1987', 'Discover, Jul 1992', 'Discover, May 1981', 'Discover, Oct 1996'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 4 / 113: {
          [('Main', '==', 'm.02f8lj', ['award.award_presenting_organization.award_categories_presented'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02f8lj fb:award.award_presenting_organization.award_categories_presented ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02f8lj fb:award.award_presenting_organization.award_categories_presented ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Scientist of the Year'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 5 / 113: {
          [('Main', '==', 'm.03s9v', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 6 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03s9v fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 WHERE { fb:m.03s9v fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1642'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 7 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 3
            Final Answer: {'Kingdom of Great Britain', 'Kingdom of England', 'England'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 8 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Hannah Ayscough', 'Isaac Newton Sr.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 9 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 3
            Final Answer: {'Anglicanism', 'Arianism', 'Monotheism'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 10 / 113: {
          [('Main', '==', 'm.03s9v', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Kensington'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 11 / 113: {
          [('Main', '==', 'm.03s9v', ['people.deceased_person.place_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Westminster Abbey'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 12 / 113: {
          [('Main', '==', 'm.03s9v', ['law.inventor.inventions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:law.inventor.inventions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:law.inventor.inventions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Reflecting telescope'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 13 / 113: {
          [('Main', '==', 'm.03s9v', ['education.academic.advisees'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:education.academic.advisees ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:education.academic.advisees ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'William Whiston', 'Roger Cotes'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 14 / 113: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.assessment'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 15 / 113: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.connections_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.connections_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:07] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.connections_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 56
            Final Answer: {'edme mariotte cited by isaac newton', 'john dollond work related to isaac newton', 'galileo galilei influenced isaac newton', 'emilie, marquise du chatelet wrote on work of isaac newton', 'john tillotson fellow rs member with isaac newton', 'edmond halley settled calculus row with isaac newton', 'isaac barrow taught isaac newton', 'henry cavendish checked isaac newton', 'john wallis a fan was isaac newton', 'john locke visited by isaac newton', 'simon stevin anticipated isaac newton', 'hans sloane a pal of isaac newton', 'robert boyle influenced isaac newton', 'john winthrop, the younger corresponded with isaac newton', 'jean buridan anticipated isaac newton', 'william ferrel studied isaac newton', 'john dalton studied isaac newton', 'nicolas-claude fabri de peiresc work used by isaac newton', 'christiaan huyghens work related to isaac newton', 'georges-louis leclerc, comte de buffon translated isaac newton', 'ole romer met isaac newton', 'pierre-louis moreau de maupertuis defend views of isaac newton', 'william oughtred a fan was isaac newton', 'william cheselden at deathbed of isaac newton', 'abraham de moivre studied work of isaac newton', 'charles-marie de la condamine checked theory of isaac newton', 'gottfried wilhelm leibniz met isaac newton', 'thomas sprat a pal of isaac newton', 'rasmus bartholin contradicted theory of isaac newton', 'nicolaus copernicus triggered gravity work by isaac newton', 'john arbuthnot worked with isaac newton', 'david brewster wrote about isaac newton', 'francesco algarotti wrote a book about isaac newton', 'edmond halley a pal of isaac newton', 'john flamsteed not friendly with isaac newton', 'rene descartes laid ground for isaac newton', 'pierre gassendi influenced isaac newton', 'francois-marie arouet de voltaire attended funeral of isaac newton', 'william of ockham influenced isaac newton', 'john napier anticipated isaac newton', 'johann bernoulli ranked with isaac newton', 'thomas bayes defended isaac newton', 'nehemiah grew knew isaac newton', 'giovanni alfonso borelli work known to isaac newton', 'francis hauksbee invited to demonstrate by isaac newton', 'george graham work related to isaac newton', 'anton van leeuwenhoek royal society member with isaac newton', 'samuel koenig studied isaac newton', 'johannes kepler laid basis of isaac newton', 'thomas hobbes influenced isaac newton', 'samuel pepys a pal of isaac newton', "willem jacob 's gravesande met isaac newton", 'robert hooke inspired isaac newton', 'john evelyn a pal of isaac newton', 'pierre de fermat superseded by isaac newton', 'john collins corresponded with isaac newton'}
            Answers = 56, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 56, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 16 / 113: {
          [('Main', '==', 'm.03s9v', ['base.eating.practicer_of_diet.diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.eating.practicer_of_diet.diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.eating.practicer_of_diet.diet ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Vegetarianism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 17 / 113: {
          [('Main', '==', 'm.03s9v', ['influence.influence_node.influenced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 8
            Final Answer: {'Johannes Kepler', 'Nicolaus Copernicus', 'Ibn Tufail', 'René Descartes', 'Isaac Barrow', 'Euclid', 'Maimonides', 'Christiaan Huygens'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 18 / 113: {
          [('Main', '==', 'm.03s9v', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 19
            Final Answer: {"Newton's laws of motion", "Newton's notation", 'Schrödinger–Newton equations', 'Newton polygon', 'Newton fractal', 'Newton', "Newton's theorem of revolving orbits", 'Newtonian telescope', "Newton's cradle", 'Newton polynomial', 'Newton–Cotes formulas', 'Newton disc', "Newton's inequalities", '8000 Isaac Newton', 'Newton–Euler equations', "Newton's cannonball", "Newton's method"}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 19 / 113: {
          [('Main', '==', 'm.03s9v', ['book.author.book_editions_published'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 5
            Final Answer: {'Mathematical principles of natural philosophy ...', 'Philosophiae naturalis principia mathematica.', 'Mathematical Principles of Natural Philosophy and His System of the World (Principia.)', 'Mathematical principles of natural philosophy', 'The mathematical principles of natural philosophy'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 20 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 11
            Final Answer: {'If I have seen further... it is by standing upon the shoulders of giants.', 'The Christian ministry is the worst of all trades, but the best of all professions.', 'If I am anything, which I highly doubt, I have made myself so by hard work.', 'I keep the subject of my inquiry constantly before me, and wait till the first dawning opens gradually, by little and little, into a full and clear light.', 'If I have done the public any service, it is due to my patient thought.', 'If I have made any valuable discoveries, it has been owing more to patient attention than to any other talent.', 'I seem to have been only like a boy playing on the seashore, and diverting myself in now and then finding a smoother pebble or a prettier shell than ordinary, whilst the great ocean of truth lay all undiscovered before me.', 'Yet one thing secures us what ever betide, the scriptures assures us the Lord will provide.', 'A man may imagine things that are false, but he can only understand things that are true, for if the things be false, the apprehension of them is not understanding.', 'Every body continues in its state of rest, or of uniform motion in a right line, unless it is compelled to change that state by forces impressed upon it.', 'This most beautiful system -- The Universe could only proceed from the dominion of an intelligent and powerful Being.'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 21 / 113: {
          [('Main', '==', 'm.03s9v', ['education.academic.research_areas'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:education.academic.research_areas ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:education.academic.research_areas ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Mathematics', 'Algebra'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 22 / 113: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.category'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 23 / 113: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.has_sentences'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 60
            Final Answer: {"It was acknowledged that though Leibniz's discoveries were later in time, he preceded Newton in publishing a full account.", 'The ""Principia"" contained Newton\'s three laws of motion (now known as Newton\'s Laws: laws of inertia, action and reaction, and acceleration proportional to force),  his theory of tides and lunar motion,  and his theory of gravitation as a universal law of attraction between any two objects.', 'In this paper, Newton demonstrated the existence of periodic optical phenomena: he had discovered concentric colored rings in the thin film of air between a lens and a flat sheet of glass and calculated that the distance between these concentric rings (""Newton\'s rings"") depended on the thickness of the film of air.', 'This tract, which over the next two years Newton expanded, formed the basis of the first book of ""Philosophiae naturalis principia mathematica"" (""Mathematical Principles of Natural Philosophy"") or the ""Principia"", as it commonly known.', "He studied higher mathematics under Professor Isaac Barrow , who recognized Newton's genius and encouraged him.", 'Over the next three years he summarized his findings in an essay, ""Of Colours"", which  became Book One of his ""Opticks"",  published in 1704.', 'Contemporary scientists believed that white light was a basic single entity, but the chromatic aberration seen in a telescope lens convinced Newton otherwise.', 'With Halley\'s help, the ""Principia"" was published in 1687 and hailed as a masterpiece.', 'Soon after, he also found the missing link in the identification of the force of terrestrial gravity by discovering that a spherically-symmetrical distribution of matter exerts the same attraction at external points as if its mass were concentrated at its center.', '""Principia"" was translated into French by du Chatelet in 1759.', 'Newton was given a state funeral and was buried in Westminster Abbey.', 'The physicist Brewster wrote his biography.', 'He admired the work of Oughtred.', "Erasmus Bartholin's work questioned Newton's work on optics.", 'He wondered whether the force that pulled an apple to the ground could also pull the Moon into an orbit around the Earth.', 'From 1664, he recorded his thoughts in a notebook he called ""Certain Philosophical Questions"".', 'In the summer of 1684, Halley visited Newton at Cambridge to discuss orbital dynamics.', "Both objected to Newton's attempt to prove by experiment alone that light consisted of the motion of small particles.", 'Three months later, Halley received a short tract, (""On Motion"") which at Halley\'s request was registered with the Royal Society in early 1685.', 'In a discussion of the shape of the orbit under the inverse square law of attraction towards a fixed center, Newton suggested the shape would be an ellipse, and promised to send Halley the calculation from which he had calculated the answer.', 'The paper provoked skepticism from the curator of the Royal Society, Hooke , and, on the Continent, from Christiaan Huyghens .', "In the simple case of circular orbit, the law of attraction followed from Kepler's Third Law (relating the times of revolution of the planets around the sun to the sizes of their orbits) together with Huyghens's 1673 expression for the centripetal acceleration of a body moving in a circle.", 'By their application, Newton formulated the universal laws of nature with which he was able to solve virtually all the unsolved problems of his day.', 'He then worked out what the motion of the Moon would be if these assumptions were correct, but obtained a figure that was too low.', 'Late in 1679, Hooke wrote to Newton describing his analysis of planetary motion.', "Barrow then resigned his Lucasian Professor's chair to make way for Newton.", 'In 1696, he was appointed Warden of the London Mint, becoming Master of the Mint in 1699.', 'In 1675, when Newton published another paper on the color phenomena in thin films, he annoyed Hooke again, this time because Hooke thought Newton had stolen some of his own optical results.', 'A Royal Society panel, including Halley and mathematician William Jones ,  decided that Newton was the first to unify and make explicit what had been latent in the work of various forerunners.', 'Newton influenced Cheselden, Dalton, De Moivre, Maupertius, Buffon, Winthrop, Hales, Pieter van Musschenbroek and Whiston.', 'The ""method of fluxions"", as he called it,  produced simple analytical methods that unified many existing techniques so as to solve problems like finding areas, tangents, the lengths of curves, and the maximums and minimums of functions.', 'Voltaire remarked that England had honored a mathematician as other nations had honored a king.', 'Disappointed, he set aside his figures and did not return to them until about 12 years later.', 'A constant preoccupation for Newton was the continuing fight with Leibniz over who first invented calculus.', 'One of the greatest scientists of all time.', 'Also at this time, Newton began to think about gravity.', 'In 1689, Newton campaigned for a seat in Parliament and became Member for Cambridge.', 'His gravitational law declared that the force of gravity is proportional to the masses of the objects and decreases in proportion to the square of the distance between two bodies.', 'Now obliged to deliver an annual course of lectures, Newton chose optics as his first subject.', 'In 1705, he was knighted by Queen Anne.', "Between 1665 and 1667, Newton made revolutionary advances in optics, physics, and astronomy, and laid the foundations for differential and integral calculus, several years before Leibniz's  discoveries.", 'In 1669, Barrow decided the world must know about Newton\'s mathematical achievements and sent Newton\'s preliminary work, ""On Analysis by Infinite Series,""  to John Collins in London.', 'Passing a beam of sunlight through a prism, he observed that the beam spread into a colored band of light (spectrum), and from this he argued that sunlight is really a combination of all the colors.', 'He also said he thought light consisted of the motion of small particles, rather than waves.', 'In 1703, he was elected President of the Royal Society, an office he held until his death.', 'His theory of gravity was particularly important in working out the motions of the planets.', 'Newton turned his attention to the nature of light.', 'While in London, he met famous diarists Evelyn and Pepys and philosopher Locke .', 'This led to an exchange between the two on the subject of elliptical orbits.', 'His laws of motion laid the basis for classical mechanics.', 'However, in 1692, the strain of his studies and his scientific disputes, especially with Leibniz, Flamsteed and Hooke, cast him into a severe depression and rumors spread that he had gone mad.', "His work related to that of Algarotti, Gregory, Stevin,  'sGravesende  Haukesbee, Wallis, Johann Bernoulli, Stevin, Cavendish, Ferrel, Copernicus, Peiresc and William of Ockham.", 'The inverse problem of calculating the orbit from the law of force (which had baffled Hooke, Wren , Halley and others) was solved by Newton around 1680.', 'In 1672, Newton published an account of his findings on white light in the Royal Society\'s ""Philosophical Transactions"".', 'He also was fascinated by the mechanics of Copernican astronomy as set out by Galileo and by Kepler\'s ""Optics"".', 'The idea of a law of attraction according to the inverse square of the distance between the sun and the planets was now a topic of wide discussion in scientific circles.', 'Newton knew or worked with Tillotson, Sprat, Leeuwenhoek, Grew, Sloane and Arbuthnot.', 'He met Romer.', 'He assumed that the rate of fall is proportional to the force of gravity and that this force is inversely proportional to the square of the distance from the center of the Earth.', 'During his third year at Cambridge, Newton went beyond the compulsory study of Aristotle and read the works of Descartes , Gassendi , Hobbes , and 17th-century chemist Boyle .'}
            Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 24 / 113: {
          [('Main', '==', 'm.03s9v', ['influence.influence_node.influenced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 28
            Final Answer: {'Voltaire', 'John Craig', "Willem 's Gravesande", 'William Wollaston', 'Edmond Halley', 'Lawrence Sklar', 'Abraham de Moivre', 'David Gregory', 'Albert Einstein', 'Immanuel Kant', 'David Hume', 'Thomas Jefferson', 'Ernst Mach', 'George Boole', 'Emanuel Swedenborg', 'Ralph Waldo Emerson', 'David Hartley', 'Iain King', 'John Keill', 'Joseph Raphson', 'William Whiston', 'George Berkeley', 'Pierre Louis Maupertuis', 'Gregory Chaitin', 'Kurt Gödel', 'John Theophilus Desaguliers', 'Thomas Bayes', 'Neil deGrasse Tyson'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 25 / 113: {
          [('Main', '==', 'm.03s9v', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 47
            Final Answer: {'The optical papers of Isaac Newton', 'Naturvetenskapens matematiska principer', 'Universal arithmetick', "The preliminary manuscripts for Isaac Newton's 1687 Principia, 1684-1685", 'Optice', 'Daniel and the Apocalypse', 'Optical lectures read in the publick schools of the University of Cambridge, Anno domini, 1669', 'Die Mathematischen Prinzipien Der Physik', 'Newtons abhandlung über die quadratur der kurven', 'Lekt͡s︡ii po optike', 'The present state of Ireland', "The first three sections of Newton's Principia", "An abstract of Sir Isaac Newton's Chronology of ancient kingdoms", 'Observations upon the prophecies of Daniel, and the Apocalypse of St. John', 'Principia', 'Newton', 'Opera quae exstant omnia', "The three first sections and part of the seventh section of Newton's Principia", 'Observations Upon the Prophecies of Daniel and the Apocalypse of St. John', 'Opticks: or, A treatise of the reflexions, refractions, inflexions and colours of light', "Traité d'optique", 'Method of Fluxions', 'Lettres inédites de Newton', 'Papers & letters on natural philosophy and related documents', 'La Méthode des fluxions et des suites infinies', 'A treatise of the system of the world', 'An Historical Account of Two Notable Corruptions of Scripture', 'Theological manuscripts', 'Cuatro Cartas Al Dr Bentley', 'The Chronology of Ancient Kingdoms', 'Philosophiæ Naturalis Principia Mathematica', 'Unpublished scientific papers of Isaac Newton', "Sir Isaac Newton's Chronology, abridged by himself", 'Mathematical Works of Isaac Newton', 'A letter of Mr. Isaac Newton... containing his theory about light and colours', "The ninth and eleventh sections of Newton's Principia", "Newton's Philosophy of Nature Selections from his Writings", 'Thirteen letters from Sir Isaac Newton', 'Arithmetica Universalis', 'Opticks', 'Two letters of Sir Isaac Newton to Mr. Le Clerc', 'New theory about light and colors', "Sir Isaac Newton's corollaries from his philosophy and chronology", 'Tables for renewing and purchasing the leases of cathedral-churches and colleges', "Isaac Newton's Observations on the Prophecies of Daniel and the Apocalypse of St. John: A Critical Edition", 'Über die Gravitation--'}
            Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 26 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 6
            Final Answer: {'Scientist', 'Astronomer', 'Physicist', 'Mathematician', 'Chemist', 'Philosopher'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 27 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 28 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Woolsthorpe-by-Colsterworth'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 29 / 113: {
          [('Main', '==', 'm.03s9v', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03s9v fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 WHERE { fb:m.03s9v fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1727'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 30 / 113: {
          [('Main', '==', 'm.03s9v', ['music.lyricist.lyrics_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:music.lyricist.lyrics_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:music.lyricist.lyrics_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'A Source of Light'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 31 / 113: {
          [('Main', '==', 'm.03s9v', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 3
            Final Answer: {'Relativity in curved spacetime', 'The calculus wars', 'Isaac Newton: The Last Sorcerer'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 32 / 113: {
          [('Main', '==', 'm.03s9v', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 33 / 113: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.connections_from'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 42
            Final Answer: {'isaac newton influenced georges-louis leclerc, comte de buffon', 'isaac newton met john locke', 'isaac newton work related to simon stevin', 'isaac newton admired by francois-marie arouet de voltaire', 'isaac newton row with john flamsteed', 'isaac newton influenced john winthrop, the younger', 'isaac newton studied johannes kepler', 'isaac newton co-developed calculus with gottfried wilhelm leibniz', 'isaac newton a fan of william oughtred', 'isaac newton biography by david brewster', 'isaac newton work related to nicolas-claude fabri de peiresc', 'isaac newton influenced abraham de moivre', 'isaac newton knew nehemiah grew', 'isaac newton met samuel pepys', 'isaac newton work related to john wallis', 'isaac newton studied thomas hobbes', 'isaac newton work related to johann bernoulli', 'isaac newton knew john arbuthnot', 'isaac newton criticized by robert hooke', 'isaac newton knew hans sloane', 'isaac newton studied rene descartes', 'isaac newton met ole romer', 'isaac newton studied aristotle', 'isaac newton knew anton van leeuwenhoek', 'isaac newton criticized by christiaan huyghens', 'isaac newton work related to william ferrel', 'isaac newton published by john collins', 'isaac newton knew thomas sprat', 'isaac newton influenced john dalton', 'isaac newton work questioned by rasmus bartholin', 'isaac newton work related to nicolaus copernicus', 'isaac newton work related to francesco algarotti', 'isaac newton work related to christopher wren', 'isaac newton influenced william cheselden', 'isaac newton met john evelyn', 'isaac newton studied under isaac barrow', 'isaac newton translated by emilie, marquise du chatelet', 'isaac newton studied pierre gassendi', 'isaac newton work related to henry cavendish', 'isaac newton primacy asserted by william jones', 'isaac newton work related to william of ockham', 'isaac newton knew john tillotson'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 34 / 113: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.kwtype'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 35 / 113: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.disciplines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 36 / 113: {
          [('Main', '==', 'm.03s9v', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 37 / 113: {
          [('Main', '==', 'm.03s9v', ['base.rivalries.rival.rivals'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.rivalries.rival.rivals ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.rivalries.rival.rivals ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Leibniz–Newton calculus controversy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 38 / 113: {
          [('Main', '==', 'm.03s9v', ['base.argumentmaps.innovator.original_ideas'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.argumentmaps.innovator.original_ideas ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.argumentmaps.innovator.original_ideas ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {"Newton's law of universal gravitation"}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.003s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.004s]
        Checking schema 39 / 113: {
          [('Main', '==', 'm.03s9v', ['food.diet_follower.follows_diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Vegetarian food'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 40 / 113: {
          [('Main', '==', 'm.03s9v', ['user.rlyeh.certainty.complete.completeproperties'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:user.rlyeh.certainty.complete.completeproperties ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:user.rlyeh.certainty.complete.completeproperties ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Children', 'Spouse (or domestic partner)'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 41 / 113: {
          [('Main', '==', 'm.0kc8y', ['tv.tv_network.areas_served'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:tv.tv_network.areas_served ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:tv.tv_network.areas_served ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'World'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 42 / 113: {
          [('Main', '==', 'm.0kc8y', ['tv.tv_network.channels'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:tv.tv_network.channels ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:tv.tv_network.channels ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 9
            Final Answer: {'TLC', 'Military Channel', 'Velocity', 'FitTV', 'Destination America', 'Discovery Health Channel', 'Animal Planet', 'Science', 'Investigation Discovery'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 43 / 113: {
          [('Main', '==', 'm.0kc8y', ['user.zsi_editorial.editorial.topic.lists'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:user.zsi_editorial.editorial.topic.lists ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:user.zsi_editorial.editorial.topic.lists ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Podcast Producers'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 44 / 113: {
          [('Main', '==', 'm.0kc8y', ['media_common.netflix_genre.titles'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 44
            Final Answer: {'Biker Build-Off: Indian Larry vs. Mondo Pouras', 'Warfile: The Battle of Midway', 'Great Chefs: Great Cities Cookbook', 'Cracking the Ocean Code', 'Discovery Atlas: Brazil Revealed', 'Anatomy of Sex', 'Walking with Dinosaurs', 'When We Left Earth: The NASA Missions', 'The Flight That Fought Back', 'You: On a Diet', 'Extreme Machines: Hog Heaven', 'The Life of Mammals', 'Anatomy of a Tiger Bite', 'Pompeii: The Last Day', 'Survivorman', 'Discovery Atlas: Italy Revealed', 'Great Chefs, Great Cities', 'Wings: Evolution of Air Power', 'Yoga Conditioning for Weight Loss', 'Discovery Atlas: Australia Revealed', 'Anatomy of a Snake Bite', 'Destroyed In Seconds', 'Man vs. Wild', 'Tinker the Otter', 'Discovery Channel, Who Betrayed Anne Frank?', 'Nature of Sex', "Pasquale's Kitchen Express: Vol. 1", 'Life', 'PitchMen', 'American Shark', '100 Greatest Discoveries', 'The Science of Sex Appeal', 'MythBusters', 'History of the Chopper', 'Dirty Jobs', 'Rebuilding a Race Car Legend', 'Discovery Atlas: China Revealed', 'Harley-Davidson: Birth of the V-Rod', 'Life (UK)', 'Anatomy of a Bear Bite', 'Angels vs. Demons: Fact or Fiction?', 'Who Was Jesus?', 'American Chopper', 'Meerkat Manor'}
            Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 45 / 113: {
          [('Main', '==', 'm.0kc8y', ['tv.tv_program_creator.programs_created'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:tv.tv_program_creator.programs_created ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:tv.tv_program_creator.programs_created ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 8
            Final Answer: {'Classic British Aircraft', 'An MG Is Born', "Stephen Hawking's Grand Design", 'Discovery Channel, Who Betrayed Anne Frank?', 'Bad Universe', 'Salvage Hunters', 'Mighty Ships', 'Flying Wild Alaska'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 46 / 113: {
          [('Main', '==', 'm.0kc8y', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 5
            Final Answer: {'Animal Planet The Most Extreme Bugs', 'How to Customize Damn Near Anything', 'American Chopper At Full Throttle', 'Insight Pocket Guide Kenya with Map', 'Wild Discovery Guide to Your Dog'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 47 / 113: {
          [('Main', '==', 'm.0kc8y', ['organization.organization.founders'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'John Hendricks'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 48 / 113: {
          [('Main', '==', 'm.0kc8y', ['broadcast.producer.produces'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:broadcast.producer.produces ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:broadcast.producer.produces ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 2
            Final Answer: {'What Not To Wear: Trends', 'Discovery Channel Video Podcasts'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 49 / 113: {
          [('Main', '==', 'm.0kc8y', ['computer.software_developer.software'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:computer.software_developer.software ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:computer.software_developer.software ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Discovery News Reader'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 50 / 113: {
          [('Main', '==', 'm.02f8lj', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Circulation Director'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 51 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.periodical.format', 'book.periodical_format_period.format'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:book.periodical.format ?o1 . ?o1 fb:book.periodical_format_period.format ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:book.periodical.format ?o1 . ?o1 fb:book.periodical_format_period.format ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Tabloid'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 52 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.periodical.first_issue_date', 'book.periodical_publication_date.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02f8lj fb:book.periodical.first_issue_date ?o1 . ?o1 fb:book.periodical_publication_date.date ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.02f8lj fb:book.periodical.first_issue_date ?o1 . ?o1 fb:book.periodical_publication_date.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'1980'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 53 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.periodical.publisher', 'book.periodical_publisher_period.publisher'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:book.periodical.publisher ?o1 . ?o1 fb:book.periodical_publisher_period.publisher ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:book.periodical.publisher ?o1 . ?o1 fb:book.periodical_publisher_period.publisher ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Kalmbach Publishing'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 54 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.periodical.frequency_or_issues_per_year', 'book.periodical_frequency.issues_per_year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02f8lj fb:book.periodical.frequency_or_issues_per_year ?o1 . ?o1 fb:book.periodical_frequency.issues_per_year ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.02f8lj fb:book.periodical.frequency_or_issues_per_year ?o1 . ?o1 fb:book.periodical_frequency.issues_per_year ?o2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 55 / 113: {
          [('Main', '==', 'm.02f8lj', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02f8lj fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.02f8lj fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'1984'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 56 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.periodical.frequency_or_issues_per_year', 'book.periodical_frequency.frequency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:book.periodical.frequency_or_issues_per_year ?o1 . ?o1 fb:book.periodical_frequency.frequency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:book.periodical.frequency_or_issues_per_year ?o1 . ?o1 fb:book.periodical_frequency.frequency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Monthly'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 57 / 113: {
          [('Main', '==', 'm.02f8lj', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Ann Moore'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 58 / 113: {
          [('Main', '==', 'm.02f8lj', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Discover'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 59 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.periodical.format', 'book.periodical_format_period.periodical'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:book.periodical.format ?o1 . ?o1 fb:book.periodical_format_period.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:book.periodical.format ?o1 . ?o1 fb:book.periodical_format_period.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Discover'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 60 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.periodical.publisher', 'book.periodical_publisher_period.periodical'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:book.periodical.publisher ?o1 . ?o1 fb:book.periodical_publisher_period.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:book.periodical.publisher ?o1 . ?o1 fb:book.periodical_publisher_period.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'Discover'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 61 / 113: {
          [('Main', '==', 'm.02f8lj', ['book.periodical.publisher', 'book.periodical_publisher_period.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02f8lj fb:book.periodical.publisher ?o1 . ?o1 fb:book.periodical_publisher_period.from ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.02f8lj fb:book.periodical.publisher ?o1 . ?o1 fb:book.periodical_publisher_period.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 62 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1703'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 63 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 64 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'M.A.', 'Bachelor of Arts'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 65 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 3
            Final Answer: {'1665', '1661', '1668'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 66 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 67 / 113: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'1691', '1703'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 68 / 113: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'President of the Royal Society'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 69 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 4
            Final Answer: {'Benjamin Smith', 'Mary Smith', 'Hannah Smith Pilkington'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 70 / 113: {
          [('Main', '==', 'm.03s9v', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 71 / 113: {
          [('Main', '==', 'm.03s9v', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 72 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1727'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 73 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 74 / 113: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Royal Society', 'Priory of Sion'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 75 / 113: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1727'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 76 / 113: {
          [('Main', '==', 'm.03s9v', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 77 / 113: {
          [('Main', '==', 'm.03s9v', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 78 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 79 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Royal Society', 'University of Cambridge'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 80 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {"The King's School, Grantham", 'Trinity College, Cambridge'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 81 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 82 / 113: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1661'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 83 / 113: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 84 / 113: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 85 / 113: {
          [('Main', '==', 'm.03s9v', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Royal Society'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 86 / 113: {
          [('Main', '==', 'm.03s9v', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.pet'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Diamond'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 87 / 113: {
          [('Main', '==', 'm.0kc8y', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 6
            Final Answer: {'1991', '2000', '1993', '1995', '2007', '2004'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 88 / 113: {
          [('Main', '==', 'm.0kc8y', ['award.award_winner.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 89 / 113: {
          [('Main', '==', 'm.0kc8y', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 5
            Final Answer: {'Yugoslavia: Death of a Nation', 'Black Sky: The Race for Space', 'Walking with Dinosaurs', 'Planet Earth', 'People of the Forest: The Chimps of Gombe'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 90 / 113: {
          [('Main', '==', 'm.0kc8y', ['business.sponsor.sponsorship', 'business.sponsorship.sponsored_recipient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_recipient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_recipient ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'U.S. Postal Service Pro Cycling Team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 91 / 113: {
          [('Main', '==', 'm.0kc8y', ['tv.tv_network.programs', 'tv.tv_network_duration.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:tv.tv_network.programs ?o1 . ?o1 fb:tv.tv_network_duration.from ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:tv.tv_network.programs ?o1 . ?o1 fb:tv.tv_network_duration.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 3
            Final Answer: {'2011', '2005', '2012'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 92 / 113: {
          [('Main', '==', 'm.0kc8y', ['film.film_festival_sponsor.festivals_sponsored', 'film.film_festival_sponsorship.sponsor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:film.film_festival_sponsor.festivals_sponsored ?o1 . ?o1 fb:film.film_festival_sponsorship.sponsor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:film.film_festival_sponsor.festivals_sponsored ?o1 . ?o1 fb:film.film_festival_sponsorship.sponsor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Discovery Channel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 93 / 113: {
          [('Main', '==', 'm.0kc8y', ['business.brand.owner_s', 'business.company_brand_relationship.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:business.brand.owner_s ?o1 . ?o1 fb:business.company_brand_relationship.from_date ?o2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:business.brand.owner_s ?o1 . ?o1 fb:business.company_brand_relationship.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'1985'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 94 / 113: {
          [('Main', '==', 'm.0kc8y', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Discovery Channel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 95 / 113: {
          [('Main', '==', 'm.0kc8y', ['broadcast.tv_station.affiliations', 'broadcast.tv_affiliation_duration.station'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:broadcast.tv_station.affiliations ?o1 . ?o1 fb:broadcast.tv_affiliation_duration.station ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:08] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:broadcast.tv_station.affiliations ?o1 . ?o1 fb:broadcast.tv_affiliation_duration.station ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Discovery Channel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 96 / 113: {
          [('Main', '==', 'm.0kc8y', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Dirty Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 97 / 113: {
          [('Main', '==', 'm.0kc8y', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 98 / 113: {
          [('Main', '==', 'm.0kc8y', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 11
            Final Answer: {'Gemini Productions', 'Brian Lapping Associates', 'BBC London', 'TLC', 'TV Asahi', 'Vulcan Productions', 'Antenna Films', 'British Broadcasting Corporation', 'ProSieben', 'France 3'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 99 / 113: {
          [('Main', '==', 'm.0kc8y', ['business.sponsor.sponsorship', 'business.sponsorship.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.from ?o2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 2
            Final Answer: {'2004'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Current: 100 / 113
        Checking schema 100 / 113: {
          [('Main', '==', 'm.0kc8y', ['tv.tv_network.programs', 'tv.tv_network_duration.network'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:tv.tv_network.programs ?o1 . ?o1 fb:tv.tv_network_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:tv.tv_network.programs ?o1 . ?o1 fb:tv.tv_network_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Discovery Channel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 101 / 113: {
          [('Main', '==', 'm.0kc8y', ['business.brand.owner_s', 'business.company_brand_relationship.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:business.brand.owner_s ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:business.brand.owner_s ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Discovery Channel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 102 / 113: {
          [('Main', '==', 'm.0kc8y', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 103 / 113: {
          [('Main', '==', 'm.0kc8y', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Discovery Channel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 104 / 113: {
          [('Main', '==', 'm.0kc8y', ['broadcast.tv_station.affiliations', 'broadcast.tv_affiliation_duration.network'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:broadcast.tv_station.affiliations ?o1 . ?o1 fb:broadcast.tv_affiliation_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:broadcast.tv_station.affiliations ?o1 . ?o1 fb:broadcast.tv_affiliation_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Animal Planet'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 105 / 113: {
          [('Main', '==', 'm.0kc8y', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Discovery Channel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 106 / 113: {
          [('Main', '==', 'm.0kc8y', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Peabody Award'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 107 / 113: {
          [('Main', '==', 'm.0kc8y', ['business.sponsor.sponsorship', 'business.sponsorship.sponsored_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Discovery Channel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 108 / 113: {
          [('Main', '==', 'm.0kc8y', ['business.sponsor.sponsorship', 'business.sponsorship.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.to ?o2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 WHERE { fb:m.0kc8y fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 2
            Final Answer: {'2008', '2007'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 109 / 113: {
          [('Main', '==', 'm.0kc8y', ['tv.tv_network.programs', 'tv.tv_network_duration.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:tv.tv_network.programs ?o1 . ?o1 fb:tv.tv_network_duration.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:tv.tv_network.programs ?o1 . ?o1 fb:tv.tv_network_duration.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 207
            Final Answer: {'Into the Unknown with Josh Bernstein', 'An MG Is Born', 'Science of the Movies', 'Verminators', 'Into The Unknown With Josh Bernstein', 'Anatomy of Sex', 'Shimmy', 'Auction Kings', 'Monster Garage', "Ray Mears' World of Survival", 'Industrial Revelations', 'Factory Made', 'Storm Chasers', 'Man, Woman, Wild', 'Into the Universe with Stephen Hawking', 'Lobster Wars', 'Before We Ruled the Earth', 'One Man Army', 'How Do They Do It?', 'When Dinosaurs Roamed America', 'Smash Lab', 'Gold Rush', 'Beverly Hills Vet', 'Howe & Howe Tech', 'American Loggers', 'Unchained Reaction', 'Animal X', 'American Chopper: Senior vs. Junior', 'Final 24', 'Everest: Beyond the Limit', 'The Big Question', 'World’s Toughest Trucker', 'Wild Discovery', 'Lobstermen: Jeopardy at Sea', 'Beirut to Bosnia', 'Bone Detectives', 'Disaster Eyewitness', 'Swords: Life on the Line', 'Dinosaur Planet', 'The Battle for Rome', 'A Haunting', 'Weaponizers', 'Most Evil', 'The New Detectives', 'Shark Week', 'Exodus Earth', '100 Greatest Discoveries', 'Mega Engineering', 'Unsolved History', "Buggin' with Ruud", 'Clash of the Dinosaurs', 'Machines!', 'Greatest Tank Battles', 'Weapon Masters', 'Mongrel Nation', 'Austin Stevens: Snakemaster', 'Bounty Wars', 'Sons of Guns', 'Fugitive Strike Force', '2057', "How It's Made", 'Animal Face-Off', 'Ocean of Fear', 'Flying Wild Alaska', 'Extreme Engineering', 'Brew Masters', 'The Next Step', "20 Things to Do Before You're 30", 'The Detonators', 'Walking with Beasts', 'It Takes a Thief', 'Koppel on Discovery', 'One Way Out', 'Walking the Amazon', 'Colossal construction', 'Mantracker', 'HowStuffWorks', 'Weed Wars', 'Wheeler Dealers', 'Last One Standing', 'Future Weapons', 'Chasing Classic Cars', 'Lunar Jim', 'Ancient Inventions', "Catchin' Air", 'Building the Future', 'Fifth Gear', 'Discovery Atlas', 'U.S. Marshals: Operation Falcon', 'Fearless Planet', 'What the Ancients Knew', 'Wreck Chasers', 'Amish Mafia', 'Survivorman', "Corwin's Quest", 'Extreme Loggers', "Fast N' Loud", 'Time Warp', 'Out of the Wild', 'Race to Mars', 'Deadliest Catch', 'The Adventures of A.R.K.', 'True Horror', 'Extreme Survival', 'Prototype This!', 'The Crocodile Hunter', 'Aircrash Confidential', 'Masters of Survival', 'Moonshiners', 'Cash Cab Chicago', 'Rise of the Video Game', 'Construction Intervention', 'Everything You Need to Know', 'Bristol Bay Brawl', 'Human Body: Pushing the Limits', 'Airplane Repo', 'Lonely Planet Six Degrees', 'American Chopper', 'Some Assembly Required', 'Cool Stuff: How It Works', 'Epicurious', 'Salvage Hunters', 'Sci-Fi Saved My Life', 'Scrapheap Challenge', 'Monster House', 'Crimes That Shook the World', 'The Amazing Race', 'American Casino', 'After the Catch', 'When We Left Earth: The NASA Missions', 'Swamp Loggers', 'Last of the Czars', 'Auto Trader', 'Behind Bars', 'Obsession: Dark Desires', 'Wrecks To Riches', 'Treasure Quest', 'Best Evidence', 'Big!', 'Solving History with Olly Steeds', 'I Was Bitten', 'The Garage', 'Dual Survival', "I Shouldn't Be Alive", 'Surviving the Cut', 'Future Car', 'Get Out Alive', 'Iditarod: Toughest Race on Earth', 'South Beach Classics', 'American Guns', 'Man vs. Wild', 'Destroyed In Seconds', 'Black Sky: The Race for Space', 'American Hot Rod', 'Mars Rising', 'PitchMen', 'Alien Planet', 'Journeys to the Ends of the Earth', 'Expedition Borneo', 'Biker Build-Off', 'Moon Machines', 'Curiosity', 'Really Big Things', 'Desert Car Kings', 'Cops & Coyotes', "A Dog's Life", 'Chop Shop: London Garage', 'Cash Cab', 'Rogue Nature', 'Weaponology', 'The Colony', 'Natural History of an Alien', 'Penn & Teller Tell a Lie', 'American Treasures', 'Miracle Planet', 'Classic British Aircraft', 'Ultimate Car Build-Off', 'Build It Bigger', 'Worst Case Scenarios', "Egypt's Ten Greatest Discoveries", 'Doing DaVinci', 'F2: Forensic Factor', 'Wild Food', 'How the Universe Works', 'Worst-Case Scenario', 'Megascience', 'You Spoof Discovery', 'Bad Universe', 'Swords', 'The FBI Files', 'Fight Quest', 'Heartland Thunder', 'Wreckreation Nation', 'Firehouse USA: Boston', 'Ghost Lab', "It's Christopher Lowell", 'Taking on Tyson', 'The Future Is Wild', "Stephen Hawking's Grand Design", 'MythBusters', 'Dirty Jobs', "Ray Mears' Bushcraft", 'Motor City Motors', 'Dinosaur Revolution', 'Perfect Disaster'}
            Answers = 205, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 205, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 110 / 113: {
          [('Main', '==', 'm.0kc8y', ['film.film_festival_sponsor.festivals_sponsored', 'film.film_festival_sponsorship.festival'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:film.film_festival_sponsor.festivals_sponsored ?o1 . ?o1 fb:film.film_festival_sponsorship.festival ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:film.film_festival_sponsor.festivals_sponsored ?o1 . ?o1 fb:film.film_festival_sponsorship.festival ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Silverdocs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 111 / 113: {
          [('Main', '==', 'm.0kc8y', ['business.brand.owner_s', 'business.company_brand_relationship.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:business.brand.owner_s ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:business.brand.owner_s ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 1
            Final Answer: {'Discovery Communications'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 112 / 113: {
          [('Main', '==', 'm.0kc8y', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kc8y fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 2
            Final Answer: {'Frozen Planet', 'Black Sky: The Race for Space'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        106 / 113 coarse schemas kept with ans_size > 0.
      } [1.468s]
      Coarse level ended, resulting in 106 schemas.
    } [4.439s]
    Type level searching (total types = 10): {
      Current: 0 / 106
[{'book.periodical_subject'}]
[{'language.human_language'}]
[{'book.magazine_genre'}]
[{'book.magazine_issue'}]
[{'award.award_category'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'religion.religion'}]
[{'location.location'}]
[{'people.place_of_interment'}]
[{'law.invention'}]
[{'education.academic'}]
[{'base.kwebbase.kwconnection'}]
[{'base.eating.diets'}]
[{'influence.influence_node'}]
[{'symbols.namesake'}]
[{'book.book_edition'}]
[{'media_common.quotation'}]
[{'education.field_of_study'}]
[{'base.kwebbase.kwsentence'}]
[{'influence.influence_node'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'music.composition'}]
[{'book.written_work'}]
[{'fictional_universe.fictional_character'}]
[{'base.kwebbase.kwconnection'}]
[{'visual_art.artwork'}]
[{'base.rivalries.rivalry'}]
[{'base.argumentmaps.original_idea'}]
[{'food.diet'}]
[{'type.property'}]
[{'location.location'}]
[{'broadcast.tv_channel'}]
[{'user.zsi_editorial.editorial.list'}]
[{'media_common.netflix_title'}]
[{'tv.tv_program'}]
[{'book.written_work'}]
[{'organization.organization_founder'}]
[{'broadcast.content'}]
[{'computer.software'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'book.periodical_format_period'}, {'book.periodical_format'}]
[{'book.periodical_publication_date'}, {'type.datetime'}]
[{'book.periodical_publisher_period'}, {'book.periodical_publisher'}]
[{'book.periodical_frequency'}, {'type.int'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'book.periodical_frequency'}, {'measurement_unit.unit_of_frequency'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'book.periodical_format_period'}, {'book.periodical'}]
[{'book.periodical_publisher_period'}, {'book.periodical'}]
[{'book.periodical_publisher_period'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'organization.role'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet_owner'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'people.place_lived'}, {'location.location'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'business.sponsorship'}, {'business.sponsored_recipient'}]
[{'tv.tv_network_duration'}, {'type.datetime'}]
[{'film.film_festival_sponsorship'}, {'film.film_festival_sponsor'}]
[{'business.company_brand_relationship'}, {'type.datetime'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer'}]
[{'broadcast.tv_affiliation_duration'}, {'broadcast.tv_station'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'business.sponsorship'}, {'type.datetime'}]
[{'tv.tv_network_duration'}, {'tv.tv_network'}]
[{'business.company_brand_relationship'}, {'business.brand'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'broadcast.tv_affiliation_duration'}, {'tv.tv_network'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'award.award_honor'}, {'award.award_category'}]
      Current: 100 / 106
[{'business.sponsorship'}, {'business.sponsor'}]
[{'business.sponsorship'}, {'type.datetime'}]
[{'tv.tv_network_duration'}, {'tv.tv_program'}]
[{'film.film_festival_sponsorship'}, {'film.film_festival'}]
[{'business.company_brand_relationship'}, {'business.consumer_company'}]
[{'tv.tv_producer_term'}, {'tv.tv_program'}]
      10 typed schemas retrieved from 106 coarse schemas.
      Calculating F1 for 10 typed schemas: {
        Current: 0 / 10
        Checking schema 0 / 10: {
          [('Main', '==', 'm.03s9v', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 10: {
          [('Main', '==', 'm.03s9v', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 2 / 10: {
          [('Main', '==', 'm.03s9v', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 3 / 10: {
          [('Main', '==', 'm.0kc8y', ['tv.tv_network.areas_served']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:tv.tv_network.areas_served ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kc8y fb:tv.tv_network.areas_served ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kc8y'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 4 / 10: {
          [('Main', '==', 'm.02f8lj', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02f8lj fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02f8lj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 5 / 10: {
          [('Main', '==', 'm.03s9v', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 6 / 10: {
          [('Main', '==', 'm.03s9v', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 7 / 10: {
          [('Main', '==', 'm.03s9v', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 8 / 10: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 9 / 10: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:09] Q_Schema Request: {
            WebQ_1585|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        0 / 10 typed schemas kept with ans_size > 0.
      } [0.172s]
      Typed level ended, resulting in 106 schemas.
    } [0.178s]
    Time level searching (total times = 0): {
      Current: 0 / 106
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'law.invention.date_of_invention'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.book_edition.publication_date'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwsentence.from', 'base.kwebbase.kwsentence.until'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [{'base.rivalries.rivalry.start_of_rivalry', 'base.rivalries.rivalry.end_of_rivalry'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'broadcast.tv_channel.to', 'broadcast.tv_channel.from'}]
self.var_time_preds: [{'user.zsi_editorial.editorial.list.reviewed_timestamp'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'broadcast.content.production_start', 'broadcast.content.production_end'}]
self.var_time_preds: [{'computer.software.latest_release_date', 'computer.software.first_released'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'book.periodical_format_period.from', 'book.periodical_format_period.to'}, set()]
self.var_time_preds: [{'book.periodical_publication_date.date'}, set()]
self.var_time_preds: [{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
self.var_time_preds: [{'book.periodical_frequency.to', 'book.periodical_frequency.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'book.periodical_frequency.to', 'book.periodical_frequency.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'book.periodical_format_period.from', 'book.periodical_format_period.to'}, set()]
self.var_time_preds: [{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
self.var_time_preds: [{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
self.var_time_preds: [{'tv.tv_network_duration.to', 'tv.tv_network_duration.from'}, set()]
self.var_time_preds: [{'film.film_festival_sponsorship.from', 'film.film_festival_sponsorship.to'}, set()]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
self.var_time_preds: [{'broadcast.tv_affiliation_duration.to_date', 'broadcast.tv_affiliation_duration.from_date'}, {'broadcast.tv_station.founded'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
self.var_time_preds: [{'tv.tv_network_duration.to', 'tv.tv_network_duration.from'}, set()]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'broadcast.tv_affiliation_duration.to_date', 'broadcast.tv_affiliation_duration.from_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
      Current: 100 / 106
self.var_time_preds: [{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
self.var_time_preds: [{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
self.var_time_preds: [{'tv.tv_network_duration.to', 'tv.tv_network_duration.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'film.film_festival_sponsorship.from', 'film.film_festival_sponsorship.to'}, {'film.film_festival.date_founded'}]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
      0 timed schemas retrieved from 106 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 106 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 106
[set()]
[set()]
[set()]
[set()]
[{'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'law.invention.date_of_invention'}]
[set()]
[{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
[set()]
[set()]
[set()]
[{'book.book_edition.publication_date'}]
[{'media_common.quotation.date'}]
[set()]
[{'base.kwebbase.kwsentence.from', 'base.kwebbase.kwsentence.until'}]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[{'base.rivalries.rivalry.start_of_rivalry', 'base.rivalries.rivalry.end_of_rivalry'}]
[set()]
[set()]
[set()]
[set()]
[{'broadcast.tv_channel.to', 'broadcast.tv_channel.from'}]
[{'user.zsi_editorial.editorial.list.reviewed_timestamp'}]
[set()]
[{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[{'broadcast.content.production_start', 'broadcast.content.production_end'}]
[{'computer.software.latest_release_date', 'computer.software.first_released'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'book.periodical_format_period.from', 'book.periodical_format_period.to'}, set()]
[{'book.periodical_publication_date.date'}, set()]
[{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
[{'book.periodical_frequency.to', 'book.periodical_frequency.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'book.periodical_frequency.to', 'book.periodical_frequency.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'book.periodical_format_period.from', 'book.periodical_format_period.to'}, set()]
[{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
[{'book.periodical_publisher_period.to', 'book.periodical_publisher_period.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[set(), {'people.person.date_of_birth'}]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
[{'tv.tv_network_duration.to', 'tv.tv_network_duration.from'}, set()]
[{'film.film_festival_sponsorship.from', 'film.film_festival_sponsorship.to'}, set()]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
[{'broadcast.tv_affiliation_duration.to_date', 'broadcast.tv_affiliation_duration.from_date'}, {'broadcast.tv_station.founded'}]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
[{'tv.tv_network_duration.to', 'tv.tv_network_duration.from'}, set()]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[set(), set()]
[set(), set()]
[{'broadcast.tv_affiliation_duration.to_date', 'broadcast.tv_affiliation_duration.from_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
      Current: 100 / 106
[{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
[{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
[{'tv.tv_network_duration.to', 'tv.tv_network_duration.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'film.film_festival_sponsorship.from', 'film.film_festival_sponsorship.to'}, {'film.film_festival.date_founded'}]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
      0 ordinal schemas retrieved from 106 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 106 schemas.
    } [0.002s]
    [2020-12-03 14:18:09] buffer saved.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
    106 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1585_schema].
  } [20.561s]
  Entering Q 1586 / 5810 [b'who played daniel larusso?']: {
    Show 4 E + 10 T + 0 Tm + 0 Ord = 14 linkings: {
      #00 Entity: [2, 4) (daniel larusso) == m.03f1x61 (Dendemann) {'score': 69.84754, 'source': 1.0}
      #01 Entity: [3, 4) (larusso) == m.03dss9 (Rudy_LaRusso) {'score': 6.487003, 'source': 1.0}
      #02 Entity: [3, 4) (larusso) == m.03qhkz4 (Larusso) {'score': 3483.817659, 'source': 0.0}
      #03 Entity: [3, 4) (larusso) == m.0fmpmx (Vincent_Larusso) {'score': 391.919333, 'source': 1.0}
      #04 Type: [1, 2) (played) == sports.pro_sports_played (sports played) {'sim': 0.790985}
      #05 Type: [1, 2) (played) == theater.play (play) {'sim': 0.787711}
      #06 Type: [1, 2) (played) == games.playing_card_game_play_direction (playing card game play direction) {'sim': 0.728862}
      #07 Type: [1, 2) (played) == games.playing_card_game (playing card game) {'sim': 0.690014}
      #08 Type: [0, 3) (who played daniel) == cvg.game_voice_actor (video game actor) {'sim': 0.661063}
      #09 Type: [1, 2) (played) == cvg.musical_game (musical game) {'sim': 0.658212}
      #10 Type: [1, 2) (played) == cvg.musical_game_song (musical game song) {'sim': 0.645754}
      #11 Type: [0, 1) (who) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.64018}
      #12 Type: [1, 2) (played) == american_football.player_game_statistics (player game statistics) {'sim': 0.629467}
      #13 Type: [0, 2) (who played) == basketball.basketball_player_career_stats (basketball player career stats) {'sim': 0.625317}
    } [0.000s]
    14 link data save to file.
    Coarse level searching (total entities = 4): {
      [Len-1||F1/4] (2020-12-03 14:18:25) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03dss9 ?p1 ?o1 . }
        [2020-12-03 14:18:25] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03dss9 ?p1 ?o1 . }
          Query return lines = 18
        } [0.006s]
        Filt_Query_Ret = 10 / 18 ( 0.006s)
      } [0.006s]
      [Len-1||F2/4] (2020-12-03 14:18:25) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03f1x61 ?p1 ?o1 . }
        [2020-12-03 14:18:25] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03f1x61 ?p1 ?o1 . }
          Query return lines = 19
        } [0.018s]
        Filt_Query_Ret = 8 / 19 ( 0.018s)
      } [0.018s]
      [Len-1||F3/4] (2020-12-03 14:18:25) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03qhkz4 ?p1 ?o1 . }
        [2020-12-03 14:18:25] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03qhkz4 ?p1 ?o1 . }
          Query return lines = 15
        } [0.019s]
        Filt_Query_Ret = 9 / 15 ( 0.019s)
      } [0.019s]
      [Len-1||F4/4] (2020-12-03 14:18:25) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0fmpmx ?p1 ?o1 . }
        [2020-12-03 14:18:25] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0fmpmx ?p1 ?o1 . }
          Query return lines = 15
        } [0.011s]
        Filt_Query_Ret = 5 / 15 ( 0.011s)
      } [0.011s]
      [Len-2||F1/4] (2020-12-03 14:18:25) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03dss9 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:25] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03dss9 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 490
        } [0.056s]
        Filt_Query_Ret = 25 / 490 ( 0.058s)
      } [0.058s]
      [Len-2||F2/4] (2020-12-03 14:18:25) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03f1x61 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:25] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03f1x61 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 296
        } [0.042s]
        Filt_Query_Ret = 6 / 296 ( 0.043s)
      } [0.043s]
      [Len-2||F3/4] (2020-12-03 14:18:25) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03qhkz4 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:25] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03qhkz4 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 438
        } [0.040s]
        Filt_Query_Ret = 0 / 438 ( 0.042s)
      } [0.042s]
      [Len-2||F4/4] (2020-12-03 14:18:25) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fmpmx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:25] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fmpmx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 302
        } [0.068s]
        Filt_Query_Ret = 6 / 302 ( 0.069s)
      } [0.069s]
      69 coarse schemas retrieved from scratch.
      Calculating F1 for 69 coarse schemas: {
        Current: 0 / 69
        Checking schema 0 / 69: {
          [('Main', '==', 'm.03dss9', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03dss9 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 WHERE { fb:m.03dss9 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'1937'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 69: {
          [('Main', '==', 'm.03dss9', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 69: {
          [('Main', '==', 'm.03dss9', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'Judaism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 3 / 69: {
          [('Main', '==', 'm.03dss9', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'Los Angeles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 4 / 69: {
          [('Main', '==', 'm.03dss9', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03dss9 fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 WHERE { fb:m.03dss9 fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'100'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 5 / 69: {
          [('Main', '==', 'm.03dss9', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {"Parkinson's disease"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 6 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:basketball.basketball_player.position_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:basketball.basketball_player.position_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'Center'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 7 / 69: {
          [('Main', '==', 'm.03dss9', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 8 / 69: {
          [('Main', '==', 'm.03dss9', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03dss9 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'Brooklyn'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 9 / 69: {
          [('Main', '==', 'm.03dss9', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03dss9 fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 WHERE { fb:m.03dss9 fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'2004'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 69: {
          [('Main', '==', 'm.03f1x61', ['music.artist.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 2
            Final Answer: {'Hip hop music', 'German hip hop'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 11 / 69: {
          [('Main', '==', 'm.03f1x61', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03f1x61 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 WHERE { fb:m.03f1x61 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 1
            Final Answer: {'1974'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 12 / 69: {
          [('Main', '==', 'm.03f1x61', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 1
            Final Answer: {'Germany'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 13 / 69: {
          [('Main', '==', 'm.03f1x61', ['base.myspace.myspace_user.username'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:base.myspace.myspace_user.username ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:base.myspace.myspace_user.username ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 14 / 69: {
          [('Main', '==', 'm.03f1x61', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 1
            Final Answer: {'Abersowasvonlive'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 15 / 69: {
          [('Main', '==', 'm.03f1x61', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 57
            Final Answer: {'Wer A sagt muss auch B zahlen', 'Contest Registration Scratch', '3 1/2 Minuten', 'Was auch immer', 'Saldo Mortale', 'Check mal die Rhetorik ab', 'Endlich Nichtschwimmer', 'Sensationell', 'Fischmob Allstars: Susanne zur Freiheit', 'Kommt Zeit dreht Rad', 'soulda?wohlwahr!', 'Hörtnichauf', 'Lieblingsmensch', 'Gut und gerne', 'Sand the Deck Scratch', 'Lieblingsmensch (instrumental)', 'King Promo (feat. Dendemann)', 'Hörma!', 'Bombelicious', 'Competition Begins Scratch', 'Einer von Ihnen (feat. Dendemann & Nico Suave)', 'Volker Racho', 'Allstar Intro', 'Das Lied mit dem....', 'Das rote Pferd', 'DasIntroDilemma', 'T2wei (feat. Nico Suave & Dendemann)', 'Lotta Songs / Bad Rhymes', 'Schnapsidee (feat. Dendemann & Wasi)', 'DasIntroDilemma (instrumental)', 'Dendemänner Braucht Das Land', 'Session (feat. Dendemann, Illo77, Nico Suave)', 'Tut Mir Leid (feat. Dendemann)', 'LaLaLabernich', 'Das erste Mal', 'Paint the House Scratch', 'Siebenschläfer (feat. Dendemann)', "So sieht's aus", 'Final Fight Scratch', 'Volle Kontrolle', 'Weltretten 4-', 'Schnapsidee', 'Hörtnichtauf', 'Inhalation', 'Aloha Heja He', 'Gangsterbraut', 'DJ Training with Mr. Miyagi', 'Das verbotene Z-Wort (Dendemann)', '3D', 'Nesthocker', 'Sachmagehtsnoch', 'Metapher Than Leather', 'Reverse Flip Scratch', 'Es geht bergab', 'ErsoIchso', 'König von Deutschland', 'Dende 74 (feat. Gwen McCrae)'}
            Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 16 / 69: {
          [('Main', '==', 'm.03f1x61', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 17 / 69: {
          [('Main', '==', 'm.03f1x61', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03f1x61 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 1
            Final Answer: {'Menden (Sauerland)'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 18 / 69: {
          [('Main', '==', 'm.03qhkz4', ['music.artist.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03qhkz4'}
            Query return lines = 1
            Final Answer: {'Pop music'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 19 / 69: {
          [('Main', '==', 'm.03qhkz4', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03qhkz4 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 WHERE { fb:m.03qhkz4 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.03qhkz4'}
            Query return lines = 1
            Final Answer: {'1979'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 20 / 69: {
          [('Main', '==', 'm.03qhkz4', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03qhkz4'}
            Query return lines = 1
            Final Answer: {'France'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 21 / 69: {
          [('Main', '==', 'm.03qhkz4', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03qhkz4'}
            Query return lines = 8
            Final Answer: {"Tu m'oublieras", 'Simplement', 'Entre nous', 'Larusso', 'Je survivrai', 'Come Back to Me', 'Il suffira', "On ne s'aimera plus jamais"}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 22 / 69: {
          [('Main', '==', 'm.03qhkz4', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03qhkz4'}
            Query return lines = 7
            Final Answer: {'Come Back to Me (version radio)', 'Far Away', "Tu M'Oublieras", 'Come Back to Me', 'Il suffira', 'Last Christmas', "On Ne S'aimera Plus Jamais"}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 23 / 69: {
          [('Main', '==', 'm.03qhkz4', ['music.artist.origin'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:music.artist.origin ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:music.artist.origin ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03qhkz4'}
            Query return lines = 1
            Final Answer: {'Paris'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 24 / 69: {
          [('Main', '==', 'm.03qhkz4', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03qhkz4'}
            Query return lines = 1
            Final Answer: {'Singer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 25 / 69: {
          [('Main', '==', 'm.03qhkz4', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03qhkz4'}
            Query return lines = 1
            Final Answer: {'Female'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 26 / 69: {
          [('Main', '==', 'm.03qhkz4', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03qhkz4 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03qhkz4'}
            Query return lines = 1
            Final Answer: {'Paris'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 27 / 69: {
          [('Main', '==', 'm.0fmpmx', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0fmpmx fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 WHERE { fb:m.0fmpmx fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 1
            Final Answer: {'1978'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 28 / 69: {
          [('Main', '==', 'm.0fmpmx', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fmpmx fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fmpmx fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 29 / 69: {
          [('Main', '==', 'm.0fmpmx', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fmpmx fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fmpmx fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 1
            Final Answer: {'Actor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 30 / 69: {
          [('Main', '==', 'm.0fmpmx', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fmpmx fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fmpmx fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 31 / 69: {
          [('Main', '==', 'm.0fmpmx', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fmpmx fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fmpmx fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 1
            Final Answer: {'Livingston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 32 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'Rudy LaRusso'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 33 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fta'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fta ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fta ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 10
            Final Answer: {'393', '357', '448', '415', '397', '224', '409', '559', '445', '661'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 34 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.ftm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ftm ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ftm ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 10
            Final Answer: {'298', '321', '323', '350', '282', '522', '342', '156', '444', '265'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 35 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.ft_percentage'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ft_percentage ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ft_percentage ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 9
            Final Answer: {'0.787', '0.79', '0.773', '0.718', '0.763', '0.751', '0.742', '0.794', '0.696'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 36 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_player_fouls'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_player_fouls ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_player_fouls ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 7
            Final Answer: {'4.3', '3.5', '3.2', '3.4', '3.1', '3.3', '3.6'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 37 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.three_fga'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fga ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fga ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'0'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 38 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.games'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.games ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.games ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 7
            Final Answer: {'45', '75', '71', '79', '80', '77', '76'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 39 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_assists'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_assists ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_assists ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 8
            Final Answer: {'1.2', '2.5', '2.3', '2.2', '2.4', '2.6', '1.7', '2.1'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 40 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.three_fgm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fgm ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fgm ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'0'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 41 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.player_fouls'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player_fouls ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player_fouls ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 8
            Final Answer: {'149', '258', '222', '261', '280', '255', '337', '268'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 42 / 69: {
          [('Main', '==', 'm.03dss9', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'Rudy LaRusso'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 43 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.rebounds'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.rebounds ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.rebounds ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 10
            Final Answer: {'660', '351', '741', '781', '747', '800', '828', '624', '725', '679'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 44 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_rebounds'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_rebounds ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_rebounds ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 9
            Final Answer: {'8.3', '9.6', '10.4', '9.9', '10.1', '8.7', '7.8', '10', '9.4'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 45 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fga'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fga ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fga ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 10
            Final Answer: {'1349', '761', '913', '1108', '509', '897', '1389', '992', '776', '827'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 46 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.turnovers'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.turnovers ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.turnovers ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'0'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 47 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fg_percentage'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fg_percentage ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fg_percentage ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 10
            Final Answer: {'0.415', '0.433', '0.461', '0.419', '0.422', '0.434', '0.466', '0.389', '0.457', '0.41'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 48 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.season ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 10
            Final Answer: {'1966–67 NBA season', '1959–60 NBA season', '1963–64 NBA season', '1960–61 NBA season', '1964–65 NBA season', '1962–63 NBA season', '1968–69 NBA season', '1961–62 NBA season', '1965–66 NBA season', '1967–68 NBA season'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 49 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fgm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fgm ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fgm ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 10
            Final Answer: {'211', '602', '381', '321', '355', '416', '516', '337', '410', '553'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 50 / 69: {
          [('Main', '==', 'm.03dss9', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'Basketball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 51 / 69: {
          [('Main', '==', 'm.03dss9', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'Dartmouth College'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 52 / 69: {
          [('Main', '==', 'm.03dss9', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 1
            Final Answer: {'Rudy LaRusso'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 53 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 2
            Final Answer: {'San Francisco Warriors', 'Los Angeles Lakers'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 54 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.points'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.points ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.points ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 10
            Final Answer: {'1170', '1550', '578', '1726', '1155', '1083', '972', '924', '975', '1374'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 55 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.assists'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.assists ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.assists ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 10
            Final Answer: {'190', '198', '179', '78', '165', '187', '83', '135', '182', '159'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 56 / 69: {
          [('Main', '==', 'm.03dss9', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_points'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_points ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03dss9 fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_points ?o2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 9
            Final Answer: {'14.1', '17.2', '15.4', '21.8', '12.3', '14.6', '12.8', '20.7', '13.7'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 57 / 69: {
          [('Main', '==', 'm.03f1x61', ['music.group_member.membership', 'music.group_membership.group'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03f1x61 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03f1x61 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 1
            Final Answer: {'Eins Zwo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 58 / 69: {
          [('Main', '==', 'm.03f1x61', ['music.group_member.membership', 'music.group_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03f1x61 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03f1x61 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 1
            Final Answer: {'Dendemann'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 59 / 69: {
          [('Main', '==', 'm.03f1x61', ['music.group_member.membership', 'music.group_membership.end'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03f1x61 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.end ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 WHERE { fb:m.03f1x61 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.end ?o2 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 1
            Final Answer: {'2003'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 60 / 69: {
          [('Main', '==', 'm.03f1x61', ['music.artist.track_contributions', 'music.track_contribution.contributor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03f1x61 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03f1x61 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 1
            Final Answer: {'Dendemann'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 61 / 69: {
          [('Main', '==', 'm.03f1x61', ['music.artist.track_contributions', 'music.track_contribution.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03f1x61 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03f1x61 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 2
            Final Answer: {'guest', 'Vocals'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 62 / 69: {
          [('Main', '==', 'm.03f1x61', ['music.artist.track_contributions', 'music.track_contribution.track'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03f1x61 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03f1x61 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03f1x61'}
            Query return lines = 4
            Final Answer: {'T2wei (feat. Nico Suave & Dendemann)', 'Kurzschluss (feat. Dendemann)', 'Wer A sagt muss auch B zahlen', 'DD Im Haus'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 63 / 69: {
          [('Main', '==', 'm.0fmpmx', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 2
            Final Answer: {'Anthony Larusso'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 64 / 69: {
          [('Main', '==', 'm.0fmpmx', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 2
            Final Answer: {'The Mighty Ducks', 'D3: The Mighty Ducks'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 65 / 69: {
          [('Main', '==', 'm.0fmpmx', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 1
            Final Answer: {'Adam Banks'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 66 / 69: {
          [('Main', '==', 'm.0fmpmx', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 1
            Final Answer: {'Vincent Larusso'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 67 / 69: {
          [('Main', '==', 'm.0fmpmx', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 1
            Final Answer: {'Boston University'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 68 / 69: {
          [('Main', '==', 'm.0fmpmx', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 1
            Final Answer: {'Vincent Larusso'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        68 / 69 coarse schemas kept with ans_size > 0.
      } [0.822s]
      Coarse level ended, resulting in 68 schemas.
    } [1.089s]
    Type level searching (total types = 10): {
      Current: 0 / 68
[{'type.datetime'}]
[{'location.country'}]
[{'religion.religion'}]
[{'location.location'}]
[{'type.float'}]
[{'people.cause_of_death'}]
[{'basketball.basketball_position'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'music.genre'}]
[{'type.datetime'}]
[{'location.country'}]
[{'music.album'}]
[{'music.recording'}]
[{'people.gender'}]
[{'location.location'}]
[{'music.genre'}]
[{'type.datetime'}]
[{'location.country'}]
[{'music.album'}]
[{'music.recording'}]
[{'location.location'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'basketball.basketball_player_stats'}, {'basketball.basketball_player'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'sports.pro_sports_played'}, {'sports.pro_athlete'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'sports.sports_league_season'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'sports.pro_sports_played'}, {'sports.sport'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'basketball.basketball_player_stats'}, {'basketball.basketball_team'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'music.group_membership'}, {'music.musical_group'}]
[{'music.group_membership'}, {'music.group_member'}]
[{'music.group_membership'}, {'type.datetime'}]
[{'music.track_contribution'}, {'music.artist'}]
[{'music.track_contribution'}, {'music.performance_role'}]
[{'music.track_contribution'}, {'music.recording'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'film.performance'}, {'film.film'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
      3 typed schemas retrieved from 68 coarse schemas.
      Calculating F1 for 3 typed schemas: {
        Current: 0 / 3
        Checking schema 0 / 3: {
          [('Main', '==', 'm.03dss9', ['people.person.education', 'education.education.student']), ('Type', '==', 'cvg.game_voice_actor', ['type.object.type'])]
          var_types: [{'education.education'}, {'cvg.game_voice_actor', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03dss9 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03dss9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 1 / 3: {
          [('Main', '==', 'm.0fmpmx', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'cvg.game_voice_actor', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'cvg.game_voice_actor', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 2 / 3: {
          [('Main', '==', 'm.0fmpmx', ['people.person.education', 'education.education.student']), ('Type', '==', 'cvg.game_voice_actor', ['type.object.type'])]
          var_types: [{'education.education'}, {'cvg.game_voice_actor', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_1586|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fmpmx fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0fmpmx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        0 / 3 typed schemas kept with ans_size > 0.
      } [0.023s]
      Typed level ended, resulting in 68 schemas.
    } [0.027s]
    Time level searching (total times = 0): {
      Current: 0 / 68
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [set(), {'music.artist.active_start', 'music.artist.active_end'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'music.recording.date'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
      0 timed schemas retrieved from 68 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 68 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 68
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'music.album.release_date'}]
[{'music.recording.date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'music.album.release_date'}]
[{'music.recording.date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[set(), {'music.artist.active_start', 'music.artist.active_end'}]
[set(), set()]
[set(), {'music.recording.date'}]
[set(), {'people.person.date_of_birth'}]
[set(), {'film.film.initial_release_date'}]
[set(), set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
      0 ordinal schemas retrieved from 68 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 68 schemas.
    } [0.002s]
    [2020-12-03 14:18:26] buffer saved.
    68 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1586_schema].
  } [7.074s]
  Entering Q 1587 / 5810 [b'what happened to umaga wwe?']: {
    Show 3 E + 10 T + 0 Tm + 0 Ord = 13 linkings: {
      #00 Entity: [3, 4) (umaga) == m.037kg7 (Tana_Umaga) {'score': 9.079167, 'source': 0.0}
      #01 Entity: [3, 4) (umaga) == m.03s95m (Umaga_(wrestler)) {'score': 15183.212471, 'source': 0.0}
      #02 Entity: [4, 5) (wwe) == m.0gy1_ (WWE) {'score': 18107.454802, 'source': 0.0}
      #03 Type: [0, 3) (what happened to) == media_common.lost_work (lost work) {'sim': 0.710317}
      #04 Type: [0, 3) (what happened to) == location.us_state (us state) {'sim': 0.686084}
      #05 Type: [0, 3) (what happened to) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.685261}
      #06 Type: [1, 3) (happened to) == people.place_lived (place lived) {'sim': 0.676616}
      #07 Type: [0, 3) (what happened to) == people.cause_of_death (cause of death) {'sim': 0.67616}
      #08 Type: [0, 3) (what happened to) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.674214}
      #09 Type: [0, 3) (what happened to) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.665424}
      #10 Type: [0, 3) (what happened to) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.663067}
      #11 Type: [0, 3) (what happened to) == chemistry.phase_of_matter (phase of matter) {'sim': 0.659113}
      #12 Type: [0, 3) (what happened to) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.656749}
    } [0.000s]
    13 link data save to file.
    Coarse level searching (total entities = 3): {
      [Len-1||F1/3] (2020-12-03 14:18:32) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.037kg7 ?p1 ?o1 . }
        [2020-12-03 14:18:32] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.037kg7 ?p1 ?o1 . }
          Query return lines = 17
        } [0.009s]
        Filt_Query_Ret = 9 / 17 ( 0.009s)
        [Len-1||F1/3||3/3-1] (2020-12-03 14:18:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.037kg7 ?p1 ?o1 . ?o1 ?p2 fb:m.0gy1_ . }
          [2020-12-03 14:18:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.037kg7 ?p1 ?o1 . ?o1 ?p2 fb:m.0gy1_ . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
      } [0.016s]
      [Len-1||F2/3] (2020-12-03 14:18:32) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03s95m ?p1 ?o1 . }
        [2020-12-03 14:18:32] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03s95m ?p1 ?o1 . }
          Query return lines = 29
        } [0.008s]
        Filt_Query_Ret = 14 / 29 ( 0.008s)
        [Len-1||F2/3||3/3-1] (2020-12-03 14:18:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s95m ?p1 ?o1 . ?o1 ?p2 fb:m.0gy1_ . }
          [2020-12-03 14:18:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s95m ?p1 ?o1 . ?o1 ?p2 fb:m.0gy1_ . }
            Query return lines = 1
          } [0.011s]
          Filt_Query_Ret = 0 / 1 ( 0.011s)
        } [0.011s]
      } [0.019s]
      [Len-1||F3/3] (2020-12-03 14:18:32) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0gy1_ ?p1 ?o1 . }
        [2020-12-03 14:18:32] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0gy1_ ?p1 ?o1 . }
          Query return lines = 26
        } [0.008s]
        Filt_Query_Ret = 6 / 26 ( 0.008s)
        [Len-1||F3/3||1/3-1] (2020-12-03 14:18:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 fb:m.037kg7 . }
          [2020-12-03 14:18:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 fb:m.037kg7 . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-1||F3/3||2/3-1] (2020-12-03 14:18:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 fb:m.03s95m . }
          [2020-12-03 14:18:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 fb:m.03s95m . }
            Query return lines = 1
          } [0.015s]
          Filt_Query_Ret = 0 / 1 ( 0.015s)
        } [0.016s]
      } [0.035s]
      [Len-2||F1/3] (2020-12-03 14:18:32) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.037kg7 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:32] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.037kg7 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 261
        } [0.026s]
        Filt_Query_Ret = 3 / 261 ( 0.027s)
        [Len-2||F1/3||3/3-1] (2020-12-03 14:18:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.037kg7 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0gy1_ . }
          [2020-12-03 14:18:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.037kg7 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0gy1_ . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F1/3||3/3-2] (2020-12-03 14:18:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.037kg7 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0gy1_ . }
          [2020-12-03 14:18:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.037kg7 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0gy1_ . }
            Query return lines = 0
          } [0.284s]
          Filt_Query_Ret = 0 / 0 ( 0.284s)
        } [0.284s]
      } [0.318s]
      [Len-2||F2/3] (2020-12-03 14:18:32) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s95m ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:32] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s95m ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 598
        } [0.056s]
        Filt_Query_Ret = 18 / 598 ( 0.059s)
        [Len-2||F2/3||3/3-1] (2020-12-03 14:18:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s95m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0gy1_ . }
          [2020-12-03 14:18:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s95m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0gy1_ . }
            Query return lines = 3
          } [0.014s]
          Filt_Query_Ret = 2 / 3 ( 0.014s)
        } [0.014s]
        [Len-2||F2/3||3/3-2] (2020-12-03 14:18:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s95m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0gy1_ . }
          [2020-12-03 14:18:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s95m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0gy1_ . }
            Query return lines = 6
          } [0.217s]
          Filt_Query_Ret = 0 / 6 ( 0.217s)
        } [0.217s]
      } [0.290s]
      [Len-2||F3/3] (2020-12-03 14:18:33) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:33] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 232
        } [0.052s]
        Filt_Query_Ret = 41 / 232 ( 0.053s)
        [Len-2||F3/3||1/3-1] (2020-12-03 14:18:33) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.037kg7 . }
          [2020-12-03 14:18:33] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.037kg7 . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
        [Len-2||F3/3||1/3-2] (2020-12-03 14:18:33) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.037kg7 . }
          [2020-12-03 14:18:33] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.037kg7 . }
            Query return lines = 0
          } [0.194s]
          Filt_Query_Ret = 0 / 0 ( 0.194s)
        } [0.194s]
        [Len-2||F3/3||2/3-1] (2020-12-03 14:18:33) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03s95m . }
          [2020-12-03 14:18:33] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03s95m . }
            Query return lines = 3
          } [0.015s]
          Filt_Query_Ret = 2 / 3 ( 0.015s)
        } [0.015s]
        [Len-2||F3/3||2/3-2] (2020-12-03 14:18:33) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03s95m . }
          [2020-12-03 14:18:33] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0gy1_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03s95m . }
            Query return lines = 1
          } [0.483s]
          Filt_Query_Ret = 0 / 1 ( 0.484s)
        } [0.484s]
      } [0.762s]
      95 coarse schemas retrieved from scratch.
      Calculating F1 for 95 coarse schemas: {
        Current: 0 / 95
        Checking schema 0 / 95: {
          [('Main', '==', 'm.037kg7', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.037kg7 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 WHERE { fb:m.037kg7 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'1973'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 95: {
          [('Main', '==', 'm.037kg7', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'New Zealand'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 95: {
          [('Main', '==', 'm.037kg7', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.037kg7 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 WHERE { fb:m.037kg7 fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'1.88'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 95: {
          [('Main', '==', 'm.037kg7', ['base.rugby.rugby_player.type_of_rugby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:base.rugby.rugby_player.type_of_rugby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:base.rugby.rugby_player.type_of_rugby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'Rugby union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 4 / 95: {
          [('Main', '==', 'm.037kg7', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.037kg7 fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 WHERE { fb:m.037kg7 fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'101'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 5 / 95: {
          [('Main', '==', 'm.037kg7', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'Coach'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 6 / 95: {
          [('Main', '==', 'm.037kg7', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 7 / 95: {
          [('Main', '==', 'm.037kg7', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'Lower Hutt'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 8 / 95: {
          [('Main', '==', 'm.037kg7', ['base.rugby.rugby_player.position'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:base.rugby.rugby_player.position ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:base.rugby.rugby_player.position ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'Centre'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 9 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03s95m fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 WHERE { fb:m.03s95m fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'1973'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 10 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 11 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 3
            Final Answer: {'Samoans', 'Samoan American', 'Pacific Islands American'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 12 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Vera Fatu'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 13 / 95: {
          [('Main', '==', 'm.03s95m', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Houston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 14 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03s95m fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 WHERE { fb:m.03s95m fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'158.8'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 15 / 95: {
          [('Main', '==', 'm.03s95m', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Myocardial infarction'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.005s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.005s]
        Checking schema 16 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 2
            Final Answer: {'Wrestler', 'Actor'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 17 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 18 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'San Francisco'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 19 / 95: {
          [('Main', '==', 'm.03s95m', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03s95m fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 WHERE { fb:m.03s95m fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 20 / 95: {
          [('Main', '==', 'm.03s95m', ['base.wrestling.solo_wrestler_or_team.managers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.managers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.managers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Shane McMahon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 21 / 95: {
          [('Main', '==', 'm.03s95m', ['base.wrestling.solo_wrestler_or_team.members'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.members ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:33] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.members ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 22 / 95: {
          [('Main', '==', 'm.03s95m', ['base.wrestling.professional_wrestler.member_of_team'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:base.wrestling.professional_wrestler.member_of_team ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:base.wrestling.professional_wrestler.member_of_team ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 2
            Final Answer: {'3-Minute Warning'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 23 / 95: {
          [('Main', '==', 'm.0gy1_', ['book.publishing_company.books_published'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0gy1_ fb:book.publishing_company.books_published ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0gy1_ fb:book.publishing_company.books_published ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 9
            Final Answer: {'The Rise & Fall of ECW: Extreme Championship Wrestling (WWE)', 'Lita: A Less Traveled R.O.A.D.--The Reality of Amy Dumas (WWE)', 'WWE Confidential (WWE)', 'WWE Legends - Superstar Billy Graham: Tangled Ropes', 'Lita: A Less Traveled R.O.A.D.--The Reality of Amy Dumas (WWE) (WWE)', 'Have More Money Now : A Common Sense Approach to Financial Management', 'The Hardcore Diaries', 'Andre the Giant'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.040s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.040s]
        Checking schema 24 / 95: {
          [('Main', '==', 'm.0gy1_', ['sports.sports_league.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0gy1_ fb:sports.sports_league.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0gy1_ fb:sports.sports_league.sport ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'Wrestling'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 25 / 95: {
          [('Main', '==', 'm.0gy1_', ['tv.tv_program_creator.programs_created'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0gy1_ fb:tv.tv_program_creator.programs_created ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0gy1_ fb:tv.tv_program_creator.programs_created ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 7
            Final Answer: {'WWF Shotgun Saturday Night', 'The Dirt Sheet', 'WWE Experience', 'WWE Tough Enough', 'WWE Free for All', 'WWE Jakked/Metal', 'WWF Championship Wrestling'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 26 / 95: {
          [('Main', '==', 'm.0gy1_', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0gy1_ fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0gy1_ fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 4
            Final Answer: {'Hulkkamania', 'Rowdy Roddy', 'Wrestling Calendar 1998', 'The Rock Says'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 27 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0gy1_ fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 WHERE { fb:m.0gy1_ fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'1952'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 28 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.founders'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0gy1_ fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0gy1_ fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 3
            Final Answer: {'World Championship Wrestling', 'Vince McMahon', 'Linda McMahon'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 29 / 95: {
          [('Main', '==', 'm.037kg7', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.037kg7 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.037kg7 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 2
            Final Answer: {'Mike Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 30 / 95: {
          [('Main', '==', 'm.037kg7', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.037kg7 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.037kg7 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'Wainuiomata High School'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 31 / 95: {
          [('Main', '==', 'm.037kg7', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.037kg7 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.037kg7 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 1
            Final Answer: {'Tana Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 32 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 33 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 3
            Final Answer: {'Sam Fatu', 'Solofa Fatu'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 34 / 95: {
          [('Main', '==', 'm.03s95m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Archive Footage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 35 / 95: {
          [('Main', '==', 'm.03s95m', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Contestant'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 36 / 95: {
          [('Main', '==', 'm.03s95m', ['base.wrestling.solo_wrestler_or_team.titles_held', 'base.wrestling.championship_title_reign.held_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.titles_held ?o1 . ?o1 fb:base.wrestling.championship_title_reign.held_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.titles_held ?o1 . ?o1 fb:base.wrestling.championship_title_reign.held_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.048s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.048s]
        Checking schema 37 / 95: {
          [('Main', '==', 'm.03s95m', ['base.wrestling.solo_wrestler_or_team.titles_held', 'base.wrestling.championship_title_reign.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.titles_held ?o1 . ?o1 fb:base.wrestling.championship_title_reign.to ?o2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.titles_held ?o1 . ?o1 fb:base.wrestling.championship_title_reign.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 38 / 95: {
          [('Main', '==', 'm.03s95m', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 7
            Final Answer: {'WWE: Vengeance 2007', 'The New and Improved DX', 'The John Cena Experience', 'WWE: No Mercy 2007', 'WWE: Royal Rumble 2007', 'WWE: Survivor Series 2007', "WWE New Year's Revolution"}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 39 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'San Francisco'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 40 / 95: {
          [('Main', '==', 'm.03s95m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'ECW: One Night Stand 2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 41 / 95: {
          [('Main', '==', 'm.03s95m', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 42 / 95: {
          [('Main', '==', 'm.03s95m', ['base.wrestling.solo_wrestler_or_team.titles_held', 'base.wrestling.championship_title_reign.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.titles_held ?o1 . ?o1 fb:base.wrestling.championship_title_reign.from ?o2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.titles_held ?o1 . ?o1 fb:base.wrestling.championship_title_reign.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 43 / 95: {
          [('Main', '==', 'm.03s95m', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 44 / 95: {
          [('Main', '==', 'm.03s95m', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 45 / 95: {
          [('Main', '==', 'm.03s95m', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Archive Footage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 46 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 47 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.042s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.042s]
        Checking schema 48 / 95: {
          [('Main', '==', 'm.03s95m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 49 / 95: {
          [('Main', '==', 'm.03s95m', ['base.wrestling.solo_wrestler_or_team.titles_held', 'base.wrestling.championship_title_reign.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.titles_held ?o1 . ?o1 fb:base.wrestling.championship_title_reign.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:base.wrestling.solo_wrestler_or_team.titles_held ?o1 . ?o1 fb:base.wrestling.championship_title_reign.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'WWE Intercontinental Championship'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 50 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.employment_history', 'business.employment_tenure.person']), ('Entity', '==', 'm.0gy1_', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.company fb:m.0gy1_ . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.company fb:m.0gy1_ . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m', 'm.0gy1_'}
            Query return lines = 1
            Final Answer: {'Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 51 / 95: {
          [('Main', '==', 'm.03s95m', ['people.person.employment_history', 'business.employment_tenure.company']), ('Entity', '==', 'm.0gy1_', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o1 fb:business.employment_tenure.company fb:m.0gy1_ . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o1 fb:business.employment_tenure.company fb:m.0gy1_ . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m', 'm.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 52 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'Stamford'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 53 / 95: {
          [('Main', '==', 'm.0gy1_', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 45
            Final Answer: {'2008', '1995', '1998', '2004', '1996', '1997', '2007', '2009', '1979', '1991', '1984', '2002', '2003', '2006', '1992', '1987', '1989', '2000', '1993', '2005', '1999', '2001', '1975'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 54 / 95: {
          [('Main', '==', 'm.0gy1_', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 22
            Final Answer: {'President, WWE Studios', 'Chief Financial Officer', 'Associate Producer', 'Executive Vice President, Talent Relations', 'Executive Vice President, Television Production', 'Executive Vice President and General Counsel', 'General Manager, ECW', 'Vice President, Talent Relations', 'Executive Vice President, Global Media', 'Senior Vice President, Talent Relations', 'Chief Executive Officer', 'Manager', 'Producer, Domestic Television', 'Executive Vice President, Consumer Products Division', 'Supervising Producer, Domestic Television', 'Executive Vice President', 'President', 'Ring announcer', 'Senior Vice President, Consumer Products', 'Personal Assistant, General Manager of ECW', 'Vice President,  Business and Legal Affairs', 'Chief Operating Officer'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 55 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.board_members', 'organization.organization_board_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 4
            Final Answer: {'2008', '1980', '1999', '1993'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 56 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.child', 'organization.organization_relationship.child'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 3
            Final Answer: {'World Championship Wrestling', 'WWE Studios', 'Stampede Wrestling'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 57 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.newsevents.news_reporting_organisation.news_reports', 'base.newsevents.news_report.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.date ?o2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 58 / 95: {
          [('Main', '==', 'm.0gy1_', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 59 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.leadership', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'Chief Executive Officer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 60 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_language'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_language ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_language ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 2
            Final Answer: {'Spanish Language', 'English Language'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 61 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.hearing_impaired'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.hearing_impaired ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.hearing_impaired ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 62 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.headquarters', 'location.mailing_address.state_province_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'Connecticut'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 63 / 95: {
          [('Main', '==', 'm.0gy1_', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 18
            Final Answer: {'2008', '1991', '2000', '1988', '1993', '2002', '2003', '2004', '2006', '2005', '1999', '2009', '2007', '1994', '1987'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 64 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.board_members', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 65 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.board_members', 'organization.organization_board_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 66 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.companies_acquired', 'business.acquisition.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.date ?o2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'2001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 67 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.child', 'organization.organization_relationship.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.from ?o2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'1984'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 68 / 95: {
          [('Main', '==', 'm.0gy1_', ['business.consumer_company.brands', 'business.company_brand_relationship.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'WWE'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 69 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 70 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 71 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.newsevents.news_reporting_organisation.news_reports', 'base.newsevents.news_report.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'Backlash - 11'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 72 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.leadership', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 73 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 74 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.toll_free'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.toll_free ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.toll_free ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 75 / 95: {
          [('Main', '==', 'm.0gy1_', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 127
            Final Answer: {'Jack Swagger', 'Brian Kendrick', 'Chris Masters', 'Jared F. Bartie', 'Jamie Noble', 'Charlie Haas', 'Josh Mathews', 'Melina Perez', 'Kelly Kelly', 'Santino Marella', 'John Laurinaitis', 'Wendi Richter', 'Zack Ryder', 'Kevin Dunn', 'Thea Vidale', 'Paul Burchill', 'Eddie Colón', 'Ted DiBiase, Jr.', 'Tyson Kidd', 'Billy Gunn', 'Oscar Gutierrez', 'Layla El', 'Stephanie McMahon', 'Test', 'David Hart Smith', 'Vince McMahon', 'Shelton Benjamin', 'Cathy Dingman', 'Mickie James', 'Justin Roberts', 'Lilian Garcia', 'Linda McMahon', 'Howard Finkel', 'Dennis Knight', 'Michael Cole', 'André the Giant', 'Chavo Guerrero, Jr.', 'Katarina Waters', 'The Undertaker', 'Dave Finlay', 'Triple H', 'The Miz', 'George Barrios', 'Brie Bella', 'Hornswoggle', 'JTG', '""Dr. Death"" Steve Williams', 'Luna Vachon', 'Roucka', 'Freddie Prinze, Jr.', 'John Cena', 'Big Show', 'Natalya', 'Ken Anderson', 'Todd Grisham', 'Lena Yada', 'Vladimir Kozlov', 'Tony Atlas', 'Evan Bourne', 'Jeff Hardy', 'Mark Henry', 'Ray Gordy', 'Edge', 'Candice Michelle', 'Drew Hankinson', 'Shoichi Funaki', 'Matt Striker', 'Dave Batista', 'Eve Torres', 'Gail Kim', 'Shad Gaspard', 'Jerry Lawler', 'Jim Ross', 'Randy Orton', 'The Great Khali', 'Shawn Michaels', 'Nicole Garcia', 'Maria Kanellis', 'Ranjin Singh', 'Eddie Guerrero', 'Steve Bradley', 'Kane', 'Ezekiel Jackson', 'Curt Hawkins', 'Beth Phoenix', 'Dolph Ziggler', 'Kurt Angle', 'Mike Knox', 'William Regal', 'Jon Heidenreich', 'Jimmy Reiher, Jr.', 'Marty Garner', 'Christian', 'Ashley Massaro', 'Chris Jericho', 'Chris Benoit', 'Donna Goldsmith', 'Jim Duggan', 'Matt Hardy', 'Tony Chimel', 'Vickie Guerrero', 'Steven Lewington', 'James Yun', 'Uliuli Fifita', 'Kevin Fertig', 'Ron Killings', 'Theodore Long', 'Paul Bearer', 'Tommy Dreamer', 'John Morrison', 'Alicia Fox', 'Gregory Helms', 'Umaga', 'Shane McMahon', 'Taryn Terrell', 'Michelle McCool', 'Michael Lake', 'Richard Young', 'Cody Rhodes', 'Kofi Kingston', 'CM Punk', 'Maryse Ouellet', 'Dustin Rhodes', 'Carly Colón', 'Bruce Prichard', 'Jillian Hall', 'Montel Vontavious Porter'}
            Answers = 127, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 127, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 76 / 95: {
          [('Main', '==', 'm.0gy1_', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 77 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.board_members', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 6
            Final Answer: {'Frank A Riddick III', 'David Kenin', 'Vince McMahon', 'Kevin Dunn', 'Donna Goldsmith', 'Linda McMahon'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 78 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.board_members', 'organization.organization_board_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 79 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.companies_acquired', 'business.acquisition.company_acquired'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.company_acquired ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.company_acquired ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Championship Wrestling'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 80 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.companies_acquired', 'business.acquisition.acquiring_company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.acquiring_company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.acquiring_company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 81 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.child', 'organization.organization_relationship.parent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 82 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.child', 'organization.organization_relationship.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.to ?o2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 WHERE { fb:m.0gy1_ fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'1985'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 83 / 95: {
          [('Main', '==', 'm.0gy1_', ['business.consumer_company.brands', 'business.company_brand_relationship.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 84 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.newsevents.news_reporting_organisation.news_reports', 'base.newsevents.news_report.news_reporting_organisation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.news_reporting_organisation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.news_reporting_organisation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 85 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.newsevents.news_reporting_organisation.news_reports', 'base.newsevents.news_report.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.newsevents.news_reporting_organisation.news_reports ?o1 . ?o1 fb:base.newsevents.news_report.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 86 / 95: {
          [('Main', '==', 'm.0gy1_', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:34] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {"WWE Saturday Night's Main Event"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 87 / 95: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.leadership', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'Vince McMahon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 88 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.caller_category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.caller_category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.caller_category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'Consumer Service'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 89 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.contact_category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.contact_category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.contact_category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'Customer service'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 90 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 3
            Final Answer: {'Canada', 'United States of America', 'Earth'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 91 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.productplacement.product_placed_brand.placed_in', 'base.productplacement.product_placement.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.productplacement.product_placed_brand.placed_in ?o1 . ?o1 fb:base.productplacement.product_placement.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.productplacement.product_placed_brand.placed_in ?o1 . ?o1 fb:base.productplacement.product_placement.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 92 / 95: {
          [('Main', '==', 'm.0gy1_', ['base.productplacement.product_placed_brand.placed_in', 'base.productplacement.product_placement.media'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.productplacement.product_placed_brand.placed_in ?o1 . ?o1 fb:base.productplacement.product_placement.media ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.productplacement.product_placed_brand.placed_in ?o1 . ?o1 fb:base.productplacement.product_placement.media ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'WWF WrestleMania'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 93 / 95: {
          [('Main', '==', 'm.0gy1_', ['business.employer.employees', 'business.employment_tenure.person']), ('Entity', '==', 'm.03s95m', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.person fb:m.03s95m . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.person fb:m.03s95m . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m', 'm.0gy1_'}
            Query return lines = 1
            Final Answer: {'Umaga'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 94 / 95: {
          [('Main', '==', 'm.0gy1_', ['business.employer.employees', 'business.employment_tenure.company']), ('Entity', '==', 'm.03s95m', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o1 fb:business.employment_tenure.person fb:m.03s95m . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o1 fb:business.employment_tenure.person fb:m.03s95m . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m', 'm.0gy1_'}
            Query return lines = 1
            Final Answer: {'World Wrestling Entertainment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        90 / 95 coarse schemas kept with ans_size > 0.
      } [1.333s]
      Coarse level ended, resulting in 90 schemas.
    } [2.774s]
    Type level searching (total types = 10): {
      Current: 0 / 90
[{'type.datetime'}]
[{'location.country'}]
[{'type.float'}]
[{'base.rugby.type_of_rugby'}]
[{'type.float'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'base.rugby.rugby_position'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'location.location'}]
[{'type.float'}]
[{'people.cause_of_death'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'base.wrestling.professional_wrestling_manager'}]
[{'base.wrestling.professional_wrestler'}]
[{'base.wrestling.solo_wrestler_or_team'}]
[{'book.book_edition'}]
[{'sports.sport'}]
[{'tv.tv_program'}]
[{'book.written_work'}]
[{'type.datetime'}]
[{'organization.organization_founder'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'base.wrestling.championship_title_reign'}, {'base.wrestling.solo_wrestler_or_team'}]
[{'base.wrestling.championship_title_reign'}, {'type.datetime'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'base.wrestling.championship_title_reign'}, {'type.datetime'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'base.wrestling.championship_title_reign'}, {'base.wrestling.championship_title'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'location.mailing_address'}, {'location.location'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'base.newsevents.news_report'}, {'type.datetime'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer'}]
[{'organization.leadership'}, {'organization.role'}]
[{'base.schemastaging.phone_sandbox'}, {'language.human_language'}]
[{'location.mailing_address'}, {'location.administrative_division'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'business.acquisition'}, {'type.datetime'}]
[{'organization.organization_relationship'}, {'type.datetime'}]
[{'business.company_brand_relationship'}, {'business.brand'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'base.newsevents.news_report'}, {'base.newsevents.news_reported_event'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'organization.organization_relationship'}, {'type.datetime'}]
[{'business.company_brand_relationship'}, {'business.consumer_company'}]
[{'base.newsevents.news_report'}, {'base.newsevents.news_reporting_organisation'}]
[{'tv.tv_producer_term'}, {'tv.tv_program'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'base.schemastaging.phone_sandbox'}, {'base.schemastaging.contactor_category'}]
[{'base.schemastaging.phone_sandbox'}, {'organization.contact_category'}]
[{'base.schemastaging.phone_sandbox'}, {'location.location'}]
[{'base.productplacement.product_placement'}, {'base.productplacement.product_placed_brand'}]
[{'base.productplacement.product_placement'}, {'base.productplacement.product_placing_media'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
      8 typed schemas retrieved from 90 coarse schemas.
      Calculating F1 for 8 typed schemas: {
        Current: 0 / 8
        Checking schema 0 / 8: {
          [('Main', '==', 'm.037kg7', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.037kg7 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.037kg7'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 8: {
          [('Main', '==', 'm.03s95m', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 8: {
          [('Main', '==', 'm.03s95m', ['people.deceased_person.cause_of_death']), ('Type', '==', 'people.cause_of_death', ['type.object.type'])]
          var_types: [{'people.cause_of_death'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.type fb:people.cause_of_death . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.type fb:people.cause_of_death . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 1
            Final Answer: {'Myocardial infarction'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.005s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.005s]
        Checking schema 3 / 8: {
          [('Main', '==', 'm.03s95m', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s95m fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 4 / 8: {
          [('Main', '==', 'm.03s95m', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s95m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s95m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 5 / 8: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 6 / 8: {
          [('Main', '==', 'm.0gy1_', ['organization.organization.headquarters', 'location.mailing_address.state_province_region']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.administrative_division', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 1
            Final Answer: {'Connecticut'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 7 / 8: {
          [('Main', '==', 'm.0gy1_', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_location']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'base.schemastaging.phone_sandbox'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:35] Q_Schema Request: {
            WebQ_1587|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0gy1_ fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0gy1_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        2 / 8 typed schemas kept with ans_size > 0.
      } [0.117s]
      Typed level ended, resulting in 92 schemas.
    } [0.122s]
    Time level searching (total times = 0): {
      Current: 0 / 92
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.book_edition.publication_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [{'base.wrestling.championship_title_reign.to', 'base.wrestling.championship_title_reign.from'}, set()]
self.var_time_preds: [{'base.wrestling.championship_title_reign.to', 'base.wrestling.championship_title_reign.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [{'base.wrestling.championship_title_reign.to', 'base.wrestling.championship_title_reign.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.wrestling.championship_title_reign.to', 'base.wrestling.championship_title_reign.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'base.newsevents.news_report.date'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'business.acquisition.date'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, set()]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.newsevents.news_report.date'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, set()]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [{'base.newsevents.news_report.date'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 92 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 92 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 92
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.book_edition.publication_date'}]
[set()]
[{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set(), {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[set(), set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[{'base.wrestling.championship_title_reign.to', 'base.wrestling.championship_title_reign.from'}, set()]
[{'base.wrestling.championship_title_reign.to', 'base.wrestling.championship_title_reign.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[{'base.wrestling.championship_title_reign.to', 'base.wrestling.championship_title_reign.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[set(), set()]
[{'base.wrestling.championship_title_reign.to', 'base.wrestling.championship_title_reign.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'base.newsevents.news_report.date'}, set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'business.acquisition.date'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, set()]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[set(), set()]
[set(), set()]
[{'base.newsevents.news_report.date'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, set()]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[{'base.newsevents.news_report.date'}, set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[set()]
[set(), set()]
      0 ordinal schemas retrieved from 92 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 92 schemas.
    } [0.002s]
    [2020-12-03 14:18:35] buffer saved.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 """Dr. Death"" Steve Williams"@en ?type2 WHERE { fb:m.0gy1_ fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name """Dr. Death"" Steve Williams"@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
    92 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1587_schema].
  } [10.684s]
  Entering Q 1588 / 5810 [b'when is the next geneva motor show?']: {
    Show 8 E + 10 T + 0 Tm + 0 Ord = 18 linkings: {
      #00 Entity: [3, 4) (next) == m.035qrr (next plc) {'score': 15.784195, 'source': 2.0}
      #01 Entity: [3, 4) (next) == m.05fxn (next) {'score': 16061.525973, 'source': 2.0}
      #02 Entity: [4, 5) (geneva) == m.03902 (Geneva) {'score': 5800.116836, 'source': 1.0}
      #03 Entity: [4, 7) (geneva motor show) == m.054t3t (geneva motor show) {'score': 14.457886, 'source': 2.0}
      #04 Entity: [5, 7) (motor show) == m.03y_qy (Auto_show) {'score': 1.193429, 'source': 1.0}
      #05 Entity: [5, 7) (motor show) == m.0407ch (Paris_Motor_Show) {'score': 16.037701, 'source': 1.0}
      #06 Entity: [5, 7) (motor show) == m.05p2fb (Frankfurt_Motor_Show) {'score': 2.151563, 'source': 1.0}
      #07 Entity: [5, 7) (motor show) == m.0c5r00 (British_International_Motor_Show) {'score': 7.71368, 'source': 1.0}
      #08 Type: [5, 6) (motor) == boats.motor (motor) {'sim': 1.0}
      #09 Type: [0, 3) (when is the) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.777442}
      #10 Type: [0, 3) (when is the) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.754859}
      #11 Type: [0, 3) (when is the) == measurement_unit.time_unit (unit of time) {'sim': 0.751891}
      #12 Type: [0, 3) (when is the) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.748407}
      #13 Type: [2, 4) (the next) == time.day_of_week (day of week) {'sim': 0.737259}
      #14 Type: [0, 3) (when is the) == film.person_or_entity_appearing_in_film (person or entity appearing in film) {'sim': 0.730439}
      #15 Type: [1, 4) (is the next) == time.day_of_year (day of year) {'sim': 0.728391}
      #16 Type: [0, 3) (when is the) == chemistry.phase_of_matter (phase of matter) {'sim': 0.726877}
      #17 Type: [0, 3) (when is the) == people.cause_of_death (cause of death) {'sim': 0.725651}
    } [0.000s]
    18 link data save to file.
    Coarse level searching (total entities = 8): {
      [Len-1||F1/8] (2020-12-03 14:18:43) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.035qrr ?p1 ?o1 . }
        [2020-12-03 14:18:43] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.035qrr ?p1 ?o1 . }
          Query return lines = 18
        } [0.007s]
        Filt_Query_Ret = 6 / 18 ( 0.008s)
        [Len-1||F1/8||2/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.03902 . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.03902 . }
            Query return lines = 0
          } [0.042s]
          Filt_Query_Ret = 0 / 0 ( 0.042s)
        } [0.042s]
        [Len-1||F1/8||3/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.03y_qy . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.03y_qy . }
            Query return lines = 0
          } [0.014s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-1||F1/8||4/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.0407ch . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.0407ch . }
            Query return lines = 0
          } [0.022s]
          Filt_Query_Ret = 0 / 0 ( 0.022s)
        } [0.022s]
        [Len-1||F1/8||5/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.054t3t . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.054t3t . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-1||F1/8||7/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.05p2fb . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.05p2fb . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-1||F1/8||8/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.0c5r00 . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 fb:m.0c5r00 . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
      } [0.128s]
      [Len-1||F2/8] (2020-12-03 14:18:43) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03902 ?p1 ?o1 . }
        [2020-12-03 14:18:43] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03902 ?p1 ?o1 . }
          Query return lines = 37
        } [0.010s]
        Filt_Query_Ret = 21 / 37 ( 0.010s)
        [Len-1||F2/8||1/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.035qrr . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.035qrr . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-1||F2/8||3/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.03y_qy . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.03y_qy . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-1||F2/8||4/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.0407ch . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.0407ch . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-1||F2/8||6/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.05fxn . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.05fxn . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-1||F2/8||7/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.05p2fb . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.05p2fb . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-1||F2/8||8/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.0c5r00 . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 fb:m.0c5r00 . }
            Query return lines = 0
          } [0.020s]
          Filt_Query_Ret = 0 / 0 ( 0.020s)
        } [0.020s]
      } [0.088s]
      [Len-1||F3/8] (2020-12-03 14:18:43) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03y_qy ?p1 ?o1 . }
        [2020-12-03 14:18:43] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03y_qy ?p1 ?o1 . }
          Query return lines = 7
        } [0.019s]
        Filt_Query_Ret = 0 / 7 ( 0.019s)
      } [0.019s]
      [Len-1||F4/8] (2020-12-03 14:18:43) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0407ch ?p1 ?o1 . }
        [2020-12-03 14:18:43] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0407ch ?p1 ?o1 . }
          Query return lines = 6
        } [0.014s]
        Filt_Query_Ret = 0 / 6 ( 0.014s)
      } [0.014s]
      [Len-1||F5/8] (2020-12-03 14:18:43) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.054t3t ?p1 ?o1 . }
        [2020-12-03 14:18:43] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.054t3t ?p1 ?o1 . }
          Query return lines = 10
        } [0.030s]
        Filt_Query_Ret = 3 / 10 ( 0.030s)
        [Len-1||F5/8||1/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.054t3t ?p1 ?o1 . ?o1 ?p2 fb:m.035qrr . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.054t3t ?p1 ?o1 . ?o1 ?p2 fb:m.035qrr . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.018s)
        } [0.018s]
        [Len-1||F5/8||6/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.054t3t ?p1 ?o1 . ?o1 ?p2 fb:m.05fxn . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.054t3t ?p1 ?o1 . ?o1 ?p2 fb:m.05fxn . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.022s)
        } [0.022s]
      } [0.070s]
      [Len-1||F6/8] (2020-12-03 14:18:43) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.05fxn ?p1 ?o1 . }
        [2020-12-03 14:18:43] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.05fxn ?p1 ?o1 . }
          Query return lines = 18
        } [0.017s]
        Filt_Query_Ret = 8 / 18 ( 0.017s)
        [Len-1||F6/8||2/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.03902 . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.03902 . }
            Query return lines = 0
          } [0.069s]
          Filt_Query_Ret = 0 / 0 ( 0.069s)
        } [0.069s]
        [Len-1||F6/8||3/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.03y_qy . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.03y_qy . }
            Query return lines = 0
          } [0.025s]
          Filt_Query_Ret = 0 / 0 ( 0.025s)
        } [0.025s]
        [Len-1||F6/8||4/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.0407ch . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.0407ch . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-1||F6/8||5/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.054t3t . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.054t3t . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-1||F6/8||7/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.05p2fb . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.05p2fb . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-1||F6/8||8/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.0c5r00 . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 fb:m.0c5r00 . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
      } [0.158s]
      [Len-1||F7/8] (2020-12-03 14:18:43) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.05p2fb ?p1 ?o1 . }
        [2020-12-03 14:18:43] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.05p2fb ?p1 ?o1 . }
          Query return lines = 8
        } [0.009s]
        Filt_Query_Ret = 1 / 8 ( 0.009s)
        [Len-1||F7/8||1/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05p2fb ?p1 ?o1 . ?o1 ?p2 fb:m.035qrr . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05p2fb ?p1 ?o1 . ?o1 ?p2 fb:m.035qrr . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
        [Len-1||F7/8||2/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05p2fb ?p1 ?o1 . ?o1 ?p2 fb:m.03902 . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05p2fb ?p1 ?o1 . ?o1 ?p2 fb:m.03902 . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-1||F7/8||6/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05p2fb ?p1 ?o1 . ?o1 ?p2 fb:m.05fxn . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05p2fb ?p1 ?o1 . ?o1 ?p2 fb:m.05fxn . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
      } [0.030s]
      [Len-1||F8/8] (2020-12-03 14:18:43) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0c5r00 ?p1 ?o1 . }
        [2020-12-03 14:18:43] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0c5r00 ?p1 ?o1 . }
          Query return lines = 5
        } [0.009s]
        Filt_Query_Ret = 0 / 5 ( 0.009s)
      } [0.009s]
      [Len-2||F1/8] (2020-12-03 14:18:43) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:43] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 141
        } [0.017s]
        Filt_Query_Ret = 15 / 141 ( 0.017s)
        [Len-2||F1/8||2/8-1] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03902 . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03902 . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-2||F1/8||2/8-2] (2020-12-03 14:18:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03902 . }
          [2020-12-03 14:18:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03902 . }
            Query return lines = 0
          } [2.021s]
          Filt_Query_Ret = 0 / 0 ( 2.021s)
        } [2.021s]
        [Len-2||F1/8||3/8-1] (2020-12-03 14:18:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03y_qy . }
          [2020-12-03 14:18:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03y_qy . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.005s]
        [Len-2||F1/8||3/8-2] (2020-12-03 14:18:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03y_qy . }
          [2020-12-03 14:18:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03y_qy . }
            Query return lines = 0
          } [0.052s]
          Filt_Query_Ret = 0 / 0 ( 0.052s)
        } [0.052s]
        [Len-2||F1/8||4/8-1] (2020-12-03 14:18:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0407ch . }
          [2020-12-03 14:18:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0407ch . }
            Query return lines = 0
          } [0.022s]
          Filt_Query_Ret = 0 / 0 ( 0.022s)
        } [0.022s]
        [Len-2||F1/8||4/8-2] (2020-12-03 14:18:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0407ch . }
          [2020-12-03 14:18:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0407ch . }
            Query return lines = 0
          } [0.059s]
          Filt_Query_Ret = 0 / 0 ( 0.059s)
        } [0.059s]
        [Len-2||F1/8||5/8-1] (2020-12-03 14:18:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.054t3t . }
          [2020-12-03 14:18:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.054t3t . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F1/8||5/8-2] (2020-12-03 14:18:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.054t3t . }
          [2020-12-03 14:18:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.054t3t . }
            Query return lines = 0
          } [0.114s]
          Filt_Query_Ret = 0 / 0 ( 0.114s)
        } [0.114s]
        [Len-2||F1/8||7/8-1] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.05p2fb . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.05p2fb . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.005s]
        [Len-2||F1/8||7/8-2] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.05p2fb . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.05p2fb . }
            Query return lines = 0
          } [0.066s]
          Filt_Query_Ret = 0 / 0 ( 0.066s)
        } [0.066s]
        [Len-2||F1/8||8/8-1] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0c5r00 . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0c5r00 . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.005s]
        [Len-2||F1/8||8/8-2] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0c5r00 . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.035qrr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0c5r00 . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
      } [2.399s]
      [Len-2||F2/8] (2020-12-03 14:18:46) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:46] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 723
        } [0.090s]
        Filt_Query_Ret = 23 / 723 ( 0.093s)
        [Len-2||F2/8||1/8-1] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.035qrr . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.035qrr . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F2/8||1/8-2] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.035qrr . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.035qrr . }
            Query return lines = 0
          } [0.079s]
          Filt_Query_Ret = 0 / 0 ( 0.079s)
        } [0.079s]
        [Len-2||F2/8||3/8-1] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03y_qy . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03y_qy . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
        [Len-2||F2/8||3/8-2] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03y_qy . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03y_qy . }
            Query return lines = 0
          } [0.058s]
          Filt_Query_Ret = 0 / 0 ( 0.059s)
        } [0.059s]
        [Len-2||F2/8||4/8-1] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0407ch . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0407ch . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
        [Len-2||F2/8||4/8-2] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0407ch . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0407ch . }
            Query return lines = 0
          } [0.058s]
          Filt_Query_Ret = 0 / 0 ( 0.058s)
        } [0.058s]
        [Len-2||F2/8||6/8-1] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.05fxn . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.05fxn . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-2||F2/8||6/8-2] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.05fxn . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.05fxn . }
            Query return lines = 0
          } [0.147s]
          Filt_Query_Ret = 0 / 0 ( 0.147s)
        } [0.147s]
        [Len-2||F2/8||7/8-1] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.05p2fb . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.05p2fb . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F2/8||7/8-2] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.05p2fb . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.05p2fb . }
            Query return lines = 0
          } [0.055s]
          Filt_Query_Ret = 0 / 0 ( 0.055s)
        } [0.055s]
        [Len-2||F2/8||8/8-1] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0c5r00 . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0c5r00 . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-2||F2/8||8/8-2] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0c5r00 . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03902 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0c5r00 . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
      } [0.578s]
      [Len-2||F3/8] (2020-12-03 14:18:46) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03y_qy ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:46] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03y_qy ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 49
        } [0.023s]
        Filt_Query_Ret = 0 / 49 ( 0.023s)
      } [0.023s]
      [Len-2||F4/8] (2020-12-03 14:18:46) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0407ch ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:46] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0407ch ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 44
        } [0.007s]
        Filt_Query_Ret = 0 / 44 ( 0.007s)
      } [0.007s]
      [Len-2||F5/8] (2020-12-03 14:18:46) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.054t3t ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:46] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.054t3t ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 104
        } [0.022s]
        Filt_Query_Ret = 0 / 104 ( 0.023s)
      } [0.023s]
      [Len-2||F6/8] (2020-12-03 14:18:46) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:46] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 257
        } [0.023s]
        Filt_Query_Ret = 9 / 257 ( 0.024s)
        [Len-2||F6/8||2/8-1] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03902 . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03902 . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-2||F6/8||2/8-2] (2020-12-03 14:18:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03902 . }
          [2020-12-03 14:18:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03902 . }
            Query return lines = 0
          } [0.989s]
          Filt_Query_Ret = 0 / 0 ( 0.989s)
        } [0.989s]
        [Len-2||F6/8||3/8-1] (2020-12-03 14:18:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03y_qy . }
          [2020-12-03 14:18:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03y_qy . }
            Query return lines = 0
          } [0.018s]
          Filt_Query_Ret = 0 / 0 ( 0.018s)
        } [0.018s]
        [Len-2||F6/8||3/8-2] (2020-12-03 14:18:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03y_qy . }
          [2020-12-03 14:18:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03y_qy . }
            Query return lines = 0
          } [0.077s]
          Filt_Query_Ret = 0 / 0 ( 0.077s)
        } [0.077s]
        [Len-2||F6/8||4/8-1] (2020-12-03 14:18:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0407ch . }
          [2020-12-03 14:18:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0407ch . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-2||F6/8||4/8-2] (2020-12-03 14:18:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0407ch . }
          [2020-12-03 14:18:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0407ch . }
            Query return lines = 0
          } [0.063s]
          Filt_Query_Ret = 0 / 0 ( 0.063s)
        } [0.063s]
        [Len-2||F6/8||5/8-1] (2020-12-03 14:18:48) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.054t3t . }
          [2020-12-03 14:18:48] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.054t3t . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-2||F6/8||5/8-2] (2020-12-03 14:18:48) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.054t3t . }
          [2020-12-03 14:18:48] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.054t3t . }
            Query return lines = 0
          } [0.097s]
          Filt_Query_Ret = 0 / 0 ( 0.097s)
        } [0.097s]
        [Len-2||F6/8||7/8-1] (2020-12-03 14:18:48) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.05p2fb . }
          [2020-12-03 14:18:48] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.05p2fb . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-2||F6/8||7/8-2] (2020-12-03 14:18:48) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.05p2fb . }
          [2020-12-03 14:18:48] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.05p2fb . }
            Query return lines = 0
          } [0.071s]
          Filt_Query_Ret = 0 / 0 ( 0.071s)
        } [0.071s]
        [Len-2||F6/8||8/8-1] (2020-12-03 14:18:48) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0c5r00 . }
          [2020-12-03 14:18:48] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0c5r00 . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F6/8||8/8-2] (2020-12-03 14:18:48) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0c5r00 . }
          [2020-12-03 14:18:48] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.05fxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0c5r00 . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
      } [1.399s]
      [Len-2||F7/8] (2020-12-03 14:18:48) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05p2fb ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:48] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05p2fb ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 52
        } [0.006s]
        Filt_Query_Ret = 0 / 52 ( 0.007s)
      } [0.007s]
      [Len-2||F8/8] (2020-12-03 14:18:48) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0c5r00 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:48] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0c5r00 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 34
        } [0.019s]
        Filt_Query_Ret = 0 / 34 ( 0.019s)
      } [0.019s]
      86 coarse schemas retrieved from scratch.
      Calculating F1 for 86 coarse schemas: {
        Current: 0 / 86
        Checking schema 0 / 86: {
          [('Main', '==', 'm.035qrr', ['business.issuer.issue'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035qrr fb:business.issuer.issue ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035qrr fb:business.issuer.issue ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'NEXT PLC Common Stock'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 1 / 86: {
          [('Main', '==', 'm.035qrr', ['internet.website_owner.websites_owned'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035qrr fb:internet.website_owner.websites_owned ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035qrr fb:internet.website_owner.websites_owned ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Next plc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 2 / 86: {
          [('Main', '==', 'm.035qrr', ['organization.organization.locations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035qrr fb:organization.organization.locations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035qrr fb:organization.organization.locations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 2
            Final Answer: {'Next, White Rose Centre', 'Next, Yueda 889'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 3 / 86: {
          [('Main', '==', 'm.035qrr', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.035qrr fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 WHERE { fb:m.035qrr fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'1982'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 4 / 86: {
          [('Main', '==', 'm.035qrr', ['organization.organization.founders'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035qrr fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035qrr fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Joseph Hepworth'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 5 / 86: {
          [('Main', '==', 'm.035qrr', ['business.business_operation.industry'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035qrr fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.035qrr fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Clothing'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 6 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.tourist_attractions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 10
            Final Answer: {'International Red Cross and Red Crescent Museum', 'Ariana Museum', 'Geneva Motor Show', 'Victoria Hall', 'Palace of Nations', 'International Museum of the Reformation', "Musée d'Art moderne et contemporain", "Musee d'Histoire Naturelle, Geneva", "Jet d'Eau", 'St. Pierre Cathedral'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 7 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.local_transportation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:travel.travel_destination.local_transportation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:travel.travel_destination.local_transportation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 2
            Final Answer: {'Compagnie Générale de Navigation sur le lac Léman', 'Geneva Public Transport'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 8 / 86: {
          [('Main', '==', 'm.03902', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 9 / 86: {
          [('Main', '==', 'm.03902', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 10 / 86: {
          [('Main', '==', 'm.03902', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 2
            Final Answer: {'Swiss commune', 'City/Town/Village'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 11 / 86: {
          [('Main', '==', 'm.03902', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 400
            Final Answer: {'Victor Fatio', 'Sonja Kinski', 'Paul Henri Mallet', 'Igor Mijatović', 'Franz Lefort', 'David Feuerwerker', 'Sophie Ormond', 'Sílvia Bandeira', 'Pierre Jeanneret', 'Marie Lambert', 'Jean-Pierre Cot', 'Pierre-Victor Galland', 'Jean Leclerc', 'Sandrine Salerno', 'Mike Castro de Maria', 'Vahe Godel', 'David González', 'Florence Haring', 'Pierre-Georges Jeanniot', 'Genséric Kusunga', 'Lucienne Bloch', 'Ian Hickson', 'David Epiney', 'Philippe Senderos', 'Binet-Valmer', 'Kojo Annan', 'Ofer Bavly', 'Delacorta', 'Halima Ouardiri', 'Philippe Rahmy', 'Marc Rosset', "Archduke Christoph Henri Alexander Maria Marcus d'Aviano of Austria", 'João Filipe Poceiro', 'C. Douglas Dillon', 'Maurice Fatio', 'Antoine André', 'Geneviève Calame', 'Jean Rousset', 'Méric Casaubon', 'Marina, Princess of Naples', 'Auguste Baud-Bovy', 'Armen Godel', 'Henri Copponex', 'Marc-Auguste Pictet', 'Lucia Sofia Ponti', 'Nicolas Wadimoff', 'Théodore Maunoir', 'Jean Senebier', 'Philippe Cramer', 'Charles Bonnet', 'Isabelle Eberhardt', 'Enrique Pichon-Rivière', 'Carlos Tello Macías', 'Jean-Louis Gampert', 'Princess Luisa of Savoy', 'Kate Burton', 'Ben Chin', 'Bernard Stamm', 'John James Chalon', 'Sylviane Deferne', 'Sarah Lahbati', 'Jacques-Laurent Agasse', 'Solomon Caesar Malan', 'Guillaume Girod', 'Jean-Étienne Liotard', 'Hector Hodler', 'Rebecca Mary Roosevelt', 'Stephanie Morgenstern', 'Leonardo Fortunato Ponti', 'Jean-Jacques Challet-Venel', 'Princess Marie of Battenberg', 'Sacha Pitoëff', 'François Diday', 'Miranda Campa', 'Charles Pictet de Rochemont', 'Adolphe Appia', 'Anne-Marie Sandler', 'Philippe Cravero', 'Léa Fazer', 'Aimé Argand', 'Max Thurian', 'Jean-Luc Bideau', 'Deborah Doniach', 'Julián Estéban', 'Ariel A. Roth', 'Annick Mahnert', 'Sébastien Roth', 'Heinrich Menu von Minutoli', 'Louis I, Duke of Savoy', 'Louis Schwizgebel-Wang', 'Daniel Holt', 'Henri Christiné', 'Tariq Ramadan', 'Lucien Trepper', 'Dano Halsall', 'Pierre Prévost', 'Adrien Lachenal', 'Natacha Koutchoumov', 'Jean-André Deluc', 'Edward L. Berthoud', 'Jeanne Hersch', 'Denys Chamay', 'Michael Krausz', 'Ted Morgan', 'Dominique Reymond', 'Jacques-Louis Soret', 'Fernand Grosjean', 'Adolphe Pictet', 'Alexander von Senger', 'Stefan Kollmuss', 'Louis Segond', 'Edmond Privat', 'Jean Lasserre', 'Daniel Bonade', 'Olivier Brand', 'Nicolas Maulini', 'Laurent Alvarez', 'Pierre Jaccoud', 'Ernest Bloch', 'Stéphane Bohli', 'Jean Ayme', 'Fabrice Giger', 'Harry Albright', 'Mark Muller', 'Ella Maillart', 'Claude Jaeger', 'Blanche Honegger Moyse', 'Théodore de Mayerne', 'Paul-Émile Victor', 'Nathalie Griffin', 'Dylan Gissi', 'Olivier Perez', 'John Armleder', 'Augustus Wollaston Franks', 'Jean Petitot', 'Eric Rapo', 'Michel Dovaz', 'Didier Ruef', 'Michel Tabachnik', 'Alain Borner', 'Michel Simon', 'Eugène Empeyta', 'Michael Jarrell', 'Robert Coote', 'Émile Taddéoli', 'Sanche De Gramont', 'Emmanuel Pahud', 'Amé Pictet', 'Bernard Weber', 'Vincent Gillioz', 'François Berthet', 'Thierry Moutinho', 'Antipope Clement VII', 'Charles Journet', 'Jean Charles Galissard de Marignac', 'Paul Tournier', 'Abraham Trembley', 'Jeff Agoos', 'Rodolphe Töpffer', 'James Pradier', 'Thierry van Werveke', 'Robert Pinget', 'Marie Huber', 'Mark Mills', 'Clotilde Joano', 'Zahra Aga Khan', 'Frank Martin', 'Ferdinand de Saussure', 'Jacques Charles François Sturm', 'Georges-Louis Le Sage', 'Henry Dunant', 'Denis Duboule', 'Ernest Ferny', 'Rahim Aga Khan', 'Gilles Privat', 'Reto Ziegler', 'Jacques-Barthélemy Micheli du Crest', 'Auguste Arthur de la Rive', 'Alexander Marcet', 'Alfred Newton', 'John Albaret', 'Jean-Philippe Maitre', 'Christian Lüscher', 'Jean-Louis Calandrini', 'R. Norris Williams', 'Réjane Desvignes', 'André Hurst', 'François-Xavier Bagnoud', 'Eugène Penard', 'Sylvie Fleury', 'Gérald Genta', 'Marc Camoletti', 'Dominique Wavre', 'Ville Miettinen', 'Tatiana Santo Domingo', 'Francis Turretin', 'Philip Arditti', 'Jacob Vernes', 'Jean Louis Delolme', 'Roger Duvoisin', 'Anne-Marie Walters', 'Jean Mohr', 'Alice Bailly', 'Pierre Tirard', 'Augustin Pyramus de Candolle', 'Samuel Labarthe', 'Eva Evdokimova', 'Esther Elizabeth Velkiers', 'Thomas Jouannet', 'Jean Vanier', 'Julien Painot', 'Kwaku Nyamekye', 'Mickaël Buffaz', 'Alice Reichen', 'Taha Carım', 'Jean-Pierre Saint-Ours', 'Bernard Corboz', 'Diana Álvares Pereira de Melo, 11th Duchess of Cadaval', 'Patrick Müller', 'Archduchess Gabriella Maria Pilar Yolande Joséphine Charlotte of Austria', 'Alexandre Liess', "Simon Antoine Jean L'Huilier", 'Friedrich Spanheim the Younger', 'Édouard Naville', 'Patricia Plattner', 'Ivan Niclass', 'Valentin Rotelli', 'Roberto Risso', 'Jean Huber Voltaire', 'Yves Miéville', 'Louis Jurine', 'Katerina Graham', 'Jakob Fuglsang', 'Princess Vittoria of Savoy', 'Jacques Necker', 'Claude Goretta', 'Bernard Haller', 'Louis Schweitzer', 'Michel Soutter', 'Jean Pierre Étienne Vaucher', 'Serge Demierre', 'Giulio Regondi', 'Aga Khan IV', 'Quentin Mosimann', 'Ben Hibon', 'César Malan', 'Alfred Edward Chalon', 'Johann Vogel', 'Georges Oltramare', 'Abdul Carrupt', 'Théodore Flournoy', 'Julien Israelian', 'Jean-Daniel Colladon', 'Julie Ordon', 'Raoul Pictet', 'Viktor Vitkovich', 'Victor Cherbuliez', 'Paul Martin', 'Laurent Moutinot', 'Elena Fabri', 'Alain Menu', 'Lionel Rogg', 'Luis Molina-Pantin', 'Jean-Jacques Burlamaqui', 'Fabrizio Zambrella', 'Daniel Humair', 'Gregoire Maret', 'Edoardo Mortara', 'Fabrizio Dörig', 'Charles Ricketts', 'Samuel Perone', 'Romuald Grégoire Hausser', 'Adolphe Ferrière', 'Bruno Fontes da Mota', 'Carmen bin Ladin', 'Sigismond Jaccoud', 'Georges Trombert', 'Olivier Keller', 'Jean-Jacques Rousseau', 'Romain Grosjean', 'Ivan Sadik', 'Georg Lotheissen', 'Margaret Joyce Niven', 'Gabriel Cramer', 'Blandine Liszt', 'Stéphane Riethauser', 'Alexia Walther', 'Jean-Louis de Lolme', 'Alexandre Geijo', 'Rémy Pagani', 'Isaac Casaubon', 'Émile Argand', 'Jean Trembley', "Raniero Vanni d'Archirafi", 'Kevin Gissi', 'Pierre Billon', 'Frederik Peeters', 'Emile Chambon', 'François Simon', 'Renée Colliard', 'Jean Victor de Constant Rebecque', 'Antoine Court de Gébelin', 'Edouard Castres', 'Guy Montavon', 'Elise Chabbey', 'Xavier Ruiz', 'Tatiana Fabergé', 'Gustave Moynier', 'Henri-Frédéric Amiel', 'Karim Ojjeh', 'Raphael Bonacchi', 'Christiane Brunner', 'Richard Tarnas', 'Theodore Gardelle', 'Fred Casella', 'Carlo Brandt', 'Daniel Jolliet', 'James Thorpe', 'Henri Louis Frédéric de Saussure', 'Andrei Volkonsky', 'Augustine Prévost', 'Fernando Corena', 'Roger Courtois', 'Étienne Clavière', 'Michel Frutschi', 'Jean-Robert Argand', 'Marc Birkigt', 'Alain Tanner', 'Louis Mouchet', 'Carol Bove', 'Jean-Marie Gindraux', 'Jean Starobinski', 'Jean-Francois Coindet', 'Emanuele Filiberto, Prince of Venice and Piedmont', 'Natasha Tsakos', 'Christopher Mfuyi', 'Charles Beer', 'Lord John Hay', 'Carlo Ponti', 'Maurice Reymond de Broutelles', 'Ted Jessup', 'Jean Pictet', 'Alizée Gaillard', 'Antoine Achard', 'François Huber', 'François Gaussen', 'Jean Charles Léonard de Sismondi', 'Jean-Pierre La Placa', 'Christine Brooke-Rose', 'Charles Bally', 'Christoph Behling', 'Jean Hoerni', 'Noémie Silberer', 'Sigismond Thalberg', 'Albert Skira', 'Michel Wintsch', 'Marie Colinet', 'Moina Mathers', 'Pierre Étienne Louis Dumont', 'Doze', 'Philippe Monnier', 'Barthélemy Menn', 'Edoardo Ponti', 'Michel Pont', 'Giovanni Diodati', 'Olivier Zuchuat', 'Jean-Louis Roy', 'Emilie Benes Brzezinski', 'Henri Lasserre', 'Élie Ducommun', 'Chester G. Atkins', 'Ludovic Paratte', 'Nicolas-Théodore de Saussure', 'René Thury', 'Emmanuelle Gagliardi', 'Pierre Edmond Boissier', 'Benjamin Isaac', 'Nelly Borgeaud', 'Édouard Claparède', 'Eugeniusz Bodo', 'Melia Kreiling', 'Antoine-Jacques Roustan', 'Claude Andrey', 'François-Élie Vincent', "Clint N'Dumba-Capela", 'Albert Gallatin', 'Joseph Jules Dejerine', 'Pierre Eugene du Simitiere', 'Jean-Louis Prévost', 'Germain Henri Hess', 'Massimo Pauletto', 'Jean-Denis Délétraz', 'Michel Decastel', 'Dominique Hischier', 'Michael Schade', 'Georges Atlas', 'Trumbull Stickney', 'Nicolas Wadinoff', 'Jacques-Antoine Arlaud'}
            Answers = 399, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 399, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 12 / 86: {
          [('Main', '==', 'm.03902', ['people.place_of_interment.interred_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:people.place_of_interment.interred_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:people.place_of_interment.interred_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Ludwig Quidde'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 13 / 86: {
          [('Main', '==', 'm.03902', ['base.biblioness.bibs_location.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Switzerland'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 14 / 86: {
          [('Main', '==', 'm.03902', ['base.uncommon.topic.exceptions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:base.uncommon.topic.exceptions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:base.uncommon.topic.exceptions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Geneva should be contained in some Scottish district, German rural district, Beninese sub-prefectures, Afghan district, East Timorese subdistrict, Belizean constituency, Bangladeshi district, New Zealand district, Seychellois district, Burmese district, Parish of the Isle of Man, Lebanese county, Ghanaian metropolitan district, Thai district, South Korean county, District of the Philippines, Nigerian local government area, Congolese zone, Cape Verdian parish, Papua New Guinean district, Jordanian sub-district, District of Saint Helena, Omani district, Israeli subdistrict, Lithuanian district municipality, Canton of Luxembourg, County of Croatia, Dominican parish, Spanish comarca, Libyan district, District of the Bahamas, Cambodian district, District of the French Southern Territories, District of São Tomé and Príncipe, Paraguayan district, District of Mauritius, Bruneian mukim, Commune of the Faroe Islands, Swiss district, Ghanaian district, Austrian political district, South African district, District of Nauru, German urban district, Slovak district, Polish county, Brazilian municipality, Northern Irish district, Albanian bashkia, Central African sub-prefecture, Hungarian urban county, Canadian county, District of Sierra Leone, Congolese district, Belarusian district, Romanian county, Subdistrict of Botswana, Ethiopian zone, Tanzanian district, County of South Sudan, Belgian arrondissement, Irish county, Rwandan district, District of Hong Kong, Indian subdivision, District of Anguilla, Moldovan district, Surinamese ressort, Syrian district, Cueillete of Jersey, Liberian district, District of Serbia, Somalian district, Kenyan district, Ghanaian ordinary district, Nepalese district, District of Laos, Iranian county, Cayman Islands district, Vingtaine of Jersey, Quarter of Saint Lucia, Angolan council, Gambian district, Singapore district, Guinean subprefecture, Malaysian district, Taiwanese district, Panamanian district, District of Kyrgyzstan, Albanian komuna, Czech district, Indonesian subdistrict, Sudanese district, District of Mozambique, Samoan district, Argentinian department, District of Malawi, Local council of Malta, Ecuadorean canton, Costa Rican canton, or Ghanaian municipal district within Canton of Geneva.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 15 / 86: {
          [('Main', '==', 'm.03902', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 16
            Final Answer: {'International University in Geneva', 'Geneva School of Diplomacy and International Relations', 'Cimetière des Rois', 'Uptown Geneva - Business & Arts Center', 'University of Business and International Studies', 'Conservatoire de musique de Genève', 'Charmilles Stadium', 'Palexpo', 'Graduate Institute of International and Development Studies', 'Graduate Institute of Development Studies', 'Le Petit-Saconnex', 'Grand Théâtre de Genève', 'Institut de Finance et Management', 'University of Geneva', 'European University, Geneva', 'Webster University Geneva'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 16 / 86: {
          [('Main', '==', 'm.03902', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'1993 World Curling Championships'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 17 / 86: {
          [('Main', '==', 'm.03902', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 18 / 86: {
          [('Main', '==', 'm.03902', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 4
            Final Answer: {'Le Courrier', 'Iskra', 'Le Temps', 'Les Afriques'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 19 / 86: {
          [('Main', '==', 'm.03902', ['location.citytown.postal_codes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.citytown.postal_codes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.citytown.postal_codes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'1201'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 20 / 86: {
          [('Main', '==', 'm.03902', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03902 fb:location.location.area ?o1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 WHERE { fb:m.03902 fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'15.93'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 21 / 86: {
          [('Main', '==', 'm.03902', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 2
            Final Answer: {'Switzerland', 'Canton of Geneva'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 22 / 86: {
          [('Main', '==', 'm.03902', ['location.location.nearby_airports'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Geneva International Airport'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 23 / 86: {
          [('Main', '==', 'm.03902', ['fictional_universe.fictional_setting.works_set_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:fictional_universe.fictional_setting.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:fictional_universe.fictional_setting.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Babylon 5: In the Beginning'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 24 / 86: {
          [('Main', '==', 'm.03902', ['user.carmenmfenn1.default_domain.cityscape.museums'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:user.carmenmfenn1.default_domain.cityscape.museums ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:user.carmenmfenn1.default_domain.cityscape.museums ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 2
            Final Answer: {'International Museum of the Reformation', "Musee d'Histoire Naturelle, Geneva"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 25 / 86: {
          [('Main', '==', 'm.03902', ['user.carmenmfenn1.default_domain.cityscape.theatres'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:user.carmenmfenn1.default_domain.cityscape.theatres ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:user.carmenmfenn1.default_domain.cityscape.theatres ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Grand Théâtre de Genève'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 26 / 86: {
          [('Main', '==', 'm.03902', ['user.carmenmfenn1.default_domain.cityscape.universities'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:user.carmenmfenn1.default_domain.cityscape.universities ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:user.carmenmfenn1.default_domain.cityscape.universities ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 2
            Final Answer: {'Conservatoire de musique de Genève', 'Geneva School of Diplomacy and International Relations'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 27 / 86: {
          [('Main', '==', 'm.054t3t', ['time.recurring_event.instances'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.054t3t fb:time.recurring_event.instances ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.054t3t fb:time.recurring_event.instances ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.054t3t'}
            Query return lines = 1
            Final Answer: {'2012 Geneva Motor Show'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 28 / 86: {
          [('Main', '==', 'm.054t3t', ['time.recurring_event.current_frequency'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.054t3t fb:time.recurring_event.current_frequency ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.054t3t fb:time.recurring_event.current_frequency ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.054t3t'}
            Query return lines = 1
            Final Answer: {'Yearly'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 29 / 86: {
          [('Main', '==', 'm.054t3t', ['travel.tourist_attraction.near_travel_destination'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.054t3t fb:travel.tourist_attraction.near_travel_destination ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.054t3t fb:travel.tourist_attraction.near_travel_destination ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.054t3t'}
            Query return lines = 1
            Final Answer: {'Geneva'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 30 / 86: {
          [('Main', '==', 'm.05fxn', ['organization.organization.place_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:organization.organization.place_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:organization.organization.place_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'California'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 31 / 86: {
          [('Main', '==', 'm.05fxn', ['influence.influence_node.influenced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'OS X'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 32 / 86: {
          [('Main', '==', 'm.05fxn', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.05fxn fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 WHERE { fb:m.05fxn fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'1985'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 33 / 86: {
          [('Main', '==', 'm.05fxn', ['organization.organization.founders'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'Steve Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 34 / 86: {
          [('Main', '==', 'm.05fxn', ['business.business_operation.industry'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 3
            Final Answer: {'Computer', 'Computer hardware', 'Software'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 35 / 86: {
          [('Main', '==', 'm.05fxn', ['business.defunct_company.ceased_operations'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.05fxn fb:business.defunct_company.ceased_operations ?o1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 WHERE { fb:m.05fxn fb:business.defunct_company.ceased_operations ?o1 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'1996'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 36 / 86: {
          [('Main', '==', 'm.05fxn', ['computer.computer_manufacturer_brand.computer_models'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:computer.computer_manufacturer_brand.computer_models ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:computer.computer_manufacturer_brand.computer_models ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 6
            Final Answer: {'NeXTcube 030', 'NeXT Computer', 'NeXTcube Turbo', 'NeXTcube', 'NeXTcube 040', 'NeXTstation'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 37 / 86: {
          [('Main', '==', 'm.05fxn', ['computer.operating_system_developer.operating_systems_developed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:computer.operating_system_developer.operating_systems_developed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05fxn fb:computer.operating_system_developer.operating_systems_developed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'NeXTSTEP'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 38 / 86: {
          [('Main', '==', 'm.05p2fb', ['time.recurring_event.current_frequency'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05p2fb fb:time.recurring_event.current_frequency ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05p2fb fb:time.recurring_event.current_frequency ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05p2fb'}
            Query return lines = 1
            Final Answer: {'Once every two years'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 39 / 86: {
          [('Main', '==', 'm.035qrr', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Leicester'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 40 / 86: {
          [('Main', '==', 'm.035qrr', ['organization.organization.child', 'organization.organization_relationship.child'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Kendall & Sons Ltd'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 41 / 86: {
          [('Main', '==', 'm.035qrr', ['organization.organization.leadership', 'organization.leadership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.035qrr fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.035qrr fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'2001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 42 / 86: {
          [('Main', '==', 'm.035qrr', ['organization.organization.leadership', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Chief Executive Officer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 43 / 86: {
          [('Main', '==', 'm.035qrr', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_language'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_language ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_language ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 44 / 86: {
          [('Main', '==', 'm.035qrr', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.hearing_impaired'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.hearing_impaired ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.hearing_impaired ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 45 / 86: {
          [('Main', '==', 'm.035qrr', ['organization.organization.leadership', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Next plc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 46 / 86: {
          [('Main', '==', 'm.035qrr', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 47 / 86: {
          [('Main', '==', 'm.035qrr', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.toll_free'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.toll_free ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.toll_free ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 48 / 86: {
          [('Main', '==', 'm.035qrr', ['organization.organization.child', 'organization.organization_relationship.parent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Next plc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 49 / 86: {
          [('Main', '==', 'm.035qrr', ['organization.organization.leadership', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Simon Wolfson'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 50 / 86: {
          [('Main', '==', 'm.035qrr', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.caller_category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.caller_category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.caller_category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Consumer Service'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 51 / 86: {
          [('Main', '==', 'm.035qrr', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.contact_category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.contact_category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.contact_category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 5
            Final Answer: {'Product activation', 'Automated/self-service system', 'Customer service', 'Technical Support', 'Sales'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 52 / 86: {
          [('Main', '==', 'm.035qrr', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 3
            Final Answer: {'United Kingdom', 'United States of America', 'Ireland'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 53 / 86: {
          [('Main', '==', 'm.035qrr', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.product_or_service'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.product_or_service ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.035qrr fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.product_or_service ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.035qrr'}
            Query return lines = 1
            Final Answer: {'Furniture'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 54 / 86: {
          [('Main', '==', 'm.03902', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 2
            Final Answer: {'1923', '1912'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 55 / 86: {
          [('Main', '==', 'm.03902', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Geneva'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 56 / 86: {
          [('Main', '==', 'm.03902', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Mayor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 57 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.how_to_get_here', 'travel.transportation.transport_terminus'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_terminus ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_terminus ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 3
            Final Answer: {'Gare Routiere Geneva', 'Geneva International Airport', 'Genève-Cornavin railway station'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 58 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.average_min_temp_c'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_min_temp_c ?o2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_min_temp_c ?o2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 11
            Final Answer: {'9', '-2', '2', '7', '5', '11', '10', '12', '-1', '0', '4'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 59 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.average_max_temp_c'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_max_temp_c ?o2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_max_temp_c ?o2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 10
            Final Answer: {'9', '18', '24', '20', '25', '5', '8', '14', '22', '4'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 60 / 86: {
          [('Main', '==', 'm.03902', ['location.capital_of_administrative_division.capital_of', 'location.administrative_division_capital_relationship.administrative_division'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Canton of Geneva'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 61 / 86: {
          [('Main', '==', 'm.03902', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 2
            Final Answer: {'2011', '2012'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 62 / 86: {
          [('Main', '==', 'm.03902', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Rémy Pagani'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 63 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.how_to_get_here', 'travel.transportation.travel_destination'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Geneva'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 64 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.average_rainfall_mm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_rainfall_mm ?o2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_rainfall_mm ?o2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 10
            Final Answer: {'74', '72', '78', '61', '88', '73', '80', '65', '82', '81'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 65 / 86: {
          [('Main', '==', 'm.03902', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 66 / 86: {
          [('Main', '==', 'm.03902', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Geneva'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 67 / 86: {
          [('Main', '==', 'm.03902', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'46.2'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 68 / 86: {
          [('Main', '==', 'm.03902', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'6.15'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 69 / 86: {
          [('Main', '==', 'm.03902', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 2
            Final Answer: {'Lake Geneva'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 70 / 86: {
          [('Main', '==', 'm.03902', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 2
            Final Answer: {'2012', '2009'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 71 / 86: {
          [('Main', '==', 'm.03902', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:18:48] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.03902 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 2
            Final Answer: {'2010', '2013'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 72 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.how_to_get_here', 'travel.transportation.mode_of_transportation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.mode_of_transportation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.mode_of_transportation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 3
            Final Answer: {'Air travel', 'Train', 'Bus'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 73 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.how_to_get_here', 'travel.transportation.transport_operator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_operator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_operator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Swiss Federal Railways'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 74 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.month'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.month ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.month ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 12
            Final Answer: {'January', 'December', 'November', 'October', 'June', 'September', 'February', 'April', 'March', 'August', 'May', 'July'}
            Answers = 12, P = 0.083333, R = 1.000000, F1 = 0.153846
          } [0.011s]
          Answers = 12, P = 0.083333, R = 1.000000, F1 = 0.153846
        } [0.011s]
        Checking schema 75 / 86: {
          [('Main', '==', 'm.03902', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.travel_destination'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Geneva'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 76 / 86: {
          [('Main', '==', 'm.03902', ['location.capital_of_administrative_division.capital_of', 'location.administrative_division_capital_relationship.capital'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03902 fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 1
            Final Answer: {'Geneva'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 77 / 86: {
          [('Main', '==', 'm.05fxn', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'Redwood City'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 78 / 86: {
          [('Main', '==', 'm.05fxn', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 6
            Final Answer: {'1986', '1985', '1996', '1994', '1989'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 79 / 86: {
          [('Main', '==', 'm.05fxn', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 4
            Final Answer: {'Product Marketing Manager', 'Vice President of Professional Services', 'Director of Web Engineering', 'Vice President, Europe'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 80 / 86: {
          [('Main', '==', 'm.05fxn', ['organization.organization.headquarters', 'location.mailing_address.state_province_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'California'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 81 / 86: {
          [('Main', '==', 'm.05fxn', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 6
            Final Answer: {'1997', '1996', '1994', '1993'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 82 / 86: {
          [('Main', '==', 'm.05fxn', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 83 / 86: {
          [('Main', '==', 'm.05fxn', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'NeXT'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 84 / 86: {
          [('Main', '==', 'm.05fxn', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 13
            Final Answer: {'John Patrick Crecine', 'John F. McCool', 'Bertrand Serlet', 'Steve Jobs', 'Nick White', 'Avie Tevanian', 'Ross Perot', 'Sina Tamaddon', 'Julius Orion Smith', 'Scott Forstall', 'Steve Jurvetson', 'Matthew Self', 'Warren Weiss'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 85 / 86: {
          [('Main', '==', 'm.05fxn', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'NeXT'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        80 / 86 coarse schemas kept with ans_size > 0.
      } [0.890s]
      Coarse level ended, resulting in 80 schemas.
    } [5.858s]
    Type level searching (total types = 10): {
      Current: 0 / 80
[{'business.issue'}]
[{'internet.website'}]
[{'business.business_location'}]
[{'type.datetime'}]
[{'organization.organization_founder'}]
[{'business.industry'}]
[{'travel.tourist_attraction'}]
[{'metropolitan_transit.transit_system'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'people.person'}]
[{'people.deceased_person'}]
[{'location.location'}]
[{'base.uncommon.exception'}]
[{'location.location'}]
[{'time.event'}]
[{'book.newspaper'}]
[{'location.postal_code'}]
[{'type.float'}]
[{'location.location'}]
[{'aviation.airport'}]
[{'fictional_universe.work_of_fiction'}]
[{'architecture.museum'}]
[{'theater.theater'}]
[{'education.university'}]
[{'time.event'}]
[{'measurement_unit.unit_of_frequency'}]
[{'travel.travel_destination'}]
[{'location.location'}]
[{'influence.influence_node'}]
[{'type.datetime'}]
[{'organization.organization_founder'}]
[{'business.industry'}]
[{'type.datetime'}]
[{'computer.computer'}]
[{'computer.operating_system'}]
[{'measurement_unit.unit_of_frequency'}]
[{'location.mailing_address'}, {'location.location'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.leadership'}, {'organization.role'}]
[{'base.schemastaging.phone_sandbox'}, {'language.human_language'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'base.schemastaging.phone_sandbox'}, {'base.schemastaging.contactor_category'}]
[{'base.schemastaging.phone_sandbox'}, {'organization.contact_category'}]
[{'base.schemastaging.phone_sandbox'}, {'location.location'}]
[{'base.schemastaging.phone_sandbox'}, {'base.schemastaging.contact_product'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'travel.transportation'}, {'travel.transport_terminus'}]
[{'travel.travel_destination_monthly_climate'}, {'type.float'}]
[{'travel.travel_destination_monthly_climate'}, {'type.float'}]
[{'location.administrative_division_capital_relationship'}, {'location.administrative_division'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'travel.transportation'}, {'travel.travel_destination'}]
[{'travel.travel_destination_monthly_climate'}, {'type.int'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'travel.transportation'}, {'travel.transportation_mode'}]
[{'travel.transportation'}, {'travel.transport_operator'}]
[{'travel.travel_destination_monthly_climate'}, {'time.month'}]
[{'travel.travel_destination_monthly_climate'}, {'travel.travel_destination'}]
[{'location.administrative_division_capital_relationship'}, {'location.capital_of_administrative_division'}]
[{'location.mailing_address'}, {'location.location'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'location.mailing_address'}, {'location.administrative_division'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
      2 typed schemas retrieved from 80 coarse schemas.
      Calculating F1 for 2 typed schemas: {
        Current: 0 / 2
        Checking schema 0 / 2: {
          [('Main', '==', 'm.03902', ['location.location.people_born_here']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03902 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03902'}
            Query return lines = 5
            Final Answer: {'Katerina Graham', 'Alain Tanner', 'Michel Simon', 'Bernard Haller', 'Aga Khan IV'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 2: {
          [('Main', '==', 'm.05fxn', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_1588|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05fxn fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05fxn'}
            Query return lines = 1
            Final Answer: {'Steve Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        2 / 2 typed schemas kept with ans_size > 0.
      } [0.022s]
      Typed level ended, resulting in 82 schemas.
    } [0.026s]
    Time level searching (total times = 0): {
      Current: 0 / 82
self.var_time_preds: [{'business.issue.cancellation_date', 'business.issue.first_issued'}]
self.var_time_preds: [{'internet.website.launched', 'internet.website.ended'}]
self.var_time_preds: [{'business.business_location.closing_date', 'business.business_location.opening_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'metropolitan_transit.transit_system.inception'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'people.deceased_person.date_of_death', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_cremation'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'architecture.museum.established'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'computer.computer.introduced', 'computer.computer.discontinued'}]
self.var_time_preds: [{'computer.operating_system.release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
      0 timed schemas retrieved from 82 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 82 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 82
[{'business.issue.cancellation_date', 'business.issue.first_issued'}]
[{'internet.website.launched', 'internet.website.ended'}]
[{'business.business_location.closing_date', 'business.business_location.opening_date'}]
[set()]
[set()]
[set()]
[set()]
[{'metropolitan_transit.transit_system.inception'}]
[set()]
[{'people.person.date_of_birth'}]
[{'people.deceased_person.date_of_death', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_cremation'}]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'architecture.museum.established'}]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'computer.computer.introduced', 'computer.computer.discontinued'}]
[{'computer.operating_system.release_date'}]
[set()]
[set(), set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[set(), set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.to', 'organization.organization_relationship.from'}, {'organization.organization.date_founded'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
      0 ordinal schemas retrieved from 82 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 82 schemas.
    } [0.002s]
    [2020-12-03 14:18:49] buffer saved.
    82 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1588_schema].
  } [18.604s]
  Entering Q 1589 / 5810 [b'who does david beckham play for in 2012?']: {
    Show 2 E + 10 T + 1 Tm + 0 Ord = 13 linkings: {
      #00 Entity: [2, 4) (david beckham) == m.02cvn (David) {'score': 5.891184, 'source': 0.0}
      #01 Entity: [2, 4) (david beckham) == m.02d9k (David_Beckham) {'score': 29077.460048, 'source': 0.0}
      #02 Type: [4, 5) (play) == theater.play (play) {'sim': 1.0}
      #03 Type: [4, 5) (play) == games.playing_card_game_play_direction (playing card game play direction) {'sim': 0.872757}
      #04 Type: [4, 5) (play) == games.playing_card_game (playing card game) {'sim': 0.797933}
      #05 Type: [4, 5) (play) == cvg.musical_game (musical game) {'sim': 0.748767}
      #06 Type: [4, 5) (play) == games.game (game) {'sim': 0.737714}
      #07 Type: [4, 5) (play) == american_football.player_game_statistics (player game statistics) {'sim': 0.715801}
      #08 Type: [4, 6) (play for) == cvg.computer_game_performance_type (video game performance type) {'sim': 0.713973}
      #09 Type: [4, 5) (play) == sports.pro_sports_played (sports played) {'sim': 0.713695}
      #10 Type: [0, 2) (who does) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.712728}
      #11 Type: [4, 5) (play) == cvg.musical_game_song (musical game song) {'sim': 0.703956}
      #12 Time: [7, 8) (2012) == 2012 {}
    } [0.000s]
    13 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:19:01) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02cvn ?p1 ?o1 . }
        [2020-12-03 14:19:01] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02cvn ?p1 ?o1 . }
          Query return lines = 27
        } [0.009s]
        Filt_Query_Ret = 18 / 27 ( 0.009s)
      } [0.009s]
      [Len-1||F2/2] (2020-12-03 14:19:01) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02d9k ?p1 ?o1 . }
        [2020-12-03 14:19:01] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02d9k ?p1 ?o1 . }
          Query return lines = 65
        } [0.008s]
        Filt_Query_Ret = 20 / 65 ( 0.008s)
      } [0.008s]
      [Len-2||F1/2] (2020-12-03 14:19:01) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02cvn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:01] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02cvn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 344
        } [0.021s]
        Filt_Query_Ret = 2 / 344 ( 0.022s)
      } [0.022s]
      [Len-2||F2/2] (2020-12-03 14:19:02) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02d9k ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:02] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02d9k ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 490
        } [0.047s]
        Filt_Query_Ret = 94 / 490 ( 0.049s)
      } [0.050s]
      134 coarse schemas retrieved from scratch.
      Calculating F1 for 134 coarse schemas: {
        Current: 0 / 134
        Checking schema 0 / 134: {
          [('Main', '==', 'm.02cvn', ['royalty.monarch.kingdom'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:royalty.monarch.kingdom ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:royalty.monarch.kingdom ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'Kingdom of Israel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 1 / 134: {
          [('Main', '==', 'm.02cvn', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02cvn fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 WHERE { fb:m.02cvn fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'-1039'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 2 / 134: {
          [('Main', '==', 'm.02cvn', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 2
            Final Answer: {'Nitzevet', 'Jesse'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 3 / 134: {
          [('Main', '==', 'm.02cvn', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'Judaism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 4 / 134: {
          [('Main', '==', 'm.02cvn', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'Jerusalem'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 5 / 134: {
          [('Main', '==', 'm.02cvn', ['royalty.monarch.royal_line'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:royalty.monarch.royal_line ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:royalty.monarch.royal_line ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'Davidic line'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 6 / 134: {
          [('Main', '==', 'm.02cvn', ['royalty.monarch.from_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02cvn fb:royalty.monarch.from_date ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 WHERE { fb:m.02cvn fb:royalty.monarch.from_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'-1001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 7 / 134: {
          [('Main', '==', 'm.02cvn', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 4
            Final Answer: {'David and Bathsheba', 'A Story of David', 'David', 'King David'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 8 / 134: {
          [('Main', '==', 'm.02cvn', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 20
            Final Answer: {'Solomon', 'Eliada', 'Jerimoth', 'Elishama', 'Shobab', 'Chileab', 'Absalom', 'Nogah', 'Adonijah', 'Tamar', 'Amnon', 'Ibhar', 'Japhia', 'Nepheg', 'Eliphelet', 'Elishua', 'Nathan', 'Shammua', 'Ithream', 'Shephatiah'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 9 / 134: {
          [('Main', '==', 'm.02cvn', ['royalty.monarch.to_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02cvn fb:royalty.monarch.to_date ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 WHERE { fb:m.02cvn fb:royalty.monarch.to_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'-0969'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 134: {
          [('Main', '==', 'm.02cvn', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 2
            Final Answer: {'Prophet', 'Warrior'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 11 / 134: {
          [('Main', '==', 'm.02cvn', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 12 / 134: {
          [('Main', '==', 'm.02cvn', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'Bethlehem'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 13 / 134: {
          [('Main', '==', 'm.02cvn', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02cvn fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 WHERE { fb:m.02cvn fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'-0969'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 14 / 134: {
          [('Main', '==', 'm.02cvn', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 4
            Final Answer: {'Books of Chronicles', 'Psalms', 'Psalm 145', 'Books of Samuel'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 15 / 134: {
          [('Main', '==', 'm.02cvn', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 2
            Final Answer: {'David Shepherd', 'David'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 16 / 134: {
          [('Main', '==', 'm.02cvn', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 12
            Final Answer: {'David Gives Uriah a Letter for Joab', 'David Vainqueur de Goliath', 'David Playing the Harp', 'Plate binding  Psalter by Dagulf of David, Saint Jerome', 'David with the Head of Goliath (Caravaggio), Vienna', 'David with the Head of Goliath', 'David and Goliath', 'Ahimelech Giving the Sword of Goliath to David', 'King David Handing the Letter to Uriah', 'David and Uriah', 'David'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 17 / 134: {
          [('Main', '==', 'm.02cvn', ['user.uoa_it.uoa_it.uoa_org_unit.owns'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:user.uoa_it.uoa_it.uoa_org_unit.owns ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:user.uoa_it.uoa_it.uoa_org_unit.owns ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'TestType'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 18 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.sww_base.interest'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02d9k fb:base.popstra.sww_base.interest ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 WHERE { fb:m.02d9k fb:base.popstra.sww_base.interest ?o1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'90'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 19 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02d9k fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 WHERE { fb:m.02d9k fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'1975'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 20 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 21 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Jewish people'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 22 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'Sandra Georgina West', 'David Edward Alan Beckham'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 23 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Christianity'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 24 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02d9k fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 WHERE { fb:m.02d9k fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'1.83'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 25 / 134: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.current_team'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:soccer.football_player.current_team ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:soccer.football_player.current_team ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 26 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.sww_base.heat'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02d9k fb:base.popstra.sww_base.heat ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 WHERE { fb:m.02d9k fb:base.popstra.sww_base.heat ?o1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'65'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 27 / 134: {
          [('Main', '==', 'm.02d9k', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 28 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'As a footballer you always want to test yourself against the best.', "I like Victoria for herself, not for nothing else. I'd like her if she worked in Tesco.", 'I dream a lot about football and a lot of them have come true for me.'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 29 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: {'Brooklyn Beckham', 'Harper Beckham', 'Romeo Beckham', 'Cruz Beckham'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 30 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02d9k fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 WHERE { fb:m.02d9k fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'77.11'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 31 / 134: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:soccer.football_player.position_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:soccer.football_player.position_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Midfielder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 32 / 134: {
          [('Main', '==', 'm.02d9k', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'Both Feet on the Ground', 'Beckham'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 33 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 5
            Final Answer: {'Spokesperson', 'Soccer Player', 'Model', 'Athlete', 'Actor'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 34 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 35 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Leytonstone'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 36 / 134: {
          [('Main', '==', 'm.02d9k', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'The Beckham Experiment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 37 / 134: {
          [('Main', '==', 'm.02d9k', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 38 / 134: {
          [('Main', '==', 'm.02cvn', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cvn fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cvn fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 9
            Final Answer: {'Bathsheba', 'Maacah', 'Michal', 'Ahinoam', 'Haggith', 'Abital', 'Eglah', 'Abigail'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 39 / 134: {
          [('Main', '==', 'm.02cvn', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cvn fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cvn fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 40 / 134: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'1.75e+08'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 41 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 42 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 43 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 8
            Final Answer: {'2013', '1993', '1996', '2003', '2009', '2007', '1994', '2010'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 44 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Founder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 45 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 46 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'Lynne Georgina Beckham', 'Joanne Louise Beckham'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 47 / 134: {
          [('Main', '==', 'm.02d9k', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'Victoria Beckham: Coming to America', "Beckham's Hotshots"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 48 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.sports_award_winner.awards', 'sports.sports_award.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.season ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: {'2008', '1999', '1997', '2004'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 49 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'Victoria Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 50 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Luttrellstown Castle'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 51 / 134: {
          [('Main', '==', 'm.02d9k', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 52 / 134: {
          [('Main', '==', 'm.02d9k', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 53 / 134: {
          [('Main', '==', 'm.02d9k', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'2008', '2001'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 54 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.plaintiff'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Emicles Da Mata'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 55 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 12
            Final Answer: {'Kevin Garnett', 'Elizabeth Hurley', 'Tom Cruise', 'Ricky Hatton', 'Davinia Taylor', 'Dita Von Teese', 'Usher', 'Kate Beckinsale', 'Katie Holmes', 'George Clooney', 'Tom Cruise and Katie Holmes'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 56 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.endorsements', 'base.popstra.paid_support.endorser'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.endorsements ?o1 . ?o1 fb:base.popstra.paid_support.endorser ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.endorsements ?o1 . ?o1 fb:base.popstra.paid_support.endorser ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 57 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.hangout', 'base.popstra.hangout.customer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.hangout ?o1 . ?o1 fb:base.popstra.hangout.customer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.hangout ?o1 . ?o1 fb:base.popstra.hangout.customer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 58 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.restaurant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.restaurant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.restaurant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: {'Meson Txistu', 'Da Giacomo restaurant', "J. Sheekey's", 'Cipriani restaurant'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 59 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'Rebecca Loos', 'Elsa Pataky'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 60 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.fashion_wearer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.fashion_wearer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.fashion_wearer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 61 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Judaism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 62 / 134: {
          [('Main', '==', 'm.02d9k', ['base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.matches_played'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.matches_played ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.matches_played ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'114'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 63 / 134: {
          [('Main', '==', 'm.02d9k', ['base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.players'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.players ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.players ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 64 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 65 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.career_end'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_end ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_end ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'2013'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 66 / 134: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.salary'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.salary ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.salary ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'3.4e+06', '3e+06', '5.5e+06'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 67 / 134: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'Paris Saint-Germain F.C.', 'LA Galaxy'}
            Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
          } [0.023s]
          Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
        } [0.023s]
        Checking schema 68 / 134: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 69 / 134: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'celebritynetworth.com'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 70 / 134: {
          [('Main', '==', 'm.02d9k', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 8
            Final Answer: {'Looking for Eric', 'David Beckham: Life of an Icon', 'Goal 3', 'Real, The Movie', 'Goal!', 'Goal II: Living the Dream', 'Football Legends: David Beckham and Michael Owen', 'Gamebreakers: The Stars of Major League Soccer'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 71 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 8
            Final Answer: {'2013', '1995', '2012', '1996', '2003', '2009', '2007', '2010'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 72 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 8
            Final Answer: {'A.C. Milan', 'Paris Saint-Germain F.C.', 'Real Madrid C.F.', 'Preston North End F.C.', 'England national football team', 'England national under-21 football team', 'LA Galaxy', 'Manchester United F.C.'}
            Answers = 8, P = 0.125000, R = 1.000000, F1 = 0.222222
          } [0.016s]
          Answers = 8, P = 0.125000, R = 1.000000, F1 = 0.222222
        } [0.016s]
        Checking schema 73 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'Leytonstone', 'Beverly Hills', 'Los Angeles'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 74 / 134: {
          [('Main', '==', 'm.02d9k', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 75 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.sports_award_winner.awards', 'sports.sports_award.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 6
            Final Answer: {'PFA Young Player of the Year', 'UEFA Club Player of the Year Winner', 'ESPY Award for Best MLS Player', 'ESPY Award for Best Male Soccer Player', '1998 FIFA World Cup', 'FIFA World Player of the Year'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 76 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'1999'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 77 / 134: {
          [('Main', '==', 'm.02d9k', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 78 / 134: {
          [('Main', '==', 'm.02d9k', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'Something About Beckham', 'Zidane: A 21st Century Portrait', 'David Beckham: Life of an Icon'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 79 / 134: {
          [('Main', '==', 'm.02d9k', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 80 / 134: {
          [('Main', '==', 'm.02d9k', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 81 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.shops_at', 'base.popstra.shopping_choice.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.shops_at ?o1 . ?o1 fb:base.popstra.shopping_choice.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.shops_at ?o1 . ?o1 fb:base.popstra.shopping_choice.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: {"Macy's", 'Adidas', 'Mondadori Book Shop', 'Armani'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 82 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.supporter', 'base.popstra.support.supported_organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'UNICEF', 'Malaria No More UK'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 83 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.perpetrator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'Victoria Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 84 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.designer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.designer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.designer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 6
            Final Answer: {'Ed Hardy Mens Eagle Skull Tee', 'Abercrombie & Fitch', 'Marc Jacobs', 'Armani', 'Gold Bunny Leather', 'PRPS'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 85 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.parties', 'base.popstra.party_attendance_person.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 86 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.bought', 'base.popstra.product_choice.consumer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.bought ?o1 . ?o1 fb:base.popstra.product_choice.consumer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.bought ?o1 . ?o1 fb:base.popstra.product_choice.consumer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 87 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: {'New York City', 'Milan', 'Rome', 'Bali'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 88 / 134: {
          [('Main', '==', 'm.02d9k', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 89 / 134: {
          [('Main', '==', 'm.02d9k', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 90 / 134: {
          [('Main', '==', 'm.02d9k', ['base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.goals_scored'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.goals_scored ?o2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.goals_scored ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'17'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 91 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Football'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 92 / 134: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 93 / 134: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 94 / 134: {
          [('Main', '==', 'm.02d9k', ['celebrities.celebrity.celebrity_friends', 'celebrities.friendship.friend'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:celebrities.celebrity.celebrity_friends ?o1 . ?o1 fb:celebrities.friendship.friend ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:celebrities.celebrity.celebrity_friends ?o1 . ?o1 fb:celebrities.friendship.friend ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: {'Gordon Ramsay', 'Tom Cruise', 'Katie Holmes'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 95 / 134: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 96 / 134: {
          [('Main', '==', 'm.02d9k', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 97 / 134: {
          [('Main', '==', 'm.02d9k', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'Archive Footage', 'Uncredited', 'Him/Herself'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 98 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Midfielder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 99 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Current: 100 / 134
        Checking schema 100 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham football academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 101 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'Chase Lane Primary School', 'Chingford Foundation School'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 102 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 103 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.sports_award_winner.awards', 'sports.sports_award.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:sports.sports_award_winner.awards ?o1 . ?o1 fb:sports.sports_award.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 104 / 134: {
          [('Main', '==', 'm.02d9k', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 105 / 134: {
          [('Main', '==', 'm.02d9k', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Interviewee'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 106 / 134: {
          [('Main', '==', 'm.02d9k', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 107 / 134: {
          [('Main', '==', 'm.02d9k', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'BBC Sports Personality of the Year', 'Best MLS Player ESPY Award'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 108 / 134: {
          [('Main', '==', 'm.02d9k', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 15
            Final Answer: {'Snoop It Like Beckham', 'Series 1, Show 105', 'The Beckhams And The Brits', 'The 12th Annual Teen Choice Awards', '14/03/05 [4000th Episode]', 'Series 2, Show 27', 'Closing Ceremony', 'Series 7, Show 5', 'De man van nu', 'Series 1, Show 20', 'Series 5, Show 7', 'Series 1, Show 9', 'September 10, 2010', 'Series 1, Show 120', 'Show 1'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 109 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.dated', 'base.popstra.dated.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'Victoria Beckham', 'Mariann Fogarasy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 110 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.insult_perpetrator', 'base.popstra.public_insult.perpetrator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 111 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.insult_perpetrator', 'base.popstra.public_insult.victim'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.victim ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.victim ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Major League Soccer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 112 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.defendant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 113 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.shops_at', 'base.popstra.shopping_choice.shopper'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.shops_at ?o1 . ?o1 fb:base.popstra.shopping_choice.shopper ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.shops_at ?o1 . ?o1 fb:base.popstra.shopping_choice.shopper ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 114 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.endorsements', 'base.popstra.paid_support.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.endorsements ?o1 . ?o1 fb:base.popstra.paid_support.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.endorsements ?o1 . ?o1 fb:base.popstra.paid_support.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: {'Sharpie', 'Emporio Armani', 'Adidas', 'Motorola'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 115 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.supporter', 'base.popstra.support.supporter'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 116 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.hangout', 'base.popstra.hangout.business_location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.hangout ?o1 . ?o1 fb:base.popstra.hangout.business_location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.hangout ?o1 . ?o1 fb:base.popstra.hangout.business_location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'Los Angeles nightspot Villa', 'Madeo'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 117 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.infidelity_participant', 'base.popstra.infidelity.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_participant ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_participant ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'Rebecca Loos'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 118 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Emma Ryan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 119 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.diner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.diner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.diner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 120 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.date ?o2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'2005', '2003'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 121 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.parties', 'base.popstra.party_attendance_person.party'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.party ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.party ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Adidas House Party Commercial'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 122 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.bought', 'base.popstra.product_choice.product'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.bought ?o1 . ?o1 fb:base.popstra.product_choice.product ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.bought ?o1 . ?o1 fb:base.popstra.product_choice.product ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'iPhone', 'Bracelet'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 123 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.vacationer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 124 / 134: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 125 / 134: {
          [('Main', '==', 'm.02d9k', ['base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Midfielder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 126 / 134: {
          [('Main', '==', 'm.02d9k', ['base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.current_club'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.current_club ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:base.x2010fifaworldcupsouthafrica.world_cup_participant.world_cup_team ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.current_club ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'LA Galaxy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.010s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.010s]
        Checking schema 127 / 134: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.career_start'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_start ?o2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_start ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'1992'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 128 / 134: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.date ?o2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'2011', '2012', '2013'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 129 / 134: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.loans', 'soccer.football_player_loan.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.to ?o2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'2009', '1995'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 130 / 134: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.loans', 'soccer.football_player_loan.lending_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.lending_team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.lending_team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'LA Galaxy', 'Manchester United F.C.'}
            Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
          } [0.015s]
          Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
        } [0.015s]
        Checking schema 131 / 134: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.loans', 'soccer.football_player_loan.borrowing_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.borrowing_team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.borrowing_team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'A.C. Milan', 'Preston North End F.C.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 132 / 134: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.loans', 'soccer.football_player_loan.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 133 / 134: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.loans', 'soccer.football_player_loan.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.from ?o2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'2009', '1995'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        132 / 134 coarse schemas kept with ans_size > 0.
      } [1.435s]
      Coarse level ended, resulting in 132 schemas.
    } [1.526s]
    Type level searching (total types = 10): {
      Current: 0 / 132
[{'royalty.kingdom'}]
[{'type.datetime'}]
[{'people.person'}]
[{'religion.religion'}]
[{'location.location'}]
[{'royalty.royal_line'}]
[{'type.datetime'}]
[{'film.film'}]
[{'people.person'}]
[{'type.datetime'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'book.written_work'}]
[{'fictional_universe.fictional_character'}]
[{'visual_art.artwork'}]
[{'user.uoa_it.uoa_it.uoa_application'}]
[{'type.int'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'type.int'}]
[{'symbols.namesake'}]
[{'media_common.quotation'}]
[{'people.person'}]
[{'type.float'}]
[{'soccer.football_position'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'book.written_work'}]
[{'fictional_universe.fictional_character'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'sports.sports_award'}, {'sports.sports_league_season'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_program_guest'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
[{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
[{'base.popstra.paid_support'}, {'base.popstra.celebrity'}]
[{'base.popstra.hangout'}, {'base.popstra.celebrity'}]
[{'base.popstra.restaurant_choice'}, {'base.popstra.restaurant'}]
[{'base.popstra.canoodled'}, {'base.popstra.celebrity'}]
[{'base.popstra.fashion_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.religion_choice'}, {'base.popstra.religion'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'type.int'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'base.x2010fifaworldcupsouthafrica.world_cup_participant'}]
[{'sports.pro_sports_played'}, {'sports.pro_athlete'}]
[{'sports.pro_sports_played'}, {'type.datetime'}]
[{'base.schemastaging.athlete_salary'}, {'type.float'}]
[{'base.schemastaging.athlete_salary'}, {'base.schemastaging.sports_team_extra'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'film.performance'}, {'film.film'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'people.place_lived'}, {'location.location'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'sports.sports_award'}, {'sports.sports_award_type'}]
[{'people.marriage'}, {'type.datetime'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'base.popstra.shopping_choice'}, {'base.popstra.company'}]
[{'base.popstra.support'}, {'base.popstra.organization'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.fashion_choice'}, {'base.popstra.company'}]
[{'base.popstra.party_attendance_person'}, {'base.popstra.celebrity'}]
[{'base.popstra.product_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'type.int'}]
[{'sports.pro_sports_played'}, {'sports.sport'}]
[{'base.schemastaging.athlete_salary'}, {'finance.currency'}]
[{'base.schemastaging.athlete_salary'}, {'base.schemastaging.athlete_extra'}]
[{'celebrities.friendship'}, {'celebrities.celebrity'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
      Current: 100 / 132
[{'education.education'}, {'people.person'}]
[{'sports.sports_award'}, {'sports.sports_award_winner'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.non_character_role'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'base.popstra.dated'}, {'base.popstra.celebrity'}]
[{'base.popstra.public_insult'}, {'base.popstra.celebrity'}]
[{'base.popstra.public_insult'}, {'base.popstra.celebrity'}]
[{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
[{'base.popstra.shopping_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.paid_support'}, {'base.popstra.company'}]
[{'base.popstra.support'}, {'base.popstra.celebrity'}]
[{'base.popstra.hangout'}, {'base.popstra.business_location'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.restaurant_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.canoodled'}, {'type.datetime'}]
[{'base.popstra.party_attendance_person'}, {'base.popstra.party'}]
[{'base.popstra.product_choice'}, {'base.popstra.product'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.religion_choice'}, {'base.popstra.celebrity'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'soccer.football_position'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'soccer.football_team'}]
[{'sports.pro_sports_played'}, {'type.datetime'}]
[{'base.schemastaging.athlete_salary'}, {'type.datetime'}]
[{'soccer.football_player_loan'}, {'type.datetime'}]
[{'soccer.football_player_loan'}, {'soccer.football_team'}]
[{'soccer.football_player_loan'}, {'soccer.football_team'}]
[{'soccer.football_player_loan'}, {'soccer.football_player'}]
[{'soccer.football_player_loan'}, {'type.datetime'}]
      3 typed schemas retrieved from 132 coarse schemas.
      Calculating F1 for 3 typed schemas: {
        Current: 0 / 3
        Checking schema 0 / 3: {
          [('Main', '==', 'm.02cvn', ['book.book_subject.works']), ('Type', '==', 'theater.play', ['type.object.type'])]
          var_types: [{'theater.play', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cvn fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 1 / 3: {
          [('Main', '==', 'm.02d9k', ['book.author.works_written']), ('Type', '==', 'theater.play', ['type.object.type'])]
          var_types: [{'theater.play', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:book.author.works_written ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:book.author.works_written ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 2 / 3: {
          [('Main', '==', 'm.02d9k', ['book.book_subject.works']), ('Type', '==', 'theater.play', ['type.object.type'])]
          var_types: [{'theater.play', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d9k fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        0 / 3 typed schemas kept with ans_size > 0.
      } [0.025s]
      Typed level ended, resulting in 132 schemas.
    } [0.031s]
    Time level searching (total times = 1): {
      Current: 0 / 132
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
      FBHelper: 712 time pair predicates loaded.
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'royalty.royal_line.ruled_to', 'royalty.royal_line.ruled_from'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [{'user.uoa_it.uoa_it.uoa_application.purchase_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
self.var_time_preds: [{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
self.var_time_preds: [{'base.popstra.paid_support.end_date', 'base.popstra.paid_support.start_date'}, set()]
self.var_time_preds: [{'base.popstra.hangout.date'}, set()]
self.var_time_preds: [{'base.popstra.restaurant_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.canoodled.date'}, set()]
self.var_time_preds: [{'base.popstra.fashion_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.religion_choice.start_date', 'base.popstra.religion_choice.end_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.shopping_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.support.start_date', 'base.popstra.support.end_date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.fashion_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.party_attendance_person.date'}, set()]
self.var_time_preds: [{'base.popstra.product_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
      Current: 100 / 132
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
self.var_time_preds: [{'base.popstra.public_insult.date'}, set()]
self.var_time_preds: [{'base.popstra.public_insult.date'}, set()]
self.var_time_preds: [{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
self.var_time_preds: [{'base.popstra.shopping_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.paid_support.end_date', 'base.popstra.paid_support.start_date'}, set()]
self.var_time_preds: [{'base.popstra.support.start_date', 'base.popstra.support.end_date'}, set()]
self.var_time_preds: [{'base.popstra.hangout.date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.restaurant_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.canoodled.date'}, set()]
self.var_time_preds: [{'base.popstra.party_attendance_person.date'}, {'base.popstra.party.date'}]
self.var_time_preds: [{'base.popstra.product_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
self.var_time_preds: [{'base.popstra.religion_choice.start_date', 'base.popstra.religion_choice.end_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'soccer.football_player_loan.to', 'soccer.football_player_loan.from'}, set()]
self.var_time_preds: [{'soccer.football_player_loan.to', 'soccer.football_player_loan.from'}, set()]
self.var_time_preds: [{'soccer.football_player_loan.to', 'soccer.football_player_loan.from'}, set()]
self.var_time_preds: [{'soccer.football_player_loan.to', 'soccer.football_player_loan.from'}, set()]
self.var_time_preds: [{'soccer.football_player_loan.to', 'soccer.football_player_loan.from'}, set()]
      109 timed schemas retrieved from 132 typed schemas.
      Calculating F1 for 109 timed schemas: {
        Current: 0 / 109
        Checking schema 0 / 109: {
          [('Main', '==', 'm.02cvn', ['people.person.parents']), ('Time', '==', '2012', ['people.person.date_of_birth'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:people.person.parents ?o1 . OPTIONAL { ?o1 fb:people.person.date_of_birth ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:people.person.parents ?o1 . OPTIONAL { ?o1 fb:people.person.date_of_birth ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 1 / 109: {
          [('Main', '==', 'm.02cvn', ['royalty.monarch.royal_line']), ('Time', '==', '2012', ['royalty.royal_line.ruled_from'])]
          var_types: [{'royalty.royal_line'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 ?tm2 WHERE { fb:m.02cvn fb:royalty.monarch.royal_line ?o1 . OPTIONAL { ?o1 fb:royalty.royal_line.ruled_from ?tm1 . } . OPTIONAL { ?o1 fb:royalty.royal_line.ruled_to ?tm2 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 ?tm2 WHERE { fb:m.02cvn fb:royalty.monarch.royal_line ?o1 . OPTIONAL { ?o1 fb:royalty.royal_line.ruled_from ?tm1 . } . OPTIONAL { ?o1 fb:royalty.royal_line.ruled_to ?tm2 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 109: {
          [('Main', '==', 'm.02cvn', ['film.film_subject.films']), ('Time', '==', '2012', ['film.film.initial_release_date'])]
          var_types: [{'film.film'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:film.film_subject.films ?o1 . OPTIONAL { ?o1 fb:film.film.initial_release_date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:film.film_subject.films ?o1 . OPTIONAL { ?o1 fb:film.film.initial_release_date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 4
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 3 / 109: {
          [('Main', '==', 'm.02cvn', ['people.person.children']), ('Time', '==', '2012', ['people.person.date_of_birth'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:people.person.children ?o1 . OPTIONAL { ?o1 fb:people.person.date_of_birth ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:people.person.children ?o1 . OPTIONAL { ?o1 fb:people.person.date_of_birth ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 20
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 4 / 109: {
          [('Main', '==', 'm.02cvn', ['book.book_subject.works']), ('Time', '==', '2012', ['book.written_work.copyright_date'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.copyright_date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.copyright_date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 4
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 5 / 109: {
          [('Main', '==', 'm.02cvn', ['book.book_subject.works']), ('Time', '==', '2012', ['book.written_work.date_of_first_publication'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_of_first_publication ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_of_first_publication ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 4
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 6 / 109: {
          [('Main', '==', 'm.02cvn', ['book.book_subject.works']), ('Time', '==', '2012', ['book.written_work.date_written'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_written ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_written ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 4
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 7 / 109: {
          [('Main', '==', 'm.02cvn', ['visual_art.art_subject.artwork_on_the_subject']), ('Time', '==', '2012', ['visual_art.artwork.date_completed'])]
          var_types: [{'visual_art.artwork'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:visual_art.art_subject.artwork_on_the_subject ?o1 . OPTIONAL { ?o1 fb:visual_art.artwork.date_completed ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:visual_art.art_subject.artwork_on_the_subject ?o1 . OPTIONAL { ?o1 fb:visual_art.artwork.date_completed ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 12
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 8 / 109: {
          [('Main', '==', 'm.02cvn', ['visual_art.art_subject.artwork_on_the_subject']), ('Time', '==', '2012', ['visual_art.artwork.date_begun'])]
          var_types: [{'visual_art.artwork'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:visual_art.art_subject.artwork_on_the_subject ?o1 . OPTIONAL { ?o1 fb:visual_art.artwork.date_begun ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:visual_art.art_subject.artwork_on_the_subject ?o1 . OPTIONAL { ?o1 fb:visual_art.artwork.date_begun ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 12
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 9 / 109: {
          [('Main', '==', 'm.02cvn', ['user.uoa_it.uoa_it.uoa_org_unit.owns']), ('Time', '==', '2012', ['user.uoa_it.uoa_it.uoa_application.purchase_date'])]
          var_types: [{'user.uoa_it.uoa_it.uoa_application'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:user.uoa_it.uoa_it.uoa_org_unit.owns ?o1 . OPTIONAL { ?o1 fb:user.uoa_it.uoa_it.uoa_application.purchase_date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02cvn fb:user.uoa_it.uoa_it.uoa_org_unit.owns ?o1 . OPTIONAL { ?o1 fb:user.uoa_it.uoa_it.uoa_application.purchase_date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.parents']), ('Time', '==', '2012', ['people.person.date_of_birth'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:people.person.parents ?o1 . OPTIONAL { ?o1 fb:people.person.date_of_birth ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:people.person.parents ?o1 . OPTIONAL { ?o1 fb:people.person.date_of_birth ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 11 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.quotations']), ('Time', '==', '2012', ['media_common.quotation.date'])]
          var_types: [{'media_common.quotation'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:people.person.quotations ?o1 . OPTIONAL { ?o1 fb:media_common.quotation.date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:people.person.quotations ?o1 . OPTIONAL { ?o1 fb:media_common.quotation.date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 12 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.children']), ('Time', '==', '2012', ['people.person.date_of_birth'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:people.person.children ?o1 . OPTIONAL { ?o1 fb:people.person.date_of_birth ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:people.person.children ?o1 . OPTIONAL { ?o1 fb:people.person.date_of_birth ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 13 / 109: {
          [('Main', '==', 'm.02d9k', ['book.author.works_written']), ('Time', '==', '2012', ['book.written_work.copyright_date'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.author.works_written ?o1 . OPTIONAL { ?o1 fb:book.written_work.copyright_date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.author.works_written ?o1 . OPTIONAL { ?o1 fb:book.written_work.copyright_date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 14 / 109: {
          [('Main', '==', 'm.02d9k', ['book.author.works_written']), ('Time', '==', '2012', ['book.written_work.date_of_first_publication'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.author.works_written ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_of_first_publication ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.author.works_written ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_of_first_publication ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 15 / 109: {
          [('Main', '==', 'm.02d9k', ['book.author.works_written']), ('Time', '==', '2012', ['book.written_work.date_written'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.author.works_written ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_written ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.author.works_written ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_written ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 16 / 109: {
          [('Main', '==', 'm.02d9k', ['book.book_subject.works']), ('Time', '==', '2012', ['book.written_work.copyright_date'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.copyright_date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.copyright_date ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 17 / 109: {
          [('Main', '==', 'm.02d9k', ['book.book_subject.works']), ('Time', '==', '2012', ['book.written_work.date_of_first_publication'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_of_first_publication ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_of_first_publication ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 18 / 109: {
          [('Main', '==', 'm.02d9k', ['book.book_subject.works']), ('Time', '==', '2012', ['book.written_work.date_written'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_written ?tm1 . } . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o1 ?n1 ?tm1 WHERE { fb:m.02d9k fb:book.book_subject.works ?o1 . OPTIONAL { ?o1 fb:book.written_work.date_written ?tm1 . } . ?o1 fb:type.object.name ?n1 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 19 / 109: {
          [('Main', '==', 'm.02cvn', ['people.person.spouse_s', 'people.marriage.spouse']), ('Time', '==', '2012', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02cvn fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02cvn fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 9
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 20 / 109: {
          [('Main', '==', 'm.02cvn', ['people.person.spouse_s', 'people.marriage.spouse']), ('Time', '==', '2012', ['people.person.date_of_birth'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02cvn fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02cvn fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 9
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 21 / 109: {
          [('Main', '==', 'm.02cvn', ['people.person.spouse_s', 'people.marriage.type_of_union']), ('Time', '==', '2012', ['people.marriage_union_type.unions_of_this_type', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'people.marriage_union_type'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02cvn fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02cvn fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02cvn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 22 / 109: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount']), ('Time', '==', '2012', ['!measurement_unit.dated_money_value.amount', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'type.float'}]
          SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . OPTIONAL { ?o1 fb:measurement_unit.dated_money_value.valid_date ?tm1 . } . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . OPTIONAL { ?o1 fb:measurement_unit.dated_money_value.valid_date ?tm1 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'1.75e+08'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 23 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.player']), ('Time', '==', '2012', ['sports.pro_athlete.teams', 'sports.sports_team_roster.from'])]
          var_types: [{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . OPTIONAL { ?o1 fb:sports.sports_team_roster.from ?tm1 . } . OPTIONAL { ?o1 fb:sports.sports_team_roster.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . OPTIONAL { ?o1 fb:sports.sports_team_roster.from ?tm1 . } . OPTIONAL { ?o1 fb:sports.sports_team_roster.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 9
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 24 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.player']), ('Time', '==', '2012', ['sports.pro_athlete.career_start'])]
          var_types: [{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . OPTIONAL { ?o2 fb:sports.pro_athlete.career_start ?tm1 . } . OPTIONAL { ?o2 fb:sports.pro_athlete.career_end ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . OPTIONAL { ?o2 fb:sports.pro_athlete.career_start ?tm1 . } . OPTIONAL { ?o2 fb:sports.pro_athlete.career_end ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 25 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.from']), ('Time', '==', '2012', ['!sports.sports_team_roster.from', 'sports.sports_team_roster.from'])]
          var_types: [{'sports.sports_team_roster'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . OPTIONAL { ?o1 fb:sports.sports_team_roster.from ?tm1 . } . OPTIONAL { ?o1 fb:sports.sports_team_roster.to ?tm2 . } . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . OPTIONAL { ?o1 fb:sports.sports_team_roster.from ?tm1 . } . OPTIONAL { ?o1 fb:sports.sports_team_roster.to ?tm2 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 9
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 26 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.employment_history', 'business.employment_tenure.title']), ('Time', '==', '2012', ['business.job_title.people_with_this_title', 'business.employment_tenure.from'])]
          var_types: [{'business.employment_tenure'}, {'business.job_title'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . OPTIONAL { ?o1 fb:business.employment_tenure.from ?tm1 . } . OPTIONAL { ?o1 fb:business.employment_tenure.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . OPTIONAL { ?o1 fb:business.employment_tenure.from ?tm1 . } . OPTIONAL { ?o1 fb:business.employment_tenure.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 27 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.places_lived', 'people.place_lived.person']), ('Time', '==', '2012', ['people.person.places_lived', 'people.place_lived.start_date'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . OPTIONAL { ?o1 fb:people.place_lived.start_date ?tm1 . } . OPTIONAL { ?o1 fb:people.place_lived.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . OPTIONAL { ?o1 fb:people.place_lived.start_date ?tm1 . } . OPTIONAL { ?o1 fb:people.place_lived.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 28 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.places_lived', 'people.place_lived.person']), ('Time', '==', '2012', ['people.person.date_of_birth'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 29 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Time', '==', '2012', ['people.person.date_of_birth'])]
          var_types: [{'people.sibling_relationship'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 30 / 109: {
          [('Main', '==', 'm.02d9k', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series']), ('Time', '==', '2012', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.from'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . OPTIONAL { ?o1 fb:tv.regular_tv_appearance.from ?tm1 . } . OPTIONAL { ?o1 fb:tv.regular_tv_appearance.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . OPTIONAL { ?o1 fb:tv.regular_tv_appearance.from ?tm1 . } . OPTIONAL { ?o1 fb:tv.regular_tv_appearance.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 31 / 109: {
          [('Main', '==', 'm.02d9k', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series']), ('Time', '==', '2012', ['tv.tv_program.air_date_of_first_episode'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . OPTIONAL { ?o2 fb:tv.tv_program.air_date_of_first_episode ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . OPTIONAL { ?o2 fb:tv.tv_program.air_date_of_first_episode ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 32 / 109: {
          [('Main', '==', 'm.02d9k', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series']), ('Time', '==', '2012', ['tv.tv_program.air_date_of_final_episode'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . OPTIONAL { ?o2 fb:tv.tv_program.air_date_of_final_episode ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . OPTIONAL { ?o2 fb:tv.tv_program.air_date_of_final_episode ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 33 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.spouse_s', 'people.marriage.spouse']), ('Time', '==', '2012', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: {'Victoria Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 34 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.spouse_s', 'people.marriage.spouse']), ('Time', '==', '2012', ['people.person.date_of_birth'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 35 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.spouse_s', 'people.marriage.location_of_ceremony']), ('Time', '==', '2012', ['!people.marriage.location_of_ceremony', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'location.location'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Luttrellstown Castle'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 36 / 109: {
          [('Main', '==', 'm.02d9k', ['award.award_winner.awards_won', 'award.award_honor.year']), ('Time', '==', '2012', ['!award.award_honor.year', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . OPTIONAL { ?o1 fb:award.award_honor.year ?tm1 . } . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . OPTIONAL { ?o1 fb:award.award_honor.year ?tm1 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 37 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.plaintiff']), ('Time', '==', '2012', ['base.popstra.celebrity.sued', 'base.popstra.legal_dispute.start_date'])]
          var_types: [{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . OPTIONAL { ?o1 fb:base.popstra.legal_dispute.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.legal_dispute.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . OPTIONAL { ?o1 fb:base.popstra.legal_dispute.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.legal_dispute.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 38 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant']), ('Time', '==', '2012', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.start_date'])]
          var_types: [{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . OPTIONAL { ?o1 fb:base.popstra.friendship.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.friendship.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . OPTIONAL { ?o1 fb:base.popstra.friendship.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.friendship.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 12
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 39 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.endorsements', 'base.popstra.paid_support.endorser']), ('Time', '==', '2012', ['base.popstra.celebrity.endorsements', 'base.popstra.paid_support.start_date'])]
          var_types: [{'base.popstra.paid_support'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.endorsements ?o1 . ?o1 fb:base.popstra.paid_support.endorser ?o2 . OPTIONAL { ?o1 fb:base.popstra.paid_support.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.paid_support.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.endorsements ?o1 . ?o1 fb:base.popstra.paid_support.endorser ?o2 . OPTIONAL { ?o1 fb:base.popstra.paid_support.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.paid_support.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 40 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.hangout', 'base.popstra.hangout.customer']), ('Time', '==', '2012', ['base.popstra.celebrity.hangout', 'base.popstra.hangout.date'])]
          var_types: [{'base.popstra.hangout'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.hangout ?o1 . ?o1 fb:base.popstra.hangout.customer ?o2 . OPTIONAL { ?o1 fb:base.popstra.hangout.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.hangout ?o1 . ?o1 fb:base.popstra.hangout.customer ?o2 . OPTIONAL { ?o1 fb:base.popstra.hangout.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 41 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.restaurant']), ('Time', '==', '2012', ['base.popstra.restaurant.restaurant_choice', 'base.popstra.restaurant_choice.date'])]
          var_types: [{'base.popstra.restaurant_choice'}, {'base.popstra.restaurant'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.restaurant ?o2 . OPTIONAL { ?o1 fb:base.popstra.restaurant_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.restaurant ?o2 . OPTIONAL { ?o1 fb:base.popstra.restaurant_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 42 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.participant']), ('Time', '==', '2012', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.date'])]
          var_types: [{'base.popstra.canoodled'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.participant ?o2 . OPTIONAL { ?o1 fb:base.popstra.canoodled.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.participant ?o2 . OPTIONAL { ?o1 fb:base.popstra.canoodled.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 6
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 43 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.fashion_wearer']), ('Time', '==', '2012', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.date'])]
          var_types: [{'base.popstra.fashion_choice'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.fashion_wearer ?o2 . OPTIONAL { ?o1 fb:base.popstra.fashion_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.fashion_wearer ?o2 . OPTIONAL { ?o1 fb:base.popstra.fashion_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 44 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.religion']), ('Time', '==', '2012', ['base.popstra.religion.membership', 'base.popstra.religion_choice.start_date'])]
          var_types: [{'base.popstra.religion_choice'}, {'base.popstra.religion'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . OPTIONAL { ?o1 fb:base.popstra.religion_choice.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.religion_choice.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . OPTIONAL { ?o1 fb:base.popstra.religion_choice.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.religion_choice.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 45 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.athlete']), ('Time', '==', '2012', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.career_start'])]
          var_types: [{'sports.pro_sports_played'}, {'sports.pro_athlete'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_start ?tm1 . } . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_end ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_start ?tm1 . } . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_end ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 46 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.athlete']), ('Time', '==', '2012', ['sports.pro_athlete.career_start'])]
          var_types: [{'sports.pro_sports_played'}, {'sports.pro_athlete'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . OPTIONAL { ?o2 fb:sports.pro_athlete.career_start ?tm1 . } . OPTIONAL { ?o2 fb:sports.pro_athlete.career_end ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . OPTIONAL { ?o2 fb:sports.pro_athlete.career_start ?tm1 . } . OPTIONAL { ?o2 fb:sports.pro_athlete.career_end ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 47 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.career_end']), ('Time', '==', '2012', ['!sports.pro_sports_played.career_end', 'sports.pro_sports_played.career_start'])]
          var_types: [{'sports.pro_sports_played'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_end ?o2 . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_start ?tm1 . } . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_end ?tm2 . } . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_end ?o2 . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_start ?tm1 . } . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_end ?tm2 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'2013'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 48 / 109: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.salary']), ('Time', '==', '2012', ['!base.schemastaging.athlete_salary.salary', 'base.schemastaging.athlete_salary.date'])]
          var_types: [{'base.schemastaging.athlete_salary'}, {'type.float'}]
          SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.salary ?o2 . OPTIONAL { ?o1 fb:base.schemastaging.athlete_salary.date ?tm1 . } . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.salary ?o2 . OPTIONAL { ?o1 fb:base.schemastaging.athlete_salary.date ?tm1 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'3e+06'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 49 / 109: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.team']), ('Time', '==', '2012', ['!base.schemastaging.athlete_salary.team', 'base.schemastaging.athlete_salary.date'])]
          var_types: [{'base.schemastaging.athlete_salary'}, {'base.schemastaging.sports_team_extra'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.team ?o2 . OPTIONAL { ?o1 fb:base.schemastaging.athlete_salary.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.team ?o2 . OPTIONAL { ?o1 fb:base.schemastaging.athlete_salary.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'LA Galaxy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.010s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.010s]
        Checking schema 50 / 109: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency']), ('Time', '==', '2012', ['!measurement_unit.dated_money_value.currency', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . OPTIONAL { ?o1 fb:measurement_unit.dated_money_value.valid_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . OPTIONAL { ?o1 fb:measurement_unit.dated_money_value.valid_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 51 / 109: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source']), ('Time', '==', '2012', ['!measurement_unit.dated_money_value.source', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . OPTIONAL { ?o1 fb:measurement_unit.dated_money_value.valid_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . OPTIONAL { ?o1 fb:measurement_unit.dated_money_value.valid_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'celebritynetworth.com'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 52 / 109: {
          [('Main', '==', 'm.02d9k', ['film.actor.film', 'film.performance.film']), ('Time', '==', '2012', ['film.film.initial_release_date'])]
          var_types: [{'film.performance'}, {'film.film'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . OPTIONAL { ?o2 fb:film.film.initial_release_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . OPTIONAL { ?o2 fb:film.film.initial_release_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 8
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 53 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.to']), ('Time', '==', '2012', ['!sports.sports_team_roster.to', 'sports.sports_team_roster.from'])]
          var_types: [{'sports.sports_team_roster'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . OPTIONAL { ?o1 fb:sports.sports_team_roster.from ?tm1 . } . OPTIONAL { ?o1 fb:sports.sports_team_roster.to ?tm2 . } . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . OPTIONAL { ?o1 fb:sports.sports_team_roster.from ?tm1 . } . OPTIONAL { ?o1 fb:sports.sports_team_roster.to ?tm2 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 9
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 54 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.team']), ('Time', '==', '2012', ['sports.sports_team.roster', 'sports.sports_team_roster.from'])]
          var_types: [{'sports.sports_team_roster'}, {'sports.sports_team'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . OPTIONAL { ?o1 fb:sports.sports_team_roster.from ?tm1 . } . OPTIONAL { ?o1 fb:sports.sports_team_roster.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . OPTIONAL { ?o1 fb:sports.sports_team_roster.from ?tm1 . } . OPTIONAL { ?o1 fb:sports.sports_team_roster.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 9
            Final Answer: {'LA Galaxy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.016s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.016s]
        Checking schema 55 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.team']), ('Time', '==', '2012', ['sports.sports_team.founded'])]
          var_types: [{'sports.sports_team_roster'}, {'sports.sports_team'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . OPTIONAL { ?o2 fb:sports.sports_team.founded ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . OPTIONAL { ?o2 fb:sports.sports_team.founded ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 8
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 56 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.places_lived', 'people.place_lived.location']), ('Time', '==', '2012', ['!people.place_lived.location', 'people.place_lived.start_date'])]
          var_types: [{'people.place_lived'}, {'location.location'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . OPTIONAL { ?o1 fb:people.place_lived.start_date ?tm1 . } . OPTIONAL { ?o1 fb:people.place_lived.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . OPTIONAL { ?o1 fb:people.place_lived.start_date ?tm1 . } . OPTIONAL { ?o1 fb:people.place_lived.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 57 / 109: {
          [('Main', '==', 'm.02d9k', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor']), ('Time', '==', '2012', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.from'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . OPTIONAL { ?o1 fb:tv.regular_tv_appearance.from ?tm1 . } . OPTIONAL { ?o1 fb:tv.regular_tv_appearance.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . OPTIONAL { ?o1 fb:tv.regular_tv_appearance.from ?tm1 . } . OPTIONAL { ?o1 fb:tv.regular_tv_appearance.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 58 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.spouse_s', 'people.marriage.from']), ('Time', '==', '2012', ['!people.marriage.from', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'1999'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 59 / 109: {
          [('Main', '==', 'm.02d9k', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode']), ('Time', '==', '2012', ['tv.tv_series_episode.air_date'])]
          var_types: [{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . OPTIONAL { ?o2 fb:tv.tv_series_episode.air_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . OPTIONAL { ?o2 fb:tv.tv_series_episode.air_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 60 / 109: {
          [('Main', '==', 'm.02d9k', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film']), ('Time', '==', '2012', ['film.film.initial_release_date'])]
          var_types: [{'film.personal_film_appearance'}, {'film.film'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . OPTIONAL { ?o2 fb:film.film.initial_release_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . OPTIONAL { ?o2 fb:film.film.initial_release_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 61 / 109: {
          [('Main', '==', 'm.02d9k', ['award.award_winner.awards_won', 'award.award_honor.award_winner']), ('Time', '==', '2012', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'award.award_winner'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . OPTIONAL { ?o1 fb:award.award_honor.year ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . OPTIONAL { ?o1 fb:award.award_honor.year ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 62 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.shops_at', 'base.popstra.shopping_choice.company']), ('Time', '==', '2012', ['base.popstra.company.shopping_choice', 'base.popstra.shopping_choice.date'])]
          var_types: [{'base.popstra.shopping_choice'}, {'base.popstra.company'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.shops_at ?o1 . ?o1 fb:base.popstra.shopping_choice.company ?o2 . OPTIONAL { ?o1 fb:base.popstra.shopping_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.shops_at ?o1 . ?o1 fb:base.popstra.shopping_choice.company ?o2 . OPTIONAL { ?o1 fb:base.popstra.shopping_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 63 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.supporter', 'base.popstra.support.supported_organization']), ('Time', '==', '2012', ['base.popstra.organization.supporter', 'base.popstra.support.start_date'])]
          var_types: [{'base.popstra.support'}, {'base.popstra.organization'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . OPTIONAL { ?o1 fb:base.popstra.support.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.support.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . OPTIONAL { ?o1 fb:base.popstra.support.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.support.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 64 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.perpetrator']), ('Time', '==', '2012', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.date'])]
          var_types: [{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . OPTIONAL { ?o1 fb:base.popstra.infidelity.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . OPTIONAL { ?o1 fb:base.popstra.infidelity.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 65 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.designer']), ('Time', '==', '2012', ['base.popstra.company.fashion_choice', 'base.popstra.fashion_choice.date'])]
          var_types: [{'base.popstra.fashion_choice'}, {'base.popstra.company'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.designer ?o2 . OPTIONAL { ?o1 fb:base.popstra.fashion_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.designer ?o2 . OPTIONAL { ?o1 fb:base.popstra.fashion_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 6
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 66 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.parties', 'base.popstra.party_attendance_person.person']), ('Time', '==', '2012', ['base.popstra.celebrity.parties', 'base.popstra.party_attendance_person.date'])]
          var_types: [{'base.popstra.party_attendance_person'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.person ?o2 . OPTIONAL { ?o1 fb:base.popstra.party_attendance_person.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.person ?o2 . OPTIONAL { ?o1 fb:base.popstra.party_attendance_person.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 67 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.bought', 'base.popstra.product_choice.consumer']), ('Time', '==', '2012', ['base.popstra.celebrity.bought', 'base.popstra.product_choice.date'])]
          var_types: [{'base.popstra.product_choice'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.bought ?o1 . ?o1 fb:base.popstra.product_choice.consumer ?o2 . OPTIONAL { ?o1 fb:base.popstra.product_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.bought ?o1 . ?o1 fb:base.popstra.product_choice.consumer ?o2 . OPTIONAL { ?o1 fb:base.popstra.product_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 68 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.location']), ('Time', '==', '2012', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.start_date'])]
          var_types: [{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . OPTIONAL { ?o1 fb:base.popstra.vacation_choice.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.vacation_choice.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . OPTIONAL { ?o1 fb:base.popstra.vacation_choice.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.vacation_choice.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 69 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.sport']), ('Time', '==', '2012', ['sports.sport.pro_athletes', 'sports.pro_sports_played.career_start'])]
          var_types: [{'sports.pro_sports_played'}, {'sports.sport'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_start ?tm1 . } . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_end ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_start ?tm1 . } . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_end ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Football'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 70 / 109: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.currency']), ('Time', '==', '2012', ['!base.schemastaging.athlete_salary.currency', 'base.schemastaging.athlete_salary.date'])]
          var_types: [{'base.schemastaging.athlete_salary'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.currency ?o2 . OPTIONAL { ?o1 fb:base.schemastaging.athlete_salary.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.currency ?o2 . OPTIONAL { ?o1 fb:base.schemastaging.athlete_salary.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 71 / 109: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.athlete']), ('Time', '==', '2012', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.date'])]
          var_types: [{'base.schemastaging.athlete_salary'}, {'base.schemastaging.athlete_extra'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.athlete ?o2 . OPTIONAL { ?o1 fb:base.schemastaging.athlete_salary.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.athlete ?o2 . OPTIONAL { ?o1 fb:base.schemastaging.athlete_salary.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'David Beckham'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 72 / 109: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date']), ('Time', '==', '2012', ['!measurement_unit.dated_money_value.valid_date', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . OPTIONAL { ?o1 fb:measurement_unit.dated_money_value.valid_date ?tm1 . } . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . OPTIONAL { ?o1 fb:measurement_unit.dated_money_value.valid_date ?tm1 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 73 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.teams', 'sports.sports_team_roster.position']), ('Time', '==', '2012', ['sports.sports_position.players', 'sports.sports_team_roster.from'])]
          var_types: [{'sports.sports_team_roster'}, {'sports.sports_position'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . OPTIONAL { ?o1 fb:sports.sports_team_roster.from ?tm1 . } . OPTIONAL { ?o1 fb:sports.sports_team_roster.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . OPTIONAL { ?o1 fb:sports.sports_team_roster.from ?tm1 . } . OPTIONAL { ?o1 fb:sports.sports_team_roster.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 9
            Final Answer: {'Midfielder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 74 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.employment_history', 'business.employment_tenure.person']), ('Time', '==', '2012', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: [{'business.employment_tenure'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . OPTIONAL { ?o1 fb:business.employment_tenure.from ?tm1 . } . OPTIONAL { ?o1 fb:business.employment_tenure.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . OPTIONAL { ?o1 fb:business.employment_tenure.from ?tm1 . } . OPTIONAL { ?o1 fb:business.employment_tenure.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 75 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.employment_history', 'business.employment_tenure.person']), ('Time', '==', '2012', ['people.person.date_of_birth'])]
          var_types: [{'business.employment_tenure'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 76 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.employment_history', 'business.employment_tenure.company']), ('Time', '==', '2012', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: [{'business.employment_tenure'}, {'business.employer'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . OPTIONAL { ?o1 fb:business.employment_tenure.from ?tm1 . } . OPTIONAL { ?o1 fb:business.employment_tenure.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . OPTIONAL { ?o1 fb:business.employment_tenure.from ?tm1 . } . OPTIONAL { ?o1 fb:business.employment_tenure.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 77 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.education', 'education.education.institution']), ('Time', '==', '2012', ['education.educational_institution.students_graduates', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.educational_institution'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . OPTIONAL { ?o1 fb:education.education.start_date ?tm1 . } . OPTIONAL { ?o1 fb:education.education.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . OPTIONAL { ?o1 fb:education.education.start_date ?tm1 . } . OPTIONAL { ?o1 fb:education.education.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 78 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.education', 'education.education.student']), ('Time', '==', '2012', ['people.person.education', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . OPTIONAL { ?o1 fb:education.education.start_date ?tm1 . } . OPTIONAL { ?o1 fb:education.education.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . OPTIONAL { ?o1 fb:education.education.start_date ?tm1 . } . OPTIONAL { ?o1 fb:education.education.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 79 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.education', 'education.education.student']), ('Time', '==', '2012', ['people.person.date_of_birth'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . OPTIONAL { ?o2 fb:people.person.date_of_birth ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 80 / 109: {
          [('Main', '==', 'm.02d9k', ['people.person.spouse_s', 'people.marriage.type_of_union']), ('Time', '==', '2012', ['people.marriage_union_type.unions_of_this_type', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'people.marriage_union_type'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . OPTIONAL { ?o1 fb:people.marriage.from ?tm1 . } . OPTIONAL { ?o1 fb:people.marriage.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 81 / 109: {
          [('Main', '==', 'm.02d9k', ['award.award_winner.awards_won', 'award.award_honor.award']), ('Time', '==', '2012', ['award.award_category.winners', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . OPTIONAL { ?o1 fb:award.award_honor.year ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . OPTIONAL { ?o1 fb:award.award_honor.year ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 82 / 109: {
          [('Main', '==', 'm.02d9k', ['award.award_winner.awards_won', 'award.award_honor.award']), ('Time', '==', '2012', ['award.award_category.date_discontinued'])]
          var_types: [{'award.award_honor'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . OPTIONAL { ?o2 fb:award.award_category.date_discontinued ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . OPTIONAL { ?o2 fb:award.award_category.date_discontinued ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 83 / 109: {
          [('Main', '==', 'm.02d9k', ['award.award_winner.awards_won', 'award.award_honor.award']), ('Time', '==', '2012', ['award.award_category.date_established'])]
          var_types: [{'award.award_honor'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . OPTIONAL { ?o2 fb:award.award_category.date_established ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . OPTIONAL { ?o2 fb:award.award_category.date_established ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 84 / 109: {
          [('Main', '==', 'm.02d9k', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in']), ('Time', '==', '2012', ['tv.tv_series_episode.air_date'])]
          var_types: [{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . OPTIONAL { ?o2 fb:tv.tv_series_episode.air_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . OPTIONAL { ?o2 fb:tv.tv_series_episode.air_date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 15
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 85 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.dated', 'base.popstra.dated.participant']), ('Time', '==', '2012', ['base.popstra.celebrity.dated', 'base.popstra.dated.start_date'])]
          var_types: [{'base.popstra.dated'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . OPTIONAL { ?o1 fb:base.popstra.dated.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.dated.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . OPTIONAL { ?o1 fb:base.popstra.dated.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.dated.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 86 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.insult_perpetrator', 'base.popstra.public_insult.perpetrator']), ('Time', '==', '2012', ['base.popstra.celebrity.insult_perpetrator', 'base.popstra.public_insult.date'])]
          var_types: [{'base.popstra.public_insult'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.perpetrator ?o2 . OPTIONAL { ?o1 fb:base.popstra.public_insult.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.perpetrator ?o2 . OPTIONAL { ?o1 fb:base.popstra.public_insult.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 87 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.insult_perpetrator', 'base.popstra.public_insult.victim']), ('Time', '==', '2012', ['base.popstra.celebrity.insult_victim', 'base.popstra.public_insult.date'])]
          var_types: [{'base.popstra.public_insult'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.victim ?o2 . OPTIONAL { ?o1 fb:base.popstra.public_insult.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.victim ?o2 . OPTIONAL { ?o1 fb:base.popstra.public_insult.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 88 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.defendant']), ('Time', '==', '2012', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.start_date'])]
          var_types: [{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . OPTIONAL { ?o1 fb:base.popstra.legal_dispute.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.legal_dispute.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . OPTIONAL { ?o1 fb:base.popstra.legal_dispute.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.legal_dispute.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 89 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.shops_at', 'base.popstra.shopping_choice.shopper']), ('Time', '==', '2012', ['base.popstra.celebrity.shops_at', 'base.popstra.shopping_choice.date'])]
          var_types: [{'base.popstra.shopping_choice'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.shops_at ?o1 . ?o1 fb:base.popstra.shopping_choice.shopper ?o2 . OPTIONAL { ?o1 fb:base.popstra.shopping_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.shops_at ?o1 . ?o1 fb:base.popstra.shopping_choice.shopper ?o2 . OPTIONAL { ?o1 fb:base.popstra.shopping_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 90 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.endorsements', 'base.popstra.paid_support.company']), ('Time', '==', '2012', ['base.popstra.company.product_endorser', 'base.popstra.paid_support.start_date'])]
          var_types: [{'base.popstra.paid_support'}, {'base.popstra.company'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.endorsements ?o1 . ?o1 fb:base.popstra.paid_support.company ?o2 . OPTIONAL { ?o1 fb:base.popstra.paid_support.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.paid_support.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.endorsements ?o1 . ?o1 fb:base.popstra.paid_support.company ?o2 . OPTIONAL { ?o1 fb:base.popstra.paid_support.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.paid_support.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 4
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 91 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.supporter', 'base.popstra.support.supporter']), ('Time', '==', '2012', ['base.popstra.celebrity.supporter', 'base.popstra.support.start_date'])]
          var_types: [{'base.popstra.support'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . OPTIONAL { ?o1 fb:base.popstra.support.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.support.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . OPTIONAL { ?o1 fb:base.popstra.support.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.support.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 92 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.hangout', 'base.popstra.hangout.business_location']), ('Time', '==', '2012', ['base.popstra.business_location.customer', 'base.popstra.hangout.date'])]
          var_types: [{'base.popstra.hangout'}, {'base.popstra.business_location'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.hangout ?o1 . ?o1 fb:base.popstra.hangout.business_location ?o2 . OPTIONAL { ?o1 fb:base.popstra.hangout.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.hangout ?o1 . ?o1 fb:base.popstra.hangout.business_location ?o2 . OPTIONAL { ?o1 fb:base.popstra.hangout.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 93 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.infidelity_participant', 'base.popstra.infidelity.participant']), ('Time', '==', '2012', ['base.popstra.celebrity.infidelity_participant', 'base.popstra.infidelity.date'])]
          var_types: [{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_participant ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . OPTIONAL { ?o1 fb:base.popstra.infidelity.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_participant ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . OPTIONAL { ?o1 fb:base.popstra.infidelity.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 94 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.participant']), ('Time', '==', '2012', ['base.popstra.celebrity.infidelity_participant', 'base.popstra.infidelity.date'])]
          var_types: [{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . OPTIONAL { ?o1 fb:base.popstra.infidelity.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . OPTIONAL { ?o1 fb:base.popstra.infidelity.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 95 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.diner']), ('Time', '==', '2012', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.date'])]
          var_types: [{'base.popstra.restaurant_choice'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.diner ?o2 . OPTIONAL { ?o1 fb:base.popstra.restaurant_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.diner ?o2 . OPTIONAL { ?o1 fb:base.popstra.restaurant_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 96 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.date']), ('Time', '==', '2012', ['!base.popstra.canoodled.date', 'base.popstra.canoodled.date'])]
          var_types: [{'base.popstra.canoodled'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.date ?o2 . OPTIONAL { ?o1 fb:base.popstra.canoodled.date ?tm1 . } . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.date ?o2 . OPTIONAL { ?o1 fb:base.popstra.canoodled.date ?tm1 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 97 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.parties', 'base.popstra.party_attendance_person.party']), ('Time', '==', '2012', ['base.popstra.party.celebrities', 'base.popstra.party_attendance_person.date'])]
          var_types: [{'base.popstra.party_attendance_person'}, {'base.popstra.party'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.party ?o2 . OPTIONAL { ?o1 fb:base.popstra.party_attendance_person.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.party ?o2 . OPTIONAL { ?o1 fb:base.popstra.party_attendance_person.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 98 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.parties', 'base.popstra.party_attendance_person.party']), ('Time', '==', '2012', ['base.popstra.party.date'])]
          var_types: [{'base.popstra.party_attendance_person'}, {'base.popstra.party'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.party ?o2 . OPTIONAL { ?o2 fb:base.popstra.party.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.party ?o2 . OPTIONAL { ?o2 fb:base.popstra.party.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 99 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.bought', 'base.popstra.product_choice.product']), ('Time', '==', '2012', ['base.popstra.product.sold_to', 'base.popstra.product_choice.date'])]
          var_types: [{'base.popstra.product_choice'}, {'base.popstra.product'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.bought ?o1 . ?o1 fb:base.popstra.product_choice.product ?o2 . OPTIONAL { ?o1 fb:base.popstra.product_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 WHERE { fb:m.02d9k fb:base.popstra.celebrity.bought ?o1 . ?o1 fb:base.popstra.product_choice.product ?o2 . OPTIONAL { ?o1 fb:base.popstra.product_choice.date ?tm1 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Current: 100 / 109
        Checking schema 100 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.vacationer']), ('Time', '==', '2012', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.start_date'])]
          var_types: [{'base.popstra.vacation_choice'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . OPTIONAL { ?o1 fb:base.popstra.vacation_choice.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.vacation_choice.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . OPTIONAL { ?o1 fb:base.popstra.vacation_choice.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.vacation_choice.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 101 / 109: {
          [('Main', '==', 'm.02d9k', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.member']), ('Time', '==', '2012', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.start_date'])]
          var_types: [{'base.popstra.religion_choice'}, {'base.popstra.celebrity'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . OPTIONAL { ?o1 fb:base.popstra.religion_choice.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.religion_choice.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . OPTIONAL { ?o1 fb:base.popstra.religion_choice.start_date ?tm1 . } . OPTIONAL { ?o1 fb:base.popstra.religion_choice.end_date ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 102 / 109: {
          [('Main', '==', 'm.02d9k', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.career_start']), ('Time', '==', '2012', ['!sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_start'])]
          var_types: [{'sports.pro_sports_played'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_start ?o2 . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_start ?tm1 . } . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_end ?tm2 . } . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_start ?o2 . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_start ?tm1 . } . OPTIONAL { ?o1 fb:sports.pro_sports_played.career_end ?tm2 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 1
            Final Answer: {'1992'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 103 / 109: {
          [('Main', '==', 'm.02d9k', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.date']), ('Time', '==', '2012', ['!base.schemastaging.athlete_salary.date', 'base.schemastaging.athlete_salary.date'])]
          var_types: [{'base.schemastaging.athlete_salary'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.date ?o2 . OPTIONAL { ?o1 fb:base.schemastaging.athlete_salary.date ?tm1 . } . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 WHERE { fb:m.02d9k fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.date ?o2 . OPTIONAL { ?o1 fb:base.schemastaging.athlete_salary.date ?tm1 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 3
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 104 / 109: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.loans', 'soccer.football_player_loan.to']), ('Time', '==', '2012', ['!soccer.football_player_loan.to', 'soccer.football_player_loan.from'])]
          var_types: [{'soccer.football_player_loan'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.to ?o2 . OPTIONAL { ?o1 fb:soccer.football_player_loan.from ?tm1 . } . OPTIONAL { ?o1 fb:soccer.football_player_loan.to ?tm2 . } . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.to ?o2 . OPTIONAL { ?o1 fb:soccer.football_player_loan.from ?tm1 . } . OPTIONAL { ?o1 fb:soccer.football_player_loan.to ?tm2 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 105 / 109: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.loans', 'soccer.football_player_loan.lending_team']), ('Time', '==', '2012', ['soccer.football_team.loaned_players', 'soccer.football_player_loan.from'])]
          var_types: [{'soccer.football_player_loan'}, {'soccer.football_team'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.lending_team ?o2 . OPTIONAL { ?o1 fb:soccer.football_player_loan.from ?tm1 . } . OPTIONAL { ?o1 fb:soccer.football_player_loan.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.lending_team ?o2 . OPTIONAL { ?o1 fb:soccer.football_player_loan.from ?tm1 . } . OPTIONAL { ?o1 fb:soccer.football_player_loan.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 106 / 109: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.loans', 'soccer.football_player_loan.borrowing_team']), ('Time', '==', '2012', ['soccer.football_team.borrowed_players', 'soccer.football_player_loan.from'])]
          var_types: [{'soccer.football_player_loan'}, {'soccer.football_team'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.borrowing_team ?o2 . OPTIONAL { ?o1 fb:soccer.football_player_loan.from ?tm1 . } . OPTIONAL { ?o1 fb:soccer.football_player_loan.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.borrowing_team ?o2 . OPTIONAL { ?o1 fb:soccer.football_player_loan.from ?tm1 . } . OPTIONAL { ?o1 fb:soccer.football_player_loan.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 107 / 109: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.loans', 'soccer.football_player_loan.player']), ('Time', '==', '2012', ['soccer.football_player.loans', 'soccer.football_player_loan.from'])]
          var_types: [{'soccer.football_player_loan'}, {'soccer.football_player'}]
          SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.player ?o2 . OPTIONAL { ?o1 fb:soccer.football_player_loan.from ?tm1 . } . OPTIONAL { ?o1 fb:soccer.football_player_loan.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?n2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.player ?o2 . OPTIONAL { ?o1 fb:soccer.football_player_loan.from ?tm1 . } . OPTIONAL { ?o1 fb:soccer.football_player_loan.to ?tm2 . } . ?o2 fb:type.object.name ?n2 . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 108 / 109: {
          [('Main', '==', 'm.02d9k', ['soccer.football_player.loans', 'soccer.football_player_loan.from']), ('Time', '==', '2012', ['!soccer.football_player_loan.from', 'soccer.football_player_loan.from'])]
          var_types: [{'soccer.football_player_loan'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.from ?o2 . OPTIONAL { ?o1 fb:soccer.football_player_loan.from ?tm1 . } . OPTIONAL { ?o1 fb:soccer.football_player_loan.to ?tm2 . } . }
          [2020-12-03 14:19:04] Q_Schema Request: {
            WebQ_1589|SELECT DISTINCT ?o2 ?tm1 ?tm2 WHERE { fb:m.02d9k fb:soccer.football_player.loans ?o1 . ?o1 fb:soccer.football_player_loan.from ?o2 . OPTIONAL { ?o1 fb:soccer.football_player_loan.from ?tm1 . } . OPTIONAL { ?o1 fb:soccer.football_player_loan.to ?tm2 . } . }|==|2012_2012|Fhalf|None||None
            Forbidden mid: {'m.02d9k'}
            Query return lines = 2
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        22 / 109 timed schemas kept with ans_size > 0.
      } [1.402s]
      Time level ended, resulting in 154 schemas.
    } [1.425s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 154
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'royalty.royal_line.ruled_to', 'royalty.royal_line.ruled_from'}]
[set()]
[{'film.film.initial_release_date'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[{'user.uoa_it.uoa_it.uoa_application.purchase_date'}]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[{'media_common.quotation.date'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
[{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
[{'base.popstra.paid_support.end_date', 'base.popstra.paid_support.start_date'}, set()]
[{'base.popstra.hangout.date'}, set()]
[{'base.popstra.restaurant_choice.date'}, set()]
[{'base.popstra.canoodled.date'}, set()]
[{'base.popstra.fashion_choice.date'}, set()]
[{'base.popstra.religion_choice.start_date', 'base.popstra.religion_choice.end_date'}, set()]
[set(), set()]
[set(), set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'base.popstra.shopping_choice.date'}, set()]
[{'base.popstra.support.start_date', 'base.popstra.support.end_date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.fashion_choice.date'}, set()]
[{'base.popstra.party_attendance_person.date'}, set()]
[{'base.popstra.product_choice.date'}, set()]
[{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
      Current: 100 / 154
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'tv.tv_series_episode.air_date'}]
[{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
[{'base.popstra.public_insult.date'}, set()]
[{'base.popstra.public_insult.date'}, set()]
[{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
[{'base.popstra.shopping_choice.date'}, set()]
[{'base.popstra.paid_support.end_date', 'base.popstra.paid_support.start_date'}, set()]
[{'base.popstra.support.start_date', 'base.popstra.support.end_date'}, set()]
[{'base.popstra.hangout.date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.restaurant_choice.date'}, set()]
[{'base.popstra.canoodled.date'}, set()]
[{'base.popstra.party_attendance_person.date'}, {'base.popstra.party.date'}]
[{'base.popstra.product_choice.date'}, set()]
[{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
[{'base.popstra.religion_choice.start_date', 'base.popstra.religion_choice.end_date'}, set()]
[set(), set()]
[set(), set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'soccer.football_player_loan.to', 'soccer.football_player_loan.from'}, set()]
[{'soccer.football_player_loan.to', 'soccer.football_player_loan.from'}, set()]
[{'soccer.football_player_loan.to', 'soccer.football_player_loan.from'}, set()]
[{'soccer.football_player_loan.to', 'soccer.football_player_loan.from'}, set()]
[{'soccer.football_player_loan.to', 'soccer.football_player_loan.from'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
      0 ordinal schemas retrieved from 154 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 154 schemas.
    } [0.004s]
    [2020-12-03 14:19:04] buffer saved.
    154 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1589_schema].
  } [12.078s]
  Entering Q 1590 / 5810 [b'when and where did the battle of antietam take place?']: {
    Show 1 E + 10 T + 0 Tm + 0 Ord = 11 linkings: {
      #00 Entity: [5, 8) (battle of antietam) == m.0lkxb (Battle_of_Antietam) {'score': 20130.653861, 'source': 0.0}
      #01 Type: [4, 7) (the battle of) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.819894}
      #02 Type: [6, 7) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #03 Type: [6, 7) (of) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.816341}
      #04 Type: [9, 10) (place) == people.place_lived (place lived) {'sim': 0.803792}
      #05 Type: [9, 10) (place) == religion.place_of_worship (place of worship) {'sim': 0.774201}
      #06 Type: [9, 10) (place) == location.place_with_neighborhoods (place with neighborhoods) {'sim': 0.765839}
      #07 Type: [6, 7) (of) == measurement_unit.time_unit (unit of time) {'sim': 0.759887}
      #08 Type: [4, 7) (the battle of) == people.cause_of_death (cause of death) {'sim': 0.759329}
      #09 Type: [4, 7) (the battle of) == military.military_unit_place_of_origin (military unit place of origin) {'sim': 0.754689}
      #10 Type: [8, 10) (take place) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.754406}
    } [0.000s]
    11 link data save to file.
    Coarse level searching (total entities = 1): {
      [Len-1||F1/1] (2020-12-03 14:19:14) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0lkxb ?p1 ?o1 . }
        [2020-12-03 14:19:14] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0lkxb ?p1 ?o1 . }
          Query return lines = 18
        } [0.011s]
        Filt_Query_Ret = 9 / 18 ( 0.011s)
      } [0.011s]
      [Len-2||F1/1] (2020-12-03 14:19:14) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0lkxb ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:14] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0lkxb ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 221
        } [0.010s]
        Filt_Query_Ret = 5 / 221 ( 0.011s)
      } [0.011s]
      14 coarse schemas retrieved from scratch.
      Calculating F1 for 14 coarse schemas: {
        Current: 0 / 14
        Checking schema 0 / 14: {
          [('Main', '==', 'm.0lkxb', ['time.event.locations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:time.event.locations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:time.event.locations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 1
            Final Answer: {'Sharpsburg'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.009s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.009s]
        Checking schema 1 / 14: {
          [('Main', '==', 'm.0lkxb', ['time.event.start_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0lkxb fb:time.event.start_date ?o1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 WHERE { fb:m.0lkxb fb:time.event.start_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 1
            Final Answer: {'1862'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 2 / 14: {
          [('Main', '==', 'm.0lkxb', ['time.event.included_in_event'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:time.event.included_in_event ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:time.event.included_in_event ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 2
            Final Answer: {'American Civil War', 'Maryland Campaign'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 14: {
          [('Main', '==', 'm.0lkxb', ['military.military_conflict.military_personnel_involved'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:military.military_conflict.military_personnel_involved ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:military.military_conflict.military_personnel_involved ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 1
            Final Answer: {'Nelson A. Miles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 4 / 14: {
          [('Main', '==', 'm.0lkxb', ['base.culturalevent.event.event_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:base.culturalevent.event.event_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:base.culturalevent.event.event_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 5 / 14: {
          [('Main', '==', 'm.0lkxb', ['base.americancivilwar.battle.military_units_involved_in_this_conflict'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:base.americancivilwar.battle.military_units_involved_in_this_conflict ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:base.americancivilwar.battle.military_units_involved_in_this_conflict ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 4
            Final Answer: {'14th Louisiana Infantry Regiment', '15th Louisiana Infantry Regiment', '2nd Louisiana Infantry Regiment', '10th Louisiana Infantry'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 6 / 14: {
          [('Main', '==', 'm.0lkxb', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 1
            Final Answer: {'Crossroads of Freedom: Antietam, The Battle that Changed the Course of the Civil War'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 7 / 14: {
          [('Main', '==', 'm.0lkxb', ['time.event.end_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0lkxb fb:time.event.end_date ?o1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 WHERE { fb:m.0lkxb fb:time.event.end_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 1
            Final Answer: {'1862'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 8 / 14: {
          [('Main', '==', 'm.0lkxb', ['base.culturalevent.event.entity_involved'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:base.culturalevent.event.entity_involved ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:base.culturalevent.event.entity_involved ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 3
            Final Answer: {'Union', 'George B. McClellan', 'Robert E. Lee'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 9 / 14: {
          [('Main', '==', 'm.0lkxb', ['military.military_conflict.combatants', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lkxb fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lkxb fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 1
            Final Answer: {'Battle of Antietam'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 14: {
          [('Main', '==', 'm.0lkxb', ['military.military_conflict.combatants', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lkxb fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lkxb fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 3
            Final Answer: {'Confederate States of America', 'United States of America', 'Union'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 11 / 14: {
          [('Main', '==', 'm.0lkxb', ['military.military_conflict.commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lkxb fb:military.military_conflict.commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lkxb fb:military.military_conflict.commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 1
            Final Answer: {'Battle of Antietam'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 12 / 14: {
          [('Main', '==', 'm.0lkxb', ['military.military_conflict.commanders', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lkxb fb:military.military_conflict.commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lkxb fb:military.military_conflict.commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 2
            Final Answer: {'United States of America', 'Confederate States of America'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 13 / 14: {
          [('Main', '==', 'm.0lkxb', ['military.military_conflict.commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lkxb fb:military.military_conflict.commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lkxb fb:military.military_conflict.commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 2
            Final Answer: {'George B. McClellan', 'Robert E. Lee'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        13 / 14 coarse schemas kept with ans_size > 0.
      } [0.081s]
      Coarse level ended, resulting in 13 schemas.
    } [0.103s]
    Type level searching (total types = 10): {
      Current: 0 / 13
[{'location.location'}]
[{'type.datetime'}]
[{'time.event'}]
[{'military.military_person'}]
[{'base.americancivilwar.military_unit'}]
[{'book.written_work'}]
[{'type.datetime'}]
[{'common.topic'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'military.military_command'}, {'military.military_commander'}]
      2 typed schemas retrieved from 13 coarse schemas.
      Calculating F1 for 2 typed schemas: {
        Current: 0 / 2
        Checking schema 0 / 2: {
          [('Main', '==', 'm.0lkxb', ['time.event.locations']), ('Type', '==', 'religion.place_of_worship', ['type.object.type'])]
          var_types: [{'religion.place_of_worship', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:time.event.locations ?o1 . ?o1 fb:type.object.type fb:religion.place_of_worship . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:time.event.locations ?o1 . ?o1 fb:type.object.type fb:religion.place_of_worship . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 1 / 2: {
          [('Main', '==', 'm.0lkxb', ['time.event.locations']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:time.event.locations ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:14] Q_Schema Request: {
            WebQ_1590|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lkxb fb:time.event.locations ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lkxb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        0 / 2 typed schemas kept with ans_size > 0.
      } [0.010s]
      Typed level ended, resulting in 13 schemas.
    } [0.011s]
    Time level searching (total times = 0): {
      Current: 0 / 13
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 13 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 13 schemas.
    } [0.000s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 13
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
      0 ordinal schemas retrieved from 13 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 13 schemas.
    } [0.000s]
    [2020-12-03 14:19:14] buffer saved.
    13 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1590_schema].
  } [1.735s]
  Entering Q 1591 / 5810 [b'what movies did jj abrams direct?']: {
    Show 1 E + 10 T + 0 Tm + 0 Ord = 11 linkings: {
      #00 Entity: [3, 5) (jj abrams) == m.01xndd (J._J._Abrams) {'score': 33459.246576, 'source': 0.0}
      #01 Type: [0, 2) (what movies) == music.music_video_character (music video character) {'sim': 0.701652}
      #02 Type: [2, 3) (did) == media_common.lost_work (lost work) {'sim': 0.700947}
      #03 Type: [0, 2) (what movies) == film.film_job (film job) {'sim': 0.696742}
      #04 Type: [0, 2) (what movies) == music.music_video_job (music video job) {'sim': 0.682082}
      #05 Type: [0, 2) (what movies) == cvg.game_voice_actor (video game actor) {'sim': 0.674687}
      #06 Type: [0, 2) (what movies) == film.film_song_relationship (film song relationship) {'sim': 0.674677}
      #07 Type: [1, 2) (movies) == tv.tv_soundtrack (tv soundtrack) {'sim': 0.665652}
      #08 Type: [0, 2) (what movies) == music.music_video_genre (music video genre) {'sim': 0.663912}
      #09 Type: [0, 3) (what movies did) == tv.tv_episode_song_relationship (tv episode song relationship) {'sim': 0.663637}
      #10 Type: [0, 2) (what movies) == music.music_video_subject (music video subject) {'sim': 0.662499}
    } [0.000s]
    11 link data save to file.
    Coarse level searching (total entities = 1): {
      [Len-1||F1/1] (2020-12-03 14:19:15) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01xndd ?p1 ?o1 . }
        [2020-12-03 14:19:15] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01xndd ?p1 ?o1 . }
          Query return lines = 47
        } [0.005s]
        Filt_Query_Ret = 23 / 47 ( 0.005s)
      } [0.005s]
      [Len-2||F1/1] (2020-12-03 14:19:15) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01xndd ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:15] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01xndd ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 950
        } [0.114s]
        Filt_Query_Ret = 47 / 950 ( 0.118s)
      } [0.118s]
      70 coarse schemas retrieved from scratch.
      Calculating F1 for 70 coarse schemas: {
        Current: 0 / 70
        Checking schema 0 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_writer.episodes_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:tv.tv_writer.episodes_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:tv.tv_writer.episodes_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 49
            Final Answer: {'The Slump (2)', 'Ben Was Here', 'Sophomoric', 'The Enemy Walks In', 'The Biggest Deal There Is', 'Friends', 'Pilot', 'Bound', 'Todd Mulcahy (1)', 'Q & A', 'Hot Objects', 'Unaired Pilot', 'Help for the Lovelorn', 'The Last Stand', 'Pilot (2)', 'A New Day in the Old Town', 'Drawing the Line (1)', 'The Two', 'The Depths', 'Cheating', 'The Same Old Story', 'Thanksgiving', 'Almost Thirty Years', 'So It Begins', 'The Declaration', 'Phase One', 'Authorized Personnel Only (1)', 'The Force', 'All The Time In The World', 'A Tale of Two Cities', 'The Christening', 'Connections', 'The Arrival', 'The Confession', 'One Ball, Two Strikes', 'Docuventary II', 'Truth Be Told', 'In Which We Meet Mr. Jones', 'The Telling', 'The Love Bug', 'Page 47', 'The Ghost Network', 'Happy Birthday', 'Spirit', 'Love and Marriage', 'Authorized Personnel Only (2)', 'Letters of Transit'}
            Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 1 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_director.episodes_directed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:tv.tv_director.episodes_directed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:tv.tv_director.episodes_directed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 8
            Final Answer: {'The Telling', 'Todd Mulcahy (1)', 'Cocktails', 'Pilot (2)', 'Friends', 'Pilot', 'Almost Thirty Years', 'Truth Be Told'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 2 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01xndd fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 WHERE { fb:m.01xndd fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'1966'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 3 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 4 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Jewish people', 'German American'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 5 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Carol Abrams', 'Gerald W. Abrams'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 6 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Judaism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 7 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01xndd fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 WHERE { fb:m.01xndd fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'1.7'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 8 / 70: {
          [('Main', '==', 'm.01xndd', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 5
            Final Answer: {'Alias', 'Main Title', 'Fringe Main Title Theme', 'Fringe 85'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 9 / 70: {
          [('Main', '==', 'm.01xndd', ['film.producer.films_executive_produced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:film.producer.films_executive_produced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:film.producer.films_executive_produced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Animated Alias: Tribunal', 'Forever Young'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 10 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 3
            Final Answer: {'Gracie Abrams', 'August Abrams', 'Henry Abrams'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 11 / 70: {
          [('Main', '==', 'm.01xndd', ['film.director.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 6
            Final Answer: {'Super 8', 'Mission: Impossible III', 'Anatomy of Hope', 'Star Trek', 'Star Trek into Darkness', 'Star Wars Episode VII'}
            Answers = 6, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.020s]
          Answers = 6, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.020s]
        Checking schema 12 / 70: {
          [('Main', '==', 'm.01xndd', ['fictional_universe.fictional_universe_creator.fictional_universes_created'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:fictional_universe.fictional_universe_creator.fictional_universes_created ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:fictional_universe.fictional_universe_creator.fictional_universes_created ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Lost'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 13 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_program_creator.programs_created'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:tv.tv_program_creator.programs_created ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:tv.tv_program_creator.programs_created ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 7
            Final Answer: {'Alias', 'Felicity', 'Undercovers', 'Odd Jobs', 'Lost', 'Fringe', 'The Catch'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 14 / 70: {
          [('Main', '==', 'm.01xndd', ['film.producer.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:film.producer.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:film.producer.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 11
            Final Answer: {'Super 8', 'Untitled Cloverfield Sequel', 'The Suburbans', 'Star Trek', 'Mission: Impossible – Ghost Protocol', 'Star Trek into Darkness', 'Regarding Henry', 'Cloverfield', 'Morning Glory', 'The Pallbearer', 'Joy Ride'}
            Answers = 11, P = 0.272727, R = 0.500000, F1 = 0.352941
          } [0.020s]
          Answers = 11, P = 0.272727, R = 0.500000, F1 = 0.352941
        } [0.020s]
        Checking schema 15 / 70: {
          [('Main', '==', 'm.01xndd', ['music.composer.compositions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:music.composer.compositions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:music.composer.compositions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Fringe Theme Song', 'Person of Interest Theme Song'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 16 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 7
            Final Answer: {'Television Producer', 'Television Director', 'Screenwriter', 'Composer', 'Film Producer', 'Film Director', 'Actor'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 17 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 18 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'New York City'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 19 / 70: {
          [('Main', '==', 'm.01xndd', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Bad Robot Productions'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 20 / 70: {
          [('Main', '==', 'm.01xndd', ['film.film_story_contributor.film_story_credits'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:film.film_story_contributor.film_story_credits ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:film.film_story_contributor.film_story_credits ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Super 8', 'The Catch'}
            Answers = 2, P = 0.500000, R = 0.166667, F1 = 0.250000
          } [0.012s]
          Answers = 2, P = 0.500000, R = 0.166667, F1 = 0.250000
        } [0.012s]
        Checking schema 21 / 70: {
          [('Main', '==', 'm.01xndd', ['fictional_universe.fictional_character_creator.fictional_characters_created'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 15
            Final Answer: {'John Scott', 'Sanford Harris', 'Amy Jessup', 'Nina Sharp', 'Astrid Farnsworth', 'Clover', 'Charlie Francis', 'David Robert Jones', 'Peter Bishop', 'Olivia Dunham', 'Rachel Dunham', 'Dr. William Bell', 'The Observer', 'Phillip Broyles', 'Walter Bishop'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 22 / 70: {
          [('Main', '==', 'm.01xndd', ['film.writer.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:film.writer.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:15] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:film.writer.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 9
            Final Answer: {'Super 8', 'Taking Care of Business', 'Mission: Impossible III', 'Forever Young', 'Regarding Henry', 'Joy Ride', 'The Catch', 'Armageddon', "Gone Fishin'"}
            Answers = 9, P = 0.222222, R = 0.333333, F1 = 0.266667
          } [0.009s]
          Answers = 9, P = 0.222222, R = 0.333333, F1 = 0.266667
        } [0.009s]
        Checking schema 23 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 24 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 11
            Final Answer: {'Razzie Award for Worst Screenplay', 'Directors Guild of America Award for Outstanding Directing – Drama Series', 'Primetime Emmy Award for Outstanding Drama Series', 'British Academy Television International Award', 'Golden Globe Award for Best Television Series – Drama', 'Norman Felton Producer of the Year Award in Episodic Television - Drama', 'Producers Guild of America Award for Best Theatrical Motion Picture', 'PGA Lifetime Achievement Award in Television', 'SFX Award for Best Film Director', 'Primetime Emmy Award for Outstanding Directing for a Drama Series', 'Primetime Emmy Award for Outstanding Writing for a Drama Series'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 25 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Tracy Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 26 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'HypaSpace', 'Star Wars: The Legacy Revealed'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 27 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Katie McGrath'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 28 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 29 / 70: {
          [('Main', '==', 'm.01xndd', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 30 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 4
            Final Answer: {'2006', '2005', '2010', '2013'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 31 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_winner.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 32 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Star Trek', 'Lost'}
            Answers = 2, P = 0.500000, R = 0.166667, F1 = 0.250000
          } [0.015s]
          Answers = 2, P = 0.500000, R = 0.166667, F1 = 0.250000
        } [0.016s]
        Checking schema 33 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_writer.tv_programs', 'tv.tv_program_writer_relationship.tv_program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.tv_program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.tv_program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 3
            Final Answer: {'Alias', 'Lost', 'Fringe'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 34 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_writer.tv_programs', 'tv.tv_program_writer_relationship.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.start_date ?o2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'2004'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 35 / 70: {
          [('Main', '==', 'm.01xndd', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Matt Reeves'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 36 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 37 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.to ?o2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 38 / 70: {
          [('Main', '==', 'm.01xndd', ['business.board_member.leader_of', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Chief Executive Officer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 39 / 70: {
          [('Main', '==', 'm.01xndd', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 3
            Final Answer: {'Six Degrees of Separation', 'Regarding Henry', 'Blood, Boobs & Beast'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 40 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'New York City', 'Pacific Palisades'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 41 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 5
            Final Answer: {'Alias', 'Felicity', 'Star Trek', 'Lost', 'Armageddon'}
            Answers = 5, P = 0.200000, R = 0.166667, F1 = 0.181818
          } [0.040s]
          Answers = 5, P = 0.200000, R = 0.166667, F1 = 0.181818
        } [0.040s]
        Checking schema 42 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 11
            Final Answer: {'2008', '2013', '2002', '1998', '2006', '1999', '2005', '2009', '2004', '2007', '2010'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 43 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 44 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'1996'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 45 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams; Tom Bergeron; Internet dating sites; anxiety; fixing finances'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 46 / 70: {
          [('Main', '==', 'm.01xndd', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 6
            Final Answer: {'POM Wonderful Presents: The Greatest Movie Ever Sold', 'Industrial Light & Magic: Creating the Impossible', 'Reinventando Hollywood', 'Trek Nation', 'Blood, Boobs & Beast', 'Star Trek: Gag Reel'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 47 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 28
            Final Answer: {'Damon Lindelof', 'Carlton Cuse', 'Brent Fletcher', 'Christian Taylor', 'Jean Higgins', 'Kim Clements', 'Edward Kitsis', 'Janet Tamaro', 'Lynne E. Litt', 'Steven Maeda', 'Jennifer M. Johnson', 'Jeff Pinkner', 'Christina M. Kim', 'David Fury', 'Paul Dini', 'Bryan Burk', 'Sarah Caplan', 'Javier Grillo-Marxuach', 'Jesse Alexander', 'Leonard Dick', 'Jeffrey Lieber', 'Drew Goddard', 'Adam Horowitz', 'Elizabeth Sarnoff', 'Monica Macer', 'Jack Bender', 'Craig Wright'}
            Answers = 27, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 27, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 48 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 5
            Final Answer: {'57th Primetime Emmy Awards', 'Producers Guild of America Awards 2012', 'Writers Guild of America Awards 2005', 'Producers Guild of America Awards 2005', '63rd Golden Globe Awards'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 49 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 50 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Executive Producer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 51 / 70: {
          [('Main', '==', 'm.01xndd', ['business.board_member.leader_of', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Bad Robot Productions'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 52 / 70: {
          [('Main', '==', 'm.01xndd', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Doug', 'Delivery Boy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 53 / 70: {
          [('Main', '==', 'm.01xndd', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 54 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 55 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Bad Robot Productions'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 56 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 2
            Final Answer: {'Palisades Charter High School', 'Sarah Lawrence College'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 57 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 58 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 30
            Final Answer: {'Damon Lindelof', 'Carlton Cuse', 'Jean Higgins', 'Ron Howard', 'Edward Kitsis', 'Matt Reeves', 'Jonathan Hensleigh', 'Brian Grazer', 'Jeff Pinkner', 'Melinda Hsu Taylor', 'David Fury', 'Brian K. Vaughan', 'Stephen Williams', 'Bryan Burk', 'Sarah Caplan', 'Javier Grillo-Marxuach', 'Jesse Alexander', 'Paul Zbyszewski', 'Leonard Dick', 'Jeffrey Lieber', 'Tony Krantz', 'John Eisendrath', 'Drew Goddard', 'Adam Horowitz', 'Ken Olin', 'Elizabeth Sarnoff', 'Pat Churchill', 'Jack Bender', 'Ra’uf Glasgow'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 59 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_nominee.award_nominations', 'award.award_nomination.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 60 / 70: {
          [('Main', '==', 'm.01xndd', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 61 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Celebrity guest'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 62 / 70: {
          [('Main', '==', 'm.01xndd', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 63 / 70: {
          [('Main', '==', 'm.01xndd', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 7
            Final Answer: {'Primetime Emmy Award for Outstanding Drama Series', 'Writers Guild of America Award for Television: Dramatic Series', 'Golden Globe Award for Best Television Series – Drama', 'Norman Felton Producer of the Year Award in Episodic Television - Drama', 'PGA Lifetime Achievement Award in Television', 'SFX Award for Best Film Director', 'Primetime Emmy Award for Outstanding Directing for a Drama Series'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 64 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 8
            Final Answer: {'J.J. Abrams', 'J.J. Abrams, Lost', 'J.J. Abrams, Colin Quinn, Sharon Jones & the Dap-Kings', 'Dominic Monaghan, J.J. Abrams, Taking Back Sunday', 'Sheryl WuDunn', 'J.J. Abrams, Geraldo Rivera and Jeanine Pirro, Alec Greven, Jacques Torres'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 65 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_writer.tv_programs', 'tv.tv_program_writer_relationship.writer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.writer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.writer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 66 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_writer.tv_programs', 'tv.tv_program_writer_relationship.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.end_date ?o2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 67 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 13
            Final Answer: {'Revolution', 'What About Brian', 'Person of Interest', 'Alias', 'Felicity', 'Undercovers', 'Alcatraz', 'Anatomy of Hope', 'Lost', 'Boundaries', 'Fringe', 'Six Degrees', 'Lost: Missing Pieces'}
            Answers = 13, P = 0.076923, R = 0.166667, F1 = 0.105263
          } [0.012s]
          Answers = 13, P = 0.076923, R = 0.166667, F1 = 0.105263
        } [0.012s]
        Checking schema 68 / 70: {
          [('Main', '==', 'm.01xndd', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.from ?o2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'2004'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 69 / 70: {
          [('Main', '==', 'm.01xndd', ['business.board_member.leader_of', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'J.J. Abrams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        68 / 70 coarse schemas kept with ans_size > 0.
      } [1.067s]
      Coarse level ended, resulting in 68 schemas.
    } [1.191s]
    Type level searching (total types = 10): {
      Current: 0 / 68
[{'tv.tv_series_episode'}]
[{'tv.tv_series_episode'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'music.recording'}]
[{'film.film'}]
[{'people.person'}]
[{'film.film'}]
[{'fictional_universe.fictional_universe'}]
[{'tv.tv_program'}]
[{'film.film'}]
[{'music.composition'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'organization.organization'}]
[{'film.film'}]
[{'fictional_universe.fictional_character'}]
[{'film.film'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'people.marriage'}, {'people.person'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_program_guest'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'tv.tv_program_writer_relationship'}, {'tv.tv_program'}]
[{'tv.tv_program_writer_relationship'}, {'type.datetime'}]
[{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer'}]
[{'tv.tv_producer_term'}, {'type.datetime'}]
[{'organization.leadership'}, {'organization.role'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'people.marriage'}, {'type.datetime'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer_type'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.non_character_role'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'tv.tv_program_writer_relationship'}, {'tv.tv_writer'}]
[{'tv.tv_program_writer_relationship'}, {'type.datetime'}]
[{'tv.tv_producer_term'}, {'tv.tv_program'}]
[{'tv.tv_producer_term'}, {'type.datetime'}]
[{'organization.leadership'}, {'business.board_member'}]
      8 typed schemas retrieved from 68 coarse schemas.
      Calculating F1 for 8 typed schemas: {
        Current: 0 / 8
        Checking schema 0 / 8: {
          [('Main', '==', 'm.01xndd', ['people.person.parents']), ('Type', '==', 'cvg.game_voice_actor', ['type.object.type'])]
          var_types: [{'cvg.game_voice_actor', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:cvg.game_voice_actor . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:cvg.game_voice_actor . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 1 / 8: {
          [('Main', '==', 'm.01xndd', ['people.person.children']), ('Type', '==', 'cvg.game_voice_actor', ['type.object.type'])]
          var_types: [{'cvg.game_voice_actor', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:cvg.game_voice_actor . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01xndd fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:cvg.game_voice_actor . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 8: {
          [('Main', '==', 'm.01xndd', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'cvg.game_voice_actor', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'cvg.game_voice_actor', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 3 / 8: {
          [('Main', '==', 'm.01xndd', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'cvg.game_voice_actor', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'cvg.game_voice_actor', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 4 / 8: {
          [('Main', '==', 'm.01xndd', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'cvg.game_voice_actor', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'cvg.game_voice_actor', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 5 / 8: {
          [('Main', '==', 'm.01xndd', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer_type']), ('Type', '==', 'film.film_job', ['type.object.type'])]
          var_types: [{'tv.tv_producer_term'}, {'tv.tv_producer_type', 'film.film_job'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer_type ?o2 . ?o2 fb:type.object.type fb:film.film_job . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer_type ?o2 . ?o2 fb:type.object.type fb:film.film_job . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 1
            Final Answer: {'Executive Producer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 6 / 8: {
          [('Main', '==', 'm.01xndd', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'cvg.game_voice_actor', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'cvg.game_voice_actor', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 7 / 8: {
          [('Main', '==', 'm.01xndd', ['people.person.education', 'education.education.student']), ('Type', '==', 'cvg.game_voice_actor', ['type.object.type'])]
          var_types: [{'education.education'}, {'cvg.game_voice_actor', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:16] Q_Schema Request: {
            WebQ_1591|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01xndd fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:cvg.game_voice_actor . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01xndd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        1 / 8 typed schemas kept with ans_size > 0.
      } [0.068s]
      Typed level ended, resulting in 69 schemas.
    } [0.073s]
    Time level searching (total times = 0): {
      Current: 0 / 69
self.var_time_preds: [{'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, set()]
self.var_time_preds: [{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, set()]
self.var_time_preds: [{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
      0 timed schemas retrieved from 69 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 69 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 69
[{'tv.tv_series_episode.air_date'}]
[{'tv.tv_series_episode.air_date'}]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'music.recording.date'}]
[{'film.film.initial_release_date'}]
[{'people.person.date_of_birth'}]
[{'film.film.initial_release_date'}]
[set()]
[{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'film.film.initial_release_date'}]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[set()]
[set()]
[set()]
[{'organization.organization.date_founded'}]
[{'film.film.initial_release_date'}]
[set()]
[{'film.film.initial_release_date'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'people.person.date_of_birth'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, set()]
[{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'tv.tv_series_episode.air_date'}]
[{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, set()]
[{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
      0 ordinal schemas retrieved from 69 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 69 schemas.
    } [0.002s]
    [2020-12-03 14:19:16] buffer saved.
    69 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1591_schema].
  } [9.109s]
  Entering Q 1592 / 5810 [b'what countries does armenia border?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [3, 4) (armenia) == m.033g54 (Armenia_national_football_team) {'score': 2.757212, 'source': 0.0}
      #01 Entity: [3, 4) (armenia) == m.0jgx (Armenia) {'score': 25767.579567, 'source': 0.0}
      #02 Type: [0, 2) (what countries) == location.country (country) {'sim': 0.748137}
      #03 Type: [0, 3) (what countries does) == business.company_name_change (organization name change) {'sim': 0.68396}
      #04 Type: [0, 3) (what countries does) == location.us_state (us state) {'sim': 0.679032}
      #05 Type: [2, 3) (does) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.676212}
      #06 Type: [0, 3) (what countries does) == medicine.notable_person_with_medical_condition (public figure with medical condition) {'sim': 0.663546}
      #07 Type: [0, 3) (what countries does) == government.form_of_government (form of government) {'sim': 0.662473}
      #08 Type: [0, 3) (what countries does) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.660251}
      #09 Type: [0, 2) (what countries) == olympics.olympic_participating_country (olympic participating country) {'sim': 0.657279}
      #10 Type: [0, 3) (what countries does) == government.national_anthem_of_a_country (national anthem of a country) {'sim': 0.655503}
      #11 Type: [0, 3) (what countries does) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.654587}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:19:24) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.033g54 ?p1 ?o1 . }
        [2020-12-03 14:19:24] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.033g54 ?p1 ?o1 . }
          Query return lines = 15
        } [0.024s]
        Filt_Query_Ret = 5 / 15 ( 0.024s)
      } [0.024s]
      [Len-1||F2/2] (2020-12-03 14:19:24) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0jgx ?p1 ?o1 . }
        [2020-12-03 14:19:24] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0jgx ?p1 ?o1 . }
          Query return lines = 102
        } [0.017s]
        Filt_Query_Ret = 37 / 102 ( 0.017s)
      } [0.017s]
      [Len-2||F1/2] (2020-12-03 14:19:24) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.033g54 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:24] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.033g54 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 233
        } [0.030s]
        Filt_Query_Ret = 15 / 233 ( 0.031s)
      } [0.031s]
      [Len-2||F2/2] (2020-12-03 14:19:24) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jgx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:24] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jgx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 1064
        } [0.134s]
        Filt_Query_Ret = 164 / 1064 ( 0.138s)
      } [0.139s]
      221 coarse schemas retrieved from scratch.
      Calculating F1 for 221 coarse schemas: {
        Current: 0 / 221
        Checking schema 0 / 221: {
          [('Main', '==', 'm.033g54', ['soccer.football_team.current_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.033g54 fb:soccer.football_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.033g54 fb:soccer.football_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.033g54 fb:sports.sports_team.founded ?o1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 WHERE { fb:m.033g54 fb:sports.sports_team.founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'1992'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 2 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.033g54 fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.033g54 fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.036s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.037s]
        Checking schema 3 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.033g54 fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.033g54 fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'Football'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 4 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.arena_stadium'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.033g54 fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.033g54 fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 2
            Final Answer: {'Republican Stadium, Yerevan', 'Hrazdan Stadium'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 5 / 221: {
          [('Main', '==', 'm.0jgx', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 3
            Final Answer: {'Representative democracy', 'Presidential system', 'Republic'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 6 / 221: {
          [('Main', '==', 'm.0jgx', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenian Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 7 / 221: {
          [('Main', '==', 'm.0jgx', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 11
            Final Answer: {'Armavir Province', 'Gegharkunik Province', 'Syunik Province', 'Yerevan', 'Ijevan', 'Shirak Province', 'Kotayk Province', 'Jermuk', 'Alaverdi', 'Aragatsotn Province', 'Ararat Province'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 8 / 221: {
          [('Main', '==', 'm.0jgx', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 9 / 221: {
          [('Main', '==', 'm.0jgx', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Earth'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 10 / 221: {
          [('Main', '==', 'm.0jgx', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Sovereign state'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 11 / 221: {
          [('Main', '==', 'm.0jgx', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 12 / 221: {
          [('Main', '==', 'm.0jgx', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'National Assembly'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 13 / 221: {
          [('Main', '==', 'm.0jgx', ['government.governmental_jurisdiction.agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'National Statistical Service of the Republic of Armenia', 'Armenian Ministry of Foreign Affairs'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 107
            Final Answer: {'Varaztad Kazanjian', 'Yeghishe Harout', 'Sheram', 'Saint Blaise', 'Ani Khachikyan', 'Ara Abramyan', 'Artashes Antonyan', 'Mayis Azizyan', 'Robert Amirkhanyan', 'Robert Nalbandyan', 'Zhora Harutyunyan', 'Rhahzadh', 'Sahak Parparyan', 'Vahe Gurzadyan', 'Saint Shushanik', 'Armen Anassian', 'Nune Yesayan', 'Andranik Adamyan', 'Vahan Totovents', 'Israil Militosyan', 'Martin Berberyan', 'Mariam Vardanyan', 'Felix Hakobyan', 'Sarkes Tarzian', 'Saint Parthenius', 'Hovik Abrahamyan', 'Arthur Meschian', 'Edward Manukyan', 'David G. Grigoryan', 'Eduard Topchjan', 'Aram Karapetyan', 'Aram Gaspar Sargsyan', 'Lina Yakubova', 'Migran Arutyunyan', 'Baghdasar Arzoumanian', 'Suren Nazaryan', 'Vanik Zakaryan', 'Ararat Harutyunyan', 'Davit Harutyunyan', 'Gevorg Sargsyan', 'Rubén Darío Hernández', 'Alexander Awdijan', 'Felix Ryan', 'Artashes Minasian', 'Aurora Mardiganian', 'Tamara Stepanyan', 'Garik Israelian', 'Haig Patigian', 'Aram Manukian', 'Mariam Hakobyan', 'Venerable John the Hermit', 'Sen Arevshatyan', 'Eduard Hayrapetyan', 'Hovhannes Tahmazyan', 'Vahan Artsruni', 'Vahe Hakobyan', 'Kristine Khachatryan', 'Simeon of Mantua', 'Sergei Babayan', 'Hovhannes Demirchyan', '2011 Attack on Estonian Defence Ministry', 'Lusine ICL', 'Ashot Yeghiazaryan', 'Henrik Batikyan', 'Arutyun Papazyan', 'Narek Sargsyan', 'Mariam Nazarian', 'Garik Chepchyan', 'Nerses Yeritsyan', 'Mkhitar Gosh', 'Martiros Manoukian', 'Sergo Chakhoyan', 'Vardan Voskanyan', 'Arsen Nersisyan', 'Levon Mkrtchyan', 'Saint Acacius', 'Vahe Davtyan', 'Tigran Khzmalyan', 'Getik Baghdasarian', 'Ruben Vardanyan', 'Lilit Avagyan', 'Levon Ananyan', 'Ruben Tovmasyan', 'Khosrov Harutyunyan', 'Vakhtang Ananyan', 'Stephanie of Armenia', 'Roman Aramian', 'Felix Khojoyan', 'Suren Khachatryan', 'Boris Airapetyan', 'Robert Khatchatrian', 'Adam Khudoyan', 'Anushavan Danielyan', 'Saint Servatius', 'Farqad Sabakhi', 'Arthur M. Sarkissian', 'John Paul Sarkisian', 'Hampar Kelikian', 'Vardan Kushnir', 'Nairi Hunanyan', 'Rafael Ghazaryan', 'Roman Grigoryan', 'Tigran Martirosyan', 'Philippikos Bardanes', 'Hagop Avesyan', 'Arsen Martirosian', 'Kristine Mangasaryan'}
            Answers = 107, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 107, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 15 / 221: {
          [('Main', '==', 'm.0jgx', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Petra Arkanian'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 16 / 221: {
          [('Main', '==', 'm.0jgx', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 17 / 221: {
          [('Main', '==', 'm.0jgx', ['base.locations.countries.continent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Europe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 18 / 221: {
          [('Main', '==', 'm.0jgx', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 3
            Final Answer: {'Erebuni Beer', 'Kotayk Lager Beer', 'Kilikia Beer'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.048s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.048s]
        Checking schema 19 / 221: {
          [('Main', '==', 'm.0jgx', ['biology.breed_origin.breeds_originating_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Caucasian Shepherd Dog'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 20 / 221: {
          [('Main', '==', 'm.0jgx', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenian dram'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 21 / 221: {
          [('Main', '==', 'm.0jgx', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Kurdish language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 22 / 221: {
          [('Main', '==', 'm.0jgx', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'am'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 23 / 221: {
          [('Main', '==', 'm.0jgx', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenian province'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 24 / 221: {
          [('Main', '==', 'm.0jgx', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0jgx fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 WHERE { fb:m.0jgx fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'1918'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 25 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1347
            Final Answer: {'Hatsik, Shirak', 'Avshar', 'Tegh', 'Deghdzut', 'Kaghtsrashen', 'Kefashen', 'Verin Khatunarkh', 'Djadjur', 'Vagharshapat, Armenia', 'Sarapat', 'Tsaghkunk, Armavir', 'Gharghavank', 'Shaki, Armenia', 'Aghavnadzor, Vayots Dzor', 'Buravet', 'Azat, Armenia', 'Yerevan History Museum', 'Azatavan', 'Anipemza', 'Tanahat', 'Geghard, Armenia', 'Verin Karmiraghbyur', 'Church of St. John, Mastara', 'Akhpradzor', 'Aruchavank', 'Makravank Monastery', 'Khndzoresk', 'Varagavan', 'Nor Butaniya', 'Geghasar', 'Vardanidzor', 'Shaghap', 'Franganots', 'Arazdayan', 'Lernut', 'Vardashat', 'Vosketas', 'Zangezur Mountains', 'Gyamrez', 'Alatala', 'Vayk', 'Bandivan', 'Ohanavan', 'Nubarashen district', 'Shenkani', 'Berdik', 'Nerkin Aluchalu', 'Urtsalanj', 'Sarnaghbyur', 'Kechut', 'Verin Getashen', 'Norabats', 'Tsaghkashen, Aragatsotn', 'Arzni Hydro Power Plant', 'Agamzalu', 'Kavchut', 'Akhurik', 'Avan', 'Saint Sargis Monastery of Ushi', 'Saralanj, Shirak', 'Navur', 'Norashen, Gegharkunik', 'Katnarrat, Syunik', 'Vardablur, Aragatsotn', 'Qarahunj', 'Uyts', 'Metsavan', 'Nor Kokhp', 'Avsarlu', 'Dprabak', 'Yeghipatrush', 'Saghmosavan', 'Tsiatsan', 'Vayots Dzor Province', 'Kelanlu, northern Ararat', 'Garni Gorge', 'Kasakh, Aragatsotn', 'Getishen', 'Norashen, Aragatsotn', 'Arakelots Vank', 'Karenis', 'Chakhmakhly', 'Zovashen (Keshishveran), Ararat', 'Metsadsor', 'Bambakashat', 'Dzoragyugh, Lori', 'Spandaryan, Shirak', 'Karakoyun, Armenia', 'Karakala, Lori', 'Armash, Armenia', 'Zovashen, Kotayk', 'Gndevaz', 'Vorotan River', 'Blagodarnoye', 'Ghukasavan', 'Karakert', 'Ltsen', 'Gomer, Armenia', 'Agarak, Lori', 'Nor Gyugh', 'Shamiram, Armenia', 'Voghji, Shirak', 'Kilisa', 'Rind, Armenia', 'Akhuryan', 'Shirakavan, Armenia', 'Jrashen, Ararat', 'Saint Mariane Church of Ashtarak', 'Karashamb', 'Amberd', 'Pokr Masrik', 'Kotayk Province', 'Khashtarak', 'Salli, Armenia', 'Ditsmayri', 'Aghavnadzor, Kotayk', 'Kyarkibash', 'Caucasus Mountains', 'Chirchiri', 'Tairov', 'Antaramej', 'Bardzrashen, Ararat', 'Aygezard', 'Anastasavan', 'Getik, Shirak', 'Verin Hand', 'Gandzakar', 'Haytagh', 'Geghahovit', 'Makaravank', 'Nerkin Karmiraghbyur', 'Hartagyugh', 'Nor Hachyn', 'Sis, Armenia', 'Kasakh', 'Katoghike Church, Yerevan', 'Nerkin Shengavit', 'Arrinj', 'Artsvanist', 'Goris', 'Azizkend', 'Boloraberd, Armenia', 'Kuybyshev, Armenia', 'Tatev', 'Nor Amanos', 'Yererouk', 'Aghavnatun', 'Sorik', 'Ajapnyak district', 'Kaniashir', 'Nerkin Shorzha', 'Norashenik', 'Nigavan', 'Tsater', 'Voskevan', 'Nerkin Bazmaberd', 'Aknalich', 'Tsaghkahovit', 'Atarbekyan Hydro Power Plant', 'Arjut', 'Hrazdan', 'Atchanan', 'Aknashen', 'Abbas Mirza Mosque, Yerevan', 'Yeghnik', 'Getk', 'Nshavan', 'Birali', 'Voghji River', 'Kelanlu, southern Ararat', 'Artashar', 'Berdashen', 'Balahovit', 'Dalarik', 'Geshin', 'Ayntap, Armenia', 'Atsarat', 'Dashtakar', 'Kond', 'Hayravank Monastery', 'Araks, Armavir', 'Agarakavan', 'Jajur', 'Nor Nork district', 'Ttujur, Gegharkunik', 'Geghhovit', 'Baharlu, Armenia', 'Antarashat', 'Pirlu', 'Shoghakat Church', 'Spitak', 'Lernantsk', 'Amrakits', 'Koti, Armenia', 'University of Quindio', 'Lake Sevan', 'Ushiberd', 'Sipanik', 'Berd', 'Daranak', 'Saint Sargis Church of Ashtarak', 'Hatis', 'Komitas Pantheon', 'Gnishik', 'Areni', 'Nor Zeytun', 'Voskehat, Aragatsotn', 'Kyalashbek', 'Vardablur (village), Lori', 'Isahakyan', 'Agdzhakishlag', 'Arum, Armenia', 'Vanashen', 'Meghri', 'Ashotsk', 'Yeraskh', 'Davtashen district', 'Lernagog', 'Meghvahovit', 'Tsovagyugh', 'Ughedzor', 'Artavan', 'Shnogh', 'Yerevan State Pedagogical University', 'Shinuhayr', 'Gegharkunik', 'Marmarik', 'Armenian State University of Economics', 'Karakala, Armavir', 'Saravan, Armenia', 'Margara', 'Imeni Kirova, Armenia', 'Haghtanak, Tavush', 'Kamaris', 'Zorakan', 'Lanjazat', 'Mrgavet', 'Tsghuni', 'Akori', 'Kut, Armenia', 'Nor Sasunik', 'Zangakatun', 'Shrvenantz', 'Goghtanik', 'Hankavan', 'Yeghegnut, Armavir', 'Masis', 'Paghaghbyur', 'Ditak', 'Azatan', 'Gugark', 'Sanahin', 'Aygestan', 'Nerqin Khotanan', 'Chochkan', 'Gargar, Armenia', 'Bashgyugh', 'Agveran', 'Azatavan, Armavir', 'Musayelyan', 'Aygebats', 'Mets Gilanlar', 'Lori Province', 'Punik', 'Dsegh', 'Aygut', 'Lenughi', 'Ankadzor', 'Tsoghamarg', 'Karbi, Armenia', 'Urut', 'Hunut', 'Dashtavan', 'Aykavan', 'Solak, Armenia', 'Ajabaj', 'Verin Vachagan', 'Mikhayelovka', 'Getap, Aragatsotn', 'Argavand, Armavir', 'Por, Armenia', 'Mets Parni', 'Khoronk, Lori', 'Gegharot', 'Malishka', 'Khoronk', 'Kuris, Armenia', 'Yernjatap', 'Lichk', 'Batikyan', 'Antarut', 'Dzorastan', 'Teghenik', 'Geghanush', 'Panik, Armenia', 'Verin Ptghni', 'Dashtadem, Lori', 'Goravan', 'Tsav, Armenia', 'Nor Artamet', 'Ishkhanasar', 'Fioletovo', 'Marbridge Building', 'Karaiman', 'Akner, Syunik', 'Kard, Armenia', 'Bagravan', 'Nurnus', 'Shikhlar', 'Hatsik, Armavir', 'Kanch', 'Talish, Armenia', 'Tandzut, Armavir', 'Pokr Mantash', 'Martiros', 'Armanis', 'Yerevan State University', 'Katnajur', 'Hako', 'Areni Church', 'Aragats, Aragatsotn', 'Mother Armenia', 'Hnaberd, Ararat', 'Gevorkian Theological Seminary', 'Vosketap', 'Artsvashen', 'Ajylu', 'Astghadzor', 'Verin-Chambarak', 'Karmrakar', 'Aghkilisa, Ararat', 'Vahanavank', 'Akhtala', 'Karmirkharab', 'Gegharkunik Province', 'Zovk', 'Getapnya', 'Ghazaravan', 'Lori Berd', 'Vanadzor', 'Lernakert, Shirak', 'Vernashen', 'Brrun', 'Dzoraglukh', 'Zartonk', 'Rya Taza', 'Lejan', 'Dzithankov', 'Bnunis', 'Kozman', 'Tatevi Anapat', 'Lorut', 'Gavar', 'Ipakly', 'Verin Shorzha', "Lovers' Park", 'Yerazgavors', 'Hartavan', 'Torunik', 'Lor, Armenia', 'Lernavan', 'Nor Varagavank', 'Khachardzan', 'Vedic altars', 'Gharaghaya', 'Aravet', 'Goghovit', 'Aghnjadzor', 'Rivers and lakes in Armenia', 'Artik', 'Tufashen', 'Verin Giratagh', 'Musaler', 'Barabatum', 'Karinj', 'Katnaghbyur, Kotayk', 'Lusakunk', 'Lusadzor', 'Gharibjanyan', 'Proshaberd', 'Karkhun, Armenia', 'Argel, Armenia', 'Jrvesh', 'Zuygaghbyur', 'Kizkala', 'Sarchapet', 'Berdavan, Armenia', 'Qarut', 'Voskehask', 'Ghegam Ridge', 'Mrgashen', 'Avazak', 'Koytul', 'Yeranos', 'Tolors', 'Verin Akhtala', 'Yerevan State Medical University', 'Hermon, Armenia', 'Artsni', 'Achkhlu', 'Darpas', 'Darbnik', 'Noravan, Syunik', 'Gorgoch', 'Shahumyan, Lori', 'Akner, Lori', 'Getap, Shirak', 'Apaven', 'Illi, Armenia', 'Geghashen', 'Vardashen, Ararat', 'Yerizak', 'Aragyugh', 'Shatvan', 'Akhbrak', 'Charentsavan', 'Mghart', 'Papanino', 'Davtashen', 'Hovnanadzor', 'Mount Achkasar', 'Inakdag', 'Imeni Dzerzhinskogo, Armenia', 'Havuts Tar', 'Noramarg', 'Surb Astvatsatsin Church of Karbi', 'Gomadzor', 'Chinari, Armenia', 'Lusarat', 'Nor Kyurin', 'Nizami, Armenia', 'Aralek', 'Artimet', 'Chknagh', 'Geghadzor', 'Sovkhoz Nomer Shest', 'Geghanist, Ararat', 'Haykasar', 'Tsaghkashen, Gegharkunik', 'Khdrants', 'Madina, Armenia', 'Mrgavan', 'Chiva, Armenia', 'Lusashogh', 'Ijevan', 'Injevar', 'Amberd, Armavir', 'Armavir', 'Urtsadzor', 'Parakar', 'Halidzor', 'Sardarapat', 'Dzorashen', 'Gelaysor', 'Orgov', 'Alvanq', 'Horadis', 'Tashir', 'Nor Armavir', 'Zar, Armenia', 'Mrgastan', 'Verin Dzhrapi', 'Hagvi', 'Akhlatyan', 'Haghpat Monastery', 'Nerkin Getashen', 'Zovaber, Syunik', 'Tsghuk', 'Arteni', 'Kanaker-Zeytun district', 'Yerevan TV Tower', 'Erebuni district', 'Qarashen', 'Nerqin Hand', 'Zovashen (Dzhannatlu), Ararat', 'Karmirgyugh', 'Bagratashen', 'Nor Hachen', 'Aregnadem', 'Lernadzor', 'Kamo, Armenia', 'Mets Sariar', 'Dzoramut', 'Tskhouk-Karckar', 'Jraber', 'Pokr Shagriar', 'Maflar', 'Azatashen', 'Jrahovit', 'Kamyshlu, Gegharkunik', 'Karalar', 'Lukashin', 'Zhdanov, Lori', 'Akhum', 'Aralez', 'Haykavan, Shirak', 'Ardenis', 'Jrvezh', 'Dalar, Armenia', 'Mrganush', 'Shgharshik', 'Mets Mantash', 'Ptghavan', 'Vardenis, Aragatsotn', 'Nor Artik', 'Verin Charbakh', 'Nor Aresh', 'Artashavan', 'Aknaghbyur', 'Yenokavan', 'Shamut', 'Karnut', 'Aratashen', 'Aygedzor, northern Syunik', 'Apna, Armenia', 'Aghtsk', 'Chkalov, Armenia', 'Manvo', 'Itsakar', 'Azat River', 'Kruglaya Shishka', 'Chkalovka', 'Alapars', 'Odzun Church', 'Hayrenyats', 'Tsilkar', 'Aravus', 'Jrarat, Kotayk', 'Spandaryan, Syunik', 'Ragimabad', 'Tretuk', 'Tavush Province', 'Sadunts', 'Aygepar', 'Taytan', 'Vahramaberd', 'Urasar', 'Qashuni', 'Berkaber', 'Vardaghbyur', 'Khachpar', 'Myasnikyan', 'Pokrashen', 'Kerpikend', 'Vocheti', 'Mayisyan, Shirak', 'Geghadir, Aragatsotn', 'Tsaghkaber', 'Blue Mosque, Yerevan', 'Yeghipatrush Church', 'Zolakar', 'Debed', 'Noramut', 'Marmarashen', 'Paravakar', 'Lernapar', 'Lorasar', 'Kaghsi', 'Cathedral of Talin', 'Jiliza', 'Abovyan', 'Saralanj, Kotayk', 'Salvard', 'Achadzhur', 'Hovtamej', 'Kirants', 'Noyakert', 'Verin Jrashen', 'Bakhchalar', 'Gyumri', 'Dzoragyugh, Aragatsotn', 'Jrapi', 'Drakhtik', 'Karakhach', 'Proshyan', 'Vedi', 'Arshaluys', 'Dastakert', 'Norashen, Tavush', 'Ptghavank', 'Ddmashen', 'Surb Hovhannes Church of Byurakan', 'Lesser Caucasus', 'Jamshlu', 'Yengidzha', 'Karmir-Kulali', 'Suser', 'Movses, Armenia', 'Megrashat', 'Noyemberyan', 'Yeraskhahun', 'Vardenik', 'Ahnidzor', 'Kizilkharab', 'Shavarut', 'Sarnakunk', 'Voskevaz', 'Arayi', 'Zorakert', 'Avazan', 'Chambarak', 'Mets Ayrum', 'Yerablur', 'Pemzashen', 'Shenavan, Aragatsotn', 'Hartashen, Syunik', 'Geghanist, Shirak', 'Mushavan', 'Arapi, Armenia', 'Jil, Armenia', 'Dvoragyukh', 'Garnarich', 'Nor Kharberd', 'Ginevet, Armavir', 'Bazum', 'Okhtar', 'Tandzut, Tavush', 'Alagyaz', 'Tsakkar', 'Karanlukh', 'Vanand, Syunik', 'Jermuk', 'Lusahovit', 'Pambak, Lori', 'Pokr Ayrum', 'Marts, Lori', 'Geghadir, Kotayk', 'Tsamakaberd', 'Jaghatsadzor', 'Mashtots Hayrapet Church of Garni', 'Nor Kyanq', 'Shamlugh', 'Atdash', 'Khachik, Armenia', 'Mayakovski, Armenia', 'Varser', 'Nalbandyan, Armenia', 'Voghjaberd', 'Metsamor', 'Getatagh', 'Arevshat', 'Chalabi, Armenia', 'Kotavank', 'Meghrashen', 'Kuchak', 'Khnkoyan', 'Agdan', 'Basen, Armenia', 'Aghberk', 'Gorayk', 'Syunik Province', 'Kalasar', 'Neghots', 'Niphates', 'Mets Sepasar', 'Argishti, Kotayk', 'Halavar', 'Vardenis', 'Pirdaudan', 'Dzyunashogh', 'Krasar', 'Tsovinar, Armenia', 'Dzoravank', 'Mets Masrik', 'Khosrov', 'Sanain', 'Bardzruni', 'Tsaghkashen, Ararat', 'Karmrashen, Vayots Dzor', 'Ovuni', 'Yerevan State University of Arcitecture and Construction', 'Apaga, Armenia', 'Geyarchin', 'Barepat', 'Dian, Armenia', 'Armenian Highland', 'Aygehat', 'Kapan', 'Burastan', 'Kakavadzor, Aragatsotn', 'Tsiranavor Church of Ashtarak', 'David Bek, Armenia', 'Shenatagh', 'Avan Church', 'Jrarat, Shirak', 'Kyasaman', 'Chichakli', 'Beniamin', 'Tsamakasar', 'Azatamut', 'Aras River', 'Bargushat', 'Nrnadzor', 'Chapni', 'Arevatsag', 'Khachaghbyur', 'Tala, Armenia', 'Aygepat', 'Teghut', 'Arzni', 'Aghvani', 'Kachachkut', 'ARF History Museum', 'Zovaber, Gegharkunik', 'Surb Hovhannes Church of Voskevaz', 'Bardidzor', 'Lanjik', 'Yerevan State Linguistic University', 'Koghes', 'Kyzylkend', 'Saint John the Baptist Church, Yerevan', 'Vahramashen Church', 'Verin Kelanlu', 'Haykadzor', 'Nerkin Dzhrapi', 'Yeghvard Church', 'Byureghavan', 'Akhsu, Armenia', 'Teishebaini', 'Gorovan', 'Ararat (village), Armenia', 'Koghb, Armenia', 'Vahan, Armenia', 'Lernamerdz', 'Sipan, Armenia', 'Avan district', 'Siznak', 'Zedea', 'Sayat-Nova, Armenia', 'Berkanush', 'Akunk, Kotayk', 'Lanjanist', 'Shenavan, Lori', 'Getik, Gegharkunik', 'Norapat', 'Sarnakhpyur', 'Artavaz', 'Krivoy Most', 'Tegher, Armenia', 'Lusakert, Shirak', 'Kichik Vedi', 'Martuni', 'Garni Temple', 'Darik', 'Hovtashat', 'Shahumyan, Armavir', 'Kavart', 'Shamb', 'Shahumyan, Ararat', 'Porak', 'Mozrov', 'Odzun', 'Geghard', 'Sizavet', 'Kzylkend', 'Janfida', 'Geghamabak', 'Sardarapat, Armenia', 'Bardzrashen, Shirak', 'Verin Dvin', 'Harzhis', 'Arevashat', 'Gudemnis', 'American University of Armenia', 'Jibillu', 'Horbategh', 'Tsaghkut', 'Kizilshafak', 'Privolnoye, Armenia', 'Gogavan', 'Dovegh', 'Holy Children Chapel, Vanadzor', 'Shahumyan, Yerevan', 'Avan-Arinj', 'Alvar, Armenia', 'Gezaldara', 'Gandzak, Armenia', 'Katnarat, Lori', 'Aghin', 'Kakavasar', 'Horom, Armenia', 'Verin Zeyva', 'Yanykhpaya', 'Jrarat', 'Argavand Funerary Tower', 'Hartashen, Shirak', 'Ttujur, Aragatsotn', 'Tsovak', 'Pokr Sariar', 'Nerkin Khatunarkh', 'Hatsavan, Syunik', 'Artsvanik', 'Melikgyugh', 'Beekman (Panhellenic) Tower', 'Tsakqar', 'Doghs', 'Arrajadzor', 'Arpeni', 'Vazashen', 'Haykashen', 'Odzaberd', 'Ranchpar', 'Shikahogh', 'Lusaghbyur, Lori', 'Aygavan', 'Yerevan', 'Lusaghbyur, Shirak', 'Saramej', 'Vahravar', 'Voghji, Syunik', 'Agarak, Syunik', 'State Engineering University of Armenia', 'Karmrashen, Talin', 'Amasia, Armavir', 'Karchaghbyur', 'Chirakhlu', 'Artsvaberd', 'Goght', 'Avshen', 'Geghakar', 'Getamej', 'Artabuynk', 'Kakhakn', 'Hobardzi', 'Geghi', 'Lernanist', 'Sotk', 'Merdzavan', 'Ashnak', 'Arevshat, Shirak', 'Shishkert', 'Egheg', 'Tsapatagh', 'Verkhniy Aluchalu', 'Bitlidzha', 'Nerkin Kamarlu', 'Mehmandar', 'Spitakavor Church of Ashtarak', 'Khor Virap', 'Eghvard, Syunik', 'Vardavanq', 'Golovino', 'Byurakn', 'Meghradzor', 'Tsaghkadzor', 'Debetavan', 'Haghartsin, Armenia', 'Arpi, Armenia', 'Karmravan', 'Bayandur, Armenia', 'Karakala, Kotayk', 'Atan, Armenia', 'Lichk, Syunik', 'Kalavan', 'Zvartnots Cathedral', 'Verkhnyaya Gezaldara', 'Yeranus', 'Kaputan', 'Bendik', 'Ardvi', 'Hovhannavank', 'Pushkino, Armenia', 'Nor Kyank, Shirak', 'Saint Gregory the Illuminator Cathedral, Yerevan', 'Geghamasar', 'Bjni', 'Akunk', 'Satala', 'Hrazdan River', 'Eurasia International University', 'Norakert, Gegharkunik', 'Gosh, Armenia', 'Norashen, Ararat', 'Hayravank', 'Aghitu', 'Dilijan', 'Sarukhan', 'Jujevan', 'Salut', 'Saint Nikolai Cathedral, Yerevan', 'Agagchi', 'Kargabazar', 'Getap, Vayots Dzor', 'Akhtala monastery', 'Torfavan', 'Anushavan', 'Shoghakn', 'Pshatavan', 'Verishen', 'Bayburd', 'Lchashen', 'Masis, Armenia', 'Kanaker', 'Saratovka, Armenia', 'Karaberd, Shirak', 'Nor Kyank, Ararat', 'Norakert', 'Kaghnut', 'Karakishlag', 'Kayk, Armenia', 'Shgharshik, Aragatsotn', 'Mrgashat', 'Nor Yedesia', 'Ushi', 'Byuravan', 'Argavand, Ararat', 'Khot', 'Gomaran', 'Nerqin Giratagh', 'Syunik', 'Chinchin', 'Arevik, Shirak', 'Sverdlov, Armenia', 'Geghamavan', 'Saratak', 'Hatsashen', 'Artanish', 'Vaghashen', 'Sisian', 'Baghanis', 'Kamkhut', 'Lernarot', 'Hnaberd, Aragatsotn', 'Noratus cemetery', 'Aghavnavank', 'Kyurakyan', 'Sasunik', 'Shikahogh State Preserve', 'Teyseba', 'Pkhrut', 'Goshavank', 'Tavshut', 'Nor Yerznka', 'Pambak, Gegharkunik', 'Arevis', 'Verin Tsaghkavan', 'Sarakap', 'Ghursal', 'Zorats Karer', 'Ashtarak', 'Saragyugh', 'Lanjar', 'Tumanyan', 'Chimankend', 'Boulevard Gardens Apartments', 'Sevan, Armenia', 'Nor Aznaberd', 'Ashotavan', 'Aygedzor, Meghri', 'Tsitsernakaberd', 'Jradzor', 'Shamakhyan', 'Vaskenian Theological Academy', 'Taronik', 'Tsakhats Kar Monastery', 'Zovasar', 'Nork-Marash district', 'Gndevank', 'Akhurian River', 'Dzorakap', 'Mount Aragats', 'Fantan, Armenia', 'Saint Gregory the Illuminator Church, Yerevan', 'Darakert', 'Mugni', 'Kaps', 'Vardanavan', 'Saralanj, Aragatsotn', 'Adamkhan, Armenia', 'Bazmaghbyur', 'Imeni Tairova', 'Bavra', 'Kajaran', 'Sarigyugh', 'Ujanis', 'Mamai, Armenia', 'Kakhtsrashen', 'Kutakan', 'Zvartnots, Armenia', 'Lernamerts', 'Yeghegnavan', 'Hushakert', 'Chirish', 'Saint Gevorg Monastery of Mughni', 'Aygeshat, Armavir', 'Yaghdan', 'Geghakert', 'Voskehat, Armavir', 'Bagaran', 'Shurnukh', 'Gharatgha', 'Gyabut', 'Artashat', 'Vardahovit', 'Archis, Armenia', 'Yerevan Opera Theater', 'Shorlu', 'Berkashat', 'Tsaghkashat', 'Tsovasar', 'Achajur', 'Arbat, Armenia', 'Keti, Armenia', 'Haghtanak, Yerevan', 'Democratic Republic of Armenia', 'Kirov, Armenia', 'Yeremes', 'Jrashen, Armavir', 'Pokr Sepasar', 'Bardzravan', 'Arpa River', 'Berdkunk', 'Sevanavank', 'Byurakan', 'Ddmasar', 'Karaberd, Lori', 'Saint Sargis Church of Tsovinar', 'Hovtashen, Shirak', 'Kitsq', 'Arabkir district', 'Mastara', 'Tsaghkunk, Gegharkunik', 'Aragats, Armavir', 'Makravan', 'Noravank', 'Arates', 'Zarishat', 'Khndzorut, Vayots Dzor', 'Metsamor Nuclear Power Plant', 'Arazap', 'Nalband, Armenia', 'Gyulagarak', 'Vostan', 'Garni', 'Hovtun', 'Hayanist', 'Vaghatin', 'Vardanashen', 'Karaglukh', 'Saghmosavank', 'Mirak, Armenia', 'Teghut, Lori', 'Paghkn', 'Griboyedov, Armenia', 'Horomayri Monastery', 'Agarak, Aragatsotn', 'Getazat', 'Vaghatur', 'Dimitrov, Armenia', 'Irind', 'Chakaten', 'Kharatlu', 'Arevabuyr', 'Lernahovit, Lori', 'Yeghegnut, Lori', 'Grumman', 'Hatsavan, Kotayk', 'Vardenut', 'Katnaghbyur, Lori', 'Aygehovit', 'Haghartsin Monastery', 'Armavir Province', 'Tandzatap', 'Srashen', 'Nzhdeh, Armenia', 'Vardashen, Yerevan', 'Amaghu', 'Surenavan', 'Verin Shengavit', 'Nor Astghaberd', 'Saranist', 'Sevkar', 'Shaghik', 'Nshkhark', 'Ujan', 'Aragatsotn Province', 'Shorzha', 'Haydarli', 'Lefcourt Colonial Building', 'Talin', 'Sabunchi', 'Jrambar', 'Lernakert, Gegharkunik', 'Zaritap', 'Vahagni', 'Nor Arabkir', 'Turdzhan', 'Karvansara, Gegharkunik', 'Kirants Monastery', 'Eghnajur', 'Artavazik Church', 'Dashtadem, Aragatsotn', 'Aygek', 'Nahapetavan', 'Pokr Vedi', 'Samsoni Monastery', 'Balak, Armenia', 'Akunk, Aragatsotn', 'Dzoragyugh, Gegharkunik', 'Noratus', 'Hors, Armenia', 'Haghpat', 'Oshakan', 'Verin-Kulibeklu', 'Adzhatin', 'Zarinja', 'Zoravan', 'Gyulludara', 'Atarbekyan', 'Jrashen', 'Tsovazard', 'Krashen', 'Lchkadzor', 'Agekhush, Armenia', 'Vardablur, Lori', 'Verin Nedzhirlu', 'Tashtun', 'Selim Caravanserai', 'Verin Sasnashen', 'Norashen, Lori', 'Margahovit', 'Khoznavar', 'Getashen, Armavir', 'Aragatsavan', 'Gusanagyugh', 'Arpunk', 'Ferik', 'Niavan', 'Tsaghkalanj', 'Getahovit', 'Nork, Armenia', 'Kakavadzor, Kotayk', 'Vanevan', 'Gladzor', 'Lanjaghbyur', 'Shaghat', 'Darbas', 'Stepanavan Airport', 'Sers, Armenia', 'Verin Khotanan', 'Tavrus', 'Marmashen', 'Herher', 'Choratan', 'Nor Khaberd', 'Aghvorik', 'Agarakadzor', 'Poselok Imeni Kalinina', 'Aragatsotn', 'Maralik', 'Araksavan', 'Sarahart', 'Republic Square', 'Arin, Armenia', 'Vorotan, Syunik', 'Tkhkut', 'Kapanak', 'Ararat Province', 'Chobankara', 'Nor-Aparan', 'Azatek', 'Zeyva', 'Arratashen', 'Hovit', 'Nerkin Tsaghkavan', 'Jrarat, Armavir', 'Geghama mountains', 'Shatin, Armenia', 'Shirak Province', 'Ayrk', 'Noragavit', 'Katnaghbyur, Aragatsotn', 'Geghavank', 'Angeghakot', 'Zovuni, Aragatsotn', 'Hovk', 'Verin Bazmaberd', 'Saritagh', 'Shatjrek', 'Otevan', 'Kecharis Monastery', 'Lchap', 'Aramus, Armenia', 'Abovyan, Ararat', 'Amoj', 'Nor Geghi', 'Torosgyugh', 'Garnahovit', 'Lermontovo, Armenia', 'Marmashen monastery', 'Chapkut', 'Kuchuma', 'Kanachut', 'Gomk', 'Kasagh River', 'Brnakot', 'Vardadzor', 'Baghramyan, Ararat', 'Ptghni', 'Dashkerpi', 'Kornidzor', 'Mutsk', 'Verkhniy Zagalu', 'Gomshavar', 'Karchevan', 'Makenyats Vank', 'Shenavan, Armavir', 'Novoseltsovo', 'Aparan Basilica', 'Kaler, Armenia', 'Zovuni', 'Noragyugh', 'Arevik', 'Kapuyt', 'Ditavan', 'Alashkert, Armenia', 'Ghazanchi', 'Gyadikvank', 'Lusagyugh, Armavir', 'Beekman Place', 'Kamyshlu, Armavir', 'Areguni', 'Kurtan', 'Nigatun', 'Gogaran', 'Tatul, Armenia', 'Harich, Armenia', 'Eridzor', 'Gagarin, Armenia', 'Antaramut', 'Vardakar', 'Sanahin Monastery', 'Berkarat', 'Petrovka, Armenia', 'Arajadzor', 'Dvin', 'Aznvadzor', 'Saralanj, Lori', 'Musallam', 'Kanakeravan', 'Dasht, Armenia', 'Yemazlu', 'Bovadzor', 'Khndzorut, Lori', 'Debet, Armenia', 'Amasia, Shirak', 'Parpi', 'Dar-Alages', 'Sevaberd', 'Lernapat', 'Zvartnots International Airport', 'Tavush', 'Pemzashen Church', 'Nerkin Charbakh', 'Aghjots Vank', 'Sevaqar', 'Taratumb', 'Vorotnavank', 'Arinj', 'Makenis', 'Nerqin Khndzoresk', 'Dzorak', 'Tasik', 'Ayrum', 'Arzakan', 'Noraber', 'Kotayk', 'Chanakhchi, Armenia', 'Lchavan', 'Lusakert, Ararat', 'Verkhniy Kalakut', 'Kirgi', 'Sisavan', 'Taperakan', 'Buzhakan', 'Mijnatun', 'Hovtashen', 'Nerkin Sasnashen', 'Tandzaver', 'Anaweka River', 'Semyonovka, Armenia', 'Verin Artashat', 'Hnevank', 'Ilmazlu', 'Zariver', 'Dzoraghbyur', 'Vank, Armenia', 'Matenadaran', 'Norakhpyur', 'Aghbulagh', 'Dzoraget River', 'Tarsachay', 'Barekamavan', 'Khnatsakh', 'Alaverdi', 'Yeghvard', 'Tazagyukh, Ararat', 'Nerkin-Chambarak', 'Nerkin Nedzhirlu', 'Aygedzor', 'Gai, Armenia', 'Artsvakar', 'Charchakis', 'Yeghegnadzor', 'Aparan', 'Norabak', 'Agarak (village), Syunik', 'Mayisyan, Armavir', 'Shirak, Armenia', 'Karadzor', 'Shirakamut', 'Baghramyan, Armavir', 'Erebuni Fortress', 'Stepanavan', 'Nor Malatia', 'Lehvaz', 'Tsaghkasar', 'Getikvank', 'Lusagyugh, Aragatsotn', 'Chobanlu', 'Svarants', 'Khordzor', 'Akhta, Vayots Dzor', 'Medovka', 'Akhkikhli', 'Gtashen', 'Arevashogh'}
            Answers = 1327, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.083s]
          Answers = 1327, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.083s]
        Checking schema 26 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 14
            Final Answer: {'2008 Armenian presidential election protests', 'Russian Civil War', 'Battle of Tigranocerta', 'Land mine situation in Nagorno-Karabakh', 'Battle of Avarayr', 'Ottoman–Persian War', 'Ottoman–Safavid War', 'Russo-Turkish War', 'Battle of Caesarea', 'Nagorno-Karabakh War', 'Anastasian War', 'Armenian–Azerbaijani War', 'Roman–Parthian War of 58–63', 'Roman–Parthian Wars'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 27 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 28 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.partially_containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'Asia', 'Europe'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 29 / 221: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 3
            Final Answer: {'2008 Summer Olympics', '2002 Winter Olympics', '2010 Winter Olympics'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 30 / 221: {
          [('Main', '==', 'm.0jgx', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Here'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 31 / 221: {
          [('Main', '==', 'm.0jgx', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Yerevan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 32 / 221: {
          [('Main', '==', 'm.0jgx', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0jgx fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 WHERE { fb:m.0jgx fb:location.country.calling_code ?o1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'374'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 33 / 221: {
          [('Main', '==', 'm.0jgx', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Proletariatis Brdzola'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 34 / 221: {
          [('Main', '==', 'm.0jgx', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 11
            Final Answer: {'Armavir Province', 'Gegharkunik Province', 'Syunik Province', 'Yerevan', 'Ijevan', 'Shirak Province', 'Kotayk Province', 'Jermuk', 'Alaverdi', 'Aragatsotn Province', 'Ararat Province'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 35 / 221: {
          [('Main', '==', 'm.0jgx', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 36 / 221: {
          [('Main', '==', 'm.0jgx', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenian province'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 37 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'UTC+04:00'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 38 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0jgx fb:location.location.area ?o1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 WHERE { fb:m.0jgx fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'2974'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 39 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Eurasia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 40 / 221: {
          [('Main', '==', 'm.0jgx', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 14
            Final Answer: {'One Fine Day', 'The Contest', 'Looking Backward, Moving Forward', 'The history of the Armenian genocide', 'Passage to Ararat', 'The Republic of Armenia', 'Visions of Ararat', 'The Voice of Jerusalem', 'Armenians and Russia, 1626-1796', 'The Chronicle of Abraham of Crete', 'Armenia and Karabagh', 'German responsibility in the Armenian genocide', 'Remembrance and Denial', 'The Armenian massacres in Ottoman Turkey'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 41 / 221: {
          [('Main', '==', 'm.0jgx', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 39
            Final Answer: {'Impeachment Union', 'All Armenian Labour Party', 'Pan-Armenian National Movement', 'Law and Unity', 'Heritage', 'Union Party', 'Prosperous Armenia', 'United Communist Party of Armenia', 'National Unity', 'Society for Free Armenia', 'Renewed Communist Party of Armenia', 'Justice', 'Democratic Liberal Party of Armenia', 'Armenian Communist Party', 'Armenian Revolutionary Federation', 'New Country', 'Armenian Workers Union', 'Republican Party of Armenia', 'Mighty Fatherland', 'Democratic Party of Armenia', 'Republic', 'Dignity, Democracy, Motherland', 'Social Democrat Hunchakian Party', 'National Democratic Union', "People's Party of Armenia", 'Armenian Workers Communist Party', 'Union of Communists of Armenia', 'Rule of Law', 'Constitutional Rights Union', 'Marxist Party of Armenia', 'Conservative Party of Armenia', 'New Times', 'Liberal Democratic Union of Armenia', 'Armenakan-Democratic Liberal Party', 'United Labour Party', "People's Party", 'Armenian Aryan Union', 'Union of Producers and Women', 'Armenian Democratic Liberal Party'}
            Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 42 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.roster', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 45
            Final Answer: {'Taron Voskanyan', 'Valeri Aleksanyan', 'Kamo Hovhannisyan', 'Karlen Mkrtchyan', 'Armen Papyan', 'Gevorg Kasparov', 'Gagik Daghbashyan', 'Arsen Petrosyan', 'Norair Aslanyan', 'Karen Muradyan', 'Marcos Pizzelli', 'Hovhannes Hambardzumyan', 'Robert Arzumanyan', 'Varazdat Haroyan', 'Valter Poghosyan', 'Zaven Badoyan', 'Grigor Meliksetyan', 'Hrayr Mkoyan', 'Edgar Malakyan', 'Gevorg Ghazaryan', 'Masis Voskanian', 'Arthur Yedigaryan', 'Artak Yedigaryan', 'Yura Movsisyan', 'Aghvan Papikyan', 'Stepan Ghazaryan', 'Hovhannes Goharyan', 'Artak Aleksanyan', 'Davit Manoyan', 'Sargis Hovsepyan', 'Artur Avagyan', 'Roman Berezovsky', 'Artem Khachaturov', 'Alex Henrique da Silva', 'Andranik Voskanyan', 'Artur Sarkisov', 'Edgar Manucharyan', 'Henrikh Mkhitaryan', 'Aghvan Mkrtchyan', 'Artur Harutyunyan', 'Aras Özbiliz', 'Arthur Yuspashyan', 'Levon Hayrapetyan', 'Artak Dashyan', 'Ararat Arakelyan'}
            Answers = 45, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 45, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 43 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.roster', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 44 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.roster', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 12
            Final Answer: {'2008', '2013', '2002', '2011', '1996', '2012', '2005', '1992', '2007', '2004', '2009', '2010'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 45 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.coaches', 'sports.sports_team_coach_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.033g54 fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.from ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.033g54 fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 46 / 221: {
          [('Main', '==', 'm.033g54', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'Armenia national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 47 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.roster', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 2
            Final Answer: {'2010', '2012'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 48 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'Armenia national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 49 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.coaches', 'sports.sports_team_coach_tenure.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'Armenia national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 50 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.league', 'sports.sports_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'Armenia national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 51 / 221: {
          [('Main', '==', 'm.033g54', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.033g54 fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.from ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.033g54 fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 52 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.roster', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 4
            Final Answer: {'Forward', 'Defender', 'Goalkeeper', 'Midfielder'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 53 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.coaches', 'sports.sports_team_coach_tenure.coach'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.coach ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.coach ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'Vardan Minasyan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 54 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.coaches', 'sports.sports_team_coach_tenure.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'Coach'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 55 / 221: {
          [('Main', '==', 'm.033g54', ['sports.sports_team.league', 'sports.sports_league_participation.league'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 2
            Final Answer: {'Football Federation of Armenia', 'UEFA'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 56 / 221: {
          [('Main', '==', 'm.033g54', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.manager'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.manager ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.033g54 fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.manager ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.033g54'}
            Query return lines = 1
            Final Answer: {'Vardan Minasyan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 57 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 52
            Final Answer: {'3172185', '1867', '3096298', '3044564', '3339147', '3100236', '2456', '3065954', '3092072', '3223173', '2394', '3090624', '3239212', '2938', '2518', '2138', '3134836', '2643', '2269', '3449940', '3457054', '3544695', '2705', '2580', '2825', '3074181', '2002', '3076098', '3061067', '3370373', '3060554', '3542720', '3192877', '2991', '2766', '3290540', '3079087', '1934', '3396511', '3145885', '3512051', '3062612', '3084979', '3287588', '2882', '2332', '3510439', '2204', '3069844', '3109101', '2070', '3065810'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 58 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 11
            Final Answer: {'-46585', '-500000', '-100000', '1807', '57504', '-67914', '-75000', '-225000', '84926', '80879', '79185'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 59 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 15
            Final Answer: {'42300', '2000', '42000', '47000', '58400', '45000', '55570', '45600', '2100', '61000', '55528', '54400', '55544', '43000', '49000'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 60 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 21
            Final Answer: {'2008', '1995', '1998', '1996', '1997', '1990', '1994', '2009', '2007', '1991', '2002', '2003', '2006', '2001', '1992', '2010', '2000', '1993', '1999', '2005', '2004'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 61 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'1294', '1576', '1306', '1479', '1691', '1508', '2684', '1958', '1577', '1225', '1218', '1192', '1411', '2717', '1308', '1302', '1048', '1043', '1580', '1550', '1262', '1606'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 62 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 25
            Final Answer: {'5.38187e+09', '8.37212e+09', '1.66396e+10', '4.95537e+09', '7.2316e+09', '3.40967e+09', '6.85917e+09', '1.95271e+10', '1.51703e+10', '1.73917e+10', '1.89206e+10', '5.69985e+09', '4.46851e+09', '6.43722e+09', '1.76977e+10', '1.09964e+10', '5.96198e+09', '1.28991e+10', '4.08855e+09', '9.71627e+09', '1.74251e+10', '7.24465e+09', '1.90502e+10', '1.65981e+10', '3.49063e+09'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 63 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 23
            Final Answer: {'597.12', '522.99', '356.43', '399.68', '691', '3305.49', '368.87', '1598', '621.42', '455.55', '2079', '503.43', '588.98', '3030.71', '776.31', '2803', '636.68', '609.09', '6600', '917.17', '1167', '2994', '3787.49'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 64 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'370657000', '520544000', '1401', '1711', '1339', '1009', '804227000', '3.0371e+09', '6.24071e+09', '1968', '7.38332e+09', '3.54131e+09', '2143', '1022', '5.02348e+09', '1994', '638485000', '2106', '2136'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 65 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'2.25684e+09', '1.63949e+09', '1.91156e+09', '1.20131e+09', '1.1662e+10', '2.11847e+09', '6.38446e+09', '4.90044e+09', '1.02478e+10', '2.06853e+09', '1.27258e+09', '1.89373e+09', '1.31516e+09', '3.57662e+09', '2.80706e+09', '1.84548e+09', '2.37634e+09', '1.59697e+09', '8.64802e+09', '9.37118e+09', '1.46832e+09', '9.20628e+09'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 66 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 21
            Final Answer: {'4.15e+06', '2935', '2.762e+08', '300040000', '2948', '1930', '384810000', '307170000', '530500000', '2333', '2831', '354420000', '2383', '1607', '342820000', '2726', '381700000', '3.267e+07', '417290000', '307030000', '319580000'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 67 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 25
            Final Answer: {'1950', '5760', '1930', '4940', '6140', '5380', '5640', '1560', '5390', '1720', '5620', '2040', '4210', '1830', '6100', '6340', '990', '2360', '1040', '1390', '3170', '2740', '2090', '3590', '1240'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 68 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 7
            Final Answer: {'-561810000', '-447457525', '-925224599', '-450092747', '-724779397', '-232661771', '-700960000'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 69 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 8
            Final Answer: {'1.15', '0.99', '0.31', '0.25', '1.11', '0.77', '0.56', '0.29'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 70 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 51
            Final Answer: {'2.846', '2.566', '2.942', '4.55', '2.479', '1.704', '1.731', '4.435', '2.519', '1.692', '2.295', '2.549', '1.838', '2.538', '2.381', '2.385', '2.481', '1.762', '3.788', '2.745', '3.208', '2.053', '1.688', '1.712', '2.565', '2.482', '3.979', '2.421', '4.161', '4.512', '3.606', '1.938', '2.555', '1.734', '2.176', '3.032', '1.736', '2.399', '3.447', '1.684', '1.735', '1.715', '3.314', '1.724', '2.441', '3.118', '4.317', '2.373', '2.646', '1.728', '2.406'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 71 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 52
            Final Answer: {'66.275', '70.479', '69.986', '73.916', '70.576', '73.646', '70.528', '67.757', '70.535', '67.558', '72.278', '70.524', '70.536', '69.504', '68.013', '67.736', '72.616', '69.599', '69.492', '69.924', '67.985', '73.134', '68.409', '70.989', '72.901', '69.029', '68.194', '67.913', '68.577', '71.458', '69.226', '70.635', '70.68', '68.827', '71.89', '65.854', '68.62', '70.659', '73.784', '67.13', '70.492', '70.292', '69.031', '70.523', '70.183', '69.939', '73.496', '67.829', '68.279', '66.701', '70.368', '73.328'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 72 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 18
            Final Answer: {'2008', '2000', '1995', '1993', '2002', '1996', '2003', '1998', '2004', '2006', '1997', '1992', '2005', '1999', '1994', '2001', '2007', '2009'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 73 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.measurement_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 21
            Final Answer: {'2008', '1995', '1998', '2004', '1996', '1997', '1990', '2009', '2007', '1994', '1991', '2002', '2003', '2006', '1992', '2010', '2000', '1993', '2005', '1999', '2001'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 74 / 221: {
          [('Main', '==', 'm.0jgx', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 75 / 221: {
          [('Main', '==', 'm.0jgx', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'Prime minister', 'President'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 76 / 221: {
          [('Main', '==', 'm.0jgx', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 77 / 221: {
          [('Main', '==', 'm.0jgx', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 14
            Final Answer: {'Armenian–Parthian War', '1993 Summer Offensives', 'Land mine situation in Nagorno-Karabakh', 'Battle of Kalbajar', 'Battle of Marj al-Saffar', 'Arab–Byzantine wars', 'Battle of Harim', 'Battle of Ani', 'Nagorno-Karabakh War', 'Battle of Wadi al-Khazandar', '2008 Mardakert skirmishes', 'Russo-Persian War', 'Battle of Karasounk', 'Battle of Varnakert'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 78 / 221: {
          [('Main', '==', 'm.0jgx', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 79 / 221: {
          [('Main', '==', 'm.0jgx', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 80 / 221: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 33
            Final Answer: {'Kristine Khachatryan', 'Artur Aleksanyan', 'Ani-Matilda Serebrakian', 'Hovhannes Davtyan', 'Melik Janoyan', 'Yuri Patrikeyev', 'Arsen Sargsyan', 'Vardan Pahlevanyan', 'Mikayel Koloyan', 'Sergey Mikayelyan', 'Meline Daluzyan', 'Mihran Jaburyan', 'Arakel Mirzoyan', 'Andranik Hakobyan', 'Anahit Barseghyan', 'Tigran Gevorg Martirosyan', 'Hovhannes Sargsyan', 'Arsen Julfalakyan', 'Kristine Harutyunyan', 'Gadzhimurad Nurmagomedov', 'Arsen Nersisyan', 'Rafael Samurgashev', 'Devid Safaryan', 'Armen Nazaryan', 'Norayr Bakhtamyan', 'Artur Davtyan', 'Arman Yeremyan', 'Ara Khachatryan', 'Tigran Vardan Martirosyan', 'Hripsime Khurshudyan', 'Norayr Vardanyan', 'Hovhannes Varderesyan', 'Tadevos Poghosyan'}
            Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 81 / 221: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 82 / 221: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 4
            Final Answer: {'2012 Summer Olympics', '2008 Summer Olympics', '2000 Summer Olympics', '1996 Summer Olympics'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 83 / 221: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 14
            Final Answer: {"Weightlifting at the 2000 Summer Olympics - Men's Middleweight 69-77kg", 'Boxing at the 2008 Summer Olympics – Lightweight', "Wrestling at the 1996 Summer Olympics - Men's Greco-Roman Flyweight", "Weightlifting at the 2008 Summer Olympics - Men's Light Heavyweight 77-85 kg", "Weightlifting at the 2012 Summer Olympics – Women's +75 kg", "Wrestling at the 2008 Summer Olympics - Men's Greco-Roman Super Heavyweight", "Wrestling at the 2000 Summer Olympics - Men's Greco-Roman Heavyweight", "Weightlifting at the 2000 Summer Olympics - Men's Super Heavyweight +105kg", "Wrestling at the 1996 Summer Olympics - Men's freestyle Light Flyweight", "Wrestling at the 2012 Summer Olympics – Men's Greco-Roman 96 kg", "Wrestling at the 2008 Summer Olympics - Men's Greco-Roman Bantamweight", "Weightlifting at the 2008 Summer Olympics - Men's Middleweight 69-77 kg", "Weightlifting at the 2008 Summer Olympics - Men's Lightweight 62-69 kg", "Wrestling at the 2012 Summer Olympics – Men's Greco-Roman 74 kg"}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 84 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1998', '1978', '1962', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1969', '1997', '1990', '1994', '2007', '2009', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '2001', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1976', '1981', '1972', '2005', '1999', '1971', '2004', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 85 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 11
            Final Answer: {'1980', '2000', '1995', '1965', '1985', '1990', '2005', '1970', '1960', '2010', '1975'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 86 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 20
            Final Answer: {'2008', '2000', '1993', '1995', '2002', '2011', '1996', '2003', '1998', '2004', '2006', '1997', '1999', '1992', '2005', '2007', '2001', '1994', '2009', '2010'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 87 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'Electricity consumption per capita, World Development Indicators, World Bank', 'Electricity consumption per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 88 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 89 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 90 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 91 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 92 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 93 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 94 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 95 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 96 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'Gross National Income in PPP dollars, World Development Indicators and Global Development Finance, World Bank', 'Gross National Income in PPP dollars, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 97 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'GDP per capita (current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 98 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Debt stock, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 99 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Gross Domestic Product'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Current: 100 / 221
        Checking schema 100 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Aid flows at constant US$, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 101 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'GNI per capita in PPP dollars, World Development Indicators and Global Development Finance, World Bank', 'GNI per capita in PPP dollars, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 102 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Foreign direct investment, net (BoP, current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 103 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Pump price for fuel, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 104 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'Population Growth Rate, World Development Indicators and Global Development Finance, World Bank', 'Population growth rate, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 105 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'GDP growth rate, World Development Indicators, World Bank', 'World Bank, World Development Indicators, GDP Growth Rate'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 106 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Proportion of seats held by women in national parliaments (%), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 107 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'Military expenditure as percentage of GDP, World Development Indicators and Global Development Finance, World Bank', 'Military expenditure as percentage of GDP, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 108 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'Internet users as percentage of population, World Development Indicators, World Bank', 'Internet users as percentage of population, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 109 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'GDP production (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 110 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Market capitalization of listed companies (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 111 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Total debt service (% of exports of goods, services and income), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 112 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Merchandise trade (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 113 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Gross savings (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 114 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Inflation, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 115 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'GDP expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 116 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Literacy rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 117 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Labor participation rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 118 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Interest rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 119 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'High-technology exports (% of manufactured exports), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 120 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Health expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 121 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Prevalence of undernourishment (% of population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 122 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Long-term unemployment, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 123 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.child_labor_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Children at work (% of children ages 7-14), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 124 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Part time employment, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 125 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Emigration rate of tertiary educated (% of total tertiary educated population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 126 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1978', '1998', '1962', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1997', '1969', '1990', '2009', '2007', '1994', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '2001', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1976', '1972', '1981', '2005', '1999', '1971', '2004', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 127 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1998', '1978', '1962', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1990', '1997', '1969', '1994', '2007', '2009', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '2001', '1992', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1976', '1981', '1972', '2005', '1999', '1971', '2004', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 128 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 25
            Final Answer: {'0.989534', '1.6485', '1.12027', '1.45611', '1.4185', '1.80427', '0.901555', '1.12653', '1.0957', '0.86932', '1.06717', '1.17452', '1.80189', '1.04576', '0.859528', '1.42209', '0.994297', '1.42745', '0.821906', '1.42626', '1.19016', '1.15543', '1.08309', '1.64492', '0.98112'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 129 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 21
            Final Answer: {'2008', '1995', '1998', '1996', '1997', '1990', '2007', '2009', '1994', '1991', '2002', '2003', '2006', '1992', '2001', '2010', '2000', '1993', '2005', '1999', '2004'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 130 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'Energy use per capita, World Development Indicators, World Bank', 'Energy use per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.038s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.038s]
        Checking schema 131 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Consumer price index (2005 = 100), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 132 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 133 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 134 / 221: {
          [('Main', '==', 'm.0jgx', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'Tigran Sargsyan', 'Serzh Sargsyan'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 135 / 221: {
          [('Main', '==', 'm.0jgx', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'Prime Minister of Armenia', 'President of Armenia'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 136 / 221: {
          [('Main', '==', 'm.0jgx', ['organization.organization_member.member_of', 'organization.organization_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'1991', '1992'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 137 / 221: {
          [('Main', '==', 'm.0jgx', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'199'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 138 / 221: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 14
            Final Answer: {'Taekwondo', 'Swimming', 'Cross-country skiing', 'Track and field athletics', 'Rowing', 'Greco-Roman wrestling', 'Canoe Sprint', 'Weightlifting', 'Artistic gymnastics', 'Boxing', 'Shooting sport', 'Judo', 'Alpine skiing', 'Freestyle wrestling'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 139 / 221: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 140 / 221: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 3
            Final Answer: {'Silver medal', 'Bronze medal', 'Gold medal'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 141 / 221: {
          [('Main', '==', 'm.0jgx', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 142 / 221: {
          [('Main', '==', 'm.0jgx', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 143 / 221: {
          [('Main', '==', 'm.0jgx', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 144 / 221: {
          [('Main', '==', 'm.0jgx', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 145 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Population'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 146 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Net migration, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 147 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armed forces personnel, total, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 148 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'2008', '1995', '1998', '2004', '2011', '1996', '1997', '1990', '2009', '1994', '2007', '1991', '2002', '2003', '2006', '1992', '2010', '2000', '1993', '1999', '2005', '2001'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 149 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'2008', '1995', '1998', '2011', '1996', '1997', '1990', '1994', '2007', '2009', '1991', '2002', '2003', '2006', '2001', '1992', '2010', '2000', '1993', '1999', '2005', '2004'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 150 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'2008', '2000', '1993', '1995', '2002', '2011', '1996', '2003', '1998', '2004', '2006', '2005', '1999', '1997', '2009', '2001', '1994', '2007', '2010'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 151 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'2008', '1995', '1998', '2011', '1996', '1997', '1990', '1994', '2007', '2009', '1991', '2002', '2003', '2006', '1992', '2001', '2010', '2000', '1993', '1999', '2005', '2004'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 152 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 21
            Final Answer: {'2008', '1995', '1998', '2011', '1996', '1997', '1994', '2009', '2007', '1991', '2002', '2003', '2006', '1992', '2001', '2010', '2000', '1993', '2005', '1999', '2004'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 153 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'2008', '1995', '1998', '2011', '1996', '1997', '1990', '2009', '2007', '1994', '1991', '2002', '2003', '2006', '1992', '2001', '2010', '2000', '1993', '2005', '1999', '2004'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 154 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 7
            Final Answer: {'2008', '2011', '2006', '2005', '2007', '2009', '2010'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 155 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 8
            Final Answer: {'2008', '2000', '2002', '2012', '1998', '2006', '2004', '2010'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 156 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 51
            Final Answer: {'-0.15', '1.68', '1.74', '-0.34', '-2.07', '1.81', '2.9', '1.7', '1.77', '3.35', '-1.59', '0.23', '2', '-0.82', '2.74', '3.06', '0.14', '0.13', '-0.02', '-1.78', '1.53', '2.62', '2.45', '1.56', '1.44', '3.45', '0.07', '3.52', '1.9', '0.19', '0.11', '2.23', '-0.93', '2.12', '0.16', '0.06', '-0.47', '-1.18', '-2.4', '2.49', '3.56', '-2.33', '0.26', '3.22', '-0.6', '2.32', '2.4', '0.92', '1.59', '2.55', '1.48'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 157 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 20
            Final Answer: {'14.0408', '2.09637', '4.6', '5.9', '5.4', '-14.15', '13.7492', '-8.8', '10.4678', '-11.7', '-41.8', '13.198', '6.9', '3.3', '13.8657', '9.55664', '5.8654', '3.32108', '13.1863', '7.3'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 158 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 8
            Final Answer: {'4.6', '9.2', '5.3', '3.1', '10.7', '8.4', '35.6', '6.3'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 159 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'2.70097', '4.03425', '4.22659', '2.72675', '2.09549', '3.12958', '4.16978', '3.04196', '2.12165', '3.28187', '2.74117', '2.87131', '3.69641', '4.05931', '3.52737', '3.55848', '2.94783', '3.39104', '3.90385'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 160 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'1.30047', '5.63179', '1.63109', '25', '6.02125', '5.25298', '1.9604', '15.3', '6.21', '32', '0.009117', '0.094573', '0.111651', '0.128659', '0.970738', '0.052743', '0', '4.89901', '4.57522'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 161 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'24.97', '18.4', '34', '20.89', '29.46', '18.91', '23.68', '20.66', '31.97', '36.83', '25.96', '19.58', '24.66', '25.55', '20.28', '28.33', '17.38', '44.87', '31.04', '20.45', '51.37', '42.26'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 162 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 11
            Final Answer: {'1.55', '1.14', '0.87', '1.36', '0.43', '0.97', '0.1', '0.51', '1.51', '1.62', '0.94'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 163 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 18
            Final Answer: {'13.32', '5.11', '13.25', '9.23', '1.15', '9.91', '1.94', '8.7', '11.69', '7.48', '20.63', '33.43', '3.18', '9.57', '7.6', '25.44', '11.03', '7.27'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 164 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 18
            Final Answer: {'47.02', '56.64', '46.38', '53.48', '71.76', '61.52', '64.36', '46.62', '59.3', '57.98', '55.92', '70.01', '48.01', '57.45', '51.12', '62.8', '49.76', '68.62'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 165 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'10.33', '29.06', '19.33', '1.61', '34.25', '0.33', '1.72', '-7.28', '29.44', '15.44', '31.11', '17.53', '18.79', '-8.5', '-2.34', '4.08', '-2.14', '18.48', '24.33'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 166 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 18
            Final Answer: {'0.65', '3.15', '6.96', '7.65', '1.06', '18.68', '4447.87', '8.18', '13.96', '4.41', '-0.79', '3.41', '4.72', '175.95', '2.89', '8.67', '0.64', '8.95'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 167 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'-19.97', '-15.89', '-17.88', '-33.77', '-19.38', '-11.33', '-15.57', '-24.61', '-33.84', '-17.23', '-20.68', '-24.2', '-32.75', '-27.17', '-21.44', '-29.04', '-14.42', '-27.53', '-25.61', '-38.26', '-38', '-13.54'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 168 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 3
            Final Answer: {'99.55', '98.75', '99.4'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 169 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 21
            Final Answer: {'48.54', '46.4', '48.37', '47.71', '46.49', '48.05', '48.68', '47.87', '47.61', '48.28', '47.27', '46.51', '46.8', '46.5', '46.44', '48.25', '48.65', '47.15', '46.89', '48.08', '48.84'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 170 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 17
            Final Answer: {'9.25', '26.08', '5.84', '8.65', '9.6', '6.87', '5.81', '32.19', '24.94', '4.9', '6.63', '14.9', '27.35', '18.08', '8.95', '6.25', '63.18'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 171 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 13
            Final Answer: {'1.41', '2.28', '2.18', '10.4', '5.5', '1.25', '0.62', '1.85', '0.88', '2.6', '1.08', '1.62', '4.73'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 172 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 17
            Final Answer: {'5.79', '4.59', '4.47', '5.56', '5.81', '5.49', '4.33', '5.7', '6.27', '5.41', '3.77', '5.95', '3.88', '4.86', '6.45', '5.78', '4.18'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 173 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 4
            Final Answer: {'5', '19', '5.4', '22.8'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 174 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'71.6', '58.2'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 175 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.child_labor_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'9.9'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 176 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'24'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 177 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'9.14', '8.95'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 178 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1998', '1978', '1962', '2004', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1997', '1969', '1990', '2009', '2007', '1994', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1972', '1981', '1976', '2005', '1999', '1971', '2001', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 179 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 21
            Final Answer: {'2008', '1995', '1998', '2011', '1996', '1997', '1994', '2009', '2007', '1991', '2002', '2003', '2006', '1992', '2001', '2010', '2000', '1993', '1999', '2005', '2004'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 180 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 17
            Final Answer: {'2008', '2000', '2002', '2011', '2012', '2003', '1998', '2004', '2006', '1999', '1990', '1997', '2005', '2007', '2001', '2009', '2010'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 181 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'2008', '2000', '1995', '1993', '2002', '2011', '1996', '2003', '1998', '2004', '2006', '2005', '1997', '1999', '1992', '2009', '2001', '2007', '2010'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 182 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'2008', '2000', '1995', '2002', '2011', '1996', '2003', '1998', '2006', '1999', '1997', '2005', '1990', '2007', '2004', '2009', '1994', '2001', '2010'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 183 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'2008', '1995', '1998', '2011', '1996', '1990', '1997', '2009', '1994', '2007', '1991', '2002', '2003', '2006', '1992', '2001', '2010', '2000', '1993', '2005', '1999', '2004'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 184 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 11
            Final Answer: {'2008', '2002', '2011', '2003', '2004', '2006', '2005', '2009', '2001', '2007', '2010'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 185 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'2008', '2000', '1995', '1993', '2002', '2011', '1996', '2003', '1998', '2004', '2006', '1999', '2005', '1997', '1994', '2001', '2009', '2007', '2010'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 186 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 18
            Final Answer: {'2008', '2000', '1995', '2002', '2011', '1996', '2003', '1998', '2006', '2005', '1999', '1997', '2001', '2007', '2004', '1994', '2009', '2010'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 187 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'2008', '2000', '1993', '1995', '2002', '2011', '1996', '2003', '1998', '2004', '2006', '1997', '2005', '1999', '2007', '2001', '1994', '2009', '2010'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 188 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 18
            Final Answer: {'2008', '2000', '1995', '2002', '2011', '1996', '2003', '1998', '2006', '1999', '1997', '2001', '2005', '1994', '2004', '2009', '2007', '2010'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 189 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'2008', '1995', '1998', '2004', '2011', '1996', '1990', '1997', '1994', '2009', '2007', '1991', '2002', '2003', '2006', '1992', '2010', '2000', '1993', '2005', '1999', '2001'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 190 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 3
            Final Answer: {'2010', '1989', '2001'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 191 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 22
            Final Answer: {'2008', '1995', '1998', '2004', '2011', '1996', '1997', '1990', '2007', '2009', '1994', '1991', '2002', '2003', '2006', '1992', '2010', '2000', '1993', '2005', '1999', '2001'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 192 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 17
            Final Answer: {'2008', '2000', '1995', '2002', '2011', '1996', '2003', '1998', '2004', '2006', '2005', '1999', '2001', '1997', '2007', '2009', '2010'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 193 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 14
            Final Answer: {'2008', '2000', '2002', '2011', '2003', '2004', '2006', '1999', '2005', '1997', '2007', '2001', '2009', '2010'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 194 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 17
            Final Answer: {'2008', '2000', '1995', '2002', '2011', '1996', '2003', '1998', '2006', '1997', '1999', '2001', '2005', '2007', '2004', '2009', '2010'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 195 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 5
            Final Answer: {'2008', '1991', '2000', '2011', '2005'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 196 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'2008', '2001'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 197 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.child_labor_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 198 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 199 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'1990', '2000'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Current: 200 / 221
        Checking schema 200 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Fertility Rate'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 201 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'World Bank, World Development Indicators, Life Expectancy', 'Life expectancy, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 202 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'CO2 emissions per capita, World Development Indicators and Global Development Finance, World Bank', 'CO2 emissions per capita, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 203 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 21
            Final Answer: {'680.195', '589.98', '643.766', '843.184', '606.005', '2309', '557.521', '414.997', '2171', '790.845', '589.324', '973.201', '817.054', '1193', '651.264', '610.103', '646.578', '925.555', '651.636', '506.307', '829.407'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 204 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'2008', '2000', '1995', '1993', '2002', '2011', '1996', '2003', '1998', '2004', '2006', '1999', '2005', '1997', '2001', '2007', '1994', '2009', '2010'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 205 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.index_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 19
            Final Answer: {'99.36', '88.71', '117.04', '85.78', '85.23', '100', '92.9', '68.82', '87.78', '140.95', '57.98', '0.46', '121.03', '85.1', '107.43', '21.01', '130.93', '102.89', '78.42'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 206 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 207 / 221: {
          [('Main', '==', 'm.0jgx', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjusted_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 21
            Final Answer: {'4.68341e+09', '1.39275e+09', '1.91156e+09', '2.37134e+09', '2.81938e+09', '3.40239e+09', '4.05332e+09', '2.98717e+09', '1.57617e+09', '1.62852e+09', '2.09507e+09', '1.32139e+09', '1.80506e+09', '1.48885e+09', '2.70332e+09', '2.48951e+09', '1.7474e+09', '1.44889e+09', '3.85151e+09', '4.38106e+09', '4.01515e+09'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 208 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'40.2885'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 209 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'44.9795'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 210 / 221: {
          [('Main', '==', 'm.0jgx', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 4
            Final Answer: {'Georgia', 'Azerbaijan', 'Turkey'}
            Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.010s]
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.010s]
        Checking schema 211 / 221: {
          [('Main', '==', 'm.0jgx', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 2
            Final Answer: {'2008', '2007'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 212 / 221: {
          [('Main', '==', 'm.0jgx', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 213 / 221: {
          [('Main', '==', 'm.0jgx', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 6
            Final Answer: {'World Bank', 'Commonwealth of Independent States', 'Asian Development Bank', 'Partnership for Peace', 'United Nations', 'Council of Europe'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 214 / 221: {
          [('Main', '==', 'm.0jgx', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 215 / 221: {
          [('Main', '==', 'm.0jgx', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'161'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 216 / 221: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 5
            Final Answer: {'2006 Winter Olympics', '2012 Summer Olympics', '2008 Summer Olympics', '2000 Summer Olympics', '2010 Winter Olympics'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 217 / 221: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 14
            Final Answer: {'Gevorg Davtyan', 'Armen Nazaryan', 'Arsen Melikyan', 'Ashot Danielyan', 'Roman Amoyan', 'Arsen Julfalakyan', 'Artur Aleksanyan', 'Yuri Patrikeyev', 'Tigran Gevorg Martirosyan', 'Tigran Vardan Martirosyan', 'Hrachik Javakhyan', 'Armen Mkrtchyan', 'Hripsime Khurshudyan', 'Rafael Samurgashev'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 218 / 221: {
          [('Main', '==', 'm.0jgx', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Flag of Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 219 / 221: {
          [('Main', '==', 'm.0jgx', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 WHERE { fb:m.0jgx fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'1990'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 220 / 221: {
          [('Main', '==', 'm.0jgx', ['location.country.national_anthem', 'government.national_anthem_of_a_country.anthem'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Mer Hayrenik'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        215 / 221 coarse schemas kept with ans_size > 0.
      } [3.413s]
      Coarse level ended, resulting in 215 schemas.
    } [3.626s]
    Type level searching (total types = 10): {
      Current: 0 / 215
[{'type.datetime'}]
[{'sports.sports_team_location'}]
[{'sports.sport'}]
[{'sports.sports_facility'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'government.government_agency'}]
[{'people.person'}]
[{'fictional_universe.fictional_character'}]
[{'sports.sports_team'}]
[{'base.locations.continents'}]
[{'food.beer'}]
[{'biology.animal_breed'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.location'}]
[{'olympics.olympic_games'}]
[{'film.film'}]
[{'location.citytown'}]
[{'type.int'}]
[{'book.newspaper'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_coach_tenure'}, {'type.datetime'}]
[{'soccer.football_team_management_tenure'}, {'soccer.football_team'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_coach_tenure'}, {'sports.sports_team'}]
[{'sports.sports_league_participation'}, {'sports.sports_team'}]
[{'soccer.football_team_management_tenure'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_coach_tenure'}, {'sports.sports_team_coach'}]
[{'sports.sports_team_coach_tenure'}, {'sports.coaching_position'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
[{'soccer.football_team_management_tenure'}, {'soccer.football_team_manager'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_metric_ton'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_event_competition'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
      Current: 100 / 215
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_metric_ton'}, {'type.float'}]
[{'measurement_unit.dated_kgoe'}, {'type.datetime'}]
[{'measurement_unit.dated_kgoe'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_index_value'}, {'dataworld.information_source'}]
[{'measurement_unit.adjusted_money_value'}, {'finance.currency'}]
[{'measurement_unit.adjusted_money_value'}, {'dataworld.information_source'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_sport'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_medal'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_metric_ton'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_kgoe'}, {'type.float'}]
[{'measurement_unit.dated_index_value'}, {'type.datetime'}]
[{'measurement_unit.dated_index_value'}, {'type.float'}]
      Current: 200 / 215
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_athlete'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'government.national_anthem_of_a_country'}, {'government.national_anthem'}]
      24 typed schemas retrieved from 215 coarse schemas.
      Calculating F1 for 24 typed schemas: {
        Current: 0 / 24
        Checking schema 0 / 24: {
          [('Main', '==', 'm.0jgx', ['location.country.form_of_government']), ('Type', '==', 'government.form_of_government', ['type.object.type'])]
          var_types: [{'government.form_of_government'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 3
            Final Answer: {'Representative democracy', 'Presidential system', 'Republic'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 1 / 24: {
          [('Main', '==', 'm.0jgx', ['location.country.administrative_divisions']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.administrative_division', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 2 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.people_born_here']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 3 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.contains']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.country', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 4 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.contains']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 5 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.contains']), ('Type', '==', 'olympics.olympic_participating_country', ['type.object.type'])]
          var_types: [{'location.location', 'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:olympics.olympic_participating_country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:olympics.olympic_participating_country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 6 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.partially_containedby']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.country', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 7 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.partially_containedby']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 8 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.partially_containedby']), ('Type', '==', 'olympics.olympic_participating_country', ['type.object.type'])]
          var_types: [{'location.location', 'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:olympics.olympic_participating_country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:olympics.olympic_participating_country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 9 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.containedby']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.country', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 10 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.containedby']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 11 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.containedby']), ('Type', '==', 'olympics.olympic_participating_country', ['type.object.type'])]
          var_types: [{'location.location', 'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:olympics.olympic_participating_country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jgx fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:olympics.olympic_participating_country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 12 / 24: {
          [('Main', '==', 'm.0jgx', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.governmental_jurisdiction', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 13 / 24: {
          [('Main', '==', 'm.0jgx', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office']), ('Type', '==', 'olympics.olympic_participating_country', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.governmental_jurisdiction', 'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.type fb:olympics.olympic_participating_country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.type fb:olympics.olympic_participating_country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 14 / 24: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'olympics.olympic_athlete_affiliation'}, {'location.country', 'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 15 / 24: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country']), ('Type', '==', 'olympics.olympic_participating_country', ['type.object.type'])]
          var_types: [{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.type fb:olympics.olympic_participating_country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.type fb:olympics.olympic_participating_country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 16 / 24: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'olympics.olympic_medal_honor'}, {'location.country', 'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 17 / 24: {
          [('Main', '==', 'm.0jgx', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country']), ('Type', '==', 'olympics.olympic_participating_country', ['type.object.type'])]
          var_types: [{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.type fb:olympics.olympic_participating_country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.type fb:olympics.olympic_participating_country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 18 / 24: {
          [('Main', '==', 'm.0jgx', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'symbols.flag_use'}, {'symbols.flag_referent', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 19 / 24: {
          [('Main', '==', 'm.0jgx', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'government.national_anthem_of_a_country'}, {'location.country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 20 / 24: {
          [('Main', '==', 'm.0jgx', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country']), ('Type', '==', 'olympics.olympic_participating_country', ['type.object.type'])]
          var_types: [{'government.national_anthem_of_a_country'}, {'location.country', 'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.type fb:olympics.olympic_participating_country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.type fb:olympics.olympic_participating_country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 1
            Final Answer: {'Armenia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 21 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'location.country', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 4
            Final Answer: {'Georgia', 'Azerbaijan', 'Turkey'}
            Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.013s]
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.013s]
        Checking schema 22 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 23 / 24: {
          [('Main', '==', 'm.0jgx', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'olympics.olympic_participating_country', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'location.location', 'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:olympics.olympic_participating_country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_1592|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jgx fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:olympics.olympic_participating_country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jgx'}
            Query return lines = 4
            Final Answer: {'Georgia', 'Azerbaijan', 'Turkey'}
            Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.022s]
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.022s]
        10 / 24 typed schemas kept with ans_size > 0.
      } [0.337s]
      Typed level ended, resulting in 225 schemas.
    } [0.350s]
    Time level searching (total times = 0): {
      Current: 0 / 225
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
self.var_time_preds: [{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
      Current: 100 / 225
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
      Current: 200 / 225
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 225 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 225 schemas.
    } [0.005s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 225
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_agency.date_founded'}]
[{'people.person.date_of_birth'}]
[set()]
[{'sports.sports_team.founded'}]
[set()]
[{'food.beer.first_brewed'}]
[set()]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
[{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, {'sports.sports_team.founded'}]
[set(), {'sports.sports_team.founded'}]
[{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
[{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
[set(), set()]
[{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
      Current: 100 / 225
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
      Current: 200 / 225
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set(), set()]
[set(), set()]
      0 ordinal schemas retrieved from 225 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 225 schemas.
    } [0.004s]
    [2020-12-03 14:19:28] buffer saved.
    225 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1592_schema].
  } [1m13.419s]
  Entering Q 1593 / 5810 [b'what season does haley have her second baby?']: {
    Show 6 E + 10 T + 0 Tm + 2 Ord = 18 linkings: {
      #00 Entity: [1, 2) (season) == m.0754v (season) {'score': 789.899325, 'source': 2.0}
      #01 Entity: [1, 2) (season) == m.0866r (weather) {'score': 2483.982505, 'source': 2.0}
      #02 Entity: [3, 4) (haley) == m.01pd46 (Haley_Joel_Osment) {'score': 5.692282, 'source': 0.0}
      #03 Entity: [3, 4) (haley) == m.027fsyf (Nikki_Haley) {'score': 1.95135, 'source': 1.0}
      #04 Entity: [3, 4) (haley) == m.06zqgk (Haley_Paige) {'score': 2.156725, 'source': 1.0}
      #05 Entity: [3, 4) (haley) == m.09vnxn (Haley_James_Scott) {'score': 45.382202, 'source': 0.0}
      #06 Type: [1, 2) (season) == soccer.football_league_season (football league season) {'sim': 0.826033}
      #07 Type: [1, 2) (season) == sports.sports_league_season (sports league season) {'sim': 0.820958}
      #08 Type: [1, 2) (season) == tv.tv_series_season (tv season) {'sim': 0.817997}
      #09 Type: [0, 2) (what season) == sports.sports_team_season_record (sports team season record) {'sim': 0.801313}
      #10 Type: [4, 6) (have her) == media_common.lost_work (lost work) {'sim': 0.724843}
      #11 Type: [4, 7) (have her second) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.698502}
      #12 Type: [0, 2) (what season) == time.day_of_year (day of year) {'sim': 0.684345}
      #13 Type: [4, 7) (have her second) == media_common.finished_work (finished work) {'sim': 0.683613}
      #14 Type: [4, 7) (have her second) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.681338}
      #15 Type: [2, 3) (does) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.676212}
      #16 Ordinal: [6, 7) (second) max 2 {}
      #17 Ordinal: [6, 7) (second) min 2 {}
    } [0.000s]
    18 link data save to file.
    Coarse level searching (total entities = 6): {
      [Len-1||F1/6] (2020-12-03 14:20:38) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01pd46 ?p1 ?o1 . }
        [2020-12-03 14:20:38] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01pd46 ?p1 ?o1 . }
          Query return lines = 30
        } [0.008s]
        Filt_Query_Ret = 12 / 30 ( 0.008s)
        [Len-1||F1/6||4/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 fb:m.0754v . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 fb:m.0754v . }
            Query return lines = 0
          } [0.025s]
          Filt_Query_Ret = 0 / 0 ( 0.025s)
        } [0.025s]
        [Len-1||F1/6||5/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 fb:m.0866r . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 fb:m.0866r . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
      } [0.049s]
      [Len-1||F2/6] (2020-12-03 14:20:38) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.027fsyf ?p1 ?o1 . }
        [2020-12-03 14:20:38] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.027fsyf ?p1 ?o1 . }
          Query return lines = 22
        } [0.012s]
        Filt_Query_Ret = 10 / 22 ( 0.012s)
        [Len-1||F2/6||4/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 fb:m.0754v . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 fb:m.0754v . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-1||F2/6||5/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 fb:m.0866r . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 fb:m.0866r . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
      } [0.043s]
      [Len-1||F3/6] (2020-12-03 14:20:38) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06zqgk ?p1 ?o1 . }
        [2020-12-03 14:20:38] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.06zqgk ?p1 ?o1 . }
          Query return lines = 21
        } [0.009s]
        Filt_Query_Ret = 11 / 21 ( 0.010s)
        [Len-1||F3/6||4/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 fb:m.0754v . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 fb:m.0754v . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
        [Len-1||F3/6||5/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 fb:m.0866r . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 fb:m.0866r . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
      } [0.030s]
      [Len-1||F4/6] (2020-12-03 14:20:38) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0754v ?p1 ?o1 . }
        [2020-12-03 14:20:38] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0754v ?p1 ?o1 . }
          Query return lines = 11
        } [0.007s]
        Filt_Query_Ret = 3 / 11 ( 0.007s)
        [Len-1||F4/6||1/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 fb:m.01pd46 . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 fb:m.01pd46 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-1||F4/6||2/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 fb:m.027fsyf . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 fb:m.027fsyf . }
            Query return lines = 0
          } [0.026s]
          Filt_Query_Ret = 0 / 0 ( 0.026s)
        } [0.026s]
        [Len-1||F4/6||3/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 fb:m.06zqgk . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 fb:m.06zqgk . }
            Query return lines = 0
          } [0.025s]
          Filt_Query_Ret = 0 / 0 ( 0.025s)
        } [0.025s]
        [Len-1||F4/6||6/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 fb:m.09vnxn . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 fb:m.09vnxn . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
      } [0.099s]
      [Len-1||F5/6] (2020-12-03 14:20:38) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0866r ?p1 ?o1 . }
        [2020-12-03 14:20:38] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0866r ?p1 ?o1 . }
          Query return lines = 11
        } [0.014s]
        Filt_Query_Ret = 3 / 11 ( 0.014s)
        [Len-1||F5/6||1/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 fb:m.01pd46 . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 fb:m.01pd46 . }
            Query return lines = 0
          } [0.023s]
          Filt_Query_Ret = 0 / 0 ( 0.023s)
        } [0.023s]
        [Len-1||F5/6||2/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 fb:m.027fsyf . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 fb:m.027fsyf . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-1||F5/6||3/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 fb:m.06zqgk . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 fb:m.06zqgk . }
            Query return lines = 0
          } [0.018s]
          Filt_Query_Ret = 0 / 0 ( 0.018s)
        } [0.018s]
        [Len-1||F5/6||6/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 fb:m.09vnxn . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 fb:m.09vnxn . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
      } [0.090s]
      [Len-1||F6/6] (2020-12-03 14:20:38) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.09vnxn ?p1 ?o1 . }
        [2020-12-03 14:20:38] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.09vnxn ?p1 ?o1 . }
          Query return lines = 16
        } [0.012s]
        Filt_Query_Ret = 6 / 16 ( 0.012s)
        [Len-1||F6/6||4/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 fb:m.0754v . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 fb:m.0754v . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.005s]
        [Len-1||F6/6||5/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 fb:m.0866r . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 fb:m.0866r . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
      } [0.024s]
      [Len-2||F1/6] (2020-12-03 14:20:38) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:38] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 524
        } [0.065s]
        Filt_Query_Ret = 34 / 524 ( 0.067s)
        [Len-2||F1/6||4/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0754v . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0754v . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-2||F1/6||4/6-2] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0754v . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0754v . }
            Query return lines = 0
          } [0.087s]
          Filt_Query_Ret = 0 / 0 ( 0.087s)
        } [0.087s]
        [Len-2||F1/6||5/6-1] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0866r . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0866r . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
        [Len-2||F1/6||5/6-2] (2020-12-03 14:20:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0866r . }
          [2020-12-03 14:20:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01pd46 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0866r . }
            Query return lines = 1
          } [0.260s]
          Filt_Query_Ret = 0 / 1 ( 0.260s)
        } [0.260s]
      } [0.435s]
      [Len-2||F2/6] (2020-12-03 14:20:39) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:39] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 397
        } [0.050s]
        Filt_Query_Ret = 16 / 397 ( 0.052s)
        [Len-2||F2/6||4/6-1] (2020-12-03 14:20:39) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0754v . }
          [2020-12-03 14:20:39] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0754v . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-2||F2/6||4/6-2] (2020-12-03 14:20:39) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0754v . }
          [2020-12-03 14:20:39] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0754v . }
            Query return lines = 0
          } [0.129s]
          Filt_Query_Ret = 0 / 0 ( 0.129s)
        } [0.129s]
        [Len-2||F2/6||5/6-1] (2020-12-03 14:20:39) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0866r . }
          [2020-12-03 14:20:39] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0866r . }
            Query return lines = 0
          } [0.022s]
          Filt_Query_Ret = 0 / 0 ( 0.022s)
        } [0.022s]
        [Len-2||F2/6||5/6-2] (2020-12-03 14:20:39) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0866r . }
          [2020-12-03 14:20:39] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.027fsyf ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0866r . }
            Query return lines = 1
          } [0.295s]
          Filt_Query_Ret = 0 / 1 ( 0.295s)
        } [0.295s]
      } [0.514s]
      [Len-2||F3/6] (2020-12-03 14:20:39) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:39] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 473
        } [0.050s]
        Filt_Query_Ret = 6 / 473 ( 0.052s)
        [Len-2||F3/6||4/6-1] (2020-12-03 14:20:39) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0754v . }
          [2020-12-03 14:20:39] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0754v . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
        [Len-2||F3/6||4/6-2] (2020-12-03 14:20:39) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0754v . }
          [2020-12-03 14:20:39] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0754v . }
            Query return lines = 0
          } [0.099s]
          Filt_Query_Ret = 0 / 0 ( 0.099s)
        } [0.099s]
        [Len-2||F3/6||5/6-1] (2020-12-03 14:20:39) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0866r . }
          [2020-12-03 14:20:39] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0866r . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
        [Len-2||F3/6||5/6-2] (2020-12-03 14:20:39) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0866r . }
          [2020-12-03 14:20:39] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zqgk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0866r . }
            Query return lines = 1
          } [0.206s]
          Filt_Query_Ret = 0 / 1 ( 0.206s)
        } [0.206s]
      } [0.378s]
      [Len-2||F4/6] (2020-12-03 14:20:39) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:39] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 85
        } [0.016s]
        Filt_Query_Ret = 2 / 85 ( 0.016s)
        [Len-2||F4/6||1/6-1] (2020-12-03 14:20:39) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01pd46 . }
          [2020-12-03 14:20:39] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01pd46 . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
        [Len-2||F4/6||1/6-2] (2020-12-03 14:20:40) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01pd46 . }
          [2020-12-03 14:20:40] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01pd46 . }
            Query return lines = 0
          } [1.850s]
          Filt_Query_Ret = 0 / 0 ( 1.850s)
        } [1.850s]
        [Len-2||F4/6||2/6-1] (2020-12-03 14:20:41) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.027fsyf . }
          [2020-12-03 14:20:41] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.027fsyf . }
            Query return lines = 0
          } [0.040s]
          Filt_Query_Ret = 0 / 0 ( 0.040s)
        } [0.041s]
        [Len-2||F4/6||2/6-2] (2020-12-03 14:20:41) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.027fsyf . }
          [2020-12-03 14:20:41] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.027fsyf . }
            Query return lines = 0
          } [0.626s]
          Filt_Query_Ret = 0 / 0 ( 0.626s)
        } [0.626s]
        [Len-2||F4/6||3/6-1] (2020-12-03 14:20:42) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06zqgk . }
          [2020-12-03 14:20:42] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06zqgk . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-2||F4/6||3/6-2] (2020-12-03 14:20:42) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06zqgk . }
          [2020-12-03 14:20:42] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06zqgk . }
            Query return lines = 0
          } [0.486s]
          Filt_Query_Ret = 0 / 0 ( 0.486s)
        } [0.486s]
        [Len-2||F4/6||6/6-1] (2020-12-03 14:20:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09vnxn . }
          [2020-12-03 14:20:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09vnxn . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-2||F4/6||6/6-2] (2020-12-03 14:20:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09vnxn . }
          [2020-12-03 14:20:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0754v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09vnxn . }
            Query return lines = 0
          } [0.821s]
          Filt_Query_Ret = 0 / 0 ( 0.821s)
        } [0.821s]
      } [3.882s]
      [Len-2||F5/6] (2020-12-03 14:20:43) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:43] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 95
        } [0.027s]
        Filt_Query_Ret = 2 / 95 ( 0.027s)
        [Len-2||F5/6||1/6-1] (2020-12-03 14:20:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01pd46 . }
          [2020-12-03 14:20:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01pd46 . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
        [Len-2||F5/6||1/6-2] (2020-12-03 14:20:43) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01pd46 . }
          [2020-12-03 14:20:43] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01pd46 . }
            Query return lines = 0
          } [1.952s]
          Filt_Query_Ret = 0 / 0 ( 1.952s)
        } [1.953s]
        [Len-2||F5/6||2/6-1] (2020-12-03 14:20:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.027fsyf . }
          [2020-12-03 14:20:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.027fsyf . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
        [Len-2||F5/6||2/6-2] (2020-12-03 14:20:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.027fsyf . }
          [2020-12-03 14:20:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.027fsyf . }
            Query return lines = 0
          } [0.704s]
          Filt_Query_Ret = 0 / 0 ( 0.704s)
        } [0.704s]
        [Len-2||F5/6||3/6-1] (2020-12-03 14:20:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06zqgk . }
          [2020-12-03 14:20:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06zqgk . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F5/6||3/6-2] (2020-12-03 14:20:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06zqgk . }
          [2020-12-03 14:20:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06zqgk . }
            Query return lines = 0
          } [0.622s]
          Filt_Query_Ret = 0 / 0 ( 0.622s)
        } [0.622s]
        [Len-2||F5/6||6/6-1] (2020-12-03 14:20:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09vnxn . }
          [2020-12-03 14:20:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09vnxn . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-2||F5/6||6/6-2] (2020-12-03 14:20:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09vnxn . }
          [2020-12-03 14:20:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0866r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09vnxn . }
            Query return lines = 0
          } [0.635s]
          Filt_Query_Ret = 0 / 0 ( 0.635s)
        } [0.635s]
      } [3.999s]
      [Len-2||F6/6] (2020-12-03 14:20:47) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:20:47] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 191
        } [0.055s]
        Filt_Query_Ret = 8 / 191 ( 0.056s)
        [Len-2||F6/6||4/6-1] (2020-12-03 14:20:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0754v . }
          [2020-12-03 14:20:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0754v . }
            Query return lines = 0
          } [0.023s]
          Filt_Query_Ret = 0 / 0 ( 0.023s)
        } [0.023s]
        [Len-2||F6/6||4/6-2] (2020-12-03 14:20:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0754v . }
          [2020-12-03 14:20:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0754v . }
            Query return lines = 0
          } [0.110s]
          Filt_Query_Ret = 0 / 0 ( 0.110s)
        } [0.110s]
        [Len-2||F6/6||5/6-1] (2020-12-03 14:20:48) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0866r . }
          [2020-12-03 14:20:48] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0866r . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F6/6||5/6-2] (2020-12-03 14:20:48) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0866r . }
          [2020-12-03 14:20:48] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09vnxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0866r . }
            Query return lines = 0
          } [0.294s]
          Filt_Query_Ret = 0 / 0 ( 0.294s)
        } [0.294s]
      } [0.491s]
      113 coarse schemas retrieved from scratch.
      Calculating F1 for 113 coarse schemas: {
        Current: 0 / 113
        Checking schema 0 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01pd46 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 WHERE { fb:m.01pd46 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'1988'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 1 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.006s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.006s]
        Checking schema 2 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'White American'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            Final Answer: {'Theresa Seifert Osment', 'Eugene Osment'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 4 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Catholicism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 5 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01pd46 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 WHERE { fb:m.01pd46 fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'1.626'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 6 / 113: {
          [('Main', '==', 'm.01pd46', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            Final Answer: {'Jungle Rhythm (Jungle Book 2)', 'Jungle Rhythm'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 7 / 113: {
          [('Main', '==', 'm.01pd46', ['film.producer.films_executive_produced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:film.producer.films_executive_produced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:film.producer.films_executive_produced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Montana Amazon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 8 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Actor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 9 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 10 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.languages'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.languages ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.languages ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 11 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01pd46 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Los Angeles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 12 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.027fsyf fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 WHERE { fb:m.027fsyf fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'1972'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 13 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.005s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.005s]
        Checking schema 14 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Indian American'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 15 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 2
            Final Answer: {'Raj Kaur Randhawa', 'Ajit Singh Randhawa'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 16 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 3
            Final Answer: {'Sikh', 'Sikhism', 'Methodism'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 17 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 2
            Final Answer: {'Nalin Haley', 'Rena Haley'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 18 / 113: {
          [('Main', '==', 'm.027fsyf', ['government.politician.election_campaigns'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Nikki Haley for Governor, 2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 19 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 2
            Final Answer: {'Politician', 'Accountant'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 20 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Female'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 21 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.027fsyf fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Bamberg'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 22 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06zqgk fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 WHERE { fb:m.06zqgk fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'1981'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 23 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.007s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.007s]
        Checking schema 24 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            Final Answer: {'Mexican American', 'Welsh American'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 25 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06zqgk fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 WHERE { fb:m.06zqgk fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'1.65'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 26 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'King City'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 27 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'Drug overdose'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 28 / 113: {
          [('Main', '==', 'm.06zqgk', ['film.director.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'Virgin Territory'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 29 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'Pornographic actor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 30 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'Female'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 31 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zqgk fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'Mexico'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 32 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06zqgk fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 WHERE { fb:m.06zqgk fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 33 / 113: {
          [('Main', '==', 'm.0754v', ['book.book_subject.musical_compositions_about_this_topic'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0754v fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0754v fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0754v'}
            Query return lines = 1
            Final Answer: {'The Four Seasons'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 34 / 113: {
          [('Main', '==', 'm.0754v', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0754v fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0754v fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0754v'}
            Query return lines = 9
            Final Answer: {'Spring is not the best of seasons. Cold and flu are two good reasons; wind and rain and other sorrow, warm today and cold tomorrow. Whoever said Spring was romantic? The word that best applies is frantic!', 'April comes like an idiot, babbling and strewing flowers.', 'To be interested in the changing seasons is, in this middling zone, a happier state of mind than to be hopelessly in love with spring.', 'Live in each season as it passes; breathe the air, drink the drink, taste the fruit, and resign yourself to the influences of each. Let them be your only diet drink and botanical medicines.', 'Indoors or out, no one relaxes in March, that month of wind and taxes, the wind will presently disappear, the taxes last us all the year.', "January gray is here, like a sexton by her grave; February bears the bier, march with grief doth howl and rave, and April weeps -- but, O ye hours! Follow with May's fairest flowers.", 'Autumn arrives in early morning, but spring at the close of a winter day.', 'Summer afternoon -- summer afternoon; to me those have always been the two most beautiful words in the English language.', "When chill November's surly blast make fields and forest bare."}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 35 / 113: {
          [('Main', '==', 'm.0754v', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0754v fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0754v fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0754v'}
            Query return lines = 2
            Final Answer: {'Gardening in Eden: The Joys of Planning and Tending a Garden', "In the Town All Year 'Round"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 36 / 113: {
          [('Main', '==', 'm.0866r', ['book.book_subject.musical_compositions_about_this_topic'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0866r fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0866r fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0866r'}
            Query return lines = 1
            Final Answer: {'Spring Haze'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 37 / 113: {
          [('Main', '==', 'm.0866r', ['exhibitions.exhibition_subject.exhibitions_created_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0866r fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0866r fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0866r'}
            Query return lines = 1
            Final Answer: {'Weather'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 38 / 113: {
          [('Main', '==', 'm.0866r', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0866r fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0866r fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0866r'}
            Query return lines = 62
            Final Answer: {'Unstoppable Global Warming: Every 1,500 Years', 'Wind', 'First Science Experiments', 'The Enchanted Sled (Creative Editions)', 'Wind and Air Pressure', 'Lightning', 'Cloud Cover', 'Windy Day', 'One snowy night', 'Snow day', 'An Indian Winter', 'Autumn', 'Precipitation', 'Boat ride with Lillian Two Blossom', 'For Spacious Skies', 'The Coming Storm', 'Like a Windy Day', 'The Dark Secret of Weatherend', 'The Story of a Storm', 'Winter', 'Little Bear and the Wish Fish', 'Irish weather wisdom', 'Cloudy Day, Sunny Day', 'Super Storms That Rocked the World', 'Pickles to Pittsburgh', 'The Storm Book', 'Spring', 'A Kitten Tale', 'Prairie Weather', 'USA Today: The Weather Book', 'Rainy day', 'The things that are most in the world', 'Wildfires', 'The Happy Rain', 'Forecasting the Weather', 'How it works', 'Temperature', 'Weather Patterns', 'The encyclopedia of planting combinations', 'Knockdown', 'After the Storm', 'With Speed and Violence', 'Switchers', 'Chasing the Monsoon: A Modern Pilgrimage through India', 'Divine Wind: The History And Science Of Hurricanes', 'The Quiet Limit of the World', 'Weather', 'The Great Deluge: Hurricane Katrina, New Orleans, and the Mississippi Gulf Coast', 'Weather forecasting', 'Hurricane', 'Northeast Snowstorms', 'A to Z of Scientists in Weather and Climate', 'Icebergs and glaciers', 'Gilberto and the wind', 'The Little Ice Age', 'Due to the Weather', 'The silent storm', 'The Rough Guide to Weather', 'The Atmosphere', 'Cloudy with a Chance of Meatballs', 'Weather words and what they mean'}
            Answers = 61, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 61, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 39 / 113: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 2
            Final Answer: {'Jamie Scott', 'Nathan Scott'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 40 / 113: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.occupation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.occupation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.occupation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 4
            Final Answer: {'Teacher', 'Songwriter', 'Record producer', 'Singer'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 41 / 113: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: {'Nathan Scott'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 42 / 113: {
          [('Main', '==', 'm.09vnxn', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: {'Female'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 43 / 113: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: {'Female'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 44 / 113: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.character_created_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.character_created_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.character_created_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: {'Mark Schwahn'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 45 / 113: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'1.2e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 46 / 113: {
          [('Main', '==', 'm.01pd46', ['film.actor.film', 'film.performance.character_note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 47 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Bachelor of Arts'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 48 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 49 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Haley Joel Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 50 / 113: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 9
            Final Answer: {"BFCA Critics' Choice Award for Best Child Performer", 'Screen Actors Guild Award for Best Supporting Actor - Motion Picture', 'Golden Globe Award for Best Supporting Actor - Film', 'MTV Movie Award for Best On-Screen Duo', 'Academy Award for  Actor in a Supporting Role', 'National Society of Film Critics Award for Best Supporting Actor', "Kids' Choice Award for Favorite Rising Star", 'Satellite Special Achievement Award for Outstanding New Talent', 'MTV Movie Award for Best Breakthrough Performance - Male'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 51 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            Final Answer: {'Emily Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 52 / 113: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 4
            Final Answer: {'Thunder Alley', 'The Jeff Foxworthy Show', 'The Adventures of Spot', 'IGPX'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 53 / 113: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:20:48] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            Final Answer: {'1999', '2000'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 54 / 113: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'The Sixth Sense'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 55 / 113: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 7
            Final Answer: {'Nathan Cacaci', 'Little Boy', 'John Henry', 'Davey Simpkins', 'Curly Gamelthorpe', 'Lucas Simms', 'Eric Stall'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 56 / 113: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 57 / 113: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'therichest.org'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 58 / 113: {
          [('Main', '==', 'm.01pd46', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 24
            Final Answer: {'Pay It Forward', 'Beauty and the Beast: The Enchanted Christmas', 'Sassy Pants', "I'll Remember April", 'The Lake', 'Last Stand at Saber River', 'Secondhand Lions', 'Home of the Giants', 'The Jungle Book 2', 'Forrest Gump', 'Edges of the Lord', 'Truth & Treason', 'Spot: Discover Spot', 'Sacks West', 'Bogus', 'Montana Amazon', 'Edwurd Fudwupper Fibbed Big', 'The Ransom of Red Chief', 'Wake the Dead', 'The Country Bears', 'The Hunchback of Notre Dame II', 'Mixed Nuts', 'The Sixth Sense', 'A.I. Artificial Intelligence'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 59 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            Final Answer: {'La Cañada Flintridge', 'Los Angeles'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 60 / 113: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            Final Answer: {'A.I. Artificial Intelligence', 'The Sixth Sense'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 61 / 113: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            Final Answer: {'1999', '2000', '2001'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 62 / 113: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Haley Joel Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 63 / 113: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Haley Joel Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 64 / 113: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            Final Answer: {'4th Golden Satellite Awards', 'Broadcast Film Critics Association Awards 1999', '2000 MTV Movie Awards'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 65 / 113: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Haley Joel Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 66 / 113: {
          [('Main', '==', 'm.01pd46', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.convicted_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Haley Joel Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 67 / 113: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'2011'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 68 / 113: {
          [('Main', '==', 'm.01pd46', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 13
            Final Answer: {'Victor Franklin', 'Womple', 'Forrest Gump Jr.', 'Albert Franklin', 'Little Boy', 'Trevor McKinney', 'Walter', 'Cole Sear', 'Spot the Dog', 'Chip', 'Chip Hardy', 'Beary Barrington', 'David'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 69 / 113: {
          [('Main', '==', 'm.01pd46', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Haley Joel Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 70 / 113: {
          [('Main', '==', 'm.01pd46', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Voice'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 71 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            Final Answer: {'New York University', 'Flintridge Preparatory School'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 72 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Haley Joel Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 73 / 113: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 74 / 113: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            Final Answer: {'Bruce Willis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 75 / 113: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 76 / 113: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            Final Answer: {'MTV Movie Award for Best Breakthrough Performance - Male', "BFCA Critics' Choice Award for Best Child Performer", 'Satellite Special Achievement Award for Outstanding New Talent'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 77 / 113: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 16
            Final Answer: {'Lucas (2)', 'The 72nd Annual Academy Awards', "There's Something About Paulie", 'Angels and Blimps', 'Flights of Angels', 'Haley Joel Osment, Chi Mcbride, Bee Gees', 'Bloodlines (2)', 'Memento Mori', 'Dammit Janet!', 'Haley Joel Osment, Daryl Sabara, Alexa Vega', 'Show #2011', 'Bloodlines (1)', 'It Girl / Deconstructing Arnold', 'The Fourteenth Floor', 'Lucas (1)', 'The Thin White Line'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 78 / 113: {
          [('Main', '==', 'm.01pd46', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.guilty_of'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: {'Drunk driving in the United States'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 79 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Bachelor of Science'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 80 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'1994'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 81 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Nikki Haley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 82 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 2
            Final Answer: {'Michael Haley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 83 / 113: {
          [('Main', '==', 'm.027fsyf', ['government.politician.party', 'government.political_party_tenure.politician'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Nikki Haley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 84 / 113: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'South Carolina'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 85 / 113: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Governor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 86 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Accountancy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 87 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 2
            Final Answer: {'Lexington', "South Carolina Governor's Mansion"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 88 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'1996'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 89 / 113: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Nikki Haley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 90 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 2
            Final Answer: {'Clemson University', 'Orangeburg Preparatory Schools, Inc.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 91 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Nikki Haley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 92 / 113: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 93 / 113: {
          [('Main', '==', 'm.027fsyf', ['government.politician.party', 'government.political_party_tenure.party'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'Republican Party'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 94 / 113: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: {'2011'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 95 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 3
            Final Answer: {'Chico Wang', 'Martin Del Toro'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 96 / 113: {
          [('Main', '==', 'm.06zqgk', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zqgk fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zqgk fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 3
            Final Answer: {'Sperm Sponges 1', 'Real XXX Letters 2', 'Teenage Wasteland'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 97 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            Final Answer: {'2005', '2007'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 98 / 113: {
          [('Main', '==', 'm.06zqgk', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zqgk fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zqgk fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'Haley Paige'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 99 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            Final Answer: {'2006', '2007'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Current: 100 / 113
        Checking schema 100 / 113: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 101 / 113: {
          [('Main', '==', 'm.0754v', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0754v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0754v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0754v'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 102 / 113: {
          [('Main', '==', 'm.0754v', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0754v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0754v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0754v'}
            Query return lines = 1
            Final Answer: {'Season'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 103 / 113: {
          [('Main', '==', 'm.0866r', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0866r fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0866r fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0866r'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 104 / 113: {
          [('Main', '==', 'm.0866r', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0866r fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0866r fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0866r'}
            Query return lines = 1
            Final Answer: {'Weather'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 105 / 113: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: {'One Tree Hill'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 106 / 113: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.seasons'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 7
            Final Answer: {'One Tree Hill - Season 2', 'One Tree Hill - Season 4', 'One Tree Hill - Season 7', 'One Tree Hill - Season 5', 'One Tree Hill - Season 6', 'One Tree Hill - Season 1', 'One Tree Hill - Season 3'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 107 / 113: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: {'2003'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 108 / 113: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: {'Bethany Joy Lenz-Galeotti'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 109 / 113: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.married_to', 'fictional_universe.marriage_of_fictional_characters.spouses'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 2
            Final Answer: {'Nathan Scott'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 110 / 113: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.siblings', 'fictional_universe.sibling_relationship_of_fictional_characters.siblings'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.siblings ?o1 . ?o1 fb:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.siblings ?o1 . ?o1 fb:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 2
            Final Answer: {'Quinn James'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 111 / 113: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: {'Haley James Scott'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 112 / 113: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.romantically_involved_with', 'fictional_universe.romantic_involvement.partner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 3
            Final Answer: {'Chris Keller'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        111 / 113 coarse schemas kept with ans_size > 0.
      } [1.267s]
      Coarse level ended, resulting in 111 schemas.
    } [11.302s]
    Type level searching (total types = 10): {
      Current: 0 / 111
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'music.recording'}]
[{'film.film'}]
[{'people.profession'}]
[{'people.gender'}]
[{'language.human_language'}]
[{'location.location'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'people.person'}]
[{'government.election_campaign'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'type.float'}]
[{'location.location'}]
[{'people.cause_of_death'}]
[{'film.film'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'music.composition'}]
[{'media_common.quotation'}]
[{'book.written_work'}]
[{'music.composition'}]
[{'exhibitions.exhibition'}]
[{'book.written_work'}]
[{'fictional_universe.fictional_character'}]
[{'fictional_universe.character_occupation'}]
[{'fictional_universe.fictional_character'}]
[{'people.gender'}]
[{'fictional_universe.character_gender'}]
[{'fictional_universe.fictional_character_creator'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'tv.tv_guest_role'}, {'tv.tv_character'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'base.crime.criminal_conviction'}, {'base.crime.convicted_criminal'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'base.crime.criminal_conviction'}, {'base.fight.crime_type'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'government.political_party_tenure'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'location.location'}]
[{'people.marriage'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'government.political_party_tenure'}, {'government.political_party'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'people.marriage'}, {'people.person'}]
[{'film.performance'}, {'film.film'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.performance'}, {'film.actor'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
      Current: 100 / 111
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
[{'tv.regular_tv_appearance'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'fictional_universe.marriage_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
[{'fictional_universe.sibling_relationship_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
[{'fictional_universe.romantic_involvement'}, {'fictional_universe.fictional_character'}]
      1 typed schemas retrieved from 111 coarse schemas.
      Calculating F1 for 1 typed schemas: {
        Current: 0 / 1
        Checking schema 0 / 1: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.seasons']), ('Type', '==', 'tv.tv_series_season', ['type.object.type'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.type fb:tv.tv_series_season . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.type fb:tv.tv_series_season . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 7
            Final Answer: {'One Tree Hill - Season 2', 'One Tree Hill - Season 4', 'One Tree Hill - Season 7', 'One Tree Hill - Season 5', 'One Tree Hill - Season 6', 'One Tree Hill - Season 1', 'One Tree Hill - Season 3'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        1 / 1 typed schemas kept with ans_size > 0.
      } [0.007s]
      Typed level ended, resulting in 112 schemas.
    } [0.013s]
    Time level searching (total times = 0): {
      Current: 0 / 112
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
      Current: 100 / 112
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
      0 timed schemas retrieved from 112 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 112 schemas.
    } [0.003s]
    Ordinal level searching (total ordinals = 2): {
      Current: 0 / 112
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'music.recording.date'}]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[{'media_common.quotation.date'}]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'people.person.date_of_birth'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'tv.tv_series_episode.air_date'}]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), {'film.film.initial_release_date'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
      Current: 100 / 112
[set(), set()]
[set(), set()]
[set(), set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), set()]
[set(), set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
      278 ordinal schemas retrieved from 112 timed schemas.
      Calculating F1 for 278 ordinal schemas: {
        Current: 0 / 278
        Checking schema 0 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.nationality']), ('Ordinal', 'max', '2', ['location.country.calling_code'])]
          var_types: [{'location.country'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 1 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.nationality']), ('Ordinal', 'min', '2', ['location.country.calling_code'])]
          var_types: [{'location.country'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 2 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.parents']), ('Ordinal', 'max', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.parents ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.parents ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 3 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.parents']), ('Ordinal', 'min', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.parents ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.parents ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 4 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.parents']), ('Ordinal', 'max', '2', ['people.person.weight_kg'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.parents ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.parents ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 5 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.parents']), ('Ordinal', 'min', '2', ['people.person.weight_kg'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.parents ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.parents ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 6 / 278: {
          [('Main', '==', 'm.01pd46', ['music.artist.track']), ('Ordinal', 'max', '2', ['music.recording.date'])]
          var_types: [{'music.recording'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:music.artist.track ?o1 . ?o1 fb:music.recording.date ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:music.artist.track ?o1 . ?o1 fb:music.recording.date ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 7 / 278: {
          [('Main', '==', 'm.01pd46', ['music.artist.track']), ('Ordinal', 'min', '2', ['music.recording.date'])]
          var_types: [{'music.recording'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:music.artist.track ?o1 . ?o1 fb:music.recording.date ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:music.artist.track ?o1 . ?o1 fb:music.recording.date ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 8 / 278: {
          [('Main', '==', 'm.01pd46', ['music.artist.track']), ('Ordinal', 'max', '2', ['music.recording.length'])]
          var_types: [{'music.recording'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:music.artist.track ?o1 . ?o1 fb:music.recording.length ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:music.artist.track ?o1 . ?o1 fb:music.recording.length ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 185.0
            Final Answer: {'Jungle Rhythm'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 9 / 278: {
          [('Main', '==', 'm.01pd46', ['music.artist.track']), ('Ordinal', 'min', '2', ['music.recording.length'])]
          var_types: [{'music.recording'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:music.artist.track ?o1 . ?o1 fb:music.recording.length ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:music.artist.track ?o1 . ?o1 fb:music.recording.length ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 186.0
            Final Answer: {'Jungle Rhythm (Jungle Book 2)'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 10 / 278: {
          [('Main', '==', 'm.01pd46', ['film.producer.films_executive_produced']), ('Ordinal', 'max', '2', ['film.film.initial_release_date'])]
          var_types: [{'film.film'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:film.producer.films_executive_produced ?o1 . ?o1 fb:film.film.initial_release_date ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:film.producer.films_executive_produced ?o1 . ?o1 fb:film.film.initial_release_date ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 11 / 278: {
          [('Main', '==', 'm.01pd46', ['film.producer.films_executive_produced']), ('Ordinal', 'min', '2', ['film.film.initial_release_date'])]
          var_types: [{'film.film'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:film.producer.films_executive_produced ?o1 . ?o1 fb:film.film.initial_release_date ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:film.producer.films_executive_produced ?o1 . ?o1 fb:film.film.initial_release_date ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 12 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.place_of_birth']), ('Ordinal', 'max', '2', ['location.location.area'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 13 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.place_of_birth']), ('Ordinal', 'min', '2', ['location.location.area'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 14 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.place_of_birth']), ('Ordinal', 'max', '2', ['location.location.mean_elevation'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 15 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.place_of_birth']), ('Ordinal', 'min', '2', ['location.location.mean_elevation'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.01pd46 fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 16 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.nationality']), ('Ordinal', 'max', '2', ['location.country.calling_code'])]
          var_types: [{'location.country'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 17 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.nationality']), ('Ordinal', 'min', '2', ['location.country.calling_code'])]
          var_types: [{'location.country'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 18 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.parents']), ('Ordinal', 'max', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.parents ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.parents ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 19 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.parents']), ('Ordinal', 'min', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.parents ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.parents ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 20 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.parents']), ('Ordinal', 'max', '2', ['people.person.weight_kg'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.parents ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.parents ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 21 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.parents']), ('Ordinal', 'min', '2', ['people.person.weight_kg'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.parents ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.parents ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 22 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.children']), ('Ordinal', 'max', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.children ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.children ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 23 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.children']), ('Ordinal', 'min', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.children ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.children ?o1 . ?o1 fb:people.person.date_of_birth ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 24 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.children']), ('Ordinal', 'max', '2', ['people.person.weight_kg'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.children ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.children ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 25 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.children']), ('Ordinal', 'min', '2', ['people.person.weight_kg'])]
          var_types: [{'people.person'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.children ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.children ?o1 . ?o1 fb:people.person.weight_kg ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 26 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.place_of_birth']), ('Ordinal', 'max', '2', ['location.location.area'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 27 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.place_of_birth']), ('Ordinal', 'min', '2', ['location.location.area'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 28 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.place_of_birth']), ('Ordinal', 'max', '2', ['location.location.mean_elevation'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 29 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.place_of_birth']), ('Ordinal', 'min', '2', ['location.location.mean_elevation'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.027fsyf fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 30 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.nationality']), ('Ordinal', 'max', '2', ['location.country.calling_code'])]
          var_types: [{'location.country'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:49] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 31 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.nationality']), ('Ordinal', 'min', '2', ['location.country.calling_code'])]
          var_types: [{'location.country'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.nationality ?o1 . ?o1 fb:location.country.calling_code ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 32 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.deceased_person.place_of_death']), ('Ordinal', 'max', '2', ['location.location.area'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 33 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.deceased_person.place_of_death']), ('Ordinal', 'min', '2', ['location.location.area'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 34 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.deceased_person.place_of_death']), ('Ordinal', 'max', '2', ['location.location.mean_elevation'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 35 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.deceased_person.place_of_death']), ('Ordinal', 'min', '2', ['location.location.mean_elevation'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 36 / 278: {
          [('Main', '==', 'm.06zqgk', ['film.director.film']), ('Ordinal', 'max', '2', ['film.film.initial_release_date'])]
          var_types: [{'film.film'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:film.director.film ?o1 . ?o1 fb:film.film.initial_release_date ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:film.director.film ?o1 . ?o1 fb:film.film.initial_release_date ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 37 / 278: {
          [('Main', '==', 'm.06zqgk', ['film.director.film']), ('Ordinal', 'min', '2', ['film.film.initial_release_date'])]
          var_types: [{'film.film'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:film.director.film ?o1 . ?o1 fb:film.film.initial_release_date ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:film.director.film ?o1 . ?o1 fb:film.film.initial_release_date ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 38 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.place_of_birth']), ('Ordinal', 'max', '2', ['location.location.area'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 39 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.place_of_birth']), ('Ordinal', 'min', '2', ['location.location.area'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.area ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 40 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.place_of_birth']), ('Ordinal', 'max', '2', ['location.location.mean_elevation'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 41 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.place_of_birth']), ('Ordinal', 'min', '2', ['location.location.mean_elevation'])]
          var_types: [{'location.location'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.06zqgk fb:people.person.place_of_birth ?o1 . ?o1 fb:location.location.mean_elevation ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 42 / 278: {
          [('Main', '==', 'm.0754v', ['book.book_subject.musical_compositions_about_this_topic']), ('Ordinal', 'max', '2', ['music.composition.date_of_first_performance'])]
          var_types: [{'music.composition'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_of_first_performance ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_of_first_performance ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.0754v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 43 / 278: {
          [('Main', '==', 'm.0754v', ['book.book_subject.musical_compositions_about_this_topic']), ('Ordinal', 'min', '2', ['music.composition.date_of_first_performance'])]
          var_types: [{'music.composition'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_of_first_performance ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_of_first_performance ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.0754v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 44 / 278: {
          [('Main', '==', 'm.0754v', ['book.book_subject.musical_compositions_about_this_topic']), ('Ordinal', 'max', '2', ['music.composition.date_completed'])]
          var_types: [{'music.composition'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_completed ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_completed ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.0754v'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 45 / 278: {
          [('Main', '==', 'm.0754v', ['book.book_subject.musical_compositions_about_this_topic']), ('Ordinal', 'min', '2', ['music.composition.date_completed'])]
          var_types: [{'music.composition'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_completed ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_completed ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.0754v'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 46 / 278: {
          [('Main', '==', 'm.0754v', ['media_common.quotation_subject.quotations_about_this_subject']), ('Ordinal', 'max', '2', ['media_common.quotation.date'])]
          var_types: [{'media_common.quotation'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:media_common.quotation.date ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:media_common.quotation.date ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.0754v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 47 / 278: {
          [('Main', '==', 'm.0754v', ['media_common.quotation_subject.quotations_about_this_subject']), ('Ordinal', 'min', '2', ['media_common.quotation.date'])]
          var_types: [{'media_common.quotation'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:media_common.quotation.date ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:media_common.quotation.date ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.0754v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 48 / 278: {
          [('Main', '==', 'm.0754v', ['book.book_subject.works']), ('Ordinal', 'max', '2', ['book.written_work.date_of_first_publication'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_of_first_publication ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_of_first_publication ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.0754v'}
            Query return lines = 2
            target_ord_value = 2003.0
            Final Answer: {'Gardening in Eden: The Joys of Planning and Tending a Garden'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 49 / 278: {
          [('Main', '==', 'm.0754v', ['book.book_subject.works']), ('Ordinal', 'min', '2', ['book.written_work.date_of_first_publication'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_of_first_publication ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_of_first_publication ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.0754v'}
            Query return lines = 2
            target_ord_value = 2008.0
            Final Answer: {"In the Town All Year 'Round"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 50 / 278: {
          [('Main', '==', 'm.0754v', ['book.book_subject.works']), ('Ordinal', 'max', '2', ['book.written_work.date_written'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_written ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_written ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.0754v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 51 / 278: {
          [('Main', '==', 'm.0754v', ['book.book_subject.works']), ('Ordinal', 'min', '2', ['book.written_work.date_written'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_written ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0754v fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_written ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.0754v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 52 / 278: {
          [('Main', '==', 'm.0866r', ['book.book_subject.musical_compositions_about_this_topic']), ('Ordinal', 'max', '2', ['music.composition.date_of_first_performance'])]
          var_types: [{'music.composition'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_of_first_performance ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_of_first_performance ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.0866r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 53 / 278: {
          [('Main', '==', 'm.0866r', ['book.book_subject.musical_compositions_about_this_topic']), ('Ordinal', 'min', '2', ['music.composition.date_of_first_performance'])]
          var_types: [{'music.composition'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_of_first_performance ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_of_first_performance ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.0866r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 54 / 278: {
          [('Main', '==', 'm.0866r', ['book.book_subject.musical_compositions_about_this_topic']), ('Ordinal', 'max', '2', ['music.composition.date_completed'])]
          var_types: [{'music.composition'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_completed ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_completed ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.0866r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 55 / 278: {
          [('Main', '==', 'm.0866r', ['book.book_subject.musical_compositions_about_this_topic']), ('Ordinal', 'min', '2', ['music.composition.date_completed'])]
          var_types: [{'music.composition'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_completed ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:music.composition.date_completed ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.0866r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 56 / 278: {
          [('Main', '==', 'm.0866r', ['book.book_subject.works']), ('Ordinal', 'max', '2', ['book.written_work.date_of_first_publication'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_of_first_publication ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_of_first_publication ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.0866r'}
            Query return lines = 10
            target_ord_value = 2006.0
            Final Answer: {'Unstoppable Global Warming: Every 1,500 Years', 'The Great Deluge: Hurricane Katrina, New Orleans, and the Mississippi Gulf Coast'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 57 / 278: {
          [('Main', '==', 'm.0866r', ['book.book_subject.works']), ('Ordinal', 'min', '2', ['book.written_work.date_of_first_publication'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_of_first_publication ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_of_first_publication ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.0866r'}
            Query return lines = 10
            target_ord_value = 1991.0
            Final Answer: {'Chasing the Monsoon: A Modern Pilgrimage through India'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 58 / 278: {
          [('Main', '==', 'm.0866r', ['book.book_subject.works']), ('Ordinal', 'max', '2', ['book.written_work.date_written'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_written ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_written ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.0866r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 59 / 278: {
          [('Main', '==', 'm.0866r', ['book.book_subject.works']), ('Ordinal', 'min', '2', ['book.written_work.date_written'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_written ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.0866r fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.date_written ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.0866r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 60 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.children']), ('Ordinal', 'max', '2', ['fictional_universe.fictional_character.weight'])]
          var_types: [{'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:fictional_universe.fictional_character.weight ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:fictional_universe.fictional_character.weight ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 61 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.children']), ('Ordinal', 'min', '2', ['fictional_universe.fictional_character.weight'])]
          var_types: [{'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:fictional_universe.fictional_character.weight ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:fictional_universe.fictional_character.weight ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 62 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.children']), ('Ordinal', 'max', '2', ['fictional_universe.fictional_character.height'])]
          var_types: [{'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:fictional_universe.fictional_character.height ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:fictional_universe.fictional_character.height ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 63 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.children']), ('Ordinal', 'min', '2', ['fictional_universe.fictional_character.height'])]
          var_types: [{'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:fictional_universe.fictional_character.height ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:fictional_universe.fictional_character.height ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 64 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.parents']), ('Ordinal', 'max', '2', ['fictional_universe.fictional_character.weight'])]
          var_types: [{'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:fictional_universe.fictional_character.weight ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:fictional_universe.fictional_character.weight ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 65 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.parents']), ('Ordinal', 'min', '2', ['fictional_universe.fictional_character.weight'])]
          var_types: [{'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:fictional_universe.fictional_character.weight ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:fictional_universe.fictional_character.weight ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 66 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.parents']), ('Ordinal', 'max', '2', ['fictional_universe.fictional_character.height'])]
          var_types: [{'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:fictional_universe.fictional_character.height ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:fictional_universe.fictional_character.height ?ord . ?o1 fb:type.object.name ?n1 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 67 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.parents']), ('Ordinal', 'min', '2', ['fictional_universe.fictional_character.height'])]
          var_types: [{'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:fictional_universe.fictional_character.height ?ord . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o1 ?n1 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:fictional_universe.fictional_character.height ?ord . ?o1 fb:type.object.name ?n1 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 68 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount']), ('Ordinal', 'max', '2', ['!measurement_unit.dated_money_value.amount', 'measurement_unit.dated_money_value.amount'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'type.float'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 69 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount']), ('Ordinal', 'min', '2', ['!measurement_unit.dated_money_value.amount', 'measurement_unit.dated_money_value.amount'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'type.float'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 70 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount']), ('Ordinal', 'max', '2', ['!measurement_unit.dated_money_value.amount', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'type.float'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 71 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount']), ('Ordinal', 'min', '2', ['!measurement_unit.dated_money_value.amount', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'type.float'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 72 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.degree']), ('Ordinal', 'max', '2', ['education.educational_degree.people_with_this_degree', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'education.educational_degree'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 73 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.degree']), ('Ordinal', 'min', '2', ['education.educational_degree.people_with_this_degree', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'education.educational_degree'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 74 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.degree']), ('Ordinal', 'max', '2', ['education.educational_degree.people_with_this_degree', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.educational_degree'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 75 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.degree']), ('Ordinal', 'min', '2', ['education.educational_degree.people_with_this_degree', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.educational_degree'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 76 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.end_date']), ('Ordinal', 'max', '2', ['!education.education.end_date', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.end_date ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.end_date ?ord . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 77 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.end_date']), ('Ordinal', 'min', '2', ['!education.education.end_date', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.end_date ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.end_date ?ord . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 78 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.end_date']), ('Ordinal', 'max', '2', ['!education.education.end_date', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.start_date ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.start_date ?ord . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 79 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.end_date']), ('Ordinal', 'min', '2', ['!education.education.end_date', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.start_date ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.start_date ?ord . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 80 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.places_lived', 'people.place_lived.person']), ('Ordinal', 'max', '2', ['people.person.places_lived', 'people.place_lived.end_date'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 81 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.places_lived', 'people.place_lived.person']), ('Ordinal', 'min', '2', ['people.person.places_lived', 'people.place_lived.end_date'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 82 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.places_lived', 'people.place_lived.person']), ('Ordinal', 'max', '2', ['people.person.places_lived', 'people.place_lived.start_date'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 83 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.places_lived', 'people.place_lived.person']), ('Ordinal', 'min', '2', ['people.person.places_lived', 'people.place_lived.start_date'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 84 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.award']), ('Ordinal', 'max', '2', ['award.award_category.nominees', 'award.award_nomination.year'])]
          var_types: [{'award.award_nomination'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 10
            target_ord_value = 2000.0
            Final Answer: {'Screen Actors Guild Award for Best Supporting Actor - Motion Picture', 'MTV Movie Award for Best On-Screen Duo', 'Golden Globe Award for Best Supporting Actor - Film', "Kids' Choice Award for Favorite Rising Star", 'Satellite Special Achievement Award for Outstanding New Talent', 'MTV Movie Award for Best Breakthrough Performance - Male'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 85 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.award']), ('Ordinal', 'min', '2', ['award.award_category.nominees', 'award.award_nomination.year'])]
          var_types: [{'award.award_nomination'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 10
            target_ord_value = 1999.0
            Final Answer: {'Academy Award for  Actor in a Supporting Role', 'National Society of Film Critics Award for Best Supporting Actor', "BFCA Critics' Choice Award for Best Child Performer"}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 86 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.award']), ('Ordinal', 'max', '2', ['award.award_category.date_established'])]
          var_types: [{'award.award_nomination'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:award.award_category.date_established ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:award.award_category.date_established ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 87 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.award']), ('Ordinal', 'min', '2', ['award.award_category.date_established'])]
          var_types: [{'award.award_nomination'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:award.award_category.date_established ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:award.award_category.date_established ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 88 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Ordinal', 'max', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.sibling_relationship'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 1988.0
            Final Answer: {'Haley Joel Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 89 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Ordinal', 'min', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.sibling_relationship'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 1992.0
            Final Answer: {'Emily Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 90 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Ordinal', 'max', '2', ['people.person.weight_kg'])]
          var_types: [{'people.sibling_relationship'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:people.person.weight_kg ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:people.person.weight_kg ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 91 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Ordinal', 'min', '2', ['people.person.weight_kg'])]
          var_types: [{'people.sibling_relationship'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:people.person.weight_kg ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:people.person.weight_kg ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 92 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series']), ('Ordinal', 'max', '2', ['tv.tv_program.air_date_of_first_episode'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_first_episode ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_first_episode ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 4
            target_ord_value = 1995.0
            Final Answer: {'The Jeff Foxworthy Show'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 93 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series']), ('Ordinal', 'min', '2', ['tv.tv_program.air_date_of_first_episode'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_first_episode ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_first_episode ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 4
            target_ord_value = 1994.0
            Final Answer: {'Thunder Alley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 94 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series']), ('Ordinal', 'max', '2', ['tv.tv_program.air_date_of_final_episode'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_final_episode ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_final_episode ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 1995.0
            Final Answer: {'Thunder Alley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 95 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series']), ('Ordinal', 'min', '2', ['tv.tv_program.air_date_of_final_episode'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_final_episode ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_final_episode ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 1997.0
            Final Answer: {'The Jeff Foxworthy Show'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 96 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.year']), ('Ordinal', 'max', '2', ['!award.award_honor.year', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . ?o1 fb:award.award_honor.year ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . ?o1 fb:award.award_honor.year ?ord . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 1999.0
            Final Answer: {'1999'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 97 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.year']), ('Ordinal', 'min', '2', ['!award.award_honor.year', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . ?o1 fb:award.award_honor.year ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . ?o1 fb:award.award_honor.year ?ord . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 2000.0
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 98 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.honored_for']), ('Ordinal', 'max', '2', ['award.award_winning_work.awards_won', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'award.award_winning_work'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 1999.0
            Final Answer: {'The Sixth Sense'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 99 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.honored_for']), ('Ordinal', 'min', '2', ['award.award_winning_work.awards_won', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'award.award_winning_work'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 2000.0
            Final Answer: {'The Sixth Sense'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Current: 100 / 278
        Checking schema 100 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency']), ('Ordinal', 'max', '2', ['!measurement_unit.dated_money_value.currency', 'measurement_unit.dated_money_value.amount'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 101 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency']), ('Ordinal', 'min', '2', ['!measurement_unit.dated_money_value.currency', 'measurement_unit.dated_money_value.amount'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 102 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency']), ('Ordinal', 'max', '2', ['!measurement_unit.dated_money_value.currency', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 103 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency']), ('Ordinal', 'min', '2', ['!measurement_unit.dated_money_value.currency', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 104 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source']), ('Ordinal', 'max', '2', ['!measurement_unit.dated_money_value.source', 'measurement_unit.dated_money_value.amount'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 105 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source']), ('Ordinal', 'min', '2', ['!measurement_unit.dated_money_value.source', 'measurement_unit.dated_money_value.amount'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 106 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source']), ('Ordinal', 'max', '2', ['!measurement_unit.dated_money_value.source', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 107 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source']), ('Ordinal', 'min', '2', ['!measurement_unit.dated_money_value.source', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 108 / 278: {
          [('Main', '==', 'm.01pd46', ['film.actor.film', 'film.performance.film']), ('Ordinal', 'max', '2', ['film.film.initial_release_date'])]
          var_types: [{'film.performance'}, {'film.film'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:film.film.initial_release_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:film.film.initial_release_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 24
            target_ord_value = 2012.0
            Final Answer: {'Wake the Dead', 'Truth & Treason', 'Sassy Pants'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 109 / 278: {
          [('Main', '==', 'm.01pd46', ['film.actor.film', 'film.performance.film']), ('Ordinal', 'min', '2', ['film.film.initial_release_date'])]
          var_types: [{'film.performance'}, {'film.film'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:film.film.initial_release_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:film.film.initial_release_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 24
            target_ord_value = 1994.0
            Final Answer: {'Forrest Gump', 'Mixed Nuts'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 110 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.places_lived', 'people.place_lived.location']), ('Ordinal', 'max', '2', ['!people.place_lived.location', 'people.place_lived.end_date'])]
          var_types: [{'people.place_lived'}, {'location.location'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 111 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.places_lived', 'people.place_lived.location']), ('Ordinal', 'min', '2', ['!people.place_lived.location', 'people.place_lived.end_date'])]
          var_types: [{'people.place_lived'}, {'location.location'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 112 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.places_lived', 'people.place_lived.location']), ('Ordinal', 'max', '2', ['!people.place_lived.location', 'people.place_lived.start_date'])]
          var_types: [{'people.place_lived'}, {'location.location'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 113 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.places_lived', 'people.place_lived.location']), ('Ordinal', 'min', '2', ['!people.place_lived.location', 'people.place_lived.start_date'])]
          var_types: [{'people.place_lived'}, {'location.location'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 114 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for']), ('Ordinal', 'max', '2', ['award.award_nominated_work.award_nominations', 'award.award_nomination.year'])]
          var_types: [{'award.award_nomination'}, {'award.award_nominated_work'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            target_ord_value = 2000.0
            Final Answer: {'The Sixth Sense'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 115 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for']), ('Ordinal', 'min', '2', ['award.award_nominated_work.award_nominations', 'award.award_nomination.year'])]
          var_types: [{'award.award_nomination'}, {'award.award_nominated_work'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            target_ord_value = 2000.0
            Final Answer: {'The Sixth Sense'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 116 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.year']), ('Ordinal', 'max', '2', ['!award.award_nomination.year', 'award.award_nomination.year'])]
          var_types: [{'award.award_nomination'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . ?o1 fb:award.award_nomination.year ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . ?o1 fb:award.award_nomination.year ?ord . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            target_ord_value = 2000.0
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 117 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.year']), ('Ordinal', 'min', '2', ['!award.award_nomination.year', 'award.award_nomination.year'])]
          var_types: [{'award.award_nomination'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . ?o1 fb:award.award_nomination.year ?ord . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . ?o1 fb:award.award_nomination.year ?ord . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            target_ord_value = 2000.0
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 118 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor']), ('Ordinal', 'max', '2', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.to'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 119 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor']), ('Ordinal', 'min', '2', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.to'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 120 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor']), ('Ordinal', 'max', '2', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.from'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:50] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 121 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor']), ('Ordinal', 'min', '2', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.from'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 122 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.award_winner']), ('Ordinal', 'max', '2', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'award.award_winner'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 1999.0
            Final Answer: {'Haley Joel Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 123 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.award_winner']), ('Ordinal', 'min', '2', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'award.award_winner'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 2
            target_ord_value = 2000.0
            Final Answer: {'Haley Joel Osment'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 124 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.ceremony']), ('Ordinal', 'max', '2', ['award.award_ceremony.awards_presented', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'award.award_ceremony'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            target_ord_value = 2000.0
            Final Answer: {'4th Golden Satellite Awards', '2000 MTV Movie Awards'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 125 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.ceremony']), ('Ordinal', 'min', '2', ['award.award_ceremony.awards_presented', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'award.award_ceremony'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            target_ord_value = 2000.0
            Final Answer: {'4th Golden Satellite Awards', '2000 MTV Movie Awards'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 126 / 278: {
          [('Main', '==', 'm.01pd46', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.convicted_person']), ('Ordinal', 'max', '2', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.jail_time_years'])]
          var_types: [{'base.crime.criminal_conviction'}, {'base.crime.convicted_criminal'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o1 fb:base.crime.criminal_conviction.jail_time_years ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o1 fb:base.crime.criminal_conviction.jail_time_years ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 127 / 278: {
          [('Main', '==', 'm.01pd46', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.convicted_person']), ('Ordinal', 'min', '2', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.jail_time_years'])]
          var_types: [{'base.crime.criminal_conviction'}, {'base.crime.convicted_criminal'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o1 fb:base.crime.criminal_conviction.jail_time_years ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o1 fb:base.crime.criminal_conviction.jail_time_years ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 128 / 278: {
          [('Main', '==', 'm.01pd46', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.convicted_person']), ('Ordinal', 'max', '2', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.date_arrested'])]
          var_types: [{'base.crime.criminal_conviction'}, {'base.crime.convicted_criminal'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o1 fb:base.crime.criminal_conviction.date_arrested ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o1 fb:base.crime.criminal_conviction.date_arrested ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 129 / 278: {
          [('Main', '==', 'm.01pd46', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.convicted_person']), ('Ordinal', 'min', '2', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.date_arrested'])]
          var_types: [{'base.crime.criminal_conviction'}, {'base.crime.convicted_criminal'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o1 fb:base.crime.criminal_conviction.date_arrested ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o1 fb:base.crime.criminal_conviction.date_arrested ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 130 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date']), ('Ordinal', 'max', '2', ['!measurement_unit.dated_money_value.valid_date', 'measurement_unit.dated_money_value.amount'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 131 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date']), ('Ordinal', 'min', '2', ['!measurement_unit.dated_money_value.valid_date', 'measurement_unit.dated_money_value.amount'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . ?o1 fb:measurement_unit.dated_money_value.amount ?ord . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 132 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date']), ('Ordinal', 'max', '2', ['!measurement_unit.dated_money_value.valid_date', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 133 / 278: {
          [('Main', '==', 'm.01pd46', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date']), ('Ordinal', 'min', '2', ['!measurement_unit.dated_money_value.valid_date', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?ord . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 134 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.institution']), ('Ordinal', 'max', '2', ['education.educational_institution.students_graduates', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'education.educational_institution'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 135 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.institution']), ('Ordinal', 'min', '2', ['education.educational_institution.students_graduates', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'education.educational_institution'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 136 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.institution']), ('Ordinal', 'max', '2', ['education.educational_institution.students_graduates', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.educational_institution'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 137 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.institution']), ('Ordinal', 'min', '2', ['education.educational_institution.students_graduates', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.educational_institution'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 138 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.student']), ('Ordinal', 'max', '2', ['people.person.education', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 139 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.student']), ('Ordinal', 'min', '2', ['people.person.education', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 140 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.student']), ('Ordinal', 'max', '2', ['people.person.education', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 141 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.student']), ('Ordinal', 'min', '2', ['people.person.education', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 142 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.start_date']), ('Ordinal', 'max', '2', ['!education.education.start_date', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . ?o1 fb:education.education.end_date ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . ?o1 fb:education.education.end_date ?ord . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 143 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.start_date']), ('Ordinal', 'min', '2', ['!education.education.start_date', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . ?o1 fb:education.education.end_date ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . ?o1 fb:education.education.end_date ?ord . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 144 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.start_date']), ('Ordinal', 'max', '2', ['!education.education.start_date', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . ?o1 fb:education.education.start_date ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . ?o1 fb:education.education.start_date ?ord . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 145 / 278: {
          [('Main', '==', 'm.01pd46', ['people.person.education', 'education.education.start_date']), ('Ordinal', 'min', '2', ['!education.education.start_date', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . ?o1 fb:education.education.start_date ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.01pd46 fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . ?o1 fb:education.education.start_date ?ord . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 146 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee']), ('Ordinal', 'max', '2', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: [{'award.award_nomination'}, {'award.award_nominee'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 4
            target_ord_value = 2000.0
            Final Answer: {'Bruce Willis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 147 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee']), ('Ordinal', 'min', '2', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: [{'award.award_nomination'}, {'award.award_nominee'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o1 fb:award.award_nomination.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 4
            target_ord_value = 2000.0
            Final Answer: {'Bruce Willis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 148 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.award']), ('Ordinal', 'max', '2', ['award.award_category.winners', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            target_ord_value = 2000.0
            Final Answer: {'MTV Movie Award for Best Breakthrough Performance - Male', 'Satellite Special Achievement Award for Outstanding New Talent'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 149 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.award']), ('Ordinal', 'min', '2', ['award.award_category.winners', 'award.award_honor.year'])]
          var_types: [{'award.award_honor'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o1 fb:award.award_honor.year ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 3
            target_ord_value = 2000.0
            Final Answer: {'MTV Movie Award for Best Breakthrough Performance - Male', 'Satellite Special Achievement Award for Outstanding New Talent'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 150 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.award']), ('Ordinal', 'max', '2', ['award.award_category.date_established'])]
          var_types: [{'award.award_honor'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:award.award_category.date_established ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:award.award_category.date_established ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 151 / 278: {
          [('Main', '==', 'm.01pd46', ['award.award_winner.awards_won', 'award.award_honor.award']), ('Ordinal', 'min', '2', ['award.award_category.date_established'])]
          var_types: [{'award.award_honor'}, {'award.award_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:award.award_category.date_established ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:award.award_category.date_established ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 152 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in']), ('Ordinal', 'max', '2', ['tv.tv_series_episode.season_number'])]
          var_types: [{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:tv.tv_series_episode.season_number ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:tv.tv_series_episode.season_number ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 15
            target_ord_value = 9.0
            Final Answer: {'Haley Joel Osment, Chi Mcbride, Bee Gees', 'Show #2011'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 153 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in']), ('Ordinal', 'min', '2', ['tv.tv_series_episode.season_number'])]
          var_types: [{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:tv.tv_series_episode.season_number ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:tv.tv_series_episode.season_number ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 15
            target_ord_value = 2.0
            Final Answer: {"There's Something About Paulie", 'Angels and Blimps', 'Bloodlines (2)', 'Dammit Janet!', 'Bloodlines (1)'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 154 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in']), ('Ordinal', 'max', '2', ['tv.tv_series_episode.episode_number'])]
          var_types: [{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:tv.tv_series_episode.episode_number ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:tv.tv_series_episode.episode_number ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 16
            target_ord_value = 68.0
            Final Answer: {'Haley Joel Osment, Chi Mcbride, Bee Gees'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 155 / 278: {
          [('Main', '==', 'm.01pd46', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in']), ('Ordinal', 'min', '2', ['tv.tv_series_episode.episode_number'])]
          var_types: [{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:tv.tv_series_episode.episode_number ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:tv.tv_series_episode.episode_number ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 16
            target_ord_value = 1.0
            Final Answer: {'The 72nd Annual Academy Awards', 'The Thin White Line'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 156 / 278: {
          [('Main', '==', 'm.01pd46', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.guilty_of']), ('Ordinal', 'max', '2', ['base.fight.crime_type.people_convicted_of_this_crime', 'base.crime.criminal_conviction.jail_time_years'])]
          var_types: [{'base.crime.criminal_conviction'}, {'base.fight.crime_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o1 fb:base.crime.criminal_conviction.jail_time_years ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o1 fb:base.crime.criminal_conviction.jail_time_years ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 157 / 278: {
          [('Main', '==', 'm.01pd46', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.guilty_of']), ('Ordinal', 'min', '2', ['base.fight.crime_type.people_convicted_of_this_crime', 'base.crime.criminal_conviction.jail_time_years'])]
          var_types: [{'base.crime.criminal_conviction'}, {'base.fight.crime_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o1 fb:base.crime.criminal_conviction.jail_time_years ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o1 fb:base.crime.criminal_conviction.jail_time_years ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 158 / 278: {
          [('Main', '==', 'm.01pd46', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.guilty_of']), ('Ordinal', 'max', '2', ['base.fight.crime_type.people_convicted_of_this_crime', 'base.crime.criminal_conviction.date_arrested'])]
          var_types: [{'base.crime.criminal_conviction'}, {'base.fight.crime_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o1 fb:base.crime.criminal_conviction.date_arrested ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o1 fb:base.crime.criminal_conviction.date_arrested ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 159 / 278: {
          [('Main', '==', 'm.01pd46', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.guilty_of']), ('Ordinal', 'min', '2', ['base.fight.crime_type.people_convicted_of_this_crime', 'base.crime.criminal_conviction.date_arrested'])]
          var_types: [{'base.crime.criminal_conviction'}, {'base.fight.crime_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o1 fb:base.crime.criminal_conviction.date_arrested ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.01pd46 fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o1 fb:base.crime.criminal_conviction.date_arrested ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.01pd46'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 160 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.degree']), ('Ordinal', 'max', '2', ['education.educational_degree.people_with_this_degree', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'education.educational_degree'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 161 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.degree']), ('Ordinal', 'min', '2', ['education.educational_degree.people_with_this_degree', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'education.educational_degree'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 162 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.degree']), ('Ordinal', 'max', '2', ['education.educational_degree.people_with_this_degree', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.educational_degree'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 163 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.degree']), ('Ordinal', 'min', '2', ['education.educational_degree.people_with_this_degree', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.educational_degree'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 164 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.end_date']), ('Ordinal', 'max', '2', ['!education.education.end_date', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.end_date ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.end_date ?ord . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 165 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.end_date']), ('Ordinal', 'min', '2', ['!education.education.end_date', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.end_date ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.end_date ?ord . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 166 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.end_date']), ('Ordinal', 'max', '2', ['!education.education.end_date', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.start_date ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.start_date ?ord . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 167 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.end_date']), ('Ordinal', 'min', '2', ['!education.education.end_date', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.start_date ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . ?o1 fb:education.education.start_date ?ord . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 168 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.places_lived', 'people.place_lived.person']), ('Ordinal', 'max', '2', ['people.person.places_lived', 'people.place_lived.end_date'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 169 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.places_lived', 'people.place_lived.person']), ('Ordinal', 'min', '2', ['people.person.places_lived', 'people.place_lived.end_date'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 170 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.places_lived', 'people.place_lived.person']), ('Ordinal', 'max', '2', ['people.person.places_lived', 'people.place_lived.start_date'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 171 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.places_lived', 'people.place_lived.person']), ('Ordinal', 'min', '2', ['people.person.places_lived', 'people.place_lived.start_date'])]
          var_types: [{'people.place_lived'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 172 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.spouse']), ('Ordinal', 'max', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 173 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.spouse']), ('Ordinal', 'min', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 174 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.spouse']), ('Ordinal', 'max', '2', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 175 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.spouse']), ('Ordinal', 'min', '2', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 176 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.party', 'government.political_party_tenure.politician']), ('Ordinal', 'max', '2', ['government.politician.party', 'government.political_party_tenure.to'])]
          var_types: [{'government.political_party_tenure'}, {'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o1 fb:government.political_party_tenure.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o1 fb:government.political_party_tenure.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 177 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.party', 'government.political_party_tenure.politician']), ('Ordinal', 'min', '2', ['government.politician.party', 'government.political_party_tenure.to'])]
          var_types: [{'government.political_party_tenure'}, {'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o1 fb:government.political_party_tenure.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o1 fb:government.political_party_tenure.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 178 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.party', 'government.political_party_tenure.politician']), ('Ordinal', 'max', '2', ['government.politician.party', 'government.political_party_tenure.from'])]
          var_types: [{'government.political_party_tenure'}, {'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o1 fb:government.political_party_tenure.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o1 fb:government.political_party_tenure.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 179 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.party', 'government.political_party_tenure.politician']), ('Ordinal', 'min', '2', ['government.politician.party', 'government.political_party_tenure.from'])]
          var_types: [{'government.political_party_tenure'}, {'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o1 fb:government.political_party_tenure.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o1 fb:government.political_party_tenure.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 180 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office']), ('Ordinal', 'max', '2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: [{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 181 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office']), ('Ordinal', 'min', '2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: [{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 182 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office']), ('Ordinal', 'max', '2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: [{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 183 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office']), ('Ordinal', 'min', '2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: [{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 184 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.basic_title']), ('Ordinal', 'max', '2', ['government.government_office_category.officeholders', 'government.government_position_held.to'])]
          var_types: [{'government.government_position_held'}, {'government.government_office_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 185 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.basic_title']), ('Ordinal', 'min', '2', ['government.government_office_category.officeholders', 'government.government_position_held.to'])]
          var_types: [{'government.government_position_held'}, {'government.government_office_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 186 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.basic_title']), ('Ordinal', 'max', '2', ['government.government_office_category.officeholders', 'government.government_position_held.from'])]
          var_types: [{'government.government_position_held'}, {'government.government_office_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 187 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.basic_title']), ('Ordinal', 'min', '2', ['government.government_office_category.officeholders', 'government.government_position_held.from'])]
          var_types: [{'government.government_position_held'}, {'government.government_office_category'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 188 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.major_field_of_study']), ('Ordinal', 'max', '2', ['education.field_of_study.students_majoring', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'education.field_of_study'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 189 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.major_field_of_study']), ('Ordinal', 'min', '2', ['education.field_of_study.students_majoring', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'education.field_of_study'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 190 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.major_field_of_study']), ('Ordinal', 'max', '2', ['education.field_of_study.students_majoring', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.field_of_study'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 191 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.major_field_of_study']), ('Ordinal', 'min', '2', ['education.field_of_study.students_majoring', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.field_of_study'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 192 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.places_lived', 'people.place_lived.location']), ('Ordinal', 'max', '2', ['!people.place_lived.location', 'people.place_lived.end_date'])]
          var_types: [{'people.place_lived'}, {'location.location'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 193 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.places_lived', 'people.place_lived.location']), ('Ordinal', 'min', '2', ['!people.place_lived.location', 'people.place_lived.end_date'])]
          var_types: [{'people.place_lived'}, {'location.location'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 194 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.places_lived', 'people.place_lived.location']), ('Ordinal', 'max', '2', ['!people.place_lived.location', 'people.place_lived.start_date'])]
          var_types: [{'people.place_lived'}, {'location.location'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 195 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.places_lived', 'people.place_lived.location']), ('Ordinal', 'min', '2', ['!people.place_lived.location', 'people.place_lived.start_date'])]
          var_types: [{'people.place_lived'}, {'location.location'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o1 fb:people.place_lived.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 196 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.from']), ('Ordinal', 'max', '2', ['!people.marriage.from', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.to ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.to ?ord . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 197 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.from']), ('Ordinal', 'min', '2', ['!people.marriage.from', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.to ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.to ?ord . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 198 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.from']), ('Ordinal', 'max', '2', ['!people.marriage.from', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.from ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.from ?ord . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 199 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.from']), ('Ordinal', 'min', '2', ['!people.marriage.from', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.from ?ord . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.from ?ord . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Current: 200 / 278
        Checking schema 200 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.office_holder']), ('Ordinal', 'max', '2', ['government.politician.government_positions_held', 'government.government_position_held.to'])]
          var_types: [{'government.government_position_held'}, {'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 201 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.office_holder']), ('Ordinal', 'min', '2', ['government.politician.government_positions_held', 'government.government_position_held.to'])]
          var_types: [{'government.government_position_held'}, {'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 202 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.office_holder']), ('Ordinal', 'max', '2', ['government.politician.government_positions_held', 'government.government_position_held.from'])]
          var_types: [{'government.government_position_held'}, {'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 203 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.office_holder']), ('Ordinal', 'min', '2', ['government.politician.government_positions_held', 'government.government_position_held.from'])]
          var_types: [{'government.government_position_held'}, {'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 204 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.institution']), ('Ordinal', 'max', '2', ['education.educational_institution.students_graduates', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'education.educational_institution'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 205 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.institution']), ('Ordinal', 'min', '2', ['education.educational_institution.students_graduates', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'education.educational_institution'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 206 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.institution']), ('Ordinal', 'max', '2', ['education.educational_institution.students_graduates', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.educational_institution'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 207 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.institution']), ('Ordinal', 'min', '2', ['education.educational_institution.students_graduates', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'education.educational_institution'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 208 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.student']), ('Ordinal', 'max', '2', ['people.person.education', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 209 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.student']), ('Ordinal', 'min', '2', ['people.person.education', 'education.education.end_date'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.end_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 210 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.student']), ('Ordinal', 'max', '2', ['people.person.education', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 211 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.education', 'education.education.student']), ('Ordinal', 'min', '2', ['people.person.education', 'education.education.start_date'])]
          var_types: [{'education.education'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o1 fb:education.education.start_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 212 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.type_of_union']), ('Ordinal', 'max', '2', ['people.marriage_union_type.unions_of_this_type', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'people.marriage_union_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 213 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.type_of_union']), ('Ordinal', 'min', '2', ['people.marriage_union_type.unions_of_this_type', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'people.marriage_union_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 214 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.type_of_union']), ('Ordinal', 'max', '2', ['people.marriage_union_type.unions_of_this_type', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'people.marriage_union_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 215 / 278: {
          [('Main', '==', 'm.027fsyf', ['people.person.spouse_s', 'people.marriage.type_of_union']), ('Ordinal', 'min', '2', ['people.marriage_union_type.unions_of_this_type', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'people.marriage_union_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 216 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.party', 'government.political_party_tenure.party']), ('Ordinal', 'max', '2', ['government.political_party.politicians_in_this_party', 'government.political_party_tenure.to'])]
          var_types: [{'government.political_party_tenure'}, {'government.political_party'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o1 fb:government.political_party_tenure.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o1 fb:government.political_party_tenure.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 217 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.party', 'government.political_party_tenure.party']), ('Ordinal', 'min', '2', ['government.political_party.politicians_in_this_party', 'government.political_party_tenure.to'])]
          var_types: [{'government.political_party_tenure'}, {'government.political_party'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o1 fb:government.political_party_tenure.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o1 fb:government.political_party_tenure.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 218 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.party', 'government.political_party_tenure.party']), ('Ordinal', 'max', '2', ['government.political_party.politicians_in_this_party', 'government.political_party_tenure.from'])]
          var_types: [{'government.political_party_tenure'}, {'government.political_party'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o1 fb:government.political_party_tenure.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o1 fb:government.political_party_tenure.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 219 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.party', 'government.political_party_tenure.party']), ('Ordinal', 'min', '2', ['government.political_party.politicians_in_this_party', 'government.political_party_tenure.from'])]
          var_types: [{'government.political_party_tenure'}, {'government.political_party'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o1 fb:government.political_party_tenure.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:51] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.027fsyf fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o1 fb:government.political_party_tenure.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 220 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.from']), ('Ordinal', 'max', '2', ['!government.government_position_held.from', 'government.government_position_held.to'])]
          var_types: [{'government.government_position_held'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.to ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.to ?ord . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 221 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.from']), ('Ordinal', 'min', '2', ['!government.government_position_held.from', 'government.government_position_held.to'])]
          var_types: [{'government.government_position_held'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.to ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.to ?ord . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 222 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.from']), ('Ordinal', 'max', '2', ['!government.government_position_held.from', 'government.government_position_held.from'])]
          var_types: [{'government.government_position_held'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.from ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.from ?ord . }|None|||max|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 223 / 278: {
          [('Main', '==', 'm.027fsyf', ['government.politician.government_positions_held', 'government.government_position_held.from']), ('Ordinal', 'min', '2', ['!government.government_position_held.from', 'government.government_position_held.from'])]
          var_types: [{'government.government_position_held'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.from ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.027fsyf fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.from ?ord . }|None|||min|2|None
            Forbidden mid: {'m.027fsyf'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 224 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.spouse']), ('Ordinal', 'max', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 1969.0
            Final Answer: {'Chico Wang'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 225 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.spouse']), ('Ordinal', 'min', '2', ['people.person.date_of_birth'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:people.person.date_of_birth ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 1981.0
            Final Answer: {'Haley Paige'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 226 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.spouse']), ('Ordinal', 'max', '2', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 4
            target_ord_value = 2007.0
            Final Answer: {'Chico Wang'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 227 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.spouse']), ('Ordinal', 'min', '2', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'people.person'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 4
            target_ord_value = 2006.0
            Final Answer: {'Martin Del Toro'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 228 / 278: {
          [('Main', '==', 'm.06zqgk', ['film.actor.film', 'film.performance.film']), ('Ordinal', 'max', '2', ['film.film.initial_release_date'])]
          var_types: [{'film.performance'}, {'film.film'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:film.film.initial_release_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:film.film.initial_release_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 3
            target_ord_value = 2006.0
            Final Answer: {'Sperm Sponges 1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 229 / 278: {
          [('Main', '==', 'm.06zqgk', ['film.actor.film', 'film.performance.film']), ('Ordinal', 'min', '2', ['film.film.initial_release_date'])]
          var_types: [{'film.performance'}, {'film.film'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:film.film.initial_release_date ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:film.film.initial_release_date ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 3
            target_ord_value = 2006.0
            Final Answer: {'Sperm Sponges 1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 230 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.from']), ('Ordinal', 'max', '2', ['!people.marriage.from', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.to ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.to ?ord . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2006.0
            Final Answer: {'2005'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 231 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.from']), ('Ordinal', 'min', '2', ['!people.marriage.from', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.to ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.to ?ord . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2007.0
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 232 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.from']), ('Ordinal', 'max', '2', ['!people.marriage.from', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.from ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.from ?ord . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2005.0
            Final Answer: {'2005'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 233 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.from']), ('Ordinal', 'min', '2', ['!people.marriage.from', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.from ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . ?o1 fb:people.marriage.from ?ord . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2007.0
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 234 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.to']), ('Ordinal', 'max', '2', ['!people.marriage.to', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . ?o1 fb:people.marriage.to ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . ?o1 fb:people.marriage.to ?ord . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2006.0
            Final Answer: {'2006'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 235 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.to']), ('Ordinal', 'min', '2', ['!people.marriage.to', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . ?o1 fb:people.marriage.to ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . ?o1 fb:people.marriage.to ?ord . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2007.0
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 236 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.to']), ('Ordinal', 'max', '2', ['!people.marriage.to', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . ?o1 fb:people.marriage.from ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . ?o1 fb:people.marriage.from ?ord . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2005.0
            Final Answer: {'2006'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 237 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.to']), ('Ordinal', 'min', '2', ['!people.marriage.to', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . ?o1 fb:people.marriage.from ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . ?o1 fb:people.marriage.from ?ord . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2007.0
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 238 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.type_of_union']), ('Ordinal', 'max', '2', ['people.marriage_union_type.unions_of_this_type', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'people.marriage_union_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2006.0
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 239 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.type_of_union']), ('Ordinal', 'min', '2', ['people.marriage_union_type.unions_of_this_type', 'people.marriage.to'])]
          var_types: [{'people.marriage'}, {'people.marriage_union_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2007.0
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 240 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.type_of_union']), ('Ordinal', 'max', '2', ['people.marriage_union_type.unions_of_this_type', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'people.marriage_union_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2005.0
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 241 / 278: {
          [('Main', '==', 'm.06zqgk', ['people.person.spouse_s', 'people.marriage.type_of_union']), ('Ordinal', 'min', '2', ['people.marriage_union_type.unions_of_this_type', 'people.marriage.from'])]
          var_types: [{'people.marriage'}, {'people.marriage_union_type'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.06zqgk fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o1 fb:people.marriage.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.06zqgk'}
            Query return lines = 2
            target_ord_value = 2007.0
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 242 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.series']), ('Ordinal', 'max', '2', ['tv.tv_program.air_date_of_first_episode'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_first_episode ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_first_episode ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 243 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.series']), ('Ordinal', 'min', '2', ['tv.tv_program.air_date_of_first_episode'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_first_episode ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_first_episode ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 244 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.series']), ('Ordinal', 'max', '2', ['tv.tv_program.air_date_of_final_episode'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_final_episode ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_final_episode ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 245 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.series']), ('Ordinal', 'min', '2', ['tv.tv_program.air_date_of_final_episode'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_final_episode ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:tv.tv_program.air_date_of_final_episode ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 246 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.seasons']), ('Ordinal', 'max', '2', ['tv.tv_series_season.season_number'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:tv.tv_series_season.season_number ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:tv.tv_series_season.season_number ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 7
            target_ord_value = 6.0
            Final Answer: {'One Tree Hill - Season 6'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 247 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.seasons']), ('Ordinal', 'min', '2', ['tv.tv_series_season.season_number'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:tv.tv_series_season.season_number ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:tv.tv_series_season.season_number ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 7
            target_ord_value = 2.0
            Final Answer: {'One Tree Hill - Season 2'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 248 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.seasons']), ('Ordinal', 'max', '2', ['tv.tv_series_season.number_of_episodes'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:tv.tv_series_season.number_of_episodes ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:tv.tv_series_season.number_of_episodes ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 7
            target_ord_value = 23.0
            Final Answer: {'One Tree Hill - Season 7', 'One Tree Hill - Season 2'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 249 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.seasons']), ('Ordinal', 'min', '2', ['tv.tv_series_season.number_of_episodes'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:tv.tv_series_season.number_of_episodes ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:tv.tv_series_season.number_of_episodes ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 7
            target_ord_value = 21.0
            Final Answer: {'One Tree Hill - Season 4'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 250 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.from']), ('Ordinal', 'max', '2', ['!tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'])]
          var_types: [{'tv.regular_tv_appearance'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 251 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.from']), ('Ordinal', 'min', '2', ['!tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'])]
          var_types: [{'tv.regular_tv_appearance'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 252 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.from']), ('Ordinal', 'max', '2', ['!tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.from'])]
          var_types: [{'tv.regular_tv_appearance'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 253 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.from']), ('Ordinal', 'min', '2', ['!tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.from'])]
          var_types: [{'tv.regular_tv_appearance'}, {'type.datetime'}]
          SELECT DISTINCT ?o2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 254 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.actor']), ('Ordinal', 'max', '2', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.to'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 255 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.actor']), ('Ordinal', 'min', '2', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.to'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 256 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.actor']), ('Ordinal', 'max', '2', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.from'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 257 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.actor']), ('Ordinal', 'min', '2', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.from'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 258 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.married_to', 'fictional_universe.marriage_of_fictional_characters.spouses']), ('Ordinal', 'max', '2', ['fictional_universe.fictional_character.weight'])]
          var_types: [{'fictional_universe.marriage_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 259 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.married_to', 'fictional_universe.marriage_of_fictional_characters.spouses']), ('Ordinal', 'min', '2', ['fictional_universe.fictional_character.weight'])]
          var_types: [{'fictional_universe.marriage_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 260 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.married_to', 'fictional_universe.marriage_of_fictional_characters.spouses']), ('Ordinal', 'max', '2', ['fictional_universe.fictional_character.height'])]
          var_types: [{'fictional_universe.marriage_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 261 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.married_to', 'fictional_universe.marriage_of_fictional_characters.spouses']), ('Ordinal', 'min', '2', ['fictional_universe.fictional_character.height'])]
          var_types: [{'fictional_universe.marriage_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 262 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.siblings', 'fictional_universe.sibling_relationship_of_fictional_characters.siblings']), ('Ordinal', 'max', '2', ['fictional_universe.fictional_character.weight'])]
          var_types: [{'fictional_universe.sibling_relationship_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.siblings ?o1 . ?o1 fb:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.siblings ?o1 . ?o1 fb:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 263 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.siblings', 'fictional_universe.sibling_relationship_of_fictional_characters.siblings']), ('Ordinal', 'min', '2', ['fictional_universe.fictional_character.weight'])]
          var_types: [{'fictional_universe.sibling_relationship_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.siblings ?o1 . ?o1 fb:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.siblings ?o1 . ?o1 fb:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 264 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.siblings', 'fictional_universe.sibling_relationship_of_fictional_characters.siblings']), ('Ordinal', 'max', '2', ['fictional_universe.fictional_character.height'])]
          var_types: [{'fictional_universe.sibling_relationship_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.siblings ?o1 . ?o1 fb:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.siblings ?o1 . ?o1 fb:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 265 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.siblings', 'fictional_universe.sibling_relationship_of_fictional_characters.siblings']), ('Ordinal', 'min', '2', ['fictional_universe.fictional_character.height'])]
          var_types: [{'fictional_universe.sibling_relationship_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.siblings ?o1 . ?o1 fb:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.siblings ?o1 . ?o1 fb:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 266 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.character']), ('Ordinal', 'max', '2', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.to'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 267 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.character']), ('Ordinal', 'min', '2', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.to'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o1 fb:tv.regular_tv_appearance.to ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 268 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.character']), ('Ordinal', 'max', '2', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.from'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 269 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.character']), ('Ordinal', 'min', '2', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.from'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o1 fb:tv.regular_tv_appearance.from ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 1
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 270 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.romantically_involved_with', 'fictional_universe.romantic_involvement.partner']), ('Ordinal', 'max', '2', ['fictional_universe.fictional_character.weight'])]
          var_types: [{'fictional_universe.romantic_involvement'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 271 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.romantically_involved_with', 'fictional_universe.romantic_involvement.partner']), ('Ordinal', 'min', '2', ['fictional_universe.fictional_character.weight'])]
          var_types: [{'fictional_universe.romantic_involvement'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:fictional_universe.fictional_character.weight ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 272 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.romantically_involved_with', 'fictional_universe.romantic_involvement.partner']), ('Ordinal', 'max', '2', ['fictional_universe.fictional_character.height'])]
          var_types: [{'fictional_universe.romantic_involvement'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 273 / 278: {
          [('Main', '==', 'm.09vnxn', ['fictional_universe.fictional_character.romantically_involved_with', 'fictional_universe.romantic_involvement.partner']), ('Ordinal', 'min', '2', ['fictional_universe.fictional_character.height'])]
          var_types: [{'fictional_universe.romantic_involvement'}, {'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:fictional_universe.fictional_character.height ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 274 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.seasons']), ('Type', '==', 'tv.tv_series_season', ['type.object.type']), ('Ordinal', 'max', '2', ['tv.tv_series_season.season_number'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.type fb:tv.tv_series_season . ?o2 fb:tv.tv_series_season.season_number ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.type fb:tv.tv_series_season . ?o2 fb:tv.tv_series_season.season_number ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 7
            target_ord_value = 6.0
            Final Answer: {'One Tree Hill - Season 6'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 275 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.seasons']), ('Type', '==', 'tv.tv_series_season', ['type.object.type']), ('Ordinal', 'min', '2', ['tv.tv_series_season.season_number'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.type fb:tv.tv_series_season . ?o2 fb:tv.tv_series_season.season_number ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.type fb:tv.tv_series_season . ?o2 fb:tv.tv_series_season.season_number ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 7
            target_ord_value = 2.0
            Final Answer: {'One Tree Hill - Season 2'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 276 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.seasons']), ('Type', '==', 'tv.tv_series_season', ['type.object.type']), ('Ordinal', 'max', '2', ['tv.tv_series_season.number_of_episodes'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.type fb:tv.tv_series_season . ?o2 fb:tv.tv_series_season.number_of_episodes ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.type fb:tv.tv_series_season . ?o2 fb:tv.tv_series_season.number_of_episodes ?ord . ?o2 fb:type.object.name ?n2 . }|None|||max|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 7
            target_ord_value = 23.0
            Final Answer: {'One Tree Hill - Season 7', 'One Tree Hill - Season 2'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 277 / 278: {
          [('Main', '==', 'm.09vnxn', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.seasons']), ('Type', '==', 'tv.tv_series_season', ['type.object.type']), ('Ordinal', 'min', '2', ['tv.tv_series_season.number_of_episodes'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
          SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.type fb:tv.tv_series_season . ?o2 fb:tv.tv_series_season.number_of_episodes ?ord . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:52] Q_Schema Request: {
            WebQ_1593|SELECT DISTINCT ?o2 ?n2 ?ord WHERE { fb:m.09vnxn fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.type fb:tv.tv_series_season . ?o2 fb:tv.tv_series_season.number_of_episodes ?ord . ?o2 fb:type.object.name ?n2 . }|None|||min|2|None
            Forbidden mid: {'m.09vnxn'}
            Query return lines = 7
            target_ord_value = 21.0
            Final Answer: {'One Tree Hill - Season 4'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        62 / 278 ordinal schemas kept with ans_size > 0.
      } [3.079s]
      Ordinal level ended, we finally collected 174 schemas.
    } [3.156s]
    [2020-12-03 14:20:52] buffer saved.
    174 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1593_schema].
  } [24.596s]
  Entering Q 1594 / 5810 [b'what two countries speak italian?']: {
    Show 1 E + 10 T + 0 Tm + 0 Ord = 11 linkings: {
      #00 Entity: [4, 5) (italian) == m.03rjj (Italy) {'score': 271.256807, 'source': 0.0}
      #01 Type: [4, 5) (italian) == location.it_comune (italian comune) {'sim': 0.775951}
      #02 Type: [4, 5) (italian) == location.it_region (italian region) {'sim': 0.731069}
      #03 Type: [2, 3) (countries) == location.country (country) {'sim': 0.715494}
      #04 Type: [4, 5) (italian) == location.it_province (italian province) {'sim': 0.71175}
      #05 Type: [0, 3) (what two countries) == military.military_unit_place_of_origin (military unit place of origin) {'sim': 0.693775}
      #06 Type: [0, 2) (what two) == media_common.lost_work (lost work) {'sim': 0.690666}
      #07 Type: [0, 2) (what two) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.69047}
      #08 Type: [0, 2) (what two) == chemistry.phase_of_matter (phase of matter) {'sim': 0.683683}
      #09 Type: [0, 2) (what two) == measurement_unit.time_unit (unit of time) {'sim': 0.676797}
      #10 Type: [0, 3) (what two countries) == government.form_of_government (form of government) {'sim': 0.67664}
    } [0.000s]
    11 link data save to file.
    Coarse level searching (total entities = 1): {
      [Len-1||F1/1] (2020-12-03 14:21:02) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03rjj ?p1 ?o1 . }
        [2020-12-03 14:21:02] SPARQL hit!
        Filt_Query_Ret = 57 / 131 ( 0.000s)
      } [0.001s]
      [Len-2||F1/1] (2020-12-03 14:21:02) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:21:02] SPARQL hit!
        Filt_Query_Ret = 109 / 1982 ( 0.008s)
      } [0.009s]
      166 coarse schemas retrieved from scratch.
      Calculating F1 for 166 coarse schemas: {
        Current: 0 / 166
        Checking schema 0 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Constitutional republic', 'Parliamentary republic', 'Unitary republic'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 1 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italian Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 2 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 111
            Final Answer: {'Province of Potenza', 'Province of Oristano', 'Province of Barletta-Andria-Trani', 'Province of Mantua', 'Trentino', 'Province of Naples', 'Province of Verbano-Cusio-Ossola', "Province of L'Aquila", 'Province of Monza and Brianza', 'Province of Prato', 'Province of Isernia', 'Province of Rieti', 'Province of Caserta', 'Province of Pesaro and Urbino', 'Province of Udine', 'Province of Benevento', 'Province of Olbia-Tempio', 'Province of Verona', 'Province of Biella', 'Province of Padua', 'Province of Foggia', 'Province of Catanzaro', 'Province of Reggio Emilia', 'Province of Vicenza', 'Province of Perugia', 'Province of Savona', 'Province of Bologna', 'Province of Latina', 'Province of Cagliari', 'Province of Avellino', 'South Tyrol', 'Province of Palermo', 'Province of Belluno', 'Province of Ferrara', 'Province of Sassari', 'Province of Livorno', 'Province of Lecco', 'Province of Turin', 'Province of Reggio Calabria', 'Province of Rome', 'Province of Massa and Carrara', 'Province of Enna', 'Province of Lecce', 'Province of Alessandria', 'Province of Pescara', 'Province of Parma', 'Province of Siena', 'Province of Campobasso', 'Province of Catania', 'Province of Genoa', 'Province of Frosinone', 'Province of Imperia', 'Province of Terni', 'Province of Bergamo', 'Province of Ancona', 'Province of Treviso', 'Province of Brescia', 'Province of Ogliastra', 'Province of Trieste', 'Province of Agrigento', 'Aosta Valley', 'Province of Florence', 'Province of Taranto', 'Province of Syracuse', 'Province of Como', 'Province of Nuoro', 'Province of Novara', 'Province of Caltanissetta', 'Province of Lodi', 'Province of Varese', 'Province of Bari', 'Province of Fermo', 'Province of Piacenza', 'Province of Chieti', 'Province of Rovigo', 'Province of Venice', 'Province of Carbonia-Iglesias', 'Province of Asti', 'Province of Lucca', 'Province of Teramo', 'Province of Sondrio', 'Province of Cuneo', 'Province of Medio Campidano', 'Province of Gorizia', 'Province of Bolzano-Bozen', 'Province of Rimini', 'Province of Pordenone', 'Province of Ascoli Piceno', 'Province of Matera', 'Province of Crotone', 'Province of Ragusa', 'Province of La Spezia', 'Province of Messina', 'Province of Brindisi', 'Province of Pistoia', 'Province of Pisa', 'Province of Trapani', 'Province of Vercelli', 'Province of Pavia', 'Province of Cosenza', 'Province of Salerno', 'Province of Arezzo', 'Province of Forlì-Cesena', 'Province of Grosseto', 'Province of Milan', 'Province of Viterbo', 'Province of Ravenna', 'Province of Cremona', 'Province of Macerata', 'Province of Vibo Valentia', 'Province of Modena'}
            Answers = 111, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 111, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 3 / 166: {
          [('Main', '==', 'm.03rjj', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 4 / 166: {
          [('Main', '==', 'm.03rjj', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 5 / 166: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Earth'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 6 / 166: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Sovereign state'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 7 / 166: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 8 / 166: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Chamber of Deputies', 'Senate of the Republic', 'Italian Parliament'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 9 / 166: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 4
            Final Answer: {'Italian Ministry of Education, Universities and Research', 'Italian Ministry of Public Education', 'National Institute of Statistics', 'Ministry of Cultural Heritage and Activities'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 10 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1328
            Final Answer: {'Raffaella Di Marzio', 'Vincenzo Di Meglio', 'Lattanzio Querena', 'Tonina Torrielli', 'Filippo Grandi', 'Carlo Alberto Nucci', 'Corrado Zambelli', 'Pietro Fragiacomo', 'Giacomo Gubitosi', 'Paola Renata Carboni', 'Bruno Pagliai', 'Guido Monte', 'Francesco Pacelli', "Nino D'Angelo", 'Francesco Minerva', 'Michelle Beadle', 'Rose Bassino', 'Louis Rebisso', 'Matteo Barzini', 'Roberto Manzin', 'Simone Calvano', 'Giacomo Lercaro', 'Giancarlo Primo', 'Robert St. Angelo', 'Pietro Paolo Floriani', 'Marco Marchetti', 'Vittore Baroni', 'Italo Allodi', 'Guglielmo Franchetti', 'Alessandro Campagna', 'Giambattista Nolli', 'Giampietro Campana', 'Alessandro Cattelan', 'Paolo Cavara', 'Giorgio La Malfa', 'Francesco Piranesi', 'Angiolo Mazzoni', 'Otello Buscherini', 'Anastasia of Sirmium', 'Ennio Doris', 'Bernard Castro', 'Jennifer Missoni', 'Samanta Bardini', 'Marco Di Lauro', 'Riccardo Burchielli', 'Vincenzo Onorato', 'Gianni Paladini', 'Antony Carbone', 'Nerio Alessandri', 'Eugenia Falleni', 'Giuseppe Lillo', 'Alessio Guarino', 'Antonia Terzi', 'Guido Cappellini', 'Giacomo Devoto', 'Luca Fancelli', 'Elio', 'Giovanni Bazoli', 'Antipope John XXIII', 'Riccardo Cazzola', 'Ferdinando Tacconi', 'Alessandro Vitali', 'Paolo Frascatore', 'Giovanni Angelo Borroni', 'Emilio, marquis Visconti-Venosta', 'Alessandro Salvio', 'Valentina Uccheddu', 'Henry of Treviso', 'Filippo Corridoni', 'Mariella di Sarzana', 'Vincenza Sicari', 'Fabiola Gianotti', 'Panzacchi', 'Francesco Franceschi', 'Maurizio Melina', 'Galileo Chini', 'Mario Mauro', 'Stefano Manfredi', 'Albertino Mussato', 'Sal Sparace', 'Ugo A. Perego', 'Master of Estopiñán', 'Terenzio, Count Mamiani della Rovere', 'Franco Ziliani', 'Alberto Gandossi', 'Gledis Cinque', 'Giovanni Canestrini', 'Chris Giunchigliani', 'V. I. Beretti', 'Cesare Pallavicino', 'Pier Carpi', 'Alessandra Giliani', 'Georgia Anderson', 'Arthur DeLorenzo', 'Lorenzo Nina', 'Felice Carena', 'Claudio Stecchi', 'Anthony Minichiello', 'Giuseppe Mani', 'Alfred Breitman', 'Alessandro Minelli', 'Alessandro Vollero', 'Giorgio Schiavini', 'Giuliano da Maiano', 'Benjamin Artom', 'Michele di Rocco', 'Paolo Baldieri', 'Frank Vittor', 'Giuseppe Alberti', 'Giuseppe Mango', 'Rosario Livatino', 'Guglielmo Caccia', 'Sergio Cofferati', 'José de Ribas', 'Paolo Andrea Colombo', "Maria Fortunata d'Este", 'Marcello Possenti', 'Philip Costa', 'Aldebrandus', 'Maurizio Remmert', 'Agostino Ramelli', 'Paolo Pucci', 'Alice Teghil', 'Andrea Giacomo Podesta', 'Agostino Veneziano', 'Arrigo Petacco', 'Pietro Bertolini', 'Simona Galassi', 'Franco Assetto', 'Giulio Cantoni', 'Giovanni Marchese di Provera', 'Luca Percassi', 'Antonio Forcione', 'Riccardo Improta', 'Pietro Calendino', 'Giovanni Camillo Sagrestani', 'Luca Martin', 'Mirabello Cavalori', 'Maso Finiguerra', 'Vittorio Gallinari', 'Silvio Clementelli', 'Dario Mollo', 'Matteo Becucci', 'Emanuele Fiano', 'Consiglio Di Nino', 'Pietro Maffi', 'Sergio Cragnotti', 'Franco Saudelli', 'Vittorio Verga', 'Giambattista Altieri', 'Massimo Berdini', 'Giuseppe A. Salussolia', 'Ernesto Morelli', 'Daniele Audetto', 'James Alberione', 'Paolo Maffei', 'Domenico Cacciola', 'Massimo Barbolini', 'Carlo Vizzini', 'Dave Rodgers', 'Lorenzo Degeri', 'Giuseppe Borgatti', 'Cristiano Muzzachi', 'Fausto Ricci', 'Marcello Menegatto', 'Dolly Grey', 'Cesare Benedetti', 'Frank Tieri', 'Angelo Vanzin', 'Pier Antonio Panzeri', 'Maria Luisa Coppola', 'Enrico Leide', 'Luigi Guanella', 'Vincenzo Arciresi', 'Mike', 'Robert Trimbole', 'Fortunato Arena', 'Vincenzo Zitello', 'Alberto Cisolla', 'Giuseppe Canella', 'Lorenzo Remedi', 'Delfy de Ortega', 'Marta Rezoagli', 'Marc Wilder', 'Tadini', 'Gerhard Kerschbaumer', 'Mario Taurasi', 'Vicky Piria', 'Alberto Angelini', 'Samuele Bersani', 'Thomas Gangemi', 'Albano Pera', 'Domenico Freschi', 'Giuseppe Pericu', 'Alfredo Donnarumma', 'Pietro Caucchioli', 'Elio Ragni', 'Carlo Cassola', 'Paolo Coloni', 'Pasquale Sbarra', 'Peter Vannes', 'Jean-Jacques Nkouloukidi', 'Riccardo Tesi', 'Hyacintha Mariscotti', 'Stefano Tamburini', 'Guillermo Gianninazzi', 'Lorenzo Delleani', 'Nastassja Burnett', 'Amleto Vespa', 'Marta Mondelli', 'Angelo Patri', 'Aldo Brizzi', 'Alessandro Lupo', 'Raffaelle Monti', 'Michele Dancelli', 'Margherita Boniver', 'Marco Albarello', 'Riccardo Maspero', 'Tiziano Crudeli', 'César Fronzi', 'Pierluigi Conforti', 'Arrigo Pola', 'Sergio Zaniboni', 'Angelo Dubini', 'Judas Cyriacus', 'Andrea Moretti', 'Bruno Kessler', 'Erwin Bozzolini', 'Luigi Stipa', 'Lucio Russo', 'Bartolomeo della Gatta', 'Mirco Garrone', 'Arturo Vittori', 'Matej Cernic', 'Gianmarco Bellini', 'Pietro Loro Piana', 'Rene Caovilla', 'Carla Gavazzi', 'Mario Majeroni', 'Giovanni Roccotelli', 'Juan De Marchi', 'Marco Liberi', 'Andy Varipapa', 'Pietro Aldi', 'Emilio Betti', 'Mario Scialoja', 'Maria Giovanna Bhattacharya', 'Vincenzo Monaldi', 'Samuele Lorenzi', 'Maria Canins', 'Alberto Cova', 'Filippo Galli', 'Giulio Bonasone', 'Lucilla Perrotta', 'Alessandro Riccitelli', 'Roberto Caruso', 'Ivan Goi', 'Paul G. Comba', 'Giorgio Locatelli', 'James Lacaita', 'Moira Placchi', "Guittone d'Arezzo", 'Paolo Canevari', 'Fra Carnevale', "Biagio d'Antonio", 'Count Alessandro Polizzi', 'Shi Xing Mi', 'Francesco Menzio', 'Simone Corazza', 'Giacomo Galanda', 'Gioacchino Prati', 'Caesar Cardini', 'Gaetano Filangieri', 'Vittoria Aganoor', 'Cindy Valentine', 'Massimo Montanari', 'Francesca Fanti', 'Cristiana Muscardini', 'Girolamo Maria Gotti', 'Francesco Casetti', 'Luigi Antonini', 'Virginio Merola', 'Mario Longo', 'Madame Fiorenza', 'Bob DiLuca', 'Timothy Nocchi', 'Dino Bravo', 'Tullio De Mauro', 'Marco Visconti', 'Pier Ugo Calzolari', 'Emilio Floris', 'Lino Pertile', 'Maurizio Gherardini', 'Julia Mayr', 'Roberto Ardigò', 'Cesare Monti', 'Nicola De Angelis', 'Ugo La Malfa', 'Giovanni Speranza', 'DJ Gruff', 'Ulrich Mahlknecht', 'Piero De Benedictis', 'Sergio Caputo', 'Carlo Ratti', 'Giuseppe Lumia', 'John Fairfax', 'Luigi Broglio', "Bartolomeo d'Alviano", 'Vittorio Leonardo', 'Ray Tarantino', 'Mario Catania', 'Bartolomeo Bezzi', 'Sandro Gamba', 'Claudio Polsinelli', 'Benedetto Montagna', "Giuseppe Dell'Aquila", 'Liana Orfei', 'Gianfranco Dettori', 'Fabrizia Dal Farra', 'Carlo Biscaretti di Ruffia', 'Santo Zago', 'Michele Rizzo', 'Stefano Mammarella', 'Martin Tielli', 'Jacques Inaudi', 'Antonio Napolitano', 'Baldassarre Lanci', 'Master of Apollo and Daphne', 'Franco Cucinotta', 'Michele Morganella', 'Alessandro De Marchi', 'Ivo Milazzo', 'Perseo Miranda', 'Gian Luigi Bonelli', 'Melania Grego', 'Andrea Costa', 'Roberto Inglese', 'Dario Simoni', 'Roberto Di Donna', 'Francesco Domenico Guerrazzi', 'Angelo Carosi', 'Pietro Caruso', 'Domenico Oppedisano', 'Eduardo Missoni', 'Daniele Vicari', 'Giovanni Ricciardi', 'Giorgio Galimberti', 'Enrico Bernardi', 'Fulvio Scola', 'Andrea Belvedere', 'Carlo Pedretti', 'Marcello Capra', 'Leonard Falcone', 'Thomas Eboli', 'Giovanni Maria Benzoni', 'Paolo Beatrizzotti', 'Alberto Gianni', 'Vittorio Merloni', 'Guariento di Arpo', 'Alessandro Paci', 'Ronnie Quintarelli', 'Ida de Gattis', 'Carlo Facetti', 'Giacomo and Giovanni Battista Tocci', 'Giunta Pisano', 'Silvio Mondinelli', 'Ricky Gianco', 'Domenico Silvio Passionei', 'Gianluca Comin', 'Maddalena Musumeci', 'Enrico Bondi', 'Gretha Cavazzoni', 'Franco Paonessa', 'Martino Bassi', 'Alberto Martini', 'Luigi Miceli', 'Piero Scaruffi', 'Paola Mori', 'Aniello Califano', 'Alessandro Butti', 'Mirko Tremaglia', 'William Jopling', 'Antonella Serra Zanetti', 'Luigi Esposito', 'Lambert II of Spoleto, Holy Roman Emperor', 'Andrea Mantegna', 'Concetta Prestifilippo', 'Gianluigi Quinzi', 'Gennaro Portanova', "Salvatore D'Elia", 'Corrado Farina', 'Sergio Zardini', 'Emanuele Suagher', 'Vittoriano Guareschi', 'Remo Venturi', 'Enrico Alvino', 'Laura Golarsa', 'Annina Ardito', 'Giuseppe Dossetti', 'Diego Cogolato', 'Gaetano Matteo Monti', 'Cristina Castagna', 'Joe DiBella', 'Bella Carroll', 'Giacomo Debenedetti', 'Jerry Riggio', 'Anthony Julian', 'Giuseppe Bastianelli', 'Callisto Piazza', 'Francesco Conconi', 'Adriano Baffi', 'Bernice Pontrelli', 'Carlo Ferrari', 'Mario Peressin', 'Antonio Baldi', 'Paolo Antonio Barbieri', 'Placido Costanzi', 'Gianni Riotta', 'Caspar Goodrich', 'Riccardo Nencini', 'Amedeo Maiuri', 'Girolamo da Cremona', 'Wilma De Angelis', 'Manuela Levorato', 'Giuliano Briganti', 'Pasquale Camerlengo', 'Alessandro Cruto', 'Costantino Nigra', 'Stefano Vagnini', 'Giuseppe Meda', 'Giuseppe Canale', 'Sergio Zanatta', 'Matteo Barbini', 'Princess Bee', 'Carlo Somigliana', 'Pierluigi Vigna', 'Adolfo Orsi', 'Hank Biasatti', 'Gaius Asinius Pollio', 'Giovanni Antonio Fasolo', 'Pompeo Colonna', 'Emanuele Berrettoni', 'Gianni Rufini', 'Laura Inserra', 'Domenico Cavagnari', 'Nuto Revelli', 'Sante Geminiani', 'Michelangelo Fardella', 'Adriana Serra Zanetti', 'Luigi Tarisio', 'Oreste Sindici', 'Girolamo Tiraboschi', 'Anthony Terlazzo', 'Bruno Spaggiari', 'Anthony Neyrot', 'Bramante Buffoni', 'Luca Rangoni', 'Romano Felmang', 'Ferdinando Minoia', 'Mattia Gri', 'Giuseppe Morabito', 'Giannetto De Rossi', 'Mary Solari', 'Stefano Arduino', 'Valerio Fioravanti', 'Pasquale Schiattarella', 'Giorgio Belladonna', 'Guido Morselli', 'Manuela Dal Lago', 'Giovanni Andrea Lazzarini', 'Giovanni Bernardo De Rossi', 'Rosalba Grottesi', 'Elena Runggaldier', 'John J. Maresca', 'Arabella Lennox-Boyd', 'Ruggeru Sèttimu', 'Carlo Piana', 'Antonino Profeta', "Francesco Melzi d'Eril", 'Marco Papa', 'Michele Piccirillo', 'Fausto Pocar', 'Andrea Libardi', 'Camillo Pacetti', 'Giuseppe Porzio', 'Giulio Petroni', 'Paolo Caronni', 'Giovanni Martino', 'Alberto Alberani', 'John Potestio', 'Cesare Tallone', 'Andrea Guardini', 'Bobo Craxi', 'Andrea di Alessandro', 'Vittorio Garatti', 'Rocco Martino', 'Benè Gola', 'Ibycus', 'Marco Ponti', 'Alessia Pertoldi', 'Maurizio Sacconi', 'Benedetto da Maiano', 'Giacomo Pacchiarotti', 'Stefano Lorenzini', 'Guido Barbujani', 'Norberto Oberburger', 'Sergio Messina', 'Giovanni Battista Caproni', 'Michael Fiaschetti', 'Michelangelo Falvetti', 'Giovanni Battista Amendola', 'Giuseppina Leone', 'Nemo Agodi', 'Mario Corso', 'Azzone Visconti', 'Sciltian Gastaldi', 'Filippo Palizzi', 'Regolo Ricci', 'Paolo Borghi', 'Daniele Rosania', 'Gaetano Puglia', 'Manuela Falorni', 'Laura Chiesa', 'Alighiero Noschese', 'Giammario Piscitella', 'Antonio Cardarelli', 'Stefano Pasquini', 'Massimo Maugeri', 'Mario Sampirisi', 'Alberto Fortis', 'Luigi Longo', 'Romeo Antoniazzi', 'Lorenzo Perrone', 'Giovanni Tommasi Ferroni', 'Alberto Braglia', 'Gianluigi Scalvini', 'Altichiero', 'Walter Magnifico', 'Sébastien Meoli', 'Mario Einaudi', 'Franco Margola', 'Gino Armano', 'Bruno Contrada', 'Arturo Mario', 'Inés Murray', 'Antonio Maria Costa', 'Alberto Zoppe', 'Fabrizio Gatti', 'Renato Fucini', 'Vittorio Tamagnini', 'Fabio Cassanelli', 'Vincenzo Torrente', 'Pierluigi Orlandini', 'Massimo Cellino', 'Celestino Migliore', 'Pio Laghi', 'Daniele Pagani', 'Fabio Pizzolato', 'Francesco Bartolomeo Rastrelli', 'Michele Abbruzzo', 'Nino Randazzo', 'Carlo Mazzoni', 'Cesare Orsenigo', 'Ennio Maffiolini', 'Virgil Cantini', 'Moony', 'Michael S. Greco', 'Stefano Tofanelli', 'Carlo Mornati', 'Laura Kuenssberg', 'Roberto Giacobbo', 'Bartolomeo D’Avanzo', 'Franco Bonera', 'Bruno Osimo', 'Pino Luongo', 'Giuseppe Cindolo', 'Lucia Morico', 'Thayaht', 'Luciano Biondini', 'Andrea Meneghin', 'Paul Palmentola', 'Massimo Carmassi', 'Valentina Giovagnini', 'Piero Rebaudengo', 'Gianfranco Frattini', 'Francesco Carbone Tomacelli', 'Raffaellino del Colle', 'Giuseppe Di Vittorio', 'Giovanni Battista Gisleni', 'Auguste Galli', 'Enrico Gamba', 'Ortolano Ferrarese', 'Gianluca Susta', 'Ramba', 'Carlo Giuseppe Testore', 'Pablo Alvarado', 'Candido Jacuzzi', 'Angelo Litrico', 'Aldo Biscardi', 'Rodolfo Ceccotti', 'Pierfrancesco Cittadini', 'Andrea Sassetti', 'Alessandro Milesi', 'Aldon Lewis Lenard', 'Alberto Fermi', 'Giovanni Assenza', 'Sarafina Saracino', 'Antonello Rubino', 'Mario Spezi', 'Agostino Brunias', 'Silvio Passerini', 'Ugo Gobbato', 'Giuseppe Errante', 'Mino Carta', 'Davide Carcuro', 'Nello Carotenuto', 'Lucio Malan', 'Giustino Fortunato', 'Luigi Baccio del Bianco', 'Ronnie Hepworth', 'Duilio Agostini', 'Gianfranco Clerici', 'Amedeo De Filippi', 'Federico Baldissera Bartolomeo Cornaro', 'Riccardo Brengola', 'Michele Rinaldi', 'Francesco Giavazzi', 'Domenico Induno', 'Salvatore Sandomenico', 'Carlo Bonomi', 'Giacomo Chinellato', 'Gabriella Martinelli', 'Giovanni di ser Giovanni Guidi', 'Sam Corso', 'Gino Pollini', 'Giacomo Grosso', 'Pietro Fancelli', 'Danijay', 'Linda Landi', 'Luigi Arcangeli', 'Tony Zappia', 'Eugenio Barsanti', 'Francesco I da Carrara', 'Rosie Grasso', 'Jean-Louis Jemma', 'Alfredo Capelli', 'Santo Pezzutti', 'Francesco di Paola Cassetta', 'Antonio Scarpa', 'Giovanni Prati', 'Bernardino Realino', 'Carlo Porta', 'Felice Giordano', 'Cristina Trivulzio Belgiojoso', 'Andrea Ronchi', 'Marco Calliari', 'Francesco Sassetti', 'Giuseppe Incorpora', 'Alessandro Sala', 'S. Samuel DiFalco', 'Giuseppe Pira', 'Stéphane Sarni', 'Pierluigi Billone', 'Nick Bigtower', 'Remo Bertoni', 'Marco Tonazzi', 'Pierfrancesco Cravel', 'Monmouth Coffee Company', 'Davide Zappacosta', 'Gino Colaussi', 'Cecilia Vianini', 'Antoniazzo Romano', 'Santo Varni', "Marco d'Agrate", 'Mirko Ranieri', 'Alexander Robotnick', 'Angel Di Stefani', 'Franc Trkman', 'Giuseppe Pinot-Gallizio', 'Paolo Giaretta', 'Dario Maestripieri', 'Giovanni Pittella', 'Roberto Dipiazza', 'Davide Sorrenti', 'Matteo Liviero', 'Mario Racco', 'Angelo Celli', 'Marco Carcangiu', 'Vittorino Veronese', 'Jo Squillo', 'Ubaldo Gandolfi', 'Alexander Egger', 'Amico Bignami', 'Alessandro Balzan', 'Fabio Aru', 'Roberto Esposito', 'Sandro Pallavicini', 'Crispin and Crispinian', 'Matteo Anesi', 'Giancarlo Scottà', 'Joseph Farina', 'Giovanni Ruffini', 'Lelio Orsi', 'Paolo Rotondo', 'Gaetano Merola', 'Giuseppe Vegas', 'Stefania Blancuzzi', 'Ezio Galon', 'Julian Fantino', 'Diego Manzoni', 'Grazia Schiavo', 'Aristide Rinaldini', 'Giuseppe Capotondi', 'Mario Somma', 'Ylenia Scapin', 'Massimo Teodori', 'Elena Paparazzo', 'Charles Marega', 'Giuseppe Ripamonti', 'Pietro Ghedin', 'Vincenzo Pesce', 'Andrea Colombo', 'Vincenzo Guerini', 'Flavio Sala', 'Andrea di Robilant', 'Alberto Colombo', 'Mario Filippeschi', 'Luca Ferricchio', 'Autonomus', 'Serafino De Tivoli', 'Vittorio Capparelli', 'Vincenzo Gambi', 'Orazio Samacchini', 'Giovanni Maccelli', 'Judah Monis', 'Bartolus de Saxoferrato', 'Sabrina A. Parisi', 'Luis Mottura', 'Carlo Marchionni', 'Alessandro Bardelli', 'Denny Gigliotti', 'Francesco de Sanctis', 'Paola Severino', 'Marco Sabiu', 'Dhany', 'Giuseppe Francica-Nava de Bontifè', 'Filippo Carcano', 'Ubertino of Casale', 'Guglielmo Letteri', 'Giovanni Benedetti', 'Giorgio Belloni', 'Andrea Bartolini', 'Giovanni Strangio', 'Achille Bocchi', 'Tony Rizzo', 'Lokanatha', 'Pellegrino Tibaldi', 'Giuseppe Coluccio', 'Giovanni Sostero', 'Gianni Averaimo', 'Stefano Rosselli del Turco', 'Antonio Pollina', "Raimondo Tommaso D'Aronco", 'Evelyn Vicchiarello', 'Marco Mordente', 'Filippo de Filippi', 'Gaia Bassani Antivari', 'Gaetano Antoniazzi', 'Riccardo Morandi', 'Roberta Pedranzini', 'Riccardo Pazzaglia', 'Giuseppe Jappelli', 'Eraldo Bernocchi', 'Luigi Sacco', 'Franco Battaini', 'Francesco Negri', 'Daniele Berretta', 'Riccardo Piacentini', 'Josephine Cammarata', 'Giuseppe Cilento', 'Carola Lotti', 'Italo Gismondi', 'Erica Alfridi', 'Rocco Girlanda', 'Marcello Guido', 'Eugenio Calabi', 'Mario Lamberto', 'Paolo Gorini', 'Alessio Chiodi', 'Arthur Varney', 'Enrico Patrizio', 'Roberto De Angelis', 'Enzo Cavazzoni', 'Italo Zucchelli', 'Pietro Guarneri', 'Lorenzo Onofrio Colonna', 'Pietro Ostini', 'Delfino Borroni', 'Sesto Rocchi', 'Riccardo Garrone', 'Victor Romito', 'Stefano Jacini', 'Federica Panicucci', 'Vincenzo Zinna', 'Franco Venturi', 'Pat Occhiuto', 'Marco Reguzzoni', 'Rino Rappuoli', 'Regina Strinasacchi', 'Giovanni Francesco Toscani', 'Luciano Gaucci', 'Roberto Gottardi', 'Stefano Razzetti', 'Gino Greco', 'Max Sabbatani', 'Massimo Carraro', 'Giulio Pace', 'Luigi Pasetti', 'Mario Andretti', 'Stefano Porcari', 'Corrado Carnevale', 'Martino Gamper', 'Luigina Giavotti', 'Nicolò Pollari', 'Andrea Longo', 'Mario Castoldi', 'Mirko Giansanti', 'Felice Bonetto', 'Angelo Bergamonti', 'Federico Callori di Vignale', 'Luigi Fabbri', 'Giselda Zani', 'Simona Rinieri', 'Manuel Nardi', 'Pietro Gnocchi', 'Clelia Barbieri', 'Giovanni Marinelli', 'Vincenzo Franco', 'Attilio Pratella', 'Gianfranco Pasquino', 'Alessandro Figà Talamanca', 'Arrigo Breschi', 'Giorgio Salmoiraghi', 'Davide Zannoni', 'Lorenzo Salvi', 'Antonio Ricardo', 'Cesare Laurenti', 'Alessandro Marangoni', 'Giovanni Berchet', 'Diotisalvi Neroni', 'Francesco Bruni', 'Paolo Montarsolo', 'Galeotto I Malatesta', 'Enrico Caterino Davila', 'Carlo Antonio Testore', 'Sergio Tacchini', 'Romolo Ferri', 'Carlo Fatuzzo', 'Mattia Sprocati', 'Hugh, Margrave of Tuscany', 'Cesare Braico', 'Mario Bezzi', 'Giancarlo Gentilini', 'Riccardo Truccolo', 'Clara Boselli', 'Carlo Giovanardi', 'Marina Pierro', 'Stefano Bardini', 'Simone Berti', 'Luigi Pigorini', 'Princess Marcella Borghese', 'Tito Boeri', 'Gianvito Martino', 'Claudio Martelli', 'Matteo De Cosmo', 'Giacobbe Cervetto', 'Andrea Raimondi', 'Francesco Novati', 'Donatella Damiani', 'Giorgio Melchiori', 'Paolo Valeri', 'Guido Guidi', 'Pietro Antonio Magatti', 'Salvatore Cardillo', 'Lorenzo Apicella', 'Laura Longo', 'Giovanni Lindo Ferretti', 'Francesco Domenico Chiarello', 'Fabrizio Pirovano', 'Andrea Ballerini', 'Erik Fabbri', 'Giuseppe Bottani', 'Mario Chiarini', 'Maria Roda', 'Nicola Campogrande', 'Antonio DeVity', 'Anita Cerquetti', 'Ernesto Bazzaro', 'Leandro Bisiach', 'Alberto Mazzucato', 'Antonella Capriotti', 'Andrea Previtali', 'Luigi Premazzi', 'Andrea Leone', 'Daniele Bernazzani', 'Carlo Vittorio Varetti', 'Giada Wiltshire', 'Giovanni Boccati', 'Antonio Armellini', 'Giovanbattista Venditti', 'Giovanni Rovetta', 'Guiniforte Solari', 'Alessandro Noselli', 'Gabriele Ferretti', 'Marco Traniello', 'Francesco Morini', 'Al Palladini', 'Piero Liatti', 'Pia Locatelli', 'Vincenzo Esposito', 'Antonio Dal Masetto', 'Arturo Labriola', 'Giuseppe Persiani', 'Cesare Facchinetti', 'Davide Bianchetti', 'Bruno Bertacchini', 'Mauro Liburdi', 'Argeo Quadri', 'Alessandro Araldi', 'Filippo Sanjust', 'Antonino Calderone', 'Marco Martinelli', 'Luca Barbieri', 'Gianni Coscia', 'Gustavo Maria Bruni', 'Pier Gonella', 'Aldo Santorum', 'Isabella Morra', 'Tarquinio Provini', 'Ladislao Guinigi', 'Guido Donegani', 'Sara Copia Sullam', 'Andrea Lalli', 'Mauro Del Giudice', 'Assunta Magaldi', 'Pietro Lunardi', 'Sergio Ciani', 'Cristina Wistari Formaggia', 'Ed Agresti', 'Stefano Arienti', 'Mario Stoppino', 'Antonio Demo', 'Ugo Spirito', 'Valerio Verre', 'Claudio', 'Ezio Gianola', 'Alexandra Delli Colli', 'Giovanni Amighetti', 'Chicco Testa', 'Alessandro Marchesini', 'Elena Sangro', 'Giovanni Di Stefano', 'Carlo Becchi', 'George Hadfield', 'Claudio Camaso', 'Eugene Gaudio', 'VenetianPrincess', 'Tatiana Bonetti', 'Frankie Pace', 'Massimo Ceccherini', 'Paolo Scaroni', 'Carlo Catani', 'Paola Morra', 'Felice Benasedo', 'Nick Catania', 'Gilberto Parlotti', 'Matteo Cocco', 'Roberto Cravero', 'Carol Davila', 'Antonio Rozzi', 'Ferdinando Beccalli-Falco', 'Carlo Briani', 'Girolamo Mocetto', 'Carmen Casteiner', 'Marco Mazza', 'Venere Bianca', 'Antonio Beato', 'Paolo Domenico Finoglia', 'Piero Corti', 'Roberto Meloni', 'Luca Campigotto', 'Eugenio Bava', 'Saint Mercurius', 'Giovanni Marradi', 'Felix of Cantalice', 'Pietro Boscaini', 'Rossella Giordano', 'Nicola Murru', 'Costanzo Preve', 'Pasqualino Abeti', 'Vincent Barbi', 'Aldo Carpi', 'Daniela Gattelli', 'Maria Augimeri', 'Alessandro dal Borro', 'Vincenzo Di Mauro', 'Mario Torelli', 'Pasquale Simonelli', 'Piero Marini', 'Roberto Car', 'Moreno Moser', 'Francesco Bentivegna', 'Nicola Salerno', 'Carlo Agostini', 'Beatrice I, Abbess of Quedlinburg', 'Salvatore Liberace', 'Giuseppina Bozzacchi', 'Giulio Alfieri', 'Francesca Benedetti', 'Alessandro Poerio', 'Luca Colombo', 'Consolata Betrone', 'Viridis Visconti', 'Giuseppe Gabellone', 'Angelo Garzio', 'Nino Piccoli', 'Luca Vitali', 'Cino Del Duca', 'Renato Curcio', 'Francesco da Ponte', 'Giovanni Antonio Pandolfi', 'Anton Muscatelli', 'Dionigi Bussola', 'Gian Matteo Giberti', 'Clemente Ruta', 'Gianni Togni', 'Salvatore Luigi Puglia', 'Antonio Rocco', 'Lotario Rangoni', 'Enrico Barone', 'Adriano Bernardini', 'Grazia Narciso', 'Pietro della Vecchia', 'Angelo Dolci', 'Filippo Maria Scardina', 'Achille Grandi', 'Manuel Personè', 'Ned Roberto', 'Rosetta Calavetta', 'Tancrède Dumas', 'Elia Dalla Costa', 'Laurette Séjourné', 'Giuseppe Pettine', 'Francesco Monti', 'Pietro Bellotti', 'Italo Martinenghi', 'Paolo Cozzi', 'Daniel Kozelinski Netto', 'Giulia Marletta', 'Giacomo Doria', 'Benedetto Della Vedova', 'Antonio Mancinelli', 'Flaviano Labò', 'Roberto de Mattei', 'Urbano Cairo', 'Alfredo Biondi', 'Nicol Gastaldi', 'Ezio Gamba', 'Tommaso Caputo', 'Cristina Vergano', 'Alfredo Colombo', 'Teresa de Lauretis', 'Pier Francesco Mazzucchelli', 'Giorgio Diritti', 'Andrea Claudio Galluzzo', 'Carlo Barone', 'Sylvano Balboni', 'Mario Pretto', 'Luigi Lanzi', 'Davide Milesi', 'Franco Imoda', 'Daniele Giordano', 'Giuseppe Perrino', 'Giovanni Gioseffo dal Sole', 'Fausto Puglia', 'Carlo Aymonino', 'Fabio Caressa', 'Riccardo Moscatelli', 'Saint Paternian', 'Silver Pozzoli', 'Alberto Sangiovanni-Vincentelli', 'Giacinto Menotti Serrati', 'Alberto Michelin', 'Paolo Pino', 'Giovanni Rana', 'Girolamo Mazzola Bedoli', 'Apollo Granforte', 'Francesco Rossetti', 'Virgilio Mortari', 'Fabrizio Lai', 'Francesco Francavilla', 'James Vincent Monaco', 'Gasparo Gozzi', 'Antonio Poma', 'Mario Rigamonti', 'Tommaso Reato', 'Roberto Pinotti', 'Amarro Fiamberti', 'Pasquale Pozzessere', 'Giovanni Bonati', 'Pietro Mengoli', 'Tony Garofano', 'Raffaella Leone', 'Virginio Ferrari', 'Maurizio Vitali', 'Leandro Jayarajah', 'Sergio Rossi', 'Mario Migliardi', 'Franco Bassanini', 'Bindo Maserati', 'Luca Cumani', 'Tony', 'Marcello Ruta', 'Giovanni Simeoni', 'Simona Fusco', 'Tanzio da Varallo', 'Andrea Santoro', 'Margherita Caffi', 'Matteo Cozzari', 'Luigi Benfatto', 'Goffredo Cappa', 'Gaetano Monachello', 'Giuseppe Orsi', 'Bruno Banducci', 'Giuseppe Cipriani', 'Piercarlo Ghinzani', 'Sandro Giglio', 'Nicolò Grassi', 'Massimo Consoli', 'Giampaolo Pozzo', 'Luca Alinari', 'Edoardo Blondett', 'Eupremio Carruezzo', 'Attilio Piccioni', 'Matteo Zennaro', 'Gualtiero De Angelis', 'Salvatore Russo', 'Francesco Vitelli', 'Silvia Armeni', 'Enrico Piaggio', 'Stefania Craxi', 'John Perri', 'Nicholas of Tolentino', 'Franco Rossi', 'Corrado Balducci', 'Santo Bartolomeo Quadri', 'Pantaleo Corvino', 'Peter Greco', 'Elvira Curci', 'Daniele Caimmi', 'Louise Grieco', 'Michele Quaranta', 'Don Orlando', 'Carlo Zinelli', 'Constantino López', 'Leopoldo Cicognara', 'Raffaele Viviani', 'Carmine Benincasa', 'Raffaele Fiorini', 'Mario Canali', 'Guido delle Colonne', 'Roberto Leydi', 'Ida Mari', 'Silvana Arbia', 'Carlo Ademollo', 'Ignazio Porro', 'Marco Micone', 'Romolo Murri', 'Goran Nava', 'Valentino Castellani', 'Paula Alvarez Vaccaro', 'Augusto Gregorini', 'Leonardo Fioravanti', 'Ivo Cristante', 'Giovanni Donato da Montorfano', 'Sergio Vento', 'Luigi Amaducci', 'Giorgio Ferrara', 'Giovanni Migliara', 'Italo Galbiati', 'Andrea Volpe', 'Guido Leoni', 'Vincenzo Visco', 'Marco Andreini', 'Benedetto Caliari', 'Anna Remondina', 'Giovanni Quagliata', 'Vito Colonna', 'Giampiero de Carli', 'Giulio Genoino', 'Astrid Besser', 'Esther Minciotti', 'Francesco Morandini', 'Andrea Corsali', 'Bartolomeo Biscaino', 'Carlo Calani', 'Ania Pieroni', 'Líbero Badaró', 'Luca Belcastro', 'Medardo Fantuzzi', 'Paolo Longo', 'Vittoria Accoramboni', 'Leonardo Nigro', 'Loris Stecca', 'Luigi Mazzella', 'Giuseppina Grassini', 'Henry Salvatori', 'Claudio Sala', 'Denis', 'Onorio Ruotolo', 'Nino Bacci', 'Lucio Esposito', 'Giannino Marzotto', 'Rocky Kansas', 'Roberto Alessandria', 'Giandomenico Basso', 'Guido Trento', 'Chiara Clemente', 'Jacobello del Fiore', 'Diego Stocco', 'Roberto Tamburini', 'Giovanni Pellegrino', 'Manuela Manetta', 'Giuseppe Diamantini', 'Giulia Boverio', 'Stefy Bau', 'Pietrangelo Pettenò', 'Antiveduto Grammatica', "Francesco D'Andrea", 'Camilla de Rossi', 'Andrea Tabanelli', 'Francesco Uliano', "Gigi D'Amico", 'Arrigo Colombo', 'Enzo Mirigliani', 'Carlo Chiostri', 'Saverio Muratori', 'Teresa Belloc-Giorgi', 'Massimiliano Ferretti', 'Teresina Saracino', 'Chiara Nappi', 'Angelo Copeta', 'Alessandro Geraldini', 'Pasquale Berardi', 'Girolamo Zanchi', 'Sudi Van Dien', 'Claudio Licciardello', 'Giacinto Andrea Cicognini', 'Orso Mario Corbino', 'Trevor Trevisan', "Tommaso D'Apice", 'Daniele Luppi', 'Antonio Franco', 'Alberto Sevieri', 'Franco Mimmi', 'Luca Moscatiello', 'Joseph Toronto', 'Baconin Borzacchini', 'Tommy Vee', 'Valerio Aspromonte', 'Salvatore Contorno', 'Anne Gonzaga', 'Carlo Dusi', 'Giorgio Pini', 'Giuseppe Ceccato', 'Anthony J. DePace', 'Dido Fontana', 'Francesco Fonte', 'Salvatore Burruni', 'Linda Sini', 'Lorenzo Cesa', 'Robin Monotti Graziadei', 'Agostino Carollo', 'Tommaso Costa', 'John Cabot', 'Nino Borsari', 'Davide Prete', 'Giovanni Minzoni', 'Andrea Doninelli', 'Carlo Cossutta', 'Emiliano Brembilla', 'Michele Ferrero', 'Joseph Pinetti', 'Ercole Baldini', 'Arthur Martinelli', 'Guido Grandi', 'Giorgio Anselmi', 'Domenico Maria Viani', 'Ruggero Cappuccio', 'Carlo Cercignani', 'Carlo Maria Maggi', 'Yeshi Silvano Namkhai', 'Luigi Aloysius Colla', 'Giorgio Francia', 'Carlo Vidano', 'Claudio Nunes', 'Nicola Fiorenza', 'Leonardo Graziano', 'Maurizio Rossi', 'Giovanni Sante Gaspero Santini', 'Mario Oriani-Ambrosini', 'Maurizio Nassi', 'Pino Cerami', 'Bruno Magli', 'Paolo Petrocelli', 'Felipe Pascucci', 'Sigismondo Benini', 'Altobello Melone', 'Vespasiano I Gonzaga', 'Francesca Ciardi', 'Friedrich Sustris', 'Fabio Meduri', 'Stephan Rosti', 'Sebastiano Cristillo', 'Angelo Piccaluga', 'Edmondo Rossoni', 'Guido Deiro', 'Gianni Leoni'}
            Answers = 1328, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.038s]
          Answers = 1328, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 11 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.partially_contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'Alps–Mediterranean Euroregion', 'Adriatic Euroregion', 'Alps', 'Europaregion Tirol-Südtirol-Trentino', 'Italian Peninsula'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 12 / 166: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.belongs_to_combatant_group'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Triple Entente'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 13 / 166: {
          [('Main', '==', 'm.03rjj', ['book.book_subject.musical_compositions_about_this_topic'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Aus Italien'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 14 / 166: {
          [('Main', '==', 'm.03rjj', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 10
            Final Answer: {'Mammon', 'Daemon Spade', 'Mukuro Rokudo', 'Xanxus', 'Lambo', 'Checco Orsi', 'Hayato Gokudera', 'Basil', 'Giotto', 'Ludovico Orsi'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 15 / 166: {
          [('Main', '==', 'm.03rjj', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 23
            Final Answer: {"Italy women's national beach handball team", "Italy women's national football team", "Italy men's national volleyball team", 'A1 Team Italy', 'Italy national rugby league team', "Italy women's national water polo team", "Italy men's national ice hockey team", "Italy men's national water polo team", 'Italy national handball team', 'Italy national futsal team', 'Italy Fed Cup team', 'Italy national cricket team', 'Italy national speedway team', 'Italy Davis Cup team', 'Italy national basketball team', 'Team Liquigas-Cannondale', 'Italy national baseball team', 'Italy national rugby union team', "Italy women's national rugby union team", "Italy women's national ice hockey team", "Italy men's national pitch and putt team", "Italy women's national volleyball team", 'Italy national football team'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 16 / 166: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:olympics.olympic_athlete_affiliation.athlete ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:olympics.olympic_athlete_affiliation.athlete ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Elio Ragni'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 17 / 166: {
          [('Main', '==', 'm.03rjj', ['base.locations.countries.continent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Europe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 18 / 166: {
          [('Main', '==', 'm.03rjj', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 15
            Final Answer: {'Nuovo Birrificio Italiano Amber Shock', 'Menabrea Birra S.P.A.', 'Le Baladin Super Baladin', 'Forst Premium', 'Le Baladin Isaac', 'Nuovo Birrificio Italiano Bibock', 'Peroni Nastro Azzurro', 'La Tabachera Amarcord', "Le Baladin Nora 'Birra Biologica'", 'Ghisa', 'Le Baladin Wayan', 'Birra Moretti (Heineken) Moretti La Rossa', 'Castello Di Udine Birra Moretti', 'Peroni Gran Riserva', 'Heineken Italia Ichnusa'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 19 / 166: {
          [('Main', '==', 'm.03rjj', ['base.thoroughbredracing.thoroughbred_racehorse_origin.horses_from_this_location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.thoroughbredracing.thoroughbred_racehorse_origin.horses_from_this_location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.thoroughbredracing.thoroughbred_racehorse_origin.horses_from_this_location ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Ribot', 'Nearco', 'Tenerani'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 20 / 166: {
          [('Main', '==', 'm.03rjj', ['biology.breed_origin.breeds_originating_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 19
            Final Answer: {'Neapolitan Mastiff', 'Ancona', 'Sicilian Buttercup', 'Bracco Italiano', 'Volpino Italiano', 'Lagotto Romagnolo', 'Italian Greyhound', 'St. Bernard', 'European Shorthair', 'Segugio Italiano', 'Cane Corso', 'Maremma Sheepdog', 'Bergamasco Shepherd', 'Dogo Sardesco', "Cirneco dell'Etna", 'Lottatore Brindisino', 'Leghorn', 'Spinone Italiano', 'Bolognese'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 21 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Euro'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 22 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'Esperanto Language', 'Albanian language', 'Austrian German', 'Occitan language', 'Italian Language'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 23 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'it'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 24 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.first_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 20
            Final Answer: {'Sicily', 'Trentino-Alto Adige/South Tyrol', 'Tuscany', 'Basilicata', 'Molise', 'Campania', 'Abruzzo', 'Sardinia', 'Umbria', 'Veneto', 'Lazio', 'Apulia', 'Piedmont', 'Liguria', 'Friuli-Venezia Giulia', 'Emilia-Romagna', 'Calabria', 'Lombardy', 'Aosta Valley', 'Marche'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 25 / 166: {
          [('Main', '==', 'm.03rjj', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'63 Ausonia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 26 / 166: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italian region'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 27 / 166: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Prime Minister of Italy', 'Italian Minister of Justice'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 28 / 166: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Government of Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 29 / 166: {
          [('Main', '==', 'm.03rjj', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'1861'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 30 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:02] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 9928
            Final Answer: {'Cavallino', 'San Vittore Olona', 'Novi di Modena', 'Malito', 'Valle Salimbene', 'Sedini', 'Baressa', 'San Martino in Strada', 'Montaldo Torinese', 'Civitella Roveto', 'Annone di Brianza', 'San Vito sullo Ionio', 'Baone', 'San Michele Salentino', 'Montemignaio', 'Ferentino', 'Azzanello', "Bec d'Epicoune", 'Penser Joch', 'Monastero di Lanzo', 'Cagnano Varano', 'Galzignano Terme', 'Casoli', 'Casalino', 'Pisano, Piedmont', 'Nasino', 'Annifo', 'Tortorella Airfield', 'Fordongianus', 'Furnari', 'Monte Testaccio', 'Montecalvo in Foglia', 'Cellio', 'Gremiasco', 'Province of Savona', 'Varzo', 'Santa Maria dei Servi', 'Castelcucco', 'Barbarano Romano', 'Fighille', 'Priverno', 'Atina, Lazio', 'Montagne, Trentino', 'Olivetta San Michele', 'Corteolona', 'Gerbini Airfield', 'Recale', 'Faedo Valtellino', 'San Lorenzo Maggiore', 'Piz Palü', 'Duno', 'Tornabuoni Chapel', 'Boccioleto', 'Santa Giuletta', 'Nizza Monferrato', 'Sparanise', 'Ruda', 'Valtellina', 'Trequanda', 'Piazza Colonna', 'Stadio San Vito', 'Vetto', 'Castelnuovo della Daunia', 'Caraglio', 'Torrenova', 'Palermo Centrale railway station', 'Laurentina', 'Vicchio', 'Garlasco', 'Nardodipace', 'Bianco', 'Pieve Tesino', 'Bajardo', 'Castelli, Abruzzo', "Valle dell'Angelo", 'Torre San Patrizio', 'Mazzano Romano', 'Sambuca di Sicilia', 'Fagnano Castello', 'Copiano', 'Valvisciolo Abbey', 'Veruno', 'Capoterra', 'Albano di Lucania', 'Castelmezzano', 'Chiesa in Valmalenco', 'Valenzano, Italy', 'Pietracupa', 'Introdacqua', 'Regio Friuli Venezia', 'Siderno', 'Burgos, Sardinia', 'Predappio', 'Chieri', 'Castano Primo', 'Lozzo Atestino', 'Rubiana', 'Vigevano', 'Stazzano', 'San Giovanni in Croce', 'Santa Cristina Gela', 'Villaga', 'Chiuppano', 'Mestrino', 'Marcheno', 'Cerisano', "San Paolo d'Argon", 'Cannole', 'Frazzanò', 'Inverso Pinasca', 'Poviglio', 'Saletto', 'Val di Nizza', 'Osasco', 'Onanì', 'Abbazia di San Salvatore', 'Florinas', 'Valtopina', 'Collazzone', 'Castelnuovo di Garfagnana', 'Albaredo per San Marco', 'Macomer', 'Pau, Sardinia', 'Castelseprio', 'Pramaggiore', 'Santa Elisabetta', 'Alba Adriatica', 'Welschnofen', "Canonica d'Adda", 'Saonara', 'Mezzana, Trentino', 'Volpago del Montello', 'San Giorgio di Mantova', 'Sedilo', 'Capranica Prenestina', 'Villachiara', 'Sasso Marconi', 'Castelmarte', 'Tolentino', 'Casnate con Bernate', 'Paciano', 'Spilinga', 'Bersone', 'Ligonchio', 'Roccavivara', 'Villasalto', 'Lombriasco', 'Viarigi', 'Baveno', 'Neumarkt', 'Mergozzo', 'Pennadomo', 'Guarcino', 'Orbetello Airfield', 'Francavilla in Sinni', 'Cansano', 'Rocchetta', 'Carpineti', 'Filandari', 'Manziana', 'Curcuris', 'Arta Terme', 'Albaredo Arnaboldi', 'Brancaleone, Calabria', 'Arezzo', 'Grotta Gigante', 'Corciano', 'Galliate Lombardo', 'Valle San Nicolao', 'Rosegaferro', 'Pistoia', 'Lioni', 'Lisio', 'Cressa', 'Valsecca', 'Noceto', 'Casale di Scodosia', 'Giove, Umbria', 'Mirabello Monferrato', 'Bonefro', "Sant'Angelo a Nilo", 'Ticengo', 'Nucetto', 'Salisano', 'Ardauli', 'Crosa', 'Ponte Milvio', 'Mignanego', 'Jenne', 'Castellina Marittima', 'Verbicaro', 'Niella Belbo', 'Santa Maria Antica', 'Belgirate', 'San Nicola dei Lorenesi', 'Barolo, Piedmont', 'Caserta', 'Buccinasco', "Morro d'Oro", 'Ladispoli', 'Vastogirardi', 'Deiva Marina', 'Berbenno di Valtellina', 'Luserna', 'Paliano', 'Ormea', 'San Domenico Maggiore', 'San Godenzo', 'Cumae', 'Calolziocorte', 'Lecce', 'Welsberg-Taisten', 'San Paolo di Jesi', 'Cerreto di Spoleto', 'Campoli Appennino', 'Belforte del Chienti', 'Allumiere', 'Grantola', 'Montefelcino', 'Pisa International Airport', 'Mornico Losana', 'Ose', 'Montecchio Maggiore', 'Villa Rendena', 'Northern Italy', 'Roccaforte del Greco', 'Sergnano', 'Zagarise', 'Gricignano di Aversa', 'Autodromo di Pergusa', 'Campotosto', 'Nogara', 'Casalbeltrame', 'Mariana Mantovana', 'Neoneli', 'Camastra', "Revigliasco d'Asti", 'Scheggia Pass', 'Rivara', 'Gasperina', "Pont d'Aël", 'Massignano', 'Panni', 'Gruaro', 'Montalto Di Castro Airfield', "Sant'Ilario dello Ionio", 'Arzignano', 'Rotonda di San Tomè', 'Sori', 'Torre Boldone', 'Laghi', 'Sovicille', 'Quero', 'Rodengo-Saiano', 'Caraffa del Bianco', 'Fumone', 'Bettona', 'Antrona Schieranco', 'Vigarano Mainarda', 'San Biagio Platani', 'Curtatone', 'Viù', 'Gargano', 'Monzuno', 'Surano', 'Fiano, Piedmont', 'Stellanello', 'Formello', 'Prags', 'Orosei', 'Province of Syracuse', 'Grezzana', "San Gregorio d'Ippona", 'Varisella', 'Mestre', 'Alì Terme', 'Puegnago sul Garda', 'Castel del Monte, Apulia', 'Pozzaglio ed Uniti', 'Salza di Pinerolo', 'Lattarico', 'Latina Airport', 'Varese railway station', "Vighizzolo d'Este", 'Rovereto', 'Pontecorvo', 'Civiasco', 'Romana, Sardinia', 'Nusco', 'Cervia Air Force Base', 'Cima da Lägh', 'Rezzago', 'Capaccio Airfield', 'Santa Maria la Fossa', 'Viepri', 'San Salvatore Monferrato', "Cava de' Tirreni", 'Forum of Augustus', 'Cagno', 'Buggiano', 'Ortacesus', 'Spinea', 'Terme Vigliatore', 'Broni', 'Ne', 'Cosa', 'Lallio', 'Fossalta', 'Province of Crotone', 'Casalduni', 'Province of Ragusa', 'Nave, Lombardy', 'Odescalchi Castle', 'Voltaggio', 'Bore', 'Castellucchio', 'Castiglione di Garfagnana', 'Colonno', 'Subbiano', 'Arborio, Piedmont', 'Santa Donna Regina Nuova', 'Torre dei Lamberti', 'Sestu', 'Frecce Tricolori', 'Leni', 'Perarolo di Cadore', 'Mezzanego', 'Vigo di Fassa', 'Pò Bandino', 'Remedello', 'Biblioteca Nazionale Vittorio Emanuele III', 'Lonate Pozzolo', 'Preganziol', 'Teglio Veneto', 'Azione Cattolica', 'Calice al Cornoviglio', 'Rapino', 'Roiate', 'Carrè', 'Gamberale', 'Pontifical Oriental Institute', 'Ceres, Piedmont', 'Pizzo, Calabria', 'Alezio', 'Siddi, Sardinia', 'Loggia dei Militi', 'Stava', 'Penna in Teverina', 'Gravina in Puglia', 'Nostra Signora del Santissimo Sacramento e Santi Martiri Canadesi', 'San Cosmo Albanese', 'Muggiò', 'Bagnoregio', 'Riffian, South Tyrol', 'Aci Catena', 'Duronia', 'Trichiana', 'Binetto', "Belforte all'Isauro", 'Santa Marina, Campania', 'Rosignano Solvay', 'Ferrazzano', 'Sesto Calende', 'Tombolo', 'Marling', 'Porto San Giorgio', 'Tramonti di Sotto', 'Chiavari railway station', 'Passirano', 'Bianchi, Calabria', 'Merano', 'Scirca', 'Ahrntal', 'Gabicce Mare', 'Castions di Strada', 'Agliana', 'Castelpagano', "Cortina d'Ampezzo", 'Roccaforte Ligure', 'Casatenovo', 'Civezza', 'Urgnano', 'Mornago', 'Mont Gelé', 'Valva, Campania', 'Ussaramanna', 'San Basile', 'Ripa Teatina', 'Orta San Giulio', 'Fertilia Airport', 'Cutro', 'Cinaglio', 'Castelbuono', 'Maenza', 'Roana', 'Montenero Sabino', 'Pecetto di Valenza', 'Castelletto Stura', 'Pietrapaola', 'Niella Tanaro', 'Ceppaloni', 'University of Rome Tor Vergata', 'Gavorrano', 'Sorgono', 'Bitonto', 'Berzano di Tortona', 'Modigliana', 'Nogarole Vicentino', 'Coreno Ausonio', 'Gessate', 'Porto Cervo', 'Marzano', 'Bolognetta', 'Castiglione a Casauria', 'Bergamo railway station', 'Bardello', 'Giuliana, Sicily', 'Caserma Ederle', 'Porto Venere', 'Province of Ogliastra', 'Dalmine', 'Seneghe', 'Caorle', 'Merse River', 'Sovere', 'Portocannone', 'Erchie', 'Nicastro', 'Samatzai', 'Santeramo in Colle', 'Bolzano Airport', 'Ome', 'Tufara', 'Torre Grosso', 'Castelnuovo di Porto', 'Pinacoteca Comunale di Cesena', 'Camporosso', 'Velo Veronese', 'Moglia', 'Capitignano', 'Falerna', 'Tarquinia Airfield', 'Piazza Armerina', 'San Secondo', 'Cantoira', 'Corte Franca', 'Vacone', 'Morterone', 'Premilcuore', "Sant'Anatolia di Narco", 'San Pancrazio Salentino', 'Paganella', 'Tonco', 'Province of Lucca', 'Mereto di Tomba', 'Paceco', 'Partschins', 'Santo Spirito', "Castelletto d'Orba", 'Morfasso', 'Verucchio', 'Superga Rack Railway', 'San Paolo Solbrito', 'Suvereto', 'Cazzago San Martino', 'Pianella', 'Invorio', 'Gallicano nel Lazio', 'Cocconato', 'Morciano di Leuca', 'Erli', 'Cuveglio', 'Galliera', 'Contigliano', 'Scigliano', 'Ruffrè-Mendola', 'Cislago', 'Vesime', 'Spinoso', 'Cannalonga', 'Ambivere', 'Concordia Sagittaria', 'Samone, Piedmont', 'Monterenzio', 'Gonnostramatza', 'Postage stamps and postal history of Vatican City', 'Vezzano sul Crostolo', 'Cervia Airport', 'Cetara, Campania', 'Fiordimonte', 'Collelongo', 'San Gennaro Vesuviano', 'Dazio', 'Capriglia Irpina', 'Rovito', 'Forum Fulvii', 'San Gregorio di Catania', 'Casaleone', 'Cherasco', 'Talmassons', 'Cassino', 'Casabona', 'Introzzo', 'Crevacuore', 'Agliano Terme', 'Usellus', 'Champdepraz', 'Erice', 'Issiglio', 'Guidonia Montecelio', 'Rome', 'Tuenno', 'Marecchia', 'Sartirana Lomellina', 'Malpensa Airport', 'Fonte Nuova', 'Grand Golliat', 'Umbriatico', 'Canepina', 'Gaudo Airfield', 'Pozzilli', 'Maletto', 'Carpino', 'Comiso Airport', 'Albese con Cassano', 'Acquaviva Picena', 'Povoletto', 'Castelfranco Veneto railway station', 'Ceregnano', 'Quarto, Campania', 'Strozza', 'Sabbioneta', 'Villetta Barrea', 'Santa Lucia in Selci', 'Anzano di Puglia', 'Zumaglia', 'Giusvalla', 'Frosolone', 'Altavilla Irpina', 'Sogliano al Rubicone', 'Castelletto di Branduzzo', 'Latiano', 'Ferrere', 'Southern Italy', 'Moransengo', 'Bellagio', 'Scandiano', 'Pegognaga', 'Viggianello', 'Castelraimondo', 'Cedrasco', 'San Paolo Bel Sito', 'Partinico', 'Carsulae', 'Minerbio', 'Monte Roberto', 'Pratovecchio', 'Gaiarine', 'Rueglio', 'Brusaporto', 'Raffadali', 'Nemi', 'Manerbio', 'Colosimi', 'PalaDesio', 'Sommariva del Bosco', 'Longone al Segrino', 'Tonadico', 'Gragnano Trebbiense', 'Baschi', 'Collalto Sabino', 'Policlinico', 'Santa Maria la Longa', 'Minori', 'Monserrato', 'Concordia sulla Secchia', 'Joppolo', 'Castelpetroso', 'Albizzate', 'Roscigno', 'Frisa', 'Santa Maria Airfield', 'Paternopoli', 'Ponte Nossa', 'Marano Vicentino', 'Colliano', 'Roaschia', 'Bema, Lombardy', 'Domus de Maria', 'Stigliano', 'Gazzada Schianno', 'Quartucciu', 'Morlupo', 'Cappelletto', 'Chiari, Lombardy', 'Monti Simbruini', 'Irminio', 'Lacus Juturnae', 'Vocca', 'Lamon', 'Fobello', 'Nostra Signora di Tergu', 'Bibliotheca Hertziana – Max Planck Institute of Art History', 'Trinità', 'Borgo Valsugana', 'Senarica', 'Cassine', 'Lampedusa Airport', 'Camoscellahorn', 'Castelli Calepio', 'Sesto ed Uniti', 'Romagnano Sesia', 'Villacidro', 'Filettino', 'Castelvecchio Calvisio', 'Roman Catholic Archdiocese of Milan', 'Piombino', 'Cino', 'Cavareno', 'San Mauro la Bruca', 'Sutrio', 'Camburzano', 'Spoltore', 'Massarosa', 'Perosa Canavese', 'Noto Radio Observatory', 'Cambiago', 'Fontanarosa', 'Savoca', 'Cirigliano', 'Sante Marie', 'Parenti, Calabria', 'Pecorara', 'Rumo', 'Mondovì', 'Calvi, Campania', 'Guardamiglio', 'Crodo', 'Norchia', 'Vincenzo Florio Airport Trapani-Birgi', 'Caravaggio, Lombardy', 'Rogolo', 'Istrana Airport', 'Notaresco', 'Valguarnera Caropepe', 'Selve Marcone', 'Paolisi', 'Triuggio', 'Armenzano', 'Province of Ascoli Piceno', 'La Morra', 'San Michele in Borgo', 'Campolieto', 'Narni', 'Percile', 'Pont-Canavese', 'San Bernardo alle Terme', 'Platania', 'Follo', 'Zoagli', 'Montemagno', 'Arborea', 'Bosconero', 'Floresta', 'Sarnico', 'Carlantino', 'Gavazzana', 'Volterrano', 'Genoni', 'Sperlonga', 'Melissano', 'Bellante', 'Madonna della Strada', 'Seriate', 'Sforza Castle', 'Riposto', 'Rasen-Antholz', 'Cisterna', 'Pontelongo', 'Castello di Brianza', 'Fleming', 'Caino', 'Frasassi Caves', 'Nelson Mandela Forum', 'Torrazza Piemonte', 'Portalbera', 'Guardiagrele', 'Cantalupo nel Sannio', 'San Venanzo', 'Modena', "Serralunga d'Alba", 'Torre Orsaia', 'Grottole', 'Silanus', 'Riva Ligure', 'Tagliacozzo', 'Palazzo Pignano', 'Chiesa di San Giuliano dei Fiamminghi', 'Santa Maria di Costantinopoli', 'Cepagatti', 'Arona', 'Casalvieri', 'Ardeatine massacre', 'Montebello sul Sangro', 'Motteggiana', 'Province of Bologna', 'Ingria', 'Palasport Del Mauro', 'Miane', 'Pietranico', 'Montefano', 'Rivignano', 'Pradamano', 'Guasila', "Borgofranco d'Ivrea", 'Pastrengo', 'Villa Literno', "Sant'Apollinare alle Terme Neroniane-Alessandrine", 'Nureci', 'San Sebastiano al Palatino', "S'Archittu", 'Semproniano', 'Porretta Terme', 'Sala Baganza', "Sant'Angelo Limosano", 'Rudiano', 'Pfalzen', 'Sassetti Chapel', 'Ceresole Alba', 'Tomb of the Julii', 'Parco Dragoni in Forlì', 'Parrotspitze', 'Travedona-Monate', 'Dizzasco', 'Senerchia', 'Panicarola', 'Boccadasse', 'Verolengo', 'Sonnino', 'Fenestrelle', 'Germagno', 'Alberona', 'Cispadane Republic', 'Maserà di Padova', 'Cassano Magnago', 'Morbegno', 'Tricarico', 'Bastia Mondovì', 'Cisternino', 'Motta di Livenza', 'Sardara', 'Pecetto Torinese', 'Corleto Perticara', 'Gattatico', 'Saint-Oyen', 'Bolano', 'Pigna', 'Sarconi', 'Imperia', 'Schlern-Rosengarten Nature Park', 'San Vitaliano', 'Offagna', 'Fontanile', 'Cercemaggiore', 'Calvignasco', 'Realmonte', 'Cordonata', 'Verrua Po', 'Santa Cesarea Terme', 'Secondigliano', 'Torre del Colle', 'Ribordone', 'Treviolo', 'Noventa di Piave', "Basilica of Sant'Agostino", 'Baselice', 'Camino al Tagliamento', 'Linate Airport', 'Rivarolo Canavese', 'Seveso', 'Roncone', 'Brugnera', 'San Marco la Catola', 'University of Pisa', 'Piario', 'Observatory of Turin', 'San Vito Lo Capo', 'Grumello del Monte', 'Pontestura', 'Fossò', 'Lierna', 'University of Turin', 'Arch of Claudius', 'Albenga Airport', 'Pagani', 'Foreigners University of Siena', 'Induno Olona', 'Candida, Campania', 'Volpeglino', 'Borgoratto Mormorolo', 'Castelfranco di Sotto', 'Ton, Trentino', 'Bresimo', 'Zibido San Giacomo', 'Monsampietro Morico', 'Tribano', 'Strigno', 'Sappada', 'Rondissone', 'Siamanna', 'Fara San Martino', 'Caccamo', 'Aggius', 'Castellaro', 'Marone', 'Torrebelvicino', 'Vigolzone', 'Cardito', 'Villa Repeta', 'Genzano di Roma', 'Rive, Piedmont', 'University of Turin, Faculty of Law', 'Isole Tremiti', 'Casanova Elvo', 'Lovere', 'Casteldidone', 'Calimera', 'San Giorgio Morgeto', 'Carugo', 'Robecco Pavese', 'Lemie', 'Bastia Umbra', 'Mezzenile', "Cassano d'Adda", 'Filattiera', 'Rosasco', 'Elini', 'Bitetto', 'Civitaluparella', 'Baratili San Pietro', 'Strambinello', 'Issogne Castle', 'Larciano', 'Rea, Lombardy', 'Serra Riccò', 'Dambel', 'Favignana', 'Piz Roseg', 'Miasino', 'Parè', 'San Piero Patti', 'San Pietro in Montorio', 'Gavello', 'Fossalta di Piave', 'Pinzano al Tagliamento', "Palazzolo sull'Oglio", 'Meana di Susa', 'Marino', 'Bargagli', 'Ala', 'Cairate', 'Dolianova Cathedral', 'Paspardo', 'Sillavengo', 'Lumarzo', 'Sinalunga', 'Castelfondo', 'Piacenza', 'Lecce railway station', 'Malcesine', 'Palladian villas of Veneto', 'Fano Adriano', 'Lunamatrona', 'Soraga', 'Putifigari', 'Albera Ligure', 'Lauro', 'Corbola', 'Gandellino', 'Chambave', 'Altrei', 'Monfalcone railway station', "Capriata d'Orba", 'Vazzano', 'Borgomasino', 'Cesio', 'Sizzano', 'Pozzuoli', 'Corvara, Abruzzo', 'Gaeta', 'Mira', "Castle of Sant'Aniceto", 'Vigolo', 'Lettopalena', 'Castiglioncello', 'Santa Maria in Trastevere', 'Busto Arsizio', 'Commezzadura', 'Farigliano', 'Castelplanio', 'Fraine', "Monticello d'Alba", 'Ostiano', 'Matrice', 'Quindici', 'Palmiano', 'Gioia Tauro', "Castello d'Argile", 'Gozzano, Italy', 'Grossetto Airport', 'Pavone del Mella', 'Romagnese', 'Pisa Centrale railway station', 'Durnholzer Tal', 'Nomi, Trentino', 'Cunardo', 'Carmiano', 'Diso', 'Palazzo Datini', 'Lissone', "Caslino d'Erba", 'Fermignano', "Villa d'Este", 'Civitavecchia', 'Volla, Campania', 'Cercivento', 'Scanzorosciate', 'Moruzzo', 'Chiusdino', 'Monleale', 'Todi', 'Università di Reggio Emilia', 'Capistrello', 'Saltrio', 'Faedo', 'Maccastorna', 'Paruzzaro', 'Luogosano', 'San Carlo alle Quattro Fontane', 'Ceranova', 'Castel San Lorenzo', 'Zugliano', 'Pralungo', 'Sugana Valley', 'Tapogliano', 'Cantalupo Ligure', 'Volterra', 'Fregellae', 'Turri', 'Torino Esposizioni', 'Sotto il Monte Giovanni XXIII', 'Opera, Lombardy', 'Misano Adriatico', 'Fisciano', 'Adria', 'Pollena Trocchia', 'Besano', 'Pianello del Lario', 'San Ferdinando di Puglia', 'Longobucco', "Azzano d'Asti", 'Musso, Lombardy', 'Tolfa', 'Arch of Septimius Severus', 'Nazzano', 'Moniga', 'Scapriano', 'Casalvecchio Siculo', 'Giurdignano', 'Monte Sacro', 'Grondona, Piedmont', 'Tonara', 'Vezzano Ligure', 'Cairano', 'Nesso', 'Guardia Sanframondi', 'Sora', 'Solbiate', 'Appiano Gentile', 'Ceraso', 'Castel Boglione', 'Silea', 'Bagnaria', 'Semestene', 'Incisa Scapaccino', 'Serrungarina', 'Costabissara', 'Satriano', 'Premana', 'Zeri', 'Olginate', 'Foreigners University of Perugia', 'Barbaresco, Piedmont', 'Pernumia', 'San Giuliano Milanese', 'Assago', 'Trivigno', 'Mazzarrone', "Sant'Agnese fuori le mura", 'Bibulca Way', 'Trezzano sul Naviglio', 'Campania', 'Nicorvo', 'Riccione', 'Palazzo del Capitaniato', 'San Silvestro al Quirinale', 'Novalesa', 'San Carlo al Corso', 'Val Rosandra', 'Cappella Cantone', 'Porta Pia', 'Madonie Regional Natural Park', "Cerreto d'Asti", 'Valmacca', 'Bassignana', 'San Calogero', 'Cona, Veneto', 'Viadana, Lombardy', 'Gazzo, Veneto', 'Stadio Briamasco', 'San Possidonio', 'Bolognola', 'Zubiena', 'University of Bari', 'Lacedonia', 'Bivio Canoscio', 'Airola', 'Tarantasca', 'Oglianico', "Saint Peter's Square", 'Brunello, Lombardy', 'Brovello-Carpugnino', 'Colorina', 'Venaus', 'Quinto di Treviso', 'La Valle Agordina', 'Assisi railway station', 'Bassiano', 'Isola di Fondra', 'Isorella', 'Cisano Bergamasco', 'Vidigulfo', 'Colobraro', 'Cercola Airfield', 'Marghera', 'Susa', 'Loreggia', 'Finale Emilia', 'Faedis', 'Rocchetta di Cerreto', 'Coggiola', 'Collio', 'Bascapè', 'San Procopio', 'Cilavegna', 'Pomarolo', 'Enza', 'Ardore', 'Gaggio Montano', 'Gorno', 'Roccamorice', 'Acerra', 'Gazoldo degli Ippoliti', 'Cicerale', 'Besenello', 'Barengo', 'San Sigismondo', 'Cimadolmo', 'Ugento', 'Arcade', 'Ardesio', 'Albagiara', 'Zaccanopoli', 'Nanno', 'Lestizza', 'Tito, Basilicata', 'Magnano', 'Ofena', 'Flavian Amphitheater', 'Temple of Vesta', 'Mogorella', 'English Cemetery, Naples', 'Roccacasale', 'Andalo Valtellino', 'Cerignola', 'Condino', 'Alberobello', 'Castiglione Tinella', 'Cermenate', 'Arbus, Sardinia', 'Stilo', 'Ronzone', 'Cugliate-Fabiasco', 'Solero', 'Entratico', 'Calciano', 'Aprilia, Lazio', 'Province of Brindisi', 'Campodoro', 'Forino', 'Marmora', 'Riva di Solto', 'Gabiano', 'Monti Dauni', 'Budoni', 'Pagnacco', 'Sovana', 'Orsago', 'Piobbico', 'Casorate Sempione', 'Montelepre', 'Colle San Magno', 'Donori', 'Valganna', 'Castiglione di Sicilia', 'Cogne', 'Castel Volturno', 'San Vincenzo al Volturno', 'Arco', 'Valstagna', 'Crispano', 'Gottasecca', 'Pompei', 'Montemurro', 'Calamonaci', 'Santa Maria di Castello', 'Trasquera', 'Laceno', 'Castellinaldo', 'Umbria', 'Catanzaro', 'Macerata', "L'Aquila railway station", 'Curia Julia', 'Galati Mamertino', 'Olivola', 'Brendola', "Sant'Agata sul Santerno", 'Casazza', 'Cavaso del Tomba', 'Piove di Sacco', 'Via Margutta', 'Comunanza', 'Mortirolo Pass', 'Montalto Dora', 'Torre Mondovì', 'Contrada, Campania', 'Massa Fiscaglia', 'Montedoro', 'Castelbianco', 'Collecorvino', 'Monterosi', 'Caramanico Terme', 'Bossolasco', 'Costa di Mezzate', 'Ventotene', 'Tres, Trentino', 'Ciminna', 'San Pietro al Natisone', 'Similaun', "Sant'Agata Fossili", 'Centa San Nicolò', 'Benevello', 'Lucera', 'Vico Equense', 'Salaparuta', 'Montesilvano', 'Embassy of the United States to the Holy See', 'Castel San Pietro Terme', 'Casalborgone', 'Camerata Cornello', 'Crema', 'Indiano Bridge', 'Lusernetta', 'Cencenighe Agordino', 'Torrazza Coste', 'Miramare Castle', 'Sorico', 'Grandate', 'Villa Latina', 'Prasco', 'Sele Airfield', 'Gaiole in Chianti', 'Villa Minozzo', 'Santa Giusta Cathedral', 'Cerenzia', 'Grassobbio', 'Roncadelle', 'Volpara', 'Stadio della Vittoria', 'Castroreale', 'Titta', 'Sella group', 'Cantalupo di Bevagna', 'Falerii Novi', 'Goro', 'Veronella', 'San Rocco al Porto', 'Cantalice', 'Monti Volsini', 'Rezzato', 'Porta Capuana', 'San Martin de Tor', 'Frattamaggiore', "Barberino Val d'Elsa", 'San Martino Valle Caudina', 'Cervinara', 'Palio di Siena', "Sant'Arcangelo Trimonte", 'Mansuè', 'Villa di Chiavenna', 'Gais', 'Villaurbana', 'Cattolica Eraclea', 'United World College of the Adriatic', 'Suldenbach', 'Rosolina', 'Viggiù', 'Angrogna', 'Campodarsego', 'Falvaterra', 'Altavilla Vicentina', 'Tricesimo', 'Christ of the Abyss', 'Dorgali', 'Forano', 'Faenza', 'Mugello Circuit', 'Dinami', 'Avio, Trentino', 'Cles', 'Villa di Serio', 'Laureana di Borrello', 'Barbona', 'Gargazon', 'Bevagna', 'Venice Marco Polo Airport', 'Forlimpopoli', 'Andrano', 'Mortara, Lombardy', 'Castel San Niccolò', "Giano dell'Umbria", 'Petralia Soprana', 'Pettineo', 'Adelfia', 'Urbe Airport', 'Dipignano', 'Banchette', 'San Potito Ultra', 'Crognaleto', 'Conca della Campania', 'Caorso Nuclear Power Plant', 'Arosio', 'Collecchio', 'Gressoney-La-Trinité', 'Sesto San Giovanni', 'Tizzano Val Parma', 'Ceccano', 'Cossato', 'Montecrestese', 'Ponna', 'Punta di Pellaro', 'Grignasco', 'Castelluccio dei Sauri', 'Torre del Greco', 'Figino Serenza', 'Santa Fiora', 'Banari', 'San Marzano sul Sarno', 'Talamello', 'Premia', 'Merone', 'Croce di Castiglione', 'Percha', 'Rhêmes-Notre-Dame', 'Maglione', 'Colle Soglio', 'Postiglione', 'Arnesano', 'Basilica di Santa Giulia', 'Roccapalumba', 'Brognaturo', 'Ischia', 'Pré-Saint-Didier', 'Marmontana', 'Oppido Lucano', 'Madonie', 'Tuili', 'Fondi', 'Klammljoch', "Monticelli d'Ongina", 'Bussana Vecchia, Liguria', 'San Gregorio nelle Alpi', 'Poggio di San Remo', 'Montegabbione', 'Cappelle sul Tavo', 'Assemini', 'Rovigo', 'Angri', 'Montalbano Elicona', 'Arcola', 'Costigliole Saluzzo', 'Macugnaga', 'Morazzone', 'Fuscaldo', 'Turate', 'Fontana Maggiore', 'San Marco Argentano', 'Badia Polesine', 'Piedimulera', 'Castel San Giovanni', 'Cugnoli', 'University of Brescia', 'Montenars', 'Decimoputzu', 'Brescia', 'Cellamare', 'Nulvi', 'Vallerano', 'Chiavari', 'Cala Gonone', 'Brosso', 'Santo Stefano Roero', 'Liberi', 'Vallata', 'Ferrara', "Sant'Eusebio", 'Ponte Coperto', 'Riese Pio X', 'Bientina', 'Lake Como', 'Labaro', 'Trieste Astronomical Observatory', 'Casciago', 'Province of Enna', 'Cerro Maggiore', 'Villa Castelli', 'Villafrati', 'Nizza di Sicilia', 'Cisa Pass', 'Sardigliano', 'Melpignano', 'Centallo', 'Pratica di Mare Air Base', 'Montecchio Emilia', 'Bisceglie', 'Savignone', 'Rocca di Botte', 'Rogeno', 'Goni', 'Paulilatino', 'Velletri', "San Polo d'Enza", 'Sanarica', 'Cintano', 'Museo Civico di Zoologia', 'Rocca Canterano', 'Iglesias', 'Ficarra', 'Centrache', 'Sumirago', 'Grosseto', 'Santo Stefano del Sole', 'Chiaromonte', 'Borrello', 'Montecastrilli', 'Acate', 'Ascea', 'Torpè', 'Airole', 'Fraconalto', 'Santopadre', 'Palazzo della Civiltà Italiana', "Sant'Antioco di Bisarcio", 'Moriago della Battaglia', 'Montevecchia', 'Anzano del Parco', 'Settala', 'Gavirate', 'Bracca', "Mosciano Sant'Angelo", 'Pontinvrea', "Sant'Ambrogio sul Garigliano", 'Torre Cajetani', 'Spina Nuova', 'Premeno', 'Barone Canavese', 'Calvisano', 'Toano', "Boschi Sant'Anna", 'Grosseto railway station', 'Mistretta', 'Sacco', 'Bova Marina', 'Licenza', 'Mazzarino', 'Strongoli', 'Cavallino-Treporti', 'Apiro', 'Taurasi DOCG', 'Grumolo delle Abbadesse', 'Montemaggiore al Metauro', 'Roman Catholic Diocese of Noto', 'Montorio Romano', 'Milan Garibaldi Station', 'Montanaro', 'San Giovanni a Piro', 'Castello Maniace', 'Monte Viso', 'Mileto', 'San Fele', 'San Giorgio di Piano', 'Rovagnate', 'Vernante', 'Murazzano', 'Rondanina', 'Maretto', 'University of Pavia', 'Valfabbrica', 'Passaggio di Assisi', 'Cortile del Belvedere', 'Erve', 'Monza', 'Giarole', 'Melara', 'Grigno', 'Montenero di Bisaccia', 'Montepulciano', 'Felino', 'Lacchiarella', "Sant'Agapito", 'Castino', 'Capena', 'Sorgà', 'Maiori', 'Colfiorito', 'Calenzano', 'Vallecrosia', 'Isnello', "Province of L'Aquila", 'Schiavon', 'Centro (It)', 'Tornaco, Piedmont', 'Castelnuovo Scrivia', 'Ponte San Pietro', 'Marcianise', 'Reggio Calabria Centrale railway station', 'Lerchi', 'Accumoli', 'Santa Maria in Via', 'Parma', "Sant'Ambrogio di Valpolicella", 'Petacciato', 'Ariccia', 'Alcamo', 'Cura Carpignano', 'Mombaldone', 'Tiglieto', 'Breuil-Cervinia', 'Mathi', 'Vaiano', 'Lago di Malciaussia', 'San Rufo', 'San Giovanni di Posada', 'Terranova da Sibari', "Sant'Angelo del Pesco", 'Fabriano', 'Corfinio', 'San Leonardo', 'Lungro', 'Bagni di Lucca', 'Massa Martana', 'Costacciaro', 'Monte Berico', 'Pofi', 'San Nicandro Garganico', 'Castello di Godego', 'Gesù Nuovo', 'Carinaro', 'San Fatucchio', 'Pollentia', 'Cucciago', 'Seregno', 'Bortigali', 'Moio della Civitella', 'Monte San Giusto', 'Palaverde', 'Montebello di Bertona', 'Mignano Monte Lungo', 'Albenga', 'Bastiglia', 'Molino dei Torti', 'Millesimo', 'Alice Bel Colle', 'Santa Maria in Organo', 'Grumo Nevano', 'San Gemini', 'Cardeto', 'San Remo', "Cerreto d'Esi", 'Porano', 'Odolo', 'Elba', 'Montecchio Precalcino', 'Acilia', 'Mamertine Prison', 'Stalettì', 'Torre di Ruggiero', 'San Nazzaro Sesia', 'Sandigliano', 'Montefioralle', 'La Spezia', 'Grisolia', 'San Cesario di Lecce', 'Torlino Vimercati', 'Dusino San Michele', 'Fucecchio', 'Doues', "Casirate d'Adda", 'Camaldoli', 'Villasanta', 'Somma Lombardo', 'Ripalimosani', 'Ornavasso', "Sant'Angelo a Fasanella", 'Porto Cesareo', 'Ustica', 'Rodello', 'Gallarate', 'Vico del Gargano', 'Rho, Lombardy', 'Mottola', "Cavenago d'Adda", 'Noale', 'Pontelandolfo', 'Adrara San Rocco', "Savogna d'Isonzo", 'Pieve a Nievole', 'Nuovo Stadio Comunale', 'Termoli', 'Province of Rimini', 'University of Siena', 'Carbonera, Veneto', 'Erba, Lombardy', 'Melle', 'Santa Maria in Campitelli', 'Cantagallo', 'San Giovanni Ilarione', "Diano d'Alba", 'Ferrera di Varese', 'Asso', 'Onzo', 'Pietracatella', 'Onelli', 'Cuccaro Vetere', 'Valtorta, Lombardy', 'Sternatia', 'Cavacurta', 'Vigolo Vattaro', 'Comitini', 'Papozze', 'Filottrano', 'Castelbelforte', 'Soresina', 'Piazza De Ferrari', 'Gagliano Castelferrato', 'Bosa', "Lesignano de' Bagni", 'Miglionico', "Sant'Andrea della Valle", 'Maser', 'Tresana', 'Bedulita', 'Montescano', 'Quattro Fontane', 'Casamicciola Terme', 'Capizzone', 'Lariano', 'Pizzo Campanile', 'Campo Calabro', 'San Giovanni del Dosso', 'Lizzano, Apulia', 'Lucca railway station', 'Pradalunga', 'Capannoli', 'Fresonara', 'Grotte, Sicily', 'Naviglio Pavese', 'Cupello', "Sauze d'Oulx", 'Busana', 'Cormons', 'Vinci', 'Campo di Giove', 'Divignano', 'Colvere', 'Padria', 'Oggiona con Santo Stefano', 'La Val', 'Chiaravalle Centrale', 'San Nazaro in Brolo', 'Dosso del Liro', 'Lonato del Garda', 'Spinone al Lago', 'Poggio Catino', 'Congress of Verona', 'Vivaro Romano', 'Imbersago', 'Vignola-Falesina', 'Pabillonis', 'Pasian di Prato', 'Sparone', 'Blevio', 'Ferrandina', 'Allaro', 'Galatina', 'Torano Nuovo', 'Glurns', 'Vezzano, Trentino', 'Riolo Terme', 'Presanella', 'Mineo', 'Lucca Cathedral', 'Bagnone', 'Great St Bernard Pass', 'Monte Zoncolan', 'Vallepietra', 'Golfo Aranci', 'Cambiasca', 'Rotello', 'Fondachelli-Fantina', 'Gran Ega', 'Buttigliera Alta', 'Torviscosa', "Terzo d'Aquileia", 'Faloppio', 'Ruvo di Puglia', 'Macra', 'Santa Margherita di Staffora', 'Controne', 'Terres', 'Coassolo Torinese', 'Maracalagonis', 'Quaranti', 'Casalzuigno', 'Arezzo Cathedral', 'Montoggio', 'Camino, Piedmont', 'Carè Alto', 'Martano', 'Ello', 'Siniscola', 'Massino Visconti', 'Chiesanuova, Piedmont', 'Lari, Tuscany', 'Ventimiglia, Italy', 'Grantorto', 'Traona', 'Rocca Cigliè', 'Crespiatica', 'Usmate Velate', 'Selvino', 'Canossa Castle', "Pieve d'Olmi", 'Armeno', 'Frassinelle Polesine', "Albiano d'Ivrea", "Sant'Angelo Muxaro", 'Burgstall', 'Borso del Grappa', 'Mattie, Piedmont', 'Monte San Vito', 'Peveragno', 'San Giovanni in Venere Abbey', 'Conselice', 'Sesto Fiorentino', 'Loazzolo', 'Tufillo', 'Sëlva', 'Bomarzo', 'Palma di Montechiaro', 'Castelguidone', 'Cortino', 'Luserna San Giovanni', 'Ronco Canavese', 'Raviscanina', 'Monte San Biagio', 'Morgano', 'Tscherms', 'Torella dei Lombardi', 'University of Salerno', 'Briona', 'Casapulla', 'Vigonovo', 'Santa Maria del Regno', 'Greci, Campania', 'Tremosine', 'Bosia, Piedmont', 'Mergo', 'Villanova Tulo', 'Montecassiano', 'Tertenia', 'Cavallermaggiore', 'Monte Cerignone', 'Almè', 'Bizzarone', 'Vendone', 'Morra', 'Rostra', 'Collegio Clementino', 'Hofmahdjoch', 'Torrita di Siena', 'Santa Maria della Vittoria', 'Capergnanica', 'Vobarno', 'Samugheo', 'Mazzè', 'Aiguille Blanche de Peuterey', 'Calice Ligure', 'Monte Falterona', 'Stadio Tommaso Fattori', 'Gazzaniga', 'Amandola', 'Sannicola', 'Colleferro', 'Villanova Monferrato', 'Cessalto', 'Verolavecchia', 'Pollein', 'Forni Avoltri', 'Lambrugo', 'Statte', 'Porto Azzurro', 'Maranello', 'Bergantino', 'Stadio Olimpico Comunale', 'Piancastagnaio', 'Molare', 'Terragnolo', 'Carpeneto', 'Villaricca', 'Staffora', 'Redondesco', 'Padua', 'Zelo Buon Persico', 'Decimomannu', 'Cappella Palatina', 'Cortenova', 'Albareto', 'San Martino di Lupari', "Capo dell'Armi Lighthouse", 'Monte San Giovanni Campano', 'Montemezzo', "Baldissero d'Alba", 'Albiate', 'Sassocorvaro', 'Chitignano', 'Sanctuary of Vicoforte', 'Casatisma', 'Buttrio', 'Scapoli', "Orto Botanico Didattico Sperimentale dell'Università di Milano", 'Rapallo', 'Sassello', "Sant'Elena Sannita", 'Gossensass-Colle Isarco', 'Castel Maggiore', 'Schluderns', 'Loiano', 'Montenerodomo', 'Peia', 'Capracotta', 'Roburent', 'Sanguinetto', 'Villagrande Strisaili', 'Amelia, Umbria', 'Santa Teresa di Riva', 'Roncà', 'Lurago Marinone', 'Acuto', 'Spiazzo', "Piobesi d'Alba", 'Vescovana', 'Isolabella', 'Cameri Airport', 'Barbianello', 'San Potito Sannitico', 'None, Piedmont', 'Lucedio Abbey', 'Sedriano', 'Albairate', 'Paterno Calabro', 'Berzo Inferiore', "Trajan's Forum", 'Phlegraean Fields', 'Chiaramonte Gulfi', 'Zafferana Etnea', 'Viguzzolo', 'Montelongo', 'Carpineto della Nora', 'Villanova Monteleone', 'Cautano', 'Autodromo Nazionale Monza', 'Bareggio', 'Castel Condino', 'Magomadas', 'Cesenatico', 'Gorreto', 'Sporminore', 'Altare', 'Villa Biscossi', 'Parrano', 'Monterchi', 'Quattordio', 'Villa Bartolomea', 'Pantelleria', 'Ponte Lambro', 'Piana degli Albanesi', 'Castel del Piano', 'Cella Dati', 'Poggio Renatico', 'Terracina', 'Melissa', 'Cornegliano Laudense', 'Pescia', 'Sanfrè', 'Santa Prisca', 'Tempio Pausania', 'Taurianova', 'Capranica, Lazio', 'Odalengo Grande', 'Palazzuolo sul Senio', 'Abbiategrasso', "Ponte Sant'Angelo", 'Padru', 'Ponte Caffaro', 'Palermiti', 'Marentino', 'Siurgus Donigala', 'Monastir', 'Terzorio', 'Mercogliano', 'Torraca', 'Castelbellino', 'Calatabiano', 'Vinovo', 'Gesualdo, Campania', 'Lusevera', "San Marco d'Alunzio", "Sant'Eufemia a Maiella", 'San Vito Romano', "Castell'Arquato", 'United Nations System Staff College', 'Castello di Lombardia', 'Civenna', 'Melicucco', 'Sgurgola', 'Ponte Nizza', 'Bertinoro', "Vigliano d'Asti", 'Fiuggi', 'Allerona', 'Controguerra', 'Breda di Piave', 'Casola in Lunigiana', 'University of Catania', 'Pelugo', 'Martignacco', 'Grottolella', 'San Pelino', 'Capriana', 'Castelnovetto', 'Rivalta Bormida', 'Porto Empedocle', 'Nule', 'Mantello', 'Santa Maria presso San Celso', 'Ghedi Airport', 'Marsala', 'San Giovanni Gemini', 'Ranzo', "Sant'Egidio alla Vibrata", 'San Tammaro', 'Nova Siri', 'Correzzola', 'Merana', 'Tassullo', 'Zandobbio', 'Avigliana', 'Acquarica del Capo', 'Saracena', 'Foligno', 'Oyace', 'Monte Argentario', 'Su Nuraxi di Barumini', 'Carpinone', 'Province of Cosenza', 'Grottaglie', 'Noviglio', 'Bagnasco', 'Mordano', 'Tarquinia', 'Tarvisio', 'Volano', 'San Daniele del Friuli', 'Montechiarugolo', 'Casteggio', 'Robella', 'Episcopia', 'Schivenoglia', 'Trisobbio', 'Montegiorgio', 'Torvaianica', 'Peschiera Borromeo', 'Campagnola Emilia', 'San Lorenzo Isontino', 'Province of Mantua', 'Monte Nuovo', 'Castelbaldo', 'Torrice', 'Livraga', 'Basilica San Paolo', 'Church of the Gesù', 'Gallodoro', 'Quargnento', 'Scontrone', 'Mascalucia', 'Montecopiolo', 'Santa Francesca Romana, Rome', 'Cagnano Amiterno', 'Villa Cortese', 'Porta Esquilina', 'Genivolta', 'Ozieri', 'San Cipriano Picentino', 'Posada, Sardinia', 'Frassinetto', 'Agazzano', 'Carbonara di Nola', 'Montelupo Albese', 'Sepino', 'Torrecuso', 'Alassio', 'Legnaro', 'Sauris', 'Revere, Lombardy', 'Duchy of Mantua', 'Rovato', 'Moraro', 'Bonavigo', 'Montaquila', 'Branzi', 'Loreglia', 'Isernia', 'San Pietro di Cadore', 'Monale', 'Cariati', 'Castiglione Torinese', 'Third University of Rome', "Castrignano de' Greci", 'Castelletto Molina', 'Pila, Piedmont', 'Tusa, Sicily', 'Genzone', 'San Michele di Serino', 'San Nicola Baronia', 'Altidona', 'Bosio', 'Castelfiorentino', 'Furci Siculo', 'Covo', 'Pederobba', 'Omignano', 'Casa Sollievo della Sofferenza', 'Bregaglia Range', 'Carpignano Sesia', 'Pieve Emanuele', 'San Paolo Maggiore', 'Scopello', 'Rivamonte Agordino', 'Medolla', 'San Buono', 'Sacro Monte di Orta', 'Gemonio', 'Cortale', 'Masi', 'Perosa Argentina', 'San Cassiano', 'Roccanova', 'Muros, Sardinia', 'San Benedetto del Tronto', "Sant'Apollinare", 'Cornaredo', 'Bruzzano Zeffirio', 'Guilmi', "Sant'Alessandro in Zebedia", 'Scalenghe', 'Gravere', 'Torrita Tiberina', 'Santa Caterina Villarmosa', 'Gioia del Colle Air Base', 'Mezzana Bigli', 'Sindia', 'Acceglio', 'Antegnate', 'Ripalta Arpina', 'Scerni', 'Quagliuzzo', 'Perdifumo', 'Simala', 'University of Milan Bicocca', 'Ferruzzano', 'Vatican Observatory', 'Arsiè', 'Cesate', 'Stadio Mirabello', 'Albissola Marina', 'Bovalino', 'Calopezzati', 'Barisciano', 'Maissana', 'Santa Maria degli Angeli', 'Fontana Liri', 'Cesano Maderno', 'Capestrano', "Sant'Angelo in Pontano", 'Bressana Bottarone', 'Monsampolo del Tronto', 'Bitti', 'Vaglio Serra', 'Poggiodomo', 'Opi', 'Deruta', 'Piantedo', 'Pontboset', 'Monte Disgrazia', 'Fano Airport', 'Canzano', 'San Zeno', 'Preone', 'Cellole', 'Mede, Lombardy', 'Cassano Valcuvia', 'Ponte nelle Alpi', 'Golferenzo', 'Ziano Piacentino', 'San Luca', 'Guarene', 'Villa San Pietro', 'Column of Phocas', 'Olbia Costa Smeralda Airport', 'Conselve', 'Laerru', 'Ortona', 'Fiesole', 'Cassinetta di Lugagnano', 'Greve in Chianti', 'University of Lecce', 'Grado', 'Vicenza railway station', 'Avigliano, Basilicata', 'Monte Cassino', 'Onifai', 'Quintano', 'San Fiorano', 'Carlentini', 'Monteleone di Fermo', 'Camposanto', 'Denice', 'Pazzi Chapel', 'Laterina', 'Africo', 'San Crisogono', 'Lanusei', 'Chiampo', 'Marradi', "Pieve d'Alpago", 'Caprino Veronese', 'Druento', 'Monte Isola', 'Lasino', 'Forcola', 'Belvedere Ostrense', 'Origgio', 'Paladina', 'Diano Arentino', 'Crespellano', 'Verceia', 'San Benedetto Po', 'Angeli, Finland', 'Cocullo', 'Orciano Pisano', 'Fiumicello', 'Province of Padua', 'Prata di Principato Ultra', 'Ciane', 'Comano, Tuscany', 'Province of Catanzaro', 'Falcone', 'Temù', 'Cartignano', 'San Sostene', 'Solomeo', 'Solagna', 'Paratico', 'Montemarzino', 'Cergnago', 'Verduno', 'Calderara di Reno', 'Livinallongo del Col di Lana', 'Pinasca', 'Cori', 'San Vendemiano', 'Ortona dei Marsi', 'Magnacavallo', 'Bondone', 'Novaledo', 'Isola Madre', 'Apennine Mountains', 'Terzolas', 'Great Synagogue of Rome', 'Sturno', 'Pecco', 'Felonica', 'Santa Maria in Monserrato degli Spagnoli', 'Martignana di Po', 'Zimone', 'Tignale', 'Apollosa', 'Castel di Sangro', "Sant'Antonio dei Portoghesi", 'Vinchiaturo', 'Calvene', 'Costa Volpino', 'Romandola-Madonna del Ponte', 'Oratory of San Giacomo della Marina', 'Trambileno', 'Santa Maria la Carità', "Anzola dell'Emilia", 'Casamassima', 'Patti', 'Albugnano DOC', 'Civitella Casanova', 'Mount Fumaiolo', 'Somaglia', 'Chiusaforte', 'Marano Ticino', 'Jovençan', 'Santi Quattro Coronati', 'Pisticci', "Godega di Sant'Urbano", 'Campogalliano', 'Poirino', "Doge's Palace, Venice", 'Taurano', 'Santa Maria a Monte', 'Poggioreale', 'Casalserugo', 'Sacile', 'Empoli', 'Trivignano Udinese', 'Carbonara al Ticino', 'Punta Rosa', 'Musei', 'Sadali', 'Ripalta Cremasca', 'San Giorgio Monferrato', "Sant'Antonio di Ranverso Abbey", 'Flavon', 'Modica', 'Lauco', 'Monte Compatri', 'Province of Lodi', 'Tarano', 'Serravalle Pistoiese', 'Pompeii', 'San Maiano', 'Gioia Sannitica', 'Tirrenia', 'Pove del Grappa', 'Pedaso', 'Montelibretti', 'Gagliato', "Sant'Agata Bolognese", 'University of Fermo', 'Barlassina', 'Cineto Romano', 'Casalfiumanese', 'Villeneuve', 'Lastra a Signa', 'Valledolmo', 'Lorsica', 'Bordano', 'Atzara', 'Sinnai', 'Villafranca Sicula', 'Porto Torres', 'Parco Nazionale dei Monti Sibillini', 'Tione di Trento', 'Capodimonte, Lazio', 'Valle di Maddaloni', 'Briatico', 'Deliceto', 'Casteldaccia', 'Grimaldi, Calabria', 'Gonnoscodina', 'San Pietro Val Lemina', 'Villar Perosa', 'Calvanico', 'Cengio', 'Azzio', 'Vanzago', 'Trani', 'Suisio', "Santa Sofia d'Epiro", 'Volvera', 'Ossimo', 'Ottaviano', 'Lezzeno', 'Padre Pio Pilgrimage Church', 'Santa Teresa Gallura', "Sant'Angelo in Lizzola", 'Fresagrandinaria', 'Monte Rasu', 'Motta Santa Lucia', 'San Polo Matese', 'Villapiana', 'Fonte Avellana', 'San Pietro di Morubio', 'Sarroch', 'Talamona', 'Sona', 'Tenna, Trentino', 'Villa Vomano', 'Cesano', 'Vicolungo', 'Basiliano', 'Lappano', 'Nostra Signora del Sacro Cuore', 'Cimon della Pala', 'Liguria', 'Ospedaletto Euganeo', 'Pieve del Cairo', 'Monti Ausoni', 'Reitano', 'University of Cassino', 'Visco', 'Sassano', 'Monte Chiadenis', 'Fauglia', 'Santi Apostoli, Rome', "Lugagnano Val d'Arda", 'Meolo', 'Marina di Pisa', 'Pistoia Cathedral', 'Oschiri', 'Commessaggio', 'Zignago', 'Maria SS. Assunta University of Rome', 'Cavizzana', 'Ostuni', 'Novellara', 'Anagni', 'Carbonara di Po', 'Longano', 'Lona-Lases', 'Reggiolo', 'Altopascio', 'Magliano Alpi', 'Motta Visconti', 'Fountain of Neptune, Rome', 'Force', 'Corsione', 'Escolca', 'Casalnuovo di Napoli', 'Mondaino', 'Gressoney-Saint-Jean', 'Agordo', 'Logna', 'Laurentum', 'Antillo', "San Cipriano d'Aversa", 'Torricella Verzate', 'Azzano San Paolo', 'Busachi', 'Colli a Volturno', 'Bompensiere', 'Tissi', 'Canicattini Bagni', 'Civitella San Paolo', 'Poggio Imperiale', 'Montefino', 'Crocefieschi', 'Granaglione', 'Brenner Pass', "Fragneto l'Abate", 'Novara', 'Caltanissetta', 'Envie', 'Castiglione Falletto', 'University of Modena and Reggio Emilia', 'San Giacomo Apostolo, Forlì', 'Mittagstal', 'Pianello Val Tidone', 'Piz Fora', 'Cervicati', 'Binasco', 'Valle Castellana', 'Castellalto', 'Council of Rimini', 'Vendrogno', 'Mont Glacier', 'Milliarium Aureum', 'Parella', 'Taisten', 'Arcisate', 'Pievepelago', 'Narbolia', 'Petilia Policastro', 'San Marco Evangelista', 'Francavilla Marittima', 'Uboldo', 'Verderio Superiore', 'Ospedalicchio', 'Pontecagnano Faiano', 'Monfumo', 'Varzi', 'Mainetto', 'San Nicola Church, Pisa', 'Inveruno', 'Soldano', 'Castelnuovo Rangone', 'Baranello', 'Ales', 'Castelnuovo, Trentino', 'Piasco', 'Civitella del Tronto', 'Cagliari railway station', 'South Tyrolean Unterland', "Sant'Elia a Pianisi", 'Rotella', "Sant'Elena, Veneto", 'Solferino', 'Cornale', 'Crocetta del Montello', 'Alfedena', 'Borca di Cadore', 'Brondello', 'Roggiano Gravina', 'Fabrica di Roma', 'Piz Saliente', 'Botrugno', 'Sanctuary of the Vergine dei Martiri, Fonni', "Costa de' Nobili", "Montechiaro d'Acqui", 'San Pier Niceto', 'Cormano', "Torre d'Arese", 'Castelnuovo di Val di Cecina', 'Piana di Monte Verna', "Rivolta d'Adda", 'Colloredo di Monte Albano', 'Acquafredda', 'Ciserano', 'Monteleone Rocca Doria', 'Scaldasole', 'Attigliano', 'San Pio delle Camere', 'Castellazzo Novarese', "Cisterna d'Asti", 'Ledro', 'Cascina', 'Montaldo Bormida', 'Valderice', 'Montescheno', 'Pomezia', 'Gussola', 'Staffolo', 'Museo della Deportazione', 'Casalmoro', 'Orsenigo, Lombardy', 'Passaggio', 'Squinzano', 'Avendita', 'Province of Milan', 'Sogliano Cavour', 'Kurtatsch an der Weinstraße', 'Ponte Galeria Airfield', 'Villanovafranca', 'Lugo di Vicenza', 'Baronissi', 'Buseto Palizzolo', 'Rosengarten group', 'Caltabellotta', 'Francavilla Angitola', 'Alfonsine', 'Stadio Luigi Zaffanella', 'San Benigno Canavese', 'Cicognolo', 'Martellago', 'Pescina', 'ELETTRA', 'Capri Leone', 'Posina', 'Pessina Cremonese', 'Cesena', 'Cave', "Civita d'Antino", 'Stornarella', 'Settingiano', 'Borgo Ticino', 'Castelleone', 'Bertiolo', 'Bezzecca', 'San Gregorio Armeno', 'Stuffione', 'Colbordolo', 'Monte Oliveto Maggiore', 'Villa di Briano', 'Arzana', 'Caltignaga', 'Collarmele', 'San Marcello Pistoiese', 'Magnago', 'Bedero Valcuvia', 'Ornica', 'Valbrona', 'Riccò del Golfo di Spezia', 'Segusino', 'Albino', 'Lesina, Apulia', 'Luni', 'Flumeri', 'Montan', "Castelnuovo Bocca d'Adda", "Calusco d'Adda", 'Lanuvium', 'Belmonte del Sannio', 'Milan Cadorna Railway Station', 'Pincara', 'Paderno Dugnano', 'Serretella Airfield', 'Serri', 'Gerenzano', 'Treviso Bresciano', 'Monte Cremasco', 'Tonezza del Cimone', 'Villorba', "Villanova d'Ardenghi", 'Casalbuttano ed Uniti', 'Santa Maria della Pace', 'Valdobbiadene', 'Stadio Città del Tricolore', 'Villasor', 'Belluno', 'Giulianova', 'Mozzo', 'Seclì', 'Soverzene', 'University of Bergamo', 'Margreid an der Weinstraße', 'Afragola', 'Tollo', 'Cerreto Guidi', 'Sarnano', 'Tresigallo', 'Nerola', 'Grizzana Morandi', 'Azzano Decimo', 'Torreglia', 'Galliera Veneta', 'Dignano', 'Pozzolo Formigaro', 'Terni', 'Varco Sabino', 'Garigliano Nuclear Power Plant', 'Leonforte', 'Valtesse', 'Amendola Airport', 'Pfitschtal', 'Meta, Campania', 'Volturara Appula', 'Lake Agnano', 'Mariglianella', "Serra de' Conti", 'Provvidenti', 'Vigo di Cadore', 'Sassinoro', 'Fragneto Monforte', 'Coseano', 'Carunchio', 'Giardinello', 'Bardi, Emilia-Romagna', 'Battifollo', 'Torre Canavese', 'Scido', 'Bioglio', 'Spezzano Piccolo', 'Monguzzo', 'Marianopoli', 'Maddaloni', 'Fosdinovo', 'Palazzo Adriano', "L'Aquila", 'Crespino', 'Segariu', 'Province of Rovigo', 'San Felice del Benaco', 'Terranova di Pollino', 'Ricigliano', 'Casale Monferrato', 'Itri', 'Barbariga', 'Vallo della Lucania', 'Andrate', 'Pizzo del Torto', 'Masullas', 'Cappella Sansevero', 'Meana Sardo', 'Graun im Vinschgau', 'Apulia', 'Lagnasco', 'Erbezzo', 'Pianico', 'Belmonte Castello', 'Giustenice', 'Berlingo', 'Lavenone', 'Paganico Sabino', 'Morcone', 'Colledara', 'Illorai', 'Montagnana', 'Civo', 'Coli, Emilia-Romagna', 'Brugherio', 'Marsciano', 'Quistello', 'Laino', 'Villastrada', 'Balsorano', 'Bozzole', 'Zone', 'Zermeghedo', 'Tora e Piccilli', 'Valprato Soana', 'Valsesia', 'Carloforte', 'Levice', 'Adro', 'Acqualagna', 'Villalago', 'Genoa', 'Gricigliano', 'Confienza', 'Cavallasca', 'Isola Dovarese', 'Pesco Sannita', 'Santa Marina Salina', 'Follina', 'Morozzo', 'Central Italy', 'Osnago', 'Gualdo Tadino', 'Monti Picentini', 'Cammarata', 'Castelsantangelo sul Nera', 'Guanzate', 'Castignano', 'University of Trento, Trento Campus', 'Santa Vittoria in Matenano', 'Poggiardo', 'Ono San Pietro', 'Sorisole', 'Siris, Sardinia', 'Filogaso', 'Lesa', 'Zambana', 'Volpedo', 'Castel Mella', 'Candelo', 'Bagnolo Cremasco', 'Folgaria', 'Rimella', 'San Secondo di Pinerolo', 'Affile', 'Pietrasanta', 'Monte Castello di Vibio', 'Garbagnate Milanese', 'Fiorano Modenese', 'Crevoladossola', 'Venegono Inferiore', 'Viticuso', 'Montecchio', 'Trieste Centrale railway station', 'Serdiana', 'Selva di Cadore', 'Grenzgipfel', 'Uras', 'Bairo', 'Agugliano', 'Castagnole Piemonte', 'Pozzolengo', 'San Giacomo degli Schiavoni', 'Riolunato', 'Vallada Agordina', 'Mezzoldo', 'Gsieser Bach', 'Taipana', 'Sorbo Serpico', 'Pieve San Giacomo', 'Torre di Moravola', 'Candida', 'Piglio', 'Ivrea', 'Barghe', 'Stadio Ciro Vigorito', 'Torricella in Sabina', 'San Chirico Raparo', 'Serrara Fontana', 'Dolo', 'Gorle', 'San Lorenzello', 'Paul VI Audience Hall', 'San Daniele Po', 'Roccaporena', 'Poggibonsi', 'Saint-Nicolas, Aosta Valley', 'Fontainemore', 'Province of Ancona', 'Nociglia', 'Monte Conero', 'Siena railway station', 'Triponzo', 'Ricadi', 'Sampierdarena', 'Casaleggio Boiro', 'Bordighera', 'Paroldo', 'San Martino di Venezze', 'Vita', 'Hône', 'Rocchetta e Croce', 'Cuceglio', 'Quattro Castella', 'Costa di Serina', 'Senis', 'San Marzano di San Giuseppe', 'Vestignè', 'Pontenure', 'Capo di Ponte', 'Nocera Superiore', 'Pesche', 'Bassano in Teverina', 'Brenna, Lombardy', 'Antignano', 'Nettuno', 'Sicily–Rome American Cemetery and Memorial', 'Zeddiani', 'Wing of the Villa Thiene', 'Liscate', 'Tempio Civico della Beata Vergine Incoronata', 'Friuli-Venezia Giulia', 'Giuliano Teatino', 'Malosco', 'Plaus', 'Taurisano', 'Province of Gorizia', 'Pozzomaggiore', 'Perugia', 'Belmonte Piceno', 'Ceno', 'Casalincontrada', 'Adamello-Presanella Alps', 'Arenzano', 'Pozzallo', 'San Gillio', 'Oliveto Citra', 'Trentino-Alto Adige/South Tyrol', 'Sarnonico', 'Trecastagni', 'Feroleto della Chiesa', 'Cancello e Arnone', 'Roverbella', 'Savignano Irpino', 'Issime', 'Armento', 'Olzai', 'Bibbona', 'Montecorvino Rovella', 'Cellino San Marco', 'Serrastretta', 'Montanera', 'San Giovanni Valdarno', 'Castel Frentano', 'Isola della Scala', 'Marotta', 'Credaro', 'Cevo', 'Cavriago', 'Salvirola', 'Gualtieri Sicaminò', 'Mezzana Rabattone', 'Bovolone', 'Gallicano', 'Agnadello', 'Roccaspinalveti', 'Pescara Circuit', 'Vicalvi', 'Melito Irpino', 'Mesola', 'Nortosce', 'Roccamena', 'Ascrea', 'Roccarainola', 'Campagna', 'Settimo Torinese', 'Coccaglio', 'Comano Terme', 'Provaglio Val Sabbia', 'Lomello', 'Colazza', 'Circello', "Sant'Alessio Siculo", 'Pago del Vallo di Lauro', 'Buguggiate', 'Calizzano', 'Udine', 'Fontecchio', 'Godiasco', 'Salza Irpina', 'Piz Cengalo', 'Arch of Titus', 'Gizzeria', 'Sauze di Cesana', 'Ceto, Lombardy', 'San Germano dei Berici', 'Osini', 'Aurunci Mountains', 'Pescate', 'Locate di Triulzi', 'Mount Yemlikli', 'Pace del Mela', 'Magreglio', 'Tirol', "Villa d'Almè", 'Micigliano', 'Ateleta', 'Paisco Loveno', 'Osoppo', 'Mandela, Lazio', 'Santa Venerina', 'Castellazzo Bormida', "Sant'Eligio Maggiore", 'Bonate Sotto', 'Forio', 'Aicurzio', 'Cusano Mutri', 'Province of Reggio Calabria', 'Cigliè', 'Capannelle Pass', 'Tonale Pass', 'San Giorgio Albanese', 'Filiano', 'Conca Casale', 'Novalesa Abbey', 'Cossano Canavese', 'Fardella, Basilicata', 'Gallo Matese', 'Terenzo', 'Fivizzano', 'Cavazzo Carnico', 'Cerveteri', 'Benna, Piedmont', 'Siror', 'Teatro Sisto - Ostia Lido', 'Scicli', 'Giarratana', 'Ragusa', 'Carney Park', 'Casola di Napoli', 'Marzabotto', 'Pescara', 'San Vittore del Lazio', 'Terranova Sappo Minulio', 'Populonia', 'Conversano', 'Valnegra', 'Fabrizia', 'Ruino', 'Parma Airport', 'Bagnoli del Trigno', 'Clusone', 'Bovisio-Masciago', 'Impruneta', 'Sagrado', 'Pontificio Collegio Filippino', 'Belveglio', 'Monte San Pietro', 'Musile di Piave', 'Scagnello', 'Lucus Feroniae', 'Stintino', 'Valdagno', 'Barbarano Vicentino', 'San Pietro, Perugia', 'Cornizzolo', 'Grotta di Cocceio', 'Acquedolci', 'Montà', 'Este', 'Isola delle Femmine', "Sant'Anna dei Palafrenieri", 'Cellarengo', 'Schnalser Bach', 'Piazza al Serchio', 'Luisago', 'Tribiano', 'Etroubles', 'Ghiffa', 'Salbertrand', 'Castelvecchio Bridge', "University of L'Aquila", 'Pianezza', 'Monte Bolca', 'Stadio Vanni Sanna', 'Castel Rozzone', 'Sarego', 'Stefanaconi', 'Erto e Casso', "Corte de' Frati", "Fiesso d'Artico", 'Poggio Sannita', 'Conzano', 'Sormano', 'Pontevico', 'Gragnano', 'Mediglia', 'Ripatransone', 'San Tomaso Agordino', 'Marudo', 'Nantasket Junction', 'Pietraroja', 'San Vero Milis', 'San Giorgio Lucano', 'Quinto Vercellese', 'Fraccano', 'Valsolda', 'Ancarano', 'Tratalias', 'Palermo', 'Isola del Liri', 'San Colombano al Lambro', 'Longone Sabino', 'Brez', 'Cagliari', 'Province of Grosseto', 'Castelforte', 'Blera', 'Inverno e Monteleone', 'Bonorva', 'Monti Lepini', 'Rivisondoli', 'Ala di Stura', 'Crotone', 'Limigiano', 'Sernio', 'Murisengo', 'Albano Laziale', 'Ailano', 'Gagliano Aterno', 'Rossano Veneto', 'Santa Chiara', 'Collepasso', 'Ponte in Valtellina', 'Santa Maria Arabona', 'Province of Olbia-Tempio', 'San Nicola da Crissa', 'Santi Marcellino e Pietro al Laterano', 'Zeme, Lombardy', 'Trecchina', 'Botricello', 'Vernasca', 'Barrali', 'Raveo', 'Romentino', 'Nebrodi', 'Cernusco sul Naviglio', 'Castelnuovo Bormida', 'Serole', 'Bricherasio', 'San Martino Buon Albergo', 'Altivole', 'San Miniato', 'Berchidda', 'Atripalda', "Sant'Andrea in Via Flaminia", 'Keats-Shelley Memorial House', 'San Giorgio Canavese', "Anzola d'Ossola", 'Paluzza', 'Villanders', 'Turano Lodigiano', 'Piz Tea Fondada', 'Manocalzati', 'Condove', 'Geraci Siculo', 'Santo Stefano al Mare', 'Pescaglia', 'Feroleto Antico', 'Canale Villoresi', 'CityLife', 'Calendasco', 'Castel Gandolfo', "Sant'Arsenio", 'Cerro al Lambro', 'Castellammare del Golfo', 'Ortelle', 'Civitavecchia railway station', 'Castellana Grotte', 'Castrocaro Terme e Terra del Sole', 'San Pellegrino Terme', 'Follonica Airfield', "Sant'Andrea al Quirinale", 'Camisano Vicentino', 'Trana', 'Province of Imperia', 'Porto Valtravaglia', 'Pizzoli', 'Triora', 'Termini Imerese', 'Torrazzo of Cremona', 'Casal di Principe', 'Massa Fermana', 'Santa Maria Coghinas', 'Primaluna', 'Vietri sul Mare', 'Consiglio di Rumo', 'Feldthurns', 'Pula', 'Piano di Sorrento', 'Province of Agrigento', 'Aliminusa', 'Monteu da Po', 'Bornasco', 'Pettino', 'Sondalo', 'Vimodrone', 'Porta Pinciana', 'Villa del Conte', 'Alessano', 'Casale Litta', 'Santo Stefano di Sessanio', 'Gallipoli, Apulia', 'Stezzano', 'Ridracoli', 'Marsico Nuovo', 'Marliana', 'Gazzola', 'Mercato San Severino', 'Piedicolle', 'Montereale Valcellina', 'Azzate', 'Gallio, Veneto', 'Barzana', 'Castello Tesino', 'Beinasco', 'Canazei', 'Piovene Rocchette', 'Castelluccio Inferiore', 'European University Institute', 'Mariano del Friuli', 'Rosignano Airfield', 'Fiesole Cathedral', 'Pieve Ligure', 'Ruscio', 'Roccasicura', 'Chiesina Uzzanese', 'Blessagno', 'Copparo', 'Elice', 'Trivolzio', 'Pimonte', 'Amaro, Friuli', 'Uggiate-Trevano', 'Palmanova', 'Carosino', 'University of Foggia', 'Scala, Campania', 'San Vincenzo La Costa', 'Pieve Torina', 'Naviglio Grande', 'Ostia', 'Inverigo', "Sant'Ambrogio di Torino", 'Forlì del Sannio', 'Zoppola', 'Roseto degli Abruzzi', 'Cannara', 'Nicolosi', 'Caldes', 'Roccalbegna', 'Boscoreale', 'Suni, Sardinia', 'Vercana', 'Padule', 'Molazzana', 'Biella San Paolo railway station', 'Livorno', 'Brienza', 'Calvenzano', 'Siapiccia', 'Sangano', 'Pontedera Airport', 'Rodano', 'Valleve', 'Verrone', 'Voghera', 'Rocca San Giovanni', 'Missaglia', 'San Salvatore di Fitalia', 'Montichiari', 'Rovigo railway station', "Urago d'Oglio", 'Rivanazzano Terme', "Albaredo d'Adige", 'Pennapiedimonte', 'Atella, Basilicata', 'Pognano', 'Foglizzo', 'Romano Canavese', 'Lavello', 'Tenno, Trentino', "Sant'Agata del Bianco", 'Vestreno', 'Trepalle', "San Franceso d'Assisi Airport", 'Borghetto Lodigiano', 'Villaputzu', 'Cavatore', 'Monticello Brianza', 'Palù', 'Strambino', 'Punta La Marmora', 'Lumezzane', 'Pietraferrazzana', 'Castelfranco Emilia', 'Casavatore', 'Moncalvo', 'Petina, Campania', 'Quittengo', 'Melito di Napoli', 'Solignano', 'Filignano', 'Ratschings', 'Lardaro', 'Cassano delle Murge', 'Conca dei Marini', 'Milo', 'Lettomanoppello', 'Alà dei Sardi', 'Fiesco', 'Lavis', 'Stadio Selvapiana', 'Cimone', 'Pamparato', 'Perloz', 'Castiglion Fiorentino', 'Santa Cecilia in Trastevere', 'Schiara', 'Forni di Sotto', 'Potenza Centrale railway station', 'Juventus Center', 'Front, Piedmont', 'Treppo Grande', 'Monte Leone', 'Brentino Belluno', 'Molochio', 'Cesi', 'Verbania', "Sant'Agata di Puglia", 'Chiusanico', 'The Johns Hopkins University SAIS Bologna Center', 'Fasano', "Castel Sant'Angelo, Lazio", 'Ussita', 'Piea', 'Calascio', 'Vallerotonda', 'Serravalle a Po', 'Loceri', 'Vergato', 'Palomonte', 'Roccamandolfi', 'Fiorano Canavese', 'Gampen Pass', 'Castelverde', 'Montescudo', 'Soncino', 'Monacilioni', 'Agira', 'Coriano', 'Sirone', "Vezza d'Oglio", 'Drena', 'University of Messina', 'Santa Lucia di Piave', 'Priola', 'Quadri', 'Sandrigo', 'Crispiano', 'Osio Sotto', 'Vejano', 'Peglio, Lombardy', 'Palazzetto dello Sport', 'Montebelluna', 'Ischitella', 'Vignanello', 'Acquaviva delle Fonti', 'Voghiera', 'Marsaglia', 'Bibiana, Piedmont', 'Castana, Lombardy', 'Claut', 'Ghedi', 'Valvestino', "Salerno Costa d'Amalfi Airport", 'Sarntal', 'Fenegrò', 'Torreano', 'University of Cagliari', 'Prazzo', 'Monte Toc', 'Scanzano Jonico', 'Urbisaglia', 'Rocca di Papa', 'Roncobello', 'Rocca di Neto', 'Italy', "Borgo d'Ale", 'Intragna, Piedmont', 'Pescosolido', 'San Cono', 'Sacro Cuore di Gesù a Castro Pretorio', 'Province of Naples', "Aci Sant'Antonio", 'San Nazzaro Val Cavargna', 'Valle Agricola', 'Biandrate', "Sant'Ivo alla Sapienza", 'Osimo', 'Palma Campania', 'Montegallo', 'Redona', 'Brumano', 'Succivo', 'Santo Spirito in Sassia', 'Serravalle Langhe', 'Ardea, Lazio', 'Pons Aemilius', 'Cassano Irpino', 'Tiarno di Sopra', 'Romano di Lombardia', 'Laives', 'Gaglietole', 'Fluminimaggiore', 'Sanremo', 'Cheremule', 'Prato Carnico', "Barbera d'Alba DOC", 'Civezzano', 'Treia', 'Badiali', 'Pannarano', 'Monteferrante', 'Rocca Bernardo Airfield', 'Sinopoli', 'Cotignola', 'Treviso', 'Merlara', 'Riardo', 'Sennori', 'Caere', 'Mornico al Serio', 'Livo, Lombardy', 'Rosta', 'Arguello', 'Brunnenburg', 'Civitavecchia Ferry Terminal', 'Cremia', 'Borzonasca', 'San Giovanni Lipioni', 'Rocca Priora', 'Villafranca Piemonte', 'Province of Genoa', 'Pescosansonesco', 'Pozzaglia Sabina', 'Cadelbosco di Sopra', 'Lama Mocogno', 'Fucine Lake', 'Calceranica al Lago', 'Nughedu Santa Vittoria', 'Civitella in Val di Chiana', 'Prarostino', 'Aci Castello', 'Montecatini', 'Mossa', 'Serravalle di Chienti', 'Brindisi Airport', 'Province of Treviso', 'Castelvenere', 'Sarca', 'Bova', 'Ostra, Marche', 'Trecenta', 'Prunetto', 'Tollegno', 'Trapani', 'Piz Costainas', 'Altavilla Milicia', 'Camporotondo di Fiastrone', 'Province of Bari', 'Cosio Valtellino', 'Carpasio', 'Morbello', 'Primavalle', 'Dimaro', 'Monte Rinaldo', 'Venaria Reale', 'San Lorenzo, Calabria', 'San Felice Circeo', 'Brivio', 'Battaglia Terme', 'Ribera, Agrigento', "L'Aquila Preturo Airport", "San Pier d'Isonzo", 'Montecchia di Crosara', 'Traversella', 'Nichelino', 'Benevento', 'Mezzegra', 'Ottobiano', 'Pezzolo Valle Uzzone', 'Valeggio sul Mincio', 'Sorano', 'Masserano', 'San Cesareo', 'Castelgomberto', 'Casarano', 'Villa Poma', 'Villar Focchiardo', 'Santa Cristina', 'Germignaga', 'Church of the Holy Spirit', 'Castel Capuano', 'Rivarone', 'Lignana', 'Torrevecchia Pia', 'Balestrino', 'Norcia', 'San Cristoforo sul Naviglio', 'Synagogue of Casale Monferrato', 'Basilica of Santa Maria degli Angeli', 'Busano', 'Isola Bella', 'Torriana', 'Polcenigo', 'Tuglie', 'Province of Arezzo', 'Bracigliano', 'San Colombano Certénoli', 'Liternum', 'Gran Paradiso National Park', 'Nosate', 'Paderno del Grappa', 'Orte railway station', 'Motta Baluffi', 'Polytechnic University of Bari', 'Trentinara', 'Province of Modena', 'Magasa', 'Lequio Berria', 'University of Naples Federico II', 'Silius', 'Praiano', 'Castronovo di Sicilia', 'Madignano', 'Saluzzo', 'Lequile', 'Fiera di Primiero', 'Angelica vestis', 'Buggerru', 'Magliano Romano', 'San Giovanni al Natisone', 'Certosa di San Martino', 'Ittireddu', 'Minerbe', 'Mühlbach', 'Bomporto', 'Randazzo', 'Pacentro', 'Gorgoglione', 'Castellero', 'Villafranca di Forlì', 'Polizzi Generosa', 'Milazzo Airfield', 'Carbonera', 'Appignano', 'Malesco', 'Monte Ramaceto', 'Tortorella', 'Camponogara', 'Bisaccia', 'Ponte Buggianese', 'Monte Romano', 'Fornelli', 'Pertica Bassa', 'Valpelline, Aosta Valley', 'Agrigento', 'Vergiate', 'Veii', 'Gargallo', 'Giuliano di Roma', 'Solbiate Olona', "Sant'Agata di Militello", 'Oplontis', 'Villa Opicina', "Sant'Atanasio a Via Tiburtina", 'Piz Lad', 'Laganadi', 'Veddasca', 'Gibellina', 'Fiumefreddo Bruzio', 'Accona Desert', 'Castelpizzuto', 'Avezzano', "Albano Sant'Alessandro", 'Antholzer Bach', 'Vignate', 'Sanzeno', 'Carasco', 'Caresana, Piedmont', 'Santu Lussurgiu', 'Casarsa della Delizia', 'Ponte di Piave', 'Renate', 'Dairago', "Santa Maria dell'Anima", 'Cambiano', 'Frosinone', 'Caivano', 'Fossa, Abruzzo', 'Cerami', 'Lucinasco', 'Affi', 'Caltavuturo', 'Varedo', 'San Gregorio Magno', 'Dronero', 'San Giuliano di Puglia', 'San Michele Maggiore, Pavia', 'Monte San Savino', 'Rodero', 'Introbio', 'Corana', 'Cuneo railway station', 'Monte Cridola', 'Donnici', 'Mompeo', 'Dernice', 'Regia', 'San Teodoro, Sicily', 'San Giorgio su Legnano', 'Selci', 'Mesero', 'Vermezzo', 'Leivi', 'Cognola', 'Rotondi', 'Ranica', 'Livorno Ferraris', 'Tortora', 'Calasetta', 'Polinago', 'Brugine', 'San Cipirello', 'Nurallao', 'Vibo Valentia', 'Lugnacco', 'Helorus', 'Francavilla Fontana', 'Vitulano', 'Andezeno', 'Cairo Montenotte', 'Codognè', 'Dongo, Lombardy', 'Minucciano', 'Staiti', 'Pratola Peligna', 'Avellino', 'Montecalvo Irpino', 'Salerno', 'Scurelle', 'Valbrembo', 'Martinsicuro', 'Ronco Scrivia', 'Tursi', 'Castagnole delle Lanze', 'Bono', 'Genuri', 'Battoni', 'San Martino Canavese', 'Vernate, Lombardy', 'Larino', 'Mount Paesaggio', 'Ottana', 'Gandosso', 'Menfi', 'Vigonza', 'Temple of the Olympian Zeus, Agrigento', 'Barete', 'Loro Ciuffenna', 'Vallecorsa', 'University of Reggio Calabria', 'Milis', 'San Casciano dei Bagni', 'Pietrafitta', 'Selinunte', 'Venarotta', 'Camogli', 'Ronco Briantino', 'Baldissero Canavese', 'Morgongiori', 'Province of Barletta-Andria-Trani', 'Mezzocorona', 'Lenta', 'Pollino', 'Viganò', 'San Mauro Pascoli', 'Calcata', 'Bordolano', 'Lenna', 'Briga Alta', 'Cavriana', 'Netro, Piedmont', 'Moggio', 'Pomarico', 'Caselle Landi', 'Luino', 'Genzano di Lucania', 'Moasca', "Sant'Urbano", 'Terricciola', 'Bugnara', 'Verzuolo', 'Certaldo', 'Cappella Paolina', 'Maglie', 'Spotorno', 'Fabbriche di Vallico', 'Parghelia', 'Miazzina', 'Rome Observatory', 'Pellegrino Parmense', 'Teatro degli Arcimboldi', 'Sassuolo', 'Bieno', 'South Tyrol', 'Palombaro', 'Province of Palermo', 'Massiola', 'Ocre', 'Medicina', 'Belpasso', 'Piandimeleto', 'Monasterolo di Savigliano', 'Langhirano', 'Cividate Camuno', 'Pian Camuno', 'San Ferdinando', 'Spagna', 'Cunico', 'Seravezza', 'Salgareda', "Motta Sant'Anastasia", 'Virgilio, Lombardy', 'Moro River', 'Erbè', 'Ospedale della Pietà', 'San Pietro di Caridà', 'Montescaglioso', 'Sillano', 'Pieve Vergonte', 'Santa Lucia del Mela', 'Sordevolo', 'Capraia e Limite', 'Pizzo di Madéi', 'San Bernardino Verbano', 'Runkelstein Castle', 'Ventimiglia di Sicilia', 'San Gregorio da Sassola', 'Muravera', 'Villalba, Sicily', 'Brusasco', 'San Martino Siccomario', "Buttigliera d'Asti", 'San Giorgio in Bosco', 'Giussano', 'Vignola', 'San Giovanni in Galdo', 'Tolve', 'Sovico', 'Postalesio', 'Cima dello Stagn', 'Moniga del Garda', 'Pellezzano', 'Pointe de Drône', 'Caresanablot', 'Borgaro Torinese', 'Tresivio', 'San Salvo', "Sant'Anna di Stazzema", 'Anguillara Sabazia', 'San Mauro di Saline', 'Castello della Magione', 'Osio Sopra', 'Biandronno', 'Campoli del Monte Taburno', 'Aiello del Friuli', 'Cocquio-Trevisago', 'Oldenico', 'Torre Pellice', 'Pago Veiano', 'Poggiridenti', 'Casaprota', 'Pietragalla', 'San Pancrazio', 'Cadorago', 'Torno, Lombardy', 'Villafranca in Lunigiana', 'Montelapiano', 'Montelabbate', 'Deutschnofen', 'Sass Rigais', 'Viggiano', 'Sorbo San Basile', 'Noicattaro', 'Breganze', 'Coredo', 'Merì', 'Kastelruth', 'Stregna', 'San Donato Milanese', 'Alessandria', 'Nepi', 'Cilento and Vallo di Diano National Park', 'Garzigliana', 'Recetto', "Penna Sant'Andrea", 'Province of La Spezia', 'Cogliate', 'Auditore', 'Bocenago', 'Palanzano', 'Militello in Val di Catania', 'Pollica', 'San Lorenzo in Panisperna', "Sant'Angelo Lomellina", 'Samo, Calabria', 'Lombardore', 'San Bevignate', 'Villa del Bosco', 'Col de Clapier', 'Scoppito', 'Valperga', 'Proserpio', 'Caloveto', 'Aniene', "Villanova d'Asti", 'Torre Annunziata', 'Terzigno', 'Budrio', 'Campello sul Clitunno', 'Vallo di Diano', 'Palau, Sardinia', 'Campobello di Licata', 'Antrodoco', 'Spigno Saturnia', 'Quarona', 'Positano', 'Mandello Vitta', 'Lu, Piedmont', 'Merlino', "Sant'Antonio da Padova in Via Tuscolana", 'Pietrapertosa', 'Bassano del Grappa', "Monteroni d'Arbia", 'Piovà Massaia', 'Mezzomerico', 'San Francesco di Paola', 'San Gregorio', 'Gornate-Olona', 'Campi Salentina', 'Zimella', 'La Civiltà Cattolica', 'Borgetto', 'Verderio Inferiore', 'Sospirolo', 'Viareggio', 'Grotte di Castro', 'Medea, Friuli-Venezia Giulia', 'Piedicavallo', 'Presezzo', 'Fonzaso', 'Allein', "Trezzo sull'Adda", 'Noventa Padovana', 'Torino di Sangro', 'Mottalciata', 'Codevigo', 'Anacapri', "Montopoli in Val d'Arno", 'Dragoni', "Sant'Agnese in Agone", 'Marcetelli', 'Sacra di San Michele', 'Province of Livorno', 'Piz Glüschaint', 'Amelia Cathedral', 'Monteviale', 'Frascati', 'San Quirino', 'Germagnano', 'Serina', 'Nibbiola', 'Locorotondo', 'Latina', "San Quirico d'Orcia", 'Vintl', 'Orta di Atella', 'Lonate Ceppino', 'Montegalda', 'Magliano', 'Pescarolo ed Uniti', 'Calavino', 'Gavoi', 'Bolzano Novarese', 'Roncoferraro', 'Mondolfo', 'Mongiana', 'Oniferi', 'Fiesse', 'Villa Santo Stefano', 'Castel Madama', 'Vajont', 'Conza della Campania', 'Remanzacco', 'San Casciano in Val di Pesa', 'Badia Tedalda', 'Alviano', 'Cagli', 'Barbania', 'San Romano in Garfagnana', 'Valdisotto', 'Padova Airport', "Santo Stefano d'Aveto", 'Levate', 'Trezzone', 'Ricaldone', 'Cadoneghe', "Cornate d'Adda", 'Bogogno', 'Raiano', 'San Zeno di Montagna', 'Arba, Friuli-Venezia Giulia', 'Marano di Valpolicella', 'Mirandola', 'Aurigo', 'Malfa', 'Moncucco Torinese', 'Boscotrecase', 'Casapesenna', 'Fossano', 'Castellar Guidobono', 'Pomaretto', 'Assisi Cathedral', 'Ricengo', 'Vervio', 'Cargeghe', 'Zumsteinspitze', 'Muro Leccese', 'Guglionesi', 'Lecce nei Marsi', 'Pfunderer Bach', 'Province of Medio Campidano', 'Pignataro Maggiore', 'Povegliano, Veneto', "Costigliole d'Asti", 'Oratino', 'Carano', 'Montappone', 'Roccantica', 'Soglio, Piedmont', 'Nughedu San Nicolò', 'Valfurva', 'Carisolo', 'Castelsardo', 'Laurein', 'Spello', 'Lequio Tanaro', 'Casola Valsenio', 'Ietas', 'Sermide', 'Mezzago', 'Vajont Dam', 'Montalbano Jonico', 'Castel San Pietro Romano', "Chies d'Alpago", 'Cardè', 'Como', 'Grottaminarda', 'Santa Margherita di Belice', 'Massa di Somma', "Piz da l'Acqua", 'Giaveno', 'Arquata Scrivia', 'Anfo', 'Lamezia Terme', 'Palazzo Madama e Casaforte degli Acaja', "Paderno d'Adda", 'Gambugliano', 'Laurino', 'San Lucido', 'San Giorgio Scarampi', 'Ferrara di Monte Baldo', 'Massimeno', 'Vibonati', 'Santa Maria Maggiore, Piedmont', 'Crespadoro', 'Cartigliano', 'Alcara li Fusi', 'Aiello Calabro', 'Manfredonia', 'Brissago-Valtravaglia', 'Bisuschio', 'Racconigi', 'Suessula', 'Camaiore', 'Domanico', 'Favara', 'Borgarello', 'Casalmorano', 'Fontanellato', "Gerre de' Caprioli", 'Brenner', 'San Pietro in Amantea', 'Bisacquino', "Villanova d'Albenga", 'Borgo Tossignano', 'Racalmuto', 'Mezzolombardo', 'Pianfei', 'Tornimparte', 'Corno di Rosazzo', 'Santa Lucia Stroncone Astronomical Observatory', 'Pizzoferrato', 'Condofuri', 'Sezzadio', 'Torricella, Apulia', 'Paderno Ponchielli', 'Oliveri', 'Palazzo delle Esposizioni', 'Bariano', 'Lamporo', 'Castelnuovo Magra', 'Ovaro', 'Camerano', 'Buonabitacolo', 'Guardea', 'Pallanzeno', 'Giacciano con Baruchella', 'Striano', 'Rizziconi', 'Visconti Castle', 'Lucca', 'Matajur', 'Candiana', 'Campobasso railway station', 'Lonigo', 'Cirò, Calabria', 'Rombiolo', 'Cascia', 'Polonghera', 'Colonnella', 'Castel Nuovo', 'Terzo, Piedmont', 'Pocenia', 'Suello', 'Rock Drawings in Valcamonica', 'Bella, Basilicata', 'Waidbruck', 'Sernaglia della Battaglia', 'Cerreto Grue', 'Casaleggio Novara', 'Decimomannu Air Base', 'Coazze', 'Città della Pieve', 'Montecarotto', "Tofo Sant'Eleuterio", 'Villanova Marchesana', 'Province of Trieste', 'Carfizzi', 'Hingham Naval Ammunition Depot Annex', 'San Giuseppe Jato', 'Valle di Cadore', 'Salemi', 'Spessa', 'Zogno', 'Casalbore', 'Nomaglio', 'Trivigliano', 'Petronà', 'Favria', 'Bruzolo', 'Rogno', 'San Mauro Castelverde', 'Calvizzano', 'Sperone', 'Gerano', 'Locate Varesino', 'Terlizzi', 'Alessandria della Rocca', 'Plöcken Pass', 'Rapolano Terme', 'Tiriolo', 'Province of Sondrio', 'Champorcher', 'Morengo', 'Ploaghe', 'Bogliasco', 'Grimacco', 'Martirano', "Farra d'Alpago", 'Cerretto Langhe', 'Lercara Friddi', 'Castri di Lecce', 'Mango, Piedmont', 'Sonico', 'International Centre for Theoretical Physics', 'Pisciotta', 'Balmuccia', 'Poggio San Vicino', 'Dresano', 'Pogliano Milanese', 'Hospital of Santa Maria Nuova', 'Calangianus', 'Petritoli', 'Piz Timun', 'Misinto', 'Talla', 'Veglie', 'Novafeltria', 'Valle San Giovanni', 'Savelli, Calabria', 'Caglio', 'Cinto Euganeo', 'Morano Calabro', 'Mount Epomeo', 'Claviere', 'Ficarolo', 'Pero', 'Rivarolo Mantovano', 'Verzino', 'Rosello', 'Propata', "San Pietro in Ciel d'Oro", 'Museo Nazionale della Magna Grecia', 'Montalto Uffugo', 'Busseto', 'Porto Viro', 'Province of Macerata', 'Roseto Capo Spulico', 'Montecatini Terme', 'Ostiglia', 'Pratica Di Mare Airport', 'Casalecchio di Reno', 'Porcari', 'Torri in Sabina', 'Cavalese', 'Massafra', 'Monastier di Treviso', 'Chiusa di Pesio', 'San Zenone al Lambro', 'Castelnuovo di Conza', 'Massa Centro railway station', 'University of Rome La Sapienza', 'Pignone', 'Chions', 'Valsinni', 'Bolognano', 'San Giovanni Teatino', 'Pallagorio', 'Cannobio', 'Contursi Terme', 'Borgo San Dalmazzo', 'Configni', 'Galluzzo', 'San Cesario sul Panaro', 'Martone', 'Vignale Monferrato', 'Melito di Porto Salvo', 'Arch of Augustus, Rome', 'Villa Santa Lucia degli Abruzzi', 'Orzivecchi', 'Ormelle', 'Sarmato', 'Bettolle', 'Fara Vicentino', 'Rotonda', 'Ollastra', 'San Costantino Albanese', 'Cissone', 'Institute for the Works of Religion', 'Stadio Bruno Recchioni', 'Cravanzana', 'Castelletto Monferrato', 'Paderna', 'Castenedolo', 'Parolise', 'Arnasco', 'Perledo', 'Faggeto Lario', 'University of Venice', 'Porto Ceresio', 'Santa Ninfa', 'Valmorea', 'Praso', 'Thiene', 'Vertova', 'Po Valley', 'Tufino', 'Tossicia', 'Terlago', 'Floridia', 'Canzo', 'Centola', 'Santa Giusta', 'Ravanusa', 'Molina Aterno', 'Robbiate', 'Bosisio Parini', 'Loro Piceno', 'Oricola', 'Malvicino', 'Sorianello', 'Toirano Caves', 'Serracapriola', 'Torella del Sannio', 'Marina di Campo Airport', 'Alpignano', 'Albettone', 'Soriano nel Cimino', 'Forlì', 'Robilante', 'Paludi', 'Acerenza', 'Camairago', "Castronuovo di Sant'Andrea", 'Castelvetro Piacentino', 'Cervino, Campania', 'Siena-Ampugnano Airport', 'Acireale Cathedral', 'Rovereto railway station', 'University of Verona', 'Camerota', 'Pattada', 'Pizzighettone', 'Canal San Bovo', 'Urzulei', 'Vercelli', 'Sequals', 'Clastidium', 'Acquappesa', 'Guardialfiera', 'Cassago Brianza', 'Nuxis', 'Santa Maria di Loreto, Rome', 'Boca, Novara', 'Caerano di San Marco', 'Pedesina', 'Concarena', 'Montello', 'Serramezzana', 'Arese', 'Cadeo', 'Schlanders', 'Nove', 'Santa Maria Nuova, Marche', 'Cesano Boscone', 'Pognana Lario', "Giardino dell'Iris", 'Villalvernia', 'Vulcano Buono', 'Valbrevenna', 'Cordenons', 'Mezzani', 'Badia Calavena', 'Nole', 'Platì', 'Loreto, Marche', 'Tusculum', 'Ampugnano Airport', 'Gairo, Sardinia', 'Ortler Alps', 'Aldein', 'Mariano Comense', 'Vas', 'Boara Pisani', 'Cardedu', 'Italian Republic', 'Sarsina', 'ZEN', 'Piazzatorre', 'Surbo', 'Comun Nuovo', 'Agropoli', 'Vedano al Lambro', 'San Pietro di Feletto', 'Pietradefusi', 'Bleggio Superiore', 'Casciana Terme', 'German submarine U-124', 'Gaiola', 'Porlezza', 'Nervi', 'Montesano sulla Marcellana', 'Ceggia', 'Ferriere', 'Calci', 'Messina', 'Cicala', 'Scordia Airfield', 'Piraino', "Castell'Azzara", 'Cinigiano', 'Cameri', 'Correzzana', 'Prignano Cilento', 'Monti della Tolfa', 'Gallavresi Palace', 'San Pietro Apostolo', 'Cusino', 'Santa Maria in Traspontina', 'Malvagna', 'Limido Comasco', 'Scandriglia', 'Casalbuono', 'Colere', 'Revò', 'Cervignano del Friuli', 'Ambrosian chant', 'Lamporecchio', 'Salsamenteria Tomba', "Francavilla d'Ete", 'Pontirolo Nuovo', 'Prignano sulla Secchia', 'Bivongi', 'Moncalieri', 'Bomba, Abruzzo', 'Montagnareale', 'Calvera', 'Villata', 'Schisò Castle', 'Andali', "Cerano d'Intelvi", 'Zevio', 'Niccoline Chapel', 'Casaletto Ceredano', 'Anzi, Italy', 'Colle Santa Lucia', 'Roveredo di Guà', 'Acquafondata', 'Vidracco', 'Schwarzhorn', 'Ravenna', 'Collemancio', 'Casteldelfino', 'Sustinente', 'Dolegna del Collio', 'Pointe Allobrogia', 'Pollina', 'Civita di Bagnoregio', 'Crova', 'Torre Santa Susanna', 'Bagnoli', 'Colle di Tora', 'Fort Bard', 'Vinzaglio', 'Cessaniti', 'Gallinaro', 'Colonna, Lazio', 'Caianello', 'Manduria Airfield', 'Stadio Pio XII', 'Jelsi', 'San Giusto Canavese', 'San Biagio Saracinisco', "Torre d'Isola", 'Carpanzano', 'Altofonte', 'Argelato', 'Bellaria – Igea Marina', 'Stilfs', 'San Pietro Avellana', 'Bossico', 'San Nicola Manfredi', 'Usini', 'Port of Livorno', 'Teatro Verdi', 'Reggio Calabria', 'Bronte, Sicily', 'Montepaone', 'Villa Santa Maria', 'Azeglio', 'John Cabot University', 'Lanuvio', 'Gerace', 'Nogaredo', 'Magliano Alfieri', 'Galliavola', 'Sostegno', 'Civitacampomarano', 'Marostica', 'Naples Eastern University', "Castelnovo ne' Monti", 'Schignano', 'Villa Estense', 'Vignolo', 'Castrocielo', 'La Thuile, Aosta Valley', 'Ozzero', 'Pescasseroli', 'Terenten', 'Sacred Mount Calvary of Domodossola', 'Lauria', 'Campofiorito', 'Osidda', 'Izano', 'Cividale del Friuli', 'Montecalvo Versiggia', 'La Verna', 'Paularo', 'Pont-Saint-Martin, Aosta Valley', 'Quincinetto', 'Prata Camportaccio', 'Rimasco', 'Orzinuovi', 'Brignano-Frascata', 'Candia Lomellina', 'Spormaggiore', 'Valle dei Templi', "Basilica dell'Osservanza", 'Gerosa', 'Montauro', 'Furore', 'Andalo', 'Aliano', 'Neviano degli Arduini', 'Collegio di Spagna', 'Marche', 'Chisone', 'Rodigo', 'Campagnano di Roma', 'Matino', 'Varsi', 'Cavallerleone', 'Mongrando', 'Ghisalba', 'Vermiglio', 'Valdengo', 'Bletterbach', 'Vaglio Basilicata', 'M. A. Grottag Airport', 'Torre Velasca', 'Ziano di Fiemme', 'Gignod', 'Altavilla Silentina', 'Allai, Sardinia', 'Jesolo', 'Montebuono', 'Cibiana Pass', 'Triei', 'Celenza sul Trigno', 'Caravonica', 'Franzensfeste', 'Pezzaze', 'Casalvolone', 'Mammola', 'Montottone', 'Bolbeno', 'Comiziano', 'LUISS University of Rome', 'Civico Orto Botanico ""Ulisse Aldrovandi""', "Rocca d'Arazzo", 'San Sperate', 'Vestone', 'Dolo River', 'Voltago Agordino', 'Province of Rieti', 'Castelliri', "Sant'Agata de' Goti", 'Tavernelle', 'Vallemaio', 'Florence American Cemetery and Memorial', 'Suelli', 'Bacchiglione', 'Barbara, Marche', 'Casandrino', 'Statonia', 'Casalbordino', 'San Bartolomeo al Mare', 'Barrea', 'Tiarno di Sotto', 'Canna, Calabria', 'Castello di Montalto', 'Santa Maria del Cedro', 'Cerro Tanaro', 'Santi Claudio e Andrea dei Borgognoni', 'Brembate di Sopra', 'Olivadi', 'Cogorno', 'Capriate San Gervasio', "Sant'Anselmo all'Aventino", 'Monte Poggiolo', 'Villa Collemandina', 'Saint-Rhémy-en-Bosses', 'Braone', 'Erula', 'Carignano', 'Altare della Patria', 'Camerata Picena', 'Monte Subasio', 'Poggio Moiano', 'Gaglianico', 'Eugenio Monti track', 'Asolo', 'Vallebona', 'Rotondella', 'Pulfero', 'Pedrengo', 'Campofelice di Fitalia', 'Sutera', 'Ferentillo', 'Arquata del Tronto', 'Giardini Naxos', 'Pieve Albignola', 'Narzole', 'Sirtori', 'Chiusavecchia', 'Biella', 'Francofonte', 'Salle', 'Foppolo', 'Monticelli Pavese', 'Pozzuolo', 'Seggiano', 'Stroppiana', 'Acquasanta Terme', 'Travo', 'Mercallo', 'Resia, Friuli', 'Cortiglione', 'Liscia', 'Subiaco', 'Montefalco', 'Nova Milanese', 'Solarolo Rainerio', 'Vodo di Cadore', 'Zeccone', 'Brentonico', 'Colle Sannita', 'Arquà Polesine', 'Valduggia', "Sant'Angelo all'Esca", 'San Martino Sannita', 'Pontifical University of St. Thomas Aquinas', 'Rose', 'Morsasco', 'Lorenzana', "Magliano de' Marsi", 'Bicinicco', 'Palestrina', 'Chiarano', 'Ligosullo', "Provaglio d'Iseo", 'Province of Varese', 'Bard, Aosta Valley', 'Alpe della Luna', 'Trescore Balneario', 'Palazzolo dello Stella', "San Canzian d'Isonzo", 'Roma Termini railway station', 'San Costantino Calabro', 'Castelnovo del Friuli', 'Polaveno', 'Salvitelle', 'Castelletto sopra Ticino', 'Grezzago', 'Castelguglielmo', 'Valmozzola', 'Great Synagogue of Florence', 'Ortygia', 'Collesano', 'San Frumenzio ai Prati Fiscali', 'Cortazzone', 'Sale San Giovanni', 'Norba', 'Santorso', 'Rapolla', 'Molinara', 'Schlern', 'Mezzanino', 'Lazio', 'Pocapaglia', 'Pizzoni', 'Vittorio Veneto', 'Caldiero', 'Ruviano', 'Vattaro', 'Cigognola', 'Pescolanciano', 'Duino-Aurisina', 'Santo Stefano Lodigiano', 'Brindisi railway station', 'Massello', 'San Vito dei Normanni', 'Grignano Polesine', 'Aieta', 'Taranta Peligna', 'Marcignago', 'Curino', 'Mamoiada', 'Mussolente', 'Santa Brigida, Lombardy', 'Roccamontepiano', 'Castelvetro di Modena', 'Bonate Sopra', 'Cossano Belbo', 'Vöran', 'Borgia, Calabria', 'Rocchetta Ligure', 'Cis', 'Trevi nel Lazio', "Villafranca d'Asti", 'Mondragone', 'Trevignano', 'Fino Mornasco', 'Buonvicino', 'Stimigliano', 'Campomorone', 'Bottanuco', 'Altissimo, Veneto', 'Le Roncole', 'Castelvecchio di Rocca Barbena', 'Barge', 'Santa Maria del Suffragio', 'Calcinate', 'Bitritto', 'Pontine Marshes', 'Calcinaia', 'Massimino', 'Province of Vicenza', 'Brienno', 'Abbateggio', 'Appignano del Tronto', 'Mori', 'Sale Marasino', 'Pila', 'Tricerro', 'Galatone', 'Giuggianello', 'Sondrio', 'French Academy in Rome', 'Pigge', 'Cossombrato', 'Montanaso Lombardo', 'Dovadola', 'Guidizzolo', 'Roccafiorita', 'Belforte Monferrato', 'La Cassa', 'Saracinesco', 'Cassaro', 'Uscio', 'Montebello Vicentino', 'Bussoleno', 'Luco dei Marsi', 'Montaldo Scarampi', 'Monte Altissimo', 'Scarnafigi', 'University of Padua', "Castagno d'Andrea", 'Sacro Convento', 'Montebruno', 'Sardinia', 'Igliano', 'Province of Frosinone', 'Zambrone', 'Angolo Terme', 'Valmadrera', 'Castel Rocchero', 'Trinity College, Rome Campus', "Castel d'Azzano", 'Laurito', 'Marnate', 'Vische', 'Sambuci', 'Forenza', 'Cavaria con Premezzo', 'Bovegno', 'San Martino Alfieri', 'Tauferer Ahrntal', 'Vallelunga Pratameno', 'Guidonia Airport', 'Neviano', 'Casasola, Italy', 'IUC Turin', 'Ospitaletto', 'Marcaria', 'Nervesa della Battaglia', 'Gagliano del Capo', 'Monte Vulture', 'Codigoro', 'Casagiove', 'Cetona', 'Ranco, Lombardy', 'Avise', 'Monterubbiano', 'Arpaia', 'Sommatino', 'Boroneddu', 'Castel del Monte, Abruzzo', 'Nemi ships', "Castell'Umberto", 'Numana', 'Sand in Taufers', 'Vinadio', 'Mallare', 'Anagnina', 'Lentiai', 'Licola, Italy', 'Province of Carbonia-Iglesias', 'Santa Emerenziana a Tor Fiorenza', 'Tre Cime di Lavaredo', 'Rovolon', 'Sessa Cilento', 'Orciano di Pesaro', 'Cersosimo', 'Casapinta', 'Sesto Campano', 'Albugnano', 'Montefortino', 'Buronzo', 'Raddusa', 'Villa Basilica', 'Cottanello', 'Caulonia', 'Orroli', 'Pelago', 'Meduna di Livenza', 'Polesella', 'Signa', 'Bolzano', 'Idro, Lombardy', 'Trepuzzi', 'Cogoleto', 'Fossato Serralta', 'Montieri', 'Lyskamm', 'Pignataro Interamna', 'Capovalle', "Granarolo dell'Emilia", 'Saponara', 'Palaia', 'Cavaglio-Spoccia', 'Rassina', 'Barile', 'Via Anelli Wall', 'Coreglia Antelminelli', 'Pornassio', 'Pavia di Udine', "Terno d'Isola", 'Castellammare di Stabia', 'Borgo San Lorenzo', 'Ruinas', 'Mombarcaro', 'Montemonaco', 'Recco', 'San Vito di Fagagna', 'Stella, Liguria', 'Amaroni', 'Pieve Fissiraga', 'Santo Stefano di Rogliano', 'Liveri', 'Accademia Italiana', 'Basiano', 'Santa Maria in Aracoeli', 'Sexten', 'Caronno Varesino', 'Preseglie', 'Coreglia Ligure', 'Moricone', 'Settimo Vittone', 'Pedavena', 'Tula, Sardinia', 'Isola dei Pescatori', 'Bernate Ticino', 'Roccabernarda', 'Cedegolo', 'Raccuja', 'Grassano', 'Ponte della Maddalena', 'Cecchina', 'Malonno', 'Melilli', 'Latium', 'Precenicco', 'Brenta group', 'Ronchis', 'Burgio', "Corte de' Cortesi con Cignone", 'Supersano', 'San Francesco a Ripa', 'Garda, Veneto', 'Velodromo Vigorelli', 'Magi Chapel', 'Montesarchio', 'Latina Nuclear Power Plant', 'Amblar', 'San Carlo ai Catinari', 'Testico', 'Montagano', 'Vallarsa', 'San Nicola Arcella', 'Badia', 'San Paolo alle Tre Fontane', 'Gardens of Sallust', 'Muscoline', 'Sellia Marina', 'Pradleves', 'Karneid', 'Crotone Airport', "Sant'Anastasia", "Sant'Oreste", 'Sermoneta', 'San Filippo del Mela', 'Bardineto', 'Canegrate', 'Salsomaggiore Terme', 'Rossa, Piedmont', 'Assisi', 'Caminata', 'Tambre', 'Foglianise', 'Mazzara Airfield', 'Carovigno', 'Naxos', 'Amantea', 'Sterpeto', 'Ombrene Airfield', 'Kaltern an der Weinstraße', 'Brusnengo', 'Cellino Attanasio', "Isola d'Asti", 'Robecchetto con Induno', 'Martiniana Po', 'Burago di Molgora', 'Monastero Bormida', 'Limosano', "Morro d'Alba", 'San Sebastiano', 'Col Ferret', 'Valgreghentino', 'Säben Abbey', 'University of Udine', 'Morigerati', 'Ponso', 'Pertosa', 'Canicattì', 'Basaluzzo', 'Chialamberto', 'Giffoni Valle Piana', 'Orio al Serio', 'Civitella Messer Raimondo', 'Ospitale di Cadore', 'Ronago', 'Fregona', 'Canoscio', 'Frontone', 'Cinquefrondi', 'Neirone', 'Lenola', 'Montegioco', 'San Pietro in Cerro', 'Campello Alto', 'Caselette', "Sant'Agata li Battiati", 'Massanzago', 'Province of Venice', 'Synagogue of Trieste', 'Schio', 'Padergnone', 'Tropea Castle', 'San Francesco al Campo', 'Carbonate, Lombardy', 'Recoaro Terme', 'Busnago', 'Laas', 'Lenano', 'Sagliano Micca', 'Formia', 'Trabia', 'Nord-Ovest', 'Gemonian stairs', 'Sagron Mis', 'Rusellae', 'Orto Botanico del Mediterraneo', 'Nola', 'Santi Nereo e Achilleo', 'Formia-Gaeta railway station', 'Monte Vidon Corrado', 'Dubino', 'San Giovanni Rotondo', 'Parodi Ligure', 'Ruoti', 'Transport in Vatican City', 'Orsogna', "Sant'Angelo di Brolo", 'Sessame', 'Aviatico', 'Plodio', 'Sciara, Sicily', 'Aspromonte', 'Galatro', 'Seren del Grappa', 'Bollate', 'Monchio delle Corti', 'Monte San Pietrangeli', 'San Paolo, Pistoia', 'Forni di Sopra', 'Galluccio', 'Casier', 'Bucchianico', 'Uri, Sardinia', 'Province of Salerno', 'Tavazzano con Villavesco', 'Pedemonte', 'Hochjoch', 'Urbe', 'Nebbiuno', 'Campodipietra', 'Olang', 'Acquacanina', 'Sala Biellese', 'Ivano-Fracena', 'Ponderano', 'Mount Capanne', 'Lugnano in Teverina', 'Bocchigliero', 'Barbana, Italy', 'Veneto', 'Isili', 'Villnöß', 'Secugnago', 'Bellona, Campania', 'Pimentel, Sardinia', 'Lastebasse', 'Ortonovo', 'Piane di Collevecchio', 'Monasterolo Casotto', 'Savignano sul Rubicone', 'Offida', 'Ollomont', 'Anguillara Veneta', 'Staffarda', 'Priocca', 'Frondarola', 'Pontinia', 'Carona, Lombardy', 'Tromello', 'Ocosce', 'Basilica of Maxentius', 'Mölten', 'Carpegna', 'Grumo Appula', 'Piubega', 'Parabita', 'Posta, Lazio', 'Fountain of the Rosello', 'Briaglia', 'Belvedere di Spinello', 'Bigarello', 'Rosciano', 'Tuscany', 'Calanna', 'Chioggia', 'Bonifati', 'Civita Castellana', 'Guazzora', 'Lomazzo', 'Diamante', 'Vercurago', 'Ciminà', 'Maschito', 'Ripabottoni', 'Bene Lario', "Sant'Arpino", 'Cimbergo', 'Casacanditella', 'Tesero', 'Boretto', 'Roma Trastevere railway station', 'Santa Lucia di Serino', 'Cutrofiano', 'Villa Vicentina', 'Pietramontecorvino', 'Cantiano', 'Smarano', 'Castelveccana', 'Stazzona', 'Summonte', 'Chivasso', 'Province of Lecce', 'Segonzano', 'Lazzate', 'Villa Carcina', 'Calascibetta', 'Pantelleria Airport', 'Rionero in Vulture', 'Monte San Giovanni in Sabina', 'Milena, Sicily', 'Ubiale Clanezzo', 'Bannio Anzino', 'Marano Marchesato', 'Castel Gabbiano', 'Ronchi Valsugana', 'Grône', 'Fagagna', 'Pergine Valdarno', 'San Gavino Monreale', 'Portopalo di Capo Passero', 'Trevi, Umbria', 'Portogruaro', 'Borbona', 'Mioglia', 'Gattinara', 'Sessano del Molise', 'Cordignano', 'San Zenone al Po', 'Cesana Brianza', 'Aosta Valley', 'Genga, Marche', "L'Osservatore Romano", 'Ogliastro Cilento', 'San Giorgio a Liri', 'Aulla', 'Civitella Alfedena', 'Orero', 'Venzone', 'Bagnolo Piemonte', 'Ameno, Italy', "Monteleone d'Orvieto", "Rocca Sant'Angelo", 'Province of Piacenza', 'Specchia', 'Villanterio', 'Cologna Veneta', 'Scuola Normale Superiore di Pisa', 'Polverara', 'Campiglione-Fenile', 'Altino', 'Viddalba', 'Spinete', "San Michele all'Adige", 'San Pietro Clarenza', 'Valbondione', 'Thiesi', 'Momperone', 'Monte Polizzo', 'Mojo Alcantara', 'Caprarola', 'Prad am Stilfser Joch', 'Cabiate', 'San Leo Bastia', 'Monopoli', 'Acera', 'Pozzonovo', 'Cursolo-Orasso', 'Formigine', 'Cavedine', 'Formigara', 'Melicuccà', 'San Raffaele Cimena', 'Frontino', 'Darfo Boario Terme', 'San Gimignano', 'Seis am Schlern', 'Giba, Sardinia', 'Paesana', 'Annicco', 'Gonnesa', 'Carvico', 'University of Sannio', 'Villamaina', 'Pedivigliano', 'University of Parma', 'Castelfidardo', 'Portoferraio', 'Radicofani', 'Cene', 'Bobbio', 'Miseno', 'Monte Colombo', 'Pettenasco', 'Piscinas', 'Urbana', 'Farini, Emilia-Romagna', 'Agrate Brianza', 'Cicagna', 'Mola di Bari', 'Campo San Martino', 'Celle Ligure', 'Granze', 'Ostia Antica', 'Sabbia', 'San Martino di Finita', 'Corbara', 'Labro', 'Novoli', 'Campochiaro', 'Pareto, Piedmont', 'San Polo dei Cavalieri', 'Tricase', "Sant'Angelo a Cupolo", 'Lascari', 'Codevilla', 'Torre di Mosto', 'Camugnano', 'Arsago Seprio', 'Bellosguardo', 'Fossalta di Portogruaro', 'Trarego Viggiona', 'Corvino San Quirico', 'Cervara di Roma', 'Frossasco', 'Ostra Vetere', 'Nabrežina', 'Carrosio', 'Occimiano', 'Taglio di Po', 'Valledoria', 'Mezzojuso', 'Valsassina', 'Legnano', 'Schilpario', 'Monteverde, Campania', "Fontana di Piazza d'Aracoeli", 'Villaromagnano', 'Scandale', 'Arcetri', 'Parlasco', 'Campolongo Maggiore', 'San Giovanni in Fiore', 'Macerata Feltria', 'Montagna in Valtellina', 'Agnone Cilento', 'Aglientu', 'Piz Scerscen', 'Province of Rome', 'Roccadaspide', 'Province of Pescara', 'Luzzi', 'Valverde, Sicily', 'Roccasparvera', 'Zavattarello', 'Palestro', 'Cerete', 'Mazzin', 'Port of Naples', 'Dugenta', 'Monterado', 'Roasio', 'Serravalle Scrivia', 'Lombardy', 'Castelluccio Valmaggiore', 'Andretta', 'Benestare', 'Scandolara Ravara', 'Collepepe', 'Albanella', 'Buccino', 'Venezia Mestre railway station', 'Vauda Canavese', 'Ponzone', 'Basciano', 'Vulci', 'Breia', 'Pagazzano', 'Canaro, Rovigo', 'Dolceacqua', 'Grandola ed Uniti', 'Mesoraca', 'Frasso Sabino', 'Staffarda Abbey', 'Ospedaletti', 'Porta Borsari', 'Secinaro', 'Collegio Superiore di Bologna', 'Marta, Lazio', 'Ravello', 'Salandra', 'Isola Sacra', 'Montedinove', 'Castelnuovo', 'Civita', 'Sava, Apulia', 'Zollino', 'San Costanzo', 'Livigno', 'Pollutri', 'Fermo', 'Austis', 'Settimo San Pietro', 'Vanzaghello', 'Cerea', 'Travacò Siccomario', 'Borgomanero', 'Rosate', 'Scorzè', 'Via della Conciliazione', 'Piz Sella', 'Castel Baronia', 'Concei', 'Cotronei', 'Zungri', 'Veleso', 'Sala Comacina', 'Cerrina Monferrato', 'Bisegna', 'Lake Garda', 'Malaspina Castle', 'Craco', 'Villamassargia', 'Tortoli Airport', 'Sala Consilina', "Fara Gera d'Adda", 'Castegnero', 'Scurcola Marsicana', 'Cappella Maggiore', 'Erbusco', 'Almenno San Bartolomeo', 'Trezzo Tinella', 'Villa San Secondo', 'Pavona', 'Proceno', 'Ceresara', 'Noragugume', 'Villanova del Sillaro', 'Accadia', 'Valtorta', 'San Fedele', 'Trentino', 'Onore', 'Zovencedo', 'Gridone', 'Mombello di Torino', 'Province of Pesaro and Urbino', 'Sozzago', 'Boltiere', 'Nave San Rocco', "Rocca de' Baldi", 'Roncegno Terme', 'Palace of Portici', 'Santi Cosma e Damiano, Lazio', 'St. Lorenzen', 'Castiglione Chiavarese', 'Chiaverano', 'Salizzole', 'Grontardo', 'Perlo', 'PalaScapriano', 'Custonaci', 'Algund', 'Varmo', 'Cesiomaggiore', 'Mocònesi', 'Cornedo Vicentino', 'Cerignale', 'Cusano Milanino', 'Frabosa Sottana', 'Solto Collina', 'Caprese Michelangelo', 'Cinte Tesino', 'Rignano Flaminio', 'Rocca Canavese', 'Mogliano', 'PalaPanini', 'Compiano', 'Lesegno', 'Teana', 'Banzi', 'Arluno', 'Roccagiovine', 'Soragna', 'Timmelsjoch', "Villa d'Adda", 'Albonese', 'Comabbio', 'Cristo Redentore', 'Lecco', 'Montalenghe', 'Vedano Olona', 'Corrido, Lombardy', 'Calvello', 'Catenanuova', 'Torbole Casaglia', 'Cianciana', 'Caprauna', 'Samarate', "Boffalora d'Adda", 'Beura-Cardezza', 'Marcianise Airfield', 'Varallo Pombia', 'San Massimo', 'Castel del Rio', 'Isca sullo Ionio', 'Rocchetta Nervina', 'Fratta Polesine', 'Roccasecca', 'Colfelice', 'Villastanza', 'Dovera', 'Santi Giovanni e Paolo, Rome', 'Castellino del Biferno', 'Cavaglià', 'Ramacca', 'Collagna', 'San Paolo Converso', 'Colturano', 'San Clemente Abbey', 'Venice', 'Cassinelle', 'Piovera', 'Pralboino', 'Rovasenda', 'Bosco Marengo', 'Muggia', 'Vitorchiano', 'Trivento', 'Momo, Piedmont', 'Bisignano', 'Tortorici', 'Torrente Comunelli Airfield', 'Guardavalle', 'Fai della Paganella', 'Tête de Ferret', 'Lomaso', 'Rosignano Monferrato', 'Militello Rosmarino', 'Resana', 'Treviso Airport', 'Piteglio', 'Monte Porzio', 'Column of Marcus Aurelius', 'Novedrate', 'Angera', 'Oleggio Castello', 'Petrignano', 'Montecorvino Pugliano', 'Montorso Vicentino', 'Santhià', 'Stagno Lombardo', 'Ascoli Satriano', 'Casanova Lerrone', 'Bibbiano', 'Magisano', 'Collobiano', 'Pontecagnano Airport', 'Sapri', 'Sali Vercellese', 'Padula', 'Lavagno', 'Mombaroccio', "Bastida de' Dossi", 'Gandino', 'Dueville', "Capo d'Orlando", "Isola Sant'Antonio", 'Mozzagrogna', 'Dogna', 'Campodimele', 'Farnese, Lazio', 'Cimitile', 'San Cristoforo', 'Songavazzo', 'Nibionno', 'Emarèse', 'Francavilla di Sicilia', 'Mozzecane', 'San Severo', 'Bollengo', 'Valgrana', 'Viale', 'Ameglia', 'Colletorto', 'Castello Normanno-Svevo', 'Santa Maria della Concezione dei Cappuccini', 'Canelli', 'Rocchetta Tanaro', 'Airuno', 'Asuni', "Orto Botanico dell'Università di Sassari", 'Pianiga', 'Rionero Sannitico', 'Santa Maria Antiqua', 'Novate Milanese', 'Berbenno', 'Cutigliano', 'Maniace', 'Petrizzi', 'Aidone', 'Tarcento', 'San Siro di Struppa', 'Bagnolo del Salento', 'Tramutola', 'Bubbiano', 'Canosa Sannita', 'Travagliato', "Sant'Ivo dei Bretoni", 'Rocchetta Palafea', 'Aosta Cathedral', 'Muccia', 'Bellinzago Novarese', 'Gussago', 'Comerio', 'Castello Ursino', 'Piazza del Duomo, Milan', 'Superga', 'Castellania, Piedmont', 'Zanè', 'Stadio dei Marmi', 'Arce', 'Umbertide', "Torre de' Busi", 'Villa Agnedo', 'Borgo', 'Auronzo di Cadore', 'Pomaro Monferrato', 'Caltagirone', "Santa Vittoria d'Alba", 'Montecarlo', "Montechiaro d'Asti", 'Amato', 'Olmo Gentile', 'Monte Santa Maria Tiberina', 'Sale delle Langhe', 'Agrate Conturbia', 'San Donà di Piave', 'Valenza', 'Porte', 'Fiume Veneto', 'Squillace', 'Marano Principato', 'Baceno', 'Pompu', 'Antelao', 'Sanfront', 'Bosaro', 'Mercenasco', 'Ortignano Raggiolo', 'Misilmeri', 'Parete', "Sant'Onofrio, Calabria", 'Roghudi', 'Cusago', 'San Paolo Cervo', 'San Pietro Vernotico', 'San Gervasio Bresciano', 'Castel Vittorio', 'Palena, Abruzzo', 'Vetralla', 'Montelanico', 'Cigliano', 'Villa Santina', 'Bagnoli di Sopra', 'Gambarana', 'Fusignano', "Farra d'Isonzo", 'Cervesina', 'Modolo', 'Sirolo', "San Giovanni d'Asso", 'Gioiosa Marea', 'Tavagnacco', 'Corvara, South Tyrol', 'Jonadi', 'Natz-Schabs', 'Andrian', 'Massey Memorial', 'Cavedago', 'Pratiglione', 'Spinadesco', 'Fiora River', 'Colle Caruno', 'Torresina', 'Bagolino', 'Rocca Santo Stefano', 'Biancavilla', 'Villa Celiera', 'San Pietro in Lama', 'Forte dei Marmi', 'Colledimacine', 'Cervere', 'Cernobbio', 'Zumpano', 'Sammichele di Bari', 'Reinbach', 'Taufers im Münstertal', 'Lesmo', 'Badolato', 'Poggiomarino', 'Piagge', 'Non Valley', 'Besate', 'Church of San Francesco', 'Adrara San Martino', 'Grotta del Cavallone', 'Montemitro', 'Soverato', 'Bastida Pancarana', 'Aquara', 'Alatri', 'Lauriano', 'Motta San Giovanni', 'Klausen, South Tyrol', 'Costa di Rovigo', "Pino d'Asti", 'Cesi, Terni', 'Santa Domenica Talao', 'Casale Cremasco-Vidolasco', 'Fiamignano', 'San Zeno Naviglio', 'Borgo San Siro', 'Roccastrada', "Campione d'Italia", 'Corio, Piedmont', 'Simbario', 'Tanagro', 'Pertengo', 'Simeri Crichi', 'Lustra', 'Corna Imagna', 'Licata', 'Villa Ripa', 'Theodulhorn', 'Vilminore di Scalve', 'San Michele in Foro', 'Bistagno', 'Sover', 'Dormelletto', 'Miradolo Terme', 'San Marco dei Cavoti', 'Fiuminata', 'Gran Sasso e Monti della Laga National Park', 'Cervo, Liguria', 'Alessandria railway station', 'Gaglioli', 'Vicari', 'Carrodano', 'Algua', 'Santi Domenico e Sisto', 'Hintere Schwärze', 'Casarza Ligure', 'Edolo', 'Cornuda', 'Province of Foggia', 'San Felice a Cancello', 'Esperia', 'Berzano di San Pietro', "Quinzano d'Oglio", 'Jerzu', 'Prato Sesia', 'Mele', 'Carpineto Romano', 'Roverchiara', 'Casaletto di Sopra', 'Croceverde', 'Eboli', 'Frinco', 'Furci', 'Miranda', 'Campolongo Tapogliano', 'Belvedere Langhe', 'Esino Lario', 'Bozzolo', 'Arpino', 'San Dorligo della Valle', 'Monte Civetta', 'Quingentole', 'Campomarino', 'Gambettola', 'San Cipriano Po', 'Roccaverano', 'Palazzo dei Cartelloni', 'Spresiano', 'Cavaglietto', 'Colleretto Castelnuovo', 'Province of Parma', 'Gergei', 'Laurenzana', 'Pergusa', 'Gressan', 'Cherasco Synagogue', 'Guardia Perticara', 'Monterosso Calabro', 'Valda', 'Montefalcone Appennino', 'Vistrorio', 'Castelletto Uzzone', 'Pfitscher Bach', 'Bovezzo', 'Sestri Levante', 'Monte Generoso', 'Graffignano', 'Valgrisenche', 'Calitri', 'Reggio Emilia', 'Villa Popolo', 'Melazzo', 'Averara', 'Cafasse', 'Cogollo del Cengio', 'Masio', "Baldichieri d'Asti", 'Mompantero', 'Gorizia', 'Macchia Valfortore', 'Parco della Resistenza in Forlì', 'Paese', 'Bazzano', 'San Donato di Ninea', 'Church of Santi Michele e Magno', 'Spadola', 'Roisan', 'Potenza Picena', 'San Piero a Sieve', 'Pomposa Abbey', 'Poggio Berni', 'Nardò', 'Lama dei Peligni', 'Roascio', 'Alzano Lombardo', 'Naples International Airport', 'Carro', 'San Giorgio delle Pertiche', 'Petrelle', 'Careri', 'Longiano', 'Maleo', 'Sortino', 'Gorizia Centrale railway station', 'Sirignano', 'Calliano, Piedmont', 'Birori', "Trajan's Column", 'Santa Pudenziana', 'Castellafiume', 'Verona Boscomantico Airport', 'Monte di Procida', 'Rosolini', 'Castelcivita Caves', 'Jubilee Church', 'Gualdo, Marche', 'Chiusa di San Michele', 'Reana del Rojale', 'Amalfi Coast', 'Malagnino', 'Schenna', 'Spirano', 'Toro', 'Malgrate', 'Nuoro', 'Basiglio', 'Villa Piovene', "Sant'Angelo Le Fratte", 'Bagnolo Mella', 'Santa Caterina', 'Aielli', 'Bosnasco', 'Casalpusterlengo', 'San Fior', 'Zerbo', 'Montirone', 'Signalkuppe', 'Ludus Magnus', 'Pontelatone', 'Soleto', 'Casaluce', 'Santo Stefano in Aspromonte', 'Rocca Sinibalda', 'Fiorano al Serio', 'Andora', 'Pasturana', 'Roccabruna', 'Tortoreto', 'Offanengo', 'San Sisto Vecchio', 'Francavilla Bisio', 'Maropati', 'Sangineto', 'Murello', 'Mezzano', 'Vertemate con Minoprio', 'Spezzano Albanese', 'Pollone', 'Gropparello', 'Viganella', 'Villarbasse', 'Castelnovo di Sotto', 'Dorio', 'Olgiate Comasco', 'Limatola', 'Cismon del Grappa', 'Polish Cemetery at Monte Cassino', 'Villamiroglio', 'Trentola-Ducenta', 'Santa Maria in Cosmedin', 'Rivalta di Torino', "Vaprio d'Adda", 'Colle delle Finestre', 'Manoppello', 'Rimini', 'Isola di Capo Rizzuto', 'Durazzano', 'Morgantina', 'Rieti', 'Cologno al Serio', 'Argegno', 'Lipari', 'Castro dei Volsci', 'Diano San Pietro', 'Gioiosa Ionica', 'Alvignano', 'Theological University of Northern Italy - Turin Campus', 'Mortegliano', 'Carassai', 'Tocco da Casauria', 'Scafati', 'Santa Caterina dei Funari', 'Corni di Canzo', 'Pudiano', 'Albaretto della Torre', 'Cerreto Sannita', 'Noto', 'Monvalle', 'Villar San Costanzo', 'Tiers', 'Mugnano del Cardinale', 'Fagnano Olona', 'Villesse', 'Alzano Scrivia', 'San Vito dei Normanni Air Station', 'Trecase', 'Salussola', 'Norma, Lazio', 'Punta Valgrande', 'Fara Filiorum Petri', 'Roccaforzata', 'Caiolo', 'Gangi, Sicily', 'Castel di Tora', 'Bassano Bresciano', 'Sansepolcro', 'Catignano', 'Rocca la Meja', 'Sala Regia', 'Vasanello', 'Bormida, Liguria', 'Abruzzo', 'Gorgo al Monticano', 'Marzio', 'Capri, Campania', 'Orsomarso', 'Montegrotto Terme', 'Clivio', 'Mongiuffi Melia', 'Elmas', 'Lago Cecita', 'Tezze sul Brenta', 'Gardena Pass', 'Maniago', 'Bultei', 'Transpadane Republic', 'Stadio Giorgio Ascarelli', 'Polverigi', 'Troia, Apulia', 'New York University', "Civitella d'Agliano", 'Monforte San Giorgio', 'Orta Nova', 'Vizzolo Predabissi', 'Racale', 'Capaccio', "Sant'Albano Stura", 'Monteodorisio', 'San Lorenzo', 'Nogarole Rocca', 'Calvatone', 'Pastena Caves', 'Bovino', 'Latisana', 'Pino Torinese', 'Caderzone', 'Laigueglia', 'Quinto Vicentino', 'Civitella di Romagna', 'St. John International University', 'Brembio', 'Monte Urano', 'Montemarano', 'Mangone', 'Rometta', 'Abbadia Lariana', 'Vigano San Martino', 'Longarone', 'Atessa', 'Metaponto', 'Bortigiadas', 'Poggio Mirteto', 'Satriano di Lucania', 'Montefalcione', 'Faver', 'Reano', 'San Pietro Mosezzo', 'Tramonti, Campania', 'Casignana', 'Pasturo', 'Santa Maria La Nova', 'Copertino', 'Monte Cavallo', "Casole d'Elsa", 'Torricella Sicura', 'Montecastello', "Lanzo d'Intelvi", 'Trognano', 'Taibon Agordino', 'Breme', 'Cefalà Diana', 'Poli', 'Pietra Marazzi', 'Polignano a Mare', 'Lodrino, Lombardy', 'Taceno', 'Dogliani', 'Province of Udine', 'Ischia di Castro', 'Gemmano', 'Asti railway station', 'Ferrara Cathedral', 'Melizzano', 'Polpenazze del Garda', 'Cohasset', "Sant'Arcangelo", "Vaprio d'Agogna", 'San Paolo', 'Ponzano di Fermo', 'Roncofreddo', 'Grisignano di Zocco', 'Palazzago', 'Church of Domine Quo Vadis', 'Monte Sissone', 'Fogliano Redipuglia', 'Carife', 'Castellana Sicula', 'Dro', 'Saepinum', 'Flaibano', 'Gabbioneta-Binanuova', 'Letojanni', 'Contarelli Chapel', 'Castorano', 'Oppeano', 'Crescentino', 'Vottignasco', 'Taio', 'University of Palermo', 'Zerba', 'Castro, Lombardy', 'Perdaxius', 'Vervò', 'Ayas', 'Levone', 'Ronciglione', 'Galleria Alberto Sordi', 'Palo del Colle', 'Amorosi', 'Drizzona', 'Lanzo Torinese', 'Belfiore', 'Pergola', 'Buddusò', 'Biblioteca Riccardiana', 'Adige', 'Tinnura', 'Cassina Valsassina', 'Castelpoto', 'Isasca', 'Tessennano', 'Montelparo', "Sant'Angelo a Scala", 'Doberdò del Lago', 'Campagnatico', 'Cerano', "San Martino d'Agri", 'Gaby', 'PalaMangano', 'Lerma', 'Lavinium', 'Cantù', 'San Giorgio del Sannio', 'Castel Focognano', 'Cesana San Sicario', 'Villamarzana', 'Cumignano sul Naviglio', 'Castel Guelfo di Bologna', 'Vialfrè', 'Caprarica di Lecce', 'Fiano Romano', 'Terni railway station', 'Castiglione Messer Marino', 'Cerreto Laziale', "Sant'Orsola Terme", 'Bonea', 'Limina', 'Brusimpiano', 'Heraclea Minoa', 'Bessude', 'Basilica of San Frediano', 'Diano Castello', 'Fabbrico', 'Alano di Piave', "Santa Margherita d'Adige", 'Monte San Giacomo', 'Collesalvetti', 'Morimondo', 'Province of Chieti', 'Pietra di Bismantova', 'Clavesana', 'Iesi Airfield', 'San Gregorio Matese', 'Cursi', 'Rozzano', 'Cremolino', 'Leaning Tower of Pisa', 'Ruffano', 'Grinzane Cavour', 'Accademia Nazionale di Santa Cecilia', 'Chianocco', 'Torgnon', 'Cornovecchio', 'Giuncugnano', 'Villa Comunale', 'Pavia Cathedral', 'Casto', 'Montevago', 'Niscemi', "Castiglione d'Intelvi", 'Pallare', 'Cantello', 'Ussana', 'Irsina', 'Paterno, Basilicata', 'Santa Maria Maggiore, Gazzo Veronese', 'Pragelato', 'San Pietro in Guarano', 'Lorenzago di Cadore', 'Albano Vercellese', 'Moriondo Torinese', 'Camerana', 'Piz Cancian', 'Baiso', 'University of Vicenza', 'Roccavaldina', 'San Michele Mondovì', 'Piramide', 'Travesio', 'Cologne, Lombardy', 'Gonzaga, Lombardy', 'Cervasca', 'Santa Croce Camerina', 'Castelnuovo Berardenga', 'San Torpete', 'Pieve Santo Stefano', 'Nocciano', 'Tramatza', 'Vibo Marina', 'Villanuova sul Clisi', 'Turbigo', 'Bussolengo', 'Mombello Monferrato', 'Gamalero', 'Novi Ligure', 'Moliterno', 'Carentino', 'Teano', 'Trecasali', 'San Prisco', 'Pray, Piedmont', 'Cesena Cathedral', 'Orgiano', 'Arcene', 'Cassolnovo', 'Borgoratto Alessandrino', 'Baranzate', 'Capurso', 'Villette, Piedmont', 'Olmo al Brembo', "Sant'Angelo d'Alife", 'Orune', 'Città di Castello', 'Trofarello', 'Formazza', 'Duchy of Milan', 'Rivello', 'San Lorenzo in Damaso', 'Cadrezzate', 'Ossago Lodigiano', 'Petit Grépillon', 'Certosa di Pavia', 'Tovo San Giacomo', 'American University of Rome', 'Palombara Sabina', 'Spinazzola', 'Romagnano al Monte', "Calvi dell'Umbria", 'Valverde, Lombardy', 'Ceprano', 'San Lupo', 'Moimacco', 'Toceno', 'Brebbia', 'Santo Stefano di Cadore', 'Villa di Tirano', 'Casal Velino', 'Palagano', 'Guamaggiore', 'Siziano', 'Mongrassano', 'Moggio Udinese', 'Boccadifalco Airport', 'Fontanella', 'Stelvio Pass', 'San Simplicio, Olbia', 'Palagianello', 'Montazzoli', 'Vita-Salute San Raffaele University', 'Teulada', 'Penna San Giovanni', 'Issogne', 'Aisone', 'Ramponio Verna', 'Castelnuovo Nigra', 'Bione', 'Montefranco', 'Ceva', 'Prato Centrale railway station', 'Ispica', 'Castel Volturno Airfield', 'San Leucio del Sannio', 'Panettieri', 'Quart', 'Quaregna', 'Pietramelara', 'Pedace', 'Trontano', 'Ulassai', 'Monteiasi', 'Trento', 'La Caletta', 'Castione Andevenno', 'Solza', 'Pieranica', 'Tresnuraghes', 'Cenischia', 'Premosello-Chiovenda', 'Piacenza Airport', 'Paupisi', 'Pombia', 'Osmate', 'Gesturi', 'Inarzo', 'Rotzo', 'Sacro Monte di Oropa', 'Belmonte in Sabina', 'Castelnuovo del Garda', 'Trebisacce', 'Vaccarizzo Albanese', 'Camerata Nuova', 'Melzo', 'Piansano', 'Dolcè', 'Colli del Tronto', 'Bolzano Vicentino', 'Rescaldina', 'Albinea', 'Padenghe sul Garda', 'Villa Santa Lucia', 'Iseo, Lombardy', 'Torre di Santa Maria', 'Arienzo', 'Caronno Pertusella', 'Bruno, Piedmont', 'Ittiri', 'Santa Croce di Magliano', 'San Biagio della Cima', 'Prettau', 'Castellar, Piedmont', 'Regalbuto', 'Piobesi Torinese', 'Preore', 'San Gregorio VII', "Romans d'Isonzo", 'Nonio', 'Manghen Pass', 'Cinto Caomaggiore', 'Tergu', 'Rezzoaglio', 'Zungoli', 'Sinagra, Sicily', 'Partanna', 'Centro Direzionale', 'Pino sulla Sponda del Lago Maggiore', 'Bari Sardo', 'Pregnana Milanese', 'Malo', 'PalaCalafiore', 'Buonconvento', 'Varazze', 'Venerable English College, Rome', 'Riva presso Chieri', 'Poggiorsini', 'Piedimonte Matese', "Castello dell'Acqua", 'Greggio', 'Ospedaletto, Trentino', 'Vesuvius Airfield', 'Kiens', 'Ficulle', 'Province of Pisa', 'Esporlatu', 'Dent du Géant', 'Clauzetto', 'Filetto', 'Pigra', 'Virle Piemonte', 'Laconi', 'Senago', 'Tripi', 'Resuttano', 'Sacro Cuore di Maria', 'Chiusi della Verna', 'San Giovanni Fuoricivitas', 'Giarre', 'Foggia', "Cervignano d'Adda", 'Soprana', 'Olevano sul Tusciano', 'Pieve di Teco', 'Podenzana', 'Province of Vibo Valentia', 'Terrassa Padovana', 'Lajatico', 'Grosotto', 'Vanzone con San Carlo', 'San Marco', 'Jerago con Orago', 'Chiavano', 'Petruro Irpino', 'Montalto delle Marche', 'Residenza Universitaria Torrescalla', 'Aveto Natural Regional Park', 'Collepietro', 'Fiesso Umbertiano', 'Castello di Annone', 'Lagosanto', 'Gennargentu', 'Lizzano in Belvedere', 'Kreuzbergpass', 'Girasole', 'Roccaraso', 'Castel San Giorgio', 'San Pietro Viminario', 'Morsano al Tagliamento', 'Domaso', 'Castelletto Cervo', 'Rovescala', "Sant'Omero", 'Forchia', 'Ottiglio', 'Cuvio', 'Ponsacco', 'Catacombs of San Gennaro', 'Rofrano', 'Polla', 'Lucca Sicula', 'Tornolo', 'Scherbadung', 'Castelnovo Bariano', 'Giano Vetusto', 'Little St Bernard Pass', 'Stadio Tupparello', 'Tenuta di San Liberato, Bracciano', 'Bulciago', 'Armungia', 'Cortanze', 'Selvazzano Dentro', 'Monrupino', 'Capriati a Volturno', 'Leffe', 'La Salle', 'Fontanelle', 'Casperia', 'Acquanegra Cremonese', 'Casina', 'Misterbianco', 'Bedizzole', 'Bari Cathedral', 'Placanica', 'Soave', 'Cipressa', 'Nibbiano', 'Collebeato', 'Vigo Rendena', 'Polytechnic University of Milan', 'Visone', 'San Martino in Rio', 'Lessona', 'Roccagorga', 'Gaggiano', 'Nerviano', 'Premariacco', 'Serra Pedace', 'IULM University of Milan', 'Valdina', 'Brindisi', 'Verolanuova', 'Sacro Monte di Belmonte', 'San Martino in Pensilis', 'Settime', 'Valdieri', 'Secret Museum, Naples', 'Borutta', 'Savogna', 'University Iuav of Venice', 'Santa Maria a Vico', 'Sicily', 'Castello-Molina di Fiemme', 'Lenno', 'Belmonte Calabro', 'Strangolagalli', 'Curno', 'Teatro del Silenzio', 'Montesano Salentino', 'Province of Nuoro', 'Spigno Monferrato', 'Mel', "Santa Cristina d'Aspromonte", 'Formigliana', 'Domusnovas', 'Ponteranica', 'San Benedetto Val di Sambro', 'Roseto Valfortore', 'Calosso', 'Merate', 'Campofilone', 'Marano Equo', 'Breguzzo', 'Domegge di Cadore', 'Latronico', 'Scisciano', 'Cerro al Volturno', 'Seulo', 'Villanova del Battista', 'Orgosolo', 'Quarrata', 'Carpenedolo', 'Campagna Lupia', 'University of Eastern Piedmont', 'Col Agnel', 'Alice Superiore', 'Mormanno', 'Barcelona Landing Ground', 'Spoleto', 'Vadena', 'Trezzano Rosa', 'Drezzo', 'Dorzano', 'Castelmauro', 'Paduli', 'San Nicola la Strada', 'Montemarciano', 'Framura', 'Campolongo sul Brenta', 'Piane Crati', 'Province of Vercelli', "Cascinette d'Ivrea", 'Romagna', 'Valtournenche', 'Oltre il Colle', 'San Nicolò Gerrei', 'Corzano', 'Aidomaggiore', 'Lozza', 'Lusciano', "Rio nell'Elba", 'Chieuti', 'Trieste', 'Bottidda', "Moio de' Calvi", 'Montella', 'Ispra', 'Olgiate Olona', 'Frascarolo', 'Trigolo', 'Boissano', "Tovo di Sant'Agata", 'Moretta', 'Otricoli', 'Badesi', 'Zenson di Piave', 'Carnago', "Lurago d'Erba", 'Borgo San Giovanni', 'Croviana', 'Mals', 'Montemurlo', 'Piegaro', 'Messina Airfield', 'Lacco Ameno', 'Cuglieri', 'San Giacomo Filippo', 'Prevalle', 'Osasio', 'Mirto', 'Albidona', 'Ferrera Erbognone', 'Trieste – Friuli Venezia Giulia Airport', 'Cuggiono', 'Castel di Ieri', 'Stadio del Trampolino', 'Pesaro', 'Mandello del Lario', 'Cazzago Brabbia', 'Porpetto', 'Montignoso', 'Airasca', 'Proveis', 'San Giovanni Valdarno railway station', 'Cornetto', 'Setzu', 'Napoli Campi Flegrei railway station', 'Francavilla al Mare', 'Monteroduni', 'Rufina', 'Bojano', 'Orria', 'Magliano Vetere', 'Pieve di Soligo', 'Isola del Piano', 'San Siro, Como', 'Verghereto', 'San Mauro Cilento', 'Province of Siena', 'Gorga', 'Scopa, Piedmont', 'Petrella Salto', 'Mongardino', 'Galtellì', 'Varenna', 'Mura', 'San Giuseppe Vesuviano', 'Hotel Florida Milan', 'Cordovado', 'Rocca San Casciano', 'Ortueri', 'Aosta railway station', 'Meleti', 'Stadio Olimpico del Nuoto', 'Storo', 'Pessinetto', "Sant'Anna Arresi", 'Cercenasco', 'Rocca di Cave', 'Moiola', 'Baia e Latina', 'Bracciano', 'Ragogna', 'Castelvetrano', 'Casalmaggiore', 'Presicce', "Castello d'Agogna", 'Piagiolino Airfield', 'Calco', 'Santa Maria in Portico, Naples', 'Vieste', 'Cimego', 'Biblioteca Casanatense', 'Luras', 'Starhotels Anderson', 'Barzio', "Sant'Anna School of Advanced Studies", 'Serrone', 'Santi Luca e Martina', 'Bucine', 'St. Leonhard in Passeier', 'Gattico', 'Santa Sofia', 'Gubbio', 'Modena Autodrome', 'Bianzano', 'Pella, Piedmont', 'Alessandria del Carretto', 'Casaletto Vaprio', 'Muzzano, Piedmont', 'Serle', 'Masainas', 'Gaiba', 'Turners Beach, Tasmania', 'Flero', 'Treppo Carnico', 'Acquaro', 'Fanes-Sennes-Prags Nature Park', 'Valle Soprana', 'Cerchiara di Calabria', 'Rima San Giuseppe', 'Roppolo', 'Valstrona', 'Priero', 'Turin International Airport', 'Bronzolo', 'Sansicario Torinese', 'Mollia', 'Scillato', 'San Giacomo', 'Stroppo', 'Villaperuccio', 'Cervia', 'Isera', 'Lecce Airfield', 'Mirabella Imbaccari', 'Zanica', 'Mandas', 'Villa Verde', 'Quarna Sotto', 'Pianopoli', 'Segrate', 'Arnara', 'Gianico', 'Fossato di Vico', 'La Spezia Centrale railway station', 'Montefalcone nel Sannio', 'Sulmona', 'Cecina, Tuscany', 'Perugia railway station', 'Villafranca Tirrena', 'Bergeggi', 'San Sossio Baronia', 'National Etruscan Museum', 'Giugliano in Campania', 'Vignone', 'Province of Pavia', 'Bosa Cathedral', 'Arignano', 'Ururi', 'Ragalna', 'Arcidosso', 'Corchiano', 'Santa Maria in Domnica', 'Valmala, Italy', 'Rosora', 'Odalengo Piccolo', 'Vestenanova', 'Piz Argient', 'Latera', 'Pastorano', 'Pozzuolo Martesana', 'Cascate del Serio', 'Morciano di Romagna', 'Noventa Vicentina', 'Ponte Olivo Airfield', 'Bolsena', 'Molveno', 'Guagnano', 'Pomarance', 'Riola Sardo', 'Carmagnola', 'Gardone Riviera', 'Camporgiano', 'Roman Forum', "San Francesco d'Assisi ad Acilia", 'Pierle', 'Tavigliano', 'San Marcello, Marche', 'Chiopris-Viscone', 'San Mango sul Calore', 'Celle di San Vito', 'Oval Lingotto', 'Stio', 'Marciano della Chiana', 'San Mango Piemonte', 'Derovere', 'Gambatesa', 'Orio Canavese', 'Prepotto', 'Ferrara Synagogue', 'Pieve di Bono', 'Falcone–Borsellino Airport', 'San Giovanni Lupatoto', 'Petralia Sottana', 'Virgo interferometer', 'Caprino Bergamasco', 'Lasnigo', 'Viano', "San Martino dall'Argine", 'Leonardo da Vinci–Fiumicino Airport', 'Vallio Terme', 'Fontana delle Api', 'Busso', 'Pontebba', 'Varapodio', 'Campana', "Sant'Andrea delle Fratte", 'Province of Cagliari', 'Province of Latina', 'Noepoli', 'Cividate al Piano', 'Alfano', 'Chianche', 'Sinio', 'Seniga', 'Castelsardo Cathedral', 'Lanzada', "Sant'Ilario d'Enza", 'Province of Belluno', "Sant'Andrea Frius", 'Santa Maria di Canepanova', 'Borgo Pace', 'Santa Maria Capua Vetere', 'Biassono', 'Lampedusa e Linosa', 'Oliveto Lucano', 'Celle di Bulgheria', 'Cuneo International Airport', 'Barchi, Marche', 'Sacro Monte di Crea', 'Province of Turin', 'Arsita', 'Albrunhorn', 'Miagliano', 'Camposampiero', 'Trecate', 'Malalbergo', 'San Sebastiano da Po', 'Rivergaro', 'Foggia ""Gino Lisa"" Airport', 'Dogliola', 'Venasca', 'Trino Vercellese', 'Tavarnelle Val di Pesa', 'Tione degli Abruzzi', 'University of Bologna', 'Borgo San Martino', 'Alpette', 'Ponzano Veneto', 'Palosco', 'Gorzegno', 'Saltara', 'Decimomannu Airport', "Ca' d'Andrea", 'University of Urbino', 'Castelnuovo di Ceva', 'Enrico Fermi Nuclear Power Plant', 'Castagneto Carducci', 'Alife, Campania', 'Rubano', 'Mendatica', 'Poggio Rusco', 'Robassomero', 'Catholic University of the Sacred Heart', 'Castiadas', 'Santa Susanna', 'Pavone Canavese', 'Kastelbell-Tschars', 'Castel Ritaldi', 'Alta Scuola Politecnica', 'Ponte, Campania', 'Montesegale', 'Salento, Campania', 'Lake Idro', 'Petrosino', 'Sarcedo', 'Cassina Rizzardi', 'Las Plassas', 'Cima di Cugn', 'Chiusi', 'Negrar', 'Aquileia', 'Pazzano', 'Vicoforte', 'Massalengo', 'Versa', 'Visso', 'Cisano sul Neva', 'Niederdorf', 'Casamarciano', 'Vaie', 'Santa Croce del Sannio', 'San Nicolò di Comelico', 'Bagnatica', 'Province of Pordenone', 'Ospedale Maggiore', 'Jôf di Montasio', "Sant'Eusanio Forconese", 'Tortolì Airport', 'San Pietro Mussolino', 'Cassiglio', 'Brossasco', 'Solonghello', 'Montelupone', 'Catania–Fontanarossa Airport', 'Calvagese della Riviera', 'Aqua Claudia', 'Province of Trapani', 'Candia Canavese', 'Verano Brianza', 'Vigasio', 'Vicovaro', 'Rocca Pia', 'Caraffa di Catanzaro', 'Roccavignale', 'Labici', "Castel d'Aiano", 'Pietracamela', 'Pioraco', 'Vergemoli', 'San Damiano Macra', 'Gambellara', 'Montebello della Battaglia', 'Bellinzago Lombardo', 'Velezzo Lomellina', 'Gironico', 'Cassacco', 'Buriasco', 'Borgo di Terzo', 'Gela', 'Lirio', 'Naval Air Station Sigonella', 'Nissoria', 'Montorfano', 'Agugliaro', 'Furkelpass', 'Castroregio', 'Province of Caserta', 'Parthenope University of Naples', 'Senise', 'Aradeo', "Monte Sant'Angelo", 'Bussi sul Tirino', 'Province of Benevento', 'Moresco', 'Danta di Cadore', 'Escalaplano', 'Pieve San Nicolò', 'Pramollo', 'Mondavio', 'Premolo', 'Sefro', 'Gravellona Toce', 'Robecco sul Naviglio', 'Scurzolengo', 'Calvi Risorta', 'Carbonara Scrivia', 'San Vito di Leguzzano', 'Turin', 'Gargnano', 'Bosco Chiesanuova', 'Usigni', 'Montemilone', 'Camagna Monferrato', 'Credera Rubbiano', 'Macello', 'Aprigliano', 'Canda', 'Bentivoglio, Emilia-Romagna', 'Carnic Alps', 'La Magdeleine', 'Alimena', 'Castrofilippo', 'San Mauro Forte', 'Delia, Sicily', 'Cremeno', 'Arquà Petrarca', 'Sorbolo', 'Tremezzo', 'Motta Montecorvino', 'Laviano', 'Protestant Cemetery, Rome', 'Cupramontana', 'Comitium', 'Cellere', 'Tisens', 'San Michele al Tagliamento', 'Arcore', 'Val della Torre', 'San Giovenale', 'Villanova Truschedu', 'Arzergrande', 'Tremestieri Etneo', 'San Severino Marche', 'Castelmassa', 'Orvinio', 'Lettere', 'Canischio', 'Limone Piemonte', 'Pizzo Tre Signori', 'Pogno', 'Province of Bergamo', 'Pezzana', 'Ponte Nomentano', 'Laureana Cilento', 'Colognola ai Colli', 'Castronno', 'Camposanto Monumentale', 'Bionaz', 'Sterparone Airfield', 'Monterotondo', 'Brescia Airport', 'Baunei', "Sant'Agata di Esaro", 'Trivero', 'Höhlensteintal', 'Portomaggiore', 'Fiastra', 'Halaesa', 'Girolamini', 'Camerino', 'University of Insubria, Como Campus', 'Agosta, Lazio', 'Pettoranello del Molise', 'Cuba, Palermo', 'Volturara Irpina', 'Badia Pavese', 'Lungavilla', 'Caprezzo', 'Arzachena', 'Savigno', 'Rognano', 'Castelcivita', 'Bugiano', 'Amatrice', 'Marzano Appio', 'Grazzano Badoglio', 'Costermano', 'Pettorano sul Gizio', 'Isolabona', 'Montegrino Valtravaglia', 'Villavallelonga', 'Romeno', "Sant'Angelo in Pescheria", 'Mantua', 'Piode', 'Montegiordano', 'Catania Centrale railway station', 'Limbiate', 'San Lorenzo in Campo', 'Gravellona Lomellina', 'Pancarana', 'Trasaghis', 'Ghilarza', 'Giffoni Sei Casali', 'Prelà', 'Bergamo Alps', 'Caldarola', 'Crozzon di Brenta', 'Gennargentu National Park', 'Castiglione del Genovesi', 'Tribogna', 'Collepino', 'Montacuto', 'Esine', 'Spriana', 'Bagno di Romagna', 'Link Campus University', 'Castelnuovo Calcea', 'Molina di Ledro', 'Perrero', 'Montenero Val Cocchiara', 'Rigolato', 'Cosio di Arroscia', 'International School for Advanced Studies', 'Bosentino', 'Capizzi', 'Castello Cabiaglio', 'Fagnano Alto', 'Capodacqua', 'Rabbi', 'Valentano', 'Capri', 'Carceri', 'Riano, Lazio', 'Forno Canavese', 'Cella Monte', 'Parona', 'Opi, Abruzzo', 'Mantova railway station', 'Celico', 'Roccabascerana', 'PalaBarbuto', 'Girifalco', 'Reino', 'Oristano', 'Lago, Calabria', 'Librizzi', 'Senna Lodigiana', 'Saluggia', 'Gioiella', 'Soiano del Lago', 'Pietra Ligure', 'Caprie', 'Morolo', 'Sicignano degli Alburni', 'Volongo', 'Malè', 'Traversetolo', 'Bene Vagienna', 'Montegridolfo', 'Galgagnano', 'Lusiana', 'Caldonazzo', "Sannazzaro de' Burgondi", 'Cison di Valmarino', 'Abbadia Cerreto', 'Crosia', 'Orto Botanico Comunale di Lucca', 'Toscolano-Maderno', 'Barasso', 'Castro, Apulia', 'Menarola', 'Villanovaforru', 'Vazzola', 'Insular Italy', 'Cima del Serraglio', 'Cologno Monzese', 'Santa Severina', 'Viagrande', 'Milan', 'Lüsen', 'Gavardo', 'Polistena', 'Borgofranco sul Po', 'Abbasanta', 'Ortler', 'Albosaggia', 'Piombino Dese', 'Campitello di Fassa', 'Sannicandro di Bari', 'Castelvetere sul Calore', 'San Benedetto dei Marsi', 'Rocca Santa Maria', 'Giudicarie', 'Scala Regia', 'Catania Astrophysical Observatory', "Scandolara Ripa d'Oglio", 'San Demetrio Corone', 'Saludecio', 'Santo Stefano Quisquina', 'Candela', "Città Sant'Angelo", 'Carrega Ligure', 'Vetulonia', 'Vacri', 'San Giorgio di Pesaro', 'Pandino', 'Palermo-Boccadifalco Airport', "San Demetrio ne' Vestini", 'San Leo', 'San Giacomo delle Segnate', 'Cento', 'Ponzano Monferrato', 'Limbadi', 'Borghetto di Vara', 'Casasco', 'Castelluccio Superiore', 'Rende', 'Carnate', 'Campiglia dei Berici', 'San Martino al Tagliamento', 'Sabaudia', 'Pfitsch', 'Montemaggiore Belsito', 'Mozzanica', 'Jolanda di Savoia', 'Poggio San Marcello', 'Taranto', 'Grumes', 'Sigillo', "Sant'Agostino", 'Pertosa Caves', "Sant'Alessio con Vialone", 'Villanova del Ghebbo', 'San Giorgio di Nogaro', "Canale d'Agordo", 'Casale sul Sile', "Castel Sant'Elmo", 'Lucignano', 'Marcellina', 'Tavernerio', "Sant'Andrea Apostolo dello Ionio", 'Santo Stefano di Magra', 'Offlaga', 'Comazzo', "Sant'Eufemia d'Aspromonte", 'Scala Coeli', 'Costanzana', 'Donnas', 'Rivodutri', 'Pescantina', 'Revello', 'Monzambano', 'Labico', 'Peglio, Marche', 'Grotteria', 'Castellavazzo', 'San Fedele Intelvi', 'San Donato', 'Brunate', 'Cibiana di Cadore', 'Verrua Savoia', 'Loano', 'Sasso di Castalda', 'Valdastico', 'Marche Polytechnic University', 'Trevico', "Villa d'Ogna", 'Aymavilles', 'Boville Ernica', 'Malborghetto Valbruna', 'Bresso', 'Casorezzo', 'Celleno', 'Angiari', 'Monghidoro', 'San Frediano, Pisa', 'Lavena Ponte Tresa', 'Castel di Casio', 'Buglio in Monte', 'Brindisi Montagna', 'Ollolai', 'Tuoro sul Trasimeno', 'Cermis', 'Orani', 'Crete Senesi', 'Apice', 'Serravalle Sesia', 'Levico Terme', 'Agnone', 'San Felice da Cantalice a Centocelle', 'Preci', 'Miggiano', 'Lubriano', 'Camucia', 'Arpaise', 'Prarolo', 'Atena Lucana', 'San Biagio di Callalta', 'San Giorgio di Lomellina', 'Bonarcado', 'Monasterace', "Montegrosso d'Asti", 'Mombaruzzo', 'Faieto', 'San Didero', 'Nicotera', 'Tremenico', 'Ancona', 'Scarmagno', 'Valeggio, Lombardy', 'Teolo', 'Conscenti', 'Laterza', 'Anzio', 'Rolle Pass', 'Corno Giovine', 'Gallicchio', 'Davoli', 'Magna Graecia University', 'Telve di Sopra', 'Mossano', 'Ortezzano', 'Masciago Primo', 'Ciciliano', 'Villafranca Padovana', "Fiorenzuola d'Arda", "Rocca de' Giorgi", 'Minervino Murge', 'Masera', 'Grone', 'Noci', 'Castelnuovo Bozzente', 'Flussio', 'Colle Del Marchese', 'Acireale', 'Cervarese Santa Croce', 'Brolo', 'Villafranca di Verona', "Sant'Eustachio", 'Rezzo', 'Siamaggiore', 'Cicciano', "Velo d'Astico", 'San Lorenzo al Mare', 'Catania', 'Penango', 'Celenza Valfortore', 'Montegaldella', 'Bagaladi', 'Montaione', 'Baiano, Campania', 'Colle Brianza', 'Pietraperzia', 'Siliqua, Sardinia', "Sant'Antonio Abate", 'Lei', 'Treville', 'Alfiano Natta', 'Rifreddo', 'Gazzuolo', 'Sorso', 'Castelbottaccio', 'Ozegna', 'Cantarana', 'Morro Reatino', 'Bévéra', 'Guastalla', 'Simaxis', 'Soveria Mannelli', 'Introd', 'Moneglia', 'Pisa', 'Guardistallo', 'Pontifical North American College', 'Rhêmes-Saint-Georges', 'Ausonia, Lazio', 'Tradate', 'Zola Predosa', 'Vagli Sotto', 'Roccagloriosa', 'Peio', 'Lerici', 'Soddì', 'Camo', 'Bagnaria Arsa', 'Spera', 'Ischia, Campania', 'Asigliano Veneto', 'San Vito di Cadore', 'Pontida', 'Monsummano Terme', 'Villa Forni Cerato', 'Gorla Minore', 'Ronche', 'Santa Giustina in Colle', "Borghetto d'Arroscia", 'Grauno', 'San Giovanni Bianco', 'Marene', 'Castiraga Vidardo', 'Stadio Nazionale PNF', 'Gsies', 'Aquilonia, Italy', 'Lavinio', 'Chignolo Po', 'Monteforte Irpino', 'Sellia, Calabria', 'Limone sul Garda', 'Borgio Verezzi', 'Futani', 'San Secondo Parmense', 'Mugnano di Napoli', 'Seconda Università degli Studi di Napoli', 'Eppan an der Weinstraße', 'Locri', 'Monticelli Brusati', 'Guardia Lombardi', 'San Giovanni Suergiu', 'Canale, Piedmont', 'Roccafranca', 'Pieve di Ledro', 'Oltrona di San Mamette', 'Turin-Aeritalia Airport', 'Somano', 'Lizzanello', 'Falciano del Massico', 'Rapagnano', 'Castiglione in Teverina', 'Fascia, Liguria', 'Argentera', 'Garzeno', 'Balangero', 'Cenate Sopra', 'Vairano Patenora', 'Loreto Aprutino', 'Lunano', 'Vico Canavese', 'Corsano', 'Province of Potenza', 'Fénis', 'Almenno San Salvatore', 'Magliano in Toscana', 'Serramonacesca', 'Pietrastornina', 'Pertica Alta', 'Candidoni', 'Massa Lombarda', 'Agerola', 'Val Badia', 'Tiana, Sardinia', 'Piana Crixia', 'Solofra', 'Zibello', 'San Marco in Lamis', 'Villarboit', 'Chiomonte', 'Castelvetrano Airfield', 'Stienta', 'Resiutta', 'Barcellona Pozzo di Gotto', 'University of Perugia', 'Sissa', 'Gromo', 'Casarile', 'Ornago', 'Santa Maria dei Miracoli and Santa Maria in Montesanto', 'Carpi, Emilia-Romagna', 'Ispani', 'Nago–Torbole', "Castell'Alfero", 'Canalicchio', 'Hyblaean Mountains', 'Alleghe', 'Mühlwald', 'Genola', 'Campobello di Mazara', 'Bidonì', 'Saint-Pierre', 'San Giorgio La Molara', 'Gradara', 'Naples', 'Francolise', 'Sessa Aurunca', 'Tavullia', 'Montaguto', 'Balestrate', 'Montescudaio', 'Montoro Inferiore', 'Rodeneck', 'Pfitscherjoch', 'Vittorito', 'Acquanegra sul Chiese', 'Cesa', 'Oulx', 'Taburnus', 'Aqua Traiana', 'Bernareggio', 'Tronzano Vercellese', 'Sestri Ponente', 'Barbian', 'Dossena', 'Zinasco', 'Amendolara', 'Villa San Silvestro', "Monforte d'Alba", 'Borgo a Mozzano', 'Torrechiara', 'Leno', 'Scarperia', 'Terranuova Bracciolini', 'Anoia', 'Loculi', 'Civitanova Marche', 'Forno di Zoldo', 'Roè Volciano', 'Castel di Sasso', 'Pozzoleone', 'Mosso, Piedmont', 'Santadi', 'Province of Brescia', 'Frigento', 'Scordia', "Arzago d'Adda", "Ospedale L'Albergo Reale dei Poveri, Naples", 'Suzzara', 'Santa Prassede', 'Pauli Arbarei', 'Cortemilia', 'Syracuse', "Porto Sant'Elpidio", 'Vedelago', 'Pettinengo', 'Magione', 'Grumento Nova', 'Sedrina', 'Siano', 'Pisogne', 'Bergamasco, Piedmont', 'Tadasuni', 'Florence', 'Comacchio', 'Policoro', 'San Bartolomeo Val Cavargna', 'Torre Le Nocelle', 'Ombrone Airfield', 'Pitigliano', "Rocca d'Arce", 'Monteriggioni', 'Villanova Biellese', 'Malgesso', 'Lentella', 'Milan Conservatory', 'Tiggiano', 'Druogno', 'Sedico', 'Chieve', 'Pescocostanzo', 'Ostellato', "Puos d'Alpago", 'Piz Schumbraida', 'Baucina', 'Certosa di Padula', 'Gioia Del Colle Airport', 'Maddalena Pass', 'Pisoniano', "Quarto d'Altino", 'Cureggio', 'San Biagio', 'Abano Terme', 'Palù del Fersina', 'Castrignano del Capo', 'Tuscania', 'Pistrino', 'Borgomale', 'Aviano Air Base', 'San Lorenzo del Vallo', 'Campofelice di Roccella', 'San Donato di Lecce', 'Belsito', 'Rossiglione', 'Posta Fibreno', 'Castelfranci', 'Frascineto', 'Molise', 'Villasimius', 'Romanengo', 'Brogliano', 'San Zenone degli Ezzelini', 'Maierato', 'Crosio della Valle', 'Badia Petroia', 'Luzzana', 'Province of Prato', 'Rovello Porro', 'University Kore of Enna', 'Iesi', 'Leonessa', 'Prima Porta', 'Castellino Tanaro', 'Santa Domenica Vittoria', 'Valgioie', "Sant'Antonino di Susa", 'Terravecchia', 'Monterotondo Marittimo', 'Mezzana Mortigliengo', 'Gombito', 'Maiolati Spontini', 'San Silvestro in Capite', 'Pompeii Airfield', 'Siena', 'Faggiano', 'Marchirolo', 'Lavarone', 'Atri', 'Castiglione Messer Raimondo', 'Blufi', 'Ovindoli', 'Carlopoli', 'University of Ferrara', 'Lentate sul Seveso', 'Bassano Romano', 'University of Trento, Rovereto Campus', 'Falmenta', 'Bruino', 'Pulsano', 'Nuvolera', 'Sestino', 'Roverè Veronese', "Cavaglio d'Agogna", 'Roccasecca dei Volsci', 'San Michele', 'Cima Verosso', 'Manta, Piedmont', 'Pontechianale', 'Ortucchio', 'Gallese', 'Meugliano', 'Gassino Torinese', 'Caiazzo', 'Barco', "Quartu Sant'Elena", 'Ciampino–G. B. Pastine International Airport', "Chignolo d'Isola", "Saint Peter's tomb", 'San Vito Chietino', 'San Giorgio a Cremano', 'Alba', 'Scandicci', 'Tivoli', 'Montaldeo', 'Delianuova', 'Pointe Walker', 'Delebio', 'Taleggio', 'Capannori', 'Cingoli', 'Salerano sul Lambro', 'Cittaducale', 'Monterubiaglio', 'Ucria', 'Caponago', 'Vallelonga', 'Ordona', 'Province of Florence', 'San Sosti', 'Pico', 'Torricella Peligna', 'Codrongianos', 'Ceglie Messapica', 'San Cataldo, Sicily', 'Portacomaro', 'Spilamberto', 'Maranzana', 'Cessapalombo', 'Soriano Calabro', 'Fonni', 'Gemona del Friuli', 'Morrovalle', 'Leverano', 'Manzano, Friuli', 'Genazzano', 'San Clemente, Emilia-Romagna', 'Lurate Caccivio', 'Rodì Milici', 'Bonemerse', 'Ortobene', 'Scario', 'Albuzzano', 'Veduggio con Colzano', 'Castiglione Cosentino', 'Pescorocchiano', 'Sutri', 'Mulazzo', 'Galeata', 'Carini', 'Vescovato', 'Fornovo di Taro', 'Broccostella', 'Staller Saddle', 'Bergamo', 'Agnosine', 'Pedara', 'Belluno Airport', 'Salcedo', 'Taverna, Calabria', "Pomigliano d'Arco", 'Asola, Lombardy', 'Cavezzo', 'Nure', 'Parre', 'Mesagne', 'Carapelle Calvisio', 'Pieve di Coriano', 'Bompietro', 'San Salvatore Telesino', 'Cava Manara', 'Ottone, Emilia-Romagna', 'Pergine Valsugana', "Rocca d'Evandro", 'Ponza', 'Capriglio', 'Castello di Petroia', 'Emilia-Romagna', 'Bisenti', 'Donato, Piedmont', 'San Bonifacio', 'Fondo', 'Firenzuola', 'Macherio', 'Chiusa Sclafani', 'San Donato Val di Comino', 'San Basilio', 'Murlo', 'Rignano Garganico', 'Rasura', 'Caronia', 'Cravagliana', 'Casteltermini', 'Paestum Airfield', 'Vidor', 'Valsavarenche', 'Giaglione', 'Piz Bles', 'Camporotondo Etneo', 'Grana, Piedmont', 'Campertogno', 'Buttapietra', 'Monteveglio', 'Vessalico', 'Province of Monza and Brianza', 'Pontedassio', 'Dego', 'Felizzano', 'Bellano', 'Zero Branco', 'Moncrivello', 'Colorno', 'Casalnuovo Monterotaro', 'Davagna', 'Oviglio', 'Cossoine', 'Cimolais', 'Torchiara', 'Province of Verona', 'Viola', 'Castello di Lunghezza', 'Castelmola', 'Montese', 'Casalalta', 'Corridonia', 'Mattinata', 'San Giorio di Susa', 'Borgosatollo', 'Poncarale', 'Telgate', 'Balvano', 'Porcia, Friuli-Venezia Giulia', 'Basilicata', 'Celano', 'Fiera Milano', 'Segesta', 'Val Masino', 'Settefrati', 'Martina Franca', 'Campo Ligure', 'Brusciano', 'Mussomeli', 'Lomagna', 'Quiliano', 'Montalto di Castro Nuclear Power Station', 'Portobuffolè', 'Dolcedo', 'Solaro', 'Tredozio', 'Specchia Gallone', 'Piz Minschuns', 'Manduria', 'University of Genoa', 'Urbino', 'San Lorenzo Nuovo', 'Garessio', 'Boffalora sopra Ticino', 'Settignano', 'Campolattaro', "Ozzano dell'Emilia", 'Venticano', 'Minervino di Lecce', 'Oriolo', 'Castel del Giudice', 'Canosio', 'Borgo Vercelli', 'Grosso', 'Piedimonte San Germano', 'Trenta, Calabria', 'Palazzolo Acreide', 'Duino', 'San Bellino', 'Lograto', 'Ginestra', 'Cinisello Balsamo', 'Mandatoriccio', 'Palmas Arborea', 'Alghero', 'Castel Giorgio', 'Cavagnolo', 'San Giorgio', 'Settimo Milanese', 'Giungano', 'Castelnuovo Parano', 'Castelsaraceno', 'Avigliano Umbro', 'Brinzio', 'Gardone Val Trompia', 'Vignole Borbera', 'Agliè', 'Frugarolo', "Acquaviva d'Isernia", 'Mendel Pass', 'Piave', 'Ceresole Reale', 'Apricena', 'Circus of Nero', 'Olcenengo', 'Brandizzo', 'Priolo Gargallo', 'Ponte di Cerreto', 'Piozzano', 'Besozzo', 'Locana', 'Pieve Porto Morone', 'Dorno', 'Santa Caterina a Chiaia', 'Foggia railway station', 'Milan amphitheatre', 'Montù Beccaria', 'Giustino, Trentino', 'Torriglia', 'Santomenna', 'Collegiove', 'Pietrelcina', 'Dervio', 'Terra del Sole', 'Theodul Pass', 'Montelupo Fiorentino', 'Amiternum', 'Burcei', 'San Giacomo Vercellese', 'Calatafimi-Segesta', 'Retorbido', 'Isola Minore', 'Concorezzo', 'Acquaviva Collecroce', 'Nocera Umbra', 'Colmurano', 'San Pietro al Tanagro', 'Capua', 'Piazzola sul Brenta', 'Volturino', 'Badia, South Tyrol', 'Piz Murtaröl', 'Alserio', 'Santa Giustina', 'Potenza', 'Montefredane', 'Camandona', 'Pizzale', 'Bolgare', 'Piz Zupò', 'Barolo DOCG', 'Bovolenta', 'Perano', 'Nardò Ring', 'Castenaso', 'Cartoceto', 'Torre della Ghirlandina', 'Montezemolo', "Castello dell'Imperatore", 'Province of Forlì-Cesena', 'Aldeno', 'Prato', 'Bivio Lugnano', 'Ceriale', 'East Weymouth', 'Andria', 'Pontecurone', "Sant'Elia Fiumerapido", 'Savona railway station', 'Arzano', 'Vallo Torinese', 'Campiglia Marittima', 'Frassineto Po', 'Biblioteca Vallicelliana', 'Colosseum', 'Alba Fucens', 'Vercelli railway station', 'Cusio, Lombardy', 'Fara Novarese', 'Macchiagodena', 'Malvito', 'Villaspeciosa', 'Rodi Garganico', 'Marciana', 'San Felice del Molise', 'Pollux', 'Martinengo', 'Poggio Bustone', 'Morgex', 'Rio Saliceto', 'Borghi', 'Toirano', 'Cittanova', 'Tolmezzo', 'Romallo', 'Gravina di Catania', 'Roddino', 'Brittoli', 'Cuccaro Monferrato', 'Telese Terme', 'Enego', 'S. Pio V University of Rome, main campus', 'Sommariva Perno', 'Vicenza Airport', 'Cirò Marina', 'Castelvetere in Val Fortore', 'Briosco', 'Rocchetta a Volturno', 'Bonassola', 'Kuens', 'Pompeiana', 'Due Carrare', 'Lana', 'Tavenna', 'Cortona', 'Cosoleto', "Corneliano d'Alba", 'Viverone', 'Borgo Cerreto', 'Serrata, Italy', 'Pontifical University Antonianum', 'Sassetta, Tuscany', 'Mairago', 'Bagnolo San Vito', 'Ardara, Sardinia', 'Pravisdomini', 'Nuraminis', 'Parzanica', 'Corchia', 'Giffone', 'Poggio Picenze', 'Drenchia', 'Lapio', 'Andorno Micca', 'Melfi', 'Montresta', 'Copertino Castle', 'Gessopalena', 'Pellizzano', 'Canolo', 'Calamandrana', 'Loiri Porto San Paolo', 'Pretoro', 'Cerva', 'Carpaneto Piacentino', 'Antonimina', 'Delia', 'Frignano', 'Godrano', 'Varaita', 'Campiglia Cervo', 'San Vincenzo, Tuscany', 'Teggiano', 'Venezia', 'Molfetta', 'Corato', 'Santa Maria Rezzonico', 'Aeclanum', 'Monchiero', 'Londa, Tuscany', 'Free University of Bozen-Bolzano', 'Drapia', 'Faicchio', 'Calliano, Trentino', 'Montebello Ionico', 'Masone', 'Moiano', 'Vailate', 'Montefiascone', 'Campolongo al Torre', 'Cassinasco', 'Santa Maria del Molise', 'Venosa', 'Gaggi', 'Cesinali', 'Norbello', 'Pinacoteca Tosio Martinengo', 'Tirano', 'Rancio Valcuvia', 'Parabiago', 'Palazzo di Propaganda Fide', 'Fara Olivana con Sola', 'Petrella Tifernina', 'Civitella del Lago', 'Vecchiano', 'Uggiano la Chiesa', 'Battuda', 'Stella Cilento', 'Arielli', 'Griante', 'Sulbiate', 'Via Salaria', 'Vaiano Cremasco', 'Felitto', 'Rottofreno', 'Berceto', "Vito d'Asio", 'Emilia', 'Petriano', 'San Giovanni a Porta Latina', 'Olmeneta', 'Meda', 'Montefalcone di Val Fortore', 'Brissogne', 'Montoro Superiore', 'San Severino Lucano', 'Castelfranco di Sopra', 'Carpignano Salentino', 'Oltressenda Alta', 'Eupilio', 'Stroncone', 'Montalto di Castro', 'Fornovo San Giovanni', 'Gambolò', 'Novara di Sicilia', 'Roure', 'San Giovanni dei Fiorentini', 'Province of Cremona', 'Castelnuovo di Farfa', 'Campocologno', 'Albavilla', 'Pavullo nel Frignano', 'Uta', "Cazzano Sant'Andrea", 'Ciorlano', 'Spina', 'San Giorgio Ionico', 'Belvedere Marittimo', 'University of Insubria, Varese Campus', 'Farra di Soligo', 'Curia Hostilia', 'Mirabello Sannitico', 'Poggio Primocaso', 'Sambuco', 'Popoli', 'Sini, Sardinia', 'Piazza delle Erbe', 'Aquae Cutiliae', 'Gross Schinhorn', 'Sospiro', "Ronco all'Adige", 'St. Martin in Passeier', 'Borgo Priolo', 'Maserada sul Piave', 'Monte Mario', 'Pinerolo', "San Nicolò d'Arcidano", 'Trasacco', 'San Presto', 'Vivaro', 'Cima del Rosso', 'Pratella', 'Murialdo', 'Ponzano Romano', 'Barletta railway station', 'Prizzi', 'Rorà', 'Mount Limbara', 'Solopaca', 'Cappadocia, Abruzzo', 'Milzano', 'Marcallo con Casone', 'Volastra', 'Corteno Golgi', 'Novara railway station', 'Grivola', 'Guardabosone', 'Province of Ferrara', 'Orsara Bormida', 'Valle Piola', 'Tonengo', 'Faeto', 'Vallefiorita', 'Monno', 'Rocchetta Belbo', 'Torre San Giorgio', 'Transacqua', 'Fiumefreddo di Sicilia', 'Linarolo', 'Senorbì', 'Challand-Saint-Victor', 'Volturno', 'Roncade', 'Baton River', 'Gottolengo', "Torre de' Picenardi", 'Folignano', 'San Felice sul Panaro', 'Prestine', 'Collegio Carlo Alberto', 'Monterosso Grana', 'Ticineto', 'Polytechnic University of Turin', 'Varallo Sesia', 'Baths of Licinius Sura', 'Borgonovo Val Tidone', 'Archi, Abruzzo', 'Mesenzana', 'Mafalda, Molise', 'Mendicino', 'Cortemaggiore', 'Senna Comasco', 'Poggio Nativo', 'Borgo Val di Taro', "Castel dell'Ovo", 'Salento', 'Teatro Sociale di Rovigo', 'Colosseo', 'Maiolo', 'Falconara Marittima', 'Tropea', 'Spineto Scrivia', 'Piancogno', 'Crucoli', "Sant'Angelo Lodigiano", 'San Lorenzo Bellizzi', 'Albignasego', 'San Pietro in Gessate', 'Concerviano', 'Monte di Malo', 'Battipaglia', 'Caravino', 'Cupra Marittima', 'Frascaro', 'Monforte Casalaticco', 'Bulgarograsso', 'Agnana Calabra', 'Cerrione', 'Torretta', 'Foiano di Val Fortore', 'Bibbiena', 'Linguaglossa', 'Vespolate', 'Onano', 'Cossignano', 'Astronomical Observatory of Capodimonte', 'Caramagna Piemonte', 'Bedonia', 'Avetrana', 'Morrone del Sannio', 'Olgiate Molgora', 'San Pietro in Cariano', 'Fossalto', 'Orio Litta', 'Cosenza', 'Torre Beretti e Castellaro', 'Bereguardo', 'Monte Marenzo', 'Monte San Martino', 'Temple of Vespasian and Titus', 'Villaverla', 'Montemagno, Piedmont', 'Serradifalco', 'Luzzara', 'Canosa di Puglia', 'Revine Lago', 'Borgo Santa Maria', 'Stanghella', 'Verdello', 'Povegliano Veronese', 'Vigliano Biellese', 'Demonte', 'Rivarolo del Re ed Uniti', 'Santa Maria Imbaro', 'Reggello', 'Rittana', 'Vasto', "Centro per l'arte contemporanea Luigi Pecci", 'Borore', 'Viadanica', 'Laino Borgo', 'Capriva del Friuli', 'Varese Ligure', 'Frattaminore', 'Casalnoceto', 'Capaci', 'Penne', 'Galliate', 'Casale Marittimo', "Ospedaletto d'Alpinolo", 'Ferruzano', 'Lillianes', 'Agrigento Airfield', 'Serradarce', 'Dello, Lombardy', 'Isole', 'Casteldelci', 'Veleia', 'Careggine', 'Frassino', 'Sangiano', 'Serramanna', 'Mairano', 'Roccaromana', 'British School at Rome', 'Terralba', 'Cabella Ligure', 'Aramengo', 'Gavignano', 'Noli', 'Gambara', 'Citerna', 'Riesi', "Rignano sull'Arno", 'Colico', 'Castro, Lazio', 'Enemonzo', 'Mombasiglio', 'Maccagno', 'San Maurizio Canavese', 'Susegana', 'Ballao', 'Martirano Lombardo', 'San Giovanni Incarico', 'Piuro', 'Procida', 'Calcio, Lombardy', 'Carpiano', 'Molteno', 'Cesarò', 'Palata', 'Rossana', 'Ripalta Guerina', 'San Giovanni la Punta', 'Suburra', 'Campodolcino', 'Oggiono', 'San Ginesio', 'Trenzano', 'Castelsilano', 'Pessano con Bornago', 'Gossolengo', 'San Pietro in Casale', 'Ancona Falconara Airport', 'Santa Maria del Priorato', 'Dosolo', 'Oria', 'EUROBUIS European Business and Innovation School', 'Grazzanise Airport', 'Nuragus', 'Fossacesia', 'Fogliano', 'San Valentino in Abruzzo Citeriore', 'Costano', 'San Damiano al Colle', 'Rovellasca', 'Tramin an der Weinstraße', 'Monteparano', "Sant'Elpidio a Mare", 'Mont Dolent', 'Garlenda', 'Caporciano', 'Breno', 'Frassinoro', 'Baiae', 'Carcare', 'ISPI', 'Canevino', 'Comiso', 'Westin Palace Milan', 'Cessole', 'Gerenzago', 'Bee, Piedmont', 'Prezzo', 'Calderone glacier', 'Ardenno', 'Sesto al Reghena', 'Celle Enomondo', 'Bagnoli Irpino', 'Ariano nel Polesine', 'Muzzana del Turgnano', 'Tavoleto', 'Masi Torello', 'Lucito', 'Vicenza', 'Pizz Gallagiun', 'Borghetto di Borbera', 'Sirmione', 'Mareo', 'Marienberg Abbey', 'Falcade', 'Santa Paolina', 'Saccolongo', 'Bianzone', 'Ulà Tirso', 'Verrès', 'Fabrecce', 'Casei Gerola', 'Cartura', 'Lendinara', 'Castellina in Chianti', 'Trevignano Romano', "Sant'Olcese", 'Lugo', 'Camini', 'Monti', 'San Genesio ed Uniti', 'Sanluri', 'Feisoglio', 'Santa Maria della Versa', 'Passignano sul Trasimeno', 'Colli sul Velino', 'Cavour, Piedmont', "Sant'Agnello", 'Montefiorino', 'Montone', 'Gaverina Terme', 'Fubine', 'Vezzana', 'San Martino del Lago', 'Caselle Torinese', 'Massa e Cozzile', 'Conegliano', 'Cercepiccola', 'Fonteno', 'Troina', 'Poffabro', 'Diano Marina', 'Narcao', 'Sfruz', "Rota d'Imagna", 'Paternò', 'Pasiano di Pordenone', 'Verrayes', 'Cecima', 'Collinas', 'Mirabella Eclano', 'Bauladu', 'Gissi', 'Usseglio', 'Riofreddo', 'Ripi', 'Faule', 'Macerata Campania', 'Scano di Montiferro', 'San Fermo della Battaglia', 'Loreo', 'Cabras', 'Albi, Calabria', 'Gropello Cairoli', 'Lido di Venezia', 'Barni', "Sant'Angelo Romano", "Robecco d'Oglio", 'Comelico Superiore', 'Arnad', 'Cesana Torinese', 'Acquapendente', 'Fiumara', 'Turrivalignani', 'Beregazzo con Figliaro', 'Monteforte Cilento', 'Ponti sul Mincio', 'Caluso', 'Pordenone', 'Arena Po', 'Scampitella', 'Eraclea', 'Bellusco', 'Accettura', 'San Germano Vercellese', 'Lisciano Niccone', 'Zuglio', 'Himera', 'Pescopagano', 'Sarzana', 'Cervatto', 'Monteleone Sabino', 'Leonine City', 'Ponti, Piedmont', 'San Marzano Oliveto', 'Cernusco Lombardone', 'Chiaravalle, Marche', 'Bonito, Campania', 'Cuorgnè', 'Bellino', 'Rocciamelone', 'Foligno Airport', 'Ovada', 'Maclodio', 'Siculiana', 'Garbagnate Monastero', 'Mogoro', 'Polino', 'Torchiagina', 'Porto Mantovano', 'Grottammare', 'Scaletta Zanclea', 'Medici Chapel', 'Teatro Olimpico', 'San Giustino', 'San Valentino Torio', 'Redavalle', 'Ponte San Nicolò', 'Pineto', 'San Giovanni in Marignano', 'Montorio nei Frentani', 'Bologna', 'Castelnuovo Belbo', 'Scafa', 'Suardi', 'Pentone', 'Soveria Simeri', 'Stadio Olimpico Carlo Zecchini', 'Monticello Conte Otto', 'Mondolfo Airfield', 'Moscufo', 'Falconara Albanese', 'Joppolo Giancaxio', 'Orotelli', 'Alvito, Lazio', 'Cinque Torri', 'Viterbo', "Saviore dell'Adamello", 'Cazzano di Tramigna', 'Caspoggio', 'Colledimezzo', 'Santo Stefano Belbo', 'Vico nel Lazio', 'Pianezze', 'Torrevecchia Teatina', 'Santa Maria della Spina', 'Villafalletto', 'Castelgrande, Basilicata', 'Maruggio', 'University of Teramo', 'Borghetto Santo Spirito', "Sant'Andrea del Garigliano", 'Frisanco', 'Carema', 'Fratta Todina', 'Lecce Airport', 'Conflenti', 'Staranzano', "Sant'Antonio di Gallura", 'Pontey', 'Codogno', 'Guiglia', 'Barbata', "San Maurizio d'Opaglio", "Castiglione d'Adda", 'Longi', 'Rebibbia', 'Cinzano, Piedmont', 'Monte Cistella', 'Avella', 'Lupara, Molise', 'Cervaro', 'Casale Monferrato railway station', 'Bastardo', "Santa Croce sull'Arno", 'Palagonia', 'Elva', 'Prezza, Abruzzo', 'Stadio Amsicora', 'Monreale', 'Caravate', 'Santa Maria Navarrese', 'Laboratori Nazionali del Gran Sasso', 'Saviano', 'Filadelfia, Calabria', 'Bondeno', 'Piadena', 'Montale', 'Ragoli', 'Margno', 'Varese', 'Incudine', 'Sommacampagna', 'Villa Faraldi', 'Calvignano', 'Pontecchio Polesine', 'Vittuone', 'Latsch', 'Province of Ravenna', 'Morra De Sanctis', 'Roccalumera', 'Monteu Roero', 'Cremona', 'Taviano', 'San Fili', 'Atrani', 'Valle Mosso', 'Leinì', 'Villa San Giovanni in Tuscia', 'Zenevredo', 'San Bartolomeo in Galdo', 'Guarda Veneta', 'Maggiora', 'Turania', 'Fontegreca', 'Valmontone', 'Quaderni', 'Carolei', 'Brozolo', 'Landriano', 'Pavarolo', 'Noasca', 'Fiorano Circuit', 'Giau Pass', 'Torricella del Pizzo', 'Rosia Airfield', 'Gorla Maggiore', "Sant'Angelo in Vado", 'Bagnoli Airfield', 'Buccheri', "Sant'Ippolito", "Serra Sant'Abbondio", 'Camerano Casasco', 'Porta San Sebastiano', 'Ceretto Lomellina', 'Cassano Spinola', 'Milano', "San Damiano d'Asti", 'Ciconio', 'Carrara', 'San Stino di Livenza', 'Vallo di Nera', 'Foresto Sparso', 'Neive', 'Pontoglio', "Sant'Eusanio del Sangro", 'Piosina', 'Ceranesi', 'Marsicovetere', 'Megliadino San Fidenzio', 'Treglio', 'Castellarano', 'Marigliano', 'Solarino', 'Gran Caffé Doney', 'Venegono Superiore', 'Urbania', 'Buscate', 'Levanto, Liguria', "Macchia d'Isernia", 'Longhena', 'Cerchio', 'Montegrosso Pian Latte', 'Truden im Naturpark', "Sant'Ignazio Church, Rome", 'Contessa Entellina', 'Torremaggiore', 'Crissolo', 'Bagnolo di Po', 'Comezzano-Cizzago', 'Casale Corte Cerro', 'Lozzo di Cadore', 'Acri', 'Mornese', 'Palizzi', 'Borgo San Giacomo', 'Spezzano della Sila', 'Lovero', 'Augusta, Sicily', 'Gimigliano', 'Medolago', "Sant'Alessio in Aspromonte", 'Cremona Cathedral', 'Federico Fellini International Airport', 'Campofranco', 'Moncenisio, Piedmont', 'Palazzolo Vercellese', 'Castel di Lama', 'Lipomo', 'Monfalcone', 'Predazzo', 'Barberino di Mugello', 'Picinisco', 'Graglia', 'Alonte', 'Foiano della Chiana', 'Lodi', 'San Carlo Canavese', 'Roccella Ionica', 'San Nazario, Veneto', 'Roviano', 'Mount Ortigara', 'Collegno', 'Castelfranco in Miscano', 'Santo Stefano', 'Garbagna, Piedmont', 'Stupinigi', 'Bagnolo in Piano', "Rive d'Arcano", 'Garniga Terme', 'Nals', 'Dozza', 'Montefusco', 'Campodenno', 'San Pietro in Vinculis', 'Gera Lario', 'Sordio', 'Province of Asti', 'Plataci', 'Dolzago', 'University of Molise', 'Altilia', 'Maierà', 'Semiana', 'Barbaresco DOCG', 'Capolona', 'Sterzing', 'Oncino', 'Refrancore', 'Casalvecchio di Puglia', "Spino d'Adda", 'Cirié', 'Aprica', 'Croce Domini Pass', 'Paola', 'Ussassai', 'Schnals', 'Unsere Liebe Frau im Walde-St. Felix', 'Camporeale', 'Grancona', 'Marmentino', 'Marano Lagunare', 'Capiago Intimiano', 'Torri del Benaco', 'Santa Caterina dello Ionio', 'Aurano', 'Solfatara', 'Ronco Biellese', 'Tornareccio', 'Vietri di Potenza', 'Porto', 'Monteleone di Puglia', 'Scheggia e Pascelupo', 'Capo Vaticano', 'Villongo', 'Montefiore Conca', 'Magliano di Tenna', 'Rocca Susella', 'Campospinoso', 'Cellara', 'Megliadino San Vitale', 'San Chirico Nuovo', 'Rocca Grimalda', 'Montemiletto', 'Burolo', 'Autodromo Riccardo Paletti', 'Gonars', 'Arre, Veneto', 'Garlate', 'Butera, Sicily', 'Asti', 'Quadrelle', 'Teramo', 'Meduno', 'Colzate', 'Spadafora', 'Fierozzo', 'Eremo delle Carceri', 'Forgaria nel Friuli', 'Villanova di Camposampiero', 'Innichen', 'Palasport Mens Sana', 'Torgiano', 'Veglio', 'Calcinato', 'Piedmont', 'Verona', 'Basicò', 'Serino', 'Valera Fratta', 'Acqui Terme', 'Maritime Alps', 'Fontanelice', 'Autodromo Enzo e Dino Ferrari', 'Villadossola', 'Centro (I)', 'Armo', 'Carimate', 'Castiglion Fibocchi', 'Moschea di Roma', 'Correggio', 'Olmedo, Sardinia', 'Pietrabbondante', 'Campegine', 'Bernina Range', 'Gatteo', 'Villarosa', 'Maltignano', 'Colle Giacone', 'Golasecca', 'Belcastro', 'Mello', 'Santa Maria della Pietà in Camposanto dei Teutonici', 'Sibillini Mountains', 'Ponticelli', "Torre de' Negri", 'Baragiano', 'Briga Novarese', 'San Francesco', 'San Roberto', 'Cetraro', 'Ravarino', 'Mirabello', 'Ponte', 'Cremella', 'Sommo', 'Lainate', 'Mirano', 'Bobbio Pellice', 'Terlan', 'Nanto', 'Carzano', 'Valgoglio', 'Monteflavio', 'Domodossola', 'Barzanò', 'Quarna Sopra', 'Illasi', 'Terrazzo', 'Portula', 'Fombio', 'Pignataro Maggiore Airfield', 'Andreis', 'Carmignano', 'Abbey of San Mercuriale, Forlì', 'Roma Ostiense railway station', 'Bellizzi', 'Rosarno', "Massa d'Albe", 'Cavernago', 'Castelmagno', 'Bagno a Ripoli', 'Dossobuono', 'Tiglieto Abbey', 'Sellano', 'Sud', 'Albiolo', 'Fontanafredda', 'Saliceto', 'Entracque', 'Zerbolò', 'Persico Dosimo', 'Pastena', 'Dolianova', 'Cesana Pariol', 'Favale di Malvaro', 'Bernezzo', 'Tarsia', 'La Sila', 'Vistarino', "Motta de' Conti", 'Carezzano', 'Givoletto', 'Spinetoli', 'Novello', 'Irma, Lombardy', 'Castiglione della Pescaia', 'Formicola', 'Monte Grimano', 'Monteverdi Marittimo', 'Fara in Sabina', 'Desenzano del Garda', 'Ceneselli', 'Scansano', 'Alfianello', 'Forlì Branch of the University of Bologna', 'Cardinale, Calabria', 'San Piero a Grado', 'Selegas', 'Serre', 'Crespano del Grappa', 'Calestano', 'Province of Messina', 'Salerano Canavese', 'Patrica', 'Castiglione delle Stiviere', 'Province of Pistoia', 'Castiglione Olona', 'Sestriere', 'Salara', 'Graniti', 'Quassolo', 'Acquasparta', 'Villadose', 'Ripe San Ginesio', 'Busto Garolfo', 'Toffia', 'Pucciarelli', 'Poppi', 'Kurtinig an der Weinstraße', 'Carlino', 'Concesio', 'Vernole', 'Peschiera del Garda', 'Grazzanise', 'Roncaro', 'Province of Verbano-Cusio-Ossola', 'Figline Valdarno', 'Sistiana', 'Arch of Constantine', 'Triggiano', 'Borgorose', 'Pennabilli', 'Enna', 'Losine', 'Apricale', 'Casalgrande', "Varano de' Melegari", 'Castellana Caves', 'Artena', 'Domodossola railway station', 'Alì', 'Corleto Monforte', 'Predosa', "Prata d'Ansidonia", 'Lentini', 'Cermignano', 'Vigodarzere', 'Sacro Cuore di Gesù agonizzante a Vitinia', 'Bernalda', 'Villar Dora', 'Paglieta', 'Desio', "Sant'Egidio del Monte Albino", 'Otranto', 'Trissino', 'Valle Vigezzo', 'Pumenengo', 'Province of Avellino', 'Montodine', 'Santa Maria Maddalena', 'Cremona railway station', 'Corinaldo', 'Arrone', 'Fontevivo', 'Ramiseto', 'Arcevia', 'Ossana', 'Scalea', 'Province of Sassari', 'Montiano', 'Fallo', 'Fabro', 'Naro', 'Neviglie', 'Brallo di Pregola', 'Tellaro', 'Giave', 'Jaufenpass', 'Giussago', 'Caneva', 'Asiago', 'Lavagna', 'Castelfranco Veneto', "Casasco d'Intelvi", 'Valle Lomellina', 'Torano Castello', 'Laino Castello', 'Meldola', 'Trento railway station', 'Firenze Campo di Marte railway station', 'Reifenstein Castle', 'Verona Villafranca Airport', 'Montecilfone', 'Santena', 'Balzola', 'Vezzi Portio', 'Pontedera', 'Gorgonzola, Milan', 'Marciana Marina', 'Montecosaro', 'Cirimido', 'Chiauci', 'Vitulazio', 'Licata Airfield', 'Crevalcore', 'San Colombano Belmonte', 'Caselle Lurani', 'Gerola Alta', 'Castellabate', 'Civitaquana', 'Cembra', 'Province of Caltanissetta', 'Teatro Rossini, Pesaro', "Canneto sull'Oglio", 'Montallegro', 'Amaseno', 'San Luigi dei Francesi', 'Seui', 'Torregrotta', 'Mareno di Piave', 'Fidenza', 'Caldogno', 'Montabone', 'Novi Velia', 'Bagnara Calabra', 'University of Treviso', 'Grammichele', 'Madone', 'Tarzo', 'Termini Airfield', 'Linate Airport disaster', 'Livorno Centrale railway station', 'Rocca di Mezzo', 'Rosazza', 'Pellio Intelvi', 'Sennariolo', 'Pont de Pierre', 'Sesvenna Alps', 'Santa Cristina Gherdëina', 'Groscavallo', 'Melendugno', 'Langosco', 'Casella', 'Gifflenga', 'Calto', 'Casaletto Spartano', 'San Callisto', 'Ostana', 'Arola', 'Cancellara', 'Caposele', 'Mores, Sardinia', 'Pioltello', 'Endine Gaiano', 'Ravascletto', 'Torre Bormida', 'San Germano Chisone', 'Sagama', 'Salzano', "Sant'Angelo dei Lombardi", 'Circuito di Cagliari', "Rocchetta Sant'Antonio", 'Capodrise', "Dent d'Hérens", 'Taggia', 'Brugnato', 'Barumini', 'Auer', 'Falerone', 'Tirano railway station (RFI)', 'Grumello Cremonese ed Uniti', 'Villamagna', 'San Polo di Piave', 'Ailoche', 'Province of Isernia', 'Condrò', 'Gradoli', 'Conco', 'Pereto', 'Pianoro', 'Mercatello sul Metauro', 'San Teodoro, Sardinia', 'San Sebastiano Curone', 'Serrenti', "Isola del Gran Sasso d'Italia", 'Ulten', 'Gioi', 'Fanano', 'Arcugnano', 'Capistrano, Calabria', 'Pomponesco', 'San Giuliano Terme', 'Berra', 'Sezze', 'Moos in Passeier', 'Ozzano Monferrato', 'Misano World Circuit Marco Simoncelli', 'Zerfaliu', 'Accademia di Belle Arti Firenze', 'University for foreigners of Reggio Calabria, main campus', 'Abriola', 'Casalgrasso', 'Galera Airfield', 'Marano sul Panaro', 'Nettuno Airfield', 'Falzarego Pass', 'Gambasca', 'Salassa', 'Sampeyre', 'Daone', 'Piazzolo', 'Castiglione del Lago', 'Calalzo di Cadore', 'Ruvo del Monte', 'Piz Badile', 'Basilica of San Clemente', 'Magherno', 'Contarelli chapel', 'Santa Flavia', 'Savoia di Lucania', 'Veniano', 'Fonte', 'Agra', 'Centuripe', 'Lajen', 'Tusciano', 'Marcon', 'Acquaformosa', 'Garbagna Novarese', 'Miglianico', 'Casentino', 'Carinola', 'Ciampino', 'Santa Maria delle Carceri', 'Bondo, Trentino', 'Serra San Bruno', 'Bleggio Inferiore', 'Stradella, Lombardy', 'Prossedi', 'Brione', 'Oratorio dei Filippini', 'Ponte Salario', 'Fratte Rosa', 'Castel Castagna', 'Piazza Dante', 'Pratola Serra', 'Cavenago di Brianza', 'Malnate', 'Medicina Radio Observatory', 'Udine railway station', 'Talana', 'Alice Castello', 'Cartosio', 'Bianzè', 'Valvasone', 'Turi, Apulia', 'Osilo', 'Turriaco', 'Avolasca', 'Tigliole', 'Cornelia', 'Capoliveri', 'Mongiardino Ligure', 'Bonnanaro', 'San Giovanni in Persiceto', 'Melegnano', 'Pinzolo', "Cappella de' Picenardi", "Castelletto d'Erro", 'Challand-Saint-Anselme', 'Castel Campagnano', 'Ridnauner Bach', 'Pianengo', 'Bagnara di Romagna', 'Prali', 'Sala Monferrato', 'Aiguille de Bionnassay', 'Caudium', 'Putignano', 'Chianni', 'Massazza', 'Campora', 'Ampezzo', "Incisa in Val d'Arno", 'Portico di Caserta', 'Molvena', 'Ercolano', 'Fusine', 'Peloritani', 'Daverio', 'Dasà', 'Zelbio', 'Medole', 'Rutino', 'Boves', 'Livo, Trentino', 'Val Di Stava Dam', 'Fossombrone', 'Salve', 'Settimo Rottaro', 'Filacciano', 'Castagneto Po', 'Cisliano', 'Sueglio', 'Cerzeto', 'Ruffia', 'Verdellino', 'Torrioni', 'Gagliole', 'Omegna', 'Cremosano', 'Ceri', 'Torre Pallavicina', 'Castelvecchio', 'Peccioli', 'Borgo Velino', 'Vallanzengo', 'Palazzo Porto', 'Piazzale Michelangelo', "Castiglione d'Orcia", 'Cerro Veronese', 'Portigliola', 'San Biase', 'Perletto', 'Aragona', 'Bolotana', 'Paitone', 'Peschici', 'Trovo', 'Pian di Scò', 'Gadoni', 'Cavallirio', 'Sassoferrato', 'University of Florence', "Sant'Omobono Terme", 'Caselle in Pittari', 'Venafrum', 'Canterano', 'Taurasi', "Cassina de' Pecchi", 'Olevano Romano', 'Mentana', 'Tronzano Lago Maggiore', 'Gambassi Terme', 'Marianum', 'Frassilongo', 'Carsoli', 'Venetico', 'Tornata', 'Mapello', 'Apecchio', 'Castione della Presolana', 'West Hingham', 'Old English Cemetery, Livorno', 'Castel Morrone', 'Chiuro', 'Moena', 'Brescia railway station', 'Borizzo Airfield', 'Assoro', 'Piverone', 'Bedollo', 'Saint-Denis', 'Martis', 'Cervo-San Bartolomeo railway station', 'Pontremoli', 'Belmonte Mezzagno', 'Costa Valle Imagna', 'Marmirolo', 'Ponte di Legno', 'Canino', 'Matris Domini Monastery', 'Rocca Imperiale', 'Recanati', 'Castello di Serravalle', 'Basilica della Santissima Annunziata del Vastato', 'Cattolica', 'Soriso', 'Brescello', 'San Giovanni di Gerace', 'Bergolo', 'Ternate, Lombardy', 'Santa Luce', 'Villalfonsina', 'Sciacca', 'Cesara', 'Pettorazza Grimani', 'San Salvatore in Lauro', 'La Loggia', 'Lula', 'San Martino ai Monti', 'Fiumalbo', 'Ronchi dei Legionari', 'Casargo', 'Spilimbergo', 'Annone Veneto', 'Faleria', 'Tufo', 'Corigliano Calabro', 'Cavaion Veronese', 'Bodio Lomnago', 'Prata Sannita', 'Manerba del Garda', 'Cassibile Airfield', 'Castelletto Merli', 'Gavi, Piedmont', 'Mazzano', 'Roccella Valdemone', 'Capalbio', 'Callabiana', 'Casalanguida', 'Montasola', 'Torrebruna', 'Pointe de Barasson', "Sant'Alfio", 'Tortolì', 'Bagheria', 'Rivarossa', 'Casole Bruzio', 'Roccavione', 'Biomedical University of Rome', 'Fiumicino', 'Morino', 'Bucciano', 'Curtarolo', 'Collevecchio', 'Fragagnano', 'Ghemme', 'Vallinfreda', 'San Ponso', 'Chiusano di San Domenico', 'Solarussa', 'Frabosa Soprana', 'Lardirago', 'Inzago', 'Roveredo in Piano', 'Gudo Visconti', 'Anela', 'Val Rezzo', 'Seminara', 'Besnate', 'Costa Vescovato', 'Loria, Veneto', 'Cannero Riviera', 'Passetto di Borgo', 'Casoria', 'Sella Pass', 'Ilbono', 'Orsara di Puglia', 'Mulazzano', 'Monte Cornaccione', 'Le Banca Airfield', 'Arizzano', 'Strevi', 'Province of Oristano', 'Sanremo railway station', 'Ovodda', 'Guardia Piemontese', 'Casalmaiocco', 'Fumane', 'Trausella', 'Sassari', 'Nimis', 'Lagonegro', 'Ghislarengo', 'Bagnacavallo', 'House of the Vestals', 'Soliera', 'Porto Recanati', 'Brembate', 'Castel Colonna', 'Motor Science University of Rome', 'Denno', 'Molinella', 'Alseno', 'Alsium', 'Cumiana', 'Orte', 'Schiavi di Abruzzo', 'Province of Perugia', 'Cagliari Elmas Airport', 'Trescore Cremasco', 'Pozza di Fassa', 'Terdobbiate', "Basilica of Sant'Eustorgio", 'Marineo', 'Riparbella', 'Azzone', 'Marina di Gioiosa Ionica', 'Ceppo Morelli', 'Fontanigorda', 'Gardena Ronda Express funicular', 'Montevarchi', 'Cinisi', 'Lisignago', 'Fiavè', 'Trebaseleghe', 'Uzzano', 'Attimis', 'Cavasso Nuovo', 'Corno Campascio', 'Robbio', 'Portici', 'Alagna Valsesia', 'Cavargna', 'Acquaviva Platani', 'Sovizzo', 'Province of Alessandria', 'Fiume di Girgenti', 'Cossogno', 'Binago', 'Camisano', 'Monza railway station', 'Nurri', 'Lugnano', 'Leporano', 'Follonica', 'Benetutti', 'Bonvicino', 'Ossi, Sardinia', 'Adrano', 'Samone, Trentino', 'Ficarazzi', 'Longobardi, Calabria', 'Pieve Fosciana', 'Casorate Primo', 'Rovegno', 'Monteciccardo', 'University of Calabria', 'Stignano', 'Sorrento', 'Dicomano', 'Chieti', "Misano di Gera d'Adda", 'Gioia dei Marsi', 'Pagnona', 'Berzo Demo', 'Ponte Galeria', 'Moncestino', 'Sossano', 'Costa Masnaga', 'Montafia', 'Montaldo Roero', 'Monteroni di Lecce', 'Coniolo', 'Bivona', 'Stornara', 'San Vitale', 'Cantalupo in Sabina', 'Mombercelli', 'Santa Lucia', 'Promano', 'Rosà', 'Piscina, Piedmont', 'Gazzo Veronese', 'Stenico', 'Traves, Piedmont', 'Avola', 'Tagliolo Monferrato', 'Ranzanico', 'Galbiate', 'Colle Umberto', 'San Floriano del Collio', 'Paderno Franciacorta', 'Salice Salentino', 'Solesino', 'Castello di Cisterna', 'San Prospero', 'Pertusio', 'Belgioioso, Lombardy', 'Capraia', 'Saint-Christophe', 'Loyola University Chicago Rome Center', 'Massa Marittima', 'PalaNorda', 'Monte Terminillo', 'Gorlago', 'Magliano Sabina', 'Osiglia', 'Padova railway station', 'Ginestra degli Schiavoni', 'Calabria', 'Tumulus of Montefortini', 'Gran Paradiso', 'Santa Maria in Vallicella', 'Stadio Vincenzo Presti', 'Vione', 'Cavriglia', 'University of Trieste', 'San Giuliano del Sannio', "Basilica of Sant'Andrea, Mantua", 'Forlì Airport', 'Pozzuolo del Friuli', 'Rivolto Airport', 'Castelleone di Suasa', 'Castello di Milazzo', 'Fanna', 'Cassola', 'Castel Bolognese', 'Santa Maria di Licodia', 'Modugno', 'Perdasdefogu', 'Bruneck', 'Monteleone di Spoleto', 'Brembilla', 'Albisola Superiore', 'Esterzili', 'Alliste', 'Castel Viscardo', 'Arlena di Castro', 'Portico e San Benedetto', 'Punt dal Gall Dam', 'Desana', 'Matelica', 'Lurano', 'Villabate', 'Mont Maudit', 'Reschen Pass', "Villanova sull'Arda", 'Alzate Brianza', 'Ridnauntal', 'Truccazzano', 'Bari Karol Wojtyła Airport', 'Monasterolo del Castello', 'Oneta, Lombardy', 'Finale Ligure', 'Trestina', 'Toritto', 'Rocca Pietore', 'Mottafollone', 'Pratomagno', 'Castellaneta', 'Gurro', 'Castilenti', 'Ginosa', 'Curti, Campania', 'Comignago', 'Sirente crater', 'Moltrasio', 'Castelnuovo Don Bosco', "Villa Sant'Antonio", 'Greccio', 'University Carlo Cattaneo', 'Marano di Napoli', 'Varena, Trentino', 'Villadeati', 'Stadio Olympica', "Sant'Agata dei Goti", 'Ripe, Marche', 'Roccabianca', 'Picerno', 'Salorno', 'Strembo', 'Lanciano', 'Bologna Guglielmo Marconi Airport', 'Crespina', 'Brisighella', 'Pietralunga', 'Scima da Saoseo', 'Roncola', 'Perinaldo', 'Campitello Matese', 'Rossano', 'Piz de Cressim', 'Montalto Pavese', 'Anticoli Corrado', 'Avegno, Liguria', 'Anversa degli Abruzzi', 'Fortore', 'Roio del Sangro', 'Visano', "Trinità d'Agultu e Vignola", 'Portoscuso', 'Mara, Sardinia', 'Ofenhorn', 'Naso', 'Montereale, Abruzzo', 'Pescopennataro', 'San Vincenzo Valle Roveto', 'San Bassano', 'Lotzorai', 'Tavagnasco', 'Panchià', 'Sacro Monte di Ghiffa', 'Fidenae', 'Almese', 'Coazzolo', 'Massa Lubrense', 'Monesiglio', 'Torchiarolo', "Serra d'Aiello", 'Freienfeld', 'Argenta', 'Santo Stefano di Camastra', 'San Benedetto Belbo', 'Ossuccio', 'European College of Parma', 'Zelo Surrigone', 'Vado Ligure', 'Vasia', 'Santa Cristina e Bissone', 'Predore', "Colle d'Anchise", 'Piedimonte Etneo', 'Gesico', 'Aosta', 'Rivoli Veronese', 'Santi Fabiano e Venanzio a Villa Fiorelli', 'Saint-Vincent', 'Castel San Vincenzo', 'Frasso Telesino', 'Cenate Sotto', 'Santa Severa', 'Cavarzere', 'Pavia', 'Fontaniva', 'Blello', 'Beverino', 'Spongano', 'Artimino', 'Alluvioni Cambiò', 'Bognanco', 'Fontanetto Po', 'Voltido', 'Carrù', 'Imola', 'Radicondoli', 'Selargius', 'Carpineto Sinello', 'San Benedetto in Perillis', 'Gratteri', 'Pienza', 'Margarita', 'Tartano', 'Lodè', 'San Michele di Ganzaria', 'Teora', 'Tortona', 'Castello della Manta', 'Feltre', 'Brezzo di Bedero', 'Rubiera', 'Cropalati', "Forza d'Agrò", 'Terruggia', 'Gonnosfanadiga', 'Santa Caterina Albanese', 'Motta Camastra', 'Ronsecco', 'Gualtieri', 'Esanatoglia', 'Tavernola Bergamasca', 'Abbadia San Salvatore', 'Scarlino', 'Ferno', 'Belvì', 'Corbetta, Lombardy', 'Locatello', 'Vallermosa', 'Usseaux', 'Borgolavezzaro', 'Treviglio', 'Pontedera Airfield', 'Corropoli', 'Milazzo', 'Monte Grappa', 'Borriana', "Sant'Abbondio", 'Piz Serra', 'Veggiano', 'Tammaro', 'Montalcino', 'San Pietro a Maida', 'Volta Mantovana', 'Courmayeur', 'Tordibetto', 'Stradella', 'Buti', 'Sacro Monte di Varallo', "Sant'Andrea di Conza", 'San Nazzaro, Campania', 'Don, Trentino', 'Mezzane di Sotto', 'Nuvolento', 'Temple of Portunus', 'Cropani', 'Passerano Marmorito', 'Villa Cornaro', 'Giovinazzo', 'Mazara del Vallo', 'Carcoforo', 'Piaggine', 'Cremenaga', "Sant'Anna d'Alfaedo", 'Molini di Triora', 'Gosaldo', 'Vaglia', 'Alanno', 'Madesimo', "Aquila d'Arroscia", 'Villa San Giovanni', 'Tocco Caudio', "Campo de' Fiori", 'Völs am Schlern', 'Meina', 'Orco Feglino', 'Prata di Pordenone', 'Gordona', 'Fuipiano Valle Imagna', 'Sesta Godano', 'Visciano', 'Palazzo Schio', 'Genoa Cristoforo Colombo Airport', 'Salò', 'Casanova Lonati', 'Casal Cermelli', 'English Cemetery, Florence', 'Carugate', 'Brenta, Lombardy', 'Villanova Canavese', 'Poggio San Lorenzo', 'Creazzo', 'Anza', 'Civate', 'San Marcello al Corso', "Fontaneto d'Agogna", 'Sovramonte', 'Chiuduno', 'Monterosso Almo', 'Cilento', 'Lozio', 'Trevenzuolo', 'Kanin', 'Scheggino', 'Itala', 'Piombino Airfield', 'Moschiano', 'Oleggio', 'Cenadi', 'Occhieppo Inferiore', 'Molise, Campobasso', 'Papasidero', 'Zagarolo', 'Aci Bonaccorsi', 'Nocera Terinese', 'Canneto Pavese', 'Roccaforte Mondovì', 'Rota Greca', 'Rapone', 'Triton Fountain', 'Cittadella', 'Arsiero', 'Valli del Pasubio', 'Sarezzano', 'Monastero di Vasco', 'Gravedona ed Uniti', 'Lucrinus Lacus', 'Pralormo', 'Province of Teramo', 'Medesano', 'Rosignano Marittimo', 'Cimini Hills', 'Rutigliano', 'Niardo', 'Pontifical Gregorian University', 'Pinarolo Po', 'Anchiano', 'Valfenera', 'Manarola', 'Sciolze', 'Stia', 'North Scituate', 'Capriolo', "Silvano d'Orba", 'Cereseto', 'Figline Vegliaturo', 'Candiolo', 'Stagno di Cagliari', 'Arvier', 'Ceriana', 'Telti', 'Montiglio Monferrato', 'Santa Maria Maggiore, Bergamo', 'Monte Giberto', 'Pachino', 'Trino', 'Campobasso', 'Villamar', 'Civitella Paganico', 'San Vito al Torre', "Gradisca d'Isonzo", "Monteforte d'Alpone", 'Nocera Inferiore', 'Teglio', 'Piossasco', 'Montegranaro', 'Villa Lagarina', 'Vicoli', 'Castor', 'Asciano', 'Castelspina', 'Costarainera', "Campo nell'Elba", 'Pievebovigliana', 'Albion', 'Ballabio', 'Foza', 'Mese', 'Roccamonfina', 'Pusiano', 'Pagliara', 'Cadegliano-Viconago', 'Roatto', "Cingia de' Botti", 'Mercatino Conca', 'Toblach', 'Monte Cavo', 'Granozzo con Monticello', 'Castelvecchio Subequo', 'Belluno railway station', 'Civitanova del Sannio', 'Rio Marina', 'Scrofiano', 'Ripacandida', 'Furtei', 'Auletta', 'Azzano Mella', 'Bressanvido', 'Castrezzato', 'Balocco', 'Ligurian Alps', 'Possagno', 'Mogliano Veneto', 'Baselga di Pinè', "San Paolo all'Orto", 'Carbognano', 'Massa', 'Postua', 'Casaloldo', 'Claino con Osteno', 'Nereto', 'Rocchetta di Vara', 'Portofino', 'Sgonico', 'Abetone', 'Beinette', 'Stresa', 'Naviglio di Paderno', 'Spineda', 'Lamezia Terme International Airport', 'Gino Lisa Airport', 'Ro', 'Vobbia', 'Bra, Piedmont', 'Sellero', 'Monclassico', 'Pontifical Lateran University', 'San Benedetto Ullano', 'Orbassano', 'Casaletto Lodigiano', 'San Giorgio Piacentino', "Romano d'Ezzelino", 'Piateda', 'Aversa', 'Province of Lecco', 'Biferno', 'Peltuinum', 'Oliveto Lario', 'Corleone', 'Mühlen in Taufers', "Crotta d'Adda", 'Cinque Terre, Italy', 'Casalciprano', 'Giavera del Montello', 'Ferla', 'Chiaramonti', 'Campo Carlo Magno', 'San Matteo', 'Campomaggiore', 'Oliva Gessi', 'Mount Vesuvius', 'Cornalba', 'Argusto', 'San Lorenzo in Banale', 'Montaldo di Mondovì', 'Riccia, Molise', 'Suasa', 'Rolo, Emilia-Romagna', 'Teatro Diego Fabbri in Forlì', "Sant'Atanasio", 'Malegno', 'Cercola', 'Sarre', 'Lodine', 'Tordandrea', 'Casorzo', 'Camparada', 'Magenta', 'Arzene', 'Baradili', 'Salerno railway station', 'Vogogna', 'Palazzo', 'Farindola', 'Bienno', 'Porto Tolle', 'Genova Sampierdarena railway station', 'Carisio', 'San Paolo Albanese', 'Borgomaro', 'Vizzola Ticino', 'Serramazzoni', "San Nicola dell'Alto", 'Borgiallo', 'University of Macerata', "San Mango d'Aquino", 'Alto', 'Pietraporzio', 'Fiumedinisi', 'Servigliano', 'Dualchi', 'Zocca', 'Castagnole Monferrato', 'Cortandone', 'Fénis Castle', 'Bregnano', 'Pietrabruna', 'Montalto Ligure', 'San Giorgio della Richinvelda', 'Province of Cuneo', 'Manciano', 'Ariano Irpino', 'San Martino', 'Assolo', 'Castegnato', 'Panarea', 'Curiglia con Monteviasco', 'Canossa', 'Sacro Monte di Ossuccio', 'Santa Passera', 'Il Caravaggio International Airport', 'Borgoricco', 'Domicella', 'San Giovanni in Oleo', 'Corniglio', 'Trappeto', 'Castelverrino', 'Tregnago', 'Aosta Airport', 'Rassa, Piedmont', 'Limana', 'Lozzolo', 'Oriolo Romano', 'Concamarise', 'Serrapetrona', 'Silvi', 'Principality of Taranto', 'Mandanici', 'Cittiglio', 'Guspini', 'Grognardo', 'Bregano', 'Pirelli Tower', 'Bacoli', 'Piz della Forcola', 'Piozzo', 'Craveggia', 'Villimpenta', 'Oliena', 'Colle Fauniera', 'Capriano del Colle', 'Cerveno', 'Bormio', 'Vimercate', 'Isolino di San Giovanni', 'Florence Airport, Peretola', 'Castellamonte', 'San Vito al Tagliamento', 'Barcis', 'Goito', 'Valloriate', 'Barga', 'Ottati', 'Santa Margherita Ligure', 'Nonantola', 'Perfugas', 'Ascoli Piceno', 'Crecchio', 'Cercino', 'Mattarello', 'Bubbio', 'Smerillo', 'Monte Vidon Combatte', 'Wasps Stabia Rugby', 'Imer', 'Vancimuglio', 'Antey-Saint-André', 'Karerpass', 'Nocara', 'Supino', 'Barletta', 'Darè', 'Maida, Calabria', 'Pistoia railway station', "Torre de' Passeri", 'Cinquemiglia', 'Nemoli', 'Rocca San Felice', "Basilica of San Francesco d'Assisi", 'Siligo', 'San Sebastiano al Vesuvio', 'San Donaci', 'Torralba', 'Picciano', 'Podenzano', 'Nigerpass', 'Arsoli', 'Sulden', 'Val di Noto', 'Oggebbio', 'Montecreto', 'Cardano al Campo', 'Riva del Garda', 'Vo', 'Italian Adventist College Villa Aurora', 'Vellezzo Bellini', 'Naturns', 'Aviano', 'Villanova Solaro', 'Busca', 'Nespolo', 'Colle La Croce', 'Piz Tremoggia', 'Province of Catania', 'Casape', 'Chianciano Terme', 'Brixen', 'Altomonte', 'Monticelli', 'Caccuri', 'Vittoria, Sicily', 'Cerda', 'Province of Terni', 'Adria International Raceway', 'Montano Antilia', 'Pizzo Quadro', 'Cunevo', 'Mascali', 'Piz Combul', 'Botticino', 'Seppiana', 'Sassofeltrio', 'Poggio a Caiano', 'Codroipo', 'Germasino', 'Martell', 'Cigole', 'Legnago', 'Vicopisano', 'Montemale di Cuneo', 'Badalucco', 'Terelle', 'Maratea', 'Genova Brignole railway station', "Pizzo dell'Alpe Gelato", 'Terrasini', 'Capo Colonna', 'Camposano', 'Montespertoli', 'Santa Costanza', 'Besana in Brianza', 'Oppido Mamertina', 'San Marcellino', 'Palmariggi', 'Torrazzo', "Ponte dell'Olio", 'Santa Maria di Sala', 'Stra', 'Orino, Lombardy', 'Loranzè', 'Pantigliate', 'Arcole', 'Pressana', 'Hafling', 'Marrubiu', "Cassano all'Ionio", 'Villa Guardia', 'Castrovillari', 'Barzago', 'San Pancrazio Airfield', 'Paullo', 'Sala Bolognese', 'Isola Vicentina', 'Buonalbergo', 'Roccascalegna', 'Sottomarina', 'Sersale', 'Somma Vesuviana', 'Torrile', 'Roccafluvione', "St Andrew's Church, Rome", 'Saint-Marcel, Aosta Valley', 'Grugliasco', 'Praia a Mare', 'Ortovero', 'Stazzema', 'Lessolo', 'Luogosanto', 'Filago', 'Casamaggiore', 'Russi', 'Laveno-Mombello', 'Cloz', 'Vallesaccarda', 'Masate', 'Montecatini Val di Cecina', 'Eisacktal', 'Bertonico', 'Barrafranca', 'Lazise', 'Zoldo Alto', 'Longare', 'Pagno', 'Corte Palasio', 'Grosio', 'Olevano di Lomellina', 'Volpiano', 'Carovilli', 'Altamura', 'Piz da las Trais Linguas', 'Bevilacqua', 'Cittareale', 'Cozzo', 'Casnigo', 'Bobbio Abbey', 'Gerocarne', 'Exilles', 'Villastellone', 'Piazza Saffi', "Torre de' Roveri", 'Chiavenna', 'Montorio al Vomano', 'Quarata', 'Sarno', 'Borno', 'Soleminis', 'Napoli Mergellina railway station', 'Gioia del Colle', 'Pieve di Cadore', 'Perito', 'San Lazzaro di Savena', 'Castropignano', 'Castiglione dei Pepoli', 'Regions of Italy', 'Martignano', 'Arcinazzo Romano', 'Monteprandone', 'Polia', 'Alagna', 'Autodromo di Mores', 'Bardonecchia', 'Campagnola Cremasca', 'Vigone', 'Buja', 'Pollenza', 'Tramonti di Sopra', 'Chamois', 'Santo Stefano Rotondo', 'Duran Pass', 'Piana', 'Coghinas', 'Teti', 'Pontassieve', 'Aiello del Sabato', 'Castelcovati', 'Gadesco-Pieve Delmona', 'Campi Bisenzio', 'University of Camerino', "Corigliano d'Otranto", 'Serralunga di Crea', 'Santa Maria in Aquiro', 'Biccari', 'San Barnaba', 'Majano', 'Bocconi University', 'Senigallia', 'Missanello', 'Irgoli', 'Garaguso', 'Sarule', 'San Mauro Marchesato', 'Torri di Quartesolo', 'Valfloriana', 'Asigliano Vercellese', 'Goriano Sicoli', 'Villar Pellice', "Castel d'Ario", "Brignano Gera d'Adda", 'Nembro', 'Akrillai', 'Monte Tremalzo', 'Carmignano di Brenta', 'Porta Leoni', 'Fabbrica Curone', 'Roddi', 'Rocca Massima', "Villa Sant'Angelo", 'Aquino', 'Borgosesia', 'Tirol Castle', 'Villanova Mondovì', 'Salmour', 'Arconate', 'Artogne', 'San Floro', 'Torre dei Gualandi', 'Suor Orsola Benincasa University of Naples', 'Ponte Sisto', 'Sarteano', 'Vomano', "Mazzarrà Sant'Andrea", 'Cape Palinuro', 'Lignano Sabbiadoro', 'Sorradile', 'Mason Vicentino', 'Besenzone', 'Casina Pio IV', 'Brenzone', 'Santa Balbina', 'Collepardo', 'Govone', 'Monte Porzio Catone', 'Caltrano', 'Fortunago', 'Scanno', 'Tavernole sul Mella', 'Madonna del Sasso, Piedmont', 'Prascorsano', 'Berzo San Fermo', 'Acerno', 'San Pietro Infine', 'Piz Sesvenna', 'Nurachi', "Sant'Antimo", 'Telve', 'Province of Matera', 'Taino, Lombardy', 'University of Milan', "Pietra de' Giorgi", 'Nus', 'Minturno', 'Baricella', 'Castel Goffredo', 'Roletto', 'Refrontolo', 'Qualiano', 'Poggiofiorito', 'Domus Sanctae Marthae', 'Comeglians', 'Bellegra', 'Albertis Castle', 'Miglierina', 'Radda in Chianti', 'Grottazzolina', 'Samassi', 'Savigliano', 'Gualdo Cattaneo', 'Polesine Parmense', 'Tassarolo', 'Casacalenda', 'Dumenza', 'Seborga', 'Vizzini', 'Santarcangelo di Romagna', 'San Fratello', 'Monselice', 'Savignano sul Panaro', 'Socchieve', "San Paolo a Ripa d'Arno", 'Filighera', 'Lodi Vecchio', 'Mont Blanc de Courmayeur', 'Veroli', 'Suno', 'Sestola', 'Verretto', 'Santa Maria del Carmine, Pavia', 'Roncello', 'Marta', 'Pietrarubbia', 'Caorso', 'Castello del Matese', 'Dorsino', 'Falconara Airport', 'Cuneo', 'Voltone Airfield', 'Campli', 'Patù', 'Trinitapoli', 'Carbone, Basilicata', 'Curinga', 'Monsano', 'Ternengo', 'Agostino Gemelli University Polyclinic', 'Ritten', 'Livigno Alps', 'Santo Stefano Ticino', 'Letino', 'Lake Iseo', 'Lusia', 'Buscemi', 'Francica', 'Vedeseta', 'Piazza Brembana', 'Lucera Castle', 'Fornace', 'Guardiaregia', 'Leggiuno', 'Feletto', 'Canale Monterano', 'Latina Nuclear Power Reactor', 'Fano', 'EUR, Rome', "Pozzo d'Adda", 'Grottaferrata', 'Sedegliano', 'Solarolo', 'Rovetta', 'Bulzi', 'San Martino sulla Marrucina', 'Cerreto Castello', 'Bardolino', 'Cleto', 'Caggiano', 'Licciana Nardi', 'Agna', 'Castles of South Tyrol', 'Formignana', 'Moscazzano', "Castel Sant'Elia", 'ISTAO - Istituto Adriano Olivetti Ancona, main campus', 'Province of Massa and Carrara', 'Cagnò', 'Province of Campobasso', 'Plesio', 'Balme', 'Zuclo', 'Perego', 'Licodia Eubea', 'March of Montferrat', 'Piatto', 'Gonnosnò', 'Crandola Valsassina', 'Luttach', 'Terranova dei Passerini', 'Riva Valdobbia', 'Corsico', 'Cima di Rosso', 'Cattolica Airfield', 'Teor', 'Castagnaro', 'Province of Taranto', "Colle di Val d'Elsa", 'Acciano', 'Castrolibero', 'Saronno', 'Province of Como', 'Mazzo di Valtellina', 'Panicale', 'Bettola', 'Roccapiemonte', 'Verzegnis', 'Budoia', 'Jacurso', 'Charvensod', 'Comelico', 'Province of Fermo', 'Desulo', 'Palazzo San Gervasio', 'Limena', 'Cosseria', 'Cefalù', "Trajan's Market", 'Occhieppo Superiore', 'Brancacci Chapel', 'Nord-Est', 'Temple of Saturn', 'Monticiano', 'Matera', 'Vahrn', "Vezza d'Alba", 'Migliarino', 'ACI Vallelunga Circuit', 'Palazzo Canavese', 'Olbia', 'Canistro', 'Migliaro', 'Rome Viterbo Airport', 'San Vito', 'Marmolada', 'Amalfi', 'Carobbio degli Angeli', 'Stromboli', 'Altavilla Monferrato', "Sant'Antioco", 'Maslianico', 'Magliolo', 'Marcellinara', "Piacenza d'Adige", 'Brusson', 'Fino del Monte', "Motta d'Affermo", 'Aritzo', 'Santa Maria Hoè', 'Petriolo', 'Savona', 'Palmi', 'Graffignana', 'Calasca-Castiglione', 'Carate Urio', 'Ossona', 'Luvinate', 'Ospedaletto Lodigiano', 'Urtijëi', 'Mercato Saraceno', 'Salcito', 'Province of Viterbo', 'Centro Svizzero Milano', 'Paganica', 'Re', "Sant'Agata Feltria", 'Zoppè di Cadore', 'Pancalieri', 'Arena, Calabria', 'Castelvisconti', 'Carbonia, Sardinia', 'Sanza', 'Scorrano', 'Isso, Lombardy', 'La Maddalena', 'Presolana', 'Cellatica', 'Riace', "Crast' Agüzza", 'Borgone Susa', 'Segni', 'Frassinello Monferrato', 'Sarezzo', 'Roverè della Luna', 'Pizzone', 'Lucoli', 'Rivotorto', 'San Menaio', 'Marconia', 'Pojana Maggiore', 'Cuasso al Monte', 'San Paolo di Civitate', 'Margherita di Savoia, Apulia', 'Abruzzo Airport', 'Anghiari', 'Albiano', 'Varano Borghi', 'Teverola', 'Muro Lucano', 'Casalattico', 'Marzi', 'Istrana', "Chiusano d'Asti", 'Venafro', 'Busalla', 'Sale, Piedmont', 'Palmoli', 'Rialto, Liguria', "Barano d'Ischia", 'Menconico', 'Campoformido', 'Montopoli di Sabina', 'Castellanza', 'Daiano', 'Ronzo-Chienis', 'Italian Met Office Airport', 'Oderzo', 'Villareggia', 'Pieve di Cento', 'Pompiano', 'Marzano di Nola', 'Orvieto', 'Fosciandora', 'Sclafani Bagni', 'Montemesola', 'Basilica di Saccargia', 'Artegna', 'Lapedona', 'Isola Rizza', 'Marcedusa', 'Châtillon', 'Cima della Bondasca', 'Pons Cestius', 'Sarmede', 'Tre Cancello Landing Strip', 'Montano Lucino', 'Splügen Pass', 'Landiona', 'Navelli', 'Selva di Progno', 'Chieti railway station', 'Bresso Airport', 'Castel di Lucio', 'Baldissero Torinese', 'Silvano Pietra', 'Bellavista', 'Palagiano', 'Sabbio Chiese', 'Bavaria', 'Salasco', 'Isola del Cantone', 'Sambuca Pistoiese', 'Castel di Iudica', 'Carlazzo', 'Solbiate Arno', 'Carate Brianza', 'Sacrofano', 'Isola del Giglio', 'Magnano in Riviera', 'Borgoforte', 'Montjovet', 'Firmo', 'Sperlinga', 'Carapelle', 'Morano sul Po', 'Zapponeta', 'Camigliano', 'Pfelderer Tal', 'Torcegno', 'Santa Maria in Via Lata', 'Gildone', 'Predil Pass', 'Gallarate railway station', 'Colleretto Giacosa', 'Occhiobello', 'Sulzano', 'University of Basilicata', 'Province of Novara', 'Casalromano', 'Bussero', 'Agliano', 'Brandico', 'Gavia Pass', 'Caprile', 'Taormina', 'Samolaco', 'Cantalupa', 'Castelnuovo Cilento', 'Novate Mezzola', 'Grandes Jorasses', 'Motto della Tappa', 'Lusigliè', 'Basilica di Santa Maria dei Servi', 'Rocca di Cambio', "Montefiore dell'Aso", 'Aiguille des Angroniettes', 'Cornino', 'Termini', 'Presenzano', 'Alia', 'St. Pankraz', 'Napoli Afragola railway station', 'Rogliano', 'Corte Brugnatella', 'Stadio Comunale di Monigo', 'Piz de Setag', 'San Pietro in Gu', 'Rivalba', 'Carenno', 'Ceriano Laghetto', 'Montecoronaro', 'Castagnito', 'Orbetello', 'Pignola', 'Giovo', 'Gignese', 'Nordend', 'Capralba', 'Puglianello', 'Celle di Macra', "Sant'Angelo di Piove di Sacco", 'Bari', 'Vinchio', 'Santa Marinella', 'Zuccarello', 'Fontechiari', 'Rivoli, Piedmont', 'Montecorice', 'Treiso', 'Pozzol Groppo', 'Ari', 'Scilla', 'San Mauro Torinese', 'Strona', 'Pietravairano', 'Vernio', 'Valdidentro', 'Jenesien', 'Gavinana', 'Serra San Quirico', 'Calabritto', 'Decollatura'}
            Answers = 9899, P = 0.000101, R = 1.000000, F1 = 0.000202
          } [0.198s]
          Answers = 9899, P = 0.000101, R = 1.000000, F1 = 0.000202
        } [0.199s]
        Checking schema 31 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 144
            Final Answer: {'2003 David di Donatello Awards', '1974 David di Donatello Awards', '2006 David di Donatello Awards', '6th G7 summit', 'War of the First Coalition', '1970 David di Donatello Awards', '2004 David di Donatello Awards', 'Battle of Aquilonia', '1934 FIFA World Cup', '1981 David di Donatello Awards', 'Pizzolungo bombing', 'Battle of Capua', 'Po Valley raid', '1995 David di Donatello Awards', '1979 David di Donatello Awards', 'Gothic War', '1983 David di Donatello Awards', '1971 David di Donatello Awards', '1973 David di Donatello Awards', '1968 David di Donatello Awards', 'War of the Polish Succession', 'Social War', 'Battle of San Romano', '1980 David di Donatello Awards', '1966 David di Donatello Awards', '1960 David di Donatello Awards', '2005 David di Donatello Awards', 'Italian War of 1499–1504', 'Italian Wars', 'Italian plague of 1629–1631', '2012 David di Donatello Awards', 'Battle of Augusta', '1993 David di Donatello Awards', 'Battle of Calliano', '1987 David di Donatello Awards', 'Anglo-Dutch Wars', 'Fascist and anti-Fascist violence in Italy', '1986 David di Donatello Awards', 'Adriatic Campaign of World War II', 'Third Servile War', '1963 David di Donatello Awards', 'Battle of Cerignola', '1991 Rome summit', '2010 David di Donatello Awards', '1988 David di Donatello Awards', 'Battle of Lake Vadimo', 'Austro-Prussian War', 'Corto Dorico National Film Competition', 'Battle of Ticinus', '20th G7 summit', 'Battle of Caravaggio', 'War of the League of Cognac', 'Siege of Capua', 'Battle of Pavia', '1978 David di Donatello Awards', 'Italian War of 1521–26', 'Battle of the Cremera', 'Battle of the Trebia', 'Monte la Difensa', '2000 David di Donatello Awards', 'Franco-Spanish War (1635–1659)', 'Battle of Lake Trasimene', 'Battle of Velletri', 'Battle of Cisterna', "Battle of P'ohang-dong", 'Battle of the Silarus', 'Bernhardt Line', 'Battle of Grumentum', '1985 David di Donatello Awards', '1958 David di Donatello Awards', '1999 David di Donatello Awards', 'Italian War of 1551–1559', 'War of the Fifth Coalition', '1990 FIFA World Cup', 'Death of Cristina and Violetta Djeordsevic', 'Piedmontese Civil War', 'Neapolitan War', '1964 David di Donatello Awards', '1959 David di Donatello Awards', '27th G8 summit', 'Battle of Zappolino', 'Battle of the Colline Gate', '1992 David di Donatello Awards', 'Battle of the Mincio River', 'Battle of Trebbia', 'Battle of Piave River', 'Samnite Wars', 'Battle of Carpi', '1991 David di Donatello Awards', '1996 David di Donatello Awards', '1956 David di Donatello Awards', '2001 David di Donatello Awards', 'Italian unification', '1989 David di Donatello Awards', 'Battle of Garigliano', '1982 David di Donatello Awards', '1962 David di Donatello Awards', '2009 David di Donatello Awards', 'Hundred Days', '1967 David di Donatello Awards', 'Italian irredentism', 'Battle of Mucellium', '1977 David di Donatello Awards', 'Italian War of 1542–1546', 'Battle of Ruvo', '1975 David di Donatello Awards', 'African campaigns of World War II', '2011 David di Donatello Awards', '2002 David di Donatello Awards', 'Battle of Palestro', 'Moro River Campaign', '1965 David di Donatello Awards', '35th G8 summit', 'War of the League of Cambrai', '1998 David di Donatello Awards', 'War of the Third Coalition', '1990 David di Donatello Awards', 'Italian campaign of 1524–1525', 'Battle of Monte Castello', 'Battle of Lautulae', '1972 David di Donatello Awards', 'Italian invasion of France', '2002 Rome summit', '1997 David di Donatello Awards', 'Aragonese-French Wars', 'Battle of Canusium', 'Italian War of 1494–1498', 'Via Giotto in Foggia building collapse', '1994 David di Donatello Awards', 'Linor Abargil rape', '1957 David di Donatello Awards', 'First Anglo-Dutch War', '13th G7 summit', '2008 David di Donatello Awards', 'Battle of Mantrap Wood', 'Italian Campaign', 'Mediterranean and Middle East theatre of World War II', '1969 David di Donatello Awards', '1976 David di Donatello Awards', '2007 David di Donatello Awards', '1961 David di Donatello Awards', '1984 David di Donatello Awards'}
            Answers = 142, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 142, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 32 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 33 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.partially_containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Mediterranean Sea'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 34 / 166: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.armed_forces'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:military.military_combatant.armed_forces ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:military.military_combatant.armed_forces ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italian Army'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 35 / 166: {
          [('Main', '==', 'm.03rjj', ['fictional_universe.fictional_setting.universe'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.universe ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.universe ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {"JoJo's Bizarre Adventure"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 36 / 166: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 10
            Final Answer: {'1896 Summer Olympics', '2012 Summer Olympics', '2008 Summer Olympics', '1980 Winter Olympics', '1900 Summer Olympics', '1936 Summer Olympics', '2010 Winter Olympics', '1948 Winter Olympics', '2002 Winter Olympics', '1952 Summer Olympics'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 37 / 166: {
          [('Main', '==', 'm.03rjj', ['exhibitions.exhibition_subject.exhibitions_created_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'WoMen in Africa - No Color One Color'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 38 / 166: {
          [('Main', '==', 'm.03rjj', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 135
            Final Answer: {'Good Evening, Ms Campbell', 'Caro diario', 'I, the Other', 'Inkheart', 'Fortunella', 'The Name of the Rose', 'Stealing Beauty', 'Poveri ma belli', "L'ombrellone", 'Tragic Hunt', 'The Beast with Five Fingers', "Manuale d'amore", 'Shoeshine', 'What Scoundrels Men Are!', 'Il Mattatore', 'Il Postino: The Postman', 'The Red Violin', 'Cameriera bella presenza offresi...', 'Cops and Robbers', 'The Ignorant Fairies', 'The Magistrate', 'The Unknown Woman', 'Enchanted April', 'Sunflower', 'Purple Noon', 'My House in Umbria', "Once You're Born You Can No Longer Hide", 'Coins in the Fountain', 'The Scientific Cardplayer', 'The Lizzie McGuire Movie', 'The Bourne Supremacy', 'Three Strangers in Rome', 'Il signor Max', 'Cemetery Man', 'Half-Rate Honeymoon', 'Rome, Open City', 'Captain America: The First Avenger', 'Images in a Convent', 'The Easy Life', 'The English Patient', 'The Biggest Bundle of Them All', 'The Starlit Garden', 'A Good Woman', 'A Farewell to Arms', "Nella città l'inferno", 'In Love and War', 'Amarcord', 'An Average Little Man', 'Persiane chiuse', '1900', 'Don Camillo in Moscow', 'Arrivederci Roma', 'Wanda la peccatrice', 'The Italian Job', 'Il vedovo', 'Letters to Juliet', 'Story of a Love Affair', 'The Working Class Goes to Heaven', 'Flame and the Flesh', 'The Talented Mr. Ripley', 'Escape by Night', 'Romeo and Juliet', 'The Last Judgement', 'The Fallen', 'I Am David', 'What Did You Do in the War, Daddy?', 'The Overcoat', 'Where Angels Fear to Tread', 'Megiddo: The Omega Code 2', 'Good Morning, Night', 'The Lady Without Camelias', 'I ragazzi di via Panisperna', 'The Mountain Calls', 'Flesh and Blood', 'Il Commissario Pepe', 'Best of Youth', 'Saturn in Opposition', 'For Your Eyes Only', 'The Great War', 'The Bandit', 'Man on Fire', 'Estate Violenta', 'Two Mafiamen in the Far West', 'Paisan', 'Condorman', 'Life Is Beautiful', 'To Live in Peace', 'Clarkson: Italian Job', 'The Sign of Venus', 'Identification of a Woman', 'Don Camillo', 'Swept Away', 'La Fabuleuse aventure de Marco Polo', "Madigan's Millions", 'Everybody Go Home', 'What Time Is It?', 'Un amore perfetto', 'Facing Windows', 'The Spy Who Loved Me', 'The Widow', 'Senza pietà', "Ripley's Game", 'Il Grido', 'Three Girls from Rome', 'The Last Kiss', 'Only You', 'La terrazza', 'The Fascist', 'Quantum of Solace', 'I mostri', 'Anna', 'Stromboli', 'Celluloide', 'Marriage Italian-Style', 'Le Amiche', "Von Ryan's Express", 'A Question of Honour', 'Big Deal on Madonna Street', 'Pane, amore e...', 'Allonsanfàn', 'The Little Devil', 'Le Notti di Cabiria', 'The Family', 'Captain America', 'Roaring Years', 'Pokémon Ranger and the Prince of the Sea: Manaphy', 'Alfredo, Alfredo', 'Gidget Goes to Rome', 'The Traffic Policeman', 'Genova', 'Un maledetto imbroglio', 'Miracle at St. Anna', 'The Flame and the Arrow', 'Sole nudo', 'The Organizer'}
            Answers = 135, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 135, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 39 / 166: {
          [('Main', '==', 'm.03rjj', ['media_common.netflix_genre.titles'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 701
            Final Answer: {'The House of Clocks', 'Divorce, Italian Style', 'City of the Living Dead', 'Gorbaciof', 'Manhattan Baby', 'Sacred Silence', 'Find a Place to Die', 'Gladiators Seven', 'Il Generale della Rovere', "Rahil's Secret", 'Wax Mask', 'Medley', 'Two Suitcases', "I've Seen Maradona", 'The Canterbury Tales', 'Summer Night', 'The Adventures of Pinocchio', 'Notes of Love', 'Sunflower', "The Case of the Scorpion's Tail", 'Naked You Die', 'Milano Rovente', 'Shelter Me', 'The Mother of Tears', 'La commare secca', 'Princesa', 'Benito', 'Close to Jesus: Judas', 'Not of this World', 'Street Law', 'To Want to Fly', 'Open Letter to the Evening News', 'The Giallo Collection: The Bloodstained Shadow', 'The Four Times', 'Uno Bianca', 'The Giant of Metropolis', 'Children of Hannibal', 'The Way We Laughed', 'Quest for the Mighty Sword', 'Rome, Open City', 'The Wide Blue Road', 'Top Girl', 'Investigation of a Citizen Above Suspicion', 'Close to Jesus: Joseph of Nazareth', 'La moglie più bella', 'The First Beautiful Thing', 'Cats of Rome', 'Mondo cane', 'Death Rides a Horse', 'Thor the Conqueror', 'Conquest', 'Café Express', 'She', 'Street War', 'Steam: The Turkish Bath', 'The Beyond', 'Il bidone', 'The Hanging Woman', 'Luciano Ercoli: Death Walks at Midnight', 'The Virgo, The Taurus and The Capricorn', 'Fatal Charm', 'The Monster', 'I Vampiri', 'Hercules Against the Barbarians', 'Bread and Tulips', 'Fists in the Pocket', 'The Magic of Fellini', 'Without Conscience', 'La Luna', 'Concerto di Natale with Jose Carreras', 'Cut and Run', 'Ginger and Cinnamon', "Fellini's Casanova", 'Women in Cellblock 7', 'The Day the Sky Exploded', 'Jessica', 'Malèna', 'The Sinful Nuns of St. Valentine', 'Great Leaders of the Bible', 'Il Posto', 'The Spectator', 'Breath', 'Knives of the Avenger', 'My Name is Nobody', 'Berlinguer I Love You', 'Passione', 'The Day of the Cobra', 'Il Divo', 'Passion', 'Back Home Tomorrow', 'The Passion of Joshua the Jew', 'The House on the Edge of the Park', 'Flatfoot in Africa', 'Cottolengo', 'Deep Red', 'Robbery Roman Style', 'Giovannona: Long-Thigh', 'La prise de pouvoir par Louis XIV', 'La Terra Trema', 'Immortal', 'But Forever in My Mind', 'One Hundred Nails', 'The Big Alligator River', 'Life Is Beautiful', 'The Children Are Watching Us', 'White Slave', "Don't Look in the Attic", "Don't Touch the White Woman!", "Fellini: I'm a Born Liar", 'Padre Pio: Miracle Man', 'Orchestra Rehearsal', 'Cold Eyes of Fear', 'Son of the Pink Panther', 'Once Upon a Time in the West', 'The Youngest Son', 'Love Meetings', 'What Have You Done to Solange?', 'Roma', 'La Morte Negli Occhi del Gatto', 'Short Night of the Glass Dolls', 'Zombie Holocaust', 'Seven Blood Stained Orchids', 'Escape from Death Row', 'Beast with a Gun', 'The Inheritance', 'Roy Colt and Winchester Jack', 'Contraband', 'The Soul Keeper', 'Facing Windows', 'Roma Citta Libera', 'Seven Doors to Death', 'Catacombs', 'Double Game', "L'Alcova", "Don't Move", 'The Killer Must Kill Again', 'Brother Sun, Sister Moon', 'Bread and Chocolate', 'The Sky Is Falling', 'Killing Birds', 'Blood and Black Lace', 'Mid-August Lunch', 'Mondo Cane 2', 'Marcello Mastroianni: I Remember', 'Marriage Italian-Style', 'The Voyage', 'Island of the Fishmen', 'To Die for Tano', 'The Beast in Space: Unrated', 'Hercules Against the Mongols', 'Intervista', 'Watch Me When I Kill', 'Stradivari', 'Salvatore Giuliano', 'Le Notti di Cabiria', 'Warriors of the Year 2072', 'Quiet Chaos', 'Jacob: The Man Who Fought with God', 'Il mostro di Venezia', 'Umberto D', 'Incantato', 'Suor Emanuelle', 'Golden Door', 'Hercules and the Conquest of Atlantis', 'Bingo Bongo', 'Caterina in the Big City', 'Saint John Bosco: Mission to Love', 'Almost Human', 'All the Colors of the Dark', 'Pray to Kill and Return Alive', 'Non Ti Scordar Di Me', 'Demons 3: The Ogre', 'No Skin', 'Henry IV', 'Ulysses Against the Son of Hercules', 'Il Postino: The Postman', 'Naked and Violent', 'The Bloody Judge', 'One Life Maybe Two', 'The Barbarians', 'A Special Day', 'The Mummy Theme Park', 'The Ignorant Fairies', 'The Queen of Sheba', 'The Unknown Woman', 'Sex Advice', 'Kaos', 'Neapolitan Carousel', 'The Tiger and the Snow', 'Rita of the West', "Primo Levi's Journey", 'The Seed of Man', 'Gomorrah', 'Alina', 'The Psychic', 'Syndicate Sadists', 'I, Don Giovanni', 'Copkiller', 'Storia Di Una Monaca Di Clausura', 'Nabucco: Verdi: Teatro Di San Carlo', 'Until Death', 'White Fang to the Rescue', 'Black Belly of the Tarantula', 'Kill, Baby, Kill', 'The Key', 'Flight Of The Innocent', 'And the Ship Sails on', 'La Notte', 'Street People', 'Without Trace', 'Twitch of the Death Nerve', 'Satyricon', 'Happy Family', 'The Solitude of Prime Numbers', 'Love and Anarchy', 'Minotaur, the Wild Beast of Crete', 'The Double Hour', 'The Conjugal Bed', 'Bad Inclination', 'Gatling Gun', 'Emanuelle in America', 'You Laugh', 'The Last Round', 'Beyond the Darkness', 'Anthony: Warrior of God', 'Slaughter Hotel', 'Oedipus Rex', 'Oasis of the Zombies', 'Rocco and His Brothers', 'Coeds', 'Unknown Beyond', 'The Howl', 'Francesco Cilea: Adriana Lecouvreur: Alla Scala', 'Hatchet for the Honeymoon', 'Fiorile', 'Keoma', 'The Hand That Feeds the Dead', 'Cinema Paradiso', 'City of Women', 'The Conformist', 'The 10th Victim', 'Blaise Pascal', 'Strip Nude for Your Killer', 'Good Morning Heartache', 'The Last Days of Pompeii', 'Arizona Colt Returns', 'Graveyard Disturbance', "Listen, Let's Make Love", 'The Wedding Director', 'Lisa and the Devil', 'Do You Like Hitchcock?', 'One Step to Hell', 'Good Morning, Night', 'One Hundred Steps', 'The Giant of Marathon', "The Cat o' Nine Tails", 'Lost Kisses', 'Torso', 'Son of Cleopatra', 'Scorpion with Two Tails', 'Absurd', 'Traveling Companion', "Don't Torture a Duckling", 'The Sweet House of Horrors', 'Saturn in Opposition', 'The Night Evelyn Came Out of the Grave', 'La Strada', 'Paisan', 'Agatha and the Storm', 'Stage Fright', 'A Man Called Magnum', 'Nirvana', 'Any Gun Can Play', 'Three Brothers', 'Looking for Sophia', 'La Bestia in Calore', 'Macaroni', 'Run, Man, Run!', 'A Man Called Blade', 'Don Camillo', 'Farinelli', 'The Railroad Man', 'Partner', 'Gambling City', 'Nerolio', 'Triggerman', 'Rossini: La Donna del Lago: Riccardo Muti', 'Loaded Guns', 'The Nymph', 'Dr. Goldfoot and the Girl Bombs', 'Arabian Nights', 'La nostra vita', 'Cry of a Prostitute', 'Django, Kill...If You Live, Shoot!', 'Lucrèce Borgia', 'Satanik', 'Eaten Alive!', 'A Blade in the Dark', 'Desirable Teacher', 'Slaughter of the Vampires', 'Look to the Sky', 'The Star Maker', 'Where Is Freedom?', "Giulia Doesn't Date at Night", 'The Innocent', 'Django', 'Black Cobra Woman', 'Plankton', 'Saul e David', 'Yellow Emanuelle', 'Le Amiche', 'Ludwig', 'Anotherworld', 'Christ Stopped at Eboli', 'Ubalda, All Naked and Warm', 'War Goddess', 'The Young Caruso', 'The Elective Affinities', 'The White Space', 'The Perfume of the Lady in Black', 'Bronx Executioner', 'Little Cannon', 'One Day in a Life', 'Bye Bye Monkey', 'Manhattan Gigolo', 'Videocracy', 'Ciao, Professore!', 'A Friend Is a Treasure', 'A Cat in the Brain', 'Shock', 'The Man Who Will Come', 'The Night of the Shooting Stars', 'Luciano Ercoli: Death Walks on High Heels', 'Ultimo mondo cannibale', 'The Revenge of the Crusader', 'Close to Jesus: Mary Magdalene', 'Who Saw Her Die?', 'The Escort', 'A Quiet Life', 'Lamerica', 'Demons 2', 'The Squeeze', 'Barbarossa', 'Toto in the Moon', 'Opera', 'Napoli, Napoli, Napoli', 'The Playgirls and the Vampire', 'Son of Samson', 'Don Matteo', 'Flavia the Heretic', 'The Desert of the Tartars', 'The Loves and Times of Scaramouche', 'The Mountain of the Cannibal God', 'Stealing Beauty', 'The House with Laughing Windows', 'Bandits in Rome', 'Seven Beauties', 'The New Barbarians', 'Dynamite Jim', 'Monika', 'Grido', 'Blind Date', 'Bitter Rice', 'Lone Runner', 'Ulysses', 'Black Sabbath', 'Lucifera: Demon Lover', 'The Fiances', 'Return of the Gladiator', 'The Mercenary', 'Tosca: The Movie', 'The Other Hell', 'Women of the World', '1931: Once Upon a Time in New York', 'May Morning', 'Ripped Off', 'The Blonde', "I'm Not Scared", 'Till Marriage Do Us Part', 'Teorema', 'Lightning Bolt', 'The Mad Butcher', 'A Perfect Day', 'Come Undone', 'Red Desert', 'Four Flies on Grey Velvet', 'Miranda', 'Demons', 'Rabid Dogs', 'The Inveterate Bachelor', 'Purple Sea', 'The Blind Woman of Sorrento', 'Emergency Squad', "My Mother's Smile", 'Besieged', 'Hercules Against Karate', 'Patrick Still Lives', 'Dinner with a Vampire', 'Senso', 'Francesco', 'Tangerine Dream: Inferno', 'Germany, Year Zero', 'My Son, the Hero', 'Bawdy Tales', 'Two Tigers', 'The Sun Also Shines at Night', 'Massacre in Dinosaur Valley', 'Amarcord', 'Il diavolo', 'Open My Heart', 'Kapò', 'Karol: The Pope, The Man', 'Anyone Can Play', 'Troll 3', 'Variety Lights', 'The Card Player', 'The Great Silence', 'Planet of the Vampires', 'Black and White', 'Gasoline', 'Italian Fascism in Color', 'Escape by Night', 'The AntiChrist', 'Lessons for the Lovelorn', 'Forever Emmanuelle', 'The Black Cat', 'The Embalmer', 'Tragic Ceremony', 'Sandokan the Great', 'Tempest', 'Deadly Sweet', 'Love by Appointment', 'Emanuelle and the White Slave Trade', "The Jeweller's Shop", 'La Masseria Delle Allodole', 'French Sex Murders', 'Voyage in Time', 'The Hellbenders', "Satan's Baby Doll", 'Seduced and Abandoned', 'Frankenstein’s Castle of Freaks', 'The Girl with the Pistol', 'Private', 'The Girl by the Lake', 'Salò, or the 120 Days of Sodom', 'Inferno', 'Aida: Verdi: Teatro di San Carlo', 'Suspiria', 'From Mother to Daughter', 'Mafia Connection', 'First Action Hero', 'White Nights', 'Tickets', 'Tomb of Torture', 'Ace High', 'Emmanuelle on Taboo Island', 'China 9 Liberty 37', 'Behind Convent Walls', 'Womens Prison Massacre: Uncut', 'Il Bacio di Tosca', 'Arena', 'The Crusaders', 'Emanuelle in Bangkok', 'Frivolous Lola', 'Warrior of the Lost World', 'Phenomena', 'BirdWatchers', 'The Keys to the House', 'A Bullet for Sandoval', 'Baaria - La porta del vento', 'Nude for Satan', 'La Dolce Vita', 'Love a la Carte', 'The Garden of the Finzi-Continis', 'Excellent Cadavers', 'Angela', 'The Seduction of Mimi', 'Seeking Asylum', 'So Young, So Lovely, So Vicious...', 'The Return of Don Camillo', 'Ginger and Fred', 'Christian', 'Touch of Death', 'Erik the Conqueror', "'Tis Pity She's a Whore", 'Eclipse', "David's Birthday", "The Son's Room", 'Convoy Busters', 'Karajan: Mozart: Don Giovanni', 'The Virgin of Nuremberg', 'Hitch-Hike', 'The Battle of El Alamein', 'Big Deal on Madonna Street', 'The White Sheik', 'Werewolf Woman', 'Woman Times Seven', 'Yesterday, Today and Tomorrow', 'Accattone', 'The Sicilian Girl', 'Under Ten Flags', 'Housing', 'Black Emanuelle, White Emanuelle', 'Secret Nights', 'Blood Castle', 'Goodbye Uncle Tom', 'The Old Testament', 'Light of My Eyes', 'Otello', 'Cartesius', 'Fatty Girl Goes to New York', 'Illustrious Corpses', 'Dracula', 'The Universe of Keith Haring', 'The Private Lesson', 'Bicycle Thieves', "Sorry, You Can't Get Through!", "Hill's Trinity", 'The Witch', 'The Stranger', 'The Sister of Ursula', "Too Bad She's Bad", 'Matchless', 'The Trial Begins', 'Demonia', 'The House by the Medlar Tree', 'Hercules, Prisoner of Evil', 'Confessions of a Frustrated Housewife', 'Suddenly, Last Winter', "Concorde Affaire '79", 'Caro diario', 'Hercules in the Haunted World', 'Verdi: The King of Melody', "Lo Frate 'nnamorato", 'Knife of Ice', 'Land of Death', 'Kidnap', 'St. Michael Had a Rooster', 'Diary of a Telephone Operator', 'Wife for a Night', 'Eerie Midnight Horror Show', 'All Ladies Do It', 'Saint Rita', 'What Do You Know About Me?', 'The Eroticist', 'My Brother Is an Only Child', 'The Mouth of the Wolf', 'The Orchestra of Piazza Vittorio', 'Web of the Spider', 'A Bullet for the General', 'Attention', 'Little Girl', 'There Was a Little Girl', 'The Three Musketeers of the West', 'The House by the Cemetery', 'Saint Anthony', 'My Dear Killer', 'Bread, Love and Dreams', 'Baba Yaga', 'Love and Anger', 'Vincere', 'Amazons of Rome', 'Mister Scarface', 'Il Paese del Sesso Selvaggio', 'Hands Over the City', 'Fantastic Argoman', 'Last Days of Mussolini', 'The Maniacs', 'Beyond the Door', 'Hell Penitentiary', 'Adored: Diary of a Porn Star', 'Mad About Opera', 'Remember Me, My Love', 'I Vitelloni', 'Burial Ground: The Nights of Terror', 'Attraction', 'Zombi 3', 'Vacation Massacre', 'Paul VI: The Pope in the Tempest', 'After Death', 'Your Vice Is a Locked Room and Only I Have the Key', 'The Front Line', 'Secrets of a Call Girl', 'A Policewoman in New York', 'How to Kill a Judge', 'Two Women', "Sodoma's Ghost", 'Sette Scialli Di Seta Gialla', 'A Whisper in the Dark', 'Kreola', 'The New York Ripper', 'Africa Blood and Guts', 'Flatfoot in Hong Kong', 'The Frightened Woman', 'The Nun and the Devil', 'High Rollers', 'Last of the Vikings', 'Padre Padrone', 'The Consequences of Love', 'Atlas in the Land of the Cyclops', 'Il Tango Della Gelosia', 'Story of a Love Affair', 'Ossessione', "Luna e l'Altra", 'The Tree of Wooden Clogs', 'The Legend of 1900', '2019, After the Fall of New York', 'The Master and Margaret', 'Craving Desire', 'I Am Love', 'The Garden of Earthly Delights', 'Mr. Superinvisible', 'In the Folds of the Flesh', 'Hercules Unchained', 'Cabiria', 'The Monte Carlo Story', 'The Prince of Homburg', 'The Gospel According to St. Matthew', 'The Big Dream', 'Padre Pio: Between Heaven and Earth', 'Draquila - Italy Trembles', 'Django Shoots First', 'Family Flaw', 'Emanuelle Around the World', 'The Murri Affair', 'Compañeros', 'The Clowns', 'Code Name: Wild Geese', 'Casablanca Express', 'The Tomb', 'The Trap', 'Man, Woman and Beast', 'Loose Cannons', "I'm Crazy About Iris Blond", 'Murder Rock', 'Grandi Speranze', "L'Avventura", 'Women in Fury', 'Estate Violenta', 'As God Commands', 'The Orange Thief', 'Mafioso', 'Killer Nun', 'Swept Away', 'The Stendhal Syndrome', 'Black Emanuelle 2', 'Big Deal on Madonna Street: 20 Years Later', 'Walking, Walking', 'Four of the Apocalypse', 'Medea', 'Mozart: Don Giovanni: Teatro Alla Scala', 'Spartacus', 'Shadow', 'Il Decameron', 'Evilenko', 'Salon Kitty', 'The Hawks and the Sparrows', 'Nightmare City', "Violence in a Women's Prison", 'Days and Clouds', 'Beyond the Door III', 'Sonetaula', 'The Beast in the Heart', 'St. Giuseppe Moscati', 'Girl with a Suitcase', 'Fangs of the Living Dead', 'Giuseppe Verdi: Attila: Teatro Alla Scala', 'Il Grido', 'Cheeky!', 'Bloodsucker Leads the Dance', 'I Vinti', 'The Last Kiss', 'The Case of the Bloody Iris', 'Dillinger Is Dead', 'Hercules and the Tyrants of Babylon', 'Days', 'Antony and Cleopatra', 'The Red Queen Kills Seven Times', 'Red Riding Hood', 'The Nanny', 'Tales of Ordinary Madness', 'Adiós, Sabata', 'Delirium', 'Blade of the Ripper', 'La maschera del demonio/Black Sunday', 'W Django!', 'Juliet of the Spirits', 'Hell Behind the Bars', 'Bandits in Milan', 'Close to Jesus: Thomas', 'Texas, Adios', 'Alfredo, Alfredo', 'Mamma Roma', 'Duel of the Champions', 'Colt 38 Special Squad', 'Ring of Darkness', 'Bloody Che Contra', 'Bellini: I Puritani', 'Una Breve Vacanza'}
            Answers = 699, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 699, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 40 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 41 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.country.calling_code ?o1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'39'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 42 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.currency_formerly_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Sammarinese lira', 'Italian lira'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 43 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.second_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.second_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.second_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 109
            Final Answer: {'Province of Potenza', 'Province of Oristano', 'Province of Barletta-Andria-Trani', 'Province of Mantua', 'Trentino', 'Province of Naples', 'Province of Verbano-Cusio-Ossola', "Province of L'Aquila", 'Province of Monza and Brianza', 'Province of Prato', 'Province of Isernia', 'Province of Rieti', 'Province of Caserta', 'Province of Pesaro and Urbino', 'Province of Udine', 'Province of Benevento', 'Province of Olbia-Tempio', 'Province of Verona', 'Province of Biella', 'Province of Padua', 'Province of Foggia', 'Province of Catanzaro', 'Province of Reggio Emilia', 'Province of Vicenza', 'Province of Perugia', 'Province of Savona', 'Province of Bologna', 'Province of Latina', 'Province of Cagliari', 'Province of Avellino', 'South Tyrol', 'Province of Palermo', 'Province of Belluno', 'Province of Ferrara', 'Province of Sassari', 'Province of Livorno', 'Province of Lecco', 'Province of Turin', 'Province of Reggio Calabria', 'Province of Rome', 'Province of Massa and Carrara', 'Province of Enna', 'Province of Lecce', 'Province of Alessandria', 'Province of Pescara', 'Province of Parma', 'Province of Siena', 'Province of Campobasso', 'Province of Catania', 'Province of Genoa', 'Province of Frosinone', 'Province of Imperia', 'Province of Terni', 'Province of Bergamo', 'Province of Ancona', 'Province of Treviso', 'Province of Brescia', 'Province of Ogliastra', 'Province of Trieste', 'Province of Agrigento', 'Province of Florence', 'Province of Taranto', 'Province of Syracuse', 'Province of Como', 'Province of Nuoro', 'Province of Novara', 'Province of Caltanissetta', 'Province of Lodi', 'Province of Varese', 'Province of Bari', 'Province of Fermo', 'Province of Piacenza', 'Province of Chieti', 'Province of Rovigo', 'Province of Venice', 'Province of Carbonia-Iglesias', 'Province of Asti', 'Province of Lucca', 'Province of Teramo', 'Province of Sondrio', 'Province of Cuneo', 'Province of Medio Campidano', 'Province of Gorizia', 'Province of Rimini', 'Province of Pordenone', 'Province of Ascoli Piceno', 'Province of Matera', 'Province of Crotone', 'Province of Ragusa', 'Province of La Spezia', 'Province of Messina', 'Province of Brindisi', 'Province of Pistoia', 'Province of Pisa', 'Province of Trapani', 'Province of Vercelli', 'Province of Pavia', 'Province of Cosenza', 'Province of Salerno', 'Province of Arezzo', 'Province of Forlì-Cesena', 'Province of Grosseto', 'Province of Milan', 'Province of Viterbo', 'Province of Ravenna', 'Province of Cremona', 'Province of Macerata', 'Province of Vibo Valentia', 'Province of Modena'}
            Answers = 109, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 109, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 44 / 166: {
          [('Main', '==', 'm.03rjj', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 11
            Final Answer: {'la Repubblica', 'Liberazione', 'Il Messaggero', "l'Unità", 'La Stampa', 'Avanti!', 'Corriere della Sera', 'La Domenica del Corriere', 'Il Foglio', 'La Sicilia', 'La Gazzetta dello Sport'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 45 / 166: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 21
            Final Answer: {'Sicily', 'Trentino-Alto Adige/South Tyrol', 'Tuscany', 'Basilicata', 'Molise', 'Campania', 'Abruzzo', 'Sardinia', 'Umbria', 'Veneto', 'Lazio', 'Apulia', 'Piedmont', 'Liguria', 'Friuli-Venezia Giulia', 'Emilia-Romagna', 'Calabria', 'Lombardy', 'Aosta Valley', 'Marche'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 46 / 166: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 47 / 166: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 6
            Final Answer: {'Italian province', 'Italian autonomous region', 'Italian autonomous province', 'Italian frazione', 'Italian commune', 'Italian region'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 48 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'UTC+01:00', 'Central European Time'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 49 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.location.area ?o1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'301230'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 50 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Eurasia', 'Europe', 'Southern Europe'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 51 / 166: {
          [('Main', '==', 'm.03rjj', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 519
            Final Answer: {'The Volcano Lover', 'Ghosts of Vesuvius', 'The Name of the Rose', 'The art of counterpoint in stile nuovo', 'The Italian Reformation of the sixteenth century and the diffusion of Renaissance culture', 'Gardens and gods', 'Painting in Italy', 'The road to Damietta', 'Leonardo Da Vinci', 'Sergio Leone', 'The Italian painters of the renaissance', 'Scorpia', 'The Italian Renaissance in its historical background', 'Paganini', 'One Hundred and One Beautiful Small Towns of Italy', 'I, Fellini', 'Iris Origo', 'Roman mornings', 'M: The Man Who Became Caravaggio', 'A short history of Italian painting', 'The Innamorati', 'Studies of the Eighteenth Century in Italy', 'End Games', 'Spoiler', 'Architecture for the Shroud', 'The City of Falling Angels', 'Southern Baroque Art', 'Synodal law in Florence and Fiesole, 1306-1518', 'Foreign evidence on the war at the Italian front, 1915-1918', 'Racial Theories in Fascist Italy', 'Beloved Emma', 'Silence on Monte Sole', 'Medieval European coinage', 'Images and Shadows', 'The Fortunate Pilgrim', 'The Dolphins of Laurentum', 'Bringing Tuscany Home', 'Rubens Barrichello', 'Ways and means for suppressing beggary and relieving the poor by erecting general hospitals and charitable corporations', 'Making Democracy Work', 'Titian', 'Giuseppe Terragni', 'The Sicilian', 'The Italian Communist Party, 1976-81', 'Records of Shelley, Byron, and the author', 'The Castle of Crossed Destinies', 'Italian Master Drawings At The Philadelphia Museum Of Art', 'The story of O', 'The keyboard ricercar and fantasia in Italy c. 1500-1550', 'Indian Summer', 'Studies on Italy, 1943-1975', 'Invasion diary', 'The marshal and the madwoman', 'Days Near Rome', 'Believe, obey, fight', 'Report on 2011 International Year Part 7: Photography of The African Continuum', 'Medici Money', 'Hannibal', 'Dead Lagoon', 'American Pie', 'Beach Music', 'The Apprentice Lover', 'The thief of Venice', 'The lakes of northern Italy', 'A treatise concerning the causes of the magnificencie and greatnes of cities', 'The architecture of fountains and nymphaea in ancient Italy', 'Venice', 'The modern prince, and other writings', 'Borromini', 'Andrea del Castagno', 'The Titian committee', 'Love in idleness', 'The latest Calabrian disaster', 'Rome in the East', 'Saving Caravaggio', 'Nietzsche in Turin', 'Four Days of Naples', 'Modigliani', 'Romola', 'Florence', 'The Vatican and Italian Fascism, 192932', 'An introduction to Italian painting', 'Brother sun, sister moon', 'The Silver Spoon', 'If Not Now, When?', 'Memoirs of early Italian painters', "Signpost Guide Provence and the Cote D'Azur", 'Pietro da Cortona and Roman Baroque architecture', 'In the hour before midnight', 'The stories and recollections of Umberto Saba', 'The Etruscan Chimera', 'Up at the Villa', 'Hereditary witchcraft', 'Italian hilltowns', 'Italian petrological sketches', 'The woman question in Italy, 1861-1880', 'Portrait of a Lady', 'Capri file', 'Old Calabria', 'The Parnas', 'Amzat and His Brothers', 'The Other Side', 'Pamphlets on fossil mollusks', 'Paradise City', 'The Essential Machiavelli', 'Europa', 'Leonardo, paintings and drawings', "The Renaissance painter's garden", 'Venice a History of', 'Etruscan Magic and Occult Remedies', 'Bellarion the Fortunate', 'Are we Aryans?', 'The Italian distribution system', 'civilization of the renaissance in Italy', 'Playing for Pizza', 'Julius Caesar', 'The Makers of Hebrew Books in Italy', 'Brother Francis and the friendly beasts', 'The central Italian painters of the renaissance', 'The Machiavellian Moment', 'Destiny', 'The Marshal Makes His Report', 'Day of confession', 'Darkling I listen', 'Marcantonio and Italian engravers and etchers of the sixteenth century', 'Inkheart', 'Barbarism and religion', 'Murano', 'The Devil You Know', 'Dance music in printed Italian lute tablatures from 1507-1611', 'A Season with Verona', 'Painting in sixteenth-century Venice', 'The Science of Leonardo', 'The Siege of Venice', 'Letters from the Palazzo Barbaro', 'The Broker', 'The life of Cesare Borgia of France', 'The Delia Collection', 'Fernando De Lucia', 'Galileo', 'The Secrets of Vesuvius', 'Culture and Customs of Italy', 'The Memory Palace of Matteo Ricci', 'Hawkwood: Diabolical Englishman', 'The Painters of the School of Ferrara', 'Aldus and his dream book', 'Minority government and majority rule', 'Il giardino dei Finzi-Contini', 'Saint Catherine of Siena', 'The Eighth Wonder of the World', 'The Comfort of Strangers', "Studies on Buontalenti's villas", 'Without Reservations', 'Italian portraits of the fifteenth century', 'Boccherini, 1862-1882', 'Vendetta', 'Renaissance in Italy', 'Festa', 'The Mafia', 'The Old English Baron', 'Modern Italian painting', 'Italian, French & Spanish paintings of the seventeenth century', 'A Farewell to Arms', 'Letter from Casablanca', 'Americans', 'Young Italy', 'The life and work of Benito Mussolini', 'Moments of Reprieve', 'The Blood Stone', 'Beyond measure', 'Tested by Fate', 'The Conformist', 'Women, family, and society in medieval Europe', 'North Italian Painters Of The Renaissance', 'Spaghetti Westerns', 'The Talented Mr. Ripley', 'Politicians and politics', 'The making of late antiquity', 'Architecture and the state', 'Oliver Gagliani, past and present', 'Need to Testify, A', 'Dirge for a doge', 'Vessel of Sadness', 'Lost', 'Three days', 'Michelangelo', 'Tune for an elephant.', 'More lives than one', 'Greene on Capri', 'Myths of Venice', 'A Room with a View', 'Florence: A Portrait', 'From the canso to the canzoniere', 'Ways of the strega', 'Daughter of Venice', 'An unconventional brotherhood', 'Paintings by Italian masters in the possession of William Harrison Woodward', 'The Normans in Sicily', 'Bramante', 'The Marble Faun', 'Magnificent Italian Villas and Palaces', 'Can-Cans, Cats and Cities of Ash', 'Il Modo Italiano: Italian Design and Avant-garde in the 20th Century', 'Italian art deco', 'Exhibition of old master drawings', 'Fire In The Hills', 'The Eye of the Lynx', 'Effie in Venice', 'Seventeenth-century Italian prints', 'Nero', 'Low fertility and labour force participation of Italian women', "Field visit to damage from the magnitude 4.9, Sant' Agata Fossili, Italy, earthquake of 2003 April, 11", "Weight Watchers' Simply the Best", 'The ancient Romans', 'Norm and form', 'Two women', 'Giambattista Tiepolo', 'Indecent secrets', 'Letter to Lorenzo', 'Culture and national identity in Republican Rome', 'A comparison of selected Italian vocal tutors of the period circa 1550 to 1800', 'Caravaggio: Painter of Miracles', 'The campaign in Italy', 'Saint Francis and the Wolf', 'Money and the Rise of the Modern Papacy', 'Modal Subjectivities', 'Don Giovanna', 'An account of some of the statues, bas-reliefs, drawings and pictures in Italy, &c. with remarks', 'Roma Alessandrina', 'Dialogues', 'Italian incunabula', 'From St. Francis To Dante', 'Rom, Blicke', 'Pilgrims and Shrines', 'Mannerism and anti-Mannerims in Italian paintings', 'Descriptive catalogue of ""old masters, "" collected by James J. Jarves', 'Remarks on antiquities, arts, and letters during an excursion in Italy, in the years 1802 and 1803', 'Cities of central Italy', 'Bibliography of the geology and eruptive phenomena of the more important volcanoes of southern Italy', 'Property of blood', 'The Urban Ideal', 'Across the River and into the Trees', 'Euphorion', 'Rome and a villa', 'All or Nothing', 'The last judgement', 'Herculaneum', 'Italy and its Monarchy', 'The Sack of Rome: How a Beautiful European Country with a Fabled History and a Storied Culture Was Taken Over by a Man Named Silvio Berlusconi', 'Romanization in the Time of Augustus', 'A treatise on the petroleum zones of Italy', 'The art of humanism', 'The Medici', 'Little misunderstandings of no importance', 'The History of Sicily from the Earliest Times', 'Trattoria', 'The laude francescane and the disciplinati of thirteenth century Umbria and Tuscany', 'Roman sacred polyphony 1680-1730', 'The Story of Florence', 'The Twelve Caesars', 'The Renaissance', 'Italian currents in the popular music of England in the sixteenth century', 'The next best thing', 'Reluctant saint', 'Promise of Fidelity', 'The big Q', 'Involuntary Witness', 'Tuscany', 'The Miracle of Castel Di Sangro', 'Siena and the Virgin', 'Prince of Foxes', 'The sites of written memory', 'A General History Of Rome', 'Fra Angelico', 'The Wings of the Dove', 'Mrs. Pollifax and the second thief', 'Francesco Geminiani, composer and theorist', 'Midnight in Sicily', 'The Portrait of a Lady', 'The Most Beautiful Villages of Tuscany', 'The quest for Corvo', 'To Noto, or, London to Sicily in a Ford', 'The Betrothed', 'Bring out your dead', 'A journey to Rome and Naples, performed in 1817', 'Palladio', 'Back to Bologna', 'A new history of painting in Italy', 'Count Silvernose', 'Supernatural Tales', 'Fresco decorations and stuccoes of churches and palaces in Italy', 'Mussolini', 'Caesar', 'Brother of the More Famous Jack', 'The language of doves', 'Flavours of the Riviera', 'Storming the heavens', 'Four Seasons in Rome', 'The Bernini bust', 'Michelangelo and His Influence', 'Painting in Late Medieval and Renaissance Siena', 'The Heron', 'The Magic Barrel', 'The marshal and the murderer', 'Medianoche En Sicilia', 'Verdi', 'Varronianus', 'The Renaissance in Italy and Spain', 'Cause for Alarm', 'Memoirs of My Life and Writings', 'Italian Witchcraft', 'The Accademia del disegno in sixteenth century Florence', 'The Rommel papers', 'The transmission of trecento secular polyphony', 'Great Expectations', 'The birth and rebirth of pictorial space', 'The Fifth Daughter', 'Garibaldi, a great life in brief', 'The Mother', 'A translation of the articles established by the most excellent magistracy of revisors and regulators of the public revenue in the exchequer at Venice', 'Il sentiero dei nidi di ragno', 'Broken mirrors/broken minds', 'The Perfect House', 'The sacred cut', 'La Bella Figura: A Field Guide to the Italian Mind', 'The Sixth Day and Other Tales', 'Some bitter taste', 'Death and restoration', 'Modern Italy', 'The Waiting Land', 'The Merchant of Prato', 'Visions of Emancipation', 'The Day of Battle: The War in Sicily and Italy, 1943-1944', 'Katie and the Mona Lisa', 'The Italian Renaissance', 'Artistic theory in Italy, 1450-1600', 'The Prettiest Love Letters in the World', 'Catalogue of watermarks in Italian printed maps, ca 1540-1600', 'Those Barren Leaves', 'Reasonable Doubts', 'The Last Generation of the Roman Republic', 'Antonio Meucci, 1808-1889', 'Nella cucina', 'Studies in the history of mediaeval Italian painting', 'The Seventh Sacrament', 'The bay of noon', 'The Fascist experience in Italy', 'Redencion', 'Death of a Dutchman', 'Men who loved me', 'Studies on the concepts of disegno, invenzione, and colore in sixteenth and seventeenth century Italian art and theory', 'The Garden of the Finzi-Continis', 'The Rough Guide to Classic Novels 1', 'The orphan singer', 'The King of Capri', 'The Charterhouse of Parma', 'Great Maria', 'Rapids', 'After Hannibal', 'The House of Medici', 'The Thief Lord', 'The villa of mysteries', 'Etruscan Roman Remains In Popular Tradition', 'Street boys', 'The Nature of Blood', 'Italian jeweled arts', 'Sicilian odyssey', 'Death in autumn', 'The renaissance of art in Italy', 'Survival In Auschwitz', 'The architecture of Michelangelo', 'The Lost Girl', 'Gallienus', 'The beginnings of Rome', 'The life, times and works of Pietro Antonio Locatelli', 'The Family', 'Cry to Heaven', 'The gospel of Judas', 'Byron', 'Landmarks of botanical history', "Borromini's baroque", 'Death of an Englishman', 'Eating Up Italy', 'Chanson to Mass', 'La Romana', 'The paradise of cities', 'Giotto and some of his followers', 'The Essential Michelangelo', 'Antonio Vivaldi and the Baroque Tradition', 'Rome', 'Italian Days', 'The immaculate deception', 'Felony', 'Memoirs Of The Early Italian Painters', 'Surviving without governing', 'Time at War', 'Race of Scorpions', 'The instrumental ritornello in selected vocal works of Italian composers, c. 1670-1710', 'Jerusalem, prisoner of hope', 'Barnardino Luini', 'Once upon a time in Italy', 'The Pope, His Banker, and Venice', 'History of Italian Renaissance art', 'The renaissance', 'Futurism', 'Sketches from the Subject and Neighbour Lands of Venice', 'Hannibal Crosses the Alps', 'The Garden of Evil', 'Anzio', 'Tenor of love', 'Marcantonio Rainmondi and his school', 'Rome, 1630', 'The Man Who Never Was', 'The companion guide to Sicily', 'Botticelli', 'Octopus', 'Vive Venise', 'Italian Fever', 'The Agony and the Ecstasy', 'The English Patient', 'Flavors of the Riviera', 'The Mysteries of Udolpho', 'Figures in proportion', "Summer's Lease", 'The Mirror Maker', "Lorenzo de' Medici", 'Old Italian masters', 'En italia con amor', 'The earthquake in the Marsica, central Italy', 'Musical tastes in fourteenth-century Italy', 'Some Problems in Roman History', 'Under the Tuscan Sun', 'Titian to 1518', 'Cavour and Garibaldi, 1860', 'Translating style', 'The Evening of the Holiday', "Artists' homes in sixteenth century Italy", 'Cabal', 'Graziella', 'Essentials of Classic Italian Cooking', 'Medusa', 'More than peace and cypresses', 'The History of the Decline and Fall of the Roman Empire', 'The Borgia Bride', 'Mapping the edge', 'The book of my life', 'The Italian garden', 'Administering migrant workers in an irregular situation in Greece, Italy and Spain', 'A History of the Life and Voyages of Christopher Columbus', 'The Donkey of God', "Deformation mechanisms, architecture, and petrophysical properties of large normal faults in platform carbonates and their role in the release of CO₂ from earth's interior in central Italy", 'Florence, a delicate case', 'The Complete Guide to Buying Property in Italy', 'Prisoners of Hope', 'Italian Hours', 'A thread of grace', 'Bridge of Sighs', 'Garibaldi The Idol of the New Italy', 'Cosmicomics', 'Uncle Isaaco', 'Legends of Florence', 'A Thousand Days in Venice', 'Benevolence and Betrayal', 'Earthwork Out Of Tuscany', 'Italian journeys', 'The last promise', 'Three letters concerning the present state of Italy, written in the year 1687 ...', 'Ratking', 'Articles on the earthquake at Messina, Dec.28, 1908', 'Stylistic similarities and differences among twelve mid-eighteenth century Italian Keyboard sonatas', 'Rosa', 'Cosi Fan Tutti: An Aurelio Zen Mystery', 'Primo', 'Discerning superstition', 'Facsimiles of original studies by Raffaelle in the University Galleries, Oxford', 'A history of painting in north Italy', 'Studies in Greek culture and Roman policy', 'Sex Lives of the Popes', 'Mirror, Mirror', 'An Italian journey', 'Death in springtime', 'The Italian crusades', 'The catacombs', 'Architectural principles in the age of humanism', 'Italian Mysteries', 'Eighth Army', 'Alibi', 'Twilight in Italy and other essays', 'Peace', 'Vida de Marco Bruto', 'Sketches of protestantism in Italy, past and present', 'The Comparaison de la musique italienne et de la musique françoise of Lecerf de la Vieville', 'Rome, inc.', 'The puzzle of mass torts', 'Rome Reborn', 'Studies In Roman History', 'And Then You Die', 'John Cabot', 'The Lost Father', 'Marco Polo', 'Girolamo Donzellino, medical science and Protestantism in the Veneto', 'Italy in the Central Middle Ages', 'Atlas of the Roman world', 'The honeymoon', 'Roman Pictures', "Heat: An Amateur's Adventures as Kitchen Slave, Line Cook, Pasta-Maker, and Apprentice to a Dante-Quoting Butcher in Tuscany", 'Italy', 'The great Italian and French composers', 'An account of the Inquisition at Goa, in India', 'Italian Neighbors', 'The Life and Opinions of Tristram Shandy, Gentleman'}
            Answers = 511, P = 0.001957, R = 1.000000, F1 = 0.003906
          } [0.019s]
          Answers = 511, P = 0.001957, R = 1.000000, F1 = 0.003906
        } [0.019s]
        Checking schema 52 / 166: {
          [('Main', '==', 'm.03rjj', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Council of Europe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 53 / 166: {
          [('Main', '==', 'm.03rjj', ['fictional_universe.fictional_setting.works_set_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'The Cask of Amontillado'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 54 / 166: {
          [('Main', '==', 'm.03rjj', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 170
            Final Answer: {'No Euro Movement', 'New Italian Socialist Party', 'Radical Party', 'Party of Christian Democracy', 'Ladin Autonomist Union', 'Italian General Confederation of Labour', 'Italy of Values', 'Autonomist Trentino', 'Christian Democratic Party', 'Unione Sindacale Italiana', 'Reformist Alliance', 'Union of Christian and Centre Democrats', 'United Socialist Party', 'citiservi', 'Forza Italia', "People's Monarchist Party", 'Greens', 'Trentino Tyrolean Autonomist Party', 'Federation of Liberals', 'Lega Nord', 'Communist Refoundation Party', 'Sardinia Nation', 'Italian Socialist Party', 'Party of Italian Communists', 'Democratic Republicans', 'United Consumers', 'Marxist–Leninist Revolutionary Party of Italy', 'Democratic Union for the Republic', 'Fascism and Freedom Movement', 'Marxist–Leninist Italian Communist Party', 'Left Ecology Freedom', 'Lega Sud Ausonia', 'Proletarian Democracy', 'Italian Democratic Party of Monarchist Unity', 'Monarchist Alliance', 'European Popular Centre', 'Italian Socialist Party of Proletarian Unity', 'Rainbow Greens', 'Confederazione Generale del Lavoro', 'Popular-UDEUR', 'Independence Republic of Sardinia', 'European Federalist Movement', 'Italian Democratic Socialists', 'Movement for the Confederation of the Communists', 'Decide!', 'Liberal Socialist Action Party', 'Moderate Italy', 'Democratic Party of the Left', 'Unione degli Studenti', 'The Old Catholic Church in Italy', 'Christian Democracy', 'Camera del Lavoro', 'Platipus Anchors', 'Cultural Video Foundation', "Consumers' List", 'Italian Radicals', 'Italian Socialists', 'The People of Freedom Party', 'Società Psicoanalitica Italiana', 'Lega Alleanza Lombarda', 'Italian Communist Party', 'National Right', 'S.O.S. Italy', 'Autonomist Federation', 'Movement of Unitarian Communists', 'Liberal Reformers', 'Democratic Party', 'Perfume Click', 'Movement for Peace and Socialism', 'Andromeda Systems Engineering LLC', "Citizens' Union for South Tyrol", 'Christian Democracy for Autonomies', 'Federation of the Greens', 'Italy Again', 'New Action Party', 'Italian Marxist–Leninist Party', 'Christian Democratic Refoundation', 'Organisation of Communists of Italy (Marxist–Leninists)', 'European Republicans Movement', 'Net7', 'For the South', 'Movement for Autonomies', 'Workers Autonomous Trade Unions Confederation', 'Communist Party of Italy', "Italian People's Party", 'Middle-of-the-Road Italy', 'Democratic Party of South Tyrol', 'North-East Project', "National Autonomous School Workers' Trade Union", 'Movement for Democracy – The Net', 'Movement for the Left', 'Italian Renewal', "Partito dell'Amore", 'Party of Democratic Reformers', 'Italian Pirate Party', 'iProspect', 'Active Democracy', 'Confederazione dei Comitati di Base', 'Italian Animal Welfare Party', 'European Democracy', 'Lega Nord Toscana', 'Democratic Left', 'Italian Labour Union', 'Communist Alternative Party', 'Lively Aosta Valley', 'Reformist Socialists', 'Unified Communist Party of Italy', 'National Democracy', 'Association for the Rose in the Fist', 'National Democratic Party', 'Proletarian Unity Party', 'Monarchist National Party', 'The Italian Socialists', 'Five Star Movement', 'New Sicily', 'Civic Choice', 'Italian Republican Party', 'United Democratic Christians', 'Popular Democracy (United Left)', 'Sgarbi Liberals', 'General Labour Union', 'Democratic Alliance', 'Christian Extended Pact', 'Socialist Party of Italian Workers', 'Critical Left', 'Volpianian Independents', 'Sardinia Project', 'Sardinian Reformers', 'Greens Greens', 'Italian Liberal Party', "South Tyrolean People's Party", 'Democratic Union for Consumers', 'Friuli Movement', 'For Italy in the World with Tremaglia', 'Unitalia', 'DIRFOR', 'Democracy is Freedom – The Daisy', 'United Pensioners', 'Federalist Party', 'The Democrats', 'Patto Segni', 'Republican Fascist Party', 'National Alliance', 'National Fascist Party', 'Democrats of the Left', 'Società Anonima Vinicola Italiana', 'Labour Democratic Party', "Italian Confederation of Free Workers' Unions", 'Radicals of the Left', 'New Christian Democracy', "Pensioners' Party", 'Italians in the World', 'Socialist Revolutionary Anarchist Party', 'Ladins Political Movement', 'Italian Associations in South America', 'Southern Democratic Party', 'Pact for Sicily', 'Italian Democratic Socialist Party', 'Humanist Party', 'With Monti for Italy', 'Valdotanian Union', 'Republican Left', 'Sardinian Action Party', 'Christian Democratic Centre', 'Sicilian Alliance', 'Action Party', 'Fronte Marco Polo'}
            Answers = 167, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 167, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 55 / 166: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.multi_event_tournaments_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'2007 World Championships in Athletics', '2012 World Mountain Running Championships'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 56 / 166: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_country.national_federation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.national_federation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.national_federation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Federazione Italiana di Atletica Leggera'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 57 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'53821850', '56576718', '56831821', '60723603', '56671781', '55110868', '56543548', '56564074', '57157406', '54073490', '58175310', '58941499', '56844303', '56977217', '56601931', '54751406', '56501675', '50199700', '56906744', '50879450', '52112350', '56758521', '52519000', '51252000', '56942108', '56843400', '55718260', '50536350', '56890372', '56797087', '54381345', '59832179', '57604658', '56916317', '56860281', '56317749', '56593071', '55441001', '56719240', '56629288', '56596155', '60192698', '58607043', '60483385', '56433883', '52900500', '56155143', '55955411', '59375289', '53235750', '51675350', '53537950'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 58 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 20
            Final Answer: {'471100', '521200', '493000', '585000', '554100', '445000', '367550', '436000', '503100', '326939', '385100', '471000', '506000', '450000', '454300', '440000', '482600', '473000', '359378', '580900'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 59 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'2.19475e+12', '1.02607e+12', '1.22458e+12', '2.11115e+12', '7.76293e+11', '1.5145e+12', '9.70851e+10', '8.94752e+11', '1.22518e+12', '7.36549e+10', '4.11671e+11', '2.4819e+11', '4.21899e+11', '1.26635e+12', '1.2012e+11', '1.1237e+12', '1.10401e+12', '4.5983e+11', '4.14976e+11', '2.30731e+12', '6.17003e+11', '1.78628e+12', '8.59052e+11', '2.12718e+12', '6.79782e+10', '3.03554e+11', '1.69084e+11', '3.79302e+11', '4.35705e+11', '4.26865e+11', '1.92278e+11', '1.13177e+12', '1.73552e+12', '4.48428e+10', '5.77107e+10', '1.19526e+12', '1.13341e+12', '1.09255e+11', '2.19382e+11', '2.16512e+11', '1.05908e+12', '5.03839e+10', '2.04364e+12', '8.11331e+10', '1.87298e+12', '1.19865e+12', '1.39956e+11', '6.31754e+10', '4.03853e+10', '1.27196e+12', '1.20818e+12', '8.79422e+10'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 60 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 57
            Final Answer: {'31960', '1983', '2829', '2250', '1899', '1818', '1811', '1075', '1542', '2365', '1733', '1977', '2708', '32070', '1878', '1280', '1650', '30450', '1540', '2709', '1905', '1431', '1132', '2254', '2710', '9240', '1210', '31750', '2743', '1131', '1429', '1871', '9250', '2160', '2676', '2556', '2366', '1282', '32420', '1010', '32020', '32040', '1344', '2422', '1342', '1011', '33010', '32710', '2089', '1074', '32100', '2083', '1212', '1727', '2163', '1648', '30490'}
            Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 61 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 60
            Final Answer: {'1.65788e+12', '1.28223e+12', '1.12729e+12', '1.34561e+12', '6.08003e+11', '1.59586e+12', '6.40321e+11', '9.79681e+11', '7.60815e+11', '1.92041e+12', '1.56063e+12', '7.24494e+11', '1.79717e+12', '1.37879e+12', '9.3368e+11', '1.59588e+12', '5.70549e+11', '1.56003e+12', '6.39458e+11', '7.25471e+11', '1.22843e+12', '1.79481e+12', '1.45535e+12', '9.83049e+11', '5.21923e+11', '6.07184e+11', '5.71319e+11', '1.52946e+12', '1.96888e+12', '1.34666e+12', '1.93294e+12', '1.93226e+12', '6.85676e+11', '1.0281e+12', '8.73261e+11', '7.59791e+11', '1.93025e+12', '8.09796e+11', '1.90128e+12', '1.27991e+12', '1.12371e+12', '1.45558e+12', '1.54422e+12', '1.18751e+12', '1.97494e+12', '1.08255e+12', '1.1842e+12', '1.98773e+12', '1.03203e+12', '1.54366e+12', '8.08705e+11', '1.06644e+12', '1.06271e+12', '9.34939e+11', '6.84752e+11', '1.07903e+12', '5.2122e+11', '8.72085e+11', '1.23011e+12', '1.9023e+12'}
            Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 62 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 53
            Final Answer: {'35073.2', '33786.6', '2029', '1371', '5405.63', '1813', '1090', '2122', '804.49', '1304', '1578', '887.34', '4435.5', '2629', '31000', '2115', '1402', '30478.8', '1805', '7344.49', '7546.57', '2983', '35826', '2151', '2573', '2227', '1863', '1991', '2239', '31777', '990.26', '6735.04', '2221', '1938', '36130.4', '2006', '1651', '1126', '38563.1', '1222', '8148.12', '7698.91', '3885.83', '1533', '3957.03', '1972', '2143', '7280.6', '7457.11', '3088.21', '2106', '3488.92', '1516'}
            Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 63 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 8
            Final Answer: {'0.83', '2.18', '0.86', '1.31', '0.93', '1.69', '1.63', '1.49'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 64 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'78.014', '77.75', '79.829', '70.172', '79.932', '72.992', '80.58', '69.248', '81.385', '75.495', '74.354', '70.926', '81.737', '81.132', '76.805', '71.807', '79.978', '70.312', '74.003', '74.64', '76.406', '74.815', '73.943', '72.075', '78.332', '71.559', '77.51', '70.812', '78.827', '70.78', '79.427', '78.629', '82.088', '80.729', '76.859', '70.957', '78.427', '73.365', '75.811', '72.647', '73.693', '69.15', '69.124', '76.878', '76.225', '77.238', '81.285', '72.026', '72.734', '75.39', '69.76'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 65 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 44
            Final Answer: {'1.28', '1.32', '2.331', '2.108', '1.462', '1.35', '2.359', '1.64', '1.22', '2.547', '1.21', '2.625', '1.975', '1.87', '1.25', '2.339', '1.762', '2.208', '2.407', '2.701', '2.508', '2.665', '1.34', '2.463', '1.42', '1.26', '1.23', '2.535', '2.425', '1.27', '1.41', '2.411', '1.4', '1.37', '1.29', '1.3', '1.617', '1.592', '1.18', '2.493', '1.39', '1.33', '2.406', '1.52'}
            Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 66 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 50
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1978', '1998', '1962', '1970', '1977', '1966', '1973', '1967', '1996', '1990', '1997', '1969', '2007', '1994', '2009', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '2001', '1987', '1960', '1989', '1974', '2000', '1993', '1965', '1976', '1981', '1972', '2005', '1999', '1971', '2004', '1975'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 67 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.measurement_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1998', '1978', '1962', '1970', '1977', '1966', '1973', '1967', '1996', '1969', '1990', '1997', '2009', '1994', '2007', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '2001', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1976', '1981', '1972', '2005', '1999', '1971', '2004', '1975'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 68 / 166: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 30
            Final Answer: {'Battle of Mogadishu', 'Action of 27 February 1941', 'Iraqi no-fly zones', 'War on Terrorism', 'Operation Shingle', 'Battle of Beirut', 'World War I', 'Operation Compass', 'Occupation of Constantinople', 'Second Battle of the Marne', 'Battle of Bardia', 'NATO bombing of Yugoslavia', 'Battle of Santander', 'Operation Airone', 'British airborne operations in North Africa', 'Battle of Benevento', 'Operation Active Endeavour', 'War in Afghanistan (2001–present)', 'Battle of Guadalajara', 'Gulf War air campaign', 'Battle of Rimini', 'Middle East Theatre of World War II', 'Allied invasion of Italy', 'Action of 14 February 1944', 'Operation Unified Protector', 'Battle of Bilbao', 'Operation Gothic Serpent', 'Battle of Sirmium', 'Battle of Ponta Delgada', 'Battle of Košare'}
            Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 69 / 166: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 6
            Final Answer: {'Australia', 'United Kingdom', 'France', 'Russia', 'United States of America'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 70 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1998', '2004', '1962', '1978', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1997', '1969', '1990', '2007', '2009', '1994', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1972', '1981', '1976', '1999', '2005', '1971', '2001', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 71 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 24
            Final Answer: {'2008', '1995', '1985', '1998', '2011', '1996', '1997', '1990', '2007', '1994', '2009', '1991', '2002', '2003', '2006', '2001', '1992', '2010', '1989', '2000', '1993', '2005', '1999', '2004'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 72 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 73 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 74 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 75 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 76 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 77 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Gross Domestic Product'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 78 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'GNI per capita in PPP dollars, World Development Indicators and Global Development Finance, World Bank', 'GNI per capita in PPP dollars, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 79 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Gross National Income in PPP dollars, World Development Indicators and Global Development Finance, World Bank', 'Gross National Income in PPP dollars, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 80 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'GDP per capita (current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 81 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Pump price for fuel, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 82 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'GDP growth rate, World Development Indicators, World Bank', 'World Bank, World Development Indicators, GDP Growth Rate'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 83 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Part time employment, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 84 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'High-technology exports (% of manufactured exports), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 85 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Military expenditure as percentage of GDP, World Development Indicators and Global Development Finance, World Bank', 'Military expenditure as percentage of GDP, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 86 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Long-term unemployment, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 87 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Merchandise trade (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 88 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Interest rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 89 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'GDP production (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 90 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'GDP expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 91 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.government_debt_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Government debt as percent of GDP, Government Debt in Europe, Eurostat', 'Eurostat, Government Debt, Government Debt as Percentage of GDP'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 92 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.broadband_penetration_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Broadband penetration rate, Broadband penetration in Europe, Eurostat'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 93 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Prevalence of undernourishment (% of population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 94 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Labor participation rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 95 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Emigration rate of tertiary educated (% of total tertiary educated population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 96 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Literacy rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 97 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1978', '1998', '2004', '1962', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1997', '1969', '1990', '2007', '1994', '2009', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1976', '1972', '1981', '2005', '1999', '1971', '2001', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 98 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1978', '1998', '1962', '1970', '1977', '1966', '1973', '1967', '1996', '1969', '1997', '1990', '2007', '2009', '1994', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '2001', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1972', '1976', '1981', '1999', '2005', '1971', '2004', '1975'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 99 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 65
            Final Answer: {'7.67826', '7.64598', '6.88301', '7.62291', '6.53799', '7.84621', '7.71747', '7.94463', '5.04331', '7.43945', '8.07719', '7.77666', '3.6415', '6.65921', '6.64649', '7.2586', '7.86048', '4.07944', '6.4749', '6.52151', '6.38859', '3.2151', '7.62169', '7.5324', '7.47866', '6.77841', '7.97698', '2.46456', '7.43739', '8.0434', '7.69863', '7.87011', '2.17844', '6.36535', '7.55233', '8.08746', '7.73682', '7.83527', '6.59232', '7.32044', '6.88', '5.76232', '6.04932', '2.8785', '5.51339', '7.25086', '7.66311', '7.49754', '6.69042', '3.40505', '7.76274', '6.89248', '8.12661', '4.68661', '7.47702', '7.59887', '7.44707', '6.47144', '6.17432', '7.76634', '4.43148', '8.13041', '6.57562', '7.53743', '6.49825'}
            Answers = 65, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 65, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Current: 100 / 166
        Checking schema 100 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1978', '1998', '1962', '2004', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1990', '1969', '1997', '2007', '1994', '2009', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1972', '1981', '1976', '1999', '2005', '1971', '2001', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 101 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Energy use per capita, World Development Indicators, World Bank', 'Energy use per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 102 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 103 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 104 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Population'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 105 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Armed forces personnel, total, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 106 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1998', '1978', '1962', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1990', '1997', '1969', '1994', '2007', '2009', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '2001', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1976', '1981', '1972', '2005', '1999', '1971', '2004', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 107 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 32
            Final Answer: {'2008', '1983', '1995', '1985', '1998', '2004', '2011', '1996', '1997', '1990', '1994', '2007', '2009', '1991', '1980', '1988', '1986', '1984', '2002', '2003', '2006', '1982', '1992', '1987', '2010', '1989', '2000', '1993', '1981', '1999', '2005', '2001'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 108 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 32
            Final Answer: {'2008', '1983', '1995', '1985', '1998', '2004', '2011', '1996', '1997', '1990', '2007', '1994', '2009', '1991', '1980', '1988', '1986', '1984', '2002', '2003', '2006', '1982', '1992', '1987', '2010', '1989', '2000', '1993', '1981', '2005', '1999', '2001'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 109 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1998', '1978', '1962', '2004', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1997', '1990', '1969', '2007', '2009', '1994', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1976', '1981', '1972', '2005', '1999', '1971', '2001', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 110 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 9
            Final Answer: {'2008', '2000', '1995', '2002', '2012', '1998', '2006', '2004', '2010'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 111 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 56
            Final Answer: {'3.24014', '1.53373', '2.88684', '1.98578', '7.12538', '2.05258', '-0.046578', '5.3105', '6.54455', '1.73066', '3.26802', '6.20365', '3.6536', '6.09806', '1.45109', '1.53845', '-0.852806', '8.20725', '5.95916', '2.5605', '-1.15623', '2.15102', '7.12586', '0.772944', '1.86263', '7.17861', '2.79809', '3.22585', '2.7977', '1.81811', '5.60973', '0.834275', '2.85997', '1.1692', '-5.49441', '0.931267', '3.69049', '3.19196', '3.38838', '-2.09016', '0.413586', '0.43108', '1.8114', '0.43588', '0.451436', '5.98479', '1.86601', '1.44816', '4.19438', '1.13468', '3.43002', '0.844228', '5.50014', '1.68306', '1.80445', '2.19892'}
            Answers = 56, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 56, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 112 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 24
            Final Answer: {'9', '15.9', '11.3', '10', '8.9', '14.7', '15.8', '15', '7.9', '11.6', '7.8', '16.3', '11.8', '8', '8.1', '8.6', '12.2', '10.5', '15.2', '16.7', '14.6', '11.7', '8.5', '11.2'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 113 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 23
            Final Answer: {'9.19', '8.03', '7.98', '8.13', '7.36', '8.28', '8.58', '8.2', '7.9', '8.55', '7.61', '8.38', '9.56', '7.47', '6.26', '7.24', '7.79', '8.09', '7.33', '9.48', '8.04', '7.21', '6.4'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 114 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 28
            Final Answer: {'1.96566', '1.95837', '1.56763', '2.03602', '1.81471', '1.98844', '1.7119', '1.87687', '1.78752', '2.0623', '2.05381', '1.85105', '2.00446', '1.99687', '1.72725', '2.02678', '2.28416', '2.02997', '1.96576', '1.56819', '2.22721', '1.89569', '1.9612', '1.69058', '1.72734', '1.91716', '1.92267', '1.78369'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 115 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 27
            Final Answer: {'62.9', '68.6', '57.7', '57.1', '57.2', '48', '57.5', '51.3', '60.6', '65.6', '60.8', '66.2', '48.5', '69.3', '67', '48.3', '63.8', '46.8', '69.7', '66.3', '58.9', '65.1', '47.7', '44.1', '45.1', '68', '59.1'}
            Answers = 27, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 27, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 116 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:03] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'40.86', '49.26', '37.86', '30.95', '20.92', '21.44', '32.81', '39.41', '37.09', '25.79', '25.87', '39.14', '37.63', '37.21', '24.92', '43.41', '38.86', '27.1', '21.31', '33.51', '47.88', '22.84', '40.93', '30.93', '28.82', '41.29', '20.78', '38.94', '31.22', '31.01', '37.76', '39.58', '37.59', '21.91', '37.49', '38.89', '23.28', '36.37', '31.86', '29.59', '42.43', '45.89', '29.33', '37.73', '47.55', '35.77', '42.78', '22.58', '45.72', '20.97', '34.04', '37.91'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 117 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 26
            Final Answer: {'1.84', '7.01', '8.89', '11.75', '6.8', '1.43', '6.64', '6.93', '14.31', '6.49', '1.96', '1.61', '4.83', '11', '12.7', '10.82', '15.28', '6.69', '7.79', '7.11', '3.16', '12.91', '10.59', '0.95', '6.2', '6.45'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 118 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 39
            Final Answer: {'4.3', '8.34', '1.89', '7.01', '3.88', '4.48', '7.23', '3.28', '2.78', '3.29', '6.74', '6.64', '2.51', '5.38', '3.07', '5.62', '3.31', '3.18', '3', '4.67', '3.44', '2.01', '8.75', '4.97', '2.52', '7.48', '7.6', '8.09', '3.48', '6.34', '2.11', '2.66', '6.02', '3.56', '3.77', '2.05', '5.47', '2.55', '2.19'}
            Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 119 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 50
            Final Answer: {'-0.37', '-0.06', '-0.07', '1.32', '-0.25', '1.01', '-1.91', '1.38', '1.69', '1.13', '-3.89', '0.22', '-2', '-0.42', '0.52', '0.23', '-1.29', '1.97', '-0.82', '-2.18', '2.16', '0.86', '0.54', '-0.83', '4.72', '0.09', '3.45', '0.07', '-1.48', '1.92', '0.7', '0.96', '0.81', '-0.4', '-1.95', '0.1', '0', '0.44', '0.94', '3.84', '3.19', '0.95', '0.26', '3.22', '2.2', '1.3', '-0.53', '-2.68', '-1.12', '3.92'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 120 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.government_debt_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 28
            Final Answer: {'113', '108.3', '108.6', '103.3', '119.2', '120.8', '108.2', '114.3', '108.5', '120.9', '119.3', '106.3', '120.2', '103.9', '120.7', '105.4', '114.2', '117.5', '113.1', '106.1', '103.4', '117.4', '105.1', '103.7', '127', '116.4', '105.7', '104.1'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 121 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.broadband_penetration_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 21
            Final Answer: {'15.9', '6.1', '1', '3.8', '1.7', '2.8', '17.1', '18.8', '19.8', '20.5', '4.8', '21.9', '8.1', '18.1', '6.7', '9.5', '21.3', '1.3', '11.7', '13.1', '14.4'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 122 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'5'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 123 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 21
            Final Answer: {'40.33', '39.44', '38.45', '36.93', '38.66', '37.85', '37.53', '39.25', '39.98', '40.24', '40.34', '39.03', '39.94', '37.3', '40', '36.73', '36.61', '40.25', '36.22', '40.11', '36.38'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 124 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'9.68', '11.59'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 125 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'96.46', '98.42', '98.93'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 126 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1998', '1978', '1962', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1997', '1969', '1990', '2007', '1994', '2009', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '2001', '1987', '2010', '1989', '1974', '2000', '1993', '1965', '1976', '1972', '1981', '2005', '1999', '1971', '2004', '1975'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 127 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 29
            Final Answer: {'2008', '1983', '1995', '1985', '1998', '2004', '2011', '1996', '1990', '1997', '2009', '1994', '2007', '1991', '1988', '1986', '1984', '2002', '2003', '2006', '1992', '1987', '2010', '1989', '2000', '1993', '1999', '2005', '2001'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 128 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 24
            Final Answer: {'2008', '1995', '1998', '2004', '2011', '1996', '1997', '1990', '2007', '1994', '2009', '1991', '1988', '2002', '2003', '2006', '1992', '2010', '1989', '2000', '1993', '1999', '2005', '2001'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 129 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 24
            Final Answer: {'2008', '1995', '1998', '2011', '1996', '1990', '1997', '2009', '1994', '2007', '1991', '1988', '2002', '2003', '2006', '1992', '2001', '2010', '1989', '2000', '1993', '1999', '2005', '2004'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 130 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 29
            Final Answer: {'2008', '1983', '1995', '1985', '1998', '2011', '1996', '1990', '1997', '2007', '2009', '1994', '1991', '1988', '1986', '1984', '2002', '2003', '2006', '1992', '2001', '1987', '2010', '1989', '2000', '1993', '2005', '1999', '2004'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 131 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1978', '1998', '2004', '1962', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1969', '1990', '1997', '2009', '2007', '1994', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1972', '1976', '1981', '1999', '2005', '1971', '2001', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 132 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 26
            Final Answer: {'1983', '1995', '1985', '1998', '1978', '1996', '1990', '1997', '1994', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '2003', '1982', '1992', '1987', '1989', '2000', '1993', '1981', '1999', '2001'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 133 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 41
            Final Answer: {'2008', '1983', '1995', '1985', '1978', '1998', '2004', '1970', '1977', '1973', '1996', '1990', '1997', '2009', '2007', '1994', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '2003', '2006', '1982', '1992', '1987', '2010', '1989', '1974', '2000', '1993', '1976', '1972', '1981', '1999', '2005', '1971', '2001', '1975'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 134 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'2008', '1983', '1961', '1995', '1985', '1998', '1978', '1962', '2004', '1970', '1977', '1966', '1973', '1967', '2011', '1996', '1990', '1969', '1997', '2009', '2007', '1994', '1979', '1991', '1980', '1988', '1986', '1984', '2002', '1963', '2003', '1968', '1964', '2006', '1982', '1992', '1987', '1960', '2010', '1989', '1974', '2000', '1993', '1965', '1976', '1981', '1972', '2005', '1999', '1971', '2001', '1975'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 135 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.government_debt_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 18
            Final Answer: {'2008', '2000', '1995', '2002', '2011', '2012', '1996', '2003', '1998', '2006', '2005', '1999', '1997', '2001', '2009', '2004', '2007', '2010'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 136 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.broadband_penetration_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 21
            Final Answer: {'2008', '2002', '2011', '2003', '2004', '2006', '2005', '2009', '2007', '2010'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 137 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'2008', '1991', '2000', '2011', '2005'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 138 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 22
            Final Answer: {'2008', '1995', '1998', '2011', '1996', '1997', '1990', '2009', '1994', '2007', '1991', '2002', '2003', '2006', '1992', '2001', '2010', '2000', '1993', '2005', '1999', '2004'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 139 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'1990', '2000'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 140 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'2010', '1981', '2001'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 141 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'World Bank, World Development Indicators, Life Expectancy', 'Life expectancy, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 142 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Fertility Rate'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 143 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'CO2 emissions per capita, World Development Indicators and Global Development Finance, World Bank', 'CO2 emissions per capita, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 144 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 57
            Final Answer: {'2318', '3016.17', '2462', '2719', '1007', '2813', '2206', '3089.51', '2050', '2611', '2175', '1551', '2407', '2284', '2253', '2311', '3137.39', '2796', '3016.32', '3021.25', '2941', '2566', '2735', '2645', '2912', '2578', '2583', '1431', '3128.31', '2814', '1316', '2834', '2212', '2265', '890.68', '2799', '1698', '2264', '3024.8', '2942', '1119', '1221', '794.821', '3012.22', '2203', '2627', '2340', '3114.73', '1949', '2026', '2738', '1832', '2204', '2106', '2957', '2247', '3084.93'}
            Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 145 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 146 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjusted_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'7.48448e+11', '6.07275e+11', '4.83284e+11', '1.17019e+12', '7.39125e+11', '7.14614e+11', '5.08949e+11', '1.12218e+12', '3.76367e+11', '4.55507e+11', '6.74424e+11', '9.50813e+11', '9.18738e+11', '1.1173e+12', '3.16096e+11', '5.18202e+11', '1.00967e+12', '9.37596e+11', '6.36948e+11', '7.57199e+11', '6.53257e+11', '9.98731e+11', '4.27527e+11', '7.45365e+11', '1.17182e+12', '5.94582e+11', '9.51976e+11', '5.37326e+11', '1.12508e+12', '8.88628e+11', '3.54538e+11', '5.75615e+11', '9.71274e+11', '3.35706e+11', '7.81625e+11', '1.05826e+12', '1.12237e+12', '1.18754e+12', '1.02857e+12', '8.26475e+11', '1.04299e+12', '1.11068e+12', '3.98892e+11', '1.14684e+12', '1.09734e+12', '8.03495e+11', '9.59334e+11', '8.52856e+11', '3.64457e+11', '2.92121e+11', '1.13937e+12'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 147 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'44.2632'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 148 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'11.4403'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 149 / 166: {
          [('Main', '==', 'm.03rjj', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'Switzerland', 'France', 'Slovenia', 'Austria'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 150 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 6
            Final Answer: {'Antigua and Barbuda', 'Algeria', 'Tuvalu', 'Albania', 'Madagascar', 'Scotland'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 151 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'2004'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 152 / 166: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 420
            Final Answer: {'Davide Uccellari', 'Valeria Straneo', 'Lucia Bosetti', 'Alexander Ploner', 'Irene Vecchi', 'Dante Boninfante', 'Federica Pellegrini', 'Manuela Gentili', 'Federico Esposito', 'Arianna Errigo', 'Maurizio Felugo', 'Elia Luini', 'Tatiana Guderzo', 'Dragan Travica', 'Romina Laurito', 'Patrick Staudacher', 'Danijel Premuš', 'Andreas Seppi', 'Giampiero Pastore', 'Niccolò Ferrari', 'Erika Ferraioli', 'Giulia Quintavalle', 'Maurizio Oioli', 'Arianna Barbieri', 'Andreea Stefanescu', 'Denis Marconato', 'Luca Garri', 'Flavia Pennetta', 'Paola Croce', 'Daniela Ceccarelli', 'Riccardo De Luca', 'Josefa Idem', 'Salvatore Sanzo', 'Andrea Morassi', 'Alex Di Giorgio', 'Matteo Tagliariol', 'Roland Fischnaller', 'Vincenzo Picardi', 'Francesco Bruno', 'Manuela Mölgg', 'Giulia Arcioni', 'Giuseppe Giordano', 'Alberto Cisolla', 'Pietro Piller Cottrer', 'Sara Errani', 'Gerhard Kerschbaumer', 'Pietro Zucchetti', 'Alessandro Fabian', 'Giorgio Rubino', 'Michela Ponza', 'Roberta Bianconi', 'Wendy Siorpaes', 'Marco Belotti', 'Elio Ragni', 'Domenico Valentino', 'Francesca Schiavone', 'Luigi Mastrangelo', 'Diletta Carli', 'Elania Nardelli', 'Stefano Tempesti', 'Andrea Ferrari', 'Ermanno Ioriatti', 'Karen Putzer', 'Giacomo Pastorino', 'Magda Genuin', 'Chiara Boggiatto', 'Luigi Agostino Lodde', 'Jessica Tomasi', 'Margherita Granbassi', 'Valerio Cleri', 'Matej Cernic', 'Laura Letrari', 'Noemi Cantele', 'Andrea Barzagli', 'Alessio Sartori', 'Nedo Nadi', 'Rudy Galli', 'Mara Navarria', 'Giacomo Galanda', 'Simone Raineri', 'Rosalba Forciniti', 'Marco Aurelio Fontana', 'Eva Lechner', 'Roberto Chiacig', 'Vera Carrara', 'Edwige Gwend', 'Simone Venier', 'Erica Barbieri', 'Erika Fasana', 'Manfred Mölgg', 'Samuel Pizzetti', 'Chiara Costazza', 'Matteo Ferrari', 'Massimo Fabbrizi', 'Fabrizio Donato', 'Elisa Rigaudo', 'Elena Romagnolo', 'Jenny Barazza', 'Filippo Pozzato', 'Davide Rebellin', 'Lucia Recchia', 'Michela Guzzetti', 'Simone Collio', 'Ilario Di Buò', 'Andrea Baldini', 'Mattia Pesce', 'Filippo Maria Baldassari', 'Simone Bertazzo', 'Marco Pinotti', 'Emanuele Birarelli', 'Giovanni Lombardi', 'Cristian Savani', 'Andrea Bari', 'Luca Dotto', 'José Reynaldo Bencosme de Leon', 'Luca Paolini', 'Giovanna Micol', 'Marianna Longa', 'Andrea Giovi', 'Patrick Thaler', 'Roberto Cammarelle', 'Rosario La Mastra', 'Elisa Cusma', 'Fabio Fognini', 'Sabina Valbusa', 'Daniele Meucci', 'Francesco Fossi', 'Vincenzo Nibali', 'Nicola Vizzoni', 'Vittorio Parrinello', 'Yuri Confortola', 'Federico Turrini', 'Paolo Bettini', 'Andrea Minguzzi', 'Christian Oberstolz', 'Natalia Valeeva', 'Lorenzo Carboncini', 'Alberto Schiavon', 'Monica de Gennaro', 'Libania Grenot', 'Igor Cassina', 'Peter Fill', 'Martino Goretti', 'Fabrizio Tosini', 'Alice Nesti', 'Alessandro Pittin', 'Andrea Chiarabini', 'Giulia Rondon', 'Matteo Morandi', 'Michele Benedetti', 'Gianmarco Tamberi', 'Maria Enrica Spacca', 'Pierpaolo Frattini', 'Marco Pantani', 'Mattia Cola', "Francesco Dell'Uomo", 'Matteo Soragna', 'Allegra Lapi', 'Giulia Lapi', 'Giorgio Rocca', 'Noemi Batki', 'Clemente Russo', 'Diego Confalonieri', 'Silvia Salis', 'Jacques Riparelli', 'Reinhold Rainer', 'Simona Abbate', 'Nathalie Moellhausen', 'Daniele Lupo', 'Matteo Aicardi', 'Fabio Scozzoli', 'Giulia Emmolo', 'Julieta Cantaluppi', 'Claudia Wurzel', 'Alessandro Fei', 'Wenling Tan Monfardini', 'Christian Presciutti', 'Nicola Benedetti', 'Simona Gioli', 'Daniela Merighetti', 'Massimo Bulleri', 'Damiano Pippi', 'Michal Lasko', 'Silvio Alverà', 'Elio Verde', 'Davide Manenti', 'Cristian Moreni', 'Dario Mangiarotti', 'Corinna Boccacini', 'Mario Paonessa', 'Alessia Filippi', 'Sabrina Crognale', 'Nicola Rodigari', 'Tania Cagnotto', 'Barbara Baldissera', 'Daigoro Timoncini', 'Franco Ferraris', 'Fabio Casartelli', 'Teresa Frassinetti', 'Gianmarco Pozzecco', 'Giorgio Cagnotto', 'Gioia Marzocca', 'Valentina Truppa', 'Luca Marin', 'Antonella Del Core', 'Silvia Weissteiner', 'Mauro Sarmiento', 'Nicole Della Monica', 'Pietro Figlioli', 'Daniele Molmenti', 'Massimo Giacoppo', 'Matteo Angioletti', 'Gianluca Basile', 'Carlo Gartner', 'Pietro Reggio', 'Gloria Hooper', 'Paolo Nicolai', 'Vittoria Panizzon', 'Enrico Pozzo', 'Sara Bertolasi', 'Stefano Pozzolini', 'Alberto Schieppati', 'Giovanna Trillini', 'Gabriele Detti', 'Giovanni Pellielo', 'Vincenzo Capelli', 'Vencislav Simeonov', 'Emanuele Abate', 'Stefano Brecciaroli', 'Tommaso Rinaldi', 'Elena Gigli', 'Denise Karbon', 'Laura Vernizzi', 'Deni Fiorentini', 'Daniele Nardello', 'Giuseppe Michielli', 'Maximilian Benassi', 'Pia Lionetti', 'Federica Faiella', 'Michele Santucci', 'Samuele Papi', 'Amaurys Perez', 'Giulia Conti', 'Daniele Danesin', 'Livio Trape', 'Riccardo Maestri', 'Mauro Nespoli', 'Andrea Caianiello', 'Rosaria Console', 'Rodolfo Rombaldoni', 'Luigi Samele', 'Stefano Carozzo', 'Massimo Scali', 'Paolo Ottavi', 'Lorenzo Povegliano', 'Cecilia Maffei', 'Matteo Trentin', 'Vittorio Chierroni', 'Andrea Pirlo', 'Sarah Podorieszach', 'Patrick Gruber', 'Elisa Di Francisca', 'Carlo Molfetta', 'Jessica Gillarduzzi', 'Luigi Tarantino', 'Giuseppe Angilella', 'Giorgio Di Centa', 'Marco Orsi', 'Antonio Ciano', 'Agnese Allegrini', 'Ruggero Pertile', 'Niccolò Campriani', 'Ivan Zaytsev', 'Giorgio Avola', 'Jessica Rossi', 'Carolina Kostner', 'Ilaria Salvatori', 'Fabio Cerutti', 'Alex Giorgetti', 'Diego Marani', 'Elisabetta Preziosa', 'Federica Radicchi', 'Matteo Stefanini', 'Chiara Cainero', 'Alex Righetti', 'Mirco Di Tora', 'Renato Pasini', 'Romano Battisti', 'Pietro Ruta', 'Chiara Bazzoni', 'Diego Occhiuzzi', 'Valentina Arrighetti', 'Walter  Bormolini', 'Vincenzo Mangiacapre', 'Ennio Falco', 'Anna Incerti', 'Oswald Haselrieder', 'Carmen Ranigler', 'Ilaria Bianchi', 'Giulia Gorlero', 'Eleonora Lo Bianco', 'Klaus Dibiasi', 'Daniele Bracciali', 'Andrea Sartoretti', 'Roberto Meloni', 'Giorgia Campana', 'Yuri Floriani', 'Clara Giai Pron', 'Francesca Clapcich', 'Gianfranco Sibello', 'Anikó Pelle', 'Monia Baccaille', 'Brenda Spaziani', 'Giacomo Bozzano', 'Costanza Zanoletti', 'Niccolo Mornati', 'Gregorio Paltrinieri', 'Francesca Dallapé', 'Manuel De Vecchi', 'Claudia Cesarini', 'Elisa Santoni', 'Alessandra Sensini', 'Alfredo Rota', 'Frank Bizzoni', 'Stefano Cipressi', 'Marzia Caravelli', 'Davide Simoncelli', 'Michele Regolo', 'Guglielmo Presenti', 'Simone Malusa', 'Nikola Radulovic', 'Marta Pagnini', 'Flavio Cannone', 'Chiara Rosa', 'Paolo Cozzi', 'Caterina Bosetti', 'Rossella Fiamingo', 'Alice Mizzau', 'Carlotta Ferlito', 'Vito Dellino', 'Sebastian Colloredo', 'Michele Frangilli', 'Alberto Busnari', 'Sebastiano Ranfagni', 'Francesca Piccinini', 'Elena Moretti', 'Matteo Rivolta', 'Manuel Cappai', 'Moreno Boer', 'Simona La Mantia', 'Nadia Fanchini', 'Carolina Costagrande', 'Marcello Miani', 'Katia Zini', 'Aldo Montano', 'Marco Galiazzo', 'Arianna Follis', 'Paolo Pizzo', 'Stefania Pirozzi', "Francesco D'Aniello", 'Yannick Kocon', 'Marco De Luca', 'Gennaro Gattuso', 'Daniele Greco', 'Giuseppe Mangiarotti', 'Filippo Magnini', 'Simone Parodi', 'Norma Murabito', 'Meinhard Erlacher', 'Michele Mian', 'Vanessa Ferrari', 'Andrea Rolla', 'Marta Menegatti', 'Francesca Deagostini', 'Elia Viviani', 'Daniele Di Spigno', 'Elisa Blanchi', 'Mariangela Perrupato', 'Petra Zublasing', 'Deborah Scanzio', 'Mirco Scarantino', 'Niccolò Gitto', 'Tania di Mario', 'Valentina Vezzali', 'Francesco Faraldo', 'Luca Agamennoni', 'Eleonora Anna Giorgi', 'Elisa Casanova', 'Sebestian Colloredo', 'Marco De Nicolo', 'Gianluca Maglia', 'Valentino Gallo', 'Elena Gemo', 'Giorgia Bronzini', 'Eros Poli', 'Annamaria Mazzetti', 'Roberta Vinci', 'Sacha Modolo', 'Greta Cicolari', 'Pietro Camporesi', 'Wilfried Huber', 'Aleksandra Cotti', 'Martina Grimaldi', 'Enrico Fabris', 'Mihai Bobocica', 'Manuel Pietropoli', 'Valerio Aspromonte', 'Andrea Cassarà', 'Bianca Del Carretto', 'Giulia Rambaldi Guidasci', 'Gabrio Zandonà', 'Luca Tesconi', 'Nadia Ejjafini', 'Massimiliano Blardone', 'Gerhard Plankensteiner', 'Nicole Gius', 'Armin Zöggeler', 'Elena Maria Bonfanti', 'Arianna Fontana', 'Anzhelika Savrayuk'}
            Answers = 420, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 420, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 153 / 166: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.006s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.006s]
        Checking schema 154 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'UK £'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 155 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'9.25e+08'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 156 / 166: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 53
            Final Answer: {'Trampoline', 'Football', 'Cross-country skiing', 'Speed skating', 'Sailing', 'Mountain biking', 'Biathlon', 'Ski jumping', 'Badminton', 'Snowboarding', 'Freestyle wrestling', 'Diving', 'Water polo', 'Racewalking', 'Volleyball', 'Figure skating', 'Equestrian vaulting', 'Archery', 'BMX racing', 'Basketball', 'Skeleton', 'Dressage', 'Road cycling', 'Tennis', 'Beach volleyball', 'Table tennis', 'Eventing', 'Short track speed skating', 'Taekwondo', 'Bobsleigh', 'Track and field athletics', 'Rowing', 'Greco-Roman wrestling', 'Road running', 'Canoe Sprint', 'Boxing', 'Artistic gymnastics', 'Track cycling', 'Canoe Slalom', 'Shooting sport', 'Judo', 'Fencing', 'Luge', 'Synchronized swimming', 'Rhythmic gymnastics', 'Freestyle skiing', 'Swimming', 'Cycling', 'Triathlon', 'Weightlifting', 'Nordic combined', 'Alpine skiing', 'Modern pentathlon'}
            Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 157 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.014s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.014s]
        Checking schema 158 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_since'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'1946'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 159 / 166: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.024s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.024s]
        Checking schema 160 / 166: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 31
            Final Answer: {'1984 Summer Olympics', '2004 Summer Olympics', '2008 Summer Olympics', '1960 Summer Olympics', '1996 Summer Olympics', '1948 Summer Olympics', '1908 Summer Olympics', '1904 Summer Olympics', '1968 Summer Olympics', '1972 Summer Olympics', '1952 Summer Olympics', '1976 Summer Olympics', '1988 Winter Olympics', '2006 Winter Olympics', '1980 Summer Olympics', '1956 Summer Olympics', '1998 Winter Olympics', '1988 Summer Olympics', '1920 Summer Olympics', '1936 Summer Olympics', '1964 Summer Olympics', '1948 Winter Olympics', '1994 Winter Olympics', '2012 Summer Olympics', '1936 Winter Olympics', '2000 Summer Olympics', '1992 Summer Olympics', '2010 Winter Olympics', '1952 Winter Olympics', '2002 Winter Olympics', '1992 Winter Olympics'}
            Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 161 / 166: {
          [('Main', '==', 'm.03rjj', ['location.country.national_anthem', 'government.national_anthem_of_a_country.anthem'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Il Canto degli Italiani'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 162 / 166: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.011s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.011s]
        Checking schema 163 / 166: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.sports'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.sports ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.sports ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Swimming'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 164 / 166: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.competitor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Federica Pellegrini', 'Italy national football team'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 165 / 166: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 4
            Final Answer: {'2007 World Aquatics Championships', '2009 Mediterranean Games', '2005 World Aquatics Championships', '2009 World Aquatics Championships'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        161 / 166 coarse schemas kept with ans_size > 0.
      } [2.075s]
      Coarse level ended, resulting in 161 schemas.
    } [2.085s]
    Type level searching (total types = 10): {
      Current: 0 / 161
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'government.government_agency'}]
[{'people.person'}]
[{'location.location'}]
[{'military.military_combatant'}]
[{'music.composition'}]
[{'fictional_universe.fictional_character'}]
[{'sports.sports_team'}]
[{'olympics.olympic_athlete'}]
[{'base.locations.continents'}]
[{'food.beer'}]
[{'base.thoroughbredracing.thoroughbred_racehorse'}]
[{'biology.animal_breed'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'location.administrative_division'}]
[{'symbols.namesake'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.government_office_or_title'}]
[{'government.government'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.location'}]
[{'military.armed_force'}]
[{'fictional_universe.fictional_universe'}]
[{'olympics.olympic_games'}]
[{'exhibitions.exhibition'}]
[{'film.film'}]
[{'media_common.netflix_title'}]
[{'location.citytown'}]
[{'type.int'}]
[{'finance.currency'}]
[{'location.administrative_division'}]
[{'book.newspaper'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.work_of_fiction'}]
[{'organization.organization'}]
[{'sports.multi_event_tournament'}]
[{'base.athletics.athletics_organization'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_metric_ton'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_metric_ton'}, {'type.float'}]
[{'measurement_unit.dated_kgoe'}, {'type.datetime'}]
[{'measurement_unit.dated_kgoe'}, {'dataworld.information_source'}]
[{'measurement_unit.adjusted_money_value'}, {'finance.currency'}]
[{'measurement_unit.adjusted_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
      Current: 100 / 161
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_metric_ton'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_kgoe'}, {'type.float'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_sport'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_games'}]
[{'government.national_anthem_of_a_country'}, {'government.national_anthem'}]
[{'sports.competitor_country_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_country_relationship'}, {'sports.sport'}]
[{'sports.competitor_country_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_country_relationship'}, {'sports.multi_event_tournament'}]
      18 typed schemas retrieved from 161 coarse schemas.
      Calculating F1 for 18 typed schemas: {
        Current: 0 / 18
        Checking schema 0 / 18: {
          [('Main', '==', 'm.03rjj', ['location.country.form_of_government']), ('Type', '==', 'government.form_of_government', ['type.object.type'])]
          var_types: [{'government.form_of_government'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Constitutional republic', 'Parliamentary republic', 'Unitary republic'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 1 / 18: {
          [('Main', '==', 'm.03rjj', ['location.location.partially_contains']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.country', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 2 / 18: {
          [('Main', '==', 'm.03rjj', ['location.location.partially_contains']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 3 / 18: {
          [('Main', '==', 'm.03rjj', ['location.location.contains']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.country', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Duchy of Milan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 4 / 18: {
          [('Main', '==', 'm.03rjj', ['location.location.contains']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 5 / 18: {
          [('Main', '==', 'm.03rjj', ['location.location.partially_containedby']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.country', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 6 / 18: {
          [('Main', '==', 'm.03rjj', ['location.location.partially_containedby']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 7 / 18: {
          [('Main', '==', 'm.03rjj', ['location.location.containedby']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.country', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 8 / 18: {
          [('Main', '==', 'm.03rjj', ['location.location.containedby']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 9 / 18: {
          [('Main', '==', 'm.03rjj', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'location.country', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'Switzerland', 'France', 'Slovenia', 'Austria'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 10 / 18: {
          [('Main', '==', 'm.03rjj', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 11 / 18: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.imported_from']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'location.country', 'location.statistical_region'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 6
            Final Answer: {'Antigua and Barbuda', 'Algeria', 'Tuvalu', 'Albania', 'Madagascar', 'Scotland'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 12 / 18: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.imported_from']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'location.statistical_region', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 13 / 18: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'olympics.olympic_athlete_affiliation'}, {'location.country', 'olympics.olympic_participating_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.028s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.028s]
        Checking schema 14 / 18: {
          [('Main', '==', 'm.03rjj', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'government.national_anthem_of_a_country'}, {'location.country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.010s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.010s]
        Checking schema 15 / 18: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'location.country', 'location.statistical_region'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.005s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.005s]
        Checking schema 16 / 18: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'location.statistical_region', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 17 / 18: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.country']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'sports.competitor_country_relationship'}, {'location.country', 'sports.sport_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:21:04] Q_Schema Request: {
            WebQ_1594|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.type fb:location.country . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.015s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.015s]
        8 / 18 typed schemas kept with ans_size > 0.
      } [0.198s]
      Typed level ended, resulting in 169 schemas.
    } [0.208s]
    Time level searching (total times = 0): {
      Current: 0 / 169
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [{'base.thoroughbredracing.thoroughbred_racehorse.date_of_death', 'base.thoroughbredracing.thoroughbred_racehorse.foaled'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
      Current: 100 / 169
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 169 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 169 schemas.
    } [0.004s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 169
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_agency.date_founded'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[set()]
[{'sports.sports_team.founded'}]
[set()]
[set()]
[{'food.beer.first_brewed'}]
[{'base.thoroughbredracing.thoroughbred_racehorse.date_of_death', 'base.thoroughbredracing.thoroughbred_racehorse.foaled'}]
[set()]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[set()]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
      Current: 100 / 169
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set()]
[set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
      0 ordinal schemas retrieved from 169 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 169 schemas.
    } [0.004s]
    [2020-12-03 14:21:04] buffer saved.
    169 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1594_schema].
  } [5m10.340s]
  Entering Q 1595 / 5810 [b'when richard nixon was president?']: {
    Show 4 E + 10 T + 0 Tm + 0 Ord = 14 linkings: {
      #00 Entity: [1, 3) (richard nixon) == m.06c97 (Richard_Nixon) {'score': 16424.345586, 'source': 0.0}
      #01 Entity: [1, 3) (richard nixon) == m.0bmb8k6 (Richard_Nixon_(footballer)) {'score': 22.354983, 'source': 1.0}
      #02 Entity: [4, 5) (president) == m.0157m (Bill_Clinton) {'score': 2.534281, 'source': 1.0}
      #03 Entity: [4, 5) (president) == m.060c4 (president) {'score': 16640.687007, 'source': 2.0}
      #04 Type: [4, 5) (president) == government.us_vice_president (us vice president) {'sim': 0.900755}
      #05 Type: [4, 5) (president) == government.us_president (us president) {'sim': 0.845975}
      #06 Type: [4, 5) (president) == government.us_vice_presidential_campaign (us vice presidential campaign) {'sim': 0.738972}
      #07 Type: [0, 1) (when) == media_common.lost_work (lost work) {'sim': 0.704577}
      #08 Type: [0, 1) (when) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.675947}
      #09 Type: [0, 1) (when) == people.cause_of_death (cause of death) {'sim': 0.669989}
      #10 Type: [0, 1) (when) == measurement_unit.time_unit (unit of time) {'sim': 0.660368}
      #11 Type: [0, 1) (when) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.6587}
      #12 Type: [0, 1) (when) == medicine.notable_person_with_medical_condition (public figure with medical condition) {'sim': 0.6575}
      #13 Type: [0, 1) (when) == film.person_or_entity_appearing_in_film (person or entity appearing in film) {'sim': 0.652189}
    } [0.000s]
    14 link data save to file.
    Coarse level searching (total entities = 4): {
      [Len-1||F1/4] (2020-12-03 14:26:12) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0157m ?p1 ?o1 . }
        [2020-12-03 14:26:12] SPARQL hit!
        Filt_Query_Ret = 35 / 89 ( 0.000s)
        [Len-1||F1/4||3/4-1] (2020-12-03 14:26:12) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 fb:m.06c97 . }
          [2020-12-03 14:26:12] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 fb:m.06c97 . }
            Query return lines = 3
          } [0.023s]
          Filt_Query_Ret = 3 / 3 ( 0.023s)
        } [0.023s]
        [Len-1||F1/4||4/4-1] (2020-12-03 14:26:12) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 fb:m.0bmb8k6 . }
          [2020-12-03 14:26:12] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 fb:m.0bmb8k6 . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.004s)
        } [0.004s]
      } [0.027s]
      [Len-1||F2/4] (2020-12-03 14:26:12) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.060c4 ?p1 ?o1 . }
        [2020-12-03 14:26:12] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.060c4 ?p1 ?o1 . }
          Query return lines = 25
        } [0.006s]
        Filt_Query_Ret = 4 / 25 ( 0.006s)
        [Len-1||F2/4||3/4-1] (2020-12-03 14:26:12) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 fb:m.06c97 . }
          [2020-12-03 14:26:12] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 fb:m.06c97 . }
            Query return lines = 3
          } [0.029s]
          Filt_Query_Ret = 1 / 3 ( 0.029s)
        } [0.029s]
        [Len-1||F2/4||4/4-1] (2020-12-03 14:26:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 fb:m.0bmb8k6 . }
          [2020-12-03 14:26:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 fb:m.0bmb8k6 . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
      } [0.041s]
      [Len-1||F3/4] (2020-12-03 14:26:13) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06c97 ?p1 ?o1 . }
        [2020-12-03 14:26:13] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.06c97 ?p1 ?o1 . }
          Query return lines = 69
        } [0.006s]
        Filt_Query_Ret = 41 / 69 ( 0.007s)
        [Len-1||F3/4||1/4-1] (2020-12-03 14:26:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 fb:m.0157m . }
          [2020-12-03 14:26:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 fb:m.0157m . }
            Query return lines = 3
          } [0.019s]
          Filt_Query_Ret = 3 / 3 ( 0.020s)
        } [0.020s]
        [Len-1||F3/4||2/4-1] (2020-12-03 14:26:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 fb:m.060c4 . }
          [2020-12-03 14:26:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 fb:m.060c4 . }
            Query return lines = 3
          } [0.056s]
          Filt_Query_Ret = 1 / 3 ( 0.056s)
        } [0.056s]
      } [0.082s]
      [Len-1||F4/4] (2020-12-03 14:26:13) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0bmb8k6 ?p1 ?o1 . }
        [2020-12-03 14:26:13] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0bmb8k6 ?p1 ?o1 . }
          Query return lines = 8
        } [0.011s]
        Filt_Query_Ret = 3 / 8 ( 0.011s)
        [Len-1||F4/4||1/4-1] (2020-12-03 14:26:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bmb8k6 ?p1 ?o1 . ?o1 ?p2 fb:m.0157m . }
          [2020-12-03 14:26:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bmb8k6 ?p1 ?o1 . ?o1 ?p2 fb:m.0157m . }
            Query return lines = 0
          } [0.014s]
          Filt_Query_Ret = 0 / 0 ( 0.014s)
        } [0.014s]
        [Len-1||F4/4||2/4-1] (2020-12-03 14:26:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bmb8k6 ?p1 ?o1 . ?o1 ?p2 fb:m.060c4 . }
          [2020-12-03 14:26:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bmb8k6 ?p1 ?o1 . ?o1 ?p2 fb:m.060c4 . }
            Query return lines = 0
          } [0.018s]
          Filt_Query_Ret = 0 / 0 ( 0.018s)
        } [0.018s]
      } [0.044s]
      [Len-2||F1/4] (2020-12-03 14:26:13) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:13] SPARQL hit!
        Filt_Query_Ret = 145 / 1029 ( 0.004s)
        [Len-2||F1/4||3/4-1] (2020-12-03 14:26:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c97 . }
          [2020-12-03 14:26:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c97 . }
            Query return lines = 66
          } [0.056s]
          Filt_Query_Ret = 0 / 66 ( 0.057s)
        } [0.057s]
        [Len-2||F1/4||3/4-2] (2020-12-03 14:26:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c97 . }
          [2020-12-03 14:26:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c97 . }
            Query return lines = 18
          } [0.742s]
          Filt_Query_Ret = 0 / 18 ( 0.743s)
        } [0.743s]
        [Len-2||F1/4||4/4-1] (2020-12-03 14:26:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0bmb8k6 . }
          [2020-12-03 14:26:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0bmb8k6 . }
            Query return lines = 0
          } [0.026s]
          Filt_Query_Ret = 0 / 0 ( 0.026s)
        } [0.026s]
        [Len-2||F1/4||4/4-2] (2020-12-03 14:26:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0bmb8k6 . }
          [2020-12-03 14:26:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0bmb8k6 . }
            Query return lines = 0
          } [0.034s]
          Filt_Query_Ret = 0 / 0 ( 0.034s)
        } [0.034s]
      } [0.866s]
      [Len-2||F2/4] (2020-12-03 14:26:14) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:14] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 205
        } [0.092s]
        Filt_Query_Ret = 58 / 205 ( 0.093s)
        [Len-2||F2/4||3/4-1] (2020-12-03 14:26:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c97 . }
          [2020-12-03 14:26:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c97 . }
            Query return lines = 18
          } [0.071s]
          Filt_Query_Ret = 11 / 18 ( 0.071s)
        } [0.071s]
        [Len-2||F2/4||3/4-2] (2020-12-03 14:26:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c97 . }
          [2020-12-03 14:26:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c97 . }
            Query return lines = 5
          } [1.774s]
          Filt_Query_Ret = 2 / 5 ( 1.775s)
        } [1.775s]
        [Len-2||F2/4||4/4-1] (2020-12-03 14:26:15) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0bmb8k6 . }
          [2020-12-03 14:26:15] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0bmb8k6 . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F2/4||4/4-2] (2020-12-03 14:26:15) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0bmb8k6 . }
          [2020-12-03 14:26:15] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.060c4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0bmb8k6 . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.005s]
      } [1.951s]
      [Len-2||F3/4] (2020-12-03 14:26:15) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:15] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 1157
        } [0.072s]
        Filt_Query_Ret = 78 / 1157 ( 0.078s)
        [Len-2||F3/4||1/4-1] (2020-12-03 14:26:16) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0157m . }
          [2020-12-03 14:26:16] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0157m . }
            Query return lines = 66
          } [0.034s]
          Filt_Query_Ret = 0 / 66 ( 0.035s)
        } [0.035s]
        [Len-2||F3/4||1/4-2] (2020-12-03 14:26:16) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0157m . }
          [2020-12-03 14:26:16] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0157m . }
            Query return lines = 25
          } [1.887s]
          Filt_Query_Ret = 0 / 25 ( 1.888s)
        } [1.888s]
        [Len-2||F3/4||2/4-1] (2020-12-03 14:26:17) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.060c4 . }
          [2020-12-03 14:26:17] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.060c4 . }
            Query return lines = 18
          } [0.086s]
          Filt_Query_Ret = 11 / 18 ( 0.086s)
        } [0.087s]
        [Len-2||F3/4||2/4-2] (2020-12-03 14:26:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.060c4 . }
          [2020-12-03 14:26:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c97 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.060c4 . }
            Query return lines = 3
          } [1.904s]
          Filt_Query_Ret = 0 / 3 ( 1.904s)
        } [1.904s]
      } [3.992s]
      [Len-2||F4/4] (2020-12-03 14:26:19) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bmb8k6 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:19] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bmb8k6 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 68
        } [0.014s]
        Filt_Query_Ret = 0 / 68 ( 0.015s)
      } [0.015s]
      396 coarse schemas retrieved from scratch.
      Calculating F1 for 396 coarse schemas: {
        Current: 0 / 396
        Checking schema 0 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.sww_base.interest'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:base.popstra.sww_base.interest ?o1 . }
          [2020-12-03 14:26:19] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:base.popstra.sww_base.interest ?o1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'80'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 1 / 396: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:19] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 2 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1946'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 3 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 4 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Scotch-Irish American', 'White American'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 5 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Virginia Clinton Kelley', 'William Jefferson Blythe, Jr.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 6 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 4
            Final Answer: {'Christianity', 'Baptists', 'Southern Baptist Convention', 'Protestantism'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 7 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1.89'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 8 / 396: {
          [('Main', '==', 'm.0157m', ['base.activism.activist.area_of_activism'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Humanitarian', 'Health advocacy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 9 / 396: {
          [('Main', '==', 'm.0157m', ['government.us_president.vice_president'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Al Gore'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 10 / 396: {
          [('Main', '==', 'm.0157m', ['music.group_member.instruments_played'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:music.group_member.instruments_played ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:music.group_member.instruments_played ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Saxophone'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 11 / 396: {
          [('Main', '==', 'm.0157m', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Summertime'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 12 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.sww_base.heat'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:base.popstra.sww_base.heat ?o1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:base.popstra.sww_base.heat ?o1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'70'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 13 / 396: {
          [('Main', '==', 'm.0157m', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'William J. Clinton Presidential Center and Park', 'Bill Clinton Boulevard'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 14 / 396: {
          [('Main', '==', 'm.0157m', ['book.author.book_editions_published'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 22
            Final Answer: {'Giving', 'Mi Vida', 'My life', 'Photograph and The American Dream, 1840-1940, The', 'State Of The Union Addresses', 'The Clinton foreign policy reader', 'Between hope and history', 'My Life', 'State of the Union Addresses of William J. Clinton', 'My Life (Russian Language Edition)', 'My Life (Limited Edition)', 'The impeachment and trial of President Clinton', 'Jean Moulin, 1899-1943', 'Clinton on Clinton', 'From Red Tape to Results'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 15 / 396: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.context_name.nickname'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 16 / 396: {
          [('Main', '==', 'm.0157m', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'The War Room'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 17 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 4
            Final Answer: {'Our land of new promise will be a nation that meets its obligations, a nation that balances its budget, but never loses the balance of its values.', 'I did not have sexual relations with that woman', 'Edgar Wayburn has worked to preserve the most breath-taking examples of the American landscape. In fact, over the course of more than a half-century, both as President of the Sierra Club and as a private citizen, he has saved more of our wilderness than any person alive.', 'There is nothing wrong with America that cannot be cured by what is right with America.'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 18 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Chelsea Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 19 / 396: {
          [('Main', '==', 'm.0157m', ['base.saturdaynightlive.person_impersonated_on_snl.snl_impersonations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.saturdaynightlive.person_impersonated_on_snl.snl_impersonations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.saturdaynightlive.person_impersonated_on_snl.snl_impersonations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Bill Clinton (Darrell Hammond)', 'Bill Clinton (Phil Hartman)'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 20 / 396: {
          [('Main', '==', 'm.0157m', ['base.inaugurations.inauguration_speaker.inauguration'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.inaugurations.inauguration_speaker.inauguration ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.inaugurations.inauguration_speaker.inauguration ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Bill Clinton 1997 presidential inauguration', 'Bill Clinton 1993 presidential inauguration'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 21 / 396: {
          [('Main', '==', 'm.0157m', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 28
            Final Answer: {'Health Security Act of 1993', 'The Climate change action plan', 'Between hope and history', 'Back to Work: Why We Need Smart Government for a Strong Economy', 'My Life', 'Putting people first', 'The impeachment and trial of President Clinton', 'The new SBA', 'Mi Vida', 'Joint Convention On The Safety Of Spent Fuel And Radioactive Waste Management', 'National Security Strategy for a New Century, 1998', 'Science in the national interest', 'Convention No. 182 for Elimination of the Worst Forms of Child Labor', 'Between Hope and History', 'Mein Leben/my Life', 'Reinventing regulation of drugs and medical devices', 'State Of The Union Addresses', 'Chemical and Biological Weapons Defense', "Technology for America's economic growth", 'Economic Report of the President of the United States & the Annual Report of the Council of Economic Advisers 2001', 'Federal Financial Management Report, 2000', 'Building the U.S. - Africa Partnership', 'Preface to the presidency', 'The new OSHA', 'The Clinton foreign policy reader', 'Clinton v. New York (1998)', 'Giving: How Each of Us Can Change the World', 'U. S. Government Manual, 1994-95'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 22 / 396: {
          [('Main', '==', 'm.0157m', ['government.politician.election_campaigns'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 4
            Final Answer: {'Bill Clinton for Congress, 1974', 'Bill Clinton for Arkansas Attorney General, 1976', 'Bill Clinton presidential campaign, 1992', 'Bill Clinton presidential campaign, 1996'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 23 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 5
            Final Answer: {'Politician', 'Lawyer', 'Statesman', 'Teacher', 'Author'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 24 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 25 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Hope'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 26 / 396: {
          [('Main', '==', 'm.0157m', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 35
            Final Answer: {'Behind the Oval Office: Winning the Presidency in the Nineties', 'The unique voice of Hillary Rodham Clinton', 'Spin Cycle: Inside the Clinton Propaganda Machine', 'The hunting of the President', 'That Book ...of Perfectly Useless Information', 'Between hope and history', 'My Life', 'Dead center', 'The wrath of Sparky', 'State of a union', 'Living History', 'Washington Babylon', "Uncovering Clinton: A Reporter's Story", 'The Case Against Hillary Clinton', 'Hustler', 'Sexual McCarthyism', 'Between Hope and History', 'Rush Limbaugh Is a Big Fat Idiot and Other Observations', 'Historia viva', 'Penguin soup for the soul', 'Waiting for the other shoe to drop--', 'No one left to lie to', 'You got to dance with them what brung you', 'High Crimes and Misdemeanors: The Case Against Bill Clinton', 'Countdown of 10 Amazing Moments from the Year 2011: No. 4 the Martin Luther King Jr. Memorial', 'The Pact: Bill Clinton, Newt Gingrich, and the Rivalry that Defined a Generation', 'The Clinton enigma', 'Boy Clinton: A Political Biography', 'First in his class', 'Clinton on Clinton', 'Target: Caught in the Crosshairs of Bill and Hillary Clinton', 'Lies and the Lying Liars Who Tell Them', 'The Clinton foreign policy reader', 'Off to the revolution', 'The unshredded files of Hillary and Bill Clinton'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 27 / 396: {
          [('Main', '==', 'm.0157m', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 5
            Final Answer: {'Corporation For National and Community Service', 'Clinton Foundation', 'United States National Economic Council', 'American India Foundation', 'Democratic Leadership Council'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 28 / 396: {
          [('Main', '==', 'm.0157m', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Governor Jack Stanton', 'Bill Clinton', 'President Bill Clinton'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 29 / 396: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.presidential_nominee.nominated_at'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.politicalconventions.presidential_nominee.nominated_at ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.politicalconventions.presidential_nominee.nominated_at ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'1996 Democratic National Convention', '1992 Democratic National Convention'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 30 / 396: {
          [('Main', '==', 'm.0157m', ['government.us_president.presidency_number'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:government.us_president.presidency_number ?o1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:government.us_president.presidency_number ?o1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'42'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 31 / 396: {
          [('Main', '==', 'm.0157m', ['base.americancomedy.impersonated_celebrity.impersonated_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Rich Little', 'Phil Hartman', 'Dana Carvey'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 32 / 396: {
          [('Main', '==', 'm.0157m', ['base.qualia.recreational_drug_user.drug_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Cannabis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 33 / 396: {
          [('Main', '==', 'm.0157m', ['book.audio_book_reader.audio_books_read'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.audio_book_reader.audio_books_read ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.audio_book_reader.audio_books_read ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'My Life [Abridged] [Audible Audio Edition]'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 34 / 396: {
          [('Main', '==', 'm.0157m', ['base.argumentmaps.moral_agent_m.apologies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.argumentmaps.moral_agent_m.apologies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.argumentmaps.moral_agent_m.apologies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {"Bill Clinton's grand jury admission"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 35 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.ethnicity']), ('Entity', '==', 'm.06c97', ['people.ethnicity.people'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.ethnicity ?o1 . ?o1 fb:people.ethnicity.people fb:m.06c97 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.ethnicity ?o1 . ?o1 fb:people.ethnicity.people fb:m.06c97 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.0157m'}
            Query return lines = 1
            Final Answer: {'Scotch-Irish American'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 36 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.profession']), ('Entity', '==', 'm.06c97', ['people.profession.people_with_this_profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.profession ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.06c97 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.profession ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.06c97 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.0157m'}
            Query return lines = 3
            Final Answer: {'Lawyer', 'Politician', 'Author'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 37 / 396: {
          [('Main', '==', 'm.0157m', ['base.americancomedy.impersonated_celebrity.impersonated_by']), ('Entity', '==', 'm.06c97', ['base.americancomedy.celebrity_impressionist.celebrities_impersonated'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:base.americancomedy.celebrity_impressionist.celebrities_impersonated fb:m.06c97 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:base.americancomedy.celebrity_impressionist.celebrities_impersonated fb:m.06c97 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.0157m'}
            Query return lines = 1
            Final Answer: {'Rich Little'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 38 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.offices'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.060c4 fb:government.government_office_category.offices ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.060c4 fb:government.government_office_category.offices ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 162
            Final Answer: {'President of Yugoslavia', 'President of the Canary Islands', 'President of Kosovo', 'President of the States of Alderney', 'President of Mongolia', 'President of Yemen Arab Republic', 'President of Djibouti', 'President of Uruguay', 'President of Zanzibar', 'President of Umbria', 'President of Israel', 'President of Northern Cyprus', 'President of the Irish Republic', 'President of Azerbaijan', 'President of the United Republic of Tanzania', 'President of Slovenia', 'President of Lombardy', 'President of Haiti', 'President of the Xunta of Galicia', 'President of Vanuatu', 'President of El Salvador', 'President of Palau', 'President of the Republic of China', 'President of Tynwald', 'President of the United States', 'President of Malta', 'President of France', 'President of Ukraine', 'President of Russia', 'President of Ichkeria', 'President of Syria', 'President of Portugal', 'Head of the Chechen Republic', 'President of Finland', 'Head of the Republic of Ingushetia', 'President of Kiribati', 'President of Argentina', 'President of Kyrgyzstan', 'President of Grande Comore', 'President of Chile', 'President of East Timor', 'President of Abkhazia', 'President of Indonesia', "President of People's Democratic Republic of Yemen", 'President of Algeria', 'President of India', 'President of Castile-La Mancha', 'Head of the Republic of Buryatia', 'President of Italy', 'President of Germany', 'President of Bashkortostan', 'President of Transnistria', 'President of Zimbabwe Rhodesia', 'President of Veneto', 'President of Brazil', 'President of North Korea', 'President of Turkey', 'President of Poland', 'President of the Soviet Union', 'President of Botswana', 'President of Estonia', 'President of Warsaw', 'President of Dagestan', 'President of Turkmenistan', 'President of Guinea-Bissau', 'President of Senegal', 'President of Croatia', 'President of the Philippines', 'President of the Democratic Republic of the Congo', 'President of the South African Republic', 'President of Mexico', 'President of the Palestinian National Authority', 'President of Afghanistan', 'President of Sierra Leone', 'President of Iraq', 'President of Armenia', 'President of the Nagorno-Karabakh Republic', 'President of Nauru', 'President of Anjouan', 'President of the Republic of Macedonia', "President of the People's Republic of China", 'President of Pakistan', 'President of Uzbekistan', 'President of Moldova', 'President of Slovakia', 'President of Spain', 'President of Yemen', 'President of South Africa', 'President of Bolivia', 'President of Latvia', 'President of Georgia', 'President of the Marshall Islands', 'President of Cuba', 'President of the Federated States of Micronesia', 'President of Burma', 'President of the Czech Republic', 'President of Iraqi Kurdistan', 'President of Princeton University', 'President of Ghana', 'President of Belarus', 'President of Hawaii', 'President of the Maldives', 'President of Fiji', 'President of French Polynesia', 'President of Czechoslovakia', 'President of the Confederate States of America', 'President of Tanzania', 'President of Khalistan', 'President of Angola', 'President of Cantabria', 'President of the Sahrawi Arab Democratic Republic', 'President of Nepal', 'President of the Federation of Bosnia and Herzegovina', 'President of Iran', 'President of the State of Palestine', 'President of the Sakha Republic', 'President of the Autonomous Region of Bougainville', 'President of Ecuador', 'President of Honduras', 'President of Romania', 'President of Mohéli', 'President of Vietnam', 'President of Rhodesia', 'Head of Karachay-Cherkessia', 'Head of the Kabardino-Balkar Republic', 'President of Tunisia', 'President of Ireland', 'President of Singapore', 'President of Venezuela', 'President of the Principality of Asturias', 'President of South Ossetia', 'President of South Korea', 'President of Dáil Éireann', 'President of Egypt', 'President of Sri Lanka', 'President of the Republic of Yemen', 'President of Guatemala', 'President of Kazakhstan', 'President of Bangladesh', 'President of Laos', 'President of Iceland', 'President of Austria', 'President of Liberia', 'President of Greece', 'President of Colombia', 'President of Montenegro', 'President of Serbia and Montenegro', 'President of Nicaragua', 'President of Trinidad and Tobago', 'President of Hungary', 'President of the United Arab Emirates', 'President of Malawi', 'President of Suriname', 'President of Paraguay', 'President of Crimea', 'President of Tajikistan', 'President of Bulgaria', 'President of Serbia', 'President of Nigeria', 'Head of the Republic of Adygea', 'President of Uganda', 'President of Extremadura'}
            Answers = 162, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 162, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 39 / 396: {
          [('Main', '==', 'm.060c4', ['fictional_universe.character_occupation.characters_with_this_occupation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.060c4 fb:fictional_universe.character_occupation.characters_with_this_occupation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.060c4 fb:fictional_universe.character_occupation.characters_with_this_occupation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 7
            Final Answer: {'President Blake', 'Richard Adar', 'Vice President Becker', 'Dan Conway', 'Amber Ericcs', 'James Taggart', 'Laura Roslin'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 40 / 396: {
          [('Main', '==', 'm.060c4', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.060c4 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.060c4 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 26
            Final Answer: {'The power confided in me will be used to hold, occupy and possess the property and places belonging to the government, and to collect the duties and imposts.', 'When the President does it, that means that it is not illegal.', "The President is the people's lobbyist.", "Jerry Ford is so dumb he can't fart and chew gum at the same time.", 'We want a president who is as much like an American tourist as possible. Someone with the same goofy grin, the same innocent intentions, the same naive trust; a president with no conception of foreign policy and no discernible connection to the U.S. government, whose Nice Guyism will narrow the gap between the U.S. and us until nobody can tell the difference.', "In America, anybody can be president. That's one of the risks you take.", 'If you want to see your plays performed the way you wrote them, become President.', 'But there are advantages to being elected President. The day after I was elected, I had my high school grades classified Top Secret.', 'A President is best judged by the enemies he makes when he has really hit his stride.', 'Under a Presidential government, a nation has, except at the electing moment, no influence; it has not the ballot-box before it; its virtue is gone, and it must wait till its instant of despotism again returns.', "As far as the job of President goes, its rewarding and I've given before this group the definition of happiness for the Greeks. I'll define it again: the full use of your powers along lines of excellence. I find, therefore, that the Presidency provides some happiness.", "Some of the Presidents were great and some of them weren't. I can say that, because I wasn't one of the great Presidents, but I had a good time trying to be one, I can tell you that.", 'But even the President of the United States sometimes must have to stand naked.', "I'm the only president you've got.", 'Meeting Franklin Roosevelt was like opening your first bottle of champagne; knowing him was like drinking it.', 'To be President of the United States, sir, is to act as advocate for a blind, venomous, and ungrateful client; still, one must make the best of the case, for the purposes of Providence.', 'Being a President is like riding a tiger. A man has to keep on riding or he is swallowed.', "When you get to be President, there are all those things, the honors, the twenty-one gun salutes, all those things. You have to remember it isn't for you. It's for the Presidency.", "When I was a boy I was told that anybody could become President. Now I'm beginning to believe it.", 'From now on, I think it is safe to predict, neither the Democratic nor the Republican Party will ever nominate for President a candidate without good looks, stage presence, theatrical delivery, and a sense of timing.', 'No man will ever bring out of the Presidency the reputation which carries him into it.', "Power is poison. It's effect on Presidents had always been tragic.", 'In America, the President reigns for four years, and journalism governs for ever and ever.', 'In our brief national history we have shot four of our presidents, worried five of them to death, impeached one and hounded another out of office. And when all else fails, we hold an election and assassinate their character.', "The president is the representative of the whole nation and he's the only lobbyist that all the one hundred and sixty million people in the country have.", 'The President has paid dear for his White House. It has commonly cost him all his peace, and the best of his manly attributes. To preserve for a short time so conspicuous an appearance before the world, he is content to eat dust before the real masters who stand erect behind the throne.'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 41 / 396: {
          [('Main', '==', 'm.060c4', ['fictional_universe.character_rank.characters_of_this_rank'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.060c4 fb:fictional_universe.character_rank.characters_of_this_rank ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.060c4 fb:fictional_universe.character_rank.characters_of_this_rank ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President of the United Federation'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 42 / 396: {
          [('Main', '==', 'm.060c4', ['media_common.quotation_subject.quotations_about_this_subject']), ('Entity', '==', 'm.06c97', ['media_common.quotation.author'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.060c4 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:media_common.quotation.author fb:m.06c97 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.060c4 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:media_common.quotation.author fb:m.06c97 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'When the President does it, that means that it is not illegal.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 43 / 396: {
          [('Main', '==', 'm.06c97', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 44 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06c97 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.06c97 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'1913'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 45 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 46 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 3
            Final Answer: {'Scottish American', 'Scotch-Irish American', 'Caucasian race'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 47 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Francis A. Nixon', 'Hannah Milhous Nixon'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 48 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Religious Society of Friends'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 49 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06c97 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.06c97 fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'1.8'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 50 / 396: {
          [('Main', '==', 'm.06c97', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'New York City'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 51 / 396: {
          [('Main', '==', 'm.06c97', ['people.deceased_person.place_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon Library & Birthplace'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 52 / 396: {
          [('Main', '==', 'm.06c97', ['base.activism.activist.area_of_activism'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Anti-communism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 53 / 396: {
          [('Main', '==', 'm.06c97', ['base.kwebbase.kwtopic.assessment'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 54 / 396: {
          [('Main', '==', 'm.06c97', ['government.us_president.vice_president'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Spiro Agnew', 'Gerald Ford'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 55 / 396: {
          [('Main', '==', 'm.06c97', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 3
            Final Answer: {'11-3-69 Broadcast: Vietnam Policy Speech', '23-73 Broadcast: End of the Vietnam War', '1-20-69 Broadcast: Presidential Inagural Speech'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 56 / 396: {
          [('Main', '==', 'm.06c97', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon Library & Birthplace'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 57 / 396: {
          [('Main', '==', 'm.06c97', ['base.schemastaging.context_name.nickname'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 58 / 396: {
          [('Main', '==', 'm.06c97', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 7
            Final Answer: {'Dick', 'Elvis Meets Nixon', 'The Assassination of Richard Nixon', 'Nixon', 'Richard', "All the President's Men", 'Frost/Nixon'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 59 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 60
            Final Answer: {'We cannot learn from one another until we stop shouting at one another -- until we speak quietly enough so that our words can be heard as well as our voices.', "Once you get into this great stream of history you can't get out. You can drown. Or you can be pulled ashore by the tide. But it is awfully hard to get out when you are in the middle of the stream -- if it is intended that you stay there.", 'I seriously doubt if we will ever have another war. This is probably the very last one.', 'Let historians not record that when America was the most powerful nation in the world we passed on the other side of the road and allowed the last hopes for peace and freedom of millions of people to be suffocated by the forces of totalitarianism. And so tonightto you, the great silent majority of my fellow AmericansI ask for your support.', 'For its part, Government will listen. We will strive to listen in new ways -- to the voices of quiet anguish, to voices that speak without words, the voices of the heart, to the injured voices, and the anxious voices, and the voices that have despaired of being heard.', 'The greatest honor history can bestow is that of peacemaker.', 'A public man must never forget that he loses his usefulness when he as an individual, rather than his policy, becomes the issue.', "Nobody is a friend of ours. Let's face it.", 'When the President does it, that means that it is not illegal.', 'Finishing second in the Olympics gets you silver. Finishing second in politics gets you oblivion.', 'The lesson of all history warns us that we should negotiate only when our military superiority is so convincing that we can achieve our objective at the conference table, and deny the aggressor theirs.', "Those who hate you don't win unless you hate them; and then you destroy yourself.", "The peace we seek in the world is not the flimsy peace which is merely an interlude between wars, but a peace which can endure for generations to come. It is important that we understand both the necessity and the limitations of America's role in maintaining that peace. Unless we in America work to preserve the peace, there will be no peace. Unless we in America work to preserve freedom, there will be no freedom.", 'I would rather be a one-term President and do what I believe is right than to be a two-term President at the cost of seeing America become a second-race power and to see this Nation accept the first defeat in its proud 190-year history.', 'The power of impeachment is, of course, solely entrusted by the Constitution to the House of Representatives. However, the Executive Branch is clearly obligated, both by precedent and by the necessity of the House of Representatives having all of the facts before reaching its decision, to supply relevant information to the Legislative Branch, as it does in aid of other inquiries being conducted by committees of the Congress, to the extent compatible with the public interest.', 'Only if you have been in the deepest valley, can you ever know how magnificent it is to be on the highest mountain.', 'A riot is a spontaneous outburst. A war is subject to advance planning.', "A man is not finished when he's defeated; he's finished when he quits.", 'Nothing matters more to the future of this Nation than insuring that our young men and women learn to believe in themselves and believe in their dreams, and that they develop this capacitythat you develop this capacity, so that you keep it all of your lives. I believe one of Americas most priceless assets is the idealism which motivates the young people of America. My generation has invested all that it has, not only its love but its hope and faith, in yours.', 'Red China and Russia are having their differences. But we cannot take too much comfort in the fact that what they are debating about is not how to beat each other but how to beat us. They are simply arguing about what kind of a shovel they should use to dig the grave of the United States.', 'Why would anyone want to be President today? The answer is not one of glory, or fame; today the burdens of the office outweigh its privileges. Its not because the Presidency offers a chance to be somebody, but because it offers a chance to do something.', "Life isn't meant to be easy. It's hard to take being on the top -- or on the bottom. I guess I'm something of a fatalist. You have to have a sense of history, I think, to survive some of these things. Life is one crisis after another.", 'The sky is no longer the limit.', 'There are these and other great causes that we were elected overwhelmingly to carry forward in November of 1972. And what we were elected to do, we are going to do, and let others wallow in Watergate, we are going to do our job.', "Defeat doesn't finish a man -- quit does. A man is not finished when he's defeated. He's finished when he quits.", 'The more you stay in this kind of job, the more you realize that a public figure, a major public figure, is a lonely man.', 'Yet we can maintain a free society only if we recognize that in a free society no one can win all the time. No one can have his own way all the time, and no one is right all the time.', 'The one thing sure about politics is that what goes up comes down and what goes down often comes up.', 'But above all, what this Congress can be remembered for is opening the way to a new American revolutiona peaceful revolution in which power was turned back to the peoplein which government at all levels was refreshed and renewed and made truly responsive. This can be a revolution as profound, as far-reaching, as exciting as that first revolution almost 200 years agoand it can mean that just 5 years from now America will enter its third century as a young nation new in spirit, with all the vigor and the freshness with which it began its first century.', 'The easiest period in a crisis situation is actually the battle itself. The most difficult is the period of indecision -- whether to fight or run away. And the most dangerous period is the aftermath. It is then, with all his resources spent and his guard down, that an individual must watch out for dulled reactions and faulty judgment.', 'But also out here in this dreary, difficult war, I think history will record that this may have been one of Americas finest hours, because we took a difficult task and we succeeded.', "People react to fear, not love --they don't teach that in Sunday School, but it's true.", 'The finest steel has to go through the hottest fire.', 'This fellow Hunt...he knows too damn much.', 'This is the greatest week in the history of the world since the Creation, because as a result of what happened in this week, the world is bigger, infinitely.', "Always remember, others may hate you, but those who hate you don't win unless you hate them-and then you destroy yourself.", 'I made my mistakes, but in all of my years in public life, I have never profited, never profited from public serviceI have earned every cent. And in all of my years of public life, I have never obstructed justice. And I think, too, that I could say that in my years of public life, that I welcome this kind of examination, because people have got to know whether or not their President is a crook. Well, I am not a crook. I have earned everything I have got.', 'If, when the chips are down, the worlds most powerful nation, the United States of America, acts like a pitiful, helpless giant, the forces of totalitarianism and anarchy will threaten free nations and free institutions throughout the world.', 'I was under medication when I made the decision not to burn the tapes.', 'In our own lives, let each of us asknot just what government will do for me, but what can I do for myself?', 'We must maintain the integrity of the White House, and that integrity must be real, not transparent. There can be no whitewash at the White House.', 'To make it possible for our children, and for our childrens children, to live in a world of peace. To make this country be more than ever a land of opportunityof equal opportunity, full opportunity for every American. To provide jobs for all who can work, and generous help for those who cannot work. To establish a climate of decency and civility, in which each person respects the feelings and the dignity and the God-given rights of his neighbor. To make this a land in which each person can dare to dream, can live his dreamsnot in fear, but in hopeproud of his community, proud of his country, proud of what America has meant to himself and to the world.', 'The average American is just like the child in the family. You give him some responsibility and he is going to amount to something. He is going to do something. If, on the other hand, you make him completely dependent and pamper him and cater to him too much, you are going to make him soft, spoiled and eventually a very weak individual.', 'I played by the rules of politics as I found them.', 'I often thought that if there had been a good rap group around in those days, I might have chosen a career in music instead of politics.', 'We are not bent on conquest or on threatening others. But we do have a nuclear umbrella that can protect others, above all the states to which we are allied or in which we have a great national interest.', 'It is necessary for me to establish a winner image. Therefore, I have to beat somebody.', 'If you think the United States has stood still, who built The largest shopping center in the world?', "A man who has never lost himself in a cause bigger than himself has missed one of life's mountaintop experiences. Only in losing himself does he find himself. Only then does he discover all the latent strengths he never knew he had and which otherwise would have remained dormant.", 'When I am the candidate, I run the campaign.', "I don't think that a leader can control to any great extent his destiny. Very seldom can he step in and change the situation if the forces of history are running in another direction.", 'Let us move from the era of confrontation to the era of negotiation.', 'It is not enough just to be for peace. The point is, what can we do about it?', 'I am not a crook.', 'You think of those kids out there. I say kids. I have seen them. They are the greatest. You see these bums, you know, blowing up the campuses. Listen, the boys that are on the college campuses today are the luckiest people in the world, going to the greatest universities, and here they are burning up the books, I mean storming around about this issueI mean you name itget rid of the war; there will be another one. Out there weve got kids who are just doing their duty. I have seen them. They stand tall, and they are proud. I am sure they are scared. I was when I was there. But when it really comes down to it, they stand up and, boy, you have to talk up to those men. And they are going to do fine; weve got to stand back of them.', 'If you want to make beautiful music, you must play the black and the white notes together.', 'No man can be fully free while his neighbor is not. To go forward at all is to go forward together.', 'Our idea is to create a situation in which those lands to which we have obligations or in which we have interests, if they are ready to fight a fire, should be able to count on us to furnish the hose and water.', 'There is no such thing as a nonpolitical speech by a politician.', "Once one determines that he or she has a mission in life, that's it's not going to be accomplished without a great deal of pain, and that the rewards in the end may not outweigh the pain --if you recognize historically that always happens, then when it comes, you survive it."}
            Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 60 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Tricia Nixon Cox', 'Julie Nixon Eisenhower'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 61 / 396: {
          [('Main', '==', 'm.06c97', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Cerebral edema', 'Stroke'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 62 / 396: {
          [('Main', '==', 'm.06c97', ['military.military_person.participated_in_conflicts'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:military.military_person.participated_in_conflicts ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:military.military_person.participated_in_conflicts ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'World War II'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 63 / 396: {
          [('Main', '==', 'm.06c97', ['base.kwebbase.kwtopic.category'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 64 / 396: {
          [('Main', '==', 'm.06c97', ['base.kwebbase.kwtopic.has_sentences'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 37
            Final Answer: {'In February, 1972, Nixon landed in China, where he had a symbolic meeting with Mao Zedong and negotiated at length with Chou en Lai.', 'Nixon ordered a cover-up, paying hush money to the burglars and obstructing the FBI inquiry into the incident.', 'During the Senate elections in 1950, Nixon accused his Democratic opponent of Communist sympathies and won the seat for the Republicans.', 'Then it was discovered that Nixon taped all his White House conversations.', 'He wanted the U.S. and USSR to share responsibility for world peace and co-operation, still allowing each to maintain its ideologies.', 'In May, 1972, Nixon was the first President to visit the Soviet Union.', 'In 1962, he lost his bid to be California Governor, and retired from politics to join a New York law firm, though he maintained his links with the Republican party and continued to take an interest in foreign affairs.', 'In August, 1942 he joined the Navy and served in the South Pacific during World War II (1939-1945.) Entering politics in 1946, Nixon was elected Republican Congressman and became a prominent player in the propaganda war against Communism.', 'Born into a modest home, Nixon was unable to take up the scholarships he was offered at Harvard and Yale and studied law in Whittier, practicing there until 1942, when he moved to Washington, DC and served for a short time in the Office of Price Administration.', 'In 1960, Nixon was chosen Republican Presidential candidate, but narrowly lost to the charismatic Democratic candidate Kennedy.', 'During the election campaign of 1972, men hired by the Republican party were caught wiretapping and burgling the headquarters of the Democratic party at its Watergate office in Washington.', 'For their part, the Chinese were anxious to end their vulnerability to Soviet dominance.', 'Nixon reduced the role of U.S. troops in Vietnam, instituting a policy sometimes known as the ""Nixon Doctrine"", which called for the provision of economic aid and military advice but no troops.', 'Realizing that impeachment was imminent, he resigned in August, 1974.', 'Nixon retired to his home in California, where he wrote several books on international affairs.', 'Nixon believed contact with China would diminish the likelihood of confrontations like that in Vietnam.', 'He served on the House Un-American Activities Committee and was largely responsible for the prosecution of Alger Hiss, a government official accused of spying.', 'That November, Nixon won a second term in a landslide victory, but two years later, ""The Washington Post"" exposed the cover-up and revealed that Nixon\'s closest aides were involved.', 'Preparing for his 1972 visit to China, conferred with French writer/philosopher Malraux, a China expert.', 'In civil rights matters, his administration pressed for positive discrimination in regard to ethnic minorities, and financial aid to the Equal Employment Opportunity Commission.', 'He partially regained his prestige and after a time was well received, particularly abroad, as an expert in foreign affairs.', 'In 1968, Nixon was again selected as Presidential candidate and this time he won, beating Democrat Hubert H Humphrey.', 'Met Castro on his 1959 US visit.', 'While upholding pro-Western regimes such as South Vietnam and Taiwan, Nixon also began approaching the big Communist powers, looking to establish mutually beneficial relations.', 'Nixon respected the scholarly Henry Kissinger, who later became Secretary of State, and followed his advice to carry out secret bombings in Laos and Cambodia.', 'He implicitly acknowledged that Taiwan was Chinese territory and gave the Russians to understand that he would scale down the U.S. military presence in Taiwan if the Russians did the same in North Vietnam.', "Nixon's aim was to modify the antagonistic Cold War tactics of his predecessors.", 'The case made Nixon a national figure.', 'Although foreign affairs overshadowed his domestic program, Nixon made an energetic effort to improve the Republican record for reform.', 'Opening up relations with Communist China.', 'He was succeeded by Vice-President Gerald Ford, who granted him a pardon.', 'From 1953 to 1960, Nixon served as Vice-president to Eisenhower.', 'Plagued by annual budget deficits and inflation, Nixon established wage and price controls, the first since World War II. He also attempted to achieve a balance of trade by devaluing the dollar, which triggered a major rise in global oil prices.', "The United States had never recognized the People's Republic of China, though it had existed for 20 years.", 'Ordered to produce the tapes, he attempted to hide them.', 'He built a following among moderates and conservative Republicans and gained a reputation for expertise in foreign affairs, visiting 56 countries including the Soviet Union, where he impressed Americans by refusing to be bullied by Russian premier Krushchev.', 'He signed U.S.-Soviet agreements on nuclear arms limitation, trade, the environment, and joint scientific and space projects.'}
            Answers = 37, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 37, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 65 / 396: {
          [('Main', '==', 'm.06c97', ['government.us_vice_president.to_president'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.us_vice_president.to_president ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.us_vice_president.to_president ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Dwight D. Eisenhower'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 66 / 396: {
          [('Main', '==', 'm.06c97', ['base.inaugurations.inauguration_speaker.inauguration'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.inaugurations.inauguration_speaker.inauguration ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.inaugurations.inauguration_speaker.inauguration ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Richard Nixon 1973 presidential inauguration', 'Richard Nixon 1969 presidential inauguration'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 67 / 396: {
          [('Main', '==', 'm.06c97', ['media_common.quotation_addressee.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:media_common.quotation_addressee.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:media_common.quotation_addressee.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'The issue of race could benefit from a period of benign neglect.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 68 / 396: {
          [('Main', '==', 'm.06c97', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 11
            Final Answer: {'Richard Nixon: Speeches, Writings, Documents', 'In the Arena', 'How to keep from getting busted', 'No Mas Vietnams/No More Vietnams', 'The Real War', 'La vraie guerre', 'RN', '1999 - Victory Without War', 'Six Crises', 'Memoirs of Richard Nixon', 'Nineteen Ninety Nine'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 69 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.election_campaigns'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Richard Nixon Presidential Campaign, 1968', 'Richard Nixon presidential campaign, 1972'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 70 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:20] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 4
            Final Answer: {'Lawyer', 'Politician', 'Military Officer', 'Author'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 71 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 72 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Yorba Linda'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 73 / 396: {
          [('Main', '==', 'm.06c97', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06c97 fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.06c97 fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'1994'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 74 / 396: {
          [('Main', '==', 'm.06c97', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 18
            Final Answer: {'Abuse of Power: The New Nixon Tapes', 'Richard M. Nixon', 'Nixon agonistes', 'Watergate', 'Very Strange Bedfellows: The Short and Unhappy Marriage of Richard Nixon and Spiro Agnew', 'Richard Nixon: Speeches, Writings, Documents', 'Years of Renewal: The Concluding Volume of his Memoirs', 'Will', 'Nixon and Mao: The Week That Changed the World', "Fear and Loathing: On the Campaign Trail '72", 'Nixon and Kissinger: Partners in Power', 'The Making of the President, 1960', 'Nightmare', 'The Contender: Richard Nixon - The Congress Years, 1946 to 1952', "Nixon's Shadow: The History of an Image", 'Frost/Nixon', 'Before the fall', 'The Great Shark Hunt'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 75 / 396: {
          [('Main', '==', 'm.06c97', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 7
            Final Answer: {'United States Environmental Protection Agency', 'Prison Fellowship', 'Occupational Safety and Health Administration', 'Minority Business Development Agency', 'National Oceanic and Atmospheric Administration', 'NASA', 'United States Drug Enforcement Administration'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 76 / 396: {
          [('Main', '==', 'm.06c97', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 77 / 396: {
          [('Main', '==', 'm.06c97', ['base.kwebbase.kwtopic.connections_from'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 5
            Final Answer: {'richard milhous nixon lost election to john fitzgerald kennedy', 'richard milhous nixon met fidel castro', 'richard milhous nixon met mao zedong', 'richard milhous nixon conferred with andre malraux', 'richard milhous nixon vice-president to dwight david eisenhower'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 78 / 396: {
          [('Main', '==', 'm.06c97', ['base.kwebbase.kwtopic.kwtype'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 79 / 396: {
          [('Main', '==', 'm.06c97', ['base.kwebbase.kwtopic.disciplines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 80 / 396: {
          [('Main', '==', 'm.06c97', ['base.politicalconventions.presidential_nominee.nominated_at'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.politicalconventions.presidential_nominee.nominated_at ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.politicalconventions.presidential_nominee.nominated_at ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 3
            Final Answer: {'1960 Republican National Convention', '1968 Republican National Convention', '1972 Republican National Convention'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 81 / 396: {
          [('Main', '==', 'm.06c97', ['government.us_vice_president.vice_president_number'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06c97 fb:government.us_vice_president.vice_president_number ?o1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.06c97 fb:government.us_vice_president.vice_president_number ?o1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'36'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 82 / 396: {
          [('Main', '==', 'm.06c97', ['government.us_president.presidency_number'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06c97 fb:government.us_president.presidency_number ?o1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.06c97 fb:government.us_president.presidency_number ?o1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'37'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 83 / 396: {
          [('Main', '==', 'm.06c97', ['base.americancomedy.impersonated_celebrity.impersonated_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Dan Aykroyd', 'Rich Little'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 84 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.ethnicity']), ('Entity', '==', 'm.0157m', ['people.ethnicity.people'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.ethnicity ?o1 . ?o1 fb:people.ethnicity.people fb:m.0157m . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.ethnicity ?o1 . ?o1 fb:people.ethnicity.people fb:m.0157m . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.0157m'}
            Query return lines = 1
            Final Answer: {'Scotch-Irish American'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 85 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.profession']), ('Entity', '==', 'm.0157m', ['people.profession.people_with_this_profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.profession ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.0157m . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.profession ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.0157m . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.0157m'}
            Query return lines = 3
            Final Answer: {'Lawyer', 'Politician', 'Author'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 86 / 396: {
          [('Main', '==', 'm.06c97', ['base.americancomedy.impersonated_celebrity.impersonated_by']), ('Entity', '==', 'm.0157m', ['base.americancomedy.celebrity_impressionist.celebrities_impersonated'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:base.americancomedy.celebrity_impressionist.celebrities_impersonated fb:m.0157m . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:base.americancomedy.celebrity_impressionist.celebrities_impersonated fb:m.0157m . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.0157m'}
            Query return lines = 1
            Final Answer: {'Rich Little'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 87 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.quotations']), ('Entity', '==', 'm.060c4', ['media_common.quotation.subjects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.quotations ?o1 . ?o1 fb:media_common.quotation.subjects fb:m.060c4 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.quotations ?o1 . ?o1 fb:media_common.quotation.subjects fb:m.060c4 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'When the President does it, that means that it is not illegal.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 88 / 396: {
          [('Main', '==', 'm.0bmb8k6', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0bmb8k6 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.0bmb8k6 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0bmb8k6'}
            Query return lines = 1
            Final Answer: {'1965'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 89 / 396: {
          [('Main', '==', 'm.0bmb8k6', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bmb8k6 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bmb8k6 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0bmb8k6'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 90 / 396: {
          [('Main', '==', 'm.0bmb8k6', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0bmb8k6 fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 WHERE { fb:m.0bmb8k6 fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.0bmb8k6'}
            Query return lines = 1
            Final Answer: {'1992'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 91 / 396: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'8e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 92 / 396: {
          [('Main', '==', 'm.0157m', ['film.actor.film', 'film.performance.character_note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 93 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'1973', '1993'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 94 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Staff Attorney', 'President'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 95 / 396: {
          [('Main', '==', 'm.0157m', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Internship'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 96 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Juris Doctor', 'Bachelor of Science'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 97 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'1973', '1968', '1964'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 98 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 99 / 396: {
          [('Main', '==', 'm.0157m', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Grammy Award for Best Spoken Word Album for Children', 'Grammy Award for Best Spoken Word Album'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Current: 100 / 396
        Checking schema 100 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Roger Clinton, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 101 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Hillary Rodham Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 102 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Fayetteville'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 103 / 396: {
          [('Main', '==', 'm.0157m', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 104 / 396: {
          [('Main', '==', 'm.0157m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Archive Footage', 'Subject of film', 'Him/Herself'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 105 / 396: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 4
            Final Answer: {'2006', '2005', '2003', '2004'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 106 / 396: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 107 / 396: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'My Life [Abridged] [Audible Audio Edition]', 'My Life', 'Wolf Tracks and Peter and the Wolf'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 108 / 396: {
          [('Main', '==', 'm.0157m', ['government.politician.party', 'government.political_party_tenure.politician'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 109 / 396: {
          [('Main', '==', 'm.0157m', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 110 / 396: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 111 / 396: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'United States of America', 'Arkansas'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 112 / 396: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Governor', 'President'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 113 / 396: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Secretary of State', 'Deputy Attorney General'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 114 / 396: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 19
            Final Answer: {'Federal Bureau of Investigation', 'United States Commodity Futures Trading Commission', 'Corporation For National and Community Service', 'Government Accountability Office', 'Executive Office of the President of the United States', 'United States Department of Health and Human Services', 'United States National Security Council', 'United States District Court for the District of New Mexico', 'United States Department of Housing and Urban Development', 'U.S. Federal Communications Commission', 'United States Department of Transportation', 'United States District Court for the Eastern District of New York', 'United States Department of Defense', 'U.S. Securities and Exchange Commission', 'United States Department of the Treasury', 'First Family', 'Cabinet of the United States', 'United States Department of Labor', 'United States Department of State'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 115 / 396: {
          [('Main', '==', 'm.0157m', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 116 / 396: {
          [('Main', '==', 'm.0157m', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Interviewee', 'Celebrity guest'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 117 / 396: {
          [('Main', '==', 'm.0157m', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 118 / 396: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.primary_candidate.pres_delegate_vote_tally', 'base.politicalconventions.pres_delegate_vote_tally.candidate'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.candidate ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.candidate ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 119 / 396: {
          [('Main', '==', 'm.0157m', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.crime'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.crime ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.crime ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {"Kathleen Willey's sexual assault"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 120 / 396: {
          [('Main', '==', 'm.0157m', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.accuser'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.accuser ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.accuser ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Kathleen Willey'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 121 / 396: {
          [('Main', '==', 'm.0157m', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.speaker_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 122 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.plaintiff'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Arkansas Supreme Court', 'Juanita Broaddrick', 'Paula Jones'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 123 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 7
            Final Answer: {'Moises Saba', 'George Bush', 'Steven Spielberg', 'Kevin Spacey', 'Ronald Burkle', 'George Clooney'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 124 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.victim'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.victim ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.victim ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Hillary Rodham Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 125 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_victim', 'base.popstra.infidelity.victim'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.victim ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.victim ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 126 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.restaurant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.restaurant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.restaurant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Frisco Freeze', 'Così'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 127 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Monica Lewinsky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 128 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.fashion_wearer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.fashion_wearer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.fashion_wearer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 129 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Baptists'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 130 / 396: {
          [('Main', '==', 'm.0157m', ['people.appointer.appointment_made', 'people.appointment.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 131 / 396: {
          [('Main', '==', 'm.0157m', ['law.litigant.party_to_cases', 'law.legal_case_party_relationship.case'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.case ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.case ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Clinton v. Jones'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 132 / 396: {
          [('Main', '==', 'm.0157m', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.from ?o2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1993'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 133 / 396: {
          [('Main', '==', 'm.0157m', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Hillary Rodham Clinton', 'Chelsea Clinton'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 134 / 396: {
          [('Main', '==', 'm.0157m', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.to ?o2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'2002', '2001'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 135 / 396: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 136 / 396: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'celebritynetworth.com'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 137 / 396: {
          [('Main', '==', 'm.0157m', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 16
            Final Answer: {'Road to the Presidency', "Killer at Large: Why Obesity is America's Greatest Threat", 'Definitely, Maybe', "A Child's Wish", 'Paul McCartney: The Space Within Us', 'Bill Clinton: His Life', 'Wordplay', 'Journeys in Black: Patti Labelle', 'An Unlikely Weapon: The Eddie Adams Story', 'Sprawling From Grace: The Consequences of Suburbanization', 'Bill Clinton: Speeches of the Presidential Years, 1993-2001', 'A Conversation With Gregory Peck', 'Shine a Light', "Honoring a Father's Dream: Sons of Lwala", 'Swing State', 'The Take'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 138 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'2001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 139 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Foreign Service'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 140 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Hope', 'Hot Springs'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 141 / 396: {
          [('Main', '==', 'm.0157m', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'My Life [Abridged] [Audible Audio Edition]', 'Wolf Tracks and Peter and the Wolf'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 142 / 396: {
          [('Main', '==', 'm.0157m', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'2003', '2004'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 143 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1975'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 144 / 396: {
          [('Main', '==', 'm.0157m', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Documentary Special'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 145 / 396: {
          [('Main', '==', 'm.0157m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 55
            Final Answer: {'Naqoyqatsi', 'Road to the Presidency', 'Maxed Out', 'Fire in the Blood', 'Assassinations That Changed the World', "This Ain't California", 'Enron: The Smartest Guys in the Room', 'The Courageous, the Forgotten', 'Bowling for Columbine', 'Why We Fight', 'I Am Because We Are', 'Air Force One', "We Are the People We've Been Waiting For", 'The Greatest Speeches of All Time: Vol. 2', 'Saint of 9/11', 'Pete Seeger: The Power of Song', 'Sprawling From Grace: The Consequences of Suburbanization', 'War Made Easy: How Presidents & Pundits Keep Spinning Us to Death', 'Frank Sinatra Memorial', 'Endgame in Ireland', 'The Take', 'Pedro', 'Live Free or Die Hard', 'Rwanda: Beyond the Deadly Pit', '30 for 30: June 17th, 1994', "Killer at Large: Why Obesity is America's Greatest Threat", 'How to Survive a Plague', 'The Shock Doctrine', 'The War Room', 'The Love We Make', 'The Storm', 'Breaking the Taboo', 'An Unlikely Weapon: The Eddie Adams Story', 'Yitzhak Rabin', 'The Queen', 'Shine a Light', 'The Hunting of the President', 'New World Order', 'Greatest Presidents of the United States', 'Too Big to Fail', "Ann Richards' Texas", 'The Century of the Self - 1: Happiness Machines', 'Wordplay', 'Journeys in Black: Patti Labelle', 'Spin', 'The Big One', 'Presidential Bloopers', 'Bill Clinton: His Life', 'A Perfect Candidate', 'Tying the Knot', 'Bill Clinton: Speeches of the Presidential Years, 1993-2001', 'America the Beautiful 2: The Thin Commandments', 'Swing State', 'Capitalism: A Love Story', 'Sicko'}
            Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 146 / 396: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 7
            Final Answer: {'Jacob Bronstein', 'Daniel Zitt', 'Wilhem Hellweg', 'Mikhail Gorbachev', 'Sophia Loren', 'Jean-Marie Geijsen'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 147 / 396: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'2005 Grammy Awards', '2004 Grammy Awards'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 148 / 396: {
          [('Main', '==', 'm.0157m', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 149 / 396: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 72
            Final Answer: {'Bill Richardson', 'William Perry', 'William J. Lynn III', 'Alexis Herman', 'William M. Daley', 'Robert Rubin', 'Seth P. Waxman', 'Charlene Barshefsky', 'Alice Rivlin', 'Rodney E. Slater', 'David Gergen', 'Greg Craig', 'Lloyd Bentsen', 'Nicholas Garaufis', 'Carol Browner', 'Lloyd Cutler', 'Federico Peña', 'Dan Glickman', 'Shaun Donovan', 'Chuck Ruff', 'Norman Mineta', 'Rahm Emanuel', 'Andrew Cuomo', 'David Satcher', 'Abner J. Mikva', 'Drew S. Days, III', 'Les Aspin', 'Henry Cisneros', 'Leon Panetta', 'John M. Deutch', 'Janet Napolitano', 'Louis Caldera', 'Dee Dee Myers', 'Peter R. Orszag', 'Beth Nolan', 'Mike McCurry', 'Jack Quinn', 'Mike Espy', 'David M. Walker', 'Edward Montgomery', 'Jake Siewert', 'Robert Reich', 'Joycelyn Elders', 'Martha Vázquez', 'Mona Sutphen', 'Franklin Raines', 'Marlee Matlin', 'Pamela Harriman', 'Madeleine Albright', 'William Cohen', 'Charles Ruff', 'Bernard W. Nussbaum', 'Lisa Caputo', 'Chairman', 'Acting Chairman', 'Ray Mabus', 'Erskine Bowles', 'Jim Sasser', 'Lawrence Summers', 'Jack Lew', 'Samuel R. Berger', 'Mack McLarty', 'George Stephanopoulos', 'Mary Schapiro', 'Stuart E. Eizenstat', 'Warren Christopher', 'Jared Bernstein', 'Louis J. Freeh', 'Joe Lockhart', 'Michael Powell', 'John Podesta', 'Vince W. Foster'}
            Answers = 72, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 72, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 150 / 396: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 151 / 396: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 58
            Final Answer: {'United States Secretary of Labor', 'United States Attorney for the District of Columbia', 'United States District Judge', 'Senior Economist and Senior Adviser,  Council of Economic Advisers', 'United States Secretary of Housing and Urban Development', 'Administrator of the Environmental Protection Agency', 'United States Trade Representative', 'White House Communications Director', 'Assistant Secretary of State for African Affairs', 'Commissioner of the Securities and Exchange Commission', 'United States Ambassador to the United Nations', 'United States Deputy Secretary of the Treasury', 'Acting FHA commissioner', 'Member of national Security Council', 'Senior Advisor to the President for Policy and Strategy', 'National Security Advisor', 'Undersecretary for International Affairs', 'Director, United States Office of Management and Budget', 'Deputy Assistant to the Press Secretary', 'Acting Chairman of Securities and Exchange Commission', 'United States Deputy Attorney General', 'United States Ambassador to China', 'Chairman of Commodity Futures Trading Commission', 'Deputy Assistant Secretary for Multifamily Housing', 'Deputy Treasury Secretary', 'United States Secretary of Commerce', 'Assistant Secretary for Policy and Evaluation, US Department of Health and Human Services', 'Deputy U. S. Trade Representative', 'Assistant to the President for Economic Policy', 'Under Secretary of Defense for Acquisitions and Technology', 'United States Secretary of Agriculture', 'United States Secretary of Defense', 'Assistant to the President and Special Counsel', 'United States Deputy Secretary of Defense', 'Deputy Chief Economist', 'United States Solicitor General', 'Comptroller General of the United States', 'Under Secretary of the State for Economic, Business and Agricultural Affairs', 'United States Secretary of State', 'White House Deputy Chief of Staff', 'US Attorney for the District of Arizona', 'Cheif Economist', 'Under Secretary of Commerce for International Trade', 'United States Under Secretary of Defense', 'United States Secretary of Transportation', 'United States Ambassador to France', 'United States Secretary of Energy', 'United States Surgeon General', 'United States Secretary of the Treasury', 'White House Media Advisor', 'United States Ambassador to Saudi Arabia', 'Special Assistant to the President for Economic Policy', 'Deputy Secretary and Chief Operating Officer', 'White House Press Secretary', 'Director of Policy Planning', 'United States Secretary of the Army', 'White House Counsel', 'White House Chief of Staff'}
            Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 152 / 396: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'President of the United States', 'Governor of Arkansas'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 153 / 396: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 154 / 396: {
          [('Main', '==', 'm.0157m', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 155 / 396: {
          [('Main', '==', 'm.0157m', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:26:21] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'887'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 156 / 396: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.primary_candidate.pres_delegate_vote_tally', 'base.politicalconventions.pres_delegate_vote_tally.tally'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.tally ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.tally ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'3372'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 157 / 396: {
          [('Main', '==', 'm.0157m', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.convicted_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 158 / 396: {
          [('Main', '==', 'm.0157m', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.crime_commited'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.crime_commited ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.crime_commited ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Lewinsky scandal'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 159 / 396: {
          [('Main', '==', 'm.0157m', ['royalty.chivalric_order_member.belongs_to_order', 'royalty.chivalric_order_membership.recipient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.recipient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.recipient ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 160 / 396: {
          [('Main', '==', 'm.0157m', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.presented_work'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1997 State of the Union Address'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 161 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.operation', 'base.popstra.operation.procedure'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.operation ?o1 . ?o1 fb:base.popstra.operation.procedure ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.operation ?o1 . ?o1 fb:base.popstra.operation.procedure ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Coronary artery bypass surgery'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 162 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.supporter', 'base.popstra.support.supported_organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'CAMPFED', 'Harlem Youth Soccer Association', 'The Global Fund to Fight AIDS, Tuberculosis & Malaria'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 163 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.perpetrator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 164 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_victim', 'base.popstra.infidelity.perpetrator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Hillary Rodham Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 165 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.designer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.designer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.designer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Panerai Luminor', 'DEF Simmons Jewlery'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 166 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.parties', 'base.popstra.party_attendance_person.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 167 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Ashville', "Martha's Vineyard", 'Punta Cana'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 168 / 396: {
          [('Main', '==', 'm.0157m', ['people.appointer.appointment_made', 'people.appointment.appointed_role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 4
            Final Answer: {'Associate Justice of the Supreme Court of the United States', 'Inspector General of the U.S. Department of Justice', 'Inspector General', 'Chairman of the United States Postal Regulatory Commission'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 169 / 396: {
          [('Main', '==', 'm.0157m', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 170 / 396: {
          [('Main', '==', 'm.0157m', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 171 / 396: {
          [('Main', '==', 'm.0157m', ['law.litigant.party_to_cases', 'law.legal_case_party_relationship.parties'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.parties ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.parties ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 172 / 396: {
          [('Main', '==', 'm.0157m', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.building'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.building ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.building ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'White House'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 173 / 396: {
          [('Main', '==', 'm.0157m', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.from ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'1997', '1993'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 174 / 396: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 175 / 396: {
          [('Main', '==', 'm.0157m', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 176 / 396: {
          [('Main', '==', 'm.0157m', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Archive Footage', 'Uncredited'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 177 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 178 / 396: {
          [('Main', '==', 'm.0157m', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Adam Frankel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 179 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'United States House Judiciary Subcommittee on the Constitution and Civil Justice', 'United States of America', 'University of Arkansas'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 180 / 396: {
          [('Main', '==', 'm.0157m', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 181 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 6
            Final Answer: {'Ramble Elementary', "St. John's Catholic Elementary School", 'Yale Law School', 'Hot Springs High School', 'University College, Oxford', 'Edmund A. Walsh School of Foreign Service'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 182 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 183 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1970'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 184 / 396: {
          [('Main', '==', 'm.0157m', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Sophia Loren', 'Mikhail Gorbachev'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 185 / 396: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 186 / 396: {
          [('Main', '==', 'm.0157m', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 187 / 396: {
          [('Main', '==', 'm.0157m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 188 / 396: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'J. William Fulbright Prize for International Understanding', 'Grammy Award for Best Spoken Word Album for Children', 'Grammy Award for Best Spoken Word Album'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 189 / 396: {
          [('Main', '==', 'm.0157m', ['government.politician.party', 'government.political_party_tenure.party'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Democratic Party'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 190 / 396: {
          [('Main', '==', 'm.0157m', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 23
            Final Answer: {'War on America', 'Show #2217', 'Thu, Sep 17, 2009', 'Bill Clinton, George H.W. Bush, Pat Roberts, Jay Rockefeller', 'September 24, 2006', 'A Royal Family', 'Randy Jackson/Paul Simon/Bill Clinton', 'President Bill Clinton', 'Bill Clinton, Dr. Jo Gayle', 'Newt Gingrich, Bill Clinton', 'Bill Clinton, Jay-Z', 'Treehouse of Horror VII', 'Stephen broadcasts from Iraq, Sgt. Robin Balcom, Spec. Tareq Salha', 'Bill Clinton', 'Show #2808', 'Show 8'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 191 / 396: {
          [('Main', '==', 'm.0157m', ['influence.influence_node.peers', 'influence.peer_relationship.peers'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:influence.influence_node.peers ?o1 . ?o1 fb:influence.peer_relationship.peers ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:influence.influence_node.peers ?o1 . ?o1 fb:influence.peer_relationship.peers ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Linda Bloodworth-Thomason'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 192 / 396: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 44
            Final Answer: {'2000', '1993', '1995', '1996', '1998', '1997', '1999', '1994', '1977', '1989'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 193 / 396: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'1983', '1979', '1993'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 194 / 396: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 35
            Final Answer: {'2008', '2000', '1995', '1993', '2002', '1996', '1998', '1978', '1997', '1999', '1994', '2001'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 195 / 396: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'1992', '1981', '2001'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 196 / 396: {
          [('Main', '==', 'm.0157m', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Alpha Phi Omega', 'DeMolay International'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 197 / 396: {
          [('Main', '==', 'm.0157m', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'To Save Our Schools, To Save Our Children', 'The Arsenio Hall Show'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 198 / 396: {
          [('Main', '==', 'm.0157m', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 199 / 396: {
          [('Main', '==', 'm.0157m', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'885'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Current: 200 / 396
        Checking schema 200 / 396: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.primary_candidate.pres_delegate_vote_tally', 'base.politicalconventions.pres_delegate_vote_tally.convention'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.convention ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.convention ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1992 Democratic National Convention'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 201 / 396: {
          [('Main', '==', 'm.0157m', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.guilty_of'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Contempt of court', 'Perjury'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 202 / 396: {
          [('Main', '==', 'm.0157m', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.sentence_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.sentence_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.sentence_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Suspension of legal license', 'Fine'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 203 / 396: {
          [('Main', '==', 'm.0157m', ['royalty.chivalric_order_member.belongs_to_order', 'royalty.chivalric_order_membership.order'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.order ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.order ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Order of the Cross of Terra Mariana'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 204 / 396: {
          [('Main', '==', 'm.0157m', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.suspect'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.suspect ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.suspect ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 205 / 396: {
          [('Main', '==', 'm.0157m', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.date_of_accusation'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.date_of_accusation ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.date_of_accusation ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1993'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 206 / 396: {
          [('Main', '==', 'm.0157m', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.type_or_format_of_presentation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.type_or_format_of_presentation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.type_or_format_of_presentation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'State of the Union address'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 207 / 396: {
          [('Main', '==', 'm.0157m', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.date ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1997'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 208 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.dated', 'base.popstra.dated.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Dolly Kyle Browning'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 209 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.insult_perpetrator', 'base.popstra.public_insult.perpetrator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 210 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.insult_perpetrator', 'base.popstra.public_insult.victim'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.victim ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.victim ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Todd Purdum'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 211 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.defendant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 212 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.operation', 'base.popstra.operation.patient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.operation ?o1 . ?o1 fb:base.popstra.operation.patient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.operation ?o1 . ?o1 fb:base.popstra.operation.patient ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 213 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.supporter', 'base.popstra.support.supporter'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 214 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 5
            Final Answer: {'Gina Gershon', 'Demi Moore', 'Sharon Stone', 'Julie Tauber McMahon', 'Belinda Stronach'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 215 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_victim', 'base.popstra.infidelity.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Huma Abedin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 216 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.diner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.diner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.diner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 217 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.date ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1995'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 218 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.parties', 'base.popstra.party_attendance_person.party'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.party ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.party ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Tribecca Ball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 219 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.vacationer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 220 / 396: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 221 / 396: {
          [('Main', '==', 'm.0157m', ['people.appointer.appointment_made', 'people.appointment.declared_on'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.declared_on ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.declared_on ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 5
            Final Answer: {'1994', '2000', '1998', '1993'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 222 / 396: {
          [('Main', '==', 'm.0157m', ['people.appointer.appointment_made', 'people.appointment.appointee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 5
            Final Answer: {'Stephen Breyer', 'Ruth Bader Ginsburg', 'Gregory H. Friedman', 'Glenn A. Fine', 'Ruth Y. Goldway'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 223 / 396: {
          [('Main', '==', 'm.0157m', ['law.litigant.party_to_cases', 'law.legal_case_party_relationship.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Defendant'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 224 / 396: {
          [('Main', '==', 'm.0157m', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.occupant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.occupant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.occupant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 225 / 396: {
          [('Main', '==', 'm.0157m', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.to ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'2001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 226 / 396: {
          [('Main', '==', 'm.0157m', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.pet'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Buddy', 'Socks'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 227 / 396: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.date ?o2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1994'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 228 / 396: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.method'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.method ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.method ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Gun'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 229 / 396: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.conventions_spoken_at'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.conventions_spoken_at ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.conventions_spoken_at ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'2000 Democratic National Convention', '2008 Democratic National Convention'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 230 / 396: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.assassinated_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassinated_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassinated_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 231 / 396: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:22] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'White House'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 232 / 396: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.date ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 233 / 396: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.outcome'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.outcome ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.outcome ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Failure'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 234 / 396: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.assassin'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassin ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassin ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Francisco Martin Duran'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 235 / 396: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.speaker'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.speaker ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.speaker ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 236 / 396: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 298
            Final Answer: {'1983', '1860', '1899', '1995', '1947', '1985', '1998', '1820', '1977', '1758', '1761', '1861', '1951', '1997', '1990', '2007', '1897', '1944', '1871', '1964', '1889', '1884', '1982', '1923', '1965', '2005', '1851', '1920', '1881', '1747', '1648', '1902', '1868', '1872', '1961', '1950', '1953', '1978', '1930', '1865', '1973', '1967', '1873', '2009', '1877', '1979', '1842', '1933', '1991', '1980', '1988', '1913', '1984', '2002', '1963', '1968', '1955', '2010', '1885', '1748', '1948', '1952', '1976', '1959', '1778', '1910', '1975', '2008', '1914', '1921', '1943', '1970', '1956', '1703', '1799', '1869', '1917', '1996', '1655', '1969', '1957', '1940', '1994', '1891', '1893', '1888', '1987', '1853', '1960', '1974', '1756', '2000', '1949', '1993', '1912', '1929', '1823', '1854', '1971', '1727', '2004', '1909', '1857', '2013', '1850', '1962', '1966', '1795', '1768', '1874', '1789', '2011', '1954', '1958', '1986', '1638', '1945', '2003', '2006', '1992', '1812', '1989', '1849', '1935', '1972', '1981', '1759', '1735', '1999', '1928', '1946', '2001', '1876'}
            Answers = 133, P = 0.007519, R = 1.000000, F1 = 0.014925
          } [0.024s]
          Answers = 133, P = 0.007519, R = 1.000000, F1 = 0.014925
        } [0.025s]
        Checking schema 237 / 396: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 238 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.leaders', 'organization.leadership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.from ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 422
            Final Answer: {'1983', '1860', '1899', '1995', '1947', '1985', '1998', '1977', '1951', '1997', '1990', '2007', '1897', '1944', '1871', '1964', '1889', '1982', '1879', '1939', '1965', '2005', '1920', '1881', '1898', '1902', '1961', '1950', '1896', '1953', '1908', '1915', '1978', '1930', '1973', '1967', '1880', '1873', '1905', '2009', '1848', '1877', '1979', '1991', '1980', '1988', '1913', '1984', '2002', '1938', '1968', '1875', '1955', '2010', '1885', '1934', '1948', '1952', '1976', '1959', '1922', '1910', '1975', '1837', '2008', '1914', '1921', '1924', '1943', '1970', '1717', '1895', '1956', '1904', '1925', '1941', '1869', '1917', '1996', '1932', '1766', '1957', '1969', '1994', '1907', '1891', '1882', '1852', '1888', '1987', '1853', '1974', '2000', '1949', '1993', '1887', '1971', '2004', '1909', '1867', '1901', '2013', '1931', '1780', '1962', '1874', '1890', '1831', '1916', '1824', '2011', '1954', '1958', '1883', '1926', '1986', '2012', '1945', '2003', '1918', '2006', '1992', '1864', '1989', '1894', '1806', '1866', '1849', '1935', '1972', '1981', '1999', '1946', '1928', '2001', '1876'}
            Answers = 136, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 136, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 239 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.leaders', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 240 / 396: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 209
            Final Answer: {'1983', '1995', '1985', '1998', '1820', '1977', '1758', '1761', '1861', '1990', '1997', '2007', '1897', '1822', '1892', '1964', '1889', '1982', '1923', '1741', '1939', '1965', '2005', '1881', '1747', '1902', '1868', '1896', '1950', '1961', '1755', '1953', '1978', '1865', '1973', '1967', '1880', '1919', '2009', '1877', '1979', '1863', '1933', '1991', '1980', '1988', '1913', '1642', '1984', '2002', '1963', '1968', '1955', '2010', '1776', '1885', '1934', '1948', '1952', '1976', '1959', '1797', '1910', '1975', '2008', '1914', '1924', '1943', '1970', '1956', '1941', '1869', '1650', '1917', '1996', '1932', '1766', '1969', '1957', '1994', '1893', '1888', '1987', '1853', '1960', '1974', '2000', '1794', '1993', '1949', '1929', '1854', '1971', '2004', '1727', '1857', '1901', '1962', '1966', '1874', '1856', '1757', '2011', '1958', '1954', '1662', '1986', '2012', '1945', '2003', '2006', '1992', '1812', '1989', '1972', '1981', '1999', '1946', '2001', '1827', '1876'}
            Answers = 121, P = 0.008264, R = 1.000000, F1 = 0.016393
          } [0.027s]
          Answers = 121, P = 0.008264, R = 1.000000, F1 = 0.016393
        } [0.027s]
        Checking schema 241 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.leaders', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 4150
            Final Answer: {'University of Appalachia College of Pharmacy', 'Welch College', 'Howard University', 'McCombs School of Business', 'Regent College', 'Minnesota West Community and Technical College', 'Seton Hall University', 'Northern Arizona University', 'Culinary Institute of America at Greystone', 'Mt. San Antonio College', 'Florida International University', 'Smith College', 'All Hallows College', 'Feng Chia University', 'Andover Newton Theological School', 'Northwest Mississippi Community College', 'Western Seminary', 'Aoyama Gakuin', 'Western New Mexico University', 'St. Andrews Presbyterian College', 'Mendocino College', 'Gerasimov Institute of Cinematography', 'Kentucky Wesleyan College', 'California College of the Arts', 'Sinhgad Technical Education Society', 'The College of New Jersey', 'Siena College, Quezon City', 'San Diego Continuing Education', 'National Technical Institute for the Deaf', 'Granite State College', 'Hamline University', 'Frostburg State University', 'American Academy of Dramatic Arts', 'Lakeland College', 'Thomas Edison State College', 'University of Paderborn', 'Zayed University', 'Thomas University', 'Academy of Vocal Arts', "Collège de l'Acadie", 'Jimei University', 'Holy Cross College', 'Johnson C. Smith University', 'University of La Réunion', 'Indiana Institute of Technology', 'Institute of Algological Research', 'Le Cordon Bleu College of Culinary Arts in Orlando', 'University of Oklahoma College of Medicine', 'University of Medicine and Dentistry of New Jersey', 'Trinity Valley Community College', 'Nova Scotia College of Art and Design University', 'Bluefield State College', 'Silliman University', 'Offenbach University of Art and Design', 'Al Jamiatul Ashrafia', 'J. Sargeant Reynolds Community College', 'Pusan University of Foreign Studies', 'University of Groningen', 'Milwaukee School of Engineering', 'Trinity Christian College', 'University of Maryland Eastern Shore', 'Gulf Coast Community College', 'Mannes College of Music', 'Ain Shams University Faculty of Medicine', 'Royal Roads University', 'Reinhardt College', 'Carlos Albizu University', 'New Mexico Highlands University', 'Academy of Fine Arts, Munich', 'Korea University', 'Aeronautical Digest Publishing', 'Des Moines University', 'Allen University', 'Malcolm X College', 'Our Lady of the Lake University', 'Gyeongju University', 'Lakeland Community College', 'Massachusetts Bay Community College', 'City College', 'The Fisher Valley College', 'Community College of Aurora', 'Randolph-Macon College', 'Kilgore College', 'Itasca Community College', 'Belmont University', 'Massachusetts Institute of Technology', 'Chubu University', 'Cape Cod Community College', 'Dakota County Technical College', 'University of Dubuque', 'Domaine Clarence Dillon', 'Nanjing Audit University', "Saint Joseph's University", 'Chonnam National University', 'John A. Logan College', 'Covenant Theological Seminary', 'Mohawk College', 'Waukesha County Technical College', 'University of Paris-Sud', 'Tunghai University', 'Laredo Community College', "Saint Michael's College", 'Moravian College', "St. Mary's College, Galway", 'The Art Institute of California- Sunnyvale', 'Butler University', 'Ursuline College', 'University of Auvergne', 'University of Bamberg', 'Hampton University', 'Colgate Rochester Crozer Divinity School', 'University of Kitakyushu', 'Prince of Songkla University', 'Upper Iowa University', 'Alvernia University', 'Cooking and Hospitality Institute of Chicago', 'Bread for the World', 'University of Maine', 'Rush University', 'Berkshire Community College', 'Kyoto College of Graduate Studies for Informatics', 'University of Trinidad and Tobago', 'TUHH', 'Aurora College', 'Bay Path College', 'Liceo de Cagayan University', 'Northeastern Illinois University', 'New Brunswick Community College', 'University of Utah', 'Georg-August University of Göttingen', 'Sanno Institute of Management', 'Royal Northern College of Music', "University of King's College", 'California University of Pennsylvania', 'Christopher Newport University', 'Dominican House of Studies', 'Georgia Tech Lorraine', "St. Andrew's University", 'University of Windsor', 'Dankook University', 'Central Christian College of the Bible', 'D. O. Mills & Company', 'Northwestern University', 'Thompson Rivers University', 'State University of New York Institute of Technology', 'Canada Christian College', 'Kagawa University', 'College of San Mateo', 'American College of Management and Technology', 'Whitman College', 'University of the District of Columbia', 'University of Delaware', 'Concordia University at Austin', 'Princeton Theological Seminary', 'Metropolitan Community College', 'Radboud University Nijmegen', 'Kanto Gakuin University', 'Russian State Agricultural University', 'Mary Baldwin College', 'Acadia Divinity College', 'Johann Wolfgang Goethe University of Frankfurt am Main', 'Grinnell College', 'University of North Texas Health Science Center at Fort Worth', 'Berea College', 'John Leland Center for Theological Studies', 'Daemen College', 'Fashion Institute of Design & Merchandising', 'Evangelic Seminary of Puerto Rico', 'Chandler-Gilbert Community College', 'Virginia State University', 'Lancaster Bible College', 'HTW Berlin - University of Applied Sciences', 'Beirut Arab University', 'Toronto Baptist Seminary and Bible College', 'Briercrest College and Seminary', 'Saint Joseph Seminary College', 'Montreat College', 'Santa Isabel College, Manila', 'Ansan College of Technology', 'School of Visual Arts', 'The University of Southern Mississippi', 'Université Saint-Joseph', 'Defiance College', 'ILS Law College', 'Lehman College', 'The Art Institute of California - San Diego', 'Pennsylvania Academy of the Fine Arts', 'University of Tulsa', 'Sangji University', 'Delgado Community College', 'Monroe County Community College', 'Klamath Community College', 'Lutheran Theological Seminary at Gettysburg', 'Adventist International Institute of Advanced Studies', 'Alvin Community College', 'Universidad EAFIT', 'Tyler Junior College', 'Acadia Coal', 'Baptist Missionary Association Theological Seminary', 'Union Theological Seminary in the City of New York', 'Ramakrishna Mission Vivekananda College', 'Chiang Kai Shek College', 'McMaster Divinity College', 'Savannah State University', 'Southern California University of Health Sciences', 'Oklahoma City University', 'Aalto University', 'Rutgers University', 'University of St. Gallen', 'Fuller Theological Seminary', 'College of Western Idaho', 'Holyoke Community College', 'Salve Regina University', 'National Kaohsiung First University of Science and Technology', 'Seton Hill University', 'University of San Francisco', 'Benedictine University', 'University of Twente', 'University of Mosul', 'Gainesville State College', 'Divine Word Seminary', 'University of Applied Sciences Rosenheim', "Saint Peter's College, New Jersey", 'University of North Florida', 'Digital Lumens', 'Hillsborough Community College', 'Antelope Valley College', 'Missouri Valley College', 'Athens State University', 'Tohoku Gakuin University', 'Universitat de València', 'Stevenson University', 'University of Rio Grande', 'Talladega College', 'Edgewood College', 'Hohai University', 'Bucknell University', 'School of the Art Institute of Chicago', 'Navarro College', 'University of Negros Occidental-Recoletos', 'Seattle Central Community College', 'Bavarian Academy of Sciences and Humanities', 'Henry Ford Community College', 'Sarah Lawrence College', 'University of Mary Washington', 'Purdue University', 'FIM North America', 'California State University, Sacramento', 'British School at Rome', 'West Valley College', 'Bowdoin College', 'Houghton College', 'Flagler College', 'Cairo University', 'Peace College', 'La Roche College', 'Fairfield University', 'Blackfeet Community College', 'Tusculum College', 'Trine University', 'Canadian Manufacturers Association', 'Iqra University', 'Sonoma State University', 'University of Atlanta', 'College of Saint Mary', 'American University of Afghanistan', 'Lake City Community College', 'Conrad Grebel University College', 'University of Bayreuth', 'Chapman University', 'Hirosaki University', 'Northern Lights College', 'Pantheon-Assas University', 'Ponce School of Medicine', 'California State University, Dominguez Hills', 'Washtenaw Community College', 'Nippon Sport Science University', 'University of the Mediterranean', 'Kangnam University', 'University of Applied Sciences Düsseldorf', 'Salt Lake Community College', 'Canadian Public Health Association', 'Northeast Forestry University', 'Bangor University', 'Greenville Presbyterian Theological Seminary', 'GuideStar', 'Meiji Gakuin University', 'Seoul national university of technology', "St Kieran's College", 'Mesa Community College', 'Columbia College Chicago', 'Pennsylvania College of Technology', 'University of Science and Arts of Oklahoma', 'Notre Dame of Marbel University', 'Mae Fah Luang University', 'Bermuda College', 'Soonchunhyang University', 'Visible Music College', 'Tongji Medical College', 'Ripon College', 'Brock University Faculty of Business', 'Kalamazoo Valley Community College', 'Bilkent University', 'DeSales University', 'Concordia Seminary', 'Washington Theological Union', 'American InterContinental University', 'Claremont McKenna College', 'Golden Gate University', 'Nova Scotia Agricultural College', 'Grand Valley State University', 'Western State University College of Law', 'University of Evansville', 'Castleton State College', 'Texas A&M University–San Antonio', 'Hannan University', 'Eastern Illinois University', 'Ottawa University', 'Los Angeles Valley College', 'Braun', 'Mansfield University of Pennsylvania', 'Stevens Institute of Technology', 'Lunghwa University of Science and Technology', 'McNeese State University', 'Austin Peay State University', 'Gaston College', 'The College of New Rochelle', 'New England Institute of Art', 'Jones International University', 'New England School of Communications', 'Columbia College Hollywood', 'Royal Academy of Italy', 'Pearl River Community College', 'Cochise College', 'Viterbo University', 'Mount Hood Community College', 'University of Illinois at Chicago', 'Mount Wachusett Community College', 'State University of New York at Stony Brook', 'Hongik University', 'Monash University, Gippsland campus', 'West Los Angeles College', 'University of New Haven', 'ISPI', 'Kanawha Valley Community and Technical College', 'Mansoura University', 'Foundation University', 'Middle Georgia College', 'Koç University', 'Edward Waters College', 'College of Santa Fe', 'State University of New York at Delhi', 'Glenville State College', 'Meijo University', 'University of St. Thomas', 'Bryn Athyn College', 'Chadron State College', 'Institut Teknologi Sepuluh Nopember', 'Hobart and William Smith Colleges', 'Central China Normal University', 'University of Texas at Dallas', 'Drew University', 'Riverside Community College', 'University of the Littoral Opal Coast', 'Saint Catharine College', 'Shoreline Community College', 'Hood College', 'Saint Petersburg State University of Information Technologies, Mechanics and Optics', 'Thomas More College of Liberal Arts', 'El Camino College', 'Canisius College', 'Rizal Technological University', 'Sichuan University', 'Listening Library', 'Illinois State University', 'Fleming College', "St. Edward's University", 'Los Medanos College', 'Skidmore College', 'Culinary Institute of America', 'Laramie County Community College', 'Alma College', 'Andrew College', 'University of Idaho', 'Knoxville College', 'Argosy University, Seattle', 'Ancilla College', 'American University in Cairo', 'Rockhurst University', 'Wichita State University', 'West Kentucky Community and Technical College', 'Trinity College, Oxford', 'An-Najah National University', 'Jas. D. Easton Inc.', 'Westminster Theological Seminary', 'Tama Art University', 'Hong Kong Institute of Education', 'Musashino Art University', 'American University of Nigeria', 'Jean Monnet University', 'Rosalind Franklin University of Medicine and Science', 'Seneca College', 'University of the Southwest', 'John F. Kennedy University', 'Lee College', "St. Martin's University", 'University of Sfax', 'Scottsdale Community College', 'Butler Community College', 'Eastern Nazarene College', 'University of Hawaii at Hilo', 'Wakayama University', 'Clemson University', 'Northwestern Polytechnic University', 'Toyo University', 'Western Wyoming Community College', 'Universidad del Norte, Colombia', 'Line Ind. Corp.', 'New Orleans Baptist Theological Seminary', 'La Cité collégiale', 'Northwest Community College', 'Ramapo College', 'Mudra Institute of Communications Ahmedabad', 'Kinki University', 'Columbus College of Art and Design', 'El Paso Community College', 'Minnesota State University Moorhead', 'Golden West College', 'Free Wheelchair Mission', 'Universidad Panamericana Sede México', 'Ocean University of China', 'East Tennessee State University', 'Chipola College', 'Elms College', 'Pukyong National University', 'La Sierra University', 'Merseburg University of Applied Sciences', 'Saint Columban College', 'Fachhochschule Flensburg', 'Kanda University of International Studies', 'Trinity University of Asia', 'Stephen F. Austin State University', 'Fanshawe College', 'Gettysburg College', 'College of Saint Benedict', 'Wayland Baptist University', 'Columbia University', 'University of Pittsburgh at Titusville', 'Fisk University', 'Anaheim University', 'Open University of Greece', 'Lake Erie College', 'Sul Ross State University', 'Lynchburg College', 'Fresno City College', 'San Bernardino Valley College', 'Balurghat College', 'Missouri State University', 'California Lutheran University', 'Juntendo University', 'Texas State University–San Marcos', 'Yarmouk University', 'Houston Baptist University', 'Solano Community College', 'Canadian Memorial Chiropractic College', 'Eastern University', 'Franklin University', 'Cagayan State University', 'Kyushu Institute of Technology', 'Geneva College', 'Collins College', 'Rockford College', 'Schreiner University', 'University of Corsica Pascal Paoli', 'Meikai University', 'Ave Maria School of Law', 'College of Micronesia-FSM', 'Bloomsburg University of Pennsylvania', 'Ashworth College', 'Forsyth Technical Community College', "St. Mary's College of Maryland", 'Trevecca Nazarene University', 'North Georgia College and State University', 'Epson', 'Carlos Hilado Memorial State College', 'Northern Caribbean University', 'West Chester University of Pennsylvania', 'University of Kuala Lumpur', 'Drexel University', 'Wisconsin Lutheran College', 'University of Applied Sciences Hof', 'California State University, Bakersfield', 'Clackamas Community College', "Seoul Women's University", 'BIT International College', 'University of Toledo', 'Vancouver Community College', 'Connecticut College', 'Defense Acquisition University', 'Fort Valley State University', 'University of New York Tirana', 'HAWK University of Applied Sciences and Arts', 'Providence College', 'Union Theological Seminary & Presbyterian School of Christian Education', 'Arellano University', 'Fédération Internationale de Motocyclisme', 'Colby College', 'College of Southern Nevada', 'Simmons College', 'German University in Cairo', 'University of Ouagadougou', 'University of Alabama in Huntsville', 'Cornell University', 'Wesley College, Delaware', 'Beacon College', 'Framingham State College', 'Al-Balqa` Applied University', 'National College of Business & Technology', 'Digidesign', 'Mohawk Valley Community College', 'University of Asia and the Pacific', 'State University of New York College at Buffalo', 'College of Idaho', 'Beijing Normal University', 'National College, Tiruchirapalli', 'Haigazian University', 'Asia University', 'Washington & Jefferson College', 'Concord University', 'Memorial University of Newfoundland', 'Delaware College of Art & Design', 'De La Salle-College of Saint Benilde', 'California Southern University', 'Sylhet Cadet College', 'Valdosta State University', 'Northeast Ohio Medical University', 'United States Olympic Committee', 'Sungkyunkwan University', 'Benito Juárez Autonomous University of Oaxaca', 'Hiram College', 'Immaculate Heart of Mary Seminary', 'Dr. M.G.R. Educational and Research Institute', 'Earth Sun Moon Trading Company', 'Cleveland Institute of Art', 'Mills College', 'Lindsey Wilson College', 'Canadore College', 'Wheelock College', 'American College of Chest Physicians', 'University of Hildesheim', 'Lake Superior State University', 'Tempest Plus Marketing Group', 'Warner University', 'Central College', 'Chu Hai College of Higher Education', 'Gyeongsang National University', 'ARC International', 'State University of New York at Potsdam', 'HES-SO', 'University of Virginia', 'Kean University', 'Johnson State College', 'Episcopal Divinity School', 'Faulkner University', 'National University of Kyiv-Mohyla Academy', 'College of DuPage', 'Wilson College, Mumbai', 'Methodist University', 'California Institute of Integral Studies', 'Oregon State University', 'Lackawanna College', 'Institut national des sciences appliquées de Rouen', "Mount Saint Mary's University", 'Santa Monica College', 'University of Hawaii', 'Ohio Wesleyan University', 'Nagoya City University', 'La Salle University-Ozamiz', 'Grand Canyon University', 'Nanjing Aeronautics and Astronautics University', 'Kumamoto University', 'Nazarene Theological Seminary', 'Central University for Nationalities', 'Marietta College', 'Kasem Bundit University', 'Republic Aviation', 'ETH Zurich', 'Saybrook University', 'Spring Hill College', 'Toho University', 'Duke University', 'Franklin W. Olin College of Engineering', 'Université Bordeaux Segalen', 'Florida Institute of Technology', 'Northern Mindanao State Institute of Science and Technology', 'South China Normal University', 'Shimer College', 'American University of Central Asia', 'Norfolk State University', 'Lutheran Theological Seminary, Saskatoon', 'National Institute of Development Administration', 'Neumann University', 'Los Angeles Music Academy College of Music', 'Shenandoah University', 'Khon Kaen University', 'Niagara University', 'Confederation College', 'Tunisia Private University', 'Open University of Israel', 'American Academy of Art', 'Rose Bruford College', 'Saskatchewan Institute of Applied Science and Technology', 'Garrett-Evangelical Theological Seminary', 'Graduate Theological Union', 'Judson College, Illinois', 'Georgia Health Sciences University', 'Dokkyo University', 'Limestone College', 'Roxbury Community College', 'St. Clair County Community College', 'University of Scranton', 'Wesley College, Winnipeg', 'Adventist University of the Philippines', 'European Investment Bank', 'Baldwin-Wallace College', 'Great Orchestra of Christmas Charity', 'Broome Community College', 'Ashland University', 'AMA Computer University', 'University of Algiers', 'The Art Institute of Dallas', 'University of the Rockies', 'Osaka Gakuin University', 'Amridge University', 'University of the Sunshine Coast', 'Point Loma Nazarene University', 'Campion College', 'Eastern New Mexico University', 'Kyoto City University of Arts', 'Christendom College', 'London: Milestone Publications, Ltd.', 'St. Louis College of Pharmacy', 'Brescia University', 'Hope International University', 'College of Notre Dame of Maryland', 'Harford Community College', 'University of Lübeck', 'Washington and Lee University', 'Haverford College', 'Shih Chien University', 'X.com', 'Burapha University', 'Southeast University', 'Davis College', 'California Institute of the Arts', 'University of Portland', 'Chukyo University', 'Piedmont Baptist College', 'University of the Cordilleras', 'Baptist Theological Seminary', 'Kent State University', 'University of Tours', 'Pittsburgh Theological Seminary', 'Gifu Pharmaceutical University', 'Utsunomiya University', 'Central Mindanao University', 'Oakland City University', 'Technological Institute of the Philippines', 'Hong Kong Baptist University', 'North Carolina Wesleyan College', 'Centro de Enseñanza Técnica y Superior', 'School of the Museum of Fine Arts, Boston', 'New Saint Andrews College', 'Brewton-Parker College', 'McMurry University', 'Pace University', 'East Central University', 'Charles S. Mott Community College', 'Roanoke College', "Saint Mary's College of California", 'Southern University and A&M College', 'American Genetic Association', "Sungshin Women's University", 'Trinity College and Seminary', 'Bellarmine University', 'The Seattle School of Theology & Psychology', 'San Francisco Conservatory of Music', 'Stendhal University', 'Hampden-Sydney College', 'Iman University', 'Epic Bible College', 'Lynn University', 'Seminole State College of Florida', 'Senshu University', 'Antillean Adventist University', 'European University Institute', 'Worcester Polytechnic Institute', 'Delaware County Community College', 'Marymount University', 'University of Paris IV: Paris-Sorbonne', 'Harrisburg University of Science and Technology', 'Chang Jung Christian University', 'Huntingdon College', 'St. Thomas Aquinas College', 'Korea National University of Education', 'University of Notre Dame', 'Loyola Marymount University', 'National Defense University', 'Marymount College, Palos Verdes', 'Northwest Florida State College', 'Chicago Teachers Union', 'Cape Fear Community College', 'Clayton State University', 'Hefei University of Technology', 'Northern Christian College', 'Virginia Union University', 'Naropa University', 'Tennessee Wesleyan College', 'Magdalen College, Oxford', 'Humber College', 'Chonbuk National University', 'Tokyo City University', 'Louisburg College', 'Alberta College of Art and Design', 'Shenkar College of Engineering and Design', 'University of Alabama', 'Trocaire College', 'University of Strasbourg', 'Luther College', 'Southwestern Baptist Theological Seminary', 'Long Island University', 'University of Massachusetts Boston', 'Williams Manufacturing Company', 'Caddo-Kiowa Technology Center', 'Ivy Tech Community College of Indiana', 'Bentley College', 'Université de La Rochelle', 'KCG', 'Blue Mountain College', 'The Art Institute of Atlanta - Decatur', 'John Paul the Great Catholic University', 'Holy Name University', 'Citrus College', 'University of Sioux Falls', 'North West Agriculture and Forestry University', 'Association of IOC Recognised International Sports Federations', 'Ateneo de Manila University', 'Malayan Colleges Laguna', 'Concordia Theological Seminary', 'University of New Brunswick', "Queens' College, Cambridge", 'Hastings College', 'Sinclair Community College', 'Roger Williams University', 'Carleton University', 'Davidson College', 'University of Liberia', 'Bowie State University', 'Minufiya University', 'Franklin College Switzerland', 'Mount San Jacinto College', 'Konan University', 'Kirtland Community College', 'National Cheng Kung University', 'Meadville Lombard Theological School', 'Beijing Petroleum Institute', 'Kookmin University', 'University of Malaya', 'Pamantasan ng Lungsod ng Maynila', 'Nankai University', 'CALIFORNIA SPEEDWAY CORP', 'Colorado Christian University', 'Soka University of America', 'York University', 'Cincinnati Christian University', 'William Andrew Publishing', 'Midland College', 'Leibniz University of Hanover', 'Little Priest Tribal College', 'Sangmyung University', 'Santiago Canyon College', 'Case Western Reserve University', 'Busan National University of Education', 'Kyushu University', 'Cesar Ritz Colleges', 'Brazosport College', 'Vasavi college of engineering', 'Mid-American Christian University', 'Cologne Business School', 'Wilkes Community College', 'Kansas Wesleyan University', 'Rider University', 'The Art Institute of York - Pennsylvania', 'Lake Erie College of Osteopathic Medicine', 'Purdue University College of Consumer and Family Sciences', 'Cleary University', 'Markazu Saqafathi Sunniya', 'Kansai Gaidai University', 'Clinton Community College, New York', 'Leech Lake Tribal College', 'Warren Wilson College', 'Westminster College, Salt Lake City', 'Pacific Union College', 'Johnson County Community College', 'De La Salle University-Manila', 'Gandhi Medical College', 'Bemidji State University', 'Universidad de Sta Isabel', 'Saint Anselm College', 'Lexington Theological Seminary', 'Loyola University New Orleans', 'American University in Bulgaria', 'Vietnam National University, Hanoi', 'The United Illuminating Company', 'Los Angeles Film School', 'National Polytechnic Institute of Lorraine', 'University of Toulouse II – Le Mirail', 'Eastern Kentucky University', 'Rust College', 'Yorkville University', 'Irvine Valley College', 'Universidad Francisco Marroquín', 'Nanjing University of Technology', 'Hellenic College', 'Guangzhou University', 'Gerald Schwartz School of Business', 'Froebel College of Education', 'Nagasaki University', 'University of Puerto Rico at Cayey', 'Sullivan University', "St John's College, Oxford", 'Clarke College', 'Long Beach City College', "Tokyo Woman's Christian University", 'Calvary Bible College', 'Fo Guang University', 'Technische Universität Darmstadt', 'University of Ottawa', 'University of Bohol', 'Booth University College', 'Trinidad State Junior College', 'University of the East', 'Bethune-Cookman University', 'Folkwang University of the Arts', 'Massachusetts College of Pharmacy and Health Sciences', 'Korea University of Science and Technology', 'Dodge City Community College', 'North Dakota State University', 'Radford University', 'Tulsa Community College', 'Bates College', 'University of Akron', 'Oklahoma Wesleyan University', 'International Budo University', 'Maharishi University of Management', 'University of Medicine and Health Sciences', 'Ehime University', 'San Diego City College', 'Solusi University', 'The Art Institute of Indianapolis', 'Technological University of the Philippines', 'Seoul National University of Education', 'Mashad University of Medical Sciences', 'University of South Dakota', 'Lasell College', 'University of the People', 'University of Paris VIII: Vincennes - Saint-Denis', 'Rochester College', 'University of the Basque Country', 'American Council of Learned Societies', 'Wallace Community College', 'Akita University', 'Institute of Technology, Tralee', 'Bowling Green State University', 'Blue Ridge Community College', 'Northern Oklahoma College', 'Advanced Research and Learning Institute', 'McLennan Community College', 'Avila University', 'Pikeville College', 'Methodist Theological School in Ohio', 'College of the Holy Cross', 'American River College', 'Southwestern Michigan College', 'Mapúa Institute of Technology', 'University of Pittsburgh at Johnstown', 'Lee University', 'Colorado State University - Pueblo', 'Lüneburg University', 'Edmonds Community College', 'United States Lawn Bowls Association', 'Pontifical Catholic University of Puerto Rico', 'Cebu Technological University', 'New York University', 'Norwegian School of Management', 'Kanazawa University', 'Embry-Riddle Aeronautical University', 'Nara Institute of Science and Technology', 'Shenzhen University', 'Helwan University', 'Andong National University', 'Usa Marine Biological Institute', 'Jefferson College', 'College of Alameda', 'VoloMedia', 'Kellogg College, Oxford', 'University of the Incarnate Word', 'Rowan University', 'Al-Baath University', 'Hamilton College', 'Yokohama National University', 'Korea National Sport University', 'Its Tax Time', 'Lake Michigan College', 'Pitt Community College', 'University of Luxembourg', 'Calumet College of St. Joseph', 'Faith Baptist Bible College and Theological Seminary', "St. Bernard's School of Theology and Ministry", "Master's College", 'Blinn College', 'Bethany College', 'American Baptist Seminary of the West', 'State University of New York at Canton', "Mount St. Mary's College", 'Sheet Metal Products Company of Canada', 'York College of Pennsylvania', 'The Art Institute of Salt Lake City', 'Colorado Northwestern Community College', 'Community College of Vermont', 'East Georgia College', 'Las Positas College', 'Pilot Fish SEO', 'African Bible College', 'Divine Word University', 'Southern Luzon State University', 'Berklee College of Music', 'Livingstone College', 'Eulogio ""Amang"" Rodriguez Institute of Science and Technology', 'Tax Foundation', 'Millikin University', 'Chattahoochee Technical College', 'Southwest Tennessee Community College', 'Oregon Coast Community College', 'Trier University of Applied Sciences', 'Florida Community College at Jacksonville', 'Harding University', 'Portland State University', 'New York Academy of Art', 'Luzerne County Community College', 'Central Sussex College', 'Doshisha University', 'Collège Boréal', 'University of Baltimore', 'University of Colorado at Denver', "École Supérieure d'Électricité", 'University College Cork - National University of Ireland, Cork', 'Harper College', 'Condé Nast Digital', 'Melbourne College of Divinity', 'Fujitsu', 'Central Philippine University', 'Rocky Mountain College', 'American Kennel Club', 'Comcast Interactive Media', 'Keuka College', 'Converse College', 'Stephens College', 'University of Tampa', 'Université Blaise-Pascal', 'Tuskegee University', 'Southern West Virginia Community College', 'Elizabethtown Community and Technical College', 'Xinjiang University', 'University College Dublin - National University of Ireland, Dublin', 'SUNY Downstate Medical Center', 'State University of New York College of Environmental Science and Forestry', 'Saitama University', 'McDaniel College', 'South Georgia College', 'Kansas City Kansas Community College', 'Beijing University of Aeronautics and Astronautics', 'Mississippi Valley State University', 'University of New Hampshire', 'American Society of Mammalogists', 'University of Sulaimani', 'Southwestern Assemblies of God University', 'Kharkiv University', 'Duquesne University', 'California Coast University', 'University of Charleston', 'Southwest University', "Jissen Women's Junior College", 'Shahid Chamran University of Ahvaz', 'Philippine College Of Health and Sciences', 'China University of Geosciences', 'College of New Caledonia', 'American College of Surgeons', 'Carleton College', 'Woodbury University', 'Ohio Dominican University', 'Grand View College', 'Elmhurst College', 'The Art Institute of Charlotte', 'Berea University of Graduate Studies', 'Schiller International University', 'Aquinas College', 'University of Antananarivo', 'Hebrew College', 'National Taipei University', 'Arizona State University West', 'Dallas Baptist University', 'Asnuntuck Community College', 'Ahfad University for Women', 'Mississippi Delta Community College', 'Xinjiang Medical University', 'Harvard University', 'Panoz Auto Development', 'National Chengchi University', 'Birmingham-Southern College', 'Full Sail University', 'College of Marin', 'William Carey College', 'Monash University Malaysia Campus', 'Chaminade University of Honolulu', 'Ural State University', 'Assumption University', 'Henan University', 'Arkansas State University', 'University of Paris VII: Denis Diderot', 'Western Connecticut State University', 'University of Chinese Academy of Sciences', 'Universidad de Manila', 'Clearwater Christian College', 'National University of Kaohsiung', 'National University', 'Southern Maine Community College', 'American Graduate School in Paris', 'College of Judea and Samaria', 'Collège Jean-de-Brébeuf', 'College of Southern Idaho', 'Applied Science Private University', 'Tameer-e-Nau Public College, Quetta', 'Los Angeles Pierce College', 'Brevard Community College', 'Rissho University', 'Beijing Jiaotong University', 'Mines ParisTech', 'Moscow State Institute of International Relations', 'University of Texas at Brownsville and Texas Southmost College', 'Harry S Truman College', 'Canadian College of Naturopathic Medicine', 'Deutsche Bundesbank', "St. John's Regional Seminary", 'Nebraska Christian College', 'CUNY Graduate Center', 'California Maritime Academy', 'University of Paris XII: Paris-Val-de-Marne', 'University of Arizona', 'Sukhothai Thammathirat Open University', 'Addis Ababa University', 'Instituto Tecnológico Autónomo de México', 'National Chi Nan University', "St. Gregory's University", 'Shawnee State University', 'Cashmere Chamber of Commerce', 'Springfield Technical Community College', 'Wuhan University', "Sookmyung Women's University", 'Douglas College', 'Weihenstephan-Triesdorf University of Applied Sciences', 'Olivet College', "École Spéciale d'Architecture", 'Hardin-Simmons University', 'USG Corporation', 'Sup De Co Marrakech', 'Oklahoma State University-Okmulgee', 'Mount Allison University', 'Wellesley College', 'Wisconsin Lutheran Seminary', 'Nevada State College', 'University of Ez-Zitouna', 'American University of Antigua College of Medicine', 'Pennsylvania Institute of Massage Therapy', 'Australian Paralympic Committee', 'University of Texas–Pan American', 'Western Oregon University', 'Northwest Missouri State University', 'Bryant University', 'Armand Hammer United World College of the American West', 'Vrije Universiteit Brussel', 'Texas A&M University-Texarkana', 'Northern Virginia Community College', 'Sri Sri University', 'Fresno Pacific University', "Japan Women's University", 'Southwestern Illinois College', 'Little Big Horn College', 'PARSA Community Foundation', 'Econometric Society', 'McCormick Theological Seminary', 'ITT Corporation', "Saint Michael's College of Laguna", 'Clark Atlanta University', 'University of West Los Angeles', 'Kufa University', 'Monmouth College', 'Ohalo College', 'University of New South Wales', 'Texas Consolidated Petroleum', 'Miami International University of Art & Design', 'Denison University', 'Calvin College', 'Loyalist College', 'China Academy of Art', 'Royal Institute of Technology', 'George Washington University', 'Friends University', 'John D. and Catherine T. MacArthur Foundation', 'Lees-McRae College', 'University of Alabama at Birmingham', 'Coffeyville Community College', 'Amherst College', 'Weber State University', 'College of The Albemarle', 'Potomac College', 'Alaska Pacific University', 'Dartmouth College', 'Canadian Mennonite University', 'Harrisburg Area Community College', 'Lone Star College–Montgomery', 'Dokkyo Medical University', 'Trinity College, Carmarthen', "King's College, Pennsylvania", 'Nanchang University', "King Mongkut's Institute of Technology North Bangkok", 'William Paterson University', 'FIM Africa', 'Daniel Webster College', 'Arba Minch University', 'Alice Lloyd College', 'Cerritos College', 'Hostos Community College', 'Alabama State University', "École Nationale Supérieure d'Électronique, d'Électrotechnique, d'Informatique, d'Hydraulique, et de Télécommunications", 'Dickinson State University', 'Estrella Mountain Community College', 'Parkland College', 'Manchester Community College', 'College of Charleston', 'Corning Community College', 'Northland College', 'International Hotel Management Institute Switzerland', 'Lincoln Memorial University', 'IsquareIT', 'Beijing University of Chemical Technology', 'Wheaton College', 'De La Salle University-Dasmariñas', 'Husson College', 'University of Perpetual Help System Laguna', 'Oregon College of Oriental Medicine', 'Al-Quds Open University', "Ex'pression College for Digital Arts", 'University of Science and Culture', 'Athens University of Economics and Business', 'Nancy-Université', 'Fairmont State University', 'Boston Baptist College', 'National University of Health Sciences', 'GateWay Community College', 'Pepperdine University', 'The Art Institute of Atlanta', 'Berlin University of the Arts', 'Saddleback College', 'Middle Tennessee State University', 'College of the Siskiyous', 'Monroe Community College', 'Wilkes University', 'Chaoyang University of Technology', 'Imam Khomeini International University', 'Victoria University in the University of Toronto', 'Dominican University of California', "St. Edmund's College, Ware", 'Avondale College', 'Walden University', "God's Bible School and College", 'Manila Central University', 'Asbury Theological Seminary', 'Fudan University', 'Andrews University', 'Yeshiva Ner Yisrael: Ner Israel Rabbinical College', 'Voorhees College', 'Reed College', 'Lebanon Valley College', 'Fort Scott Community College', 'Selma University', 'North Harris College', 'Goldey-Beacom College', "St. Patrick's College, Thurles", 'Philadelphia Biblical University', 'Southern Illinois University System', 'El Centro College', 'Northeast Normal University', 'Skyline College', 'Laguna Seca Raceway Corp', 'Fukushima University', 'Lower Columbia College', 'St Thomas More College', 'University of Cincinnati Academic Health Center', 'Vermont Technical College', 'Grace University', 'University of Maine at Fort Kent', 'Judson Female College', 'Community College of Baltimore County', 'Osaka Prefecture University', 'Hampshire College', 'Universidad Central del Este', 'University of Sudbury', 'University Canada West', 'Northern Kentucky University', 'PATTS College of Aeronautics', 'Big Bend Community College', 'École Polytechnique de Montréal', 'Worcester State College', 'Lehigh University', 'Coderic, S.A.', 'Sterling College', 'Augustana College', 'Armstrong Atlantic State University', 'College of the Redwoods', 'West Coast Baptist College', 'Los Angeles Harbor College', 'State University of New York at Old Westbury', 'Rosedale Bible College', 'De Anza College', 'Mie University', 'University of Southern Maine', 'Xiamen University', 'Mico University College', 'Los Angeles City College', 'Lone Star College–Tomball', 'Snow College', 'Iowa Western Community College', 'Martin Luther College', 'National University of Ireland, Maynooth', 'Rhodes College', 'University of Haifa', 'Sidney Davis Productions', 'Rice University', 'Tacoma Community College', 'University of Electronic Science and Technology of China', 'Human Business Works', 'California State University, Fullerton', 'Hutchinson Community College', 'Osaka City University', 'Algonquin College', 'British University in Egypt', 'Robert College', 'Point Park University', 'Bryn Mawr College', 'Le Moyne College', 'Saint Francis University', 'Greenfield Community College', 'College of the Sequoias', 'Langara College', 'Wentworth Military Academy', 'Caldwell College', 'The College of Saint Mary Magdalen', 'Bevill State Community College', 'Nyack College', "The King's College, New York", 'Debub University', 'Niagara College', 'University of Kiel', 'American University of Beirut', 'University at Albany, The State University of New York', 'Bethany Theological Seminary', 'Evangel University', 'Pasadena City College', 'Baptist Bible College & Seminary', 'Memphis Theological Seminary', 'University of Franche-Comté', 'Georgia Southern University', 'Tabor College, Kansas', 'Otaru University of Commerce', 'Cowley County Community College', 'Aoyama Gakuin University', 'ICHEC Brussels Business School', 'Open Source Initiative', 'Walla Walla Community College', 'Gateway Community College', 'Kuwait University', 'Clausthal University of Technology', 'Technion - Israel Institute of Technology', 'Mount Royal College', 'Emilio Aguinaldo College', 'FEATI University', "Master's Seminary", 'Carroll College', 'Bu-Ali Sina University', 'Beijing University of Technology', 'Whirlpool Canada', 'Universidad Autónoma de San Luis Potosí', 'Taipei Medical University', 'University of Texas of the Permian Basin', "Kyoritsu Women's University", 'Saint Leo University', 'Morehead State University', 'Winona State University', 'Université du Droit et de la Santé de Lille', 'Wabash College', 'Yeditepe University', 'Hiroshima University', 'Kyoto University', 'Missouri Baptist University', 'National College of Ireland', 'Cégep de Saint-Jérôme', 'Circle in the Square Theatre School', 'University of Texas Health Science Center', 'Adrian College', 'American University of Rome', 'Youngstown State University', 'Kentucky Christian University', 'Wilfrid Laurier University', 'University of Kaiserslautern', 'Patrick Henry Community College', 'Tallahassee Community College', 'Nikon Corporation', 'Royal College of Surgeons of England', 'Otero Junior College', 'Governors State University', 'Tohoku University', 'Abraham Baldwin Agricultural College', 'George Mason University', 'University of Luhansk', 'Université de Technologie de Compiègne', 'ECPI University', 'North Greenville University', 'Spiritual Counterfeits Project', 'Uniformed Services University of the Health Sciences', 'South Florida Community College', 'National Hispanic University', 'Shanghai University of Finance and Economics', 'Massasoit Community College', 'Salish Kootenai College', 'Pamantasan ng Lungsod ng Pasig', 'University of Picardie', 'Kristal University', 'Institute of Technology, Blanchardstown', 'University of Prince Edward Island', 'Colorado College', 'Santa Ana College', 'Mannheim Business School', 'British Columbia Institute of Technology', 'Seabury-Western Theological Seminary', 'Hotwire.com', 'Dickinson College', 'International Space University', 'Joint Military Intelligence College', 'Mount Saint Vincent University', 'Gwynedd-Mercy College', 'Griggs University', 'University of New York, Prague', 'The College of Saint Rose', 'Chosun University', 'University of Texas at El Paso', 'Central Baptist College', 'Union County College', 'Westfield State College', 'Clark University', 'Wartburg College', 'Bethesda Softworks', 'A.T. Still University', 'Cornerstone University', 'University of the French West Indies and Guiana', 'Okayama University', 'Merrimack College', 'Jones County Junior College', "Musician's Association of Seattle", 'College of St. Catherine', 'Taleemul Islam College of Rabwah', 'Cuyahoga Community College', 'University of Damascus', 'Oregon college of art & craft', 'Huston-Tillotson University', 'Anne Arundel Community College', 'Langston University', 'St. Charles Community College', 'Iran University of Medical Sciences', 'PEARL Institute of Management & Information Technology, Quetta', 'Bloomfield College', 'Lebanese University', 'Meiji University', 'Southern New Hampshire University', 'Tokyo Gakugei University', 'Institute of Management Technology', 'Presbyterian College', 'Dongguk University', 'Doane College', 'Bangor Theological Seminary', 'Ferrum College', 'Northern State University', 'Institute of Biosciences and Technology', 'European University', 'Jean Moulin University Lyon 3', 'The Art Institute of Tennessee - Nashville', 'College of Saint Elizabeth', 'University of South Carolina', 'Peace River Bible Institute', 'Wenzhou Medical College', 'Hallym University', 'National University of Lanús', 'Université de Moncton', 'Shelton State Community College', 'Children of the Night', 'Kwansei Gakuin University', 'University of Osnabrück', 'Nomura Securities', 'Tottori University', 'Simpson College', 'Emory University', 'Simmons College of Kentucky', 'Toulouse 1 University Capitole', 'Khazar University', 'Naya Waters', 'Cape Breton University', 'Zurich University of Applied Sciences', 'Willamette University', 'University of Hartford', 'SRH University Berlin', 'MCL Mapúa-PTC College of Maritime Education and Training', 'Missouri Western State University', 'Rosemont College', "University of Pau and Pays de l'Adour", 'Lebanese International University', "St Patrick's College, Maynooth", 'Davis and Elkins College', "Padmabhushan Vasantdada Patil Pratishthan's College of Engineering", 'University of Maryland University College', 'Franklin & Marshall College', 'Marygrove College', 'Cork Institute of Technology', 'INSEAD', 'Trinity Valley Baptist Seminary and College', 'Maine College of Art', 'Sabancı University', 'Middlesex Community College', 'Broken Arrow Rotary Club', 'Tongji University', 'Tokushima University', 'CNN', 'Gifu University', 'Tokyo Institute of Technology', 'Cypress College', 'Pensacola Christian College', 'Ozark Christian College', 'Dallas Theological Seminary', 'The Art Institute of Jacksonville', 'Washington Student Math Association', 'RISQ Modular Systems', 'State University of New York at Morrisville', 'Université du Québec en Outaouais', 'California State University, Fresno', 'Danville Area Community College', 'University of Alberta', "Saint Paul's College, Virginia", 'State University of New York at Geneseo', 'Hesston College', 'University of Paris V: René Descartes', 'University of the Ozarks', 'University of Augsburg', 'Taylor University College and Seminary', 'Nakhonphanom University', 'Oaksterdam University', "Universitat d'Alacant", 'Southwestern Oregon Community College', 'Pasco-Hernando Community College', 'Athol Murray College of Notre Dame', 'University of Georgia', 'Kentucky Community and Technical College System', 'College of the Rockies', 'Truman State University', 'California State University, Los Angeles', "École Nationale de la Statistique et de l'Administration Économique", 'Ryerson University', 'Anton de Kom University', 'Morehouse School of Medicine', 'East China University of Politics and Law', 'Gadsden State Community College', 'Madison Area Technical College', 'Sapporo University', 'University of Texas Southwestern Medical Center at Dallas', 'Aklan State University', 'Lambton College', 'U-Haul', 'Grant MacEwan College', 'State University of New York at Oswego', 'Wheeling Jesuit University', 'Centre College', 'Vignana Jyothi Institute of Management', 'Reconstructionist Rabbinical College', 'Adelphi University', 'RMIT International University, Vietnam', 'California Baptist University', 'North Island College', 'University of Trento', 'University of Texas at Austin', 'State University of New York State College of Optometry', 'Hankuk University of Foreign Studies', 'Buena Vista University', 'Wright State University', 'Montclair State University', 'Communication University of China', 'Algoma University College', 'F. B. Heron Foundation', 'William Jessup University', 'East Central Community College', 'Storer College', 'Clarkson College', 'South Carolina State University', 'Anhalt University of Applied Sciences', 'Triton College', 'Joseph Fourier University', 'Dubrovnik International University', 'John Wood Community College', 'Huazhong University of Science and Technology', 'National Aviation Academy', 'Austin Presbyterian Theological Seminary', 'West Texas A&M University', 'Cheyney University of Pennsylvania', 'Marian University', 'Amberton University', 'Organization of American Historians', 'Taipei National University of the Arts', 'Moscow School of Management SKOLKOVO', 'Dordt College', 'Aurora University', 'Hult International Business School', 'Akita International University', 'Florida Christian College', 'College for Creative Studies', 'University of South Florida', 'Paul Valéry University, Montpellier III', 'Elizabethtown College', 'New River Community and Technical College', 'The Art Institute of Tampa', 'Warner Pacific College', 'State University of New York Maritime College', 'Royal College of Physicians of Ireland', 'Hebrew Union College - Jewish Institute of Religion', 'West Visayas State University', 'Indiana Association of Soil and Water Conservation Districts', 'TACA Airlines', 'University of Zurich', 'Cottey College', 'Pioneer Pacific College', 'Bunker Hill Community College', 'Samford University', 'H. Sophie Newcomb Memorial College', 'Benedict College', 'Eastern Michigan University', 'University of Illinois at Urbana-Champaign', 'Mercyhurst University', 'Lenoir Community College', 'University of Great Falls', 'Frontier Nursing University', 'Accademia di Belle Arti Firenze', 'St. Cloud State University', 'Crafton Hills College', 'Neighborhood Playhouse', 'University of Economics, Ho Chi Minh City', 'Green River Community College', 'Galway-Mayo Institute of Technology', 'Iowa Wesleyan College', 'University of Connecticut', 'Henderson Community College', 'Mount Saint Mary College', 'Southern United States Trade Association', 'Grayson County College', 'Finger Lakes Community College', 'Taylor University', 'Menlo College', 'American Samoa Community College', 'Wilbur Wright College', 'Phoenix Seminary', 'Rutgers – New Brunswick', 'ESMT European School of Management and Technology', 'Athabasca University', 'Kogakuin University', 'Kingston and Pembroke Railway', 'Pierre Mendès-France University', 'Seattle Pacific University', 'International Medical University', 'University of the Sacred Heart', 'Blackrock College', 'National College of Business and Arts', 'Pasig Catholic College', 'Monroe College', 'Islamic Azad University of Damavand', 'Canadian University College', 'University of Angers', 'Park University', 'Wesleyan University', 'The New School', 'Royal College of Veterinary Surgeons', 'University of Perpignan Via Domitia', 'Augsburg College', 'Manuel L. Quezon University', 'Pai Chai University', 'Baptist Bible College', 'Payame Noor University', 'Boston Architectural College', 'University of Rennes 1', 'Saint Ambrose University', 'Holy Family University', 'Hinds Community College', 'Tokyo University of Agriculture', 'Hunter College', 'Salisbury University', 'Oberlin College', 'University of Puget Sound', 'Kharazmi University', 'Massachusetts College of Art', 'Dominican College', 'Mariano Marcos State University', 'McNally Smith College of Music', 'South Puget Sound Community College', 'Kennesaw State University', 'Philippine State College of Aeronautics', 'Northwestern Oklahoma State University', 'Philander Smith College', 'The Art Institute of Ohio - Cincinnati', 'Coláiste Mhuire', 'Kaskaskia College', "University of St. Michael's College", 'Howard Community College', 'Providence University', 'China Medical University', 'Trinity Lutheran Seminary', 'University of Koblenz and Landau', 'University of Nevada, Reno', 'Howard Payne University', 'Brandenburg Technical University', 'California State University, Northridge', 'St. Lawrence University', 'Manhattan College', 'Rutgers-Newark', 'State University of New York at Plattsburgh', 'Shaw University', 'Université des Sciences et Technologies de Lille', 'University of the German Federal Armed Forces, Munich', 'Mid-Atlantic Christian University', 'Prairie State College', 'Cleveland State Community College', 'Goshen College', 'Moody Bible Institute', 'Our Lady of Holy Cross College', 'Holy Spirit College', 'Niagara County Community College', 'Saint Joseph College, West Hartford', 'Hitotsubashi University', 'Onondaga Community College', 'John Brown University', 'KAIST', 'Columbia College of Missouri', 'Stark State College', 'Tokyo Metropolitan University', 'University of Southern Indiana', 'Saga University', 'Williams Electronics Manufacturing', 'Northwest Christian College', 'University of Regina Carmeli', 'The Art Institute of Charleston', 'Gordon-Conwell Theological Seminary', 'Fitchburg State College', 'Union College of Laguna', 'San Beda College', 'Soongsil University', 'Escola Superior Agrária de Coimbra', 'Cascadia Community College', 'Ansbach University of Applied Sciences', 'University of the South, Toulon-Var', 'Lviv University', 'Binghamton University', 'State University of New York Upstate Medical University', 'Technical University of Denmark', 'Kimep', 'Indiana University of Pennsylvania', 'Schechter Institute of Jewish Studies', 'Wenatchee Valley College', 'Visayas State University', 'Saginaw Valley State University', 'University of Kurdistan - Hawler', 'National College of Natural Medicine', "Bishop's University", 'Plymouth State University', 'Xavier University', 'Wells College', 'Texas A&M Health Science Center', "Saint Joseph's College of Maine", 'Presidio School of Management', 'University of Hyogo', 'Mosport International Raceway', 'Emory and Henry College', 'China University of Petroleum', 'North Idaho College', 'Coastal Carolina University', 'Santa Rosa Junior College', 'Moultrie Technical College', 'Big Sandy Community and Technical College', 'Marion Military Institute', 'Southern California Edison', 'Heald College', 'The Art Institute of Houston - North', 'Iona College', 'Alfred University', "D'Youville College", 'Central Florida Community College', 'Seikei University', 'Cañada College', "Kobe Shoin Women's University", 'University of Manila', 'Miami Dade College', 'Scripps College', 'Colorado School of Mines', 'The Art Institute of California - Sacramento', 'Tokyo University of Agriculture and Technology', 'Century College', 'Crichton College', 'University of the City of Muntinlupa', 'Fordham University', 'Harbin Institute of Technology', 'Culver-Stockton College', 'American College of Sports Medicine', 'Yamagata University', 'Dalian University of Technology', 'Zamboanga City State Polytechnic College', 'Minnesota State Community and Technical College', 'Humboldt State University', 'University of Michigan', "Toyo Eiwa Women's University", 'Hamburg University of Applied Sciences', 'Lane Community College', 'Acton School of Business', 'Southeastern Louisiana University', 'Dawson Community College', 'Allied Schools', 'Holland College', 'Humboldt University of Berlin', 'College of William and Mary', 'Institut national des langues et civilisations orientales', 'Butte College', 'Appleby College', 'Fulton-Montgomery Community College', 'Philadelphia University', 'Witten/Herdecke University', 'Huaqiao University', 'King Abdullah University of Science and Technology', 'Guilford College', 'Gustavus Adolphus College', 'Carnegie Foundation for the Advancement of Teaching', 'Mitchell College', 'Cedarville University', "St. John's College, Belize", 'Karolinska Institutet', 'Bucerius Law School', 'Williams College', 'Allegany College of Maryland', 'Ohlone College', 'Rockefeller University', 'Friedrich-Alexander-University, Erlangen-Nuremberg', 'University of West Macedonia', 'Manor Community College', 'Southern Association of State Departments of Agriculture', 'Columbia Basin College', 'German Taxpayers Federation', 'Dalian Maritime University', 'County College of Morris', 'Cleveland State University', 'Royal Society of Chemistry', 'Bicol University', 'Oklahoma Christian University', 'University of Northern British Columbia', 'Union College', 'William Penn Foundation', 'North Dakota State College of Science', 'Hocking College', "Bard College at Simon's Rock", 'Mitchell Motor Car Company', 'University of Louisville', 'Washington College', 'Divine Word College of Legazpi', 'Royal University of Phnom Penh', 'Texas A&M University–Kingsville', 'Etalon Group', 'Osaka University of Arts', 'Passaic County Community College', 'Golden State Baptist College', 'Centenary College of New Jersey', 'Mount Olive College', 'National University of Defense Technology', 'Jackson Community College', 'Emmanuel Bible College', 'Wolfson College, Oxford', 'Lycoming College', 'Marianum', 'Università della Svizzera italiana', 'Ramkhamhaeng University', 'The Art Institute of Austin', 'American International College', 'San Diego Christian College', 'Zaytuna College', 'Henderson State University', 'University of Applied Sciences Wedel', 'Eastern Arizona College', 'Southwestern Christian College', 'Texas A&M University–Commerce', 'Babson College', 'Stetson University', 'University of Pittsburgh at Bradford', 'Chicago Theological Seminary', 'Ecole Supérieure de Commerce Et Management', 'Beijing International Studies University', 'Wilberforce University', 'Anahuac University', 'Bethel College', 'National Yang Ming University', 'Olds College', 'National Association for the Advancement of Colored People', 'Pomona College', 'Wenzao Ursuline College of Languages', 'North Shore Community College', 'Columbia Bible College', "Saint Mary's University of Minnesota", 'Armstrong Utilities, Inc.', 'Columbia International University', 'Hokuriku University', 'Ben-Gurion University of the Negev', 'Wor-Wic Community College', 'Frankfurt University of Music and Performing Arts', 'Munich Business School', 'Arts et Métiers ParisTech', 'Clarion University of Pennsylvania', 'Boğaziçi University', 'Cornish College of the Arts', 'Shorter University', 'Bristol Community College', 'Georgia Southwestern State University', 'University of Nîmes', 'Barry University', 'Faulkner State Community College', 'Antioch College', 'Donghua University', 'LaGrange College', 'West Georgia Technical College', 'Mannheim University of Applied Sciences', 'American Society of Civil Engineers', 'Zeppelin University', 'University of South Alabama', 'Royal College of Surgeons in Ireland', 'Slippery Rock University of Pennsylvania', 'World Peace Foundation', 'Lincoln University', 'Steinbach Bible College', 'Lourdes College', 'Joe Kubert School of Cartoon and Graphic Art', 'Stamford International University', 'Narsee Monjee College of Commerce and Economics', 'Western Michigan University', 'American College of Nutrition', 'The Art Institute of Houston', 'Everett Community College', 'Association for Computing Machinery', 'Harvey Mudd College', 'Gonzaga University', 'Calvin Theological Seminary', 'Hannover Medical School', 'Central Ohio Technical College', 'Polytechnic University of Puerto Rico', 'University of West Florida', 'University of Texas at Tyler', 'Dundalk Institute of Technology', 'Southern Connecticut State University', 'Carlow University', 'Central Oregon Community College', 'St. Clair College', 'Quinsigamond Community College', 'Huntington University', 'MacMurray College', 'Moraine Park Technical College', 'Yavapai College', 'Boricua College', 'Patten University', 'University of the Pacific', 'Concordia University, Irvine', 'University of Advancing Technology', 'Alamance Community College', "Sant'Anna School of Advanced Studies", 'American College', 'Independence Community College', 'Concordia University Chicago', 'Rogue Community College', 'Erie Community College', 'University of Aleppo', 'Paris West University Nanterre La Défense', 'Berry College', 'Tarleton State University', 'Wentworth Institute of Technology', 'Central Luzon State University', 'DePaul University', 'Dong-A University', 'Chemeketa Community College', 'Camosun College', 'In-N-Out Burger', 'New Mexico Institute of Mining and Technology', 'Salus University', 'Chung-Ang University', 'New England Society of Pennsylvania', 'Virginia Polytechnic Institute and State University', 'Mahasarakham University', 'Lakeshore Technical College', 'University of Kassel', 'Madisonville Community College', 'Johnston Community College', 'Saint Pedro Poveda College', 'Lindenwood University', 'Ain Shams University', 'Bakersfield College', 'Utah State University', 'San Francisco State University', 'Royal College of Physicians and Surgeons of Glasgow', 'Central Virginia Community College', 'Florida Southern College', 'Moberly Area Community College', 'Gubkin Russian State University of Oil and Gas', 'Trinity College', 'Harrison College', 'Maryville College', 'University of Central Arkansas', 'Cleveland Institute of Electronics', 'Barstow Community College', 'Bethune College', 'University of Shizuoka', 'Tohoku Fukushi University', 'Belleview College', 'University of Seoul', 'Renmin University of China', 'Thomond College of Education, Limerick', 'Avalon University School of Medicine', 'Luther Rice University', 'University of Maine at Farmington', 'Pfeiffer University', 'Michigan State University', 'Landmark College', 'Union Institute & University', 'Georgia State University', 'Cardinal Stritch University', 'Sacramento City College', 'University of San Diego', "St. Augustine's College", 'Dominican University', 'RCC College of Technology', 'Logan College of Chiropractic', 'Dongbei University of Finance and Economics', 'Grossmont College', 'Lipscomb University', 'Nanyang Technological University', 'Chowan University', 'Western Society of Engineers', 'NorQuest College', 'Universidad de Monterrey', 'Brookhaven College', 'Holy Angel University', 'Australian Centre for Psychoanalysis', 'China University of Political Science and Law', 'Cégep de La Pocatière', 'Tokyo International University', 'North Country Community College', 'University of New Orleans', 'The Cyprus Institute', 'Ramon Magsaysay Technological University', 'Southwest University of Political Science & Law', 'Washburn University', 'Thai Airways Company', 'Queens University of Charlotte', 'Ashesi University', 'University of Central Missouri', 'University of Jordan', 'International College, Beirut', 'Rivier College', 'Athens Technical College', 'Murray State University', 'University of Wollongong in Dubai', 'Illinois Valley Community College', 'Paul Sabatier University', 'Bennington College', 'Bard College', 'Thaddeus Stevens College of Technology', 'Shenyang Normal University', 'University of Le Havre', 'Williston State College', 'Garden City Community College', 'University of Northwestern Ohio', 'Shantou University', 'University of Fukui', 'Ohio State University', 'Northwestern College', 'Bridgewater State College', 'San Antonio College', 'Temple University', 'Lakehead University', 'Central New Mexico Community College', 'La Salle University', 'TEI of West Macedonia', 'ParisTech', 'Emerson College', 'Davenport University', 'Eastern Virginia Medical School', 'Sanford-Brown College - St. Peters', 'Catholic University of Korea', 'Middlebury College', 'Colorado Technical University', 'President of the International Archery Federation', 'Atlanta Christian College', 'Unification Theological Seminary', 'Medicine Hat College', 'Alverno College', 'The Art Institute of Philadelphia', 'Elon University', 'Technological Institute of Textile & Sciences', 'Southern Wesleyan University', "École nationale d'ingénieurs de Tarbes", 'University of Bridgeport', 'Skagit Valley College', 'University of Reims Champagne-Ardenne', 'Old Dominion University', 'California State University, San Bernardino', 'Fort Lewis College', 'King Abdulaziz University', "St. Mary's University, Texas", "St. Scholastica's College", 'Jefferson Community College', 'Institut national de la recherche scientifique', 'Waseda University', 'Transylvania University', 'Chiba University', 'Velenosi', 'Carl Sandburg College', 'University of San Agustin', 'Tufts University', 'Abdou Moumouni Dioffo University', 'American Musical and Dramatic Academy', 'Clark College', 'Vanier College', 'San Jose City College', 'Prairie Bible College', 'Portland Community College', 'Franciscan School of Theology', 'M S Ramaiah School of Advanced Studies', "Crowley's Ridge College", 'Limerick Institute of Technology', 'Guangdong University of Foreign Studies', 'Fielding Graduate University', 'De La Salle-Araneta University', 'Connors State College', 'Universiteit van Amsterdam', 'Bayamon Central University', 'Rocky Mountain College of Art and Design', 'Wabash Valley College', 'Academy of Art University', 'Borough of Manhattan Community College', 'Peking University', 'Royal College of Physicians', 'Western Governors University', 'National Defence University, Islamabad', 'Fairleigh Dickinson University', 'Marshall University', 'West Virginia University', 'Richard Stockton College of New Jersey', 'Conestoga College', 'Volunteer State Community College', 'Midwestern Baptist College', 'Southwestern Community College', 'Rockwell College', "St. Jarlath's College", 'Bastyr University', 'Far Eastern University - East Asia College', 'Arizona State University', 'San Sebastian College - Recoletos', 'Haskell Indian Nations University', 'National Rifle Association', 'Project Vote', 'Hopkinsville Community College', 'Raritan Valley Community College', 'University of La Verne', 'University of Mary', 'Filamer Christian College', 'Illinois Central College', 'Najran University', 'Prairie View A&M University', 'Bennett College', 'Osaka Institute of Technology', 'Idaho State University', 'Yamaguchi University', 'People for the Ethical Treatment of Animals', 'Foothill College', 'Ouachita Baptist University', 'Eastern Washington University', 'Appalachian Bible College', 'Hosei University', 'Philippine Christian University', 'Shandong University', 'California State University, Channel Islands', 'Catholic University of Daegu', 'Kunitachi College of Music', 'Central Connecticut State University', 'Hartnell College', 'University of Houston–Victoria', 'Barber-Scotia College', 'University of Tokyo', 'University of Development Alternative', 'Robert Morris College', 'Arab Academy for Science and Technology and Maritime Transport', 'Angeles University Foundation', 'Deutscher Bauernverband', 'Collin College', 'Al-Quds University', 'Kurume University', 'Lake-Sumter Community College', 'Zamorano', 'Kettering University', 'Alfred State College', 'General Theological Seminary', 'Pennsylvania State University', 'Nicholls State University', 'American Academy Of Pediatrics', 'Hofstra University', 'Global City Innovative College', 'Monash South Africa', 'Social Science Research Council', 'Skyline College Sharjah', 'Lamar University', 'Portland Bible College', 'Open University of Hong Kong', 'Athletics Papua New Guinea', 'Johannes Gutenberg University of Mainz', 'Cuttington University', 'Otani University', 'American College of Healthcare Sciences', 'Midway College', 'Ohio College of Podiatric Medicine', 'University of Cincinnati', 'Mount Union College', 'Florida A&M University', 'Casper College', 'Kwangwoon University', 'Central University of Finance and Economics', 'San Diego State University', 'Barnes-Jewish Hospital', 'Daegu University', 'League of Women Voters', 'Eagle Gate College', 'Copenhagen Business School', 'Northern New Mexico College', 'University of Science and Technology Beijing', 'Seijo University', 'Red Rocks Community College', 'Virginia Wesleyan College', 'The Evergreen State College', 'Elmira College', 'Mongolian University of Science and Technology', 'University of Chieti', 'Metropolitan College of New York', 'Angelina College', 'Maryland Institute College of Art', 'Pensacola State College', 'Albertus Magnus College', 'Westchester Community College', 'K. N. Toosi University of Technology', 'Northeast Wisconsin Technical College', 'University of Lyon', 'University of Mary Hardin-Baylor', 'Tarlac State University', 'Somerset Community College', 'Paris Institute of Technology for Life, Food and Environmental Sciences', 'Emmanuel College, Boston', 'Technical University of Munich', 'Hoseo University', 'Spoon River College', 'Community College of Philadelphia', 'Anderson University', 'Gallaudet University', 'California Culinary Academy', 'Daymar College', 'Graceland University', 'Ching Yun University', 'Sharif University of Technology International Campus – Kish Island', 'Cosumnes River College', 'Natural Resources Defense Council', 'Lille Catholic University', 'Millsaps College', 'Columbia Union College', 'Paine College', 'State University of New York at Purchase', 'Dominican School of Philosophy and Theology', 'Oxnard College', 'Great Northern Way Campus', 'Mount Vernon Nazarene University', 'Emporia State University', 'Rock Valley College', 'Oregon Health & Science University', 'The Art Institute of Portland', 'Turner Construction', 'University of Rhode Island', 'Florissant Valley Community College', 'University of Nantes', 'Babylon University', 'Central Michigan University', 'Moore College of Art and Design', 'University of Dayton', 'Hong Kong Adventist College', 'EVA Air', 'Yokohama City University', 'Compton Community College', 'University of Wyoming', 'Medaille College', 'Philippine School of Business Administration', 'Long Island University C.W. Post Campus', 'Des Moines Area Community College', 'Naresuan University', 'SBS Swiss Business School', 'Central Bible College', 'Western Illinois University', 'Cuyamaca College', 'South Plains College', 'École des Hautes Études en Sciences Sociales', 'Durham College', 'University of Central Oklahoma', 'Jönköping University', 'Longwood University', 'Columbia-Greene Community College', 'University of Science and Technology of China', 'Naval War College', 'California State University, Stanislaus', 'German Medical Association', 'Villa Maria College', 'Institute of Semitic Studies', "St. Patrick's College of Education", 'Western University of Health Sciences', 'University of British Columbia', 'Dallas Christian College', 'Bergen Community College', 'Spring Arbor University', 'Wuhan Institute of Physical Education', 'Washington College Academy', 'North American Motorcycle Union', 'Morningside College', 'Maastricht University', 'Institute of Technology, Tallaght', 'University of Washington', 'Nashville School of Law', 'Urmia University of Medical Sciences', 'Spartanburg Methodist College', 'INHolland university of applied sciences', 'Massachusetts College of Liberal Arts', 'East China University of Science and Technology', 'College of Staten Island', 'Pyongyang University of Science and Technology', 'China Agricultural University', 'California Polytechnic State University', 'Webster University', 'Ecole Supérieure des Affaires', 'Universidad del Salvador', 'Murray Edwards College', 'Al-Azhar University', 'Butler County Community College', 'Toyohashi University of Technology', 'Tianjin University', 'Carnegie Mellon University', 'Phoenix College', 'Rockland Community College', 'National Sun Yat-sen University', 'Amirkabir University of Technology', 'Nagoya University', 'Hope College', 'New Era University', 'Columbus State Community College', 'Southwestern Oklahoma State University', 'Sandhills Community College', 'Young Harris College', 'Merritt College', 'Cashmere Rotary Club', 'Marquette University', 'Northwest University, China', 'Minneapolis College of Art and Design', 'Southern Nazarene University', 'Hokusei Gakuen University', 'Cameron University', 'Kentucky Mountain Bible College', 'Nanyang Academy of Fine Arts', 'United Theological Seminary', 'University of Regina', 'Trinity International University', 'Cisco Junior College', 'University of West Georgia', 'Chatham University', 'Caucasus University', 'Aquinas Institute of Theology', 'Puntland State University', 'University of Northern Colorado', 'Bainbridge Graduate Institute', 'University of Provence', 'Kenrick-Glennon Seminary', 'Oakwood College', 'Bob Jones University', 'Kochi University', "St. John's College, Santa Fe", 'University of Nevada, Las Vegas', 'City University, Washington', 'Association for Documentary Editing', 'Cagayan de Oro College-PHINMA Education Network', 'Northern Michigan University', 'Brigham Young University', 'Hobi International', 'Kutztown University of Pennsylvania', 'North Central College', 'Pohang University of Science and Technology', 'Centenary College of Louisiana', 'Saint John Fisher College', 'Hartbreak Films', 'Arizona Western College', 'University Carlo Cattaneo', 'Rangsit University', 'Averett University', 'Darmstadt University of Applied Sciences', 'Heartland Community College', 'Frankfurt University of Applied Sciences', 'Iliff School of Theology', 'Fédération Française de Motocyclisme', 'Dawn Career Institute', 'Fisher School of Accounting', "St. Patrick's, Carlow College", 'Pilar College', 'Paris Dauphine University', 'Emmaus Bible College', 'Fisher College', 'Parana Federal Technological University', 'China University of Mining and Technology', 'Iberdrola', 'Manor College', 'Asia United Theological University', 'Fordham University School of Law', 'Korea National University of Arts', 'Our Lady of Fatima University', 'Population Association of America', 'Jimma University', "King Mongkut's University of Technology Thonburi", 'Harcum College', 'Wuhan University of Technology', 'San Francisco Theological Seminary', 'Westmoreland County Community College', 'University of Karlsruhe', 'Institute for Advanced Studies in Basic Sciences', 'European University of Tirana', 'Earlham College', 'Davidson County Community College', 'University of Judaism', 'Saint Meinrad School of Theology', 'Associated Mennonite Biblical Seminary', 'Jamestown Community College', 'The Art Institute of Fort Lauderdale', 'Albany College of Pharmacy', 'MiraCosta College', 'Pennsylvania College of Art and Design', 'Lone Star College–CyFair', 'Community College of Allegheny County', 'Trinity Episcopal School for Ministry', 'Modern University for the Humanities', 'Evergreen Valley College', 'Anderson School of Theology', 'Munich University of Applied Sciences', 'MRAP', 'Pontifical Xavierian University', 'Myongji University', 'National University of Mongolia', 'Southern Taiwan University of Technology', 'Central Conservatory of Music', 'University of Louisiana at Monroe', 'Northland Community & Technical College', 'Newberry College', 'Hannam University', 'State University of New York at Oneonta', 'Huafan University', 'American University of Sharjah', 'Roosevelt College System', 'Thomas Nelson Community College', 'Urbana University', 'Ton Duc Thang University', 'Kasetsart University', 'Northern Marianas College', 'New Hampshire Bar Association', 'Holy Trinity University, Philippines', 'Richard Bland College', 'Millersville University of Pennsylvania', 'Albion College', 'Somerset Christian College', 'Weizmann Institute of Science', 'Shanghai Jiao Tong University', 'Inner Mongolia University', 'Ateneo de Naga University', 'Kaohsiung Medical University', 'National Kaohsiung Normal University', 'Kyungsung University', 'Ferris University', 'Red Deer College', 'Wagner College', 'Mayville State University', 'McKendree University', 'Bluegrass Community and Technical College', 'Asian Academy of Film & Television', 'University of Colorado at Boulder', 'University of Applied Sciences Mittelhessen', 'Tianjin Medical University', 'Adamson University', 'Baltimore City Community College', 'The Art Institute of California - Hollywood', 'Guizhou University', 'Mercer County Community College', 'Columbia State Community College', 'Saint Stanislaus College', "St. Mary's Seminary and University", 'University of the Fraser Valley', 'Pamantasan ng Lungsod ng Valenzuela', 'Deutscher Motor Sport Bund', 'Sheridan College', 'Milwaukee Area Technical College', 'Virginia Commonwealth University', 'Islamic Azad University, Science and Research of Fars', 'Berkeley Divinity School', 'Peter Lehmann Wines', 'Wesley Theological Seminary', 'Lesley University', 'Allameh Tabatabaii University', 'University of Indianapolis', 'Erasmus University', 'University of Chicago', 'New York City College of Technology', 'Pine Manor College', 'Eastfield College', 'College of Lake County', 'Jewish Institute of Religion', 'European College of Parma', 'Cleveland Institute of Music', 'Northwestern Polytechnical University', 'International Technological University', 'International University, Cambodia', 'Presentation College', 'Kunming University of Science and Technology', 'Arab American University of Jenin', 'University of Tsukuba', 'Concordia College, Bronxville', 'Osaka University', 'University of Trier', 'Grand Rapids Community College', 'Soochow University', 'University of Electro-Communications', 'Oakland University', 'Schoolcraft College', 'University of Texas at Arlington', 'Kokugakuin University', 'Victor Valley College', 'Bryan College', 'Lansing Community College', 'Louisiana College', 'College of the Atlantic', 'Great Lakes Christian College', 'Paris 13 University', 'Southwestern University', 'University of Rouen', 'Florida Atlantic University', 'Peru State College', 'Instituto Tecnológico Superior de Irapuato', 'Post University', 'Surety Company of the Pacific', 'Greensboro College', 'Los Angeles Recording School', 'Walla Walla University', 'Ursinus College', 'Martin Methodist College', 'Capitol University', 'Nanzan University', 'Central Alabama Community College', 'Notre Dame de Namur University', 'Female Health Company (The)', 'National Central University', 'Mars Hill College', 'Hashemite University', 'Florida College', 'Union Latino-Americana de Motociclismo', 'Northcentral University', 'Peirce College', 'Chaffey College', 'Macon State College', 'New York Theological Seminary', 'Laurentian University', 'Link Campus University', 'Adams State College', 'Tompkins Cortland Community College', 'University of Detroit Mercy', 'Dankook University, Cheonan', 'Claremont Graduate University', 'Capital Community College', 'East Texas Baptist University', 'Sierra Nevada College', 'Max Stern Academic College of Emek Yezreel', 'University of Manitoba', 'University of Calgary', 'Clare Hall, Cambridge', 'University of Guelph', 'University of International Business and Economics', 'Rochester Institute of Technology', 'Don Mariano Marcos Memorial State University', 'Delaware State University', 'Southern Baptist Theological Seminary', 'Horizon College and Seminary', 'Blue Mountain Community College', 'Misr University for Science and Technology', 'Loyola Jesuit College', 'Black Hawk College', 'Walsh University', 'Anyang University', 'Grove City College', 'Hong Kong Polytechnic University', 'Golden Gate Baptist Theological Seminary', 'The Art Institute of Michigan', 'Jacksonville University', 'Loras College', 'Foundation University, Islamabad', 'Manar University of Tripoli', 'Dakota State University', 'Paul Quinn College', 'Middle East Technical University', 'Trinity University', 'Universal Boxing Federation', 'Holy Cross of Davao College', 'Inha University', 'Montgomery College', 'State University of New York at Farmingdale', 'Wilson College', 'College Misericordia', 'Carson-Newman College', 'Texas A&M International University', 'Başkent University', 'Unity College', 'Meharry Medical College', 'York College', "Paul Smith's College", 'Fork Union Military Academy', 'Polytechnic University of the Philippines', 'North Seattle Community College', 'San Francisco Art Institute', 'Chinese University of Hong Kong', 'University of Maryland, Baltimore', 'International Academy of Design and Technology, Orlando', 'Prescott College', 'University of the Faroe Islands', 'East China Normal University', 'State Fair Community College', 'Gloucester County College', 'Eckerd College', 'American University of Paris', 'Franklin College', 'Tainan University of Technology', 'LeTourneau University', 'Cuesta College', 'Batangas State University', 'California State Polytechnic University, Pomona', 'Kempten University of Applied Sciences', 'Shanghai University of Engineering Sciences', 'Brenau University', 'Central Community College', 'City College of New York', 'University College of Technology & Management Malaysia', 'Keyano College', 'Riverland Community College', 'Dana College', 'Eden Theological Seminary', 'The Boston Conservatory', 'Fila USA', 'Olivet Nazarene University', 'Yeungnam University', 'Hokkaido University', 'College of the Bahamas', 'Howard College', 'Lincoln College, Illinois', 'Central University of the Caribbean', 'Williamson Free School of Mechanical Trades', 'Seoul Institute of the Arts', 'Kobe College', 'Nipissing University', 'Gyeongin National University of Education', 'Finlandia University', 'Berkeley City College', 'Minnesota State University, Mankato', 'York College, City University of New York', 'Chulalongkorn University', 'American University of Armenia', 'St. Thomas University', 'Xi’an Jiaotong-Liverpool University', 'University of Queensland', 'University of Puerto Rico', 'Mater Dei College', 'École spéciale des travaux publics', 'Washington State Community College', 'Kuyper College', 'Phoenix School of Law', 'Western Technology Center', 'Le Cordon Bleu', 'Saint Mary-of-the-Woods College', 'Pittsburg State University', 'Ateneo de Davao University', 'Kabul Medical University', 'Crown College', 'Stillman College', 'Sanda University', 'Crowder College', 'Northwestern Health Sciences University', 'Coastal Bend College', 'Pacific Lutheran University', 'Utrecht University', 'Al-Ahliyya Amman University', 'Bluefield College', 'China National Machinery & Equipment Import & Export Corporation', 'Juniata College', 'Lancaster Theological Seminary', 'Spicer memorial College', 'Tennessee Temple University', 'Westmont College', 'California State University, East Bay', 'Nazareth College, Rochester', 'Carrington College', 'Miles College', 'Sweet Briar College', 'Keio University', 'Manila Tytana Colleges', 'Shasta College', 'Bellevue University', 'Tulane University', 'Columbus State University', 'University of Saint Francis', 'Washington State University, Vancouver', 'Shepherd University', 'Singapore University of Technology and Design', 'Xavier Institute of Management and Entrepreneurship', 'University of South China', 'Dutchess Community College', 'Ashland Community and Technical College', 'Ibaraki University', 'National Tsing Hua University', 'North Metro Technical College', 'Virginia Highlands Community College', 'Central Methodist University', 'Peking University Health Science Center', 'University of Würzburg', 'Allan Hancock College', 'Zion Bible College', 'Lingnan University', 'Ohio University', 'Pacific Oaks College', 'Indian River Community College', 'Central University College', 'St. Norbert College', 'Jackson State Community College', 'International University Bremen', 'Brandeis University', 'Criswell College', 'Southern College of Optometry', 'Universiti Tun Abdul Razak', 'Al-Azhar University - Gaza', 'Gridiron Club', 'New York Chiropractic College', 'University of Richmond', 'Northwestern Connecticut Community College', 'Institute of Technology, Sligo', 'Valley City State University', 'Centralia College', 'Christian Theological Seminary', 'University of Zanjan', 'Wake Forest University', 'Detroit Baptist Theological Seminary', 'Christ For The Nations Institute', 'Saint Paul College', 'Mithibai College', 'Becker College', 'Haywood Community College', 'Tidewater Community College', 'Heartland Baptist Bible College', 'University of Wales, Trinity Saint David', 'New Hampshire Institute of Art', 'Sharif University of Technology', 'Hendrix College', 'King Saud University', "Texas Woman's University", 'Georgia Perimeter College', 'Moscow State Technical University', 'Zhengzhou University', 'Thomas College', 'Campbellsville University', 'Florida Technical College', 'Hanyang University', 'Malaysia Theological Seminary', 'University of San Carlos', 'Ambrose University College', 'New Jersey Institute of Technology', 'Keimyung University', 'Stratford University', 'Trinity Western University', 'Bellevue College', "King Mongkut's Institute of Technology Ladkrabang", 'Simpson University', 'Universidad de las Américas Puebla', 'Harrington College of Design', 'Northeast Mississippi Community College', 'National Association of Conservation Districts', 'Taekyeung College', 'Newman University', 'Globis University Graduate School of Management', 'Plaza College', 'Richmond American International University', 'Southeast Kentucky Community and Technical College', 'Redeemer University College', 'University of Arkansas System', 'DeVry University', 'Francis Marion University', 'Chongqing University', 'Fashion Institute of Technology', 'Georgetown College', 'Dominican University College', 'Bismarck State College', 'Surigao Education Center', 'University of Vechta', 'New Bulgarian University', 'University of New Hampshire School of Law', 'Western Technical College', 'Baekseok University', 'Upper Alsace University', 'Srinakharinwirot University', 'Nizhny Novgorod State University', 'College of Physicians & Surgeons Pakistan', 'Wayne State University', 'Norwalk Community College', 'New Charter University', 'China Foreign Affairs University', 'Tamagawa University', 'Lebanese American University', 'The Art Institute of Pittsburgh', 'Community College of Rhode Island', 'National Academy of Performing Arts', 'Muhlenberg College', 'University of Maryland Baltimore County', 'American Baptist College', 'Gachon University of Medicine and Science', 'Tehran University of Medical Sciences', 'Eureka College', 'Argosy University', 'Chief Dull Knife College', 'Sogang University', 'LUISS University of Rome', 'University of Yamanashi', "St. John's College, Annapolis", 'Angelo State University', 'University of Applied Sciences Landshut', 'Sullivan County Community College', 'Western State College of Colorado', 'Milligan College', 'Ritsumeikan University', 'Henri Poincaré University', 'JAINA', 'Mercy College', 'South Dakota School of Mines and Technology', 'University of Texas Health Science Center at San Antonio', 'Bethel University', 'Ulster County Community College', 'Loyola University Maryland', 'Konkuk University', 'Alliant International University', 'Louis Pasteur University', 'Reformed Presbyterian Theological Seminary', 'Seinan Gakuin University', 'Luther Seminary', 'Webber International University', 'Hiwassee College', 'James Madison University', 'Gangwon Provincial College', 'Art Academy of Cincinnati', 'Marist College', 'Institute for the Psychological Sciences', 'Azusa Pacific University', 'Morris Brown College', 'Champlain College', 'New College of Florida', 'Mount Mary College', 'Norwich University', 'General Confederation of Liberal Trade Unions of Belgium', 'Hanze University of Applied Sciences', 'Dunwoody College of Technology', 'University of Potsdam', 'Miami University', 'Singularity University', 'United States Sports Academy', 'Temple College', 'La Consolacion College - Bacolod', 'University of Burgundy', 'Cambridge College', 'Gratz College', 'Kyoto Institute of Technology', 'European Business School', 'University of Nice Sophia Antipolis', 'John Carroll University', 'Western Kentucky University', 'Jackson State University', 'Ithaca College', 'Waldorf College', 'Concordia College, Selma', 'Five Towns College', 'Santa Clara University', 'Marywood University', 'European Court of Human Rights', 'Hollins University', 'University of West Alabama', 'Lanzhou University', 'Southwest Jiaotong University', 'North Florida Community College', 'Widener University', 'Fontbonne University', 'Andrew Malcolm Furniture', 'University of North Alabama', 'Imam Sadeq University', 'Hudson Valley Community College', 'Marlboro College', 'Marymount Manhattan College', 'Muskingum University', 'Valparaiso University', 'Quincy University', 'National Agency for Fiscal Administration', 'University of Findlay', 'Mahidol University', 'Virginia College of Osteopathic Medicine', 'William Jewell College', 'Ferris State University', 'Colgate University', 'Pacific University', 'Hebrew University of Jerusalem', 'Persian Gulf University', 'University of Missouri', 'Essex County College', 'Sacred Heart University', 'Werribee Secondary College', 'Central South University', 'Episcopal Theological Seminary of the Southwest', 'Shanghai Maritime University', 'Karlsruhe Institute of Technology', 'East Central College', 'Nanjing University', 'Gateway Technical College', 'SSN College of Engineering', 'Juilliard School', 'Shahid Beheshti University', 'University at Buffalo, The State University of New York', 'Garbally College', 'Saint Bridget College', 'Bacone College', 'University of Central Florida', 'École nationale supérieure des arts décoratifs', 'Loyola University Chicago', 'Mountain View College (Bukidnon)', 'Saint Louis University', 'Carthage College', 'Darul Huda Islamic University', 'West Virginia University at Parkersburg', 'Canadian Car and Foundry', 'University of the Arts', 'DigiPen Institute of Technology', 'Komazawa University', 'National Formosa University', 'American Library Association', 'Authors Guild', 'Institute of Culinary Education', 'Meredith College', 'Missouri Southern State University', 'Southern Polytechnic State University', 'Vanguard University of Southern California', 'Lander University', 'Midland University', 'Utah College of Applied Technology', 'Avery', 'Northeastern University', 'Bakke Graduate University', 'NBCUniversal Television Group', 'Danward Wear', 'University of Economics, Prague', 'Friedensau Adventist University', 'Brevard College', 'Jacksonville State University', 'Chhandayan', 'California State University, San Marcos', 'Hartford Seminary', 'East Mississippi Community College', 'FIM Asia', 'Massachusetts Maritime Academy', 'Jordan University of Science and Technology', 'Tsinghua University', 'Adelaide College of Divinity', 'Canadian Motorcycle Association', 'Rollins College', 'Art Institute of California - Orange County', 'Congress of Irish Unions', 'Paradise Valley Community College', 'Cheongju National University of Education', 'Kyonggi University', 'Owensboro Community and Technical College', 'North China Electric Power University', 'Vance-Granville Community College', 'Delft University of Technology', 'Korea National Police University', 'Rogers State University', 'University of Orléans', 'Pamantasan ng Lungsod ng Maynila, Open University', 'Université de Hearst', 'Malda College', 'For Inspiration and Recognition of Science and Technology', 'Dresden University of Technology', 'Madonna University', 'Antioch University Santa Barbara', 'Paier College of Art', 'Delta State University', 'NY Waterway', 'Georgia Military College', 'Teach For America', 'Fight Crime: Invest in Kids', 'Lawrence Technological University', 'Suffolk County Community College', 'Trent University', 'Bialik College', 'Hartwick College', 'University of Poitiers', 'Haramaya University', 'Pacifica Graduate Institute', 'Utah Valley State College', 'William Woods University', 'Cheongju University', 'Polytechnic Institute of New York University', 'Eastern Oregon University', 'Lucy Cavendish College, Cambridge', 'National Chung Cheng University', 'Delaware Technical & Community College', 'Central Arizona College', 'University of Iloilo', 'Chabot College', 'Lewis-Clark State College', 'University of Technology, Mauritius', 'The Illinois Institute of Art - Chicago', 'Shizuoka University', 'Bahçeşehir University', 'Coosa Valley Technical College', 'Otterbein College', 'Morris College', 'American College of Greece', 'Kyungpook National University', 'Hughes Hall, Cambridge', 'Big Fish Entertainment', 'Adirondack Community College', 'Notre Dame University - Louaize', 'Colorado State University', 'China Central Academy of Fine Arts', 'Kenyon College', 'Tokyo Medical and Dental University', 'The Art Institute of Virginia Beach', 'Chungbuk National University', 'Indiana University', "Nara Women's University", 'Alpena Community College', 'Chiang Mai University', 'Asia-Pacific Nazarene Theological Seminary', 'University of Málaga', 'Santa Fe Community College', 'Naval State University', "Sana'a University", 'Assumption College for Sisters', 'Saint Paul University- Quezon City', 'Woosong University', 'University of the Philippines College of Law', 'Seton Hall University School of Law', 'Western Nebraska Community College', 'The Illinois Institute of Art - Schaumburg', 'Nazarene Bible College', 'Bangkok University', 'John Jay College of Criminal Justice', 'École polytechnique fédérale de Lausanne', 'Blackburn College', 'EADA Business School', 'Wingate University', 'Oklahoma Panhandle State University', 'Nehru Memorial College, Sullia', 'Georgia Institute of Technology', 'Royal Agricultural College', 'Lamar State College–Port Arthur', 'American Academy of Arts and Sciences', 'Asian Institute of Technology', 'Wiley College', 'Drake University', 'Hainan University', 'Paul Verlaine University - Metz', 'Palo Alto University', 'McHenry County College', 'King Khalid University', 'Trinity Evangelical Divinity School', 'Braunschweig University of Technology', 'Research Chefs Association', 'Indiana State University', 'Mesa State College', 'Mississippi College', 'Versailles Saint-Quentin-en-Yvelines University', 'Soka University', "Université Française d'Égypte", 'University of Western Ontario', 'Jones College', 'McMaster University', 'Brown College', 'Philipps University of Marburg', 'Multimedia University', 'Brooklyn College', 'Shippensburg University of Pennsylvania', 'Saint Louis University, Baguio City', 'Galatasaray University', 'University of Minnesota', 'Griffith College Cork', 'Mindanao State University', 'University of Western Brittany', 'Virginia Intermont College', 'Woods Hole Oceanographic Institution', 'Tennessee Technological University', 'Chungju National University', 'Triple Helix Association', 'College of the Ozarks', 'Chuo University', 'Baker University', 'Arlington Baptist College', 'Shinshu University', 'Vancouver Island University', 'University of Suwon', 'Ridgewater College', 'Athlone Institute of Technology', 'Contra Costa College', 'University of Louisiana at Lafayette', 'Al-Aqsa University', 'Los Angeles Community College District', 'Sony Canada', 'Institute of Science and Technology Austria', 'Ramakrishna Mission Residential College', 'Westminster College', 'Occidental College', 'Tougaloo College', 'Udayana University', 'Pinnacle Career Institute', 'Murray State College', 'Central Wyoming College', 'University of Guam', 'American University of Kuwait', 'Linfield College', 'Lyme Academy College of Fine Arts', 'Qatar University', 'Daito Bunka University', 'Providence University College and Theological Seminary', 'University of Marne la Vallée', 'Rose-Hulman Institute of Technology', 'Tokyo University of Foreign Studies', 'Clarkson University', 'Universidad de Zamboanga', 'University of Redlands', 'Shanghai International Studies University', 'Centro Escolar University', 'Kyoto University of Foreign Studies', 'Genesee Community College', 'Thomas Aquinas College', 'Los Angeles Trade-Technical College', 'Cergy-Pontoise University', 'Monmouth University', 'Dakota Wesleyan University', 'Biblical Theological Seminary', 'Central Piedmont Community College', 'Harris-Stowe State University', 'Weatherford College', 'Marylhurst University', 'University of the Punjab', 'College of St. Joseph', 'Trinity Washington University', 'Northcentral Technical College', "Arizona State University's Polytechnic Campus", 'New Hampshire Historical Society', 'École de Management de Lyon', 'University of the Sciences in Philadelphia', 'Istanbul Technical University', 'Deccan College', 'Rikkyo University', 'Dillard University', 'Aquinas University', 'Kangwon National University', 'Ho Chi Minh City National University', 'Keene State College', 'Oklahoma State University - Center for Health Sciences', 'Shawnee Community College', 'Mary Immaculate College, Limerick', 'Cooper Union', 'Catawba College', 'Medgar Evers College', 'Bainbridge College', 'University of Miami', 'Queensborough Community College', 'Lenoir-Rhyne College', 'Nichols College', 'William Mitchell College of Law', 'University of Health Sciences Antigua', 'Kozminski University', 'Beijing Language and Culture University', 'Universitat Oberta de Catalunya', 'Antioch University Los Angeles', 'Lawrence University', 'Charter Oak State College', 'National Authority For The Regulation And Monitoring Of Public Acquisitions', 'Alabama Southern Community College', 'Inter-American University of Puerto Rico', 'Illinois College', 'National University of Colombia', 'The Art Institute of Las Vegas', 'Free University of Berlin', 'Jamestown College', 'Denver Seminary', 'ASPETE', 'Walailak University', 'Geneva School of Diplomacy and International Relations', 'Missouri College', 'Polytechnic University of Valencia', 'University of Mindanao', 'Lewis University', 'Northeastern State University', 'Cincinnati State Technical and Community College', 'Orange Coast College', 'Vermont College of Fine Arts', 'Carl von Ossietzky University of Oldenburg', 'Dongnam Health College', 'Starr King School for the Ministry', 'Bucks County Community College', 'Seoul National University', 'Anoka-Ramsey Community College', 'Philadelphia College of Osteopathic Medicine', 'Yonsei University', 'Kalimar', 'Utica College', 'Brigham Young University-Idaho', 'Athenaeum of Ohio', 'International Christian University', 'College of Mount St. Joseph', 'Palm Beach Atlantic University', 'Columbia Southern University', 'Normandale Community College', 'Randolph College', 'College of the Desert', 'Banha University', 'Relativity Media', 'American University', 'Benedictine College', 'École Supérieure de Physique et de Chimie Industrielles de la Ville de Paris', 'College of the North Atlantic', 'Concordia University', 'Barnard College', 'John A. Gupton College', 'Lake Forest College', 'Dongseo University', 'Panoz Motor Sports', 'Mount Ida College', 'Florida Memorial University', 'Mount Mercy College', 'San Diego Miramar College', 'California State University, Monterey Bay', 'Palomar College', 'Georgian College', 'Touro College', 'Araullo University', 'Senate of Serampore College', 'The Catholic University of America', 'National Chung Hsing University', 'Capital University', 'Dean College', 'Atlantic Cape Community College', 'Adventist University of France – Collonges', 'STI College', 'Manhattan Christian College', 'Bridgewater College', 'Thiel College', 'Caen University', 'Albright College', 'Sahmyook University', 'Goddard College', 'The Citadel', 'Ateneo de Zamboanga University', 'Assemblies of God Theological Seminary', 'Standing Dog Interactive', 'Georgetown University', 'University of the Philippines, Los Baños', 'Life University', 'Seminaries of the Lutheran Church - Missouri Synod', 'IUC Turin', 'The Royal National College For The Blind', 'The Art Institute of Vancouver', 'University of Pennsylvania', 'Roane State Community College', 'John Bosco College', 'University of Maryland, College Park', 'Neumont University', 'DePauw University', 'Oglethorpe University', 'Austin Community College', 'State University of New York at Cobleskill', 'University of Milan Bicocca', 'College of the Mainland', 'Chancellor University', 'Lutheran Theological Southern Seminary', 'Creighton University', 'Walters State Community College', 'Siena College', 'Ming Chuan University', 'Johnson Bible College', 'Robert Koch Institute', 'Bank Street College of Education', 'Pacific Islands Bible College', 'Saint Michael College of Caraga', 'Nanjing Normal University', 'Miriam College', 'Pennsylvania Highlands Community College', 'Florida Gulf Coast University', 'Capitol College', 'Kastamonu University', 'Asbury College', 'Susquehanna University', 'CBS Sports', 'Daytona Beach Community College', 'Oral Roberts University', 'Gakushuin University', 'University of New Mexico', 'Tilted Kilt Pub & Eatery', 'The Art Institute of Seattle', "Irish Transport and General Workers' Union", 'Brigham Young University Hawaii', 'Joshibi University of Art and Design', 'Erskine College', 'Zite', 'Ohio Northern University', 'University of the Visayas', 'Southern Virginia University', 'Saint Paul School of Theology', 'University of Dubai', 'New Brunswick Theological Seminary', 'The College of St. Scholastica', 'Concordia University, Saint Paul', 'St. Olaf College', 'Nebraska Wesleyan University', 'Olympic College', 'Linn-Benton Community College', "St. Patrick's Seminary & University", 'Cloud County Community College', 'Lock Haven University of Pennsylvania', 'East West University', 'Maejo University', 'Marymount College, Tarrytown', 'Divine Word College of Calapan', 'Wayne State College', 'Villanova University', 'Valley Forge Christian College', 'Kaplan University', 'American College of Sofia', 'College of the Holy Spirit', 'Siena Heights University', 'University of the West', 'Arkansas Tech University', 'Three Rivers Community College', '24-Hour Fitness', 'Tokyo University of Marine Science and Technology', 'Tunis El Manar University', 'Shenyang Pharmaceutical University', 'Macalester College', 'Southern Arkansas University', 'Urmia University', 'Central Colleges of the Philippines', 'Central DuPage Hospital', 'George Wythe College', 'California InterContinental University', 'Chungnam National University', 'Delaware Valley College', 'Griffith College Dublin', 'Quinnipiac University', 'Princess Sumaya University for Technology', 'Institute of American Indian Arts', 'Al Akhawayn University', 'Northeast Texas Community College', 'Belmont Abbey College', 'Gatesway Foundation', 'California State University, Chico', 'Middlesex County College', 'Naval Postgraduate School', 'Sam Houston State University', 'Ghana Telecom University College', 'University of Perpetual Help System DALTA', 'Corpus Christi College, Oxford', 'Hennepin Technical College', 'Gordon College', 'Hunan University', 'Molloy College', 'University of Erfurt', 'University of New England', 'The University of Texas M. D. Anderson Cancer Center', 'Tunis University', 'Kentucky State University', 'Paris Universitas', 'Ewha Womans University', 'Idealab Silicon Valley', 'National University of Ireland, Galway', 'Coker College', 'Nihon University', 'Panola College', 'Islamic Azad University', 'University of Technology of Troyes', 'Florida State University', 'Instituto Superior de Agronomia', 'Kansas State University', 'Tzu Chi University', 'Webb Institute', 'Catholic University of Lyon', 'Indiana University-Purdue University Indianapolis', 'Northwestern State University', 'Lewis and Clark Community College', 'Manuel S. Enverga University Foundation', "Saint John's University, Shanghai", 'University Kore of Enna', 'Kansai University', 'The Open University of Japan', 'University of Saskatchewan', 'Covenant College', 'Sir Wilfred Grenfell College', 'Vermont Law School', 'University of Passau', 'Cayuga County Community College', 'Niigata University', 'Instituto Tecnológico de Saltillo', 'Northwood University', 'Musicians Institute', 'Bunkyo University', 'Ashford University', 'South China University of Technology', "Xi'an Jiaotong University", 'Virginia College', 'Whittier College', 'Coastline Community College', 'Modern Academy In Maadi', 'Otis College of Art and Design', 'Coastal Georgia Community College', 'University of Houston', "Showa Women's University", 'Oregon Institute of Technology', 'Texarkana College', 'Minot State University', 'Hunan Normal University', 'National Institute of Fitness and Sports in Kanoya', 'Springfield College', 'University of Hamburg', 'Kagoshima University', 'Augsburg University of Applied Sciences', 'Korea National Open University', 'Greenville Technical College', 'ESSEC Business School', 'Greenville College', 'Selkirk College', 'Southeastern Illinois College', 'National Taiwan University', 'George Brown College', 'Grace Theological Seminary', 'Tunku Abdul Rahman University', 'Southern Utah University', 'Chalmers University of Technology', 'Kyunghee University', 'Herkimer County Community College', 'Ferdowsi University of Mashad', 'Wilmington College', 'Babeş-Bolyai University', 'New Hampshire Technical Institute', 'Claremont School of Theology', 'University of Baghdad', 'National Labor College', 'LeMoyne-Owen College', 'Stanford University Office of the President', 'University of Northern Iowa', 'Mount Aloysius College', 'Karlshochschule International University', 'Regent University', 'Santa Fe College', 'Briar Cliff University', 'Asheville-Buncombe Technical Community College', 'Franciscan University of Steubenville', 'University of Maine at Presque Isle', 'Boston University', 'Waynesburg University', 'Maysville Community and Technical College', 'New Mexico State University', 'University of Flensburg', 'Henan University of Science and Technology', 'Islamic University of Gaza', 'San José State University', 'University of Oklahoma', 'Pacific States University', 'John Tyler Community College', 'Rhode Island School of Design', 'Rose State College', 'New River Community College', 'Alzahra University', 'Green Mountain College', 'St. Xavier University', 'Bank of California', 'Northwest University', 'Vincennes University', 'Instituto de Empresa Business School', 'Diablo Valley College', 'American University in Dubai', 'Atlantic School of Theology', 'Brown University', 'Piedmont College', 'Chestnut Hill College', 'Savannah College of Art and Design', 'Robert Morris University', 'University of Toronto', 'Metropolitan State College of Denver', 'National Taiwan Normal University', 'University of Mobile', 'Air China', 'University of Vermont', 'École Normale Supérieure de Cachan', 'National University of Salta', 'Aichi Gakuin University', 'Harbin Engineering University', 'University of Savoy', 'Western New England College', 'Deep Springs College', 'Feather River College', 'Abilene Christian University', 'Beijing Institute of Technology', 'Bocconi University', 'American Sentinel University', 'Presbyterian University College', 'Texas Southern University', 'Southeastern University of the Assemblies of God', 'Delta College', 'Metropolitan State University', 'Keck Graduate Institute', 'Hillsdale College', "King's University College", 'Saint James School of Medicine', 'Copiah-Lincoln Community College', 'Jarvis Christian College', 'Sierra College', 'Boston College', 'Coahoma Community College', 'Roberts Wesleyan College', 'Austin College', 'Asian Professional Exchange', 'Kingsborough Community College', 'Union University', 'Texas Tech University Health Sciences Center', 'Zagazig University', 'South Georgia Technical College', 'Okanagan College', 'Shandong Economic University', 'Strayer University', 'Gavilan College', 'Lehigh Carbon Community College', 'First Nations Technical Institute', 'Phi Delta Kappa', 'Thomas More College', 'Bolanz & Miller', 'Louisiana State University', 'LaGuardia Community College', 'SIM University', 'Tokyo University of Science', 'Professional Writers Association of Canada', 'Baruch College', 'University of Bahrain', 'Manatee Community College', 'Kosin University', 'Dún Laoghaire Institute of Art, Design and Technology', 'RH Audio Publishing Group', 'Stockholm School of Economics', 'Beijing Technology and Business University', 'Wesleyan College', 'Mississippi University for Women', 'Salem State University', 'State University of New York at New Paltz', 'Xavier University of Louisiana', 'LASALLE College of the Arts', 'Texas A&M University', 'Indian Hills Community College', 'Arcadia University', 'Princeton University', 'Kumamoto Gakuen University', 'La Salle College Antipolo', 'Kirkwood Community College', 'SOAS, University of London', 'Western Texas College', 'Harold Washington College', 'Ringling School of Art and Design', 'ISM University of Management and Economics', 'Thunderbird School of Global Management', 'Nicola Valley Institute of Technology', 'Northern Illinois University', 'Restaurant el Corazón de Siría, C.A.', 'International University of Japan', 'Grace Bible College', 'Labouré College', 'Montana State University - Bozeman', "Saint Joseph's College, Indiana", 'University of Limerick', 'Jinan University', 'Whatcom Community College', 'Herzing University', 'Pusan National University', 'Mid-America Reformed Seminary', 'Rio Hondo College', 'The Art Institute of Washington', 'Nassau Community College', 'Quincy College', 'Colorado Mountain College', 'Endicott College', 'Shanghai Normal University', 'Wartburg Theological Seminary', 'Texas Wesleyan University', 'The Art Institutes International - Kansas City', 'Western Nevada College', 'Ocean County College', 'American College of Physicians', 'Charles R. Drew University of Medicine and Science', 'Kokushikan University', 'Jeonju University', 'Virginia University of Lynchburg', 'Minneapolis Community and Technical College', 'Beloit College', 'California State University, Long Beach', 'Pangasinan State University', 'Bexley Hall', 'Hawaii Pacific University', 'Bryant and Stratton College', 'Sun Yat-sen University', "Fédération des étudiants d'Afrique noire en France", 'Tokyo College of Music', 'Keystone College', 'Diné College', 'Payap University', 'Cistercian College, Roscrea', 'Iowa Central Community College', 'UEI College', 'Southern Evangelical Seminary', 'Lyceum of the Philippines University', 'Southwest Mississippi Community College', 'Royal Astronomical Society of Canada', 'Cornell College', 'Iowa State University', 'University of Lethbridge', 'Glendale Community College', 'Reutlingen University', 'Vassar College', 'New York Medical College', 'Arabian Gulf University', 'Scottsdale Culinary Institute', 'The Hague University', 'Hanoi University of Technology', 'Spartanburg Community College', 'Morehouse College', 'Heritage University', 'Ranger College', 'Fort Peck Community College', 'Vanguard College', 'Schenectady County Community College', 'Conservatoire de Paris', 'Spelman College', 'California Institute of Technology', 'Front Range Community College', 'Baylor College of Medicine', 'University of San Jose - Recoletos', 'Baliuag University', 'San Diego Mesa College', 'University of Northern Philippines', 'Fukuoka University', 'St. Lawrence College, Ontario', 'Hudson County Community College', 'Antioch University New England', 'Cazenovia College', 'Dalton State College', 'Brown College at Monroe Hill', 'National Yunlin University of Science and Technology', 'New York Institute of Technology', 'Silpakorn University', 'Umpqua Community College', 'Assumption College', 'Wake Technical Community College', 'Coppin State University', 'University of Michigan-Dearborn', 'Brooklyn Law School', 'Kingswood University', 'Southern Oregon University', 'Humphreys College', 'North Lake College', 'Istituto Agrario di San Michele all’Adige', 'Tokyo Polytechnic University', 'Empire State College', 'Southeastern Oklahoma State University', 'Teikyo University', 'Manchester College', 'Boise State University', 'Kalamazoo College', 'Aletheia University', 'Ryutsu Keizai University', 'Southwest Wisconsin Technical College', 'Bow Valley College', 'Nipawin Bible College', 'Ulyanovsk State University', 'Mogadishu University', 'Capital University of Economics and Business', 'Colegio San Agustin-Bacolod', 'Helmut Schmidt University', 'University of Montpellier', 'Simon Fraser University', 'Maranatha Baptist Bible College', 'University of the Nations', 'Letterkenny Institute of Technology', 'Yuan Ze University', 'Tel Aviv University', 'University of North Texas at Dallas', 'China Central Radio and TV University', 'Central Christian College', 'Mountain State University', 'Erikson Institute', 'Northwestern Michigan College', 'University of Kentucky', 'Penn State Fayette', 'Heidelberg College', 'Notre Dame of Dadiangas University', 'World Organization of Family Doctors', 'University of the Assumption', 'New England College', 'St. Paul University-Manila', 'Al-Fayyum University', 'Lumière University Lyon 2', 'Cedar Valley College', 'Atlantic Baptist University', 'University of Ulsan', 'University of Massachusetts', 'Elizabeth Smart Foundation', 'University of Memphis', 'Motorcycling Victoria', 'Hodges University', 'Hong Kong Shue Yan College', 'Turkish Aeronautical Association', 'Coe College', 'German-Jordanian University', 'Gateway Community and Technical College', 'Wharton County Junior College', 'Southern Vermont College', 'Fort Berthold Community College', 'Meridian Community College', 'Handong Global University', 'Valencia Community College', 'Japan Advanced Institute of Science and Technology', 'Harbin University of Science and Technology', 'University of Maine at Machias', 'Cambrian College', 'Manhattanville College', 'Morgan State University', 'Belhaven College', 'Southwestern Christian University', 'University of Basrah', 'Changchun University of Science and Technology', 'North Hennepin Community College', 'National Council of Women of Australia', 'José Rizal University', 'Catholic Theological Union', 'Mount Holyoke College', 'City University of Hong Kong', 'Knox College, Illinois', 'Tiffin University', 'Atlantic University', 'Toronto Board of Trade', 'Shahid Bahonar University of Kerman', 'Pratt Institute', 'Milwaukee Institute of Art & Design', 'Moraine Valley Community College', 'Bronx Community College', 'Bielefeld University of Applied Sciences', 'Vaughn College of Aeronautics and Technology', 'Cardiff University', 'Instituto Tecnológico de Ciudad Juárez', 'LDS Business College', 'Mid-Continent University', 'Carroll University', 'Bulacan State University', 'Western Mindanao State University', 'Chung Yuan Christian University', 'Pierre-and-Marie-Curie University', 'Stanford University', 'Southwestern College', 'Broward Community College', 'Duquesne Club', 'Pellissippi State Technical Community College', 'Münster University of Applied Sciences', 'Del Mar Community College', 'Auburn University', 'Sault College', 'Indiana University Bloomington', 'Babcock University', 'Wrigley Company', 'Nippon Medical School', 'Lafayette College', 'King College', 'Chester College of New England', 'Whitworth University', 'Astronomical Society of the Pacific', 'Central Washington University', 'Kellogg Community College', 'Waubonsee Community College', 'Nagaoka University of Technology', 'Graphicstation, Inc.', 'British Psychoanalytical Society', 'Craven Community College', 'Community Christian College', 'Mission College', 'Georgian Court University', 'Palm Beach Community College', 'Holy Names University', 'Srinivas Group of College', 'Technical University of Berlin', 'Hilbert College', 'Hazard Community and Technical College', 'Hebei University of Technology', 'Wolfson College, Cambridge', 'National University of Singapore', 'Isfahan University of Technology', 'Allegheny College', 'Ventura College', 'Freed-Hardeman University', 'Hanover College', 'Louisiana Tech University', 'University of Texas at San Antonio', 'Masdar Institute of Science and Technology', 'Hannibal-LaGrange College', 'Wayne Community College', 'Pacific Lutheran Theological Seminary', 'Ross University', 'Odessa College', 'Master’s College and Seminary', 'Université de Lille III', 'Yale University', "Saint Joseph's College of Quezon City", 'Scuola Normale Superiore di Pisa', 'Eugene Bible College', 'J. F. Oberlin University', 'Open University Malaysia', 'Alcorn State University', 'Seattle University', 'Charleston Southern University', 'Columbia College', 'Kobe University', 'Chicago State University', 'Ramrao Adik Institute of Technology', 'Moorside Social Club', 'The College of Wooster', 'Northeastern Oklahoma A&M College', 'Tenri University', 'Longy School of Music', 'Loughborough University', 'Oceania Motorcycling Union', 'University of the Philippines', 'Red River College', 'St. Petersburg College', 'Nashville State Community College', 'Cerro Coso Community College', 'University of the Southern Caribbean', 'Mercer University', 'Beijing Foreign Studies University', 'Church Divinity School of the Pacific', 'University of Houston–Clear Lake', 'Elim Bible Institute', 'Stonehill College', 'Tyndale University College and Seminary', 'HAN University of Applied Sciences', 'Johns Hopkins University', 'Indiana Wesleyan University', 'Teachers College, Columbia University', 'Southwestern Adventist University', 'University of Rennes 2 - Upper Brittany', 'Regis University', 'MSC Industrial Direct Company, Inc.', 'Columbia Theological Seminary', 'Washington State University', 'Folsom Lake College', 'Orange County Community College', 'McPherson College', "Philippine Women's University", 'Tsuda College', 'San Joaquin Valley College', 'Highland Community College', 'Bukidnon State College', 'Lewis & Clark College', 'Alexandria University', 'Anna Maria College', 'Carl Albert State College', 'Piedmont Community College', "Saint Mary's University", 'Sinte Gleska University', 'The New School for Jazz and Contemporary Music', 'North Park University', 'Ritsumeikan Asia Pacific University', 'Bar-Ilan University', 'Université Paul Cézanne Aix-Marseille III', 'University of Avignon', 'Germanna Community College', 'Swarthmore College', 'Nagoya Institute of Technology', 'University of Incheon', 'Eastern Connecticut State University', "Cebu Doctors' University", 'Hesser College', 'Jinggangshan University', 'Ogden-Weber Applied Technology College', 'University of Oregon', 'Franklin Pierce College', 'SS. Cyril and Methodius Seminary', 'Ashland Theological Seminary', 'Ohio Christian University', 'Northwest Vista College', 'Limkokwing University of Creative Technology', 'Mississippi State University', 'Universidad Iberoamericana', 'Malone College', 'Northeast Iowa Community College', 'Lon Morris College', 'Kalaidos University of Applied Sciences', 'College of Southern Maryland', 'Winthrop University', 'Aga Khan University', 'University of the Cumberlands', 'Polk State College', "St. Joseph's College", 'Texas Tech University', 'Wrocław University', 'Bethany Lutheran College', 'Eva Rose York Bible Training and Technical School for Women', 'University of Rochester', 'Life Pacific College', 'George Fox University', 'Goucher College', 'Laboratory Institute of Merchandising', 'Far Eastern University', 'Royal College of Music', 'Curry College', 'Laguna State Polytechnic College', 'Maitripa Institute', 'Moorpark College', 'Columban College', 'Illinois Institute of Technology', 'University of Yazd', 'Republic of China Military Academy', 'Notre Dame College', 'The Art Institute of Raleigh - Durham', 'Grambling State University', 'Gunma University', 'Instituto Superior Técnico', 'Claflin University', 'Curtis Institute of Music', 'Manhattan School of Music', 'Baylor University', 'Gardner-Webb University', 'University of Winnipeg', 'University of Paris III: Sorbonne Nouvelle', 'Lyon College', 'Baden-Württemberg Cooperative State University', 'Ontario College of Art & Design', 'Campbell University', 'Memphis College of Art', 'Regent University College of Science and Technology', 'Lutheran Theological Seminary at Philadelphia', 'First Nations University of Canada', 'Southwest Baptist University', 'Agnes Scott College', 'Loma Linda University', 'Michigan Lutheran Seminary', 'University of Maine at Augusta', 'San Sebastian College - Recoletos de Cavite', 'Central State University', 'Brookdale Community College', 'Rend Lake College', 'American Indian College', 'Drury University', 'University of Houston–Downtown', 'University of Phoenix', 'Towson University', 'Texas Lutheran University', 'Castleknock College', 'Laguna College of Art and Design', 'Grantham University', 'Art Center College of Design', 'Los Angeles Southwest College', 'Daejin University', 'University of Texas Medical Branch', 'Monterey Institute of International Studies', 'Takushoku University', 'Jefferson State Community College', 'South Dakota State University', 'Monterey Peninsula College', 'Northwest Nazarene University', 'National Military Academy of Afghanistan', "Saint Mary's College", 'University of North Carolina System', 'Montgomery County Community College', 'University of the East Ramon Magsaysay Memorial Medical Center', 'Yeshiva University', 'Kansas City Art Institute', 'Lorain County Community College', 'Eastern Mennonite University', 'University of Southern California', 'Furman University', 'Surigao del Sur Polytechnic State College', 'Guilford Technical Community College', 'Université de la Polynésie Française', 'North University of China', 'St. Bonaventure University', 'University of North Dakota', 'Roosevelt University', 'Universidad Autónoma de Guadalajara', 'Lane College', 'Vandercook College of Music', 'Macomb Community College', 'Nirma University of Science & Technology', 'Venus Fashion', 'South Mountain Community College', 'Cleveland Community College', 'Burlington County College', 'Muskegon Community College', 'Regis College', 'Cedar Crest College', 'Fullerton College', 'Ecole Supérieure de Réalisation Audiovisuelle', 'Portage College', 'Brown Grain Co.', 'Wittenberg University', 'Midwestern State University', 'Minnesota Life College', 'Salahaddin University', 'Florida Keys Community College', 'Basilan State College', 'University of Alcalá', 'Western Washington University', 'Palawan State University', 'University of Victoria', 'Gaelic Athletic Association', 'South Suburban College', 'University of Belize', 'Southeast Missouri State University', "Société littéraire, historique et archéologique de département de l'Ain", 'University of Ulm', 'American College of Cardiology', 'Reedley College', 'Father Muller Medical College', 'Concordia University (Nebraska)', 'Southern Methodist University', 'Metasystems Design Group', 'Pritchett College', 'Edinboro University of Pennsylvania', 'Rensselaer Polytechnic Institute', 'Oklahoma Baptist University', 'Gannon University', 'Galveston College', 'Dowling College', 'Northwest Shoals Community College', 'Truett-McConnell College', 'Ubon Ratchathani University', 'Clarendon College', 'Université Claude Bernard Lyon 1', 'Ohio Valley University', 'Northeast Agricultural University', 'Fu Jen Catholic University', 'University of the Ryukyus', 'Queens College, City University of New York', 'Southern Adventist University', 'University of Montana - Missoula', 'Konstanz University of Applied Sciences', 'New England Conservatory of Music', 'University of Television and Film Munich', 'West Negros University', 'Universidad Anáhuac del Sur', 'Dalhousie University', 'Augusta State University', 'State University of New York at Brockport', 'University of Applied Sciences Deggendorf', 'Cabrini College', 'Pitzer College', 'Albany State University', 'Dixie State College of Utah', 'Watkins College of Art, Design & Film', 'Seattle Institute of Oriental Medicine', 'Darton College', 'New Jersey City University', 'Mutah University', 'Maine Maritime Academy', 'Immaculata University', 'Eugene Lang College The New School for Liberal Arts', 'Quest University', 'Southern Leyte State University', 'Santa Barbara City College', 'University of Iowa', 'Westminster College, Missouri', 'Christian Brothers University', 'Medical University of South Carolina', 'Toronto Royal Conservatory of Music', 'Encompass Insurance Company', 'Ushaw College', 'Chattanooga State Technical Community College', 'Jilin University', 'Barton College', 'Philippine Normal University', 'Arkansas Baptist College', 'Berlin School of Economics', 'Concordia College, Moorhead', 'Grace College', 'Michigan Technological University', 'MIKE2.0 Governance Association', 'Ho Chi Minh City University of Science', 'Bradley University', 'West Virginia State University', 'Camden County College', 'Sapir Academic College', 'Sunset International Bible Institute', 'SUNY College at Cortland', 'Cégep de Lévis-Lauzon', 'Pacific School of Religion', 'Cologne University of Applied Sciences', 'American University of Science and Technology', 'International Academy of Design and Technology, Detroit', 'University of St. La Salle', 'Thomas Jefferson University', 'American Society for Cybernetics', 'Brock University', 'The Art Institute of Phoenix', 'University of Montevallo', 'Kendall College', 'Itawamba Community College', 'Southwest Minnesota State University', 'Fort Hays State University', 'West Virginia Wesleyan College', 'Oklahoma State University–Stillwater', 'East Stroudsburg University of Pennsylvania', 'Ball State University', 'Fox Valley Technical College', 'Rhode Island College', 'Paris Junior College', 'Dublin Institute of Technology', 'El Colegio de México', 'West Virginia School of Osteopathic Medicine', 'Montesquieu University - Bordeaux IV', 'Alabama Agricultural and Mechanical University', 'Universidad Austral de Chile', 'Southeastern Baptist Theological Seminary', 'Felician College', 'European University Viadrina', 'Xidian University', 'University of Saint Mary', 'Messiah College', 'Newbury College', 'Northern Baptist Theological Seminary', 'Illinois College of Optometry', 'The University of Texas Health Science Center at Houston', 'Ozarka College', 'Pacific Western University', 'Elgin Community College', 'Toho Gakuen School of Music', 'Ilisagvik College', 'Westminster Seminary California', 'Cumberland University', 'National Taiwan University of Science and Technology', 'State University of New York at Fredonia', "St. John's University", 'Pacific Northwest College of Art', 'Illinois Wesleyan University', 'San Joaquin Delta College', 'University of Bordeaux 1', 'Voices for Progress', 'Korea Maritime University', 'Paris School of Economics', 'United Nations Security Council', 'Wesley Biblical Seminary', 'North Georgia Technical College', 'South Texas College of Law', 'Emmanuel College, Georgia', 'Fr. Saturnino Urios University', 'Heritage Christian University', 'American Right To Life', 'Wofford College', 'Justice Institute of British Columbia'}
            Answers = 4112, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.099s]
          Answers = 4112, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.100s]
        Checking schema 242 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.leaders', 'organization.leadership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.to ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 207
            Final Answer: {'1983', '1860', '1899', '1995', '1947', '1985', '1998', '1977', '1942', '1951', '1997', '1990', '2007', '1897', '1944', '1906', '1889', '1884', '1982', '2016', '1903', '1879', '1939', '1965', '2005', '1920', '1898', '1872', '1896', '1950', '2017', '1953', '1908', '1915', '1978', '1973', '1880', '1873', '1919', '1905', '2009', '1848', '1877', '1979', '1900', '1991', '1980', '1988', '1913', '1984', '2002', '1968', '1955', '2010', '1948', '1952', '1976', '1959', '1922', '1975', '1837', '2008', '1914', '1921', '1924', '1943', '1970', '1956', '1904', '1925', '1878', '1941', '1869', '1917', '1996', '1969', '1937', '1994', '1987', '1853', '2015', '1974', '1725', '2000', '1949', '1993', '1929', '1887', '1971', '2004', '1909', '1901', '2013', '1931', '1962', '1874', '1890', '1831', '2011', '1958', '1954', '1883', '1986', '2012', '2003', '2006', '1992', '1864', '1989', '1894', '1806', '1866', '1972', '1981', '1946', '1999', '2001', '1876'}
            Answers = 118, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 118, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 243 / 396: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 5416
            Final Answer: {'J H Pyne', 'William John Pepicello', 'James R Gavin III', 'Issachar S Gerlitz', 'Mark Kristian Tonnesen', 'Paul Brooks', 'Jack Glaser', 'J Patrick Gallagher Jr', 'Surendra Pai', 'David Hatfield', 'Geoffrey F Cox', 'Thomas Mendoza', 'Maurice J Spagnoletti', 'Michael D Watford', 'Michele Antonio Pangia', 'Bruce Armstrong', 'Martin M Mcglynn', 'Alwin Tan', 'James E Riesenbach', 'Daniel Walter Schutt', 'Jerauld J Cutini', 'Bernard J Poussot', 'Richard L Kinzel', 'Holly Brown', 'Louis J Decesare Jr', 'Lavi Lev', 'Eric L Sorkin', 'Zeynep Hakimoglu', 'Connie K Duckworth', 'Franklin H Sherron Jr', 'Scott Scherr', 'Harry W Kellogg Jr', 'John Cunningham', 'Barbara Corday', 'Roy D Dean', 'Michael N Chang', 'Michael John Mckelvey', 'Joseph Podolski', 'Andrew M Rooke', 'Asiff Hirji', 'John E. Bryson', 'Geraud Darnis', 'E Lawrence Hill Jr', 'R Scott Turicchi', 'Eric W Thornburg', 'Norman Thomas Linebarger', 'Richard H Lenny', 'Schack Wesley W Von', 'Alvio Silvio Barrios', 'Thomas J Gallagher', 'Joseph W Mcgrath', 'Rasesh H Shah', 'Dennis Earl Gershenson', 'Cynthia L Goldenberg', 'Stephen P Herbert', 'Norman E Johnson', 'Michael S Weinstein', 'Murry Gerber', 'Tod Nielsen', 'Richard G Rawson', 'Gordon R Arnold', 'David D Stovall', 'Angela Ahrendts', 'Charles W Dickinson', 'Thomas Heneghan', 'Raph Appadoo', 'Verne Orr', 'Violeta Chamorro', 'William Shaw', 'Charles H Majors', 'Jan H Egberts', 'John Daane', 'Michael J Cordesman', 'Brent Fouch', 'Curt Anastasio', 'Thomas J. Usher', 'Gregory J Mckenzie', 'John W Meisenbach', 'Lance Conn', 'John P D Cato', 'Bruce A Streeter', 'Michael Flannery', 'Dennis E Eagan', 'Elizabeth Campbell', 'Robert R Harl', 'Michael Strauss', 'Lenny Valentino Jr.', 'Andrew A Mckay', 'Elwin M Beaty', 'Douglas L Rock', 'Joseph D Borgerding', 'Steven Wasserman', 'John G Cull', 'Mark R Stoll', 'Ron Zwanziger', 'Andrew C G Uprichard', 'Paul Januszewski', 'Shahid Malik', 'Walter M Pressey', 'Brian C. Cornell', 'Harry Korman', 'Andrew W Cramer', 'J. George Harrar', 'Craig M Dwight', 'Paula Rosput Reynolds', 'Yang Mianmian', 'Mitchell S Bregman', 'Ronald L Blake', 'Wesley G Bush', 'Ian D Anderson', 'John S Marr Jr', 'William\xa0J.\xa0Ryan', 'Tony Strange', 'Mathew D Serra', 'Stephen D Lebovitz', 'Susan Nowakowski', 'Erroll B. Davis Jr.', 'Michael R Splinter', 'Raza Khan', 'Paul Mitchell', 'Patrick Doherty', 'Ralph S. Larsen', 'Leslie J. Browne', 'Henry A. Strong', 'Gerard E Puorro', 'Richard A Gonzalez', 'Rajiv Gupta', 'Mark A Houser', 'Larry D Barbour', 'Tao Zheng', 'Theodore L Chandler', 'Joseph E Odell', 'Robert G Wood', 'George Leis', 'Adrienne B Lazarus', 'Howard Lance', 'Peter Rettaliata', 'William M Brown', 'Terry L Haines', 'James D Taiclet Jr', 'Mark Chernis', 'Darin G Billerbeck', 'Timothy J Fenton', 'Dennis J Fitzsimons', 'Salvatore D Fazzolari', 'Marc F Gustafson', 'Steven Kelly', 'Patrick Ferguson', 'Matt Landa', 'Peter Z Horvath', 'Denis Georg Saint', 'Ronald V Waters', 'Andrew D Macdonald', 'David J. Drachman', 'Michael E Jalbert', 'Michael J Anderson', 'Timothy Tyson', 'Stephen Cooke', 'Ben Horowitz', 'Dominic Orr', 'Dean E Taylor', 'H Stewart Parker', 'Carl Pohlad', 'Scott J Zimmerman', 'Bill D. Moyers', 'James J Giancola', 'Todd M Hornbeck', 'Anderson L Smith', 'Aza Raskin', 'Walter W Turner', 'Anand K Nallathambi', 'Harry L Bosco', 'Frederick M Danziger', 'Dario Loreto Santana', 'Randy Moeder', 'Robert P Abramson', 'Gregg Dedrick', 'James M Brackenbury', 'Andrew C Florance', 'Joseph D. Nelson', 'Kevin S Mccarthy', 'Robert N. Burt', 'David Pulling', 'David C Naccarati', 'Gary Roberts', 'William C Styslinger III', 'Klaus Luft', 'Jeffrey C Selby', 'Dale R. Laurance', 'Don Blankenship', 'Kevin S Noland', 'Karl Kyriss', 'Michal D Cann', 'Todd R Ford', 'Darío A. Cortés', 'John B. Menzer', 'William J Hieb', 'Deborah Ann Meekins', 'David Clayton Cole', 'Robert K Henry', 'De La Mesa Manuel J Perez', 'Mark W Funke', 'David Robbins', 'Laurans A Mendelson', 'Michael R Coltrane', 'Philip J Koning', 'Gregory Maffei', 'Oren Koules', 'David F Smith', 'Gary L Nalbandian', 'David S Haffner', 'Matthias R Heinze', 'Jozef Salaerts', 'Jerry A Newby', 'Joseph M Monroe', 'Gary L. Lauer', 'C John Briggs', 'George A Schreiber Jr', 'Mark Parker', 'Joseph F Coradino', 'Rogelio M. Rebolledo', 'Richard Reidy', 'John C Hellmann', 'Corey L Johnson', 'Joseph Ram', 'Fernando Zobel de Ayala', 'Elaine Beitler', 'John B Fisher', 'Michael G Grey', 'Robert Wall', 'Donald J Mcdonald Jr', 'Louis Prichard', 'Steven Rosenberg', 'John W Combs', 'Sandra O. Moose', 'Paul F Gentzkow', 'Ershel C Redd Jr', 'Floyd E Wicks', 'John E. McGlade', 'David Rochon', 'Michael Davin', 'R David Hoover', 'Daniel Bernstein', 'Donald A Wojnowski Jr', 'Scott D Farmer', 'Scott Sutton', 'Celeste Berouty', 'Jeffrey Baker', 'Jim Clishem', 'Steven Duane Merrifield', 'John Wren', 'Lynn B Fuller', 'Mark Dubberstein', 'James W Stewart', 'Michael C Arnold', 'Tommy A Valenta', 'Michael J Cavanagh', 'Antonio Maciel Neto', 'Gary M Malino', 'Robert W Dineen', 'Darryl Alexander Edwards', 'Cecil H. Underwood', 'John W Eaves', 'Donald E Kneir', 'Robert A Deason', 'Robert B. Willumstad', 'John L Castello', 'Ron B Raup', 'Håkan Buskhe', 'Robert G Isaman', 'Gregory Ofiesh Father', 'David Kenin', 'Robert L Bauman', 'Marvin Blecker', 'Peter Van Garderen', 'Chu Lam Yiu', 'Gregory Gemette', 'Benjamin Harrison', 'Stephen C Beasley', 'Scott A Montgomery', 'Lee-lean Shu', 'William N Cantrell', 'M. Anthony Burns', 'Robert F Neil', 'Rajeev Singh', 'John L Mcmanus', 'Paul G Anderson', 'Joseph Cassano', 'Louis V Aronson II', 'Paul Goldean', 'Stuart A Kingsley', 'Melissa A Hill', 'Allen Collins', 'Eric C. Wiseman', 'Gregory D Morgan', 'William J Small', 'James H Miller', 'Kenneth P Wilcox', 'Stuart Wells', 'Terry L Dunlap', 'Christopher B. Howard', 'Jayson Walmsley', 'Richard Miller', 'Ambra Thomas E Phd D', 'Jeffrey E Coombs', 'David J Noble', 'David B Needham', 'Tony J Sorcic', 'Gary L Paxton', 'Philip D Moyer', 'Leo S Ullman', 'Fernando Quiroz Robles', 'Melanie J Dressel', 'Joseph D Rupp', 'Louis Molnar', 'Phillip Terry Kingsfather', 'Jimmy C Weaver', 'Ferenc B Szony', 'Alfred G. Neely', 'Virginia Edwards', 'Robert V Dwyer', 'Charles T Goodson', 'Philip O Nolan', 'Howard W Robin', 'O Jean Strickland', 'Andrew Johnson', 'Raymond J Pacini', 'Richard A Hunt', 'Jeffrey P Pino', 'Kevin Boyce', 'Jeffrey L Cook', 'Steven Jay Winter', 'Gerard J Miodus', 'Ian M. Cook', 'Robert J Stanzione', 'John Wallace', 'Stephen B. Ashley', 'David R Emery', 'Raph Koster', 'Burke W Whitman', 'Joseph C Bartolacci', 'James C Burrows', 'Michael E. Dubyak', 'Barton Harold Hill', 'Kevin J. Kennedy', 'Maurice B Tose', 'Steven G Rogers', 'Thomas Donald Brisbin', 'Daniel T Rowe', 'Kevin M Goodwin', 'Donald L Kovach', 'Eric S. Zorn', 'J Eric Pike', 'Michael G Stolarik', 'Richard T Obrien', 'Keith Gollenberg', 'Matthew Schnittman', 'Dean Seavers', 'Michael D Boling', 'Linnet F. Deily', 'Edwin A. McAlpin', 'Stein Kruse', 'Joseph M Truta', 'Howard H Pien', 'Edward H Linde', 'Douglas Brunt', 'Lukas Braunschweiler', 'Simon Cooper', 'Robert L Kanode', 'Linda Beck', 'Charles Deskins', 'Kirk Inglis', 'Michael H Magusiak', 'Julie Smolyansky', 'Bill Gates', 'James K Price', 'Abhijit Y Talwalkar', 'David L Johnson', 'Tony L White', 'Nancy Shachtman', 'Steven C Cooper', 'Dirk Kuyper', 'Steven H Collis', 'Mark D Gessler', 'Thomas R Rosazza', 'A James Dearlove', 'Robert W Chlebek', 'Masaaki Tanaka', 'Antonio Ricardo Machado', 'Richard Dugas Jr.', 'Norman H Asbjornson', 'David L Pontius', 'Charles S. Roberts', 'Bryce L Shriver', 'A Clayton Perfall', 'Peter D Meldrum', 'James J Roberts', 'Kent M. Adams', 'Taylor W Lawrence', 'Scott R Andrews', 'Peter C Wallace', 'Jack B Moore', 'Robert T Brennan', 'Joseph Caffarelli', 'Carl R Christenson', 'Richard A Southworth', 'Kerry J Chauvin', 'Michael V. Schrock', 'Mark Lefanowicz', 'Jarett Levan', 'Abram L. Sachar', 'Edward Rubin', 'David C Bupp', 'Robert B Toth', 'Rohinton Mobed', 'Jeffrey A Liberman', 'David Micek', 'David W Stevens', 'James Dalton', 'Richard A Hubbell', 'Scott C Huebner', 'Richard Banakus', 'Rick Green', 'James P Kane', 'Henry R Thiemann', 'James Wolfensohn', 'William W Traynham', 'Curt Garvin Johnson', 'Donald Bunnell', 'Lief Larson', 'Ronald W Virag', 'John D. Johns', 'Donald C Wood', 'Daniel Bradbury', 'Jeffrey S Olson', 'Myles Brand', 'Kevin Mansell', 'Michael A Lupo', 'Joseph Patrick Bourdeau', 'Brandt Cannici', 'Ronald A Robinson', 'Richard E Jodoin', 'Michael C Keefe', 'Rene Lerer', 'Jonathan Z Cohen', 'Robert Schaddach', 'Michael L Bennett', 'Robert J Keegan', 'Kunio Sano', 'Adam Klein', 'Martin J Emerson', 'R. Bowen Loftin', 'Walter W Bettinger II', 'Steven P. Dussek', 'Alan Gerson', 'Gary Lewis Evans', 'Ronald Steven Jankov', 'Stacey A Simpson', 'Carlos T Blanco', 'Leonard Foxman', 'Dorman Lynn Strahan', 'Robert McNamara', 'Steven Anderson', 'J Brett Harvey', 'Ken P Mcdonald', 'Maureen Chiquet', 'J J Shackleford', 'Jonathan Dickinson', 'Joseph Patrick Lashinsky', 'Mark R Holden', 'Glenn Tilton', 'Dana White', 'Mark A Klein', 'Susan P Guerin', 'James B Ream', 'Michael L Burrow', 'David A Bond', 'William B Kessel', 'Barry Goldstein', 'Douglas M. Baker, Jr', 'Bernard J Duroc-danner', 'Joseph G Caporella', 'Donald Schoenholt', 'Kent Snyder', 'Edward C Nafus', 'Gregg Owen Lehman', 'James P Bryce', 'Mark J Emkjer', 'David S Congdon', 'James L Rowe', 'Scott A Canute', 'D Michael Md Stout', 'Murray D. Martin', 'John H Capobianco', 'Jonathan Judge', 'Andrew Puzder', 'Paul D Meringolo', 'Bart E Hanaway', 'Jae Whan Yoo', 'Charles D Morgan', 'Jim Karayn', 'William A. Hawkins', 'Eugene P Martineau', 'Andrew B Cheney', 'Phil Knight', 'Robert George Culp IV', 'Richard Rosa', 'Jean-Lou Chameau', 'David Bailey', 'Bruce M Greenwald', 'Randall F Eaves', 'Mark Roithmayr', 'James Kevin Abcouwer', 'Bill N. Lacy', 'Frances D. Fergusson', 'James Voelker', 'Gregory M. Spierkel', 'Nelson G Eng', 'Noel J Guillama', 'Paul Cody Phipps', 'Peter J. Robertson', 'David W Michelson', 'Sue Decker', 'Harry Madonna', 'Keith B Cox', 'Robert D Monson', 'William G. Mays', 'Bradley J Kime', 'David A Pazgan', 'Rozanne L. Ridgway', 'Brad Dale Heimann', 'H H Wacaser', 'Miguel Ángel Jiménez Godínez', 'Clark M Kokich', 'Donald E Gibson', 'Alexander R Lupinetti', 'Judson C Green', 'Michael L. Ainslie', 'Brian A Kenney', 'James M Murray', 'Robert B Stephens Jr', 'Mark Weber', 'Jim Famalette', 'Timothy C Adams', 'Edward J Graham', 'Mikhail A Smirnov', 'John Zicker', 'Glen Perry', 'William J Roe', 'Harry Stylli', 'Joseph P Schneider', 'William H Channell Jr', 'Steven R Morgan', 'Michael V Novinski', 'Daniel L Jones', 'Chris Larsen', 'James R. Young', 'Bevin Desmond', 'Fritz Leonhardt', 'Eric Stonestrom', 'Brian McAndrews', 'Michael E Krawitz', 'Galen Weston', 'N.B. Palmer', 'Bradley Kaplan', 'John Waldstein', 'Allan Rakos', 'Kevin C Knightly', 'William D Zollars', 'James J Liguori', 'Shachar Efal', 'Paul J Evanson', 'Blake Augsburger', 'Salomon Sredni', 'James E Sweetnam', 'Robert H Brumley', 'Joe  G Brooks', 'Jay Herratti', 'Clarence M Mcaninch', 'George Schaefer', 'Neil Baimel', 'John R. Ingram', 'Robert Kurz', 'Jal S Jassawalla', 'Jeffrey Gould', 'Kenneth Prewitt', 'Steven R Lewis', 'Michael H Price', 'Joseph M Squeri', 'Robert Lee /ga/ Johnson', 'Brian Savino', 'Lee R Raymond', 'Jacques Tizabi', 'Mayer Gniwisch', 'Donald J Shippar', 'Gary Destefano', 'Loren Miller', 'Arati Prabhakar', 'Jeffery D. Hainline', 'Stephen H Marcus', 'Peter D. Aquino', 'Thomas S Hall', 'William Mitchell', 'Ann L Schmitt', 'James D Rollins III', 'Yvon Pierre Cariou', 'Patrick M Mccarthy', 'Frank Alan Lodzinski', 'Edward M Jamison', 'Steven Marton', 'David L Kennedy', 'Patricia E. Yarrington', 'Steven B Lapin', 'Mark A Marcucci', 'Douglas A. Warner III', 'Douglas C Curling', 'Thomas M Petro', 'Eric Ruskoski', 'Stephen C Farrell', 'Andre Dahan', 'J Mario Molina', 'Richard A Meeusen', 'Joseph E Obrien', 'Robert V A Harra Jr', 'John L Sullivan', 'Fabian T Garcia', 'Steven L Muckley', 'Anita F Larson', 'Joseph J Hagan', 'Terry L Hall', 'Kevin B. Rollins', 'Morten Arntzen', 'John J Haley', 'John E Turner', 'Robert F Baronner Jr', 'Harry N Pefanis', 'Roger H Ballou', 'Scott Boras', 'Thomas Burton', 'John R. Stafford', 'Scott R Perry', 'David F Dougherty', 'Douglas M Hultquist', 'Isaiah Harris Jr', 'Gerald Bisbee Jr', 'W. James Farrell', 'John D. Zeglis', 'Brenda J. Gaines', 'John R Plachetka', 'Michael S Walters', 'Corey Coughlin', 'Daniel J Levangie', 'Peter L Vosotas', 'Stephen G Waldis', 'Rick R Holley', 'Russ Brandon', 'Gary Charles Tolman', 'Ken Koppel', 'Andrew Bennett', 'Brian E Farley', 'Stephen C Young', 'Mark S Sexton', 'James A Sangster', 'Boris Lipkin', 'Lawrence Erik Kurzius', 'Craig L Reingold', 'Raymond J Crotty', 'Danny Joe Coning', 'Scott Rudin', 'Soumitra Sam Sen', 'Bok Arthur De', 'David A Johnson', 'Jan P Updegraff', 'W Russell Scheirman II', 'T Wilson Eglin', 'Stuart A Miller', 'Robert L Montgomery', 'Kevin P Reilly Jr', 'Alfred J Verrecchia', 'James W Lokey', 'Karl Mayr', 'Robert A Agresti', 'David Finney', 'Gordon Ritter', 'Ann Moore', 'Jeff T Clark', 'Arthur George Kallop', 'Neil M Kurtz', 'James G Carlson', 'Joseph C Berenato', 'David B. Ramaker', 'Gilles V J Pajot', 'Gregory D Casciaro', 'Cecil B Pickett', 'Donna Silverman', 'Bruce D Given', 'Gregory E Murphy', 'Peter G Dorau', 'Mac J Slingerlend', 'Warren F Kruger', 'Marc D Beer', 'Dan Bodner', 'Simon Gardner', 'Randa Duncan Williams', 'Stephen G Berman', 'Benjamin P Jenkins III', 'Kathleen G Bradley', 'Frank M Armstrong', 'Robert E Switz', 'James Baum', 'Joseph J Corasanti', 'Leland F Wilson', 'Jon Dybdahl', 'W Steven Wolff', 'George Washington', 'Anthony J Orlando', 'R Chad Dreier', 'Matthew P Dillon', 'James A C Kennedy', 'Brian Corris', 'Steven A Rudnitsky', 'Terry Stepien', 'Leslie Abi-karam', 'Peter K Worley', 'Thomas J. Wilson', 'Gerard L Esposito', 'Michael D Tucci', 'Jehuda Reinharz', 'Julie Howard', 'William L Gipson', 'Eric D Swenson', 'Joseph C Winkler', 'Richard A Nowak', 'Sandra L Derickson', 'Kevin L Barnett', 'Austin Roberts', 'Gerald D Kelfer', 'Mason N Carter', 'Melvil Dewey', 'Joseph H Cromarty', 'David P Reiland', 'E James Ferland', 'Emanuel J Eads', 'Adrian Kantrowitz', 'J T Mcmanus', 'Richard P Smith', 'D Bradley Childers', 'Ronald D Brown', 'Shane D Fleming', 'Marc Chardon', 'Robert E Farr', 'Stanley B Crair', 'Robert C Skinner Jr', 'Al Millar', 'Philip R Martens', 'Ralph A Larossa', 'Craig L Cardwell', 'John Barry Rush', 'Rick A Bowen', 'Richard Garr', 'Robert C White', 'William Barnet III', 'Thai Seng (richard) Tay', 'Lewis Thompson Preston', 'James R Bertelli', 'Paul B Toms Jr', 'James A Buzzard', 'John B Ramil', 'Alexander C Kinzler', 'Gerard J Gallagher', 'Rodolfo O Ploder', 'Stephen A Skaggs', 'Lo Van Gemert', 'Raymond L Brickner III', 'Steven A Lightman', 'Thomas N Hendrickson', 'John J Wetula', 'Lisa B Binder', 'Dave Lemoine', 'Gary D. Forsee', 'Debra A Cafaro', 'George Hossenlopp', 'Michael S Shannon', 'William McKinley', 'R Jarrett Lilien', 'Frank Jerome Tone', 'Craig S Shular', 'Samuel Combs III', 'Daniel Lehrfeld', 'Michael Rice', 'Michael G Cherkasky', 'James E Quinn', 'Peter Schiff', 'Charles O. Holliday', 'C Park Shaper', 'Edward A Hohman', 'Ronald B Geib', 'Robert E Kernan Jr', 'Joseph W Kaufmann', 'Richard K Williams', 'Stephen J. Hemsley', 'Alan P Timmins', 'James C Mullen', 'Michael J. Cushman', 'Mark L Lemond', 'Steven D Runkel', 'Lynn Laverty Elsenhans', 'Demetra M Takes', 'Jose Lynch', 'Jeffrey Silverman', 'Jon Wefald', 'James F Conway III', 'Daniel A Gunther', 'Attilio Petrocelli', 'Shirley Ann Jackson', 'Timothy J Naughton', 'James Roderick Clark', 'Michael F Demane', 'Ronald A Walko', 'Edward Levy', 'Tammy R Adair', 'Mark J Meloy', 'Jeffrey T Benton', 'Robert Panico', 'Noah Samara', 'Herbert Hoover', 'William H Armstrong III', 'Richard T Schumacher', 'Thinh Q Tran', 'Eckhard Pfeiffer', 'David Burpee', 'Jim Cady', 'Boris Elisman', 'Nabeel Gareeb', 'Timothy Carnahan', 'Adam P Briggs', 'Robert G Md Phd Johnson Jr', 'John J Dolan', 'Marc H Hedrick', 'Christopher J Kearney', 'Edward E. Hagenlocker', 'Jan E C Valcke', 'Peter D Kinnear', 'Carla Overberger', 'Robert Rolfson', 'David L Turney', 'M L Dick Heimann', 'Roger L Christensen', 'Charles T Shurstad', 'Henry H Gerkens', 'Jose Armario', 'Jessica M Bibliowicz', 'Michael J Tierney', 'Gary A. Lyons', 'Jack J Dempsey', 'Kimberly B. Davis', 'David Sutherland', 'Brian Mulroney', 'Raj Vattikuti', 'John J Stollenwerk', 'Pierre E Cohade', 'Amir Bassan-Eskenazi', 'Sheldon Carey Fenton', 'Arvind Sodhani', 'W John Stoddart', 'Richard Calder', 'James R Wilcox', 'Neil MacNeil', 'Donita R Koval', 'Neil H Shah', 'Richard Allen Smith', 'Paul L Howes', 'Albert Angrisani', 'Bruce L. Paisner', 'Karl-Heinz Wildmoser', "Leo J. O'Donovan", 'Ronald M Moquist', 'Jonathan Glickman', 'James R Bazet', 'James C Thyen', 'Keshav Murugesh', 'Jeffrey Rubin', 'Dennis P Angner', 'Evan Rifkin', 'Paul W. Ferguson', 'Jeffrey Matthews', 'William C Kolter', 'Natasha Giordano', 'Dean J Mitchell', 'Joseph P Vig', 'Jim W Perry', 'LeRoy Collins', 'Dino A Rossi', 'Deepak Gupta', 'Lewis M Kling', 'James G Cooley', 'Jeffrey K Berg', 'Brian F Grimes', 'Nancy J Stone', 'Ian V Williamson', 'F Scott Kellman', 'William Levis', 'Gregg D Scheller', 'Jeffrey H Buchalter', 'Ross J Centanni', 'Robert D Welding', 'Ajita G Rajendra', 'Adrian Lopez', 'Ralph B Mandell', 'Gerard H Sweeney', 'Daniel Steiner', 'John P Phd Longenecker', 'Premal Shah', 'David A Trice', 'Joe Bob Perkins', 'James F Orr III', 'John F. Smith', 'Timothy J Conway', 'James Leto', 'Kenneth Gregory Yamamoto', 'Scott P Anderson', 'Brian O Casey', 'Joseph A Sipia Jr', 'Timothy Barritt', 'Jeffrey T Mezger', 'Luke Loo', 'David A Remijas', 'Jim Steele', 'James W Lanning', 'Gerald W Deitchle', 'Oscar Feldenkreis', 'Mauricio Ramos', 'Paul Leo Schultz', 'Jeffrey Jacobson', 'Dennis Michael Nouri', 'Alexis Borisy', 'Les C Vinney', 'David Wayne Heeter', 'Gerald J Rubin', 'Richard Joseph Freeland', 'Michelle Peluso', 'Ellen O Ohara', 'Elise Debois', 'Michael J. Fister', 'Patrick J Leonard', 'Ernest Geoffrey Albers', 'Mark L Faupel', 'William S Ayer', 'Jay S Nydick', 'George A. Dickerman', 'Charles R Black', 'Sandy Gerner', 'Peter B Lamontagne', 'R Gregory Brophy', 'Ellen R. Marram', 'Michael V Shustek', 'Gareth Roberts', 'Dennis Mckenna', 'Matt Kibbe', 'Rodolphe Reverchon', 'John F. McDonnell', 'Larry Fessenden', 'Bryan C Gannon', 'Jerry L Starkey', 'Martin J. Sullivan', 'Stuart Essig', 'Roger Fradin', 'Craig Moon', 'Bret W Wise', 'Mark Wortley', 'Fred R Lowe', 'Mark D Timmerman', 'Scott A. McGregor', 'Kim S Fennebresque', 'Stephen F. Bollenbach', 'Howard Graham Buffett', 'Steve R. Carlson', 'Seth Horowitz', 'Chandrasekaran Ramakrishnan', 'Bruce Merino', 'Kenneth E Edge', 'Ralph W Babb Jr', 'Neil Metviner', 'John W Babich', 'Andrew J Littlefair', 'Gary B Smith', 'James R Lines', 'James Robison', 'Kimberly J Mcwaters', 'Nicolas Sarkozy', 'Gary L Wade', 'Vincent R Volpe Jr', 'James Edward Mcgrath', 'Richard Chin', 'Blake W Krueger', 'James Corbett', 'S Craig Lindner', 'Paul Thomas', 'James A Fontaine', 'Michael F Dichristina', 'Donald H Hosmer', 'Karel Van Miert', 'Brent M Giles', 'Fred L Green III', 'Bruce A Thomas', 'Michael Maturo', 'Joshua S Boger', 'Howard B Siegel', 'Thomas Mino', 'W Swope Montgomery Jr', 'William L Mansfield', 'George J Bullwinkel', 'Mark A Schroeder', 'Walter Scott, Jr.', 'Meir Sperling', 'Istvan Kisteleki', 'Kenneth A Miller', 'William Nelligan', 'Mark J Larsen', 'Henry E Blair', 'Michael J Merriman', 'Rolla P Huff', 'Thomas S Wu', 'Joseph D Russell Jr', 'Frank H Merlotti Jr', 'Gerald K Perkel', 'William G Hargett', 'Jack M. Greenberg', 'Kenneth V Huseman', 'Geogre W Trahan', 'Chaslav Radovich', 'Roderick R Baty', 'Paul T Champagne', 'Richard Kirwan', 'Michael Brehm', 'Steve Filipov', 'James K Duff', 'Douglas M Pihl', 'Richard A Anderson', 'Richard Lampen', 'Robert A. Ingram', 'Timothy E Bixby', 'Peter M Scott III', 'William H. Swanson', 'Kenneth T White Jr', 'Hal Raveche', 'Patrick Dempsey', 'Buskirk Robert M Van', 'Charles G Mcclure', 'Thomas K Kittel', 'Jack E Brunson', 'Dunson K Cheng', 'William E Mcknight', 'Errol Ginsberg', 'Guy Starkman', 'Kenneth R Frailey', 'Safi R Bahcall', 'Paula R Singer', 'Antonio Joel San', 'Alain J. P. Belda', 'Douglas A Sabella', 'Stephen V Maroney', 'Susan L. Taylor', 'Selim A Bassoul', 'Michael G Mitchell', 'Edmund P Segner III', 'Raymond R Kubis', 'Patrick Hutchins', 'David Gee', 'C Douglas Spitler', 'John K Welch', 'F. Duane Ackerman', 'Owen Denman', 'John Price', 'Dennis M Reed', 'Charles A Sorrentino', 'Lawrence A. Siebert', 'John F Treanor', 'Mary Sue Coleman', 'Anthony J Vallillo', 'John F. Cassidy', 'Stanislas Vilgrain', 'Craig T Bouchard', 'Mark C Rohr', 'Mark A Ernst', 'Henry Etzkowitz', 'Marc T Giles', 'Thomas P Richards', 'Marshall N Morton', 'Keith Maher', 'Daniel Greenshields', 'Robert F Spoerry', 'Kurt Vanwagenen', 'Judith B. Craven', 'Dorrit J Bern', 'David Sambol', 'Haig Farris', 'Neil J Hennessy', 'Eugene M Carr', 'John Gerard Heindel', 'Matthew S Kaplan', 'Michael L Browne', 'Mark D Bradford', 'Dino Dina', 'Stephen H Mahle', 'Marc Steven Hanover', 'John Wilcox', 'Herbert M Thornton', 'Claire L. Gaudiani', 'Linda McMahon', 'Walter V. Shipley', 'Edward J Fritsch', 'James G Azlein', 'Fred Graziano', 'John W Somerhalder II', 'Crandall Close Bowles', 'Richard M Lerner', 'Robert C Farr', 'Robert Meyers', 'Gregory Rotman', 'Leslie Bernhard', 'Charles Phillips', 'Eugene Jennings', 'George J Vergis', 'Joshua Schulman', 'Steven J. Bensinger', 'Dwight Moore', 'Michael C Linn', 'Remi Barbier', 'Steven C Zola', 'Kurt C Hall', 'James M Howland', 'Bob Barr', 'Lane M Bowen', 'John E Reardon', 'Dan Maydan', 'Paul William Morrisson', 'Laura W Lang', 'James R Aitken', 'James F Miles', 'Jonathan E Michael', 'Roman Kulich', 'Thomas S Rooney Jr', 'Michael A Bradley', 'James M Mccluney', 'Oliver T Carr III', 'Robert W Cremin', 'James Rhyne Killian', 'Richard M. Kovacevich', 'Raymond Vahan Damadian', 'Yiannis Petrides', 'Rodney Kelley', 'Colm John King', 'Mike Selinker', 'John Drake Nichols', 'Antonio M. Reid', 'William K. Reilly', 'Graham Allaway', 'Sheila Widnall', 'Steven Bonenberger', 'Robert M Budd', 'Theodore M Prociv', 'Kimberly J Popovits', 'Brian L. Roberts', 'James W Hunt', 'John M Jacobs', 'Amalia Betanzos', 'Michael J. Dolan', 'Thomas A Breen', 'Terrell G Herring', 'James W Bohlig', 'Kenneth Pitzer', 'William Hunt', 'David J Nasca', 'Theodore Roosevelt', 'Douglas G. Ober', 'Ronald Dicicco', 'Thomas A Neill', 'Robert L Wood', 'Edward Minskoff', 'Ray J Singleton Jr', 'Gene D Lord', 'Michael Gorman', 'Brian Steel', 'Shawn Mohr', 'Charles Maniscalco', 'Daniel Meyer', 'Eric D Chandler', 'Alan W Dakey', 'Alan R Postel', 'Robert L Parker Jr', 'Jack Valenti', 'W Brett White', 'John Yonkin', 'John D. Finnegan', 'Nicholas Landekic', 'Richard M Shepperd', 'Keith A. Meister', 'Rohit Kapoor', "Michelle O'Neill", 'Edward V Lett', 'Frank D Cargould', 'Warren P Levy', 'Martin R Ferron', 'Robert B Sanders', 'Max H Mitchell', 'Charles A Wilcox', 'William C. Cobb', 'Ken Aubrey', 'J Adam Abram', 'Merrill A. Miller, Jr.', 'William A Long', 'John MacLean, Jr.', 'Hans P Schmid', 'Kenneth L Sendelweck', 'Glenn W Novotny', 'James D Rickard', 'Douglas Ernest Brandewie', 'Thomas J Axon', 'Russ M. Strobel', 'Cindy Taylor', 'Jay C Rising', 'Alessio Piccioli', 'Hilmar Hoffmann', 'Jeffrey D Thomas', 'Emile A Battat', 'Una S Ryan', 'Steven M Rauscher', 'Rex W. Tillerson', 'Michael A Creel', 'Brian E Shore', 'Roy M Whitehead', 'Peter J Henseler', 'Dawn Robertson', 'Alan D Gold', 'William L Sanders', 'Phil Plait', 'M Troy Woods', 'James L. Ziemer', 'Paul Bisaro', 'David C. Novak', 'Paul T Hanrahan', 'Sunil Coushik', 'William W Deneau', 'Migdalia Rivera', 'Barton Hedges', 'Michael B Richings', 'John V Talley', 'Victor Viegas', 'Fred J Fowler', 'Steve Borsch', 'Diane M Sullivan', 'Thomas W Seitz', 'John V. Faraci', 'James E Lillie', 'Alan J Levy', 'Luis Beauchamp', 'Anthony James Best', 'Douglas Jakubowski', 'Ralph Alvarez', 'Scot W Melland', 'Michael T Fries', 'Owen Farren', 'Vigdís Finnbogadóttir', 'David L Groen', 'Richard F Latour', 'Anthony Guzzi', 'Jeffrey Stoops', 'William L Brunson Jr', 'E Morgan Skinner Jr', 'Randal J Kirk', 'Colin Baden', 'Scot T Wetzel', 'Jack Fingerhut', 'Stephen R Seiler', 'Douglas Everett Biles', 'Richard K Lauer', 'Con Unerkov', 'John Witherspoon', 'Robert S. Miller', 'Cesar M Garcia', 'John M Mendez', 'Bernard A Hausen', 'Eric Gehl', 'William V Carey', 'Deborah A Vitale', 'Douglas Klinger', 'Roderick H Dillon Jr', 'Robert S Prather Jr', 'Matthew Foster', 'Rick J Bedell', 'Robert E Coffee Jr', 'Scott Christopher Grout', 'William Morris', 'Daniel A Artusi', 'Robert C Warren Jr', 'Carl Rubin', 'Robert J Cera', 'Ronald G Mcabee', 'Hojabr Alimi', 'John D Erickson', 'William J Carden', 'Pierre-Jules Boulanger', 'David E Raven', 'Ashbel Green', 'Lewis T. Williams', 'Steven H Kane', 'Audrey J. Czesak', 'Roland A. Hernandez', 'Scott D Josey', 'Larry Bohn', 'Robert E. R. Huntley', 'Allan R Dennison', 'Brian R Gamache', 'Sarah L Meyerrose', 'Torben V Holm', 'Ulysses S. Grant', 'Michael W Sutherlin', 'Steven C Ackmann', 'Gerald O Hatler', 'John E Davies Jr', 'Nehemia Zucker', 'Tony W Wolfe', 'James M Papada III', 'Theodore F Craver Jr', 'Karl Malden', 'Stewart D Hutcheson', 'John W Mcreynolds', 'James G Mitchell', 'Peter Blackmore', 'Aaron Douglas', 'John W Conway', 'Harinder Dhillon', 'Eduardo Fracasso', 'Robert D Beyer', 'Kenneth H Traub', 'Judith Rodin', 'Gerald Hassell', 'Hugh Grant', 'Robert A Eberle', 'John Drosdick', 'Charles E Dawson', 'Dana Kammersgard', 'James P Keane', 'Mathew D Rosen', 'Abigail Johnson', 'Tanios Viviani', 'Cynthia L Lesher', 'Robert T Vivian', 'Lawrence E Washow', 'Alan B Lefkof', 'James Lakin', 'Gerald Ford', 'David L Barclay', 'David Sandler', 'Daniel K Frierson Jr', 'Bruce Diamond', 'Rosenberg Joseph L Von III', 'Clayton M. Jones', 'Harrison S Campbell', 'Michael A Bremmer', 'Mary McAleese', 'Michael J Gerdin', 'David F Brussard', 'Edward J Oleary', 'Jory A Berson', 'Mark Joseph Gliebe', 'James P Mccaughan', 'Syed B. Ali', 'Michael R Dougherty', 'Peter Waller', 'Thomas J Craney', 'Stephen C Miller', 'David V Singer', 'Jim M Handoush', 'Steven S. Fishman', 'Neal D Crispin', 'Kent G Sr Wyatt', 'Tom Dalgliesh', 'James E Barrett', 'John D Craig', 'Ronald D Paul', 'Henry Strong', 'Robert L Bratzler', 'Louis Raspino', 'Glenn Renwick', 'David L Porges', 'Arthur Viola', 'Leonard I Fluxman', 'Andrew William Higgins', 'Richard J Hipple', 'David B Kaysen', 'Shawn Oconnor', 'Robin J Norris', 'Steve Rowley', 'Nancy Smith', 'William F Falger', 'Michele A Bergerac', 'William E Saxelby', 'James W Wiltz', 'Sandra B Cochran', 'Timothy L Dove', 'Albert V Will', 'Gregory C. Case', 'B Keith Johnson', 'Mehmood Khan', 'David M Jacobstein', 'Richard K. Lochridge', 'Kevin M Rabbitt', 'Randal Lavon Hardy', 'Nobuhiro Suwa', 'Jack B Dunn IV', 'Neil S Novich', 'Leslie Kessler', 'P Scott Conti', 'Michael Y Mcgovern', 'Gregory C King', 'Kenneth F Buechler', 'Robert D Sznewajs', 'Paul Dwight Moody', 'Jack H Webb', 'Matthew W Milne', 'Jay D Miller', 'K Michael Forrest', 'Douglas E Sharp', 'Joseph A Md Sorge', 'Paul Adams', 'Ernest S. Rady', 'Robert L Fornaro', 'Marty E Adams', 'D C Reynolds', 'Shawkat Raslan', 'Randy Scott', 'Jeff Loomans', 'David Ludvigson', 'Seng Stacy Enxing', 'John MacFarlane', 'Chris Ford', 'William F Truscott', 'James Buchanan', 'Jacob Gould Schurman', 'Henry A Jallos', 'John Kluge', 'Herbert A Trucksess III', 'Dennis M Terry', 'Clare Hart', 'Carolyn J Logan', 'Charles Ellet, Jr.', 'Robert J. Bach', 'Richard A. Fennessy', 'John Bowes', 'Nigel Travis', 'Lawrence Chimerine', 'Robert P Barker', 'Byron D. Hewett', 'Joseph Wendell Dyer', 'Mary Ann Tocio', 'Jennie Chin Hansen', 'Keith Barnes', 'Richard G Donnelly', 'Barbara Gayle Duncan', 'Ronald Miller', 'W Gray Hudkins', 'Kenneth W Trawick', 'Robert A Michaels', 'Malon Wilkus', 'Herbert J Moltzan', 'Cyrus K. Holliday', 'Robert B Pollock', 'Craig G Litchfield', 'Simon Todd', 'Rene P Moret', 'Daniel Hamburger', 'Hamilton E James', 'Georges Andre', 'Robert Bigman', 'Kenneth M Riis', 'Arthur Lehrer', 'Donald J. Carty', 'Ronald D Croatti', 'Magnus Rene Nicolin', 'Dunnan D Edell', 'Jerome M Kruszka', 'Francis D Gerace', 'Samuel Finley', 'Scott V Fainor', 'Steven R Garman', 'W David Duckett', 'Richard A Packer', 'Robert B Harris', 'Gary T Steele', 'Ken Czubay', 'Frank J Battafarano', 'Scott A Edmonds', 'Larry Oldham', 'Willing L Biddle', 'James A Mccaslin', 'Craig G Blunden', 'Mitchell Gross', 'Virginia P. Ruesterholz', 'William G Stevens', 'Ronald E Gillum', 'Bryan Burdick', 'Gerard M Anderson', 'Donald Hamaker', 'Craig A. Dubow', 'Mark R Anderson', 'Barry Regenstein', 'Eugene V N Bissell', 'John F. Akers', 'Dennis F. Strigl', 'Chris Fedde', 'Edward E. Whitacre, Jr.', 'Glenn C. Taylor', 'Kevin R Johnson', 'Laurent Gil', 'Michael Madison', 'Paul Galant', 'Collin Cohen', 'Jon E Kramer', 'Paul Pressler', 'Thomas Edward Riley', 'Donald Stevens', 'Thomas B Burton', 'Robert J Hugin', 'Philip K Asherman', 'Mark Vadon', 'Bridget A. Macaskill', 'Benjamin F Mcgraw III', 'Abraham Lincoln', 'Barry W Weiner', 'Jeffrey J Elliott', 'Douglas N Schantz', 'R Kallet Michael', 'Stephen P Griggs', 'Jack Lief', 'Christopher J Pagano', 'David S Boyce', 'Michael Monahan', 'Katz Jeanette Nostra', 'Karen L Zink', 'Edward O Lanphier II', 'David M Abramson', 'Jeffrey R Hotchkiss', 'Franz Maier', 'John Niels Molbeck Jr', 'Robert E Donahue', 'Julie S Gordon', 'Darlene Caamano Loquet', 'John C/ Carson', 'Michael W Dosland', 'John H. Bryan', 'A Roland Thomas', 'John J Sherman', 'James E. Press', 'Robert E Harrison', 'James A Mack', 'Robert G Phillips', 'Frank Slootman', 'Peter Chang', 'Jeffery D Spahr', 'Harris H Simmons', 'Michael W Harlan', 'Richard G Wolford', 'John F Coyne', 'Robert Portman', 'Steven B Schaver', 'Bryan T Labrecque', 'David P Reed', 'Richard K Mcclelland', 'Vincent F Doran', 'Samir G Gibara', 'Robert F Kistinger', 'Shirley Singleton', 'Warren J Spector', 'Bruce A. Jamerson', 'Richard J Alario', 'Samuel Stanhope Smith', 'Marc Maun', 'Raymond Karl Mcdonnell', 'William J Johnson', 'Peter Merrill Dunn', 'Arlene Morris', 'Kenneth William Jr. Defontes', 'David W Joos', 'David R Carlucci', 'John L Armstrong Jr', 'James F Pfeiffer', 'Samuel E Knighton', 'Alberto Begné Guerra', 'David G Ireland', 'Jay Ireland', 'David Green', 'Dawn M Zier', 'Andrew T Hall', 'Daniel E Greenleaf', 'George P. Reeth', 'Kevin G Byrnes', 'Robert L Villanueva', 'Richard H Wollenberg', 'Robert W Dumas', 'Kim D Saunders', 'Lorrie Ann Archibald', 'J David Lombardi', 'Patricia L Moss', 'Reid Tarlton Campbell', 'Douglas G Kiel', 'F William Capp', 'Dan Marriott', 'Don Hawk', 'Alan Steremberg', 'Warren Weiss', 'Mark Penn', 'Merton Corn', 'Greg Patton', 'Mitch Koulouris', 'Philip N Kaplan', 'Michael William Levin', 'Hans von Herwarth', 'Dustin M Shindo', 'Albert J Neupaver', 'C David Robertson', 'Richard M Haddock', 'Jenifer Lyn Osterwalder', 'David Norris', 'Thomas S. Murphy', 'Alexander A Alimanestianu', 'J. Bruce Harreld', 'Ásgeir Ásgeirsson', 'Perry O Brandorff', 'Jacques Mot', 'Christopher T Seaver', 'James D Cochran', 'John Grier Hibben', 'Robert J Palmisano', 'Jerry Baldwin', 'Edward M Pratt', 'Alan W Odgers', 'Stephen P Wilson', 'Greg Gianforte', 'Edward J Ludwig', 'Ashutosh Roy', 'Larry G Dillon', 'Hong Liang Lu', 'Michael Magers', 'Eric S. Raymond', 'Charles E Drimal Jr', 'Donald Kennedy', 'Dan O Dinges', 'John T. Casteen III', 'Ira A Greenstein', 'Richard J Hendrix', 'George L Engelke Jr', 'Lawrence Kenneth Cohen', 'Michael J Koss', 'Bonnie G. Hill', 'John Rohfritch', 'Stephen E Wessel', 'Randall S Battat', 'Gary J Novinskie', 'Karl F Arleth', 'Robert Band', 'Joseph P Beitz', 'Michael R Terlep Jr', 'Jon Strauss', 'Carsten J Reinhardt', 'Richard Bendure', 'Michael B. Mccallister', 'Sarah E Merz', 'Peter Samuelson', 'Michael Wynhoff', 'Mark Meriwether', 'Peter Clarence', 'Arnold Craig', 'Thomas Feldman', 'Eric Clause', 'Harold N Stanton', 'Deepak Chopra', 'Gary Gelman', 'Peggy Fowler', 'Tal Simchony', 'Sean David Mikaelian', 'Michael Zaic', 'David Eslick', 'Timothy P Walbert', 'John D Johnson', 'Stanley Robert Zola', 'David Lilley', 'Mark D Gainer', 'Joseph R Bronson', 'Phillips S Baker Jr', 'Katherine J Harless', 'Gregory K Hinckley', 'Angela Leach', 'James L Hambrick', 'Chris Ward', 'Michael W Coble', 'Mark A Oliver', 'Subhash K Dhar', 'David L Bartlett', 'Steve Sanghi', 'Donald A Sherman', 'Peter Faucetta Jr.', 'Dave Wentz', 'Michael F Rogers', 'Stephen F Angel', 'Keith E Wandell', 'Wade Mayberry', 'Gary L Dreher', 'William J Reuter', 'Russ Whitman', 'Scott M Quist', 'John D Kavazanjian', 'James K Johnson Jr', 'Charles R Jones', 'J David Pierson', 'Arthur F. Ryan', 'Peter Boneparth', 'Vincent A Rossi', 'Salim U Ghauri', 'Vincent T Donnelly', 'David D Mills', 'Jerry L Winchester', 'Fred N Day IV', 'Charles E. Hoffman', 'Lynne Sly', 'Paul H Fischer', 'Randy W Carson', 'Mark C Roland', 'David J Neithercut', 'Ming Li', 'John G Robinson', 'Larry A Goldstone', 'C Hugh Lane Jr', 'Joseph W Craft III', 'Michael R. Chambrello', 'Robert C Skaggs Jr', 'Peter G Humphrey', 'Terry D. Hildestad', 'John Thomas Raisian', 'Robert P Bruno', 'Robert Charles Boucher', 'Gerald Putnam', 'Stewart Zimmerman', 'Anton Rodde', 'Kenneth N May', 'Steven J Oberfeld', 'Dan F Smith', 'James F Young', 'Patrick W Cavanagh', 'Dennis R. Glass', 'Ray Johnson', 'Ramani Ayer', 'Melvyn Knigin', 'Michael B Baughan', 'Arthur E Coles', 'Jeffrey C Mack', 'Michael Mcshane', 'Paul J Plante', 'James D Ferguson', 'Dona Davis Young', 'Michael J Ward', 'John Gutfreund', 'David Berges', 'Christopher A Twomey', 'Charles R. Shoemate', 'George E. Ruebenson', 'David J Peniket', 'James T. Laney', 'David W Trego', 'Shervin Pishevar', 'Michael D Rowsey', 'Bo Liu', 'R Scott Anderson', 'David Julien', 'James W Griffith', 'Jeffery W Yabuki', "Ellin O'Leary", 'Joseph C Hete', 'H Douglas Chaffin', 'William Mariner Greenman', 'Bruce T Imsdahl', 'Thomas A Nardi', 'Pascal E R Girin', 'Steve Bennett', 'Hubert Lacroix', 'David R Ross', 'Joseph R Gromek', 'Paul J Borden', 'Michael Shea', 'Daniel Wayne Rabun', 'Martin F Roper', 'Arthur L Herbst Jr', 'Jean J Croteau', 'Regina Wolfe Anderson', 'Edward G Atsinger III', 'Timothy Kasmoch', 'Keith G Myers', 'Jonathan Scott Russell', 'Mary S. Metz', 'George Paz', 'Stephen S Romaine', 'Steven L Bietz', 'Robert Hagerty', 'James T Ryan', 'John W Fara', 'James J Mermis', 'Laurence Birch', 'David Brown', 'Bruce P Steinberger', 'W Allen Doane Jr', 'Charles Picasso', 'S E Moore', 'Cynthia M. Trudell', "Terry O'Brien", 'Lawrence B Hawkins', "Rodney O'Neal", 'Chiu M Chan', 'Paul Guez', 'Isy Goldwasser', 'W Bibb Lamar Jr', 'Kenneth T Stevens', 'Thomas J Tobin', 'Russel Mcmeekin', 'Brian Crowley', 'William L Morrison', 'Gregory L Summe', 'Manuel A Henriquez', 'Jonathan D Rich', 'Jose Luis Laparte', 'Brian T Beckwith', 'Marc Abraham', 'John M Slusser', 'Brian Quintana', 'Alan H Barry', 'Nathaniel F Bradley IV', 'Stephen R Light', 'Paul Abramowitz', 'Jorge González Torres', 'Robert F Mecredy', 'J Scott Crystal', 'Isaac Newton', 'James M. Kilts', 'Robert Philip Bixby', 'Stephen E Makarewicz', 'Kenneth A Paladino', 'Weston M Hicks', 'David G. Friehling', 'Randall A Wotring', 'Feather Houstoun', 'Rob Cottingham', 'A Thomas Bender', 'Thomas E Mader', 'Stephen M Ohara', 'Thaddeus Dupper', 'Lester M. Crystal', 'R. Sarathkumar', 'Marc Benou', 'Louis Dambrosio', 'Gary L Martin', 'Benjamin A Breier', 'Randy Spurrier', 'Samuel A Landy', 'Andrew D Ory', 'Owen Charlebois', 'Meara Vicki A O', 'Timothy C Gokey', 'Daniel Brdar', 'Gary M Holloway', 'James T Hackett', 'Bernard Briskin', 'Joseph P Campanelli', 'Lyle Jensen', 'Carlos Alberini', 'Patrick Williams', 'Michel Fievez', 'Ray Rodriguez', 'Joseph J. Collins', 'Frank Goehring', 'Robert G Jones', 'William B Moore', 'Kevin M Murai', 'Larry R. Faulkner', 'Timothy C Tuff', 'David M Bradley', 'David D Mandarich', 'Rosemarie B. Greco', 'David William Keaveney', 'William E Nielsen', 'David L Brown', 'Mark A Medford', 'Michael R Sand', 'Robert Simon', 'V Jeffrey Harrell', 'Mark W Jaindl', 'Simmons Georgia Shonk', 'Fred W Brackebusch', 'David Coffin-beach', 'Ben M Brigham', 'Hans Olsen', 'Michael J Blodnick', 'John Irwin', 'Stanhope A Kelly', 'Hugh R Roome', 'Patricia A. Woertz', 'David H Hoster II', 'Thomas M Mcdonough', 'Craig E Labarge', 'Joseph Bellini', 'Kenneth P Manning', 'Joseph John Lydon', 'Jagdeep Singh', 'Carl T Camden', 'Rick Kale', 'William M Cook', 'James L. Dolan', 'T Michael May', 'Jeffrey D Pinneo', 'David D. Smith', 'Jimmy Tallent', 'Cathy A Fleischer', 'Robert C Arzbaecher', 'David S Wichmann', 'Timothy Phd Scott', 'Liza Chasin', 'S P Johnson IV', 'Alexander W. Smith', 'John D Mcmahon', 'Daniel P Katzfey', 'William R. Brody', 'Clifton W Sink', 'Joseph H Shaulson', 'Scott A Carmilani', 'Timothy Vail', 'James W Cornelsen', 'Gary R Leidich', 'Randall D Sampson', 'James V Heim', 'G Allen Weiss', 'Robert W. Best', 'Gary Rodkin', 'Steven D Fredrickson', 'Arthur Barchenko', 'Jeffrey L Schultz', 'Arthur T Sands', 'Ed Feighan', 'Richard J Faleschini', 'Michael J Dee', 'David Re Hale', 'Christie Hefner', 'Bryan Scott Smith', 'John T Day', 'James Currier', 'Andres Gluski', 'Nathan Kahn', 'John Wells', 'Richard Armitage', 'Shawn S Schabel', 'Steven R Bromley', 'Neill Shane O', 'John P Rijos', 'Kevin J Mills', 'Mark A Sirgo', 'Scott T Garrett', 'James W Macintyre IV', 'William J Mullaney', 'Larry L Weyers', 'Paul Chu', 'James Bradbeer Jr.', 'James L Grainer', 'Neilson A Mackay', 'S. ""Sundi"" Sundaresh', 'Carl E Vogel', 'Pamela Anne Fredette', 'Jeff Benck', 'Kriss A Kirchhoff', 'Gary A Kolstad', 'John Brock', 'Joseph A Falsetti', 'Kenneth J Collins', 'Gail S Page', 'Jeffrey P. Bezos', 'Larry E Lee', 'Ferdinand William Grube', 'Zafiris G Zafirelis', 'Nigel Lovett', 'Michael C Cortney', 'David G Morrison', 'John Works', 'Craig H Barratt', 'Charles S Macfarlane', 'Steven A Shaw', 'Mohan Maheswaran', 'S. Decker Anstrom', 'Alan F. Kiepper', 'Jess Roman', 'Kyle L Garst', 'N J Deiuliis', 'Peter J Mcdonald', 'Thomas Kaetzer', 'Kenneth Shoemaker', 'Scott H Pearce', 'George Fazio', 'W Scott Hanle', 'Richard Engelhardt', 'Gregory Edmund Burns', 'Fernando Aguirre', 'Donald T Johnson Jr', 'John Falconetti', 'A Dale Mayo', 'Susan M Lyne', 'Robert A Virtue', 'Mark B Peterson', 'Karen A Puckett', 'Keith Katkin', 'Sal Litrico', 'Jean Paul Modde', 'Clive Kabatznik', 'Hari Pillai', 'Terry Dean Stinson', 'Russell A Childs', 'Robert M Gemmell', 'Peter F Makowiecki', 'Fred Hirschhorn', 'Thomas D Bell Jr', 'H Thomas Bryant', 'David J Vetta', 'Norman S Rich', 'Timothy R Surgenor', 'James R Thompson Jr', 'A C Gallo', 'David Ray Parker', 'Arthur Keeney III', 'Jonathan Lash', 'John Edward Sawyer', 'James T. Prokopanko', 'William Foster', 'Gary G Friedman', 'Rajesh C Md Shrotriya', 'G William Beale', 'Jonathan Clark Crane', 'David K White', 'Henning Kornbrekke', 'Ellen V. Futter', 'Ronald A Durando', 'Dorothy Bullitt', 'Steven L Muellner', 'Stephen Pullin', 'Lee M. Thomas', 'Morgan K Obrien', 'Timothy R Wallace', 'Greg D Forrest', 'John Paul Murphy', 'Daniel J. Evans', 'James E Cashman III', 'Brian Sondey', 'Kevin Buckthorpe', 'Francis Landey Patton', 'John H Jack Cassidy', 'Kevin Burke', 'Douglas H. Mccorkindale', 'Timothy P Bailey', 'David J Aldrich', 'Eduardo A Fortunato', 'Walter C Rakowich', 'Patrick M Montalban', 'Robert D Falese', 'Stephen J Fanning', 'Charles E. Haldeman', 'Richard S Malagodi', 'Charles H Batson', 'Phupinder Gill', 'Ralph Larry Lyons', 'James A Donahue', 'Brian W. Bethers', 'Norman Morales', 'Wallace Lee Nutter', 'Steven Tait', 'Mark E. Sackett', 'Robert L G White', 'Harold M Reed', 'Douglas C Krah', 'Ronald J Evans', 'Frank C Sullivan', 'Alan F Schultz', 'Joan E Herman', 'Earl Lewis', 'Arthur Stark', 'George Fellows', 'Evan F Denner', 'Brian S Olschan', 'David A Wickersham', 'Don Nicholson', 'Mark Thompson', 'Petrus J Barnard', 'Hunter R Hollar', 'Cornelis F Wit', 'John E Celentano', 'Terence A Davis', 'Kirk S. Hachigian', 'Margery W Mayer', 'Thomas Layton', 'Jean R Hale', 'Donald E Meyer', 'Douglas F. Garn', 'Kurt J Hilzinger', 'Richard E. Berendzen', 'Ken May', 'Sandra Lee Henjum', 'Fred H Mermelstein', 'Anthony A Ditonno', 'L Jaimie Pickles', 'Harvey Seslowsky', 'Walter P Patten', 'Richard C. Notebaert', 'Gary R Hedrick', 'Roger C Sims', 'Bernard Mariette', 'Miguel Angel Quinonez', 'Werner F Widmann', 'Duane Desisto', 'David Starr Jordan', 'Mitchell Kahn', 'Donna M Coughey', 'Alan Mulally', 'John W. Snow', 'Michael C. Ruettgers', 'Frank P Gatto', 'Melvin L Keating', 'Deborah M Fretz', 'Lynn Blodgett', 'Norman A Hilgendorf', 'Robert H Schottenstein', 'Mark W Ohlendorf', 'Brian D Garrett', 'Scott E. Carson', 'James Flanigan II', 'Jean-pierre Sommadossi', 'Robert C. Harbicht', 'William Forsyth Sharpe', 'Michael Ocello', 'Willian Michael Miller', 'Rahul Gupta', 'Louis P Scheps', 'Forrest W Robinson', 'Jochen Witte', 'Richard Adam Norwitt', 'Joseph F Oneill', 'Fred L Callon', 'Joanne B Bauer', 'William A Purdy Jr', 'John A Skubina', 'Mark A Yeager', 'Robert M Myers', 'Richard J Jarosinski', 'Christian Itin', 'Mark M Sieczkarek', 'Christopher D Strong', 'Michael Thornton', 'Richard Thornton', 'Daniel R Coker', 'Steven Berns', 'Thomas A. Walsh', 'Michael C Yerington', 'William F Carpenter III', 'Yosef A Maiman', 'James Barr III', 'Patrick Fourteau', 'Teong Lim', 'Robert D Burr', 'A Mark Walter', 'Robert Mccarthy', 'John B Nano', 'Kim D Larsen', 'Joseph Jude Thompson', 'Robert H Young', 'Paul J Diaz', 'Joseph W Carmichael', 'Graham L Clark', 'Robert L G Watson', 'L Stephen Smith', 'Karl B Gemperli', 'Steven R Gardner', 'Irwin Lerner', 'Barry Cinnamon', 'H Anthony Gartshore', 'Fred Wilpon', 'Robert H Gilliam Jr', 'Thomas L Dearden', 'Ronald E Hermance Jr', 'Alexander Y Tokman', 'Randall K Zanatta', 'Janina Pawlowski', 'Rob Blain', 'Martin M Koffel', 'Richard J Roger', 'Oliver G Brewer III', 'Manuel D Medina', 'Geoffrey M Hertel', 'Thomas W Sr Mills', 'Gregory Francis White', 'Carey Kent Williams', 'Ronald J. Halls', 'Sheila Nevins', 'Amit Kumar', 'Stephen C Jumper', 'David Baltimore', 'William E Cheek', 'Steven W Nance', 'Sean M Healey', 'Eric Bloom', 'Mark S Ingram', 'Matthew Jenusaitis', 'Edward J Lawson', 'John H Linville', 'Pamela J Montpelier', 'Joseph R Fox', 'Jonathan Edwards', 'Menderes Akdag', 'Mark Theilken', 'Kenneth D Denman', 'Reed Krakoff', 'James Michael Smith', 'Mark L Feidler', 'Darrell R Wells', 'Edward J Pettinella', 'James R Metzger', 'Carol Meyrowitz', 'Stephen Jay Sills', 'Michael J Wuest', 'Steven H Pruett', 'Robert A Bruggeworth', 'John W Scullion', 'Patricia Fili-Krushel', 'Hilton H Howell Jr', 'Richard H Wills', 'John B Kilroy Jr', 'Jay Gaskill', 'Rober S Sherrard', 'Dunia A Shive', 'Zohrab B Marashlian', 'Dennis Webb', 'Robert Sullivan', 'William D. Johnson', 'H Lawrence Culp Jr', 'Chad Kugler', 'Charles W Stein Jr', 'Ron Martell', 'Charles H Sherwood', 'Glenn E Moyer', 'Robert K Hill', 'Joseph L Griffin', 'Colleen A. Goggins', 'Matthew Rubel', 'Grover Cleveland', 'Fred P. Lampropoulos', 'Hagan William D O', 'Shaw Hong', 'Kenneth M Cohen', 'Anthony G Tegnelia', 'Julian Adams', 'Shaun B Higgins', 'William J Otto', 'Scott Dale', 'Diane Irvine', 'Dev Ittycheria', 'Robert Joseph Johnson', 'Thomas J Hook', 'Christopher J Warmuth', 'Leroy T Carlson Jr', 'David Mitchell', 'Terrence Murray', 'Ralph Schlosstein', 'Merritt Clark', 'Curt Glowacki', 'Solomon Trujillo', 'Henry D. Edelman', 'David R Tanonis', 'Joseph A Carrabba', 'Donald W Slager', 'David P Anastasi', 'Richard L Kalich', 'Raymond W Braun', 'Charles O. Rossotti', 'Joe Miller', 'Neil H. Riordan', 'Samuel James Lawrence', 'D Gordon Strickland', 'Joseph LaMotta', 'Robert H Warrington', 'Ting W. Lu', 'Walter Trappe', 'Vincent D Kelly', 'George H. Fenwick', 'Michael C Mayer', 'August Busch IV', 'Joseph W Wood', 'Brian Michael Heath', 'C Howard Nye', 'Donald Olding Hebb', 'Chris Crupi', 'Thomas S Leisher', 'David N. Watson', 'Jan A Rask', 'Harold R. Cramer', 'G Steven Farris', 'Jack Rhian', 'H. Craig Clark', 'Lewis W. Green', 'Frederec Green', 'Fred H. Langhammer', 'Alan Buckelew', 'H. Patrick Swygert', 'Philip W Milne', 'Richard I Linhart', 'Linda Fayne Levinson', 'Charles Kendall Adams', 'Thomas Muniz', 'John F Fisbeck', 'Peter A Lankau', 'Jack E Brucker', 'Perry Satterlee', 'Christopher D Myers', 'Robert W Weaver', 'David J Bursic', 'J Barnie Beasley', 'Ved Prakash Goyal', 'Elizabeth Boyer Hambrecht', 'Philip A Ljubicich', 'Uli Hoeneß', 'Noah Berkowitz', 'J Scott Sitra', 'Howard A Silver', 'Edward K Christian', 'Quang X. Pham', 'James M Wells III', 'Steven F Tunney', 'George Burr Leonard', 'Lynda Clarizio', 'Timothy J Connolly', 'Dominic Ng', 'Barry S Howe', 'William A Dougherty', 'Gregory T Cortese', 'Randy Kent Ferrell', 'Marianne Ellis Alexander', 'Patrick G Blanchard', 'David A Smith', 'Paul M Cofoni', 'Daniel E Berce', 'Spiros Latsis', 'Ian M Coughlan', 'T Paul Bulmahn', 'Jeffrey B Swartz', 'Steve J Cohen', 'Lee A Kennedy', 'Lois E Quam', 'Robert Forenza', 'George L. Kirkland', 'Mark Weinreb', 'Alan J Bernon', 'Clara Maximilian De', 'Robert W Grubbs', 'Edward A Stern', 'Dennis L Rediker', 'Paul N Clark', 'Albert E Winemiller', 'Mitchell Feiger', 'John S Watts Jr', 'Lloyd Frink', 'Martha B Wyrsch', 'Mark T Hammond', 'Bharat desai', 'Glenn S Lyon', 'Beatrice Yormark', 'Robert E Mellor', 'Jonathan I. Schwartz', 'Steven W Berglund', 'Haig Keledjian', 'Sergio Edelstein', 'James Orcutt', 'Stephen A Hill', 'George W Hamlin IV', 'Mark F Weller', 'James R Thompson III', 'Walter Pw Notter', 'Stanley C Horton', 'William B Timmerman', 'Charlie Ergen', 'Ronald M Faris', 'Donald Thompson', 'Matthew Medeiros', 'Edwin W Hortman Jr', 'Lewis L Bird III', 'Lenox D. Baker, Jr.', 'Michael J Peninger', 'John Lockhart', 'John E Mordock', 'David Farr', 'Andrew W Dorn Jr', 'Stephen D Newlin', 'Erwin Cheldin', 'Edward J. Zore', 'Clark M Mower', 'J Lamont Keen', 'Kenneth S Ehrman', 'R Scott Jones', 'Steven B Tanger', 'Laurie Mcgraw', 'Christopher Scott Ohara', 'Keith E. Busse', 'Greg Griffiths', 'Jeffery R Dunn', 'Clarence H. Smith', 'Lucille J. Cavanaugh', 'Gerald G Woodard', 'John B Suddarth', 'William F Mitchell', 'Jason P Rhode', 'Rhonda Rhyne', 'John C Martin', 'Christopher Oddleifson', 'Thomas L Hoy', 'Mark E Konen', 'Scott Ready', 'Leonard E Moodispaw', 'Gerard J. Arpey', 'John Charles Maddux', 'Antônio Ermírio de Moraes', 'Leigh J Abrams', 'Michael L Chasen', 'Doug P Adams', 'Craig R Smith', 'Todd Oseth', 'James F Roberts', 'Don R Kania', 'Sam L Susser', 'Stephen T Worland', 'David Eric Levitan', 'Peter Loescher', 'Scott Silverstein', 'Millard Drexler', 'Gregory H. Boyce', 'Scott D Stowell', 'M Keith Waddell', 'Garry W Rogerson', 'Linden R Evans', 'William H Shea Jr', 'Shagoury John', 'Brad Ketch', 'Billy F Mitcham Jr', 'Leon O Moulder Jr', 'Joseph Carrizzo', 'William W Davis Jr', 'David Mladen', 'Brant Cryder', 'David T Stoner', 'Stanley A Lybarger', 'John F. Kennedy', 'Peter Stuart Atkinson', 'Jerry D Orler', 'Homi B Patel', 'Jim Musbach', 'Michael Rapino', 'Steve Zhang', 'Charles H. Giancarlo', 'Lon M Bohannon', 'Scott Andrew Caldwell', 'Douglas P Taylor', 'F Justin Strickland', 'John W. Rowe', 'Walter E Robb IV', 'Necip Sayiner', 'James S Pignatelli', 'Alan Spoon', 'Richard Nixon', 'John R Hart', 'James Angus Duncan Smith', 'Joseph Platt', 'Ronald K Page', 'Alberto Anaya', 'Robert I Blum', 'Charles E Bradley Jr', 'Scott R Pancoast', 'Charles F Willis IV', 'Daniel S Jaffee', 'Gabriel Leung', 'Neil Smit', 'Veenendaal Frank Van', 'Joseph M Cummins', 'James P Hackett', 'William J. Lansing', 'David D. Stevens', 'James Burns', 'Jeffrey P Rogers', 'Donald Hamm', 'Randall D Stilley', 'Timothy G Rupert', 'George L Jones', 'David Ashley Miller', 'David G Mazzella', 'Gifford A Dieterle', 'Julio M Quintana', 'Frederic Scheer', 'Scott Morrow', 'William D Endresen', 'Christopher C Harrington', 'Carl J Johnson', 'Joseph C Visconti', 'Jeffrey M Ettinger', 'Randy Falco', 'Miranda Curtis', 'Terry Jones', 'Kurt J Wagner', 'Scott C Thresher', 'William A Shumaker', 'Philip Winston Pillsbury', 'Brandon Lewis', 'George M Mccarroll', 'Doug Lebda', 'William H Wilcox', 'Mark R Thresher', 'George W Dunbar Jr', 'William E. Wade Jr.', 'Anthony J Nocella', 'Humphry Davy', 'C. Hock Leow', 'Thomas J Folliard', 'Michael J Valentino', 'W Moorhead Vermilye', 'James F Kirsch', 'Stephen A Furbacher', 'Stephen Franklin Smith', 'Constance H Lau', 'Robert V Tarantino', 'Paul R Sinsheimer', 'Euan Thomson', 'Hargopal Singh', 'James T Crawford III', 'William R. Spivey', 'Arthur L Shoener', 'Matt Tucker', 'Roger Jeffs', 'David Broecker', 'Don R Wellendorf', 'William C. Steere Jr.', 'Jiang Fengyi', 'Alan B Miller', 'David T Brown', 'Michael D Price', 'M Stephen Hoffmann', 'Craig James Tuttle', 'Clinton Severson', 'Freddy Weller', 'Terrance M. Marks', 'Hollings Renton', 'William F Ruprecht', 'Mark A Jackson', 'Lee A Mcintire', 'Richard J Braun', 'David Nelson Clark', 'Bill Clinton', 'Raymond T Crosier', 'Roger N Farah', 'Michael P Devine', 'J Richard Damron Jr', 'Harvey B Grossblatt', 'Edwin Molina', 'Thomas Furneaux Lennon', 'Ben R Leedle Jr', 'Morris Mitchell', 'Sherman Mckinniss', 'Derrick R Meyer', 'George L Henriques', 'Christy L Shaffer', 'Christopher J Oconnell', 'Michael James Carroll', 'Robert C Turnham Jr', 'Kenneth M Md Borow', 'William R. Johnson', 'J Rock Tonkel Jr', 'Kenneth Stanwood', 'Jonathan E Lim', 'John M Dionisio', 'Bradley A Todd', 'Jeff Zucker', 'Gary C Dunton', 'Dennis Sunshine', 'Frank C. Herringer', 'Kelvin R. Westbrook', 'Sara J. Burns', 'R Reed Harrison', 'Karen N. Horn', 'Johnathan A. Rodgers', 'Al Ross', 'William J Pesce', 'Francis E Capitanio', 'Bryan Keith Bedford', 'Jaime Mateus-tique', 'Steven J Towle', 'Paul Karpowicz', 'Ronald Lindsay', 'J William Blackham III', 'Angel Rodolfo Sales', 'Nathaniel F Hughes', 'Trudy F. Sullivan', 'Mimi Chen', 'Bruno Sidler', 'Paul Mason', 'Sara Mathew', "Edward William O'Flaherty Lynam", 'Brian T Zino', 'Thomas A Young Jr', 'Jake Winebaum', 'Joseph N Jaggers', 'Abraham Aaron Neumann', 'James Ford Bell', 'Anne M. Mulcahy', 'Teresa A. Sullivan', 'Michael D Becker', 'Daniel Jeffrey Moore', 'George Fred Wilkinson', 'Bob Basso', 'Lorna M. Borenstein', 'James C Oshea', 'H. John Riley Jr.', 'James S Quarforth', 'John P Kelley', 'Steven F Bouck', 'Yves Audebert', 'Kevin M Mcmullen', 'Maria Freire', 'Joseph Carleone', 'William A. Osborn', 'Kent Kresa', 'Simon V Freakley', 'James B Kimscy', 'Kristopher J Matula', 'Richard M Feldt', 'Jim Kimsey', 'Chris Brogan', 'Douglas C Mills', 'John Odwyer', 'Anna M Chagnon', 'Mark P Cattini', 'Dong Mingzhu', 'Gerald D Posner', 'Harry D Schulman', 'Ari Bluman', 'Austin M Beutner', 'Leonid Mezhvinsky', 'Harry J Bizios', 'John A Williams', 'John F Daly', 'J Peter Scherer', 'Roy G Krause', 'Raouf S Ghali', 'Richard H Straeter', 'Henry E. Riggs', 'Daniel G Welch', 'John Stuppy', 'Richard Schuster', 'Marty Nealon', 'Lorenzo Tallarigo', 'Stanley T Sigman', 'Edmund D Ludwig', 'Robert Charles Russell', 'R Scott Huennekens', 'David Mcconnaughey', 'Colin South', 'Ronald D Klausner', 'John J Connors', 'Edward A. Mueller', 'George W Haligowski', 'Joseph Alvarado', 'J Michael Winn', 'Margaret L Johnson', 'David A Cerotzke', 'Kenneth T. DeCubellis', 'Robert K Weiler', 'James Oleary', 'Doug Ridley', 'Kenneth Astheimer', 'Ardee D Toppe', 'Ron Strother', 'Catherine Gillis Odelbo', 'John G Curd', 'Scott Greenstein', 'Michael Connell', 'Douglas H Kelsall', 'John Earl Jackson', 'Christopher P Boruff', 'Robert Bradley', 'Daniel P Myers', 'Thomas Godden', 'Garry M Higdem', 'Bill L Purser', 'Larry E Stevenson', 'Franco Plastina', 'Geoffrey S. Mason', 'J Mark Howell', 'Eric Krasnoff', 'Anthony J Conway', 'George M Condos', 'George F Mckenzie', 'J Roger Moyer Jr', 'Timothy E Conver', 'Edward J Oconnor', 'Donald H Picker', 'Arnold G Langbo', 'Van Heyningen Martin Kits', 'Patrick C Botts', 'Julia A. Stewart', 'Chris Mcgovern', 'Paul R Kosters', 'John V. Dolan', 'Peter B Lilly', 'Steven Goldman', 'Gilbert Hovey Grosvenor', 'Willard D Oberton', 'Kenneth J Dover', 'Christopher J. Nassetta', 'James A Thomas', 'Timothy E Hoeksema', 'Gwendolyn S. King', 'William C Lucia', 'Dennis H Nelson', 'Dennis E Mcguire', 'Richard S Sokolov', 'Philippe Benacin', 'David Hung', 'John J Dooner Jr', 'Michael Morhaime', 'Donald S Sr Robbins', 'Ron May', 'Christopher E Herald', 'Robert A Stine', 'John W Nepute', 'Robert Chess', 'Kathy  Player', 'Rick J Mills', 'Brian Concannon', 'Sam K Duncan', 'Charles S Howard', 'Jane Song', 'Carlos M Cardoso', 'Mitchell N Schear', 'William B Kilbride', 'James P Torgerson', 'Patrick Sinks', 'Peter J Ungaro', 'David A Roberts', 'Bahram Akradi', 'Douglas L Young', 'Ralph S. Cunningham', 'Kenneth Stenton', 'Laurie S Silvers', 'Gary D. Tollefson', 'Matthew K. Rose', 'Kenneth E Keiser', 'Matthew P Kinley', 'John F Jastrem', 'Brian L Reach', 'Nance Dicciani', 'Epps William M Van', 'Tom Carson', 'William J Merritt', 'Robert J Mccormick', 'Jong Bart De', 'Bruce G Beasley', 'Alan L Rubino', 'Ed Liddy', 'Theodore Zampetis', 'Michael N Coppola', 'Michael R Gaulke', 'Daniel Abdun-nabi', 'Jen-Hsun Huang', 'James T Huerth', 'Lawrence R Ricciardi', 'Mark W Blodgett', 'Donald Mckenzie', 'Joseph M. Mahady', 'Paul Thompson', 'Nelson J Marchioli', 'Kevin J Kanouff', 'Toney K Adkins', 'Peter J Desilva', 'Ho Ching', 'Thomas E Fox', 'William E Koehler', 'Patrick B Frost', 'Gayla J Delly', 'James C Hagan', 'Neil Geoffrey O', 'David E Long', 'Lloyd H Malchow', 'Dean Goodermote', 'Larry Ciaccia', 'Hellmann Susan D Desmond', 'Lange Ronald J De', 'Charles R Hageboeck', 'Rich Miller', 'Jerry Malec', 'Phillip E Pompa', 'Vicente Anido Jr', 'Jason C Lindsey', 'Alan C Clarke', 'M. Christine Jacobs', 'Gary Sumihiro', 'Philippe Morin', 'Jose Rafael Fernandez', 'Leo Berlinghieri', 'Joe Shoen', 'Vito S Pantilione', 'Daniel Seifer', 'Charles A Schrock', 'Carol T. Christ', 'Stephen M Buente', 'Jacob B Linaberger', 'Michael J Collins', 'John A Sedor', 'Marty Beard', 'Arthur E Reiner', 'Jeffery R Gardner', 'Colin Shaw', 'Ronald Asbury Andrews', 'Gilles Cottier', 'Robert Nardelli', 'Robert Zoellick', 'Robert D Parks', 'Kenneth T. Lamneck', 'Alan B Levan', 'Lawrence T. Borgard', 'J Michael Gearon Jr', 'Stephen W Bershad', 'David B Bell', 'Richard Allen Smith Jr', 'John Keister', 'Nicholas Debenedictis', 'Trevor Turbidy', 'David A Wittwer', 'John S Lewis', 'Henry King Stanford', 'Michael J Mahoney', 'Thomas W Swidarski', 'Ashraf Dahod', 'Paul C Desjourdy', 'Robert E Sandlin', 'Robert Cascella', 'Eric C Fast', 'Christopher F Daniel', 'Christina A Gold', 'Jane Batts', 'George David Woods', 'Larry V Macfarlane', 'Bruce Fairchild Dickson', 'Patrick J Byrne', 'David M Velazquez', 'John W Hayden', 'Miguel A Rivera', 'Gerald Fels', 'Jon R Flickinger', 'Steven E. Zuccarini', 'Kevin R Keating', 'Morgan Gust', 'Charles A Vice', 'Richard Hochhauser', 'Jonathon W Bunker', 'Thomas J. Geraghty', 'Carl Bass', 'F H Merelli', 'Richard D Kincaid', 'Don M Hardison', 'Stacey Snider', 'Keith Olsen', 'Robert F Bloom', 'Charles Edward Johnson', 'Douglas Abel', 'Michael A Baker', 'A Douglas Gilbert', 'G Kenneth Stephens Jr', 'Mark A Weidman', 'James C Brailean', 'Kenneth M Tholan', 'Bennett J Morgan', 'Craig L. Martin', 'Davis Zhang', 'Donald Gayhardt', 'Donna L Decarolis', 'Bruce A Campbell', 'Stanley N Lapidus', 'Edward A Keible Jr', 'Carl A Parks', 'Edward L Machulak', 'Robert Mehrabian', 'Rob Dyrdek', 'Michael R Sapp', 'Leon Botstein', 'James P. Bradley', 'Arthur Rhein', 'Kathleen R Wade', 'Douglas R Jamieson', 'William Joseph Donovan', 'William R. Polk', 'William C Bayless Jr', 'Edward M Rudnic', 'James J Unger', 'Mel G Brekhus', 'Deborah M Ramentol', 'Matthew Lyons', 'Robert Deters', 'John McAdam', 'Peyton R Patterson', 'James C Holly', 'Michael D Heil', 'Kevin M Modany', 'Larry Samuelson', 'James T Healy', 'Richard W Milne Jr', 'Yogendra N Rahangdale', 'J Wayne Merck', 'Jeffrey D Heggedahl', 'Mark Vaughan', 'Henry Kaufman', 'Thomas Mangione', 'Carol D Westfall', 'Markos Kounalakis', 'Curtis L Hage', 'Francis F. Lee', 'Stephen Pennington', 'John Barnard', 'Michael C Crapps', 'Richard C Ill', 'J Brendan Barba', 'Adrian Adams', 'John R Milleson', 'Bradley Sparks', 'James M Powers Jr', 'Carlos Velez', 'Rupert Galliers-pratt', 'Kerry M Frey', 'Matthew Szulik', 'James H Bond', 'Scott C Smith', 'Kenneth W Lowe', 'Steven J Klinger', 'Robert J Capetola', 'Scott G Thompson', 'George Strayton', 'Michael Corvino', 'Sean T Erwin', 'Michael H Head', 'Gregory S Butterfield', 'Kenneth J Lestrange', 'Haig S Bagerdjian', 'Rick Howard', 'David C Skinner', 'Christopher J Munyan', 'Mark J Hall', 'Thomas E Reinckens', 'David M Mcclanahan', 'James V Mazzo', 'John Francis Crowley', 'Gregory N Mahnke', 'Daniel N Swisher Jr', 'Antonio Interno', 'Alan D. Feldman', 'Matthew Kaufman', 'Gary S Olson', 'Carol K Nelson', 'Howard M Pinsley', 'Floyd C Wilson', 'Gerald B. Blouch', 'Thomas T Hawker', 'Ronald A Duncan', 'Daniel J Starck', 'Vincent L Sadusky', 'Walter E. Massey', 'Charles M. Lillis', 'Douglas N Biddle', 'David A Battat', 'Vittorio Favati', 'Diane Greene', 'Alexander M. Cutler', 'Jeffrey J Dailey', 'Stephen Chang', 'Marc Langland', 'Howard A. McLure', 'James A Watt', 'Barry R Sloane', 'Juan Gallardo', 'Jeffrey R Tarr', 'M. Farooq Kathwari', 'John C Smythe', 'Oleg Deripaska', 'Stephen Hong Liang Ooi', 'Stephen M Simes', 'Robert Hayes', 'Bernard Arnault', 'Michael J Salameh', 'Rajesh Navar', 'David Mills', 'Steven P Ely', 'Patrick M Lavelle', 'Paul R Saueracker', 'C Neil Beer', 'Janice Roberts', 'Jeffrey T Hendrickson', 'Elaine K Roberts', 'Patrick J Derueda', 'Timothy B Sease', 'Arthur J Lutschaunig', 'Barry M Sando', 'Laurence M Downes', 'Logan W Kruger', 'Jeffrey S Davis', 'Frank Stanton', 'Peter T Dameris', 'Roger Weisberg', 'James Carnahan', 'Bernt G Iversen II', 'Clarence P. Cazalot Jr.', 'Robert F Gilbane', 'Edward K Aldag Jr', 'Gerald L Armstrong', 'William P Sullivan', 'Michael I. Sovern', 'Per Welinder', 'Paul Wolfowitz', 'James A. Garfield', 'J Clifford Hudson', 'Anthony S Spier', 'Sharon K. Hahs', 'Robert Goldstein', 'Jeffrey F Odonnell', "Mark F. O'Neil", 'Kirk E Arnold', 'William R Hartman', 'John E Bentley', 'James A Edmiston', 'Clifford E Lai', 'Stuart C. Reed', 'Ólafur Ragnar Grímsson', 'David W Dorman', 'Terry J. Lundgren', 'John C. Plant', 'David Crane', 'Arthur L. Kelly', 'William D Felder', 'Lyn G Rupich', 'Stephen A Snider', 'Michael K Campbell', 'Wellington D Jones III', 'Kevin J Hunt', 'John M Stropki', 'Kenneth Dalley, Jr.', 'Michael J Lorion', 'Armando Anido', 'Tim Bowen', 'James Cullen', 'David Krall', 'Robert L Chioini', 'Scott Dodson', 'Elizabeth E Hance', 'N William White', 'Isaac Soibelman', 'John R Greco', 'William R Pollert', 'Jay T Flatley', 'William L. Davis', 'Mikel D Faulkner', 'Anthony J Carasso', 'Charles Bresler', 'Shashank Samant', 'Peter S. Hellman', 'Peter Peng Ostenfeld-rosenthal', 'John J Schiff Jr', 'Sandy Climan', 'Paul Goodman', 'Yue Yang', 'D Keith Oden', 'David Kirchhoff', 'Reatha Clark King', 'Donald M Ervine', 'Brent J Smolik', 'Joseph M Gregory', 'David C. Huether', 'Sherri C Oberg', 'Shaun Mcalmont', 'James K Thompson', 'Joseph R Ficalora', 'David L Nunes', 'Neil D Wilkin Jr', 'Thomas M Glaser', 'Joseph P Caruso', 'Jeffrey M Weiss', 'Randall J Larson', 'Larry Aiello', 'Kye A Abraham', 'W Lance Anderson', 'Timothy G Smith', 'Keith D Horton', 'John G Pasqualetto', 'Jeffrey L Rutherford', 'Charles Fabrikant', 'George R Aylward Jr', 'J Scott Kirby', 'Craig Irwin Deroy', 'F Scott Dueser', 'Robert R. Bennett', 'Charles D Denson', 'Michael D Devlin', 'S Bradford Antle', 'Gideon Argov', 'Karl Frederick Siebrecht', 'Thomas L Ryan', 'Mark W Harding', 'Mark S Weiss', 'Charles P Hadeed', 'Edward R Muller', 'Raul E Kohan', 'William J Wagner', 'Kevin G Forster', 'Eddie L Steiner', 'Luis Maldonado Venegas', 'George W Lemaitre', 'James Truchard', 'Michael J Clementz', 'Scott L Morris', 'Neal E Schmale', 'Ronald Hovsepian', 'Gerald T Mulligan', 'Jerry H Godwin', 'L Patrick Hassey', 'Danny J Windham', 'Robert Puccini', 'Adam J Gutstein', 'Paul G Greig', 'Christopher J Georgakis', 'Brian J. Dunn', 'Helen Rogers Reid', 'Michael J Dubes', 'Christopher K Seglem', 'Blair Naughty', 'Paul B Domorski', 'David A R Dullum', 'Joel Simon', 'H Eric Bolton Jr', 'Samuel F Thomas', 'Eugene R Mccarthy', 'William L Stakelin', 'Edward Russell', 'Robert Butchofsky', 'Eric John Plexman', 'Philip M Pead', 'Joan A Burke', 'Kevin DeNuccio', 'Robert C Grien', 'Michael Mcneil', 'Luke Beatty', 'James F. Albaugh', 'Craig Johnson', 'Michael J Mendes', 'Hansjörg Wyss', 'Warren G. Harding', 'Richard Grossman', 'Robert Sands', 'Robert M Allessio', 'James C Eckert', 'Naren K Gursahaney', 'Greg Dougherty', 'William R Jackson', 'John R Schimkaitis', 'Jack M Rapport', 'Dennis R Wraase', 'Steven V Abramson', 'Richard B Stern', 'Ron B Reber', 'Xiangqian Li', 'Jonathan G Sloane', 'Gary M Rich', 'Ben J Reese', 'Nathan J Jones', 'Charlotte A Zuschlag', 'Ayden R Lee Jr', 'Richard J Dalton', 'Mario Mauri', 'Thomas J Ward', 'Prentis B Tomlinson', 'Michael Clementi', 'Philippe Tartavull', 'William F. Springer', 'Lee, Soon-In', 'Arthur M Coppola', 'Michael J Jacobson', 'Jeffrey P Black', 'Bob Farahi', 'Todd Gillissie', 'Mitchell E Fadel', 'Martin J Geitz', 'Reza Meshgin', 'Sally J. Smith', 'Louis Caldera', 'William H Koster', 'John Fleming', 'Ursula Burns', 'Raymond J Fabius', 'Christopher Kennedy', 'Michael K Liu', 'Richard G Tilghman', 'Fred W. Friendly', 'James C Yardley', 'Scott Grauer', 'A Thomas Hood', 'Glenn S Palmer', 'Alan Kay', 'Robert J Genader', 'Brian M Ohara', 'Glenn Catchpole', 'Otto Kinkeldey', 'Jack L Kopnisky', 'Kenneth F Bernstein', 'Ellyn A. McColgan', 'Joseph A Ripp', 'Michael P Daly', 'Thomas R Sullivan', 'James E Minarik', 'James B Morgan', 'Robert J Currey', 'Alex P Hart', 'Timothy Geithner', 'Chad Reynoldson', 'Jiang Huai Lin', 'Garry Lavold', 'Timothy J Jahnke', 'Pamela M Lopker', 'James D Young', 'Keith A Olsen', 'Robert J Simon II', 'Steven N Bronson', 'Harold W. Dodds', 'Steven A Ellers', 'Philip LeBoutillier', 'Frank E Thomas', 'Paul Richard Ryan', 'David T Pickens', 'David M. Cote', 'Michael A Aviles', 'Stoney M Stubbs Jr', 'Daniel T Anderson', 'Jack W Keller', 'Craig S Miller', 'Joseph Doody', 'Catherine S Dickson', 'W Edward Scheetz', 'Duane W Albro', 'Colin Heffron', 'Albert Lane', 'Millard Fillmore', 'Robert H Dickinson', 'Mark L. Boxer', 'Basil P Prokop', 'Guiseppe Fremder', 'Joseph D Keegan', 'Philip G Heasley', 'Gary Winterhalter', 'Domenico Lepore', 'Russell D Goldsmith', 'Victoria K. Backer', 'David Fisher', 'William S Thomas Jr', 'Morgan W Davis', 'Christopher E Olofson', 'Bruce A. Carbonari', 'Daniel Glassman', 'William S Maxwell', 'Ronald E Tucker', 'Wayne H Calabrese', 'Dennis H Ferro', 'Carolyn J Myers', 'J Morton Davis', 'Miguel Mendez', "David J. O'Reilly", 'J Downey Bridgwater', 'Darrell Webb', 'Jeffrey W Jones', 'Will D Sims', 'Peter Hoetzinger', 'Paul Reep', 'Timothy Warner', 'Robert Youngjohns', 'James L Turner', 'Douglas G Delgrosso', 'David Shea', 'Richard V. Pisarczyk', 'David W Sharp', 'Donald L Ware', 'Jerry Choate', 'Edward C Ashby III', 'Darren Richardson', 'Alexander Lyskovsky', 'Stephen R Crim', 'Stephen E Morgan', 'Morgan Lynch', 'Craig C Spengeman', 'Hans Georg Dr Betz', 'Raymond E Dellerba', 'Jeffrey Staszak', 'Karl S Puehringer', 'Michael J. Baunton', 'Harriet Green', 'Donald Mindiak', 'Brian S Dunn', 'Richard M. Cashin', 'James P Laurito', 'C Dowd Ritter', 'Dwight B Grizzell', 'Mel Kiper, Jr.', 'Barber Conable', 'Dr Barnard', 'Peter Blacklow', 'Timothy A Knight', 'Hyung Soon Lee', 'Peter A. Magowan', 'Brian NeSmith', 'Anthony J Allott', 'Paul Lo', 'Don W. McGeorge', 'Jim Dreher', 'Thomas A Gendron', 'Kenneth Buck', 'Shaun A Burke', 'Mark A Scharmann', 'T Jay Collins', 'Andrew J. Robertson', "Thomas H. O'brien", 'James Owens', 'Anne Marie Moncure', 'Joseph W Turner', 'William W Duncan', 'Theodore Everett Charles', 'John S Christie', 'J. Steven Whisler', 'Gerard H Brandi', 'Mark E Watson III', 'Godfrey Sullivan', 'Stephen N Finger', 'Mark B Dunkerley', 'Robert M Carmichael', 'Daniel J Doyle', 'Mark Lang Grannell', 'Robert R. Glauber', 'Ellen Johnson Sirleaf', 'David W Smith', 'Lauire B Burns', 'Robert L Bugbee', 'Jeffrey Gedmin', 'Michael L Staines', 'Steven Mark Schmidt', 'Robert E Bosworth', 'Stephen M Oksas', 'Glenn A Kleinert', 'H O Woltz III', 'Daniel Abrutyn', 'Robert P Peebler', 'Corey A Chambas', 'David R Lumley', 'C Robert Kidder', 'Marcus New', 'Chris Killingstad', 'Brian M. Baynes', 'John Raymond Murphy', 'Joseph M. Pettit', 'Raymond J Dehont', 'Thomas A. Gales', 'Eric E Parsons', 'Jon S Brumley', 'Paul Thomas Murry', 'Ko Toyoda', 'John B Dicus', 'Philip L Carter', 'Roger D Linquist', 'Gregg J Mollins', 'Charles R. Stamp, Jr.', 'Ian G Cockwell', 'Brian F Coleman', 'Donald J Spence', 'Douglas D Dirks', 'Michael G Spinozzi', 'Michael Greenberg', 'Stephen Sanger', 'Daniel R Feehan', 'Tetsuo Karasawa', 'Phillip A Gobe', 'Garry O Ridge', 'Duncan W Richardson', 'Richard H Anderson', 'Catherine R. Kinney', 'Dion Constandino Joannou', 'Chris Ferguson', 'Raymond P. Davis', 'Gregory E Johnson', 'David P Stockert', 'John H Pinkerton', 'Nassib Chamoun', 'Robert M Amen', 'Stephen C Held', 'Jo Major', 'Stephen P Holmes', 'Bradford J Baker', 'Grant H Beard', 'David C Reglin', 'Gord Boyce', 'James A Litwak', 'Patrick Carman', 'Fred Kornberg', 'Alan Rosenberg', 'Larry Edward Williams', 'Paul Campanelli', 'Timothy E Hawkins', 'Gary E Mccullough', 'Daniel Vasella', 'Glenn W Anderson', 'Murray R. Mcclean', 'John A Zawadzki', 'Joseph Buckelew', 'Lance Rosenzweig', 'R Scott Smith Jr', 'Alex Vaickus', 'Greg A Ward', 'David G Decampli', 'Yulia Tymoshenko', 'Mehran Nia', 'Steve Rattner', 'Michael J. Lotz', 'Ralph W Heim', 'John E Sztykiel', 'Klaus P Besier', 'Thomas W Dickson', 'William F Sr Farber', 'Mark D Ross', 'Philip Lader', 'E Kevin Hrusovsky', 'Mike Mckee', 'John P. Jones III', 'Walter Flake Oakley IV', 'James C. Foster', 'Brian E. Mueller', 'Charles Fallon', 'Allen E Sirkin', 'Yuchun Lee', 'C Keith Swaney', 'Dennis Highby', 'Frederick H Eppinger', 'Stanley D Savage', 'William E Sanford', 'David P Skarie', 'David Lodge', 'Timothy M Yager', 'Lesa Kennedy', 'Patrick Decker', 'William Pastore', 'Ivan Hruska', 'David M Brain', 'Steven C Speak', 'John Paulson', 'Martin A Roenigk', 'Joseph E Lynch', 'Bryan S Wilson', 'Harry Lee Waterfield II', 'Christoph H Westphal', 'Peter Mahrer', 'Steven J Speck', 'Larry Eastland', 'Scott C Petersen', 'Paul T. Stecko', 'Kirk E Sanford', 'Robert W Hagger', 'Jonathan W Ward', 'Robert F Moran', 'Lonnie J Stout II', 'Kenneth D Spires', 'Thomas A Vann', 'Peter H Soderberg', 'Bertrand F Cambou', 'John Couch Adams', 'Sherry S Barrat', 'Michael G Bungert', 'J J Finkelstein', 'Michael Novogratz', 'Jeffrey J Lyash', 'Steven W. King', 'Dean C Graham', 'Christopher Disantis', 'Tom Bartlett', 'Robert A. Reynolds Jr.', 'Morgan Guenther', 'Guoxiang Ni', 'Kenneth D Rardin', 'A. Cohn', 'Thomas Okarma', 'Bruce L A Carter', 'Bryan B Deboer', 'Patrick Odea', 'Kerrii B Anderson', 'George A Bellino', 'Raymond A Jean', 'Michael Rubin', 'George D Green', 'James J Cleary', 'Raymond M Soto', 'J Kerry Clayton', 'Robert E Dubrish', 'Christopher Larsen', 'Robert J Palle Jr', 'Peter J. Schwartz', 'Hans Heigert', 'Hk Desai', 'Asi Lang', 'David R Volz Jr', 'James Z Huang', 'James C Kneale', 'Randy K Fike', 'Michael Racioppi', 'Louis G Lower II', 'Dietmar Martin Wendt', 'Robert W Zapp', 'Glenn Britt', 'Alan Milinazzo', 'David Tx Johnson', 'John S Shiely', 'Benjamin G Brock', 'Kevin J Caponecchi', 'John E Wilkinson', 'Paul Weyrich', 'Richard Paul Buckanavage', 'Bulent Ayhan Berilgen', 'Richard S Warzala', 'Anthony L Havens', 'Jingwei Kang', 'David B Turner', 'Craig C Sturken', 'Charles H Entrekin Jr', 'Rodney I Smith', 'Thomas Gutierrez', 'Jean Cahuzac', 'David A Levin', 'Garis C Smith', 'Robert Wallach', 'Brian K Hutchison', 'Bart C Shuldman', 'Stephen E Pomeroy', 'General Butt Naked', 'Rick L Klingensmith', 'Jeffrey L Turner', 'Roy James Kasmar', 'Gregg Brockway', 'David M Dannov', 'Barry E Davis', 'Felix Jehl Dawson', 'Michael M Magee Jr', 'David Thomson, 3rd Baron Thomson of Fleet', 'Jeffrey A Ludrof', 'Carlos E Aguero', 'V. P. Singh', 'Jane G. Pisano', 'David Keith Johnson', 'James P Breslawski', 'John A. Babcock', 'Kingman Brewster, Jr.', 'Macky Sall', 'Mark V. Hurd', 'William H. Goodwin, Jr.', 'Michael H Lee', 'Gary Pruitt', 'David Chazen', 'Lou Ann Bett', 'Jaime Ardila', 'Robert Waley Cohen', 'Robert S Taubman', 'Rajiv Mathur', 'Timothy W Byrne', 'Drew J Fromkin', 'Thomas P Mcdonough', 'Shoaib Abbasi', 'Mayo A. Shattuck III', 'Vincent James Marino', 'John J. McCloy', 'Keith Fernandez', 'Steven G Anderson', 'William D. Perez', 'Rick Gaetz', 'Scott Robert Widham', 'David B Brewster', 'Marc P Flores', 'Edward G Roth', 'Douglas M Steenland', 'Joseph Laleggia', 'Victor L Richey Jr', 'Paul Mccormick', 'Kevin Conroy', 'James H Richardson', 'Robert E Matthiessen', 'Christopher Zender', 'Susan Clark Johnson', 'Brent F Heffron', 'Steven A Burd', 'Paul J B Murphy III', 'Juergen Eckmann', 'Elden L Smith', 'Curtis R Donnell', 'Gerald B. Zornow', 'Jeffrey Croft', 'John Mclaughlin', 'Ralph Izzo', 'R Herbert Hampton Jr', 'Jeffrey S Frichner', 'Steven J Moskowitz', 'Bruce L. Everette', 'Jeffrey E. Stiefler', 'Bruce Dale', 'Donald Bren', 'Victor T Adamo', 'Jack W Gibson', 'George L Lindemann', 'Krish Panu', 'Paul D. House', 'Phillip A Harris', 'B Grant Yarber', 'Andrew H Madsen', 'J Tyler Haahr', 'James F Brower Jr', 'Lynn Morley Martin', 'Antonio R Alvarez', 'Peter Segall', 'David C Schneider', 'Neill James R O', 'Steven C Quay', 'Robert K Chapman', 'Daniel J Moos', 'Peter R Chase', 'Lawrence D Mason', 'Cami Winikoff', 'James P Giraldin', 'Avtar S Dhillon', 'Michael D Fraizer', 'C Philip Tholen', 'John Heil', 'Kevin J Mcnamara', 'David G Dewalt', 'Patricia McGuire', 'Ron Mcintyre', 'Kevin Odonnell', 'F Quinn Stepan Jr', 'Ron Carey', 'Saeid Rahimian', 'J Christopher Donahue', 'Robert A Lindeman', 'John James Sullivan', 'Mark S Ordan', 'Roland Bonaparte', 'Aaron Burr, Sr.', 'Martha F. Brooks', 'John C Hope III', 'Peter M Allen', 'Per H Levin', 'Philip H Trenary', 'Bevil J Hogg', 'Jonathan W Ayers', 'Ray C Dillon', 'John U Huffman', 'Geoffrey Gamble', 'David T Gibbons', 'R Jeffrey Bailly', 'H W Mckay Belk', 'John H Weiland', 'Jeffrey R Binder', 'Peter R Gebauer', 'Andrew Acheson Barnard', 'Joseph W. Waz Jr.', 'Steven J Bilodeau', 'Denis Hennequin', 'Gregory A Shortell', 'Bradley R Mason', 'Mary H. Bell', 'Tracy Gardner', 'Paul R Kuhn', 'Raymond Victor Marino II', 'Thomas M Slagle', 'Sam Zales', 'David Lifferth', 'Harold W Pote', 'Anthony Sims', 'Mellody Hobson', 'Brian Chambers', 'James M Link', 'Auria Salvatore D', 'Daniel W. Dienst', 'Sheraton Kalouria', 'Mark B. Templeton', 'Charles E Sykes', 'Daniel Messmer', 'Mackey J. McDonald', 'Carl Ake Carlsson', 'Sveinn Björnsson', 'Mark A Mccullough', 'James Mcentee', 'Catherine M Burzik', 'Phil Harrison', 'Michael Hahn', 'Bryan J Zwan', 'Oliver Burckhardt', 'Indra Nooyi', 'James Crown', 'Joseph C Guyaux', 'Charles Scott Greene', 'Trent B Troyer', 'Mary Kay Kaufmann', 'William T Mcghee', 'Zanden David J Vander', 'Victor Tyrone Lam', 'Dale R Pfost', 'Daryl G Byrd', 'Marco Pat De', 'Tony Aquila', 'Eamonn P Hobbs', 'Marc Grodman', 'Steven G Chambers', 'Thomas H Reslewic', 'Kip M Garcia', 'Yen Lee', 'James P Ryan', 'Robert J Deluccia', 'Douglas R Young', 'Robert I. Lipp', 'Gale E. Klappa', 'Richard M Shea', 'Steven Spinner', 'Mark S Dodson', 'Alfred J. Amoroso', 'Charles L Gummer', 'Matthew Shawn Morris', 'Ray Thousand', 'Richard S Lochen Jr', 'Craig A Wheeler', 'Robert Heinemann', 'Jeffrey M Thompson', 'David Aviezer', 'Ronald S Saks', 'Joseph M Harvey', 'Vincent Northfield', 'Wayne T Smith', 'Dominic Frederico', 'V Paul Lee', 'Vladimir Yevtushenkov', 'Robert C Gasser', 'Jo Young Switzer', 'Frank Vitrano', 'Susan Ford Dorsey', 'Donald M. Payne', 'Curtis E Broome', 'Philippe Maystadt', 'Leslie H Cross', 'Thomas M Patrick', 'Neelie Kroes', 'Richard Agree', 'Randolph J Cary Jr', 'Edward W Chaffin', 'Bonnie K Bachar', 'Scott Bergren', 'Bernard L Kravitz', 'Richard Siber', 'Massoud Safavi', 'Stephen A. Gosselin', 'Christopher E French', 'David Saltman', 'A John Knapp Jr', 'Richard P Ekstrand', 'Thomas R Watjen', 'Ronald A Aramini', 'Gerard P Cuddy', 'Tommy A. Moore, Jr.', 'Hamid R Moghadam', 'Robert P Restrepo Jr', 'Thomas Patrick Danaher', 'Jeffrey I Friedman', 'Gregory Brown', 'Marc Nicholas Rohde', 'Gregory Lyle Mckee', 'Daniel E Klimas', 'Christopher C. DeMuth', 'Charles Hilliard', 'Robert P Van Der Merwe', 'Eric W Schrier', 'Richard W Main', 'Robert M Haddock', 'John Roblin', 'Patrick J Keddy', 'Clarence R Porter', 'Robert Joseph Gallagher', 'Daniel B Berry', 'Robert C King', 'Thomas S Swiley', 'David J Drury', 'Walter Theodore Kaczmarek', 'Michael T Dan', 'Randy H Thurman', 'Edward J Quilty', 'Kenneth A Chymiak', 'Heng Chun Ho', 'Andrew P Calerich', 'Roy Banks', 'John D. Gass', 'Keh Shew Lu', 'Michael R Minogue', 'Roger Werner', 'Michael T Rousseau', 'Steven J Malcolm', 'Michael J Pohl', 'Jeffrey E Smith', 'Ellis L Gutshall', 'Peter C Nelson', 'Philip C Wilkinson', 'Shephard W. Hill', 'Philip Christopher', 'Ted Sarandos', 'Raymond E Scott', 'Morris McDonald', 'Walter E Standish III', 'Jeffrey Noddle', 'James McCosh', 'Matthew P Forrester', 'Steven Williams', 'Joey A Jacobs', 'Kenneth Kannappan', 'Walter Owens', 'Joseph Kozak', 'Michael P Gregoire', 'Carlos A Riva', 'Stanley A Askren', 'Neil W Brown', 'Michael L Middleton', 'David Mayfield', 'Alain J Cohen', 'Donald E Brown', 'Eric Henderson', 'Craig F Maier', 'Sewell Trezevant Moore Jr', 'Raymond E Heh', 'Jerry M. Kennelly', 'Peter Thiel', 'David R Greenbaum', 'Avram Glazer', 'Mason W Mclain', 'J Collier Sparks', 'Craig Henderson', 'Bod Boyle', 'A Greig Woodring', 'W Phillip Marcum', 'Daniel Dror', 'Jesse James Garrett', 'Edward B Abrams', 'Mark Donegan', 'James Gustave Speth', 'Joan E. Spero', 'Brian J Farrell', 'William T Jacobson', 'Lawrence J. Blanford', 'Peter Enright', 'James T Huffman', 'Randall L Crawford', 'Douglas M Pasquale', 'Chris Soder', 'John Thode', 'John R Irwin', 'Harlan M. Kent', 'William J Mcmahon', 'Michael Preiner', 'Amiel David', 'Charles B Westling', 'James G Graham', 'Kelvyn H Cullimore Jr', 'Alan/fl Schwartz', 'Richard L. Stanley', 'C Randal Mills', 'Ed Colligan', 'David L Winters', 'Emmett Mcgrath', 'Christopher A Helms', 'Douglas C Wride', 'James A Coggin', 'David P Hess', 'Vernon M Endo', 'Robert D Wachob', 'Thomas S Rogers', 'Viktor Rashnikov', 'Mark E Goldstein', 'Kevin F Mclaughlin', 'Glenn Darden', 'James D Shelton', 'Keith Smith', 'Kenneth M Ferry', 'David T Turner', 'James Mishler', 'Clay B Siegall', 'Calvin Coolidge', 'David Toohey', 'Andrea Jung', 'William W Canfield', 'David P Storch', 'Pascal Blanchard', 'David E Lawrence', 'David J Schulte', 'Ernie Herrman', 'Tilman J Fertitta', 'Sheldon Berkle', 'Steven Rogel', 'Donald Charles Nicholson', 'John E. Pepper, Jr.', 'Leroy Hood', 'Lawrence Scott Schroeder', 'W Richard Roth', 'Leonard A Rosenbaum', 'Elan Moriah', 'James L Wainscott', 'Gary A Corless', 'David J Field', 'Lawrence Odonnell III', 'Paul Schmidman', 'Don P Rodney', 'Paul M Limbert', 'John A Burchett', 'Maria S. Eitel', 'John S Gilbertson', 'Jay Higham', 'Pete Fiore', 'Sam Ferrise', 'Paul L Vogel', 'Jack E Stover', 'Douglas B Hansen', 'Jean Paul Roy', 'Jon P Vrabely', 'Stephen M Elliston', 'Donald J Tomnitz', 'David T Hamamoto', 'Maurice S Reznik', 'Colin W Stewart', 'William M Rusty Rush', 'George Dewitt Drew', 'Terry W Glasgow', 'Lawrence H Fine', 'Vagit Alekperov', 'Mark Mays', 'Lee Shapiro', 'Frederick M. Lawrence', 'Kevin Koch', 'Theodore R Schroeder', 'Ron Williams', 'Bradley D Slye', 'Ronald R Snyder', 'Thurman J Rodgers', 'Robert S Conlee', 'Tony A Jensen', 'Jonathan Miller', 'William E Redmond Jr', 'James Kellogg', 'E Thomas Welch', 'Andrew J Kohut', 'Westley V Thompson', 'Brian Bruce Sullivan', 'Jerry Edward Thompson', 'John Gabbert', 'Roger Ogden', 'Stephen E Morrison', 'Rulon Keaton Neilson', 'Annette Verschuren', 'Keith O Rattie', 'Bryant Isaacs', 'Lindsay Law', 'Charles D Davidson', 'Scott Schaeffer', 'Mark T Mcgrath', 'Gary W Blackie', 'Herbert A Fritch', 'Bradley P Johnson', 'Arthur G Dauber', 'Ronald E Weinberg', 'Michael A. Ricci', 'O R Barham Jr', 'Rogers F Starr', 'C Jeffrey Knittel', 'Michael Tribolet', 'V M Bud Philbrook', 'Edward J Marino', 'David J Anderson', 'Carl Lindner, Jr.', 'Abbott Lawrence Lowell', 'George E Deese', 'Robert F Orlich', 'H Kerr Taylor', 'Harold Turk', 'Jung Chang', 'Adam Bishop', 'Howard B Johnson', 'Gary Meyers', 'Kelly D Conway', 'Greg Turnbull', 'Mark S Shapiro', 'Dennis W Zank', 'Gary A Johnson', 'Don D Jennings', 'Larry H Putnam', 'John L Williams', 'Douglas A. Milroy', 'Timothy N Jones', 'Janet Mills', 'Andy Mattes', 'Katherine Lawther Krill', 'Allen J Carlson', 'Anthony M Bruno Jr', 'Charles E Brymer', 'Carol Wrenn', 'Philip H Kowalczyk', 'Robert A Peiser', 'Ron Lipstein', 'Donald Tresidder', 'G Thomas Graves III', 'Patrick Callan Jr', 'Bradley J Rudman', 'Thomas G Brooker', 'Steven R. Loranger', 'Douglas J. Herberger', 'Thomas H Gray', 'Kenneth M Schwartz', 'Paul Gallagher', 'James F Wright', 'Raymond G Viault', 'Dean Hickman-Smith', 'Robert I Kauffman', 'Chevis Swetman', 'Andrew E Kersey', 'Marka Hansen', 'Gregory N Nelson', 'Douglas A Rogers', 'Michael D. Garrett', 'Mark Newburg', 'Mark S White', 'Louis R. Chênevert', 'John E Panichella', 'Clayton Williams', 'Paul B Dykstra', 'James Beriker', 'James J Landy', 'Bradley M Stevens', 'Mark R Tauscher', 'Brian A Markison', 'Charles Ward', 'Mark R Doede', 'David B Rayburn', 'Frank B Apodaca', 'Steve Tirado', 'Anthony J Navarra', 'R Ernest Waaser', 'Jay Fulcher', 'Hugh Sullivan', 'Louis A Hoch', 'Eugene Meyer', 'Caren L Mason', 'Craig T Davenport', 'Robert F. Goheen', 'Mark Edward Schwarzmann', 'David Eugene Robinson', 'Peter Bojtos', 'F Morgan Gasior', 'James L Francis', 'Cathleen Black', 'Charles M Brown', 'Robert W Zack', 'Seth D Radwell', 'Jeffrey A Curry', 'Scott Drill', 'Robin L Marino', 'Harris E Deloach Jr', 'Martin D Madaus', 'Michael J Kachmer', 'Christopher H Volk', 'Ronald Coppock', 'Terrance G Finley', 'John P Mcdonough', 'William A Mathies', 'Oren Aviv', 'Robert Krebs', 'Anthony G Petrello', 'Suresh J Doshi', 'Chi-Foon Chan', 'R Bruce Stewart', 'Paul Bracher', 'Carlos Slim', 'David Charles Moran', 'Raymond C Kubacki Jr', 'Richard M Ausick', 'Kevin J Lynch', 'Gerald B Shreiber', 'Truman Hunt', 'Leslie Moonves', 'Victor Limongelli', 'Paul J Hegener', 'Wayne A Whitener', 'Daniel Barnathan', 'Louis J. Freeh', 'Babak Habibi', 'Jonathan Parker', 'Ronald F Miller', 'Jeffry  E Sterba', 'Jeff Palmer', 'Jorg W Menten', 'Robert J. Fisher', 'David Levison', 'R. David Yost', 'Florence Knoll', 'Shari Redstone', 'Thomas Lowell Waggoner', 'H Charles Maddy III', 'Thomas Lennon', 'Robert H King', 'Nick Carter', 'Edward L Schwartz', 'Gary E Holdren', 'Edwin F Barker', 'David R Jaffee', 'Montgomery J Bennett', 'Michael L Swenson', 'Donald J Stebbins', 'Wayne Norbitz', 'John H. Hammergren', 'Robert E Beauchamp', 'Robert A Cohan', 'Robert W Cunningham', 'Stephen D. Pryor', 'Eric Brandt', 'Thomas Peterffy', 'Robert Vrij', 'Corinne Lyle', 'Joseph Neubauer', 'Eliodoro Matte', 'Eric Rubin', 'Dimitrios Vassilakis', 'Charles A Ratner', 'Martin A Dietrich', 'Cameron Hitchcock', 'Bradley M. Shuster', 'Rosanne Angel', 'Jeffrey T Gill', 'Richard Roberts', 'Timothy Mcintyre', 'Richard Anthony Cawley', 'David M Mott', 'Bobba Venkatadri', 'Zeshan Muhammedi', 'Eike Batista', 'Andrew N. Liveris', 'Joseph T Clark', 'Louise L. Francesconi', 'Jeffrey L Radke', 'W. Michael Gallatin', 'Sebastian Kurt', 'Haresh R Jaisinghani', 'Imtiaz Sattaur', 'Stephen H Wacknitz', 'James P Clark', 'Steven V Lant', 'Kevin Costello', 'Jeffery H Boyd', 'William D Harvey', 'Bruce D Parker', 'William E Lebaron', 'Kenneth Martindale', 'Gerard E Holthaus', 'Thomas L Tran', 'Bob H. Katz', 'Michael E Wiley', 'Dana M Cluckey', 'Pierre Lamond', 'Gary Enzor', 'Lester M Crudele', 'Thomas M Ohlmacher', 'Erik L Johnsen', 'James Lonergan', 'Lawrence P Ward', 'G Douglas Edwards', 'Joseph R Bellantoni', 'Samuel Davies', 'Ryoji Sakai', 'Ross D Gorman', 'Ellen J. Kullman', 'Jonathan Gasson', 'Maria Klawe', 'Michael O Quinn', 'Neil W. Duffin', 'Efraim Grinberg', 'Joshua Tosteson', 'Bruce David Eskowitz', 'Michael J Schozer', 'Chester A. Huber, Jr.', 'Julian E Whitehurst', 'Arthur W. Coviello, Jr.', 'Pat McQuaid', 'David W Moon', 'Richard Parsons', 'Brian N Priddy', 'Kristján Eldjárn', 'Louis Buther', 'Graham D. Allan', 'Ed Feeney', 'John Douglas Carlson', 'James Hoffmaster', 'Elizabeth Warnock Fernea', 'John O Caezza', 'Charles G Raymond', 'Terrence James Mullen', 'Hosea Ballou II', 'John C Corey', 'Gerald Paul', 'Phillip Wayne Terry', 'T Jack Cahill', 'Robert C Buchanan', 'James S. Tisch', 'John P Amboian', 'Colleen B Brown', 'Patrick Cline', 'Kevin M Kelly', 'Thomas J Baldwin', 'William I Miller', 'David W Scheible', 'Thomas E Plimpton', 'Robert C Loudermilk Jr', 'Gordon Lloyd Ellis', 'Stephen B Morris', 'Frederick M Strader', 'James D Mcgraw', 'William F Hayworth', 'Michael P Glimcher', 'David L Cox', 'Lorenzo Angelo J Di', 'Park Hyeryun Lee', 'James S Marlen', 'Murray S Kessler', 'Mark J Tarr', 'Frank J Mechura', 'Robert J A Irwin', 'Gary L French', 'Gabriel Tirador', 'Liane J Pelletier', 'Sidney W Emery Jr', 'Tom Anderson', 'Brian Burke', 'James R Sulat', 'Joseph C Levesque', 'Robert E James Jr', 'Larry Standing', 'Theodore Friend', 'William I Riker', 'Allen Chao', 'David H Welch', 'Michael D Fisher', 'Kendal E Carson', 'George Tway', 'William P Noglows', 'David L Bere', 'G. Kennedy Thompson', 'Jeffrey Pfeifle', 'Alan J Hyatt', 'Terence J Toth', 'Deirdre Gillespie', 'J Don Brock', 'Martin F Reidy', 'Nina Rowan', 'James S J Manuso', 'Williams Michael Tallett', 'Paul Eibeler', 'Mark A Russell', 'Mark L Weinstein', 'Ferdinand Metz', 'William J Gervais', 'Colin Dyer', 'Tom Linton', 'Asra Rasheed', 'Richard Woolcott', 'Jim Watson', 'David E Bender', 'Stephen M Lacy', 'Richard S. Salant', 'Alan Colowick', 'William W Hunt', 'John C. Bravman', 'Harley A Hughes', 'Jeffrey B Paulsen', 'Kevin D Race', 'Nicholas Murray Butler', 'Alex Rigopulos', 'John Manley', 'Anthony J Alexander', 'H Laurance Fuller', 'Allen L Shiver', 'Montgomery F Moran', 'Larissa Herda', 'Richard A Patek', 'Shailendra Gupta', 'Geoffrey C Waters', 'Gerald L Jensen', 'John Dennehy', 'Francis Cheynell', 'Bartly J Loethen', 'Garland S Tucker III', 'Richard J Dorris', 'Dawn E. Hudson', 'Calvin Wallen III', 'Joseph M Harary', 'Robert G Bohn', 'Robert Chestnov', 'William H Voss', 'Michael C Moldenhauer', 'Robert M Chiste', 'Rajiv Dutta', 'William J Mcgurk', 'Russell William Bendel', 'Andrew Hidalgo', 'Daniel J Hanrahan', 'Widjaja Jiemy', 'Robert Schiller', 'David R Lawson', 'John G. Parker', 'Nancy Walzog', 'John Charman', 'Franklyn G. Jenifer', 'Adriane M Brown', 'John Stransky', 'Scott A Meller', 'Patrick J Reinkemeyer', 'Lawrence R Dickerson', 'Ali Zadeh', 'C R Cloutier', 'F Robert Salerno', 'Dennis R Konczal', 'Richard W Millard', 'James L K Wang', 'Richard C Baylor', 'Richard C Kelly', 'Bret Rattray', 'Frederick C Peters II', 'Jing-shyh S. Su', 'Ken C. Hicks', 'Daniel M Quinn', 'Michael D Gantt', 'Leonard J Sokolow', 'Donald P Segers', 'Ken L Kenworthy Jr', 'Timothy E Guertin', 'Deborah Dunsire', 'Gregory B. Kenny', 'Rick L Catt', 'James Murren', 'Richard J Meelia', 'Kevin S Crutchfield', 'Thomas J Riordan', 'Winkle Hans A Van', 'Sebastien Dufort', 'William J Inman', 'Jiada Hu', 'Barry J Feld', 'Timothy R Snider', 'Frank M Semple', 'Patrick J Balthrop', 'John J Dickson', 'Ronald Reagan', 'Scott Champion', 'Frederick R Hume', 'Jim Lynes', 'Roy O. Disney', 'Michael W Clarke', 'Jay Gellert', 'Antonio M. Perez', 'Stacy Locke', 'Mark R Ruh', 'Richard Blum', 'Jaroslav Kaplan', 'Jerry A Dukes', 'Larry D Zimpleman', 'Randall C Horn', 'Robert J. Stevens', 'Brenda Barnes', 'James P Panek', 'William C. Rhodes III', 'William B Berens', 'Michael J Long', 'Steven A Schmidt', 'Theodore P Schrafft', 'Jerome P Grisko', 'Edward J Rohling', 'Frank Cassidy', 'Michael J Burdiek', 'Ross Klein', 'Jeremiah Fleming', 'James D Merselis', 'Robert S Hargesheimer', 'Dennis E Wheeler', 'Daryl Faulkner', 'J Neal Butler', 'Kieran Gallahue', 'Paul Sowards', 'Michael W Barnes', 'Michael A. Neal', 'James A Wilhelm', 'Paul Ford', 'Douglas A Starrett', 'Eduard A Jaeger', 'Mary G. Puma', 'Sam Shawki', 'Edward E Cohen', 'Martin Richenhagen', 'Peter Larocque', 'Donald H Nikolaus', 'Brad W Godfrey', 'Stephen G Daly', 'Michael Zack', 'Hans R Ganz', 'Herbert L Henkel', 'Gregory J Yurek', 'Louis L Loosbrock', 'William M. Daley', 'Arthur M Coffey', 'Stephen P Marsh', 'M. Duane Nellis', 'Douglas B Mackie', 'David Winter', 'Sigmund L. Cornelius', 'Harvey Gaylord', 'Gerald L Baker', 'Jason DeFillippo', 'John H Griffin Jr', 'Ruth G. Shaw', 'Dinesh C Paliwal', 'Jurgen W K Gromer', 'Robert Rothenberg', 'Patrick G Lepore', 'Robert V Lapenta', 'Raymond Charles Sullivan', 'Lewis B. Campbell', 'Shahed Yousaf', 'Gina Harman', 'Jack C Worthen', 'Robert F Doman', 'Anthony Bonelli', 'Joel D Anderson', 'William Jl Rieflin', 'Jeffrey W Lunsford', 'Sanjay K Jha', 'John T Redmond', 'Levy Gerzberg', 'David C Grigg', 'Timothy W Sullivan', 'Michael L Falcone', 'Peng Chen', 'Phillip Mayberry', 'E J Woodward Jr', 'Gregory L Ballard', 'Brian D Jellison', 'Philip J. Kaplan', 'Gene Musselman', 'Scott T Ford', 'Shai Gozani', 'James A Bogan Jr', 'Frank F Khulusi', 'William F Rountree Jr', 'Robert E Busch', 'Martin Lea', 'John B Douglas Jr', 'J Alan Lindauer', 'John Hagel', 'Ervin Kuczogi', 'R Riggie Ridgeway', 'Scott Barnum', 'Lewis Booth', 'Chaim Lebovits', 'John D Gottwald', 'Donald Macleod', 'Robert Greifeld', 'Paul J Van Der Wansem', 'Richard Olicker', 'Gene Ameduri', 'Gary L Brewer', 'Gene Baur', 'Timothy W Simmons', 'Christopher P Martin', 'Andrew J Hannigan', 'Muriel Fox', 'Etienne Louis Weidemann', 'Thomas J Crawford', 'Norwood H Davis III', 'James W Terry Jr', 'Daniel B Hurwitz', 'Jim D Black', 'Wallace Sterling', 'Randall A. Lipps', 'Marc A Stefanski', 'David M Demshur', 'Charles Eissa', 'Kenneth W Matz', 'Mark J Barrenechea', 'Michael Canning', 'Jean Hugel', 'Kenneth Bate', 'John S. Watson', 'W T Jagodinski', 'Clay W Ewing', 'Robert C Mckee', 'Blenda J. Wilson', 'Calvin W Frese Jr', 'Denis Mcglynn', 'Tim S. Nicholls', 'Eric M Demarco', 'Michael Fonstein', 'David S Seltzer', 'Jean-François Cirelli', 'Raymond F Byrne', 'Ronald Warner', 'Joseph M. Tucci', 'Rahul Singhvi', 'Frank M Deane', 'Sandra B Lawrence', 'Portia Simpson-Miller', 'Mark Brouse', 'Mark A Beemer', 'Cari Tuna', 'Gary A Lillian', 'James S Metcalf', 'Robert A Davidson', 'Nicholas G Lazaris', 'Jon D Kline', 'Steven R Springsteel', 'A D David Mackay', 'Lynn A Brooks', 'N Anthony Coles', 'Edwin M Crawford', 'Christopher T Young', 'James T Taylor', 'Carl L Cohen', 'John G Morikis', 'Nathan Zommer', 'Kent Lindstrom', 'Mark A Radtke', 'R William Petty', 'Dwight D. Eisenhower', 'Richard F. Syron', 'James Gentilcore', 'Douglas Alan Larson', 'Mark E Monroe', 'Donald J Tyson', 'Martin J Welch', 'Rami S Ramadan', 'Robert P. Kelly', 'James L Sr Saner', 'Jennifer L Good', 'Mcneil S. Fiske Jr', 'James D Fabris', 'Susan Decker', 'Rutherford B. Hayes', 'Chuck Mcarthur', 'John Redmond', 'David S. Pottruck', 'Dennis Shogren', 'Mark A Duffell', 'Winthrop W. Aldrich', 'Paul Sagan', 'Smid Michael', 'Robert W Bond', 'Daniel M. Moloney', 'John K Oelslager', 'John E Ahern', 'Laurence S Geller', 'Colin V Reed', 'Stanley C Erck', 'Thomas P Foltz III', 'Michael E Batten', 'Jim W Henderson', 'Bert Vandervelde', 'Peter T Socha', 'Steven G Miller', 'Ronald Buschur', 'Blane Walter', 'Rafael Arrillaga Jr', 'Adam M Goldstein', 'Michele Volpi', 'Glenn Dobbs', 'Kenneth R Berry Jr', 'Jan Bc Spencer', 'Mark J Morrison', 'Jeffrey Alan Mclean', 'Samuel O. Thier', 'Ronald L Long', 'John F Windley', 'Leonel Cota Montaño', 'Larry G Gerdes', 'Timothy L Lafrey', 'Michael Broadhead', 'Daryl G Brewster', 'D Michael Jones', 'Ivan Kaufman', 'David Satcher', 'Patrick Harshman', 'Emma Marcegaglia', 'William Spoelhof', 'Francis J Petro', 'Geoffrey Allan', 'Robert J Larison Jr', 'Michael J Soenen', 'J. C. Fargo', 'Anne M Butler', 'William J Ashley', 'Alexander Trowbridge', 'Bill Conner', 'C John Wilder', 'Carlos Zalduondo', 'Jerry L Ocheltree', 'Isaac T. Tichenor', 'W Scott Mclain', 'Richard L Browdy', 'Paul E Freiman', 'F Edwin Harbach', 'Edward F Heimers Jr', 'Hartley D. Blaha', 'Neil P Defeo', 'Gerald Cook', 'Charles Mclendon', 'Kurt L Darrow', 'Demos Parneros', 'Mindy C Meads', 'Bryan A Pearson', 'André Gillet', 'Neil Friedman', 'Gary Loveman', 'Philip L. Francis', 'David T Taber', 'Lucille S. Salhany', 'Shantanu Narayen', 'Kim A Lopdrup', 'Marcus M Johnson', 'Jo Murciano', 'Michael R Tuttle', 'Irwin M Berman', 'John Dewey', 'James L Ferris', 'Donald Gene Southwell', 'Charles G Burkett', 'Brett Newbold', 'Stewart E Mcclure Jr', 'Michael R Mcelwrath', 'Steven R Champion', 'Michael L Kubacki', 'Stephen Harriman', 'Douglas Stotlar', 'Kay Wagoner', 'Steven E Nielsen', 'Kelly W George', 'Edward Johnson, III', 'Gerald H. Lipkin', 'John L. Higgins', 'Sandra Pautsky', 'Yu Kwai Chong', 'James S Burns', 'Charles Carroll', 'Paul A Ormond', 'Wolfgang Schramm', 'Roger E Gower', 'Neil B Riemer', 'Andrew B Zeinfeld', 'Seth M Wise', 'Robert J Gillette', 'Alfred C. Liggins III', 'Steven Shangold', 'John A Swainson', 'Michael H Tardugno', 'William E Prince', 'Gregory Dukat', 'Peter Merholz', 'James E Alexander', 'Joseph Scalzo', 'Claiborne P Deming', 'Peter I Cittadini', 'William J Flynn', 'Kenneth L. Blanchard', 'Michael L. Iaccarino', 'Katherine Binns', 'Frank R. Martire', 'Van Jones', 'Donna Shalala', 'Henry Ford', 'Kevin B Halter Jr', 'David Vieau', 'Wayne R Holbrook', 'Christopher S Cardell', 'Ralph Mcclelland', 'Matthew A Ouimet', 'Blake W. Nordstrom', 'Michael N Vittorio', 'Martin B Bloch', 'Oprah Winfrey', 'Alan Schwartz', 'Eric J Foss', 'Michael I German', 'John H Short', 'Ronald L Hoffman', 'Kent Guichard', 'Charles M Sprock', 'Jon C. Jones', 'Michael Love', 'Dean Douglas', 'David M. Ratcliffe', 'F R Saunders Jr', 'Michael Wood-Lewis', 'James G. Kaiser', 'David Hoberman', 'James R Gibbs', 'Robert J Myers', 'Michael D. Fascitelli', 'Lawrence Summers', 'Johnny Schillereff', 'Shaun Holliday', 'Haynes B Smith', 'Gelu Voicu', 'Peter W Nauert', 'Charles V. Burnett', 'Terry Martin Koch', 'Charles P Dougherty', 'John R Garbarino', 'Eugene Robert Black', 'James W Green', 'B Francis Saul III', 'J Gerald Bazewicz', 'Jutta Limbach', 'Robert Martin Rogers', 'W Thomas Reeves', 'Curtis J Clawson', 'Kevin C Eichner', 'Joseph Banks', 'William J Colombo', 'John A Kraeutler', 'Rami Abada', 'Burton J Kunik', 'David A Lowenberg', 'PAUL W JONES', 'Howard W Schwan', 'Constantin Ticu Dumitrescu', 'Mark S Glasnapp', 'Richard Schneider', 'Joseph S Steinberg', 'Curt Hecker', 'David A Zapico', 'James C Edenfield', 'David J Lubar', 'Edwin Catmull', 'Jack A Hockema', 'Randall P Marx', 'Paul D Geraghty', 'Russell Huffer', 'David P Sproat', 'David G Tacelli', 'Steven R Altman', 'Robert G Blatz', 'Robert I Tepper', 'Michael Chender', 'Lyn St. James', 'John D. Macomber', 'John J Brennan', 'Hugh Monk John Jr', 'Robert B. Pamplin', 'Daniel P Son', 'Keith E Alessi', 'Lawrence A Mastrovich', 'Kenneth B Gilman', 'Walter Page Ogden', 'Keith Valentine', 'James W Bernau', 'D. Kenneth Baker', 'James B Hersch', 'Robin Stout', 'Edward A Glickman', 'Jeffrey A Joerres', 'Frank B Holding Jr', 'Palma Vincent De', 'Christopher G Clement', 'Wayne R Lieberman', 'James Scott Neish', 'Roy J. Bostock', 'Thomas Braxton King', 'Mariano Costamagna', 'John E. Rooney', 'John H Dow', 'Joel F Gemunder', 'Peter Chernin', 'John R Byers', 'Eric Hippeau', 'Wendy Simpson', 'Hans Sloane', 'James William Davis', 'Arthur Przybyl', 'Michael A J Farrell', 'Peter W May', 'Shawn Lowry', 'Robert F Birch', 'Dennis J Addis', 'Fred W Warnaars', 'John L Flavin', 'John J Oros', 'Pablo Lagos', 'Arnold B Zetcher', 'Robert W Daigle', 'Bob Iger', 'Gregory L Henslee', 'Robert Sandie', 'Dee Allsop', 'Renato A Dipentima', 'Marvin Gleicher', 'Yaron Tchwella', 'Andrew R. Brown', 'Michael Mcmullan', 'Hooshmand Kambiz', 'Elbert C Simpson', 'Jon E Bortz', 'Daniel M Delen', 'Roger C Hochschild', 'Edward Zander', 'Albert P Blank', 'Michael J Sonnenfeld', 'Travis Lee Provow', 'James A Merritt', 'Lawrence D Bain', 'Bruce Campbell Smith', 'Donald M. Casey', 'Brett Moyer', 'Kenneth P Cherven', 'Elizabeth Kirscher', 'Michael Zinderman', 'C Steven Sjogren', 'Edward Fadel', 'Dean Jernigan', 'James Lawrence Fares', 'James A Hamilton', 'William H Mcmunn', 'Abdul Aziz Al Ghurair', 'Mike Welch', 'Steven G Bunger', 'Matt Coffin', 'Bradley S Shepherd', 'Franck J Moison', 'Nestor Cano', 'Robert A. Niblock', 'Richard E Rudman', 'E Michael Thoben', 'Kenneth R Vaught', 'Thomas J Howatt', 'David J. Lesar', 'Thomas W Farley', 'Jack D Michaels', 'Frank H Laukien', 'Glenn M Alger', 'Richard G Spencer', 'Frank J Fradella', 'Todd Jennings Palmaer', 'Lyle E Ryan', 'Ostenbridge Paul Van', 'Thomas M. Prescott', 'Stanley Schloz', 'Ólafur Jóhann Ólafsson', 'Gregg W. Steinhafel', 'Masaya Matsuura', 'Joseph Theodore Kingsley III', 'Eitan Gertel', 'Wo Hing Li', 'Rich Shapero', 'Michael A Martino', 'Margaret G Mcglynn', 'Simon B Moss', 'Thomas Joseph Stultz', 'Scott C Mason', 'Donald Barnes', 'David L Richter', 'Michael W Brennan', 'A Laurence Jones', 'Thomas L Gough', 'Steve Vining', 'William P Utt', 'Robert H Saunders Jr', 'Michael S Gilliland', 'Paul E Hassler', 'John H. Marmaduke', 'T Hale Johnston', 'Henri A. Termeer', 'Thomas Patrick Reeves', 'Randall Cope', 'Kirk Schulz', 'Timothy J Landon', 'Keith S Walters', 'Dennis Kogod', 'Roberto Perez', 'Michael Balmuth', 'Donald D Redfearn', 'Joseph Feldschuh', 'Robert J Phillippy', 'Neil Portnow', 'David A Widlak', 'Randall E Black', 'Alec C. Covington', 'F Joe Loughrey', 'Kevin P Connors', 'John M Kelley', 'Henry Blodget', 'Harry Herington', 'Peter A Mcclennen', 'William E Schneider', 'Kenneth K Yeung', 'Harry S. Truman', 'Thomas H Zajac', 'Scott Timothy Obrien', 'Peter Kosann', 'Ken Roessler', 'James Randall Dixon', 'James J Peterson', 'Judy McGrath', 'Charles J Viater', 'William H Downey', 'Stephen J Rotella', 'Kenneth O Saito', 'Michael L Gibson', 'Joshua Setton', 'Thomas L Massie', 'Michael Crawford', 'James A Bianco', 'Peter J L Bradford', 'Susan Hockfield', 'Ronald R Green', 'John C Kornegay', 'Adam H Schechter', 'George W Off', 'Neil M Koehler', 'Robert C Jr. Berry', 'Kevin B Marsh', 'William H Mcgill Jr', 'Harry A Goussetis', 'Low Ray', 'Iain Mackenzie', 'Michael J Coyle', 'James Lawrence Martin', 'Steven Laub', 'John C. Lechleiter', 'Robert David Russell', 'Anne Sweeney', 'Garold R Base', 'John Cameron Coburn', 'Val Ackerman', 'Francisco Dsouza', 'James A Fine Jr', 'Daniel R Dimicco', 'Diane L Munson', 'Gary Jacobs', 'Michael D Burger', 'Linda Hanson', 'Dan L. Duncan', 'Richmond D Mckinnish', 'David Black', 'Kevin P Omeara', 'Roy V Armes', 'Jeffrey A Jacobs', 'Bradley Ellis', 'Paul L Foster', 'J Dann Adams', 'Ray R. Irani', 'Lawrence Finn', 'Kenneth A Joyce', 'Robert P Herre', 'Sylvan J Dlesk', 'Paul S Giordano', 'Robert Everett', 'C Gregory Harper', 'David L Jannetta', 'Paul Michael Scanlan', 'Gregory D Wasson', 'Clarence J Hopf Jr', 'Mark S Newman', 'Kevin M King', 'Daniel P Hann', 'James Lewis', 'Gary J Beisler', 'Paul J Reckwerdt', 'Thomas W Warsop III', 'Robert Gates', 'Cameron Mackintosh', 'James J Volker', 'Timothy D Gonigam', 'John E Ritacco', 'Linda A. Lang', 'Paul J Tobin', 'Seth E. Schofield', 'Trevor Fetter', 'Craig R. Barrett', 'Donat  A Fournier', 'Timothy J Cope', 'Robert P Hickey', 'Troy A Kanter', 'Matthew M Oconnell', 'Timothy R Toppen', 'Stuart J Clark', 'Joseph Pacifico', 'Philippe Dauman', 'S James Wrigley', 'Carthy Liam Mc', 'Thomas J Mcevoy', 'William M Fairl', 'Richard Murray IV', 'Charles D Mccrary', 'Michael Miles', 'James L Robo', 'Randall L Marcuson', 'John P Kelly', 'Bobby J Griffin', 'Connor David J O', 'Doron Reuveni', 'Eric H Brunngraber', 'Kenneth Klein', 'Thomas Francis Shields', 'Harold Hume', 'Beverly Daniel Tatum', 'Jeffrey S Osman', 'John M Omeara', 'Gregory Probert', 'Thomas P Smith', 'Glenn R Weinkoop', 'Joseph Ueberroth', 'Raymond D Zinn', 'Stephen P Reynolds', 'Richard R. Yuse', 'Paul R Garcia', 'Hadi Partovi', 'Robert C Strauss', 'Mark E Jagiela', 'Stephen M. Cassiani', 'Eugene Kohn', 'Lauren P Stanich', 'Thomas A Cook', 'William W Phillips', 'Ari Bousbib', 'John Freeland', 'John Raymond Elliott', 'Samuel C Scott III', 'W Wayne Hardin', 'C Richard Harrison', 'Marc Tessier-Lavigne', 'Daniel Ortega', 'Alden W. Clausen', 'Kris Krug', 'John Elms', 'William E Crow', 'Eric Lerner', 'Robert F Shuford', 'John A Kite', 'John J. Mack', 'Desirée Rogers', 'Lloyd Lynford', 'Leslie J Jezuit', 'Marc Schnitzer', 'Jeff Jarvis', 'Gerald T Proehl', 'Ken Brizel', 'George C Platt', 'Ron Devillier', 'Charles Moorman', 'Randolph L Marten', 'Michael Tiemann', 'Herbert J Zarkin', 'R Roderick Porter', 'Joseph R Kandle', 'Andrew Makrides', 'Frank Wicks', 'Mikhail Prokhorov', 'Kenneth L Keymer', 'Owen J Onsum', 'James E Rogers', 'Michael Leonard Boguski', 'G Gary Yetman', 'Michael D. Capellas', 'Lorettta M Itri', 'Douglas E Ellis', 'Jon Kirchner', 'George C Freeman III', 'James E Brown', 'John E Aschenbrenner', 'Thomas Nickerson', 'David R. Goode', 'Zanne Devine', 'Brayton C. Ives', 'Warren Bryant', 'Michael T Willis', 'Andrew M Smith', 'Vijay B Samant', 'Joseph Boshart', 'Claude E Davis', 'Robert  Derodes', 'Fumihiro Kozato', 'Charles Liang', 'Choon T. Chon', 'William M Adams', 'Stephen G Hanks', 'Surya N Mohapatra', 'Tim Moriarty', 'Franklin D. Roosevelt', 'Maria F Dwyer', 'Mary Lou Fiala', 'Max A Coon', 'Solomon Steiner', 'Jerry A. Grundhofer', 'Raymond F Laubenthal', 'Ben Ivy', 'August Busch III', 'John Birbeck', 'Roberta Lipson', 'Robert J Glickman', 'Jimmy C Houlditch', 'Richard K Templeton', 'Seth Grae', 'Charlie Nooney', 'Dan Moffat', 'Craig W Rauchle', 'Fred M Sturm', 'Scott B Laver', 'Klaus-Dieter Lehmann', 'Bill Venners', 'Gail D. Fosler', 'Frank M Jaehnert', 'James A Mitarotonda', 'William Glenwood Dorey', 'Ralph Quinsey', 'Viktor Vekselberg', 'Peter Wang', 'Lawrence F. Probst III', 'G Kent Plunkett', 'Dieter P Schilling', 'C. Mikael Berner', 'Gary T Jolliffe', 'Ruben S Martin', 'Peter R. Huntsman', 'Kenneth D Regan', 'Robert W Kurtz', 'Kevin T Kabat', 'Thomas C Oconnor', 'Joseph W Mcclanathan', 'Stefan Oschmann', 'Rangnath Salgame', 'Jeffrey Frank', 'Albert E Whitehead', 'Edward J Wehmer', 'George Mcquain', 'Robert L Antin', 'George A Scangos', 'Jamie Thomas', 'Eugene I Lee Jr', 'Mukesh Ambani', 'T Ritson Ferguson', 'Thomas A. Schatz', 'Michael D Stern', 'WILLIAM W SMITH JR', 'Kathleen Danenberg', 'William R Thomas', 'James S Furash', 'Michael John Hoffman', 'Kumarakulasingam Suriyakumar', 'John R. Torell III', 'Allen Salmasi', 'Richard M Hassett', 'Joseph Lovett', 'John R Dennis', 'Jai Nagarkatti', 'Robert Stephen Merritt', 'John R. Brazil', 'David W Beck Jr', 'James F Warsaw', 'John J Dr Mcgrath', 'Robert B Barnhill Jr', 'Nicholas Daniel Gerber', 'Gordon Hunter', 'Joseph J Raymond', 'Kennett F Burnes', 'David W Keiser', 'John W Florsheim', 'Lisa Holton', 'John B Williamson III', 'Jeffrey A Shepard', 'Randall M Griffin', 'Peter L Briger Jr', 'Michael Kibler', 'Robert Mason', 'Robert Taub', 'George M. C. Fisher', 'Jan Van Dokkum', 'Keith Monda', 'Edward D Ariail', 'J S B Jenkins', 'Raymond Royer', 'Robert J Lawless', 'Mark Erickson', 'Hjalmar Schacht', 'Charles E Brown', 'Caroline J Ellspermann', 'Carl A Siebel', 'Bruce H Vincent', 'Michael T Vesey', 'M Grier Eliasek', 'Joseph M Holsten', 'Sudhakar Kesavan', 'Eduardo Quinones', 'Vernon R Loucks Jr', 'William P Hankowsky', 'Gary D Henley', 'J Claude Bennett', 'Lawrence T. Babbio, Jr.', 'Ryan Corley', 'Robert A Coleman', 'Charles P Pizzi', 'J Russell Porter', 'Timothy M Hinkley', 'Elizabeth A Smith', 'Louis Joseph Rampino', 'Jack E Davis', 'Wayne T Hockmeyer', 'Barry L. Williams', 'Antony Koblish', 'David Lerner', 'James F Pitts', 'Robert E. Joyce Jr.', 'John Calamos', 'Douglas J Shaw', 'Calvin D Regan', 'Cathy L Mccarthy', 'Jimmy Carter', 'Rob Gierkink', 'Douglas A Michels', 'Skip Williamson', 'Meyer Feldberg', 'Brian Jg Pereira', 'Diane S Goostree', 'Forrest E Wylie', 'Charles H Cotros', 'William P. Lauder', 'Darryl K Thomas', 'John R Fielder', 'Santanu Dr Das', 'David J Paterson', 'Barry H Golsen', 'Kevin Weiss', 'Joel Patrick Sens', 'Woodrow Wilson', 'Scott E Schwerdt', 'Franklin Pierce', 'Stanley Cruitt', 'G Anthony Busseni', 'F Micheal Ball', 'Daniel T Hendrix', 'Robert S Cubbin', 'David H Lohr', 'Frank D. Trestman', 'George E Persky', 'George Rohan St', 'Michael F Buckley', 'Thomas S. Johnson', 'Norman J. Grossfeld', 'Richard A. Miller', 'Jessica Mathews', 'George H. W. Bush', 'Catherine David', 'Jerald Fishman', 'S Scott Crump', 'Ronald L Rudy', 'Jeffrey A Graves', 'Victor P Stabio', 'Ken Powell', 'James J Maguire Jr', 'Daniel L Krieger', 'Michael Mark Mooney', 'Anthony J Buccina', 'James A Hughes', 'Adolphus B Baker', 'William V Hickey', 'Kanji Sakae', 'C1', 'Scott R Ward', 'David M Quezada', 'John Shillingford', 'J Michael Walsh', 'Jack Abramov', 'Gordon A Ulsh', 'Richard K Smucker', 'David P King', 'Richard Fairbank', 'Craig E Paylor', 'Paul Naude', 'Sean Mills', 'Kevin Kreisler', 'Albert Chao', 'James Craigie', 'Jacob Dadon', 'Stephen A Burch', 'Douglas K Beplate', 'Joseph L Harley Jr', 'Steve L Feurt', 'Alex Dillard', 'Ray D Reaves', 'David Liu', 'Steve Hearn', 'Jeffrey S Gorman', 'Frederick H Waddell', 'John D Ferguson', 'George B. Kaiser', 'Marshall J Campbell', 'Keith D Jackson', 'Arnoldo Alemán', 'Paasschen Frits D Van', 'Richard E Bagley', 'Harvey Louis Weiss', 'John L Walsh', 'Sebastian Bishop', 'Robert Sarver', 'Constantine Iordanou', 'Robert J Dougherty Jr', 'Kevin J Ohara', 'Tom Kubota', 'Tony L Wormington', 'P Schaefer Price', 'Ken Schwarz', 'Bradley C Albrechtsen', 'Richard D Odell', 'Peter E Raskind', 'Brian K Moore', 'John C Helmken II', 'James C Petty', 'Joseph L Welch', 'Dean A Foate', 'Doyle C Weeks', 'Randolph C Steer', 'Sherrian Gunn', 'Roy E Jewell', 'Hugh Miller', 'James P Rogers', 'Stanley T Crooke', 'Jacqueline A Dedo', 'Byron L Bergren', 'Jacques Fernand Cornet', 'William C Dennis', 'Andre Calantzopoulos', 'Peter A Darbee', 'William Kim Wah Tan', 'Jeffrey L Richmond', 'Rodolphe Hottinger', 'Anthony S. Tricoli', 'Walter C Herlihy', 'Robert W. Woodruff', 'William  T Bromage', 'Harold McGraw III', 'Greg Kalush', 'Michael W. Laphen', 'Lawrence Stumbaugh', 'H Averett Walker', 'Ronald H Braam', 'F Lynn Blystone', 'Terence D Wall', 'Grover L. Sheldon, Jr', 'Todd H Steele', 'Richard Wall Lyman', 'Michael F Brigham', 'Stephen J Gurgovits', 'Dilek Samil', 'Robb Chase', 'N William Jasper Jr', 'Michael E Campbell', 'Tony Smith', 'James Dewey Kelly', 'B Chuck Anderson', 'Henry L Curtis', 'Salvatore J Miraglia Jr', 'Robert D Burke', 'Gary C Butler', 'Ted F Wise', 'Jeffrey Housenbold', 'Richard C Adkerson', 'Kevin C Quinn', 'Michael T Vea', 'Robert J. Darnall', 'Steven M Skow', 'Michael G. Morris', 'Scott J Branch', 'Thomas Mika', 'David M. Bloom', 'Dennis M Diflorio', 'Safra A. Catz', 'Steven B Nichols', 'John R Golliher', 'David Manougian', 'Charles K. Gifford', 'Robert Hirshon', 'Douglas L Foshee', 'Charles F Howell', 'Christopher C Bergen', 'Charles W Shivery', 'John M Boushy', 'Craig R Johnson', 'Mark F Mulhern', 'Scott Dockter'}
            Answers = 5415, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.122s]
          Answers = 5415, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.123s]
        Checking schema 244 / 396: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 4438
            Final Answer: {'Mills Corporation', 'Prosperity Bancshares', 'Homefed', 'Howard University', 'Bioforce Nanosciences Holdings', 'Intersections, Inc.', 'Baldor Electric Company', 'Intuit Inc.', 'Raven Industries, Inc.', 'CCF Holding Company', 'Fiserv', 'First Marblehead Corporation (The)', 'Amber-Allen Publishing', 'Smith College', 'LightPath Technologies, Inc.', 'Reynolds American', 'Freeh Group International Solutions', 'Constar International Inc.', 'Silicon Laboratories, Inc.', 'Caterpillar Financial Services Corp.', 'Royale Energy, Inc.', 'Novartis AG', 'Host Hotels & Resorts', 'Community Bankshares, Inc.', 'Actuate Corporation', 'Builders FirstSource, Inc.', 'Avis Budget Group', 'Timberland Bancorp, Inc.', 'Switch & Data Facilities Company, Inc.', 'Harpo Productions', 'USA Technologies, Inc.', 'Cytokinetics Inc.', 'Proginet', 'Progress Software', 'ARAMARK', "Max & Erma's", 'Northern Grain and Warehouse', 'DRI Corporation', 'Old National Bancorp Capital Trust I', 'Arradiance', 'Alloy, Inc.', 'American Access Technologies', "Cabela's", 'Transamerica Corporation', "Dick's Sporting Goods", 'HCC Insurance Holdings', 'Superior Energy Services', 'Union Pacific Railroad', 'Lamson & Sessions Co. (The)', 'IBERIABANK Corporation', 'United States of America', 'Amish Naturals', 'Avistar', 'Rex Energy Corporation', 'Kendle', 'Invacare', 'ARC Document Solutions', 'Regis Corporation', 'Vivato', 'General Mills Foundation', 'Hercules Technology Growth Capital, Inc.', 'Brunswick Corporation', 'Columbia and Cowlitz Railway', 'Ralph Lauren Corporation', 'Global Imaging Systems, Inc.', 'JAE Associates', 'Diamond Offshore Drilling', 'James Randi Educational Foundation', 'Commercial Vehicle Group, Inc.', 'Gold Circle Films', 'Cathay Bank', 'MeriStar Hotels & Resorts, Inc.', 'WGAY', 'PNC Financial Services', 'S. C. Johnson & Son', 'Activeworlds', 'Affymetrix', 'Sterling Banks, Inc.', 'North Shore Gas', 'Massachusetts Institute of Technology', 'ALCES Technology, Inc.', 'Room and Board, Inc.', 'Syndesis Limited', 'Manatron, Inc.', 'First Select Corporation', 'Fuel Systems Solutions, Inc.', 'Paramount Gold and Silver Corp.', 'Synaptics', 'First Business Financial Services, Inc.', 'Bowater', 'Globix Corporation', 'Chevron Global Gas', 'Castlepoint Holdings Ltd.', 'Ikon Office Solutions', 'AmerisourceBergen Specialty Group', 'NetXen', 'Reckson Associates Realty', 'World Waste Technologies', 'Pharmos', 'Steiner Leisure Limited', 'ABX Air', 'Ixia', 'Dobson Communications Corporation', 'Chemung Financial', 'Johnson Controls', 'W. W. Grainger', 'TerreStar Corporation', 'Trans World', 'Cherokee International Corporation', 'Harvard Bioscience, Inc.', 'Corus Bankshares', 'Evolving Systems, Inc.', 'Cash America International, Inc.', 'Nicor', 'Skil', 'ShoreTel', 'America First Apartment Investment', 'FirstFed Financial Corporation', 'Ennis, Inc.', 'Modine Manufacturing Company', 'Deckers Outdoor Corporation', 'Morningstar, Inc.', 'AXT Inc', 'Cato Corporation', 'University of Maine', 'Brainstorm Cell Therapeutics', 'I.D. Systems, Inc.', 'First Bancshares, Inc.', 'Jones Lang LaSalle', "Morton's The Steakhouse", 'Mesa Air Group', 'Security National Financial Corporation', 'MidSouth Bancorp', 'United Commercial Bank', 'USi', 'Northeastern Illinois University', 'EBX', 'Regency Energy Partners LP', "Manufacturer's Hanover Trust Company", 'Optionable', 'Kansas City Life Insurance Company', 'Universal Security Instruments, Inc.', 'Altra Holdings, Inc.', 'ValueRich, Inc.', 'TNK-BP', 'Gabriel Technologies', 'Analogic Corporation', 'ProCentury Corporation', 'U-Store-It Trust', 'Mediavest', 'Ultimate Software Group, Inc.', 'Emoro Inc.', 'NeoPharm, Inc.', 'Eaton Vance Tax Advantaged Glo', 'Orbit International Corporation', 'JonLoc Inc.', 'Citizens Financial Services', 'Oracle Corporation', 'Knight Transportation', 'eDiets.com', 'BeVocal', 'Investors Capital Holdings, Ltd.', 'Tri-County Financial', 'Basic Energy Services, Inc.', 'Great Lakes Dredge and Dock Company', 'James River Group, Inc.', 'Pacific Premier Bancorp Inc', 'Diamond Hill Investment Group, Inc.', 'West Coast Bancorp', 'Storm Cat Energy Corporation', 'Hyperion Solutions', 'Cost Plus World Market', 'Bluegate', 'Transmeta', 'Europe Pacific Capital', '454 Life Sciences', 'Stone Energy Corporation', 'TUT Systems', 'Sequenom, Inc.', '21st Century Holding Company', 'AMR Corporation', 'Texas Industries', 'Adams Respiratory Therapeutics, Inc.', 'Amway Hong Kong', 'Monaco Coach Corporation', 'Biopure', 'Journal Communications', 'United Technologies Corporation', 'Aurora Oil & Gas Corporation', 'DaVita', 'Singapore Technologies group', 'WizCom Technologies', 'Eaton Vance Enhanced Equity', 'Ryland Homes', 'METALICO INC', 'Novavax', 'Municipal Mortgage & Equity, LLC', 'Priceline.com', 'Integrated Business Software', 'CKE Restaurants', 'USA Truck', 'Insight Enterprises', 'Wildlife Management Institute', 'SEACOR SMIT Inc.', 'Depomed', 'Rogers Corporation', 'Institute for Systems Biology', 'Vitran Corporation, Inc.', 'Saia, Inc.', 'OMNOVA Solutions Inc.', 'Breeze-Eastern Corporation', 'Rotoblock', 'Farmers Capital Bank Corporation', 'Aruba Networks', 'Snap-on', 'Waste Industries USA, Inc.', 'Ascendia Brands, Inc', 'Genworth Financial', 'Neose Technologies, Inc.', 'Reliv', 'CardioDynamics International Corporation', 'Woodward, Inc.', 'SI International, Inc.', 'Heartland Express, Inc.', 'Fidelity Investments', 'Buffalo Wild Wings', 'Integra lifesciences', 'United Surgical Partners International', 'Federated Investors, Inc.', 'Molex', 'Lpath', 'American Vanguard Corporation', 'Yugma', 'Bovie Medical Corporation', 'Topps', 'Data I/O Corporation', 'Tyco International', 'Leap Wireless', 'CLARCOR Inc.', "Denny's", 'Al-Ghurair Group', 'Ingram Micro', 'Biogen Idec', 'Encorium Group, Inc.', 'Bucknell University', 'First State Financial Corporation', 'Citroën', 'Salix Pharmaceuticals, Ltd.', 'Leggett & Platt', 'Compudyne', 'Park Bancorp, Inc.', 'Odyssey Re Holdings Corporation', 'VCA Antech, Inc.', 'First Citizens BancShares', 'Cytori Therapeutics Inc', 'Funimation', 'Raymond James Financial, Inc.', 'OPNET Technologies Inc.', 'Silverstar Holdings Ltd', 'Momenta Pharmaceuticals, Inc.', 'Dollar Financial Corp.', 'Equifax', 'Hercules Offshore, Inc.', 'Vfinance', 'Heartland Financial USA, Inc.', 'Molecular Devices', 'Edgewater Technology, Inc.', 'MediaPops', 'Sonoran Energy', 'Usa Video Interactive', 'EFG Bank European Financial Group', 'EPIQ Systems, Inc.', 'Midcarolina Financial', 'Tropicana Products', 'The Hershey Company', 'Young Innovations, Inc.', 'Entegris, Inc.', 'AMICAS, Inc.', 'Schering-Plough', 'iCAD Inc.', 'Haynes International', 'Fortress International Group, Inc.', 'Endwave Corporation', 'OceanFirst Financial Corp.', 'Americana Distribution', 'First West Virginia Bancorp, Inc.', 'Franklin Bank Corp.', 'Fulton Financial Corp.', 'Caterpillar Logistics Services Inc.', 'Texas Instruments', 'Digene', 'Samuel Adams', 'Atmel', 'Henry Crown and Company', 'Invuity', 'Stericycle, Inc.', 'Key Energy Services', 'Chiquita Brands International', 'Eaton Vance Tax-Managed Buywri', 'Fairchild Semiconductor International, Inc.', 'Wintrust Financial Corporation', 'InterDigital, Inc.', 'NovaMed, Inc.', "Nathan's Famous", 'Patriot Investment', 'Hilb, Rogal and Hamilton Company', 'Front Porch Forum Inc', 'Tutorvista', 'ACI Worldwide, Inc.', 'LyondellBasell Industries', 'Paychex', 'Cherokee Inc.', 'NewAlliance Bank', 'Praecis Pharmaceuticals', 'Empire Petroleum', 'PHAZAR CORP', 'National Retail Properties, Inc.', 'Southern First Bancshares, Inc.', 'RF Monolithics, Inc.', 'Zanett Inc.', 'Danielson Holding Corporation', 'Gatehouse Media, Inc.', 'American Academy of Arts and Letters', 'Mattel', 'Chevron Products Company', 'NewBridge Bancorp', 'NCR Corporation', 'SYS Technologies', 'Terra Nostra Resources', 'Occidental Petroleum', 'Eastman Chemical Company', 'Neurocrine Biosciences', 'Northwest Bancorp, Inc.', 'Meyer Agri-Products', 'Clayton Holdings, Inc.', 'Dynavax Technologies', 'AGCO', 'Ice.com', 'AptarGroup, Inc.', 'Columbia Banking System, Inc.', 'Ampex', 'Cascade Corporation', 'SuperValu', 'SDL', 'Patient Safety Technologies', 'Great Southern Bancorp, Inc.', 'MIVA', 'Valspar', 'Tektronix Development Company', 'Protective Life', 'Bitstream Inc.', 'PS Publishing', 'First Keystone', 'Energizer Holdings', 'Target Corporation', 'Vermillion, Inc.', 'NII Holdings', 'Lsb Industries Inc.', 'RC2 Corporation', 'StemCells, Inc.', 'Fidelity Brokerage Company', 'Video Software Dealers Association', 'Medarex', 'Stevens Institute of Technology', 'Xchangeagent Inc.', 'Eagle Bancorp, Inc.', 'Drummond Press , Inc.', 'Kewaunee Scientific Corporation', 'DST Systems', 'Firstflight', 'Camden Property Trust', 'EzRez Software', 'Specialty Chemicals', 'Javelin Pharmaceuticals, Inc.', 'Axcelis Technologies', 'Neah Power Systems', "Jerry's Famous Deli", 'FirstEnergy', 'Sutor Technology Group Ltd.', 'Hartmarx Corporation', 'First Bancorp of Indiana, Inc.', 'Ambassadors International, Inc.', 'Spartan Stores', 'Open Energy', 'O. I. Corporation', 'Férinel', 'Openwave Systems Ltd', 'Stanley, Inc.', 'Neenah Paper, Inc.', 'Sussex Bancorp', 'Hill International, Inc.', 'CyberVision', 'UK Tropical Agricultural Association', 'Replidyne', 'Infe-Human Resources', 'Twin Disc, Incorporated', 'Comcast', 'Vital Images, Inc.', 'DTS', 'Johnson & Johnson Inc.', 'Building Materials Holding Corporation', 'Investors Title Company', 'Gymboree Corporation', 'Excellency Investment Realty T', 'Petroleum & Resources Corporation', 'Langer Inc.', 'Clear Channel Communications', 'Provident Financial Holdings, Inc.', 'Home BancShares, Inc.', 'Gigabeam Corporation', '@Road', 'Care Investment Trust Inc.', 'George Weston Limited', 'University of Texas at Dallas', 'Ametek', 'Stewart Enterprises, Inc.', 'Tailwind Financial Inc', 'Microfield Group', 'Chase Manhattan Corporation', 'IntraLase', 'Bradley Pharmaceuticals', 'Time Warner Cable', 'GeoGlobal Resources Inc.', 'Mid-State Bancshares', 'Lodgian, Inc.', 'Labor Ready, Inc.', 'Ingles', 'American Television and Communications Corp', 'AMTEK, Inc.', 'Colgate-Palmolive', 'Coldwater Creek', 'American Security Resources', 'Bruker Biosciences Corporation', 'PC DOCS, Inc.', 'Culinary Institute of America', 'Nanogen', 'Eagle Broadband', 'Sigma Designs, Inc.', 'University of Idaho', 'Glacier Bancorp, Inc.', 'Sybase', 'Mid-America Apartment Communities, Inc.', 'Henry Bros. Electronics, Inc.', 'Parametric Technology Corporation', 'Verizon Communications', 'KFC', 'Seaboard Corporation', 'Genentech', 'Bristol West Holdings', 'Aptus Endosystems', 'Ing Clarion Global Real Estate', 'Espey Mfg. & Electronics Corp.', 'Penwest Pharmaceuticals Co.', 'Morgans Foods', 'Calibre Energy', 'Neuralieve', 'AAR Corp', 'Trailer Bridge', 'Allied World Assurance Company Holdings, LTD.', 'Rehabcare Group, Inc.', 'RSA', 'Gales Industries', 'Amoco', 'Rockwell Collins', 'Integrity Mutual Funds', 'Compumed', 'Hanover Insurance', 'International Speedway Corporation', 'Integrated Environmental Techn', 'American Civic Association', 'Eagle Financial Services', 'Grant Prideco, Inc.', 'iStar Financial Inc.', 'Harley-Davidson Motor Company', 'AspenBio Pharma, Inc.', 'Pharsight', 'Chemical Technologies Corporation', 'PSS World Medical', 'Sonic Drive-In', 'Spectrum Brands', 'Wind River Systems', 'Inter Parfums, Inc.', 'Patriot Capital Funding, Inc.', 'Saturn Corporation', 'Northern Pacific Railway', 'Cornerstone Bancshares', 'Span-America Medical Systems, Inc.', 'Frequency Electronics, Inc.', 'ARRIS Group Inc.', 'StarTek', 'Kratos Defense & Security Solutions, Inc.', 'WD-40', 'Viewdle', 'TIB Financial Corporation', 'Community Capital Bancshares, Inc.', 'Tween Brands', 'Interline Brands Inc.', 'Ridgefield Acquisition', 'Crocs', 'Glimcher Realty Trust', 'Security Capital Assurance Ltd', 'Medical Action Industries Inc.', 'IMERGENT INC', 'Natural History Museum of Los Angeles County', 'Pioneer Natural Resources', 'Omega Protein Corporation', "Frisch's Restaurants, Inc.", 'VitalStream', 'ALR Technologies', 'GenOn Energy Holdings', 'Clean Energy Fuels Corp.', 'Regenerx Biopharmaceuticals Inc', 'Macatawa Bank Corporation', 'Marathon Oil', 'Vulcan Capital', 'Searchhelp', 'Phoenix Companies', 'CAS Medical Systems, Inc.', 'Invisa', 'Western Union', 'Columbia University', '1-800 Contacts', "4b's Restaurant", 'Gilead Sciences', 'Minerals Technologies Inc.', 'Eaton Vance Tax-Managed Buy-Wr', 'Tiffany & Co.', 'Voyager Petroleum', 'New York Community Bancorp, Inc.', 'Leapfrog Enterprises', 'UFP Technologies, Inc.', 'NeurogesX, Inc.', 'Education Association of Alexandria', "Flanigan's Enterprises, Inc.", 'American National Bankshares, Inc.', 'Isle of Capri Casinos', 'L.VAD Technology, Inc.', 'OSI Pharmaceuticals', 'Alphatec Holdings, Inc.', 'Wescorp Energy', 'Conseco', 'TFS Financial Corporation', 'Remote Mdx', 'Turnstone', 'Health Net', 'LMI Aerospace, Inc.', 'Capital Southwest Corporation', 'European Confederation of  Young Entrepreneurs', 'Cablevision', 'Arden Group, Inc.', 'CVB Financial Corporation', 'Triad Hospitals', 'GenVec, Inc.', 'The Hartford', 'Cti Group Holdings', 'Global Entertainment Holdings/', "McDonald's", 'Cadence Pharmaceuticals', 'Albany Molecular Research, Inc.', 'Clarient, Inc.', 'Inergy, L.P.', 'ExxonMobil Upstream Research Company', 'Fusion Telecommunications International, Inc.', 'Mitcham Industries, Inc.', 'Artefactual Systems Inc.', 'WCA Waste Corporation', 'Raging Stallion Studios', 'Briggs & Stratton', 'Walgreens', 'Aftermarket Technology Corp.', 'ViaCell, Inc.', 'Perficient', 'Annaly Capital Management Inc', 'MASSBANK Corp.', 'Vidoop', 'National Geographic Society', 'World Heart Corporation', 'Yum! Brands', 'Southwest Bancorp, Inc.', 'aQuantive', 'International Shipholding Corporation', 'Allied Motion Technologies, Inc.', 'Connecticut College', 'Crompton Corporation', 'The Kennedy/Marshall Company', 'PLX Technology', 'Durect Corporation', 'Cornell University', 'MTS Systems Corporation', 'Entertainment Properties Trust', 'NCI Building Systems, Inc.', 'Napco Industries', 'Javo Beverage', 'Rosetta Resources Inc.', 'EV Energy Partners, L.P.', 'Kentucky Bancshares', 'Southside Bancshares, Inc.', 'Authentidate Holding Corp.', 'Citysearch', 'Complete Production Services, Inc.', 'Communications Systems, Inc.', 'GetThere', 'Sana Security', "Coeur d'Alene Mines Corporation", 'Triumph Group', 'Pepco Holdings', 'Chesapeake Utilities Corporation', 'Tidel Technologies', 'ActivIdentity', 'McGraw-Hill Financial Services Company', 'Thorium Power', 'VCG Holding Corporation', 'International Textile Group', 'National Semiconductor', 'Nabors Industries', 'Assuranceamerica', 'Alliance One International, Inc.', 'Callon Petroleum Company', 'Kroger', 'First BanCorp', 'Matthews International Corporation', 'Certeon', 'Deltic Timber Corporation', 'PepsiAmericas', 'Harman Kardon, Incorporated', 'Arch Coal', 'Automatic Data Processing', 'MSB Financial Corp.', 'Glass Eye Pix', 'Torrent Energy', 'MacNeil/Lehrer Productions', 'Provectus Pharmaceuticals', 'Sharpe-Russell Research, Inc.', 'Mills College', 'ForeScout', 'Susser Holdings Corporation', 'Rubicon Financial', 'Discovery Communications', 'Armitage Associates', 'Ameriprise Financial', 'Devillier Donegan Enterprises', 'CBRE Group', 'Performance Technologies, Incorporated', 'Smith (A.O.) Corporation', 'AAON, Inc.', 'Mission West Properties, Inc.', 'Roberts Realty Investors, Inc.', 'Scanner Technologies', 'Dominion Homes Inc.', 'McCormick & Company', 'Bank of Granite Corporation', 'Sinclair Broadcast Group', 'Windham Hill Records', 'N-Viro International', 'Cache, Inc.', 'Standard Register Company (The)', 'iGo Inc.', 'WETA-TV', 'Cabot Oil & Gas Corporation', 'Hearst Entertainment , Inc.', 'American Bank Note Holographic', 'Kellogg Company', 'Medistem Laboratories', 'Pharmasset', 'University of Virginia', 'THQ', 'Wyeth Pharmaceuticals', 'Mercury Computer Systems', 'One Liberty Properties, Inc.', 'Western Refining, Inc.', 'Hornbeck Offshore Services', 'Integrys Energy Group', 'TurboChef Technologies, Inc.', 'South Financial Group Inc. (The)', 'Nautilus, Inc.', "Papa John's Pizza", 'Clear Lake Consulting, Inc.', 'uTest', 'Federal Signal Corporation', 'Matria Healthcare, Inc.', 'PhotoMedex, Inc.', 'News Corporation', 'King Pharmaceuticals', 'Eastman Kodak', 'Congress Communications', 'Meadowbrook Insurance Group, Inc.', 'Def Jam Recordings', 'SBC Communications', 'Newcastle Investment Corporation', 'Hawaiian Electric Industries, Inc.', 'Grand Canyon University', 'Graco', 'Nimblefish', 'Cintas', 'Havertys', 'Cinemark Theatres', 'Western Association of Venture Capitalist', 'Manufacturers Hanover Corporation', 'Diaphonics', 'Greenman Technologies', 'Cox Enterprises', 'Abdulla Al Ghurair Group', 'Thornburg Mortgage', 'International Assets Holding Corporation', 'etrials Worldwide, Inc.', 'Ryerson', 'El Paso Electric Company', 'LTX', 'Greenlight Capital Re, Ltd.', 'Dynatronics Corporation', 'Palomar Medical Technologies, Inc.', 'A.S.V., Inc.', 'Franklin W. Olin College of Engineering', 'Omnicell Technologies', 'Republic Services, Inc', 'Mobil', 'New Brunswick Scientific', 'Dish Network', 'Actuant Corporation', 'Heritage Commerce Corp', 'Resource America, Inc.', 'CSX Corporation', 'Pacific Coast National Bank', 'Commonwealth Biotechnologies, Inc.', 'Graybar', 'EOG Resources', 'Pall Corporation', 'Integral Vision', 'ADTRAN', 'Omi', 'Technitrol, Inc.', 'Evergreenban', 'Allstate', 'Hallmark Financial Services, Inc.', 'CUISINE SOLUTIONS INC', 'Casella Waste Systems', 'Helix Energy Solutions Group', 'Working Title Films', 'OccuLogix, Inc.', 'Patron Systems', 'BioFuel Energy Corp.', 'MRU Holdings', 'CMS Energy', 'Incyte Corporation', 'Bway Holding Company', 'BioDelivery Sciences International, Inc.', 'Pacific Health Care Organization', 'James River Coal Company', 'Century BanCorp, Inc.', 'Voxx International', 'Oakridge Energy', 'Fox River Paper Company', 'European Investment Bank', 'Glu', 'Symmetry Holdings Inc', 'WCI Communities', 'C.N. Flagg Power Inc.', "Sheldon's Motel & Restaurant", 'Ecolab', 'National CineMedia', 'L-1 Identity Solutions, Inc.', 'East West Bank', 'Waterside Capital Corporation', 'Terra Industries Inc.', 'Zilog', 'Take-Two Interactive', 'Banner Corporation', 'China Precision Steel, Inc.', 'Turismo & Immobiliare S.p.A.', 'Fidelity Bancorp, Inc.', 'NitroMed, Inc.', 'Heritage Oaks Bancorp', 'RVEHA -Tam House', 'FFD Financial Corporation', 'Lukoil', 'Washington and Lee University', 'U.S. Auto Parts', 'FTD Group, Inc.', 'EVCI Career Colleges Holding Corp.', 'Citizens Financial Corporation', 'Finish Line, Inc.', 'Lexicon Pharmaceuticals, Inc.', 'Bottomline Technologies, Inc.', 'Tegal Corporation', 'Triple Crown Media, Inc.', 'Critical Therapeutics, Inc.', 'Kaiser-Francis Oil', 'Mfic', 'Shore Bancshares Inc', 'RailAmerica', 'SteelCloud Inc.', 'Captaris Inc.', 'Delphi Korea', 'Cincinnati Bell Inc', 'Penn Schoen Berland', 'MicroFinancial Incorporated', 'General Mills', 'Buckeye Partners L.P.', 'Provident Financial', 'TSYS', 'United Western Bancorp, Inc.', 'Palomar Enterprises', 'Chattem', 'Skinny Nutritional', 'Enxnet', 'Cascade Natural Gas', "The Reader's Digest Association", 'Diamondrock Hospitality Company', 'NVR, Inc.', 'Interactive Brokers', 'SRA International', 'Pluris Energy Group', 'Hampden-Sydney College', 'Community Bank Shares of Indiana, Inc.', 'Nu Skin Enterprises', 'Ethicon Endo-Surgery', 'Active Network', 'Berkshire Bancorp, Inc.', 'Sirius Satellite Radio', 'SmartPros Ltd.', 'Ballistic Recovery Systems', 'CBL & Associates Properties', 'Ameristar Casinos', 'Dover Downs Entertainment, Inc.', "Kirkland's Home", 'WellPoint', 'Jennifer Convertibles', 'Coach, Inc.', 'Cohn & Steers Inc', 'John Nuveen Company (The)', 'Transocean', 'Interpublic Group of Companies', 'KVH Industries', 'Brigham Exploration Company', 'Sysco', 'Hickok Inc', 'Sensient Technologies', 'Forward Air Corporation', 'Nequai Cosmetics', 'Sally Beauty Holdings, Inc.', 'Schuylkill Navigation Company', 'Oshkosh Corporation', 'Huntington Bancshares', 'j2 Global Communications Inc', 'Walt Disney Pictures and Television', 'John Wiley & Sons', 'UniSource Energy Corporation', 'Atlantic American Corporation', 'Adaptive Path', 'AMB Property Corporation', 'First National Community Banco', 'Gilligames', 'Nordstrom', 'Longview Fibre', 'Forme Capital', 'Playboy Enterprises', 'PVH', 'China BAK Battery, Inc.', 'Hanover Compressor', 'Cosi, Inc.', 'Chindex International, Inc.', 'WebMediaBrands', 'FieldPoint Petroleum Corporation', 'Washington Banking Company', 'Ryder', 'Ireland Inc', 'EGL Inc', 'Healthcare Services Group, Inc.', 'Emulex', 'ATRION Corporation', 'Pennsylvania Real Estate Investment Trust', 'Charles & Colvard', 'Franklin Templeton Investments', 'Affiliated Managers Group, Inc.', 'SPX Corporation', 'Anthracite Capital, Inc.', 'LSB Corporation', 'Eli Lilly and Company', 'Steel Technologies', 'iLike', 'Vornado Realty Trust', 'Chase National Bank', 'Bank of America Home Loans', 'LEB Communications', 'AirNet Systems, Inc.', 'IGI, Inc.', 'Perry Ellis International', 'Sherwin-Williams', 'Dominion Resources', 'Cyios', 'Varian Medical Systems', 'World Vital Records, Inc.', 'Suntron Corporation', 'Hurco Companies, Inc.', 'Unity Bancorp, Inc.', 'Progressive Gaming International Corporation', 'Marshall & Ilsley', 'EchoStar Communications Corporation', 'Mobil Credit Corporation', 'LeCroy Corporation', 'Careguide', 'Enterprise GP Holdings L.P.', 'Meridian Bioscience Inc.', 'General Cigar Company', 'OSI Systems', 'Dover Corporation', 'TECO Energy Company', "Dominick's", 'Directed Electronics, Inc.', 'eHealth, Inc.', 'WPCS International', 'Tribune Company', 'Everlast Worldwide', 'Iberdrola USA', 'Magic Communications', 'Planar Systems', 'St. Bernard Software Inc.', 'GMX Resources, Inc.', 'Range Resources Corporation', 'World Fuel Services', 'Photonics Products Group', 'Florida Rock Industries, Inc.', 'Energy Partners, Ltd.', 'Arkansas Best Corporation', 'Hilltop Holdings Inc.', 'Oritani Financial Corp.', 'Spectra Energy Partners, LP', 'Wireless Ronin Technologies, Inc.', 'Marsh & McLennan Companies', 'Pacific Gas and Electric Company', 'Pyr Energy', 'FTI Consulting, Inc.', 'Beckman Coulter, Inc.', 'Liquidity Services, Inc.', 'Overstock.com', 'Equity Residential', 'StanCorp Financial Group', 'PNM Resources', 'Beneficial Mutual Bancorp, Inc.', 'Presstek, Inc.', 'TriCo Bancshares', 'Comm Bancorp, Inc.', 'Coca-Cola Enterprises', 'Market Access Services GmbH & Co. KG', 'SuperGen, Inc.', 'MetLife Inc', 'Telmex', 'Bank Of Kentucky Financial', 'Adlai Stevenson Institute of International Affairs', 'Synplicity', 'Otis Elevator Company', 'Caplease Funding Inc', 'Marchex, Inc.', 'Stoneridge, Inc.', 'HMS Holdings Corp', 'Abraxas Petroleum Corporation', 'MainSource Bank', 'Ritz Camera Centers', 'Reliance Steel & Aluminum Company', 'Atwood Oceanics, Inc.', 'MPAA', 'Irwin Entertainment', "St John's College, Oxford", 'Atricure', 'Axsys Technologies, Inc.', 'Volt Information Sciences', 'MoneyGram International, Inc.', 'Palo Alto Funding Group', 'Georgia Carolina Bancshares', 'Moynihan (Pennsylvania) Station Development Corporation', 'CMPC', 'First Place Financial Corp.', 'Millennium Bankshares Corporation', 'ConAgra Foods', 'Silicon Image, Inc.', 'Network Engines, Inc', 'Royal Society', 'Atlas Air', 'ViewPoint Financial Group', 'Encore Wire Corporation', 'FedFirst Financial Corporation', 'Ciprico Inc.', 'CenturyLink', 'Gates/Arrow Distributing', 'Universal American Financial Corp.', 'Ross Stores', 'Research Frontiers Incorporated', 'Ingram Micro Asia-Pacific', 'Gold', 'HON INDUSTRIES Inc.', 'XETA Technologies, Inc.', 'Dollar General', 'NetSol Technologies', 'Pacifichealth Laboratories', 'Paxar Corporation', 'Bfc Financial', 'Empire Financial Holding Company', 'Conexant', 'Maui Land & Pineapple Company', 'NYSE Euronext Inc.', 'Ener1', 'The Con\xadser\xadva\xadtion Foundation', 'Biomed Realty Trust', 'First Defiance Financial Corp.', 'American Axle & Manufacturing Holdings, Inc.', 'AmerisourceBergen', 'Norwest', 'United Bancshares, Inc.', 'Synagro Technologies', 'Apria Healthcare Group, Inc.', 'Omnicom Group', 'Southwest Gas', 'KMG Chemicals, Inc.', 'Friedman Industries Inc.', 'Axis Capital Holdings Limited', 'Direct Dental', 'Ascential Software', 'Cerus Corporation', 'Originally New York', 'Expeditors International', 'Arrow Electronics', 'Neoprobe', 'Triathlon Verein Berlin', 'Rationalist Association', 'Getty Realty Corporation', 'Northstar Neuroscience, Inc.', 'Tidelands Bancshares, Inc.', 'Gentiva Health Services', 'Panacos Pharmaceuticals', 'Buena Vista Pictures Marketing', 'Alpharma, Inc.', 'Infinity Pharmaceuticals, Inc.', 'Republic Airways Holdings', 'Australasian Computer Music Association', 'Janata Party', 'Movie Star', 'Alltel', 'Volcano Corporation', 'Under Armour', 'Quicksilver Resources', 'PacSun', 'AvalonBay Communities', 'Cellstar', 'National Technical Systems, Inc.', 'Brooke Corporation', 'Sierra Health Services, Inc.', 'ARENA RESOURCES INC', 'Del Monte Foods', 'Valley Financial Corporation', 'Knot, Inc. (The)', 'OXiGENE, Inc.', 'C&F Financial Corporation', 'Alpha Natural Resources, inc.', 'Endocare, Inc.', 'Validus Holdings, Ltd.', 'Online Resources Corporation', 'Artima Inc.', 'PMI Group, Inc. (The)', 'Icagen, Inc.', 'Computer Sciences Corporation', "Bois D'Arc Energy, Inc.", 'Ocwen', 'Kellwood Company', 'Aon plc', "Casey's General Stores", 'CH2M Hill', 'Clyvia', 'Danaher Corporation', 'Rutland and Washington Railroad', 'Fortress Investment Group', 'Bethany College', 'Ivy Financial Enterprises, Inc.', 'Global Axcess', 'CombinatoRx, Incorporated', 'Seawright Holdings', 'Microsoft', 'TechTarget', 'Henry Kaufman & Company', 'Blackstone Group', 'Universal Forest Products', 'The Coca-Cola Company', 'Areae', 'Trinity Title & Abstract Corp.', 'Everyone Deserves A Roof', 'Procter & Gamble', 'Infocrossing', 'American Capital', 'Westmoreland Coal Company', 'Umpqua Holdings Corporation', 'Cereplast', 'ALCO Stores', 'Sun Microsystems', 'Providence and Worcester Railroad', 'Cleveland-Cliffs Inc.', 'Eaton Corporation', 'Anika Therapeutics Inc.', 'Basic Earth Science Systems', 'Youth Radio', 'Peoples Educational Holdings, Inc.', 'Physicians Formula Holdings, Inc.', 'Aspen Exploration', 'Cheniere Energy Partners, LP', 'ONEOK', 'Smarts Oil Gas', 'Tanger Factory Outlet Centers', 'Alberto-Culver', 'Georgia-Pacific', 'LaMotta Foods', 'BrightPoint', 'QLogic', 'Royal Caribbean International', 'Lone Star Technologies', 'International Wine and Spirit Competition', 'United States Cellular Corporation', 'Clearwire', 'AeroVironment', 'Smash Records', 'DQE', 'Philip Morris USA', 'ETS-Lindgren', 'Vertex Pharmaceuticals', 'Taiwan Greater China Fund', 'Enzon Pharmaceuticals, Inc.', 'Home Federal Bank', 'Mariner Energy, Inc.', 'Employers Holdings Inc', 'American Physicians Service Group, Inc.', 'AVI BioPharma, Inc.', 'Granite Construction', 'Cognitive Code', 'Exxon Neftegas Ltd.', 'Sands Regency Casino Hotel', 'World Bank Group', 'Manhattan Pharmaceuticals, Inc.', 'Ticketmaster Online - CitySearch', 'Xcel Energy', 'Comtech Group, Inc.', 'Warwick Valley Telephone Company', 'GlaxoWellcome', 'Williams Controls, Inc.', 'U.S. News Productions', 'American Airlines', 'Green Mountain Coffee Roasters', 'IBM Informix', 'Adams Express Company', 'Rare Hospitality International', 'Staktek Holdings, Inc.', 'Titanium Metals', 'History of WWE', 'Turnaround Partners', 'PS Business Parks, Inc.', 'Merix Corporation', 'Rmk Strategic Income Fund', 'Patterson Companies', 'Podium Prose', 'Sirenza Microdevices, Inc.', 'Tarragon Corporation', 'Cantel Medical Corp.', 'Cedar Fair Entertainment Company', 'Temecula Valley Bancorp Inc. (CA)', 'Rockwell Medical Technologies, Inc.', 'Third Wave Technologies, Inc.', 'Nordson Corporation', 'Guardian Technologies Internat', 'Spirit AeroSystems', 'GAINSCO', 'Agile', 'GTx, Inc.', 'Humanized', 'La-Z-Boy', 'ProQuest', 'RadiSys', 'Deerfield Triarc Capital Corp.', 'Steel Dynamics, Inc.', 'Harvard University', 'Birmingham-Southern College', 'Ocean Bio-Chem, Inc.', 'American International Industries Inc', 'Greystone Logistics', 'TorreyPines Therapeutics, Inc.', 'Horizon Bancorp (IN)', 'Argo Group International Holdings Ltd.', 'Revlon', 'Hot Topic', 'Crosstex Energy, L.P.', 'Community Central Bank Corp.', 'OraSure Technologies, Inc.', 'Fauquier Bankshares, Inc.', 'Autobytel', 'MOHKAlife', 'Genuine Parts Company', 'Perkins Engines', 'Euronet Worldwide, Inc.', 'PETROQUEST ENERGY INC', 'Applied Micro Circuits Corporation', 'Centracore Properties Trust', 'USA Basketball', 'American Campus Communities Inc', 'The Jones Group', 'Lilly Pulitzer', 'Primus Guaranty, LTD.', 'Focus Enhancements', 'Molecular Insight Pharmaceuticals, Inc.', 'BPI Energy', 'Safeway Inc.', 'Princeton National Bancorp, Inc.', 'Bentley Pharmaceuticals, Inc.', 'Koppers', 'Rand Logistics, Inc.', 'Pacific Capital Bancorp', 'American States Water Company', 'TJX Companies', 'Rockerfeller Foundation', 'Citizens Republic Bancorp', 'Williams Companies', 'Ensco plc', "Peet's Coffee & Tea", 'Nash Finch Company', 'inTest Corporation', 'Mf Bank', 'Superior Well Services, Inc.', 'Water Chef', 'Alamo Group, Inc.', 'eLoyalty Corporation', 'Memory Pharmaceuticals Corp.', 'World Resources Institute', 'Bryght Services, Limited', 'Blue Coat Systems', 'USG Corporation', 'Ferropasa', 'Cisco-Linksys, LLC', 'Academy of Motion Picture Arts and Sciences', 'Global Gillette', 'WGNB Corp.', 'Berkshire Hills Bancorp, Inc.', 'Informatica', 'Hi-Shear Technology Corp.', 'Jacobs Financial Group', 'Arch Chemicals, Inc.', 'Plantronics', 'Polycom', 'Siclone Industries', 'Bank of New York', 'Sears, Roebuck and Company', 'VeraSun Energy', 'Viewcast', 'Double-Take Software, Inc.', 'Advance Auto Parts', 'National Security Group, Inc.', 'American Equity Investment Life Holding Company', 'Accelrys', 'FleetBoston Financial', 'Command Security Corporation', 'Shoe Carnival', 'GMH Communities Trust', 'Guaranty Federal Bancshares, Inc.', 'U.S.B. Holding Company, Inc.', 'M.I.T.A. Resort S.r.l.', 'Global Cash Access Holdings, Inc.', 'Stepan Company', 'Boardwalk Bancorp, Inc.', 'Quanex Corporation', 'Sandy Spring Bancorp, Inc.', 'Nextest Systems Corporation', 'Mortgage Bankers Association of America', 'ITT Corporation', 'Nike, Inc.', 'Sempra Energy', 'RLI Corp.', 'Town Sports International Holdings', 'Blount International, Inc.', 'Intermountain Community Bancor', 'Sypris Solutions, Inc.', 'Federal Home Loan Bank of Boston', 'InsWeb Corporation', 'Brown Shoe', 'SpectraLink', 'MFB Corp.', 'Whitney Holding Corporation', 'Somaxon Pharmaceuticals, Inc.', 'Calvin College', 'Weatherford International', 'Anixter', 'VASCO Data Security International, Inc.', 'United Capital Corporation', 'Oscient Pharmaceuticals Corporation', 'Redwood Trust, Inc.', 'Cpac', 'SonoSite, Inc.', 'Pennsylvania Commerce Bancorp, Inc.', 'Kellogg, Brown and Root', 'Franklin Credit Management Corp', 'Lovett Productions', 'E-Trade', 'Carolina Group', 'Hiland Partners, LP', 'Pathmark', 'Mazda', 'Lodgenet', 'Baylake', 'SonicWall', 'Synovics Pharmaceuticals', 'AIG Financial Products', 'Weber State University', 'Eagle Materials Inc', 'Commercial Bankshares', 'Rocketdyne', 'Washington Monthly', 'Capital Bank Corporation', 'Pioneer Drilling Co', 'Moldflow Corporation', 'Convex Computer', 'Globalstar', 'UTStarcom', 'ONYX Pharmaceuticals, Inc.', 'Cytec Industries Inc.', 'Cambrex Corporation', 'Secured Financial Network', 'IXYS Corporation', 'Diebold', 'Warp 9', 'Yadkin Valley Bank and Trust', 'MutualFirst Financial Inc.', 'Polymedica', 'Endo Health Solutions', 'Power-One, Inc.', 'Renaissance Learning', 'Clarium Capital', 'J. B. Hunt', 'Charming Shoppes', 'Dolby Laboratories', 'Optical Cable Corporation', 'Meritor, Inc.', 'Inland Steel Company', 'The Mosaic Company', 'Ben Franklin', 'Rosbank', 'Massey Energy', 'GSI Group, Inc.', 'Ironclad Performance Wear', 'Alexion Pharmaceuticals', 'Quixote Corporation', 'Patriot Transportation Holding, Inc.', 'Standard Parking Corporation', 'GulfMark Offshore, Inc.', 'Commerce Group', 'BearingPoint', 'Travelocity', 'Skyworks Solutions', 'UnionBanCal Corporation', 'HemoSense', 'Interlink Electronics', 'Hanger, Inc.', 'Jaclyn, Inc.', 'Sulphco, Inc.', 'United States Natural Gas Fund, LP', 'Tyco Electronics Ltd.', 'Dendrite International', "Women's Sports Foundation", 'Developers Diversified Realty Corporation', 'TriMas Corporation', 'Universal Health Realty Income Trust', 'Public Service Electric and Gas Company', 'Bronco Drilling Company, Inc.', 'Transcat, Inc.', 'TeleCommunication Systems, Inc.', 'Auxilium Pharmaceuticals, Inc.', 'ResMed', 'Emerson Electric Company', 'Synvista Therapeutics, Inc', 'Santa Lucia Bank', 'Siricomm', 'PriceSmart', 'Rancher Energy', 'Catalyst Semiconductor, Inc.', 'The Springs Company', 'New York Mets', 'Maidenform Brands, Inc.', 'Britton & Koontz Capital Corporation', 'Sirius XM Radio', 'United Bancorp, Inc.', 'iGATE', 'Park Electrochemical Corporation', 'Discovery Laboratories, Inc.', 'El Centro College', 'Manitex International Inc.', 'BROOKFIELD HOMES CORP', 'Annapolis Bancorp Inc.', 'Alliant Energy', 'Viddler', 'Chevron Texaco Overseas Petroleum Inc.', 'IDM Pharma, Inc.', 'Tyler Technologies, Inc.', 'Spectrum Pharmaceuticals, Inc.', 'National Oilwell Varco', 'McDonnell Douglas', 'The Princeton Review', 'Tapestry International', 'Cabot Corporation', 'Quest Software', 'RJR Nabisco', 'Capital South Investors', 'ASA Limited', 'Visteon', 'LSI Industries Inc.', 'Advanced Environmental Recycling Technologies, Inc.', 'Royal Bodycare', 'CHS Inc.', 'Twin City Rapid Transit Company', 'Lincare Holdings Inc.', 'Yahoo!', 'SJW Corporation', 'Reynoldson Control Inc.', 'Esso Standard Puerto Rico', 'Social Democratic Alternative Party', 'Association for Humanistic Psychology', 'Nike Foundation', 'National Academy of Recording Arts and Sciences', 'Schumann Center for Media and Democracy', 'Pioneer Bankshares', 'Advanced Viral Research', 'Michaels', 'National Penn Bancshares, Inc.', 'Gateway Energy', 'New England Bancshares, Inc.', 'California Public Utilities Commission', 'Magyar Bancorp, Inc.', 'Wachovia', 'WikiYou', 'Celgene', 'Dynamic Materials Corporation', 'Visualant', 'Rice University', 'Human Business Works', 'Shell Oil Company', 'Tennessee Commerce Bancorp, Inc. (TN)', 'NetApp', 'CommScope, Inc.', 'Marcus Corporation', 'New World Television', 'Eschelon Telecom', 'Iceland', 'DUSA Pharmaceuticals, Inc.', 'ZoomInfo', 'Media Com', 'Herley Industries', 'Eschelon of Oregon', 'Per-Se Technologies', 'Altus Pharmaceuticals', 'Penn State Alumni Association', 'Raytheon Space and Airborne Systems', 'University at Albany, The State University of New York', 'Charles River Associates', 'Biosante Pharmaceuticals, Inc.', 'Repros Therapeutics Inc.', 'Urstadt Biddle Properties Inc.', 'Saga Communications', 'Georgia Southern University', 'Cubic Energy', 'Payless ShoeSource', 'North Valley Bancorp', 'Acumen Medical', 'United PanAm Financial Corporation', 'Crestar Financial', 'China Fund, Inc. (The)', 'Global Logistics Acquisition Corporation', 'ADDvantage Technologies Group, Inc.', 'Open Source Initiative', 'American Electric Power', 'Capital Alliance Income Trust Ltd.', 'Ceradyne', 'Westaff', 'Ronson Corporation', 'Jarden', 'ON Semiconductor', 'TheStreet.com', 'Foot Locker', 'Consolidated-Tomoka Land Co.', 'First Interstate Bank of Texas', 'RAIT Financial Trust', 'Greenshift', 'PolyOne Corporation', 'Disney–ABC Television Group', 'American Bar Association', 'International Aluminum', 'BeautiControl', 'Walmart', 'Unisys', 'Vonage', 'Hiland Holdings GP, LP', 'Croff Enterprises', 'ExxonMobil Research & Engineering Company', 'F5 Networks', 'Kennametal', 'Pacific Sands', 'Logoworks', 'BioCryst Pharmaceuticals', 'Progressive Corporation', 'Embrex', 'New Media Communications', 'Valero GP Holdings, LLC', 'Allscripts Healthcare Solutions Inc', 'Coley Pharmaceutical Group, Inc.', 'Kaiser Aluminum', 'CACI', 'American Management Systems', 'Derma Sciences', 'Triarc Companies, Inc.', 'inContact, Inc.', 'Baxter International', 'New America High Income Fund, Inc. (The)', '1worldspace', 'Illumina', 'Tandy Brands Accessories, Inc.', 'Bowne & Co.', 'Worthington Industries', 'Next Inc', 'Northrim BanCorp Inc', 'EuroBancshares', 'Golf Channel', 'Mid Penn Bancorp', 'Ferroban', 'Houseglue', 'Mid-Wisconsin Financial Services', 'Rovi Corporation', 'Charter Financial', 'Sterling Financial Corporation', 'Vaughan Foods, Inc.', 'Savoy Records', 'Goodrich Petroleum Corporation', 'US Airways', 'Web.com', 'Spectre Gaming', 'Cleco Power LLC', 'Home Diagnostics, Inc.', 'Electronic Sensor Technology', 'City Holding Company', 'Onion, Inc.', 'Blucora', 'CSS Industries, Inc.', 'Great Plains Energy', 'Southeastern Legal Foundation', 'Emergent Biosolutions, Inc.', 'Oriental Financial Group, Inc.', 'Hungarian Telephone and Cable', 'Salon Media Group', 'American Railcar Industries, Inc.', 'Optimer Pharmaceuticals, Inc.', 'Valeant Pharmaceuticals', 'Diamond Foods', 'Regal-Beloit', 'Federal Realty Investment Trust', 'FirstMerit Corporation', 'Bestfoods Inc.', 'MBF Bioscience', 'The Sharper Image', 'German American Bancorp, Inc.', 'First Investors Financial Serv', 'Webster Bank', 'Coherent, Inc.', 'Aecom Technology Corporation', 'San Joaquin Bank', 'American Tower Corporation', 'Transcend Services, Inc.', 'Thomas Group, Inc.', 'Reichsbank', 'Orthovita, Inc.', 'Upromise', 'PRB Energy, Inc.', 'Gyrodyne Company of America', 'BofI Holding, Inc.', 'Artes Medical, Inc.', 'Xerox', 'Valassis Communications', 'FBR Capital Markets', 'Pope Talbot', 'Energy Transfer Equity', 'Cousins Properties Incorporated', 'First Financial Holdings, Inc.', 'Blackbaud', 'Service Bank', 'Citizens Community Bancorp, Inc.', 'United Financial', 'Viasys Healthcare', 'Omnia Protective Services', 'International Smart Sourcing', 'Avant! Corporation', 'Afv Solutions', 'WMS Industries Inc.', 'Healthspring, Inc.', 'Vestin Realty Mortgage I, Inc.', 'Webs', 'The Great Atlantic & Pacific Tea Company', 'Bridgeline Software, Inc.', 'Gannett Company', 'Applica', 'Highland Hospitality', 'PrimeEnergy Corporation', 'Smithfield Foods', 'Cincinnati Financial', 'Tennant Company', 'Helicos BioSciences', 'Micrel', 'PepsiCo', 'Blonder Tongue Laboratories, Inc.', 'Emory University', 'CMS Bancorp, Inc.', 'E-Loan', 'Wyndham Worldwide Corp', 'Altra Industrial Motion, Inc.', 'Endurance Specialty Holdings Ltd', 'Celadon Group, Inc.', 'American Museum of Natural History', 'Associated Estates Realty Corporation', 'Energy Conversion Devices, Inc.', 'LTC Properties, Inc.', 'Altra Biofuels', 'Yp', 'Berry Petroleum Company', 'Concept Ventures', 'NASD', 'SONUS Pharmaceuticals, Inc.', 'Optium Corporation', 'Southwest Water Company', 'BUCKEYE GP HOLDINGS LP', 'Blizzard Entertainment', 'Northern Trust', 'Martek Biosciences Corporation', 'LaCrosse Footwear', 'Sealed Air', 'Littelfuse', 'Natural Resource Partners LP', 'Hub Group, Inc.', 'Pope Resources', 'Empresas CMPC', 'BRT Realty Trust', 'Medicalcv', 'MCG Capital Corporation', 'Capital One', 'Waste Connections Inc.', 'China Media Group', 'Fidelity National Information Services', 'Bsquare corporation', 'Emergent Group', 'Sony Computer Entertainment', 'Essex', 'Cavit Sciences', 'River Valley Bancorp.', 'Harleysville Savings Bank', 'Raincity Studios', 'Averion International', 'Symbollon Pharmaceuticals', 'HealthSouth', 'ISCO INTERNATIONAL INC', 'Quiksilver', 'Southern National Bancorp of Virginia, Inc.', 'P.A.M. Transportation Services, Inc.', "Chico's FAS, Inc.", 'Phil Wood & Co.', 'Philadelphia Consolidated Holding Corp.', 'Brooklyn Federal Bancorp, Inc.', 'Aviza Technology, Inc.', 'Parker Drilling Company', 'Editorial Projects in Education', 'Aurelio Resource', 'University of Stuttgart', 'Norwood Financial Corp.', 'KNBT Bancorp, Inc.', 'Christopher & Banks', 'CorVel Corp.', 'Royal Astronomical Society', 'Techwell, Inc.', 'Par Pharmaceutical', 'University of Georgia', 'Checkpoint Systms, Inc.', 'Luna Innovations', 'Stolper Fabralloy Company', 'ExpressJet', 'BOK Financial Corporation', 'Celanese', 'VF Corporation', 'Across America Real Estate', 'Morehouse School of Medicine', 'Entercom', 'Synta Pharmaceuticals Corp.', 'Dubai Petroleum Co', 'Pennichuck Corporation', 'Oakley, Inc.', 'U-Haul', 'Becton Dickinson', 'National Dentex Corporation', 'Compuware', 'Synalloy Corporation', 'McAfee', 'Pemco Aviation Group, Inc.', 'Rockville Financial, Inc.', 'D. R. Horton', 'Quovadx', 'Adherex Technologies Inc', 'Hospital da Beneficência Portuguesa', 'Peoples Financial Corporation', 'University of Texas at Austin', 'Telnor', 'Seacoast Banking Corporation of Florida', 'Presidential Life Corporation', 'Monroe Bank and Trust', 'J.Crew', 'American Claims Evaluation, Inc.', 'Amphenol', "P. F. Chang's China Bistro", 'Sirtris Pharmaceuticals, Inc.', 'Union Bankshares Corporation', 'PetSmart', 'SuperMedia', 'Summit Financial Group, Inc.', 'Pier 1 Imports', 'Chicago Bridge & Iron Company N.V.', 'GSC Acquisition Company', 'AVI BioPharma International Ltd', 'Peoples Bancorp', 'Century Petroleum', 'Blitz Distribution', 'BTP Information Services', 'Flowserve', 'Viad', 'Emclaire Financial', 'Dow Chemical Company', 'Opsware', 'Crown Holdings', 'Valero LP', 'First Regional Bancorp', 'Compaq', 'JPMorgan Chase Foundation', 'Huntmountain Resources', 'Thermage', 'J. Alexanders Cp', 'Apollo Group', 'Pizza Hut', 'Hampden Bancorp, Inc.', 'Peoples Gas', 'LogicVision', 'Lance Inc.', 'Vocalscape Networks', 'Rural Metro', 'Electronic Arts', 'Crystal River Capital Inc.', 'Websense', 'Vignette', 'VZnet Netzwerke Ltd.', 'Broadcom', 'J.H Media', 'McKesson Corporation', 'TCF Financial Corporation', 'Middleby Corporation (The)', 'Federal Reserve Bank of Cleveland', 'Six Flags', 'ev3 Inc.', 'A. Schulman, Inc.', 'UIL Holdings Corporation', 'Atlas Pipeline Partners, L.P.', 'Adams Golf', 'Horace Mann Educators Corporation', 'MDI, Inc.', 'Trimble Navigation', 'Chinook Consulting Services', 'Zoran Corporation', 'GTSI Corp.', 'Unicon Research Corporation', 'Exide Technologies', 'Ireland', 'DuPont', 'Harris Interactive Inc.', 'AngioDynamics, Inc.', 'Royal Gold, Inc.', 'University of Connecticut', 'Merge Healthcare Inc.', 'EPEST', 'Hersha Hospitality Trust', 'Bayou City Exploration', 'New York Herald Tribune Company', 'Penske Automotive Group', 'Marten Transport, Ltd.', 'Pentair', 'Atlantis Plastics, Inc.', 'Coleman Cable, Inc.', 'Mentor Graphics', 'Eldorado Artesian Springs', 'Canadian Tourism Commission', 'Arch Capital Group Ltd.', 'Busey Bank', 'XELR8 Holdings, Inc.', 'Tribe Communications', 'ACCO Brands', 'Equicap', 'Luminent Mortgage Capital Inc', 'Pxre Group', 'Microvision, Inc.', 'Fractal Capital', 'QAD Inc', 'Tenet Healthcare', 'CSP Inc.', 'AT&T', 'BNC Bancorp', 'Ascent Solar Technologies, Inc.', 'Nicholas Financial', 'Financial Institutions, Inc.', 'Senomyx', 'Neuralstem, Inc.', 'Cass Information Systems, Inc', 'GP Strategies Corporation', 'Hasbro', 'Targa Resources Partners LP', 'Ann Taylor', 'NPS Pharmaceuticals, Inc.', 'Osiris Therapeutics, Inc.', 'American Shipping Company', 'Unocal Pipeline Company', 'Black Hills Corporation', 'OfficeMax', 'Freeport-McMoRan', 'Novation Companies', 'C-COR', 'Centennial Communications Corp.', 'Crosstex Energy, Inc.', 'Ameritech Cellular', 'Entertainment Media Ventures, Inc.', 'Forest City Enterprises Inc', 'Frontier Oil', 'Fifth Third Bank', 'North State Bank', 'Domtar', 'Mobius Management Systems', 'Tredegar Corporation', "Friendly's", 'American Greetings', 'Synchronoss Technologies, Inc.', 'Firstbank Corporation', 'Irish Mag', 'United Industrial Corporation', 'Harmonix Music Systems', 'California State University, Northridge', 'Access Integrated Technologies', 'Neurobiological Technologies, Inc.', 'The Living History Center', 'Donaldson Company, Inc.', 'Charlotte Regional Medical Center', 'ICO, Inc.', 'Bank of Boston', 'Rotech Healthcare Inc.', 'TEPPCO Partners, L.P.', 'Charter Communications', 'MBIA', 'Alliance Development Group Inc', 'American Broadcasting Company', 'Capitol Broadcasting Company', 'DRS Technologies', 'InfoSonics Corp', 'Apex Bioventures Acquisition Corporation', 'GenTek, Inc.', 'Humana', 'Newgen Technologies', 'WVS Financial Corp.', 'Dime Community Bancshares, Inc.', 'Sabre Holdings', 'Medicines Company (The)', 'América Móvil', 'Baseline Oil Gas', 'Morgans Hotel Group', 'Microsmart Devices', 'Nu Horizons Electronics Corp.', 'Columbia Pictures', 'GB&T Bancshares', 'Krieble Institute', 'NYC Global Partners', 'Lithia Motors', 'End Time Train Evangelistic Ministries', 'Hastings Entertainment', 'Weldwood of Canada Ltd.', 'CVD Equipment Corporation', 'ExxonMobil Chemical Company', 'Zillow', 'UMH Properties, Inc.', 'Pride International', 'Books-A-Million', 'Foundation Coal Holdings, Inc.', "BJ's Restaurants, Inc.", 'Bel Fuse Inc.', 'Owens & Minor', 'American Home Mortgage Investment Corporation', 'Treehouse Foods, Inc.', 'Jo-Ann Stores', 'Phase Forward', 'Winmark Corporation', 'Ruddick Corporation', 'Loser Machine', 'OmniVision Technologies', 'Barr Pharmaceuticals', 'Res-Care, Inc.', 'RTI International Metals', 'Federal Reserve Bank of New York', 'InterMune, Inc.', 'Lightbridge', 'Macrochem', 'Young World Music Publishing', 'Warrantech', 'Alpha Pro Tech, Ltd.', 'Analog Devices', 'Commerce Bancorp', 'Kinetic Concepts, Inc.', 'Azul Systems', 'Endologix  Inc', 'Seneca-Cayuga Bank', 'Chartwell Re Group', 'Adesa', 'Light Management Associates', 'HBO', 'Hollywood Media Corp.', 'Cecrisa Revestimentos Cerâmicos S. A.', 'Origen Financial, Inc.', 'Darden Restaurants', 'Whiting Petroleum Corporation', 'Integrity Bancshares, Inc.', 'Nuance Communications', 'Best & Co.', 'Chiron Technologies', 'JDSU', 'Independent Bank Corporation', 'Samsonite', 'Exxon Corporation', 'CA Inc.', 'APC by Schneider Electric', 'Datawatch Corporation', 'South Jersey Industries', 'Quality Distribution, Inc.', 'GRECOventures Ltd.', 'TVI Corporation', 'Raven Gold', 'Boots and Coots International Well Control,  Inc.', 'Palmas Del Mar', 'Fox Searchlight Pictures', 'BigBand Networks', 'PerkinElmer', 'Blackboard Inc.', 'L. S. Starrett Company', 'Boston Private Financial Holdings, Inc.', 'Performance Food Group', 'Sun Hydraulics Corporation', 'Santarus, Inc.', 'Plumas Bancorp', 'Adaptec', 'NewStar Financial, Inc.', 'North American Galvanizing & Coatings Inc', 'Boston Properties', 'Hemispherx BioPharma, Inc.', 'K2 Sports', 'University of Michigan', 'Columbia Games', 'Insteel Industries, Inc.', 'Health Fitness', 'Ally Financial Inc.', 'Encysive Pharmaceuticals Inc', 'Litho Supplies', 'Cytogen Corporation', 'RightNow Technologies', 'Flextronics', '20th Century Fox', 'Penn Treaty American Corporation', 'Washington Real Estate Investment Trust', 'Rush Enterprises, Inc.', 'Geokinetics', 'Ferro Corporation', 'Caliper Life Sciences', 'Digital Insight', "People's National Party", 'Rural Cellular Corporation', 'Bell/Agusta Aerospace Company', 'ENGlobal Corporation', 'Aastrom Biosciences, Inc.', 'Arthur J. Gallagher & Co.', 'Exelixis', 'impetus Technologies', 'Mexican Restaurants, Inc.', 'Leucadia National', 'EarthLink', 'FC Bayern Munich', 'International Electronics', 'Microislet', 'MOLINA HEALTHCARE INC', 'National Education Association', 'TCW Capital Investment Corporation', 'AK Steel Holding Corporation', 'Kemper Direct', 'NextWave Wireless', 'Ark Restaurants Corp.', 'Williams College', 'FEI Company', 'T. Rowe Price', 'Allen Edmonds', 'Penson Worldwide, Inc.', 'SciClone Pharmaceuticals, Inc.', 'Universal Display Corporation', 'Rockefeller University', 'Horizon Health', 'Smurfit-Stone Container', 'Lennar Corporation', 'Parallel Petroleum Corporation', 'Bridgepoint Medical', 'Dcb Financial', 'Technicolor Network Services', 'Georgia College & State University', 'Culp, Inc.', 'IRobot', 'Peoples Financial Services', 'Pinnacle Airlines', 'Central Federal Corporation', 'Lazard', 'SBA Communications Corporation', 'ThisNext', 'Prospect Medical Hldgs Inc', 'Cytyc', 'ON COMMAND CORP', 'Energen', 'NTN Buzztime', 'Trinity Industries Inc.', 'GeoResources, Inc.', 'William Penn Foundation', 'Accuray Incorporated', 'EXL', 'Callaway Golf Company', 'Orrstown Financial Services', 'FPIC Insurance Group, Inc.', 'Northwestern Mutual', 'Integra Bank Corporation', 'RGA Associates', 'Inergy Holdings, L.P.', 'Dixie Group, Inc.', 'Hologic', 'Tollgrade Communications, Inc.', 'Dentalserv', 'CapitalSouth Bancorp', 'Peabody Energy', 'Majestic Oil Gas', 'The Andersons, Inc.', 'Investment Technology Group, Inc.', 'Penns Woods Bancorp, Inc.', 'U.S. Steel', 'Alliance Resource Partners, L.P.', 'Four Oaks Fin', 'GovTech Solutions', 'Asbury Automotive Group', 'Hercules Inc.', 'Nova Biosource Fuels, Inc.', 'John Carl Warnecke and Associates', 'TNS Inc', 'CollaGenex Pharmaceuticals, Inc.', 'Drew Industries Incorporated', 'Terax Energy', 'Acxiom', 'AsiaInfo Holdings, Inc.', 'Appleton Electric Company', 'Ramco-Gershenson Properties Trust', 'Landauer, Inc.', 'Canada Ports Corporation', 'Rofin-Sinar Technologies, Inc.', 'Omnicomm Systems', 'Gastar Exploration', 'eBay', 'Big Cat Energy', 'Shutterfly', 'Eaton Vance Tax-Managed Global', 'LaserCard Corporation', 'Quick-Med Technologies', 'Interactions, Inc.', 'Micro Component Technology', 'Fayne Levinson Associates', 'Analex', 'CIGNA High Income Shares', 'Fidelity Dd Bank', 'PAR Technology Corporation', 'Citi Trends', 'Casual Male Retail Group', 'Gutfreund & Company, Inc.', 'HMN Financial, Inc.', 'Uranium Resources, Inc.', 'Setton Farms', 'Dynacq Healthcare, Inc.', 'AEP Industries Inc.', 'Vail Resorts', 'O2Diesel Corporation', 'General Electric', "Women's National Basketball Association", 'Pokertek', 'Banana Republic', 'NASB Financial Inc.', 'Vertical Branding', 'Camco Financial Corporation', 'Environmental Tectonics Corp.', 'Imperva', 'KapStone Paper and Packaging Corporation', 'Gillies Coffee Company', 'Edwards Lifesciences Corporation', 'Anadys Pharmaceutical', 'TranSwitch Corporation', 'Oceanaut, Inc.', 'Affiliated Computer Services', 'American Psychological Association', 'Oppenheimer Holdings, Inc.', 'Cummins', 'Belo Corporation', 'Pacific Ethanol, Inc.', 'West Pharmaceutical Services, Inc.', 'Applera Corporation', 'Auburn National Bancorporation, Inc.', 'Security Bank Corporation', 'TotalMove, Inc.', 'Strategic Hotels & Resorts Inc', 'Skyline Oil Company', 'Oculus Innovative Sciences, Inc.', 'Financial Federal Corporation', 'Emergency Filtration Products', 'Harvey Mudd College', 'Sistema', 'SFN Group', 'GFI Group', 'Darwin Professional Underwriters, Inc.', 'On Point Development LLC', 'Evercore Partners', 'Gottschalks', 'Veraz Networks', 'Fortune Brands', 'Sovereign Bank', 'Kimberly-Clark', 'Central Vermont Public Service Corporation', 'MDU Resources Group, Inc.', 'Airspan', 'Volcom', 'American Property Investors, Inc.', 'Teledyne Technologies International Corp', 'Vulcan', 'Arc Wireless Solutions, Inc.', 'First Community Corporation', 'Altera', 'Tech Data Corporation', 'Flagstar Bank', 'Animal Health International, Inc.', 'Courtside Acquisition', "Dillard's", 'Atmos Energy', 'Digital Music Group, Inc.', 'Worldstar Energy', 'Premiere Global Services, Inc.', 'Southwest Casino', 'Kormah Development and Investment Corporation', 'ISTA Pharmaceuticals, Inc.', 'Goodman Global', 'GM Japan', 'DCAP Group Inc', 'CoTherix', 'Morgan Creek Energy', 'Golden Cycle Gold', 'Jazz Pharmaceuticals, Inc.', "Macy's Inc.", 'Met-Pro Corporation', 'U.S. Bancorp', 'Angelica Corporation', 'Arzu Inc.', 'Immune Response', 'Sonic Automotive', 'Corrections Corporation of America', 'ESB Financial Corporation', 'Hudson Valley Holding', 'AutoZone', 'OSI Restaurant Partners', 'Global Employment Holdings', 'Smart Online', 'Sunstone Hotel Investors, Inc.', 'Digital Lightwave', 'American Enterprise Development', 'International Paper', 'Southwestern Bell', 'Mission Viejo Company', 'Discover Card', 'SMART Modular Technologies (WWH), Inc.', 'Protalix BioTherapeutics, Inc.', 'Diamond Management & Technology Consultants', 'Superior Uniform Group, Inc.', 'Maysles Films Inc.', 'Puget Sound Energy', 'Kentucky First Federal Bancorp', 'TOM Online', 'GlobalSantaFe Corporation', 'ArthroCare Corporation', 'Mackinac Financial Corporation', 'C1-Ice', 'Western Digital', 'First South Bancorp Inc', '4Licensing Corporation', 'Balchem Corporation', 'Workstream Inc.', 'Transmontaigne Partners L.P.', 'Nucor', 'Dresser-Rand Group Inc.', 'Immunicon Corporation', 'Amicus Therapeutics', 'Universal Corporation', 'Bryan Foods', 'Washington Trust Bancorp, Inc.', 'National Amusements', 'CCA Industries, Inc.', 'The Manitowoc Company', 'Patriot National Bancorp Inc.', 'Connecticut Water Service, Inc.', 'Cel-Sci Corporation', 'DigitalEurope', 'Credence Systems', 'Avocent', 'Buckle', 'Crane Co.', 'Versar, Inc.', 'Fox Chase Bancorp, Inc.', 'Dycom Industries, Inc.', 'Liberty Media Corporation', 'Hawaiian Airlines, Inc.', 'Jmar Technologies', 'DLD Family Investments', 'Allied Waste Industries', 'UAL Corporation', 'Genta', 'PLC Systems Inc.', 'Dean Foods', 'Norfolk Southern Corp.', 'Middle East Studies Association of North America', 'INTL FCStone', 'Orexigen Therapeutics, Inc.', 'MetroPCS Communications, Inc.', 'Enzo Biochem, Inc.', 'Staples Inc.', 'Bard College', 'Synthemed', 'dj Orthopedics Inc', 'STAAR Surgical Company', 'TASER International', 'Denbury Resources, Inc. (Holding Company)', 'Simon Property Group', 'Direct General', 'PVF Capital Corp.', 'Stride Rite Corporation', 'Cell Therapeutics, Inc.', 'Solitario Resources Corporation', 'Oregon Pacific Bank', 'Millipore Corp.', 'American Express', 'Provident New York Bancorp', 'Taleo', 'Qualcomm', 'Triad Guaranty Inc.', 'Cimarex Energy Co', 'Stratos International', 'Taco del Mar', 'Roper Industries', 'Naturalnano', 'CECO Environmental Corp.', 'DressBarn', 'Office Depot', 'Partners Trust Financial Group, Inc.', 'Frost Bank', 'Middlebury College', 'Advanced Micro Devices', 'World Acceptance Corporation', 'Stockgroup Information Systems Inc.', 'Principal Financial Group', 'First Community Bancshares, Inc.', 'Bergen Brunswig Corporation', 'TradeStation Group Inc', 'RF Micro Devices', 'Chemed Corp.', 'Avatar Holdings Inc.', 'JanSport', 'Superior Offshore International, Inc.', 'Cyberkinetics Neurotechnology', 'Seligman LaSalle International Real Estate Fund, Inc.', 'Waste Services, Inc.', 'GenCorp', 'Xoma Corporation', 'BancTrust Financial Group, Inc.', 'Cognizant', 'JWS Associates, LLC', 'GSI Commerce', 'AT&T Alascom', 'Aon Hewitt', 'Bharatiya Janata Party', 'LCC International, Inc.', 'Starwood Hotels & Resorts Worldwide', 'Veramark Technologies', 'Tufts University', 'FBR Capital Markets Corporation', 'Mutual Federal Bank', 'Dentsply', 'Impac Mortgage Holdings, Inc.', 'Enherent', 'General Cable Corporation', 'LeMaitre Vascular, Inc.', 'Intervest Bancshares Corp.', 'Hittite Microwave Corporation', 'Tokyo Zokei University', 'Keytoon Inc. - Tot Industries', 'Pacific Mercantile Bancorp', 'Advanced Medical Optics', 'Bakers Footwear Group, Inc.', 'Smith-Midland', 'Torbay Holdings', 'Kf Industries Holdings', 'Akeena Solar, Inc.', 'Neogen Corporation', 'Polaris Industries', 'Enterprise Bancorp Inc', 'Datalink Corporation', 'Isis Pharmaceuticals, Inc.', 'Service First Bank', 'Cameron International', 'Grupo Itamarati', 'CoreStates Financial Corporation', 'Image Sensing Systems, Inc.', 'Surrey Bank', 'Salary.com', 'XL Capital Ltd.', 'Aventine Renewable Energy Holdings Inc.', 'Neurometrix', 'eJNJ, LLC', 'Electro-Sensors, Inc.', 'Advanced Energy', 'Terex', 'Cutera, Inc.', 'Penn Virginia Resource Partners LP', 'First Industrial Realty Trust, Inc.', 'Harleysville Group', 'Sbt Bank', 'Chicopee Inc.', 'Stereotaxis, Inc.', 'EnerNOC', 'Softbank International Ventures', 'W Holding Company', 'MakeMusic', 'IntercontinentalExchange', 'R. R. Donnelley & Sons Company', 'USA Mobility, Inc.', 'BioSphere Medical, Inc.', 'GST Whole Earth Networks', 'Genomic Health Inc.', 'Communitysouth Bancshares', 'TOPS', 'Lone Star Steakhouse & Saloon', 'Gamesa', 'Interactive Data Corporation', 'WorldWinner.com', 'Peregrine Pharmaceuticals Inc.', 'Robert Half International', 'LaBarge, Inc.', 'Alexander & Baldwin', 'LifePoint Hospitals, Inc.', 'Best Buy', 'Midwest Banc Holdings, Inc.', 'Kiva', 'Execute Sports', 'Cohu, Inc.', 'Colonial Intermediate High Income Fund', 'Calumet Specialty Products Partners, L.P.', 'Longs Drugs', 'Synthes', 'MGM Resorts International', 'Psychiatric Solutions, Inc.', 'Mad Catz Interactive Inc', 'Beacon Power Corporation', 'Team, Inc.', 'ITW', 'United Therapeutics Corporation', 'US Airways Group', 'Accuride Corporation', 'PowerSecure International, Inc', 'M/I Homes', 'Brookdale Senior Living', 'Rockefeller Foundation', 'Beverly National Corporation', 'Wausau-Mosinee Paper Corporation', 'Concur Technologies', 'Midwest Air Group', 'Jackson Hewitt Tax Services', 'Refac Optical Group', 'IBM', 'Arbitron', 'SVB Financial Group', 'Wright Express Corporation', 'Clinical Data, Inc.', 'Cardica, Inc.', 'Newnan Coweta Bancshares', 'CRM Holdings, Ltd.', 'Micromet, Inc.', 'Halozyme Therapeutics', 'Charles Schwab Corporation', 'United Savings', 'Saul Centers, Inc.', 'La Jolla Pharmaceutical Company', 'CalAmp Corp.', 'Peapack-Gladstone Financial Corporation', 'Harrington West Financial Group, Inc.', 'Carnival Corporation & plc', 'TRW Automotive Holdings', 'Kindred Healthcare', 'Social Science Research Council', 'American Dream Films', 'First Midwest Bancorp, Inc.', 'Century Casinos, Inc.', 'Alfa Corporation', 'Vista Gold Corporation', 'Digital Imaging Resources', 'Human Biosystems', 'Trans World Entertainment', 'Blue Holdings, Inc.', 'Brown & Brown, Inc.', 'Southwest Georgia Financial Corporation', 'Allegheny Technologies', 'Team Financial, Inc.', 'Neoware', 'RenaissanceRe Holdings Ltd.', 'Golf Galaxy', 'Tractor Supply Company', 'New York City Transit Authority', 'Associated Content', 'Southern Union Company', 'St. Mary Land', 'National Beverage', 'Atlantic Coast Federal Corporation', 'CONMED Corporation', 'American Medical Alert Corp.', 'Rackable Systems, Inc.', 'Cirrus Logic', 'Armor Holdings', 'Legacy Communications', 'Health Systems Integration Inc', 'Metropolitan Broadcasting Company', 'Noble Energy Inc.', 'The Evergreen State College', 'Alliance Data Systems Corporation', 'ThinkEngine Networks, Inc.', 'Ultimate Fighting Championship', 'NBT Bancorp Inc.', 'Telephone and Data Systems', 'Manakoa Services', 'ESSA Bancorp, Inc.', 'Dow Jones & Company', 'American Pacific Corporation', 'Carnival Cruise Lines', 'Gray Television', 'Zweig Total Return Fund, Inc. (The)', 'France', 'Comerica', 'Noble Corporation', 'Inovio Biomedical Corporation', 'Vishay Intertechnology, Inc.', 'TSV 1860 München', 'Spansion', 'Natural Health Trends Corporation', 'Sun Healthcare Group, Inc.', 'NALA Films', 'Delek US Holdings, Inc.', 'SunOpta', 'Mayflower Bancorp, Inc.', 'Tektronix', 'Intel Capital', 'LEXINGTON REALTY TRUST', 'BICC Data Networks', 'World Bank', 'MEMC Electronic Materials, Inc.', 'Cape Fear Bank Corporation', 'Discovery Holding Company', 'Practical Solutions, Inc.', 'CBS News', 'Southern Pacific Transportation Company', 'Caremark Rx', 'Western Alliance Bancorporation', 'State University of New York at Purchase', 'Towerstream Corporation', 'First United Corporation', 'Hewlett-Packard', 'Outdoor Channel Holdings, Inc.', 'World Wide Fund for Nature', 'SofTech, Inc.', 'Kirby Corporation', 'National Datacomputer', 'Hawk Corporation', 'Union Street Acquisition Corp', 'Reliance Anil Dhirubhai Ambani Group', 'Chesapeake Corporation', 'Covenant Transportation Group, Inc.', 'Delphi Financial Group, Inc.', 'Ralcorp', 'Cardinal Financial Corporation', 'Advance Internet', 'Exponent, Inc.', 'Noven Pharmaceuticals, Inc.', 'New Edge Networks', 'Point.360 (New)', 'TransAct Technologies Incorporated', 'Fnb Bank', 'Advertising.com', 'Public Strategies', 'PECO II, Inc.', 'Wake Forest Bancshares', 'The J.M. Smucker Company', 'American Bank', 'Pillsbury Company', "Sotheby's", 'Amarillo Biosciences', 'Cypress Semiconductor', 'Giant Industries', 'Questcor Pharmaceuticals', 'Spectra Energy', 'Interspan Communications', 'RPM International Inc', 'Kayne Anderson MLP Investment Company', 'Watson Pharmaceuticals', 'Northrop Grumman', 'Guidance Software', 'Acacia Research Corporation', 'MFS California Insured Municipal Trust', 'Williams Scotsman Internationa', "Rita's Italian Ice", 'Groen Brothers Aviation', 'United Fuel Energy', 'Seesportclub Berlin Grünau', 'Fuji Television', 'Washington Planagraph Co.', 'IntegraMed America, Inc.', 'Sagemark Companies', 'Oklahoma Gas & Electric', 'Potomac Bancshares', 'Synovis Life Technologies', 'Center Financial Corporation', 'Boston Communications Group', 'Petrohawk', 'Centex', 'Sunoco', 'Keystone Bridge Company', 'Xerium Technologies, Inc.', 'Cascade Financial Corp.', 'Simpson Manufacturing Company, Inc.', 'American Financial Realty Trust', 'Online Vacation Center Holding', 'Regeneration Technologies, Inc.', 'Neonode Inc', 'MB Financial Inc.', 'BMC Software', 'FelCor Lodging Trust Incorporated', 'Millennium Cell Inc.', 'Watson Wyatt Worldwide', 'Aetna', 'Warner Bros. Television', 'Realty Income Corporation', 'Oil States International, Inc.', 'Bio-Imaging Technologies, Inc.', 'Cobalis', 'Union Dental Holdings', 'Insperity', 'Southern Community Financial Corporation', 'First Northern Community Banco', 'CombiMatrix', 'GEO Group', 'Salem Communications', 'Patrick Industries, Inc.', 'Social Signal', 'Ziff Davis', 'Microsemi Corporation', 'Bryn Mawr Bank Corporation', 'Bio-Reference Laboratories, Inc.', 'Advanced Analogic Technologies, Inc.', 'The Bank Holdings, Inc.', 'Comertel Argos', 'Gentherm', 'Candela Corp', 'Bright Horizons Family Solutions Inc.', 'Far East Energy', 'Whole Foods Market', 'Packaging Corporation of America', 'Resource Capital Corp.', 'Martin Midstream Partners L.P.', 'Leadis Technology', 'Gottaplay', 'Peebles', 'Bucs Financial', 'Star Banc Corporation', 'Mid-Atlantic Cardiothoracic Surgeons Ltd.', 'Pharmacyclics', 'Atlas America, Inc.', 'Praxair', 'Hoku Scientific, Inc.', 'American Land Lease, Inc.', 'Association of Confindustria Young Entrepreneurs', 'Polymedix', 'Avaya', 'CoStar Group', 'Anesiva', 'PacifiCare Health Systems', 'Sourcefire', 'CVS Corporation', 'MetroPCS Inc', 'Susquehanna Bancshares, Inc.', 'Parker Hannifin', 'Computer Programs and Systems, Inc.', 'Capitol Bancorp Ltd.', 'Portfolio Recovery Associates, Inc.', 'Motorola Broadband Communications Sector', 'Innovive Pharmaceuticals', 'Inbursa', 'EXACT Sciences Corporation', 'Toreador Resources Corporation', 'Johnson & Johnson - Merck Consumer Pharmaceuticals Company', 'Sangamo BioSciences, Inc.', 'RCN Corporation', 'Atlanta Gas Light', 'Regency Centers Corporation', 'Mines Management, Inc.', "BJ's Wholesale Club", 'eCollege', 'Skechers', 'Bioanalytical Systems, Inc.', 'Rewards Network', 'Verenium Corporation', 'Citizens First Bancorp, Inc.', 'Efficient Frontier', 'Pangea Petroleum', 'BNE Baystate', 'Strayer Education, Inc.', 'Volterra Semiconductor Corporation', 'Quanta Services', 'Firstbank Financial Services', 'Monroe Bancorp', 'EXCO Resources, Inc.', 'EQT', 'Seoul Design Center', 'Pure Cycle Corporation', 'Footstar', 'Savannah Bancorp, Inc. (The)', 'Laurence Capital Corporation', '3Dlabs', 'PMA Capital Corporation', 'InnerWorkings', 'ImmuCell Corporation', 'Myspace', 'Ultra Petroleum Corp.', 'Procyon', 'Shiloh Industries, Inc.', 'Corillian', 'Vion Pharmaceuticals, Inc.', 'Lexon Technologies', 'Consumers Bank', 'Align Technology', 'Element Skateboards', 'Cynosure, Inc.', 'Citizens Against Government Waste', 'Harbicht Research Inc', 'J. C. Penney', 'Northern Indiana Public Service Company', 'The Timberland Company', 'Baker Hughes', 'Big Lots', 'Nyenrode Business Universiteit', 'BTU International, Inc.', 'Amylin Pharmaceuticals', 'Marriott International', 'CSG Systems International, Inc.', 'WesBanco', 'Idexx Laboratories', 'RAM Energy Resources, Inc.', 'Teradyne', 'Carbo Ceramics, Inc.', 'Bill Barrett Corporation', 'Centennial Bank Holdings, Inc.', 'Myriad Genetics, Inc.', 'Bioject Medical Technologies Inc.', 'Microchip Technology', 'Zweig Fund, Inc. (The)', 'First Commonwealth Financial Corporation', 'Uroplasty, Inc.', 'K-Swiss', 'Fuqi International, Inc.', 'Wheeling-Pittsburgh Corporation', 'LaSalle Steel Company', 'Cott', 'XTENT', 'MCM', 'Redback Networks', 'Northeast Utilities', 'Baldwin Technology Company, Inc.', 'Matritech, Inc.', 'CNA Financial', 'Corinthian Colleges International, Inc.', 'Hayes Lemmerz International, Inc.', 'GSI Technology, Inc.', 'Hibbett Sports', 'Finlay Enterprises', 'Radio Free Europe/Radio Liberty', 'Fossil, Inc.', 'Boston Chicken, Inc', "The Sick Children's Trust", 'Harris Corporation', 'Morgan Stanley', 'Furniture Brands International', 'Dot Hill Systems Corporation', 'Omega Financial Corporation', 'Biolife Solutions', 'Poly-Flex Circuits', 'McDermott International, Inc.', 'Reptron Electronics', 'Greene County Bancorp, Inc.', 'Monotype Imaging Holdings Inc.', 'Med Gen', 'Erie Insurance Group', 'Guess?, Inc.', 'Kansas City Southern Railway', 'Severn Bancorp Inc', 'Conceptus Inc.', 'Atlantic Syndication Networks', 'Social Project, Inc.', 'Institute of Medicine', 'Meruelo Maddux Properties, Inc.', 'MEDecision, Inc.', 'Newfield Exploration Company', 'Pinnacle Bankshares', 'Security With Advanced Technology, Inc.', 'Broadstripe', 'Zattoo', 'Multicell Technologies', 'Lifeway Foods, Inc.', 'Amazon.com', 'EMS Technologies', 'Macerich', 'EDO Corporation', 'Duke Energy', 'The Martin Hall Group, LLC', 'The McClatchy Company', 'Modtech Holdings Inc.', 'Rotonics Manufacturing', 'NCI, Inc.', 'ProLogis', 'Washington Food Brokers Association', 'United States Enrichment Corporation', 'USANA Health Sciences', 'True Religion', 'Strayform', 'Central European Distribution Corporation', 'Global Industries, Ltd.', 'Polypore International Inc', 'UnumProvident', 'Jack in the Box', 'UniFirst Corporation', 'Competitive Technologies, Inc.', 'Motorola Mobility Holdings, Inc.', 'GEOPETRO RESOURCES CO', 'SenoRx, Inc.', 'Bladelogic', 'Synopsys', 'Weyco Group, Inc.', 'Active Power, Inc.', 'Boston and Maine Corporation', 'Navteq', 'Exxon Mobil', 'Atlantic Council', 'Oncology Therapeutics Network', 'Steelcase', 'Mobile Mini', 'Walla Walla University', 'Citizens, Inc.', "Aaron's, Inc.", 'MMK Managing Company', 'Kosan Biosciences', 'ZipRealty', 'Csb Bank', 'ITC Holdings Corp.', 'Acusphere, Inc.', '24/7 RealMedia', 'ADVENTRX Pharmaceuticals, Inc.', 'SWS Group, Inc.', "Kohl's", 'First Clover Leaf Financial Corp.', 'Viacom', 'Palm', 'Multi-Color Corporation', 'Assurant', 'Delta Apparel, Inc.', 'Sabritas', 'Windward Mark Interactive, LLC', 'Insightful Corporation', 'MDC Partners Inc.', 'Alleghany Corporation', 'Wet Seal, Inc. (The)', 'Hugg-a-Planet', 'GAMCO Investors', 'Former Political Prisoners Association', 'Henry Schein', 'Core-Mark Holding Company, Inc.', 'Warren Petroleum Company', 'Florida Power & Light', 'Hungarian Football Federation', 'Badger Meter, Inc.', 'H&R Block', 'Safenet', 'Boyd Gaming', 'Art Technology Group', 'H. B. Fuller', 'PayPal', 'Old Point Financial Corporation', 'Walt Disney Animation Studios', 'AmeriServ Financial Inc.', 'Mettler-Toledo International, Inc.', 'Tesco Corporation', 'Viacom Media Networks', 'Socket Mobile, Inc.', 'Unigene Laboratories', 'Labor Party', 'SAP America', 'Solomon Technologies', 'American Assets, Inc.', 'Steven Madden, Ltd.', 'Chipotle Mexican Grill', 'Parke Bancorp, Inc.', 'Raytheon Technical Services Company', 'QCR Holdings, Inc.', 'Calistoga Pharmaceuticals', 'SavMart', 'Pixelworks', 'Alexandria Real Estate Equities, Inc.', 'Gs Cleantech', 'Covidien Ltd.', 'Lesco', 'Commerce Group, Inc. (The)', 'Kentucky Investors', 'Kreisler Manufacturing Corporation', 'Ciena', 'Blogrolling.com', 'Delta Petroleum Corporation', 'Rmk High Income Fund', 'First American Corporation', 'Bluegreen Corporation', 'First California Financial Group, Inc.', 'StockerYale Inc.', 'Todco', 'Standard Pacific Homes', 'Ecosphere Technologies', 'Express-1 Expedited Solutions, Inc.', 'Brush Engineered Materials Inc.', 'Lincoln National Corporation', 'Mid-Florida Radio Corporation', 'White River Capital, Inc.', 'First of Long Island Corporation (The)', 'Ness Technologies', 'Western National Bank of New York', 'DTE Energy', 'Sears Holdings', 'FormFactor', 'Meharry Medical College', 'Plains All American Pipeline', 'AbioMed', 'Orthofix International N.V.', 'Rayspan', 'Capstone Electronics', 'Osage Bancshares, Inc.', 'Convergys', 'A.D.A.M. Inc.', 'Willamette Valley Vineyards', 'Cabot Microelectronics Corporation', 'Cavium Networks', 'Eagle Test Systems', 'Elecsys Corporation', 'Timken Company', 'Psychemedics Corporation', 'Kango', 'Talx', 'Aes Trust', 'State Bancorp, Inc.', 'Magnetek, Inc.', 'National Association of Broadcasters', 'YRC Worldwide', 'Cover-All Technologies', 'Tapestry Pharmaceuticals, Inc.', 'Radio One, Inc.', 'American Oil & Gas, Inc.', 'Theragenics Corporation', 'Pharmacopeia', 'BankAtlantic Bancorp, Inc.', 'Carlisle Companies', 'Pittsburgh Broadcasting Company', 'Parkway Properties, Inc.', 'Northwest Airlines', 'Advanta', 'Oppenheimer Funds, Inc.', 'Universal Compression Holdings', 'AVANIR Pharmaceuticals', 'Rite Aid', 'Deep Ripples Inc', 'McMoRan Exploration Company', 'Reinsurance Group of America, Incorporated', 'Lattice Semiconductor', 'LivePerson, Inc.', 'MathStar, Inc.', 'Fremont General Corporation', 'Camden National Corporation', 'Ames National Corporation', 'Orthologic Corp.', 'Pw Eagle', 'ATP Oil and Gas', 'UGI Corporation', 'Genesee & Wyoming, Inc.', 'LNB Bancorp, Inc.', 'Joy Global Inc.', 'Powerwave Technologies, Inc.', 'JMP Group Inc', 'Corn Products International, Inc.', 'Move Inc.', 'Omnicare', 'IBC Vehicles', 'Alcoa Aluminio', 'Chevron Canada Ltd.', 'Dover Downs Gaming & Entertainment Inc', 'Local.com Corporation', 'PICO Holdings Inc.', 'Green Bankshares, Inc.', 'GameStop', 'Westwood Holdings Group Inc', 'Central Parking', 'Chubb Corp.', 'Goodyear Tire and Rubber Company', 'Acme United Corporation.', 'Terremark Worldwide, Inc.', 'Constellation Energy', 'Alexza Pharmaceuticals', 'National Collegiate Athletic Association', 'Ultra Clean Holdings, Inc.', 'Smith International, Inc.', 'Pacific Alliance', 'Enterprise Financial Services Corporation', 'Moscow Cablecom', 'Huttig Building Products, Inc.', 'Church & Dwight', 'Response Genetics, Inc.', 'Digitas', 'Jack Henry & Associates, Inc.', 'Waste Management, Inc', 'Girl Distribution Company', 'CIT Group Inc (DEL)', 'Illinois Tool Works', 'Thomas Properties Group', 'Netopia', 'Venezuela Foods', 'Silgan Holdings, Inc.', 'Levitt Corporation', 'St. Jude Medical', 'Colonial Intermarket Income Trust I', 'InPhonic', 'Atchison, Topeka and Santa Fe Railway', 'Earth Biofuels', 'Honeywell', 'Isonics Corporation', 'EGain', 'Exactech, Inc.', 'Ingersoll Rand', 'Oceaneering International', 'Riverbed Technology, Inc.', 'General Parts, Inc.', 'A.P. Pharma, Inc.', 'PC Mall, Inc.', 'Shenandoah Telecommunications Co', 'Australian Oil Gas', '1st Source', 'Midas', 'Quadra Realty Trust, Inc.', 'Champion Industries, Inc.', 'Brandeis University', 'Lennox International', 'Imperial Capital Bancorp, Inc.', 'Luminex Corporation', 'PetMed Express, Inc.', 'Golden Patriot', 'American River Bankshares', 'SUAL Group', 'Landec Corporation', 'Cooper Tire & Rubber Company', 'AeroCentury Corp.', 'Columbia  Bancorp', 'SM&A', 'Alcan Aluminum Corporation', 'Emcor', 'Hooker Furniture Corporation', 'Association Scientifique International du Cafe', 'Navigant Consulting, Inc.', 'Stratus Properties, Inc.', 'Wildcat Service Corporation', 'SiberConsulting LLC', 'New Jersey Mining', 'Nektar Therapeutics', 'Multi-Fineline Electronix, Inc.', 'Dataram Corporation', 'Stratus Services Group', 'Equity Inns', 'Legacy Reserves LP', 'Autism Speaks', 'Weis Markets', 'Wright Medical Group, Inc.', 'California Water  Service Group Holding', 'BellSouth', 'Infogroup', 'Ceridian', 'British American Business', 'Dell', 'Tortoise North American Energy Corporation', 'Autodesk', 'FuelCell Energy, Inc.', 'MeadWestvaco', 'Sharps Compliance', 'U.S. Concrete, Inc.', 'Neurologix', 'Aetrium Incorporated', 'Life Time Fitness', 'Tyson Foods', 'Colony Bankcorp, Inc.', 'Georgia Perimeter College', 'Lawrenceville Plasma Physics', 'Donna Karan International', 'Live Nation', 'Greatbatch Inc', 'Repligen Corporation', 'Hakluyt Society', 'Allstate Life Insurance Co. of New York', 'Screen Actors Guild', 'Arbor Realty Trust', 'Vistula Communications Service', 'Ikanos Communications', 'Us 1 Industries', 'Stratagene', 'Wells-Gardner Electronics Corporation', 'WebSideStory', 'PeerMe', 'Verint', 'Flow International Corporation', 'John Randolph Haynes and Dora Haynes Foundation', 'General Growth Properties', 'Impart Media Group', 'Brady Corporation', 'Gardner Denver, Inc.', 'Central Garden & Pet Company', 'Forest Oil Corporation', 'VSB Bancorp, Inc. (NY)', 'Vast', 'Confindustria', 'Haier', 'ManTech International', 'Toyota Motor Sales, U.S.A., Inc.', 'Whistle Communications', 'Liberty Global, Inc.', 'Immtech International Inc.', 'Spartan Motors', "South Indian Film Artistes' Association", 'Jakks Pacific', 'Uci Medical Affiliates', 'Independent Bank Corp.', 'Inland Real Estate Corporation', "Lowe's", 'Mortgage Guaranty Insurance Corporation', 'Play-Well TEKnologies', 'Oneida Financial Corp.', 'CAPITALSOURCE INC', 'Farm Sanctuary', 'Edward J. Minskoff Equities, Inc.', 'Borland', 'Avanex', 'EMC Corporation', "Brink's", 'WJ Communications, Inc.', 'Burger Time', 'International Absorbents Inc.', 'Midwestone Financial Group', 'Vastar Resources', 'Paid Inc', 'Alawar Entertainment', 'Corporate Office Properties Trust', 'Calamos Global Total Return Fund', 'Security Federal', 'Evergreen Solar, Inc.', 'Investors Savings and Loan of Pasadena', 'Authentec, Inc.', 'La la media, inc.', 'Marine Products Corporation', 'CharterMac', 'Asia Pacific Fund, Inc. (The)', 'Provident Bankshares Corporation', 'LoJack', 'Zapata Corporation', 'ICT Group, Inc.', 'ABC Cable Networks Group', 'International Brotherhood of Teamsters', 'The York Water Company', 'GeoEye', 'Access National Corporation', 'Alaska Communications', 'Mountain National Bancshares', 'Champlain College', 'Canandaigua National', 'Altiris', 'Valley National Bank', 'Lightfoot Capital Partners', 'Akamai Technologies', 'Sunoco Logistics Partners LP', 'Southeast Toyota Distributors', 'Valentis', 'Hudson Technologies, Inc.', 'Blyth Inc.', 'First Community Bank Corporation of America', 'US West', 'American Association for the Advancement of Science', 'Ruby Tuesday', 'Enhanced Vision Systems', 'Fifth & Pacific Companies, Inc.', 'Medco Health Solutions', 'Otter Tail Corporation', 'Nationwide Health Properties, Inc.', 'Consolidated Edison', 'Sparta Commercial Services', 'Tortoise Capital Resources Corporation', 'Federal Agricultural Mortgage Corporation', 'First Charter Corporation', 'Allison Transmission', 'Tejon Ranch Company', 'MyToons', 'M.D.C. Holdings, Inc.', 'Dune Energy, Inc.', 'FNB Corporation', 'Einstein Noah Restaurant Group, Inc.', 'Highwoods Properties, Inc.', 'CMC Electronics', 'SQRIBE Technologies', 'Commercial Metals Company', 'Homebanc', 'Qualstar', 'New Alliance Party', 'Hennessy Advisors', 'Chart Industries, Inc.', 'Aqua America, Inc.', 'Commonwealth Telephone Enterpr', 'JM Lexus', 'Metro One Telecommunications', 'BlackRock', 'Synovus', 'Archstone', 'Gene Logic Inc.', 'Gap Inc.', 'Howard G. Buffett Foundation', 'Equity Lifestyle Properties, Inc.', 'Biodel Inc.', 'Income Opportunity Realty Trust', 'EpiCept Corporation', 'Pacer International', 'Quantum Group', 'Union Cycliste Internationale', 'Vitran Express', 'Cascade Bancorp', 'Bank Shares, Inc', 'CDI Corporation', 'Bestnet Communications', 'EnergySouth, Inc.', 'Premier Development Investment', 'Serefex', 'Smartvideo Technologies', 'Ampal-American Israel Corporation', 'Applied Digital Solutions', 'Mel Kiper Enterprises', 'CTI Industries Corporation', 'Molson Coors Brewing Company', 'Atlantic Underwriters Agency', 'Verigy', 'Windward Mark Interactive', 'NATCO Group', 'SGX Pharmaceuticals', 'Liberty Property Trust', 'American Library Association', 'QLT Inc.', 'ExxonMobil Development Company', 'Houston Wire & Cable Company', 'Progress Energy Inc', 'National Public Affairs Center for Television (NPACT)', 'Kilroy Realty Corporation', 'Meredith Corporation', 'Amsurg Corp.', 'Vioquest Pharmaceuticals', 'NBCUniversal Television Group', 'Fondo Mexico', 'Prolink Holdings', 'Huabao International Holdings', 'Green for All', 'Medtronic', 'Ventas, Inc.', 'C&D Technologies, Inc.', 'Insulet Corporation', 'Benchmark Electronics', 'FMC Corporation', 'Ciber', 'Alaska Airlines', 'Buckeye Technologies, Inc.', 'Varian, Inc.', 'Magma Design Automation', 'Seagate Technology', 'Stelco', 'Transgenomic', 'American Medical Systems Holdings, Inc.', 'Keryx Biopharmaceuticals, Inc.', "Alexander's, Inc.", 'Access Pharmaceuticals', 'United Community Banks, Inc.', 'Irvine Sensors', 'Merchants Bancshares, Inc.', 'Microtune, Inc.', 'Engex, Inc.', 'Technology Inc/ny/ Comverse', 'Semtech', 'S. H. Cowell Foundation', 'VA Education Association', 'St. Louis Broadcasting Corporation', 'NuVasive, Inc.', 'First PacTrust Bancorp, Inc.', 'Bay Banks Of Virginia', 'Friehling & Horowitz', 'The Pepsi Bottling Group', 'Cooper Industries', 'American Software, Inc.', 'Access Plans USA, Inc.', 'Great Lakes Bancorp, Inc.', 'Phelps Dodge', 'Advent', 'New Generation Holdings', 'Coemergence', 'Portland General Electric', 'Swift Transportation', 'Accredited Home Lenders Holdings', 'Avista', 'Tejas Networks', 'American Superconductor', "Citizens' Movement", 'Metropolitan Water Reclamation District of Greater Chicago', 'Global Payments Inc.', 'Apogee Enterprises, Inc.', 'Boeing Commercial Airplanes', 'Mohawk Industries', 'Coast Financial Holdings, Inc.', 'AMN HEALTHCARE SERVICES INC', 'NewlineNoosh', 'Iron Ore Company of Canada', "Men's Wearhouse", 'Ameris Bancorp', 'Hypercom', 'Cedar Shopping Centers, Inc.', 'Houston Exploration', 'Biomerica', 'Cardinal Management Company', 'SCANA', 'Hearst Magazines', 'Virgil Corporation', 'CoBiz Financial Inc.', 'Motorola', 'Viral Genetics', 'Amcol International Corporation', 'Birmingham Bloomfield Bancshares', 'Masco Corporation', 'Movado', 'Vineyard National Bancorp', 'Paulson & Co.', 'Inspire Pharmaceuticals, Inc.', 'RAM Holdings Ltd.', 'Penn Virginia Corporation', 'Rain Hill Group', 'Fusa Capital', 'Codex Corporation', 'JER Investors Trust, Inc.', 'Enstar Group Limited', 'Exelon', 'Broadwing Corporation', 'Helen of Troy Limited', 'Citizens Holding Company', 'URANERZ ENERGY CORPORATION', 'Arctic Cat Inc.', 'Career Education Corporation', 'Indiana University', 'Ayala Corporation', 'Sonoco Products', 'Buffett Farms', 'Consortium Service Management', 'Swiss Helvetia Fund, Inc. (The)', 'Abbott Laboratories', 'Fastenal', 'MarkWest Hydrocarbon, Inc.', 'Koss Corporation', 'FreedomWorks', 'Liebert', 'VaxGen', 'Capital Cities Communications', 'Traffic Com Inc', 'Graphic Packaging International Corporation', 'Salesforce.com', 'DOV Pharmaceutical', 'Georgia Institute of Technology', 'FranklinCovey', 'Takeda Pharmaceuticals Global Research and Development Center', 'Petrohunter Energy', 'Wiley College', 'Braintech', 'San Holdings', 'Skilled Healthcare Group, Inc.', 'Pulaski Financial Corporation', 'CBIZ, Inc.', 'Advanced Life Sciences Holdings, Inc.', 'The Aristotle Corporation', 'Corning Natural Gas', 'Ben Franklin Financial', 'Apache Corporation', 'Omni Financial Services, Inc.', 'Fischer-Watt Gold', 'Monarch Casino & Resort, Inc.', 'Ansys', 'Golden Benefits Insurance Services', 'Interval Research Corporation', 'Duracell International Inc.', 'NMT Medical Inc.', 'Brooks Automation, Inc.', 'IBT Bancorp Inc Pa', 'Neostem, Inc.', 'ZION OIL & GAS INC', 'MFA Financial, Inc.', 'Transdigm Group Incorporated', 'Triple Helix Association', 'D.H. McAlpin & Co Tobacco Company,', 'DotBank.com', 'A123 Systems', 'Portec Rail Products, Inc.', 'TGC Industries, Inc.', 'Synthesis Energy Systems, Inc.', 'ECB Bancorp Inc', 'National Assembly', 'BankFinancial FSB', 'CBS', 'Quest Diagnostics', 'Yankee Candle', 'Scholastic Press', 'Allstate Protection', 'HKN Inc.', 'Greater Community Bancorp', 'Silicon Graphics, Inc.', 'AJS', 'Tetra Technologies, Inc.', 'Hydril', 'Therma-Wave', 'Regen Biologics', 'Knoll', 'Cowen Group', 'Perrigo', 'Biomet', 'Valence Technology', 'Genzyme', 'Liberia', 'John H Harland', 'Neurogen Corporation', 'Seitel', 'Platinum Underwriters Holdings Ltd', 'B2Digital', 'Pool Corporation', 'Pike Electric Corp.', 'Scalent Systems', 'Kenneth Cole Productions', 'Lorimar Television', 'DealerTrack Holdings, Inc.', 'Central Piedmont Community College', 'Caterpillar Mexico S.A. de C.V.', 'ILX Resorts Incorporated', 'Chordiant', 'Chemical Bank', 'Reis, Inc', 'DCT Industrial Trust Inc', 'Ambac Financial Group', 'Targeted Genetics Corporation', 'Trinity Washington University', 'Cheniere Energy, Inc.', 'Teleflex, Inc.', 'University of Florida', 'EntreMed, Inc.', 'Lakeland Financial Corporation', 'Caesars Entertainment Corporation', 'National Geographic Television', 'Schweitzer-Mauduit International, Inc.', 'Taylor Devices, Inc.', 'Winnebago Industries', 'Oil-Dri Corporation Of America', 'Blue Dolphin Energy Company', 'TeleNav', 'WellCare Health Plans', 'Nevada Chemicals, Inc.', 'University of Miami', 'E.ON Nordic', "Christ's Hospital", 'Gateway Financial Holdings, Inc.', 'GDF Suez', 'Borden Capital Inc.', 'UAP Holding Corp.', 'Nalco Holding Company', 'DelphaxTechnologies Inc.', 'NIC Inc.', 'Newpark Resources, Inc.', 'Seattle Genetics, Inc.', 'Bank of New England North', 'Cobra Electronics Corporation', 'Achac', 'Swift Energy Company', 'DECA', '3Com', 'Matrixx Initiatives Inc.', 'Tastykake', 'Carrizo Oil & Gas, Inc.', 'Halliburton', 'Diamondhead Casino', 'Willis Lease Finance Corporation', 'Lenox Group, Inc.', 'iLinc Communications, Inc.', 'Bristol-Myers Squibb', 'Alliance Bankshares Corporation', 'Acme Packet', 'Interactive Intelligence, Inc.', 'Sykes Enterprises', 'Allegheny Energy', 'Central Valley Community Bancorp', 'Courier Corporation', 'Arrow Financial Corporation', 'Grossman Publishers', 'Harte-Hanks', 'Novell', 'Stockton, West Burkhart Advertising Agency', 'Safety Insurance Group, Inc.', 'NanaOn-Sha', 'Beasley Broadcast Group', 'Mikron Infrared', 'Sciele Pharma, Inc.', 'I-TRAX INC', 'Blue Nile Inc.', 'Dionics', 'Clayton Williams Energy, Inc.', 'Weight Watchers', 'ShopNBC', 'Talbots', 'Dropsie College', 'American University', 'Landstar System', 'Lamar Advertising Company', 'KB Home', 'Allergan', 'Kaydon Corporation', 'HSBC', 'EnerSys', 'Liberian Bank for Development and Investment', 'Barnard College', 'AMAG Pharmaceuticals, Inc.', 'SkyWest, Inc.', 'Ryman Hospitality Properties', 'WebMD', 'Crown Castle International Corp.', 'Black Box Distribution', 'Evergreen Global Dividend Opportunity Fund', 'BJ Services Company', 'Maxus Realty Trust Inc', 'Harsco', 'First Financial Bancorp.', 'Monster Worldwide', 'Elk', 'Tickle', 'Aehr Test Systems', 'Infinera', 'Merrimac Industries, Inc.', 'Westfield Financial, Inc.', 'Net7', 'Duracell International Inc., USA', 'Ford do Brasil', 'Saint Laurent Paris', 'Lattice Power Corporation', 'SeaBright Insurance Holdings, Inc.', 'Firstgold', 'National Interstate Corporation', 'Universal Technical Institute Inc', 'Prospect Capital Corporation', 'Trestman Enterprises', 'IDT Corporation', 'Commonwealth Bankshares, Inc.', 'Home Solutions of America, Inc.', 'SunTrust Banks', 'Adolor Corporation', 'Edison International', 'Lubrizol', 'Omnireliant Holdings', 'Georgetown University', 'OptionsXpress', 'Core Laboratories N.V.', 'Empire District Electric Company (The)', 'Hormel', 'Northern Empire Bancshares', 'Union National Financial Corpo', 'Veridien', 'University of Pennsylvania', 'Mercury Insurance Group', 'CryoLife, Inc.', 'First Advantage Corporation', 'Deere & Company', 'Healthcare Acquisition', 'Warnaco Group', 'Dun & Bradstreet', 'Comverge, Inc.', 'Northwest Natural Gas Company', 'Townsquare Media', 'Orleans Homebuilders, Inc.', 'Plexus Corporation', 'Lcnb', 'Level 3 Communications', 'Washington Group International', 'LowerMyBills.com', 'Medical Properties Trust, Inc.', 'International Fight League', 'Standard Microsystems Corporation', 'SunSoft, Inc.', 'Magellan Midstream Partners', 'Encore Acquisition Company', 'Rome Bancorp, Inc.', 'Barnes Group, Inc.', 'Pitney Bowes', 'Carnegie Endowment for International Peace', 'Newell Rubbermaid', 'TriQuint Semiconductor', 'YMCA of the USA', 'KMCMusicorp', 'Allied Nevada Gold Corp', 'Commerce Insurance Company', 'CBS Sports', 'Us Xpress Enterprises', 'Cogent Communications', 'California Coastal Communities Inc', 'Dionex', 'Tekelec', 'Oral Roberts University', 'Velocity Express Corporation', 'Hirsch International Corp.', 'Interface, Inc.', 'University of New Mexico', 'Dyrdek Enterprises', 'Kforce', 'Banknorth Massachusetts', 'Vertrue', 'New England Fritos', 'Capital Corp of the West', 'Poniard Pharmaecuticals, Inc.', 'Omrix Biopharmaceuticals, Inc.', 'LSI Corporation', 'Array BioPharma Inc.', 'LaSalle Hotel Properties', 'AltiGen Communications, Inc.', '2BSecure LLC', 'Queens West Development Corporation', 'Workface Inc.', 'Alabama National BanCorporation', 'Lakeshore Records', 'Left Behind Games', "Chuck E. Cheese's", 'Harman Kardon', 'EXPO Design Center', 'Texaco', 'Ashworth', 'Everest Re Group, Ltd.', 'Omniture', 'Innospec', 'Alesco Financial Inc', 'Disney Channel', 'Meta Financial Group, Inc.', 'Alpha Security Group Corporation', 'Reddy Ice Holdings, Inc.', 'Syntroleum', 'SAY Media', 'Nymagic, Inc.', 'Id-Confirm', 'AirTran Holdings', 'Hudson City Bancorp', 'Magellan Health Services, Inc.', 'Netezza', 'Vical', 'Ultralife Batteries, Inc.', 'Tower Group, Inc.', 'American Enterprise Institute', 'Epicor', 'Questar Corporation', 'Westlake Chemical Corporation', 'Willbros Group, Inc.', 'Export-Import Bank of the United States', 'First Financial Service Corporation', 'Entravision Communications Corporation', 'Westar Energy', 'Consolidated Communications Holdings, Inc.', 'Reserve Petroleum', 'Embarq Corporation', 'Dawson Geophysical Company', 'Kinder Morgan', 'Psb Group', 'Aeolus Pharmaceuticals', 'Fieldstone Investment', 'Trident Microsystems', 'Corpus Christi College, Oxford', 'NeoMagic', 'Lka International', 'Marquette Bank Minneapolis', 'Schnitzer Steel Industries', 'Fortune Diversified Industries, Inc.', 'GrafTech International Ltd', 'CIRCOR International, Inc.', 'Hi-Tech Pharmacal Co., Inc.', 'Virco Manufacturing Corporation', 'IHOP', 'webMethods', 'Good Ventures', 'Centerstaging', 'Con-way', 'Monarch Financial Holdings, Inc.', 'Dynabazaar', 'inVentiv Health, Inc.', 'Wynn Resorts', 'Ambassadors Group', 'Chembio Diagnostics', 'BCB Bancorp, Inc. (NJ)', 'Sanmina-SCI Corporation', 'Kansas State University', 'Gtrex Capital', 'Choice Hotels', 'SEMCO Energy, Inc.', 'Gorman-Rupp Company (The)', 'Maximus Inc.', 'Great American Family Parks', 'Pacific Bell', 'Dynamex, Inc.', 'Consumer Portfolio Services, Inc.', 'Pinnacle West Capital Corporation', 'Tidewater Inc.', 'Nicaragua', 'VNUS Medical Technologies, Inc.', 'Rent-A-Center', 'Kenexa Corporation', 'Herbalife', 'Unica Corporation', 'Kalfact Plastics Company', 'By/Media, Inc.', 'Fushi International, Inc.', 'Iron Mountain Incorporated', 'Avid Technology', 'Robbins & Myers, Inc.', 'Bridge Capital Holdings', 'Sobini Films', 'Pioneer Companies', 'Tutor Perini', 'Ing Clarion Real Estate Income', 'Trico Marine Services, Inc.', 'Healthways', 'Bear Stearns', 'VeriChip Corporation', "Applebee's", 'Protalex', 'Dwindle Distribution', 'Jefferson Bancshares, Inc.', 'Scottish RE Group Limited', 'Insituform Technologies, Inc.', 'Serviceware Technologies', 'OnStar Corporation', 'Universal Detection Technology', 'Union Square Hospitality Group', 'Home Depot', 'Simmons First National Corporation', 'Dynegy', 'First Chester County', 'Overbrook Entertainment', 'Medtox Scientific, Inc.', 'Integral Systems, Inc.', 'Maxwell House Coffee Co.', 'TD Ameritrade', 'NN, Inc.', 'Lennon Documentary Group', 'NRG Energy', 'Z-Trim Holdings, Inc.', 'Strategic Advisory Services LLC', 'Red Hat Software', 'PeopleSupport', 'Qi Systems', 'Doris Duke Charitable Foundation', 'Midland Company (The)', 'JPMorgan', 'PPL', 'Hexcel', 'Pulte Homes, Inc.', 'ARCO', 'Lionbridge', 'Virginia Financial Group Inc', 'Rub A Dub Soap', 'MarkWest Energy Partners, LP', 'PrivateBancorp, Inc.', 'Lincoln Electric', 'Westell', 'LIN TV Corporation', 'Covansys Corporation', 'Time Warner', 'Mediaready Incorporated', 'Sarepta Therapeutics', 'Alliance Semiconductor', 'Vyteris Holdings', 'Chaparral Steel', 'Coast Distribution System, Inc. (The)', 'Applied Minds', 'Mphase Technologies', 'C. R. Bard', 'Patapsco Bank', 'Flowers Foods', 'Hill-Rom Holdings, Inc.', 'SeaChange International, Inc.', 'Idenix Pharmaceuticals, Inc.', 'Public Policy Productions', 'Boy Scouts of America', 'Hawthorn Bancshares, Inc.', 'Continental Resources, Inc.', 'Community Health Systems, Inc.', 'Spyglass Entertainment', 'Adcare Health Systems Inc', 'Icos', 'Elixir Gaming Technologies, Inc', 'Sterling Gold', 'Gulf Island Fabrication, Inc.', 'A.C. Moore Arts & Crafts, Inc.', 'CBRE Realty Finance Inc', 'Daimler AG', 'Charles River Laboratories International, Inc.', 'Horizon Offshore, Inc.', 'Donegal Group, Inc.', 'National Scientific', 'Eddie Bauer', 'MSC Software', 'Cleveland BioLabs, Inc.', 'Sabre, Inc.', 'EPCO, Inc.', 'Lubar & Company', 'MarineMax, Inc.', 'Energy West, Inc.', 'Novadel Pharma Inc', 'Versant Corporation', 'Innuity', 'Diners Club North America', 'IHS Inc.', 'Stein Mart', 'Amcore Financial, Inc.', 'Rapport Communication', 'Greer Bancshares', 'G&K Services, Inc.', 'Asset Acceptance', 'Bird-Safe Glass Foundation', 'Inter-Tel', 'Solum, Inc.', 'National Realty And Mortgage', 'Metropolitan State University', 'Cadence Design Systems', 'TW Telecom', 'SCBT Financial Corporation', 'Albemarle Corporation', 'City National Bank', 'Writers Guild of America, West', 'CarMax', 'Immersion Corporation', 'Data Domain', 'Lasker Foundation', 'Cherry Hill Research', 'Sirna Therapeutics', 'Codon Devices', 'Canadian Equipment Finance Corporation', 'HBO Documentary Films', 'Southern Health Systems, Inc.', 'Hughes Aircraft Company', 'First Reliance Bancshares', 'Alliance Financial Corporation', 'Scotts Liquid Gold', 'Barnet Development Corporation', 'First Financial Bankshares, Inc.', 'Tempur-Pedic', 'Ameritech New Media', 'IMS Health', 'ProAssurance', 'Antares Pharma, Inc.', 'Interphase Corporation', 'House of Taylor Jewelry, Inc.', 'DreamFactory', 'Orbital Sciences Corporation', 'Korea Fund, Inc. (The)', 'Zunicom', 'Bolanz & Miller', 'Grey Wolf, Inc.', 'RPC, Inc.', 'American Financial Group', 'Ford Motor Company', 'Bed Bath & Beyond', 'Aspect Medical Systems, Inc.', 'GM Financial', 'Ethan Allen', 'Pyramid Breweries', 'Rochester Medical Corporation', 'Anheuser-Busch', 'New River Pharmaceuticals', 'Olin Corporation', 'Texas A&M University', 'Valero', 'EFD', 'Sunesis Pharmaceuticals', 'Haemonetics', 'Geron Corporation', 'Ariba', 'Princeton University', 'Rim Semiconductor', 'AmREIT, Inc', 'Evolution Entertainment', 'Colonial Investment Grade Municipal Trust', 'Radian Group', "O'Reilly Auto Parts", 'USA Today', 'Pomeroy IT Solutions, Inc.', 'Vital Signs, Inc.', 'Delphi Interior Systems', 'Stewardship Financial Corp', 'World Wrestling Entertainment', 'ArQule, Inc.', 'Debt Resolve Inc', "Wendy's International", 'E. W. Scripps Company', 'ClearOne Communications Inc.', 'Waccamaw Bankshares Inc', 'UST Inc.', 'The English College of SS Peter and Paul', 'Covad', 'Malex', 'Colonial High Income Municipal Trust', 'Precision Castparts Corp.', 'Montana State University - Bozeman', 'Spalding', 'Von Zipper', 'Manpower Inc.', 'Murphy Oil', 'SiRF Technology Holdings, Inc.', 'Quidel Corporation', 'Evergreen Energy', 'Newtek Business Services Inc.', 'Allstate Financial', 'Solera Holdings, Inc.', 'FRANKLIN TEMPLETON INVESTMENTS CORP', 'Harbor Acquisition Corporation', 'Wolverine World Wide', 'Paramount Acquisition', 'Monsanto', 'National Instruments', 'Cyberonics, Inc.', 'Carborundum Company', 'Wisconsin Energy Corporation', 'Anadarko Petroleum Corporation', 'Raytheon', 'Rewards Network, Inc.', 'Washington Federal, Inc.', 'National Financial Partners Corporation', 'Broadwind Energy Inc.', 'Cross Country Healthcare, Inc.', 'Belk', 'Trans-India Acquisition Corporation', 'National Fuel Gas', 'Frontier Financial Corporation', 'NorthStar', 'Surfect Holdings', 'Paccar', 'FactSet', 'Cognex Corporation', 'VSE Corporation', 'Lindsay Manufacturing', 'Callidus Software', 'Ducommun Incorporated', 'Spectrx', 'ICF International', 'IDACORP, Inc.', 'Associated Banc-Corp', 'AVX Corporation', 'Massachusetts General Hospital', 'Electronic Control Security', 'Mainstay Communications', 'American Commercial Lines Inc', 'School Specialty, Inc.', 'Vassar College', 'People', 'Payment Data Systems', 'Ohio Valley Banc Corp.', 'eResearch Technology Inc.', "D'Arcy Masius Benton & Bowles", 'Selective Insurance', 'Morehouse College', 'Viant', 'Immunomedics, Inc.', 'ADSTAR', 'TII Network Technologies, Inc.', 'Daktronics', 'The Walt Disney Company', 'Geneva Acquisition Corporation', 'Zoll Medical Corporation', 'Spelman College', 'Adobe Systems', 'California Institute of Technology', 'LifeCell', 'Citizens Bancorp Of Virginia', 'Spectrum Control, Inc.', 'ClearPoint Business Resources, Inc.', 'Martha Stewart Living Omnimedia', 'Pfizer', 'Century Aluminum Company', 'Altria', 'Novacea', 'First Robinson Financial', 'E. F. Johnson Company', 'nTelos', 'Nastech Pharmaceutical Company, Inc.', 'Anchor BanCorp Wisconsin Inc.', 'J & J Snack Foods', 'Mesa Laboratories, Inc.', 'MedImmune', 'ITT Technical Institute', 'Dice Holdings, Inc.', 'Bolt Technology Corporation', 'MapInfo', 'Sierra Monitor', 'Société de Géographie', 'Conolog Corporation', 'EDGAR Online', 'Agree Realty Corporation', 'Old Republic International', 'Akorn, Inc.', 'MainSource Financial Group, Inc.', 'Republic First Bancorp, Inc.', 'Pain Therapeutics, Inc', 'Weather Underground', 'Headwaters Incorporated', 'G-III Apparel Group, LTD.', 'Glaxo Laboratories', 'ZymoGenetics', 'Fleetwood Enterprises', 'Manchester College', 'Middlesex Water Company', 'Irvine Sensors Corporation', 'Scott Boras Corporation', 'Dpac Technologies', 'National City Corp.', 'DSP Group, Inc.', 'Sequoia Group', 'Insmed, Inc.', 'Linear Technology', 'Eastern Insurance Holdings, Inc.', 'CenterPoint Energy', 'Milacron Inc.', 'Linn Energy, LLC', 'Amerigroup', 'First Indiana Corporation', 'Software.com', 'Diodes Incorporated', 'Sunclipse Inc', 'Action Products International, Inc.', 'Mitre Corporation', 'Merit Medical Systems, Inc.', 'First Financial Fund, Inc.', 'Peoples Bancorp of North Carolina, Inc.', 'U.S. Energy Corp.', 'United Way of Texas', 'New York Institute of Dietetics', 'King Broadcasting Company', 'Savient Pharmaceuticals Inc', 'Equity Office', 'Trimeris, Inc.', 'Scientific Games Corporation', 'United Community Financial Corp.', 'Bank of South Carolina Corp.', 'Barnwell Industries, Inc.', 'iPCS, Inc.', 'Renegy Holdings, Inc.', 'Health Care REIT, Inc.', 'Pozen, Inc.', 'Community Capital Corporation', 'Bradley Real Estate', 'Hanover Capital Mortgage Holdings, Inc.', 'Zimmer Holdings', 'Alliance Fiber Optic Products', 'Royal Irish Academy', 'Synergetics USA, Inc.', 'WestCoast Hospitality Corporation', 'Teton Energy Corporation', 'Community Bancorp', 'Vaalco Energy', 'Beach First National Bancshares Inc', 'Newport Corporation', 'Pressure BioSciences, Inc.', 'Cardium Therapeutics, Inc.', 'ASSURED GUARANTY LTD', 'Virgin Media', 'Heritage Financial Corporation', 'Wilmington Trust Corporation', 'Proliance International, Inc.', 'MiddleBrook Pharmaceuticals, Inc.', 'Universal Stainless & Alloy Products, Inc.', 'Channell Commercial Corporation', 'Avon Products', 'Columbia Equity Trust', 'Astoria Financial Corporation', 'American Musicological Society', '1st NRG Corporation', 'Abu Dhabi Gas Industries Limited', 'Trans Energy', 'Universal Health Services', 'Empire Resources, Inc.', 'Silver State Bancorp', 'Respironics', 'Citizens & Northern Corp', 'Post Properties, Inc.', 'United Synagogue', 'Savvis', 'Health Benefits Direct', 'Canadian Broadcasting Corporation', 'Westwood One', 'Stanford University', 'Opnext, Inc.', 'Vivus, Inc.', 'Applied Industrial Technologies, Inc.', 'CorVu', 'United Online', 'Smith Micro Software', 'Strategic Gaming Investments', 'Vocus', 'UMB Financial Corporation', 'Media & Entertainment Holdings, Inc', 'Regions Financial Corporation', 'Owens Corning', 'Wrigley Company', 'Mellon Financial', 'Ion Geophysical Corporation', 'General American Transportation Corporation', 'Tri-Valley Corporation', 'TiVo, Inc.', 'Rockford Corporation', 'Brandywine Realty Trust', 'TrustCo Bank Corp NY', 'RADIENT PHARMACEUTICALS CORP Common Stock', 'Medivation, Inc.', 'Dex One', 'ZIOPHARM ONCOLOGY INC', 'Habersham Bancorp', 'Home Properties', 'Franklin Lake Resources', 'Applied Materials', 'Peoples Energy', 'Daleco Resources', 'Air Products & Chemicals', 'Multiverse Network', 'Hilton Worldwide', 'United States Lime & Minerals, Inc.', 'PROS Holdings, Inc.', 'Allete, Inc.', 'Kaiser Services, LLC', 'The Barnegat Group, LLC', 'Equity One, Inc.', 'Norris Grain New York', 'FedEx', 'IAC', 'Mercantile Bank Corporation', 'AGL Resources', 'Boeing', 'Dnb Financial', 'NetLogic Microsystems, Inc.', 'Arlington Asset Investment', 'Credo Petroleum Corporation', 'Strike Entertainment', 'Astec Industries, Inc.', 'TRW Inc.', 'TompkinsTrustco, Inc.', 'Kimball International', 'All American Group', 'Corning Inc.', 'Media Sciences International Inc.', 'Imperial Sugar', 'Yale University', 'Hydron Technologies', 'iPass Inc.', 'Airvana', 'Motorsports Emporium', 'Access Worldwide Communication', 'Newmont Mining Corporation', 'Auxilio', 'MGI PHARMA, Inc.', 'Estée Lauder Companies', 'Obagi Medical Products, Inc.', 'Service Corporation International', 'Raytheon Missile Systems', 'Lakes Entertainment, Inc.', 'Comcast Foundation', 'Favrille', 'Prudential Financial', 'Biosite Diagnostics', 'Driscoll Catholic High School', 'Cal-Maine Foods, Inc.', 'Sand Hill Foundation', 'Party of the Democratic Revolution', 'Comtech Telecommunications Corp.', 'Brownies Third Lung', 'SigmaTel', 'Citrix Systems', 'Micronetics, Inc.', 'White Mountains Insurance Group, Ltd.', 'Viewpoints Research Institute', 'Community Trust Bancorp, Inc.', 'Sunovion', 'Kite Realty Group Trust', 'Burpee Seeds', 'Quality Systems, Inc.', 'Federal Reserve Bank of Boston', 'Rohm and Haas', 'Ligand', 'Paradigm Holdings', 'Plum Creek Timber', 'Johns Hopkins University', 'Scholastic Inc', 'Nortel Networks', 'Express Scripts', "Landry's Restaurants", 'Harmonic Inc.', 'MSC Industrial Direct Company, Inc.', 'IRIS International, Inc.', 'Mascoma Corporation', 'Education Realty Trust Inc.', 'General Components', 'LKQ Corporation', 'Maxco', 'Sea Pines Company', 'MKS Instruments, Inc.', 'Transatlantic Holdings, Inc.', 'Gerber Scientific, Inc.', 'Rayonier', 'Reliance Group Holdings', 'Iomai', 'Indus International', 'North Central Bancshares, Inc.', 'Dionex Corporation', 'The Johnson Foundation', 'Fonar Corporation', 'Eagle Hospitality Properties Trust', 'GS Financial Corp.', 'Swarthmore College', 'Restoration Hardware', 'Core Molding Technologies Inc', 'GTC Biotherapeutics Inc', 'Meade Instruments', 'Delta Financial Corporation', 'Jacobs Engineering Group', 'Manor Care, Inc.', 'Greenfield Online, Inc.', 'Universal Technical Institute', 'BioLase Technology, Inc.', 'The Cooper Companies, Inc.', 'Lone Shark Games', 'Bnccorp, Inc.', 'National R.V. Holdings', 'NASDAQ OMX Group', 'EPIX Pharmaceuticals, Inc.', 'Investors Financial Services', 'Ashford Hospitality Trust Inc', 'Texaco Exploration And Production Inc', 'Playtex', 'Martin Marietta Materials, Inc.', 'Alternative Energy Sources', 'Duncan Energy Partners L.P.', 'Madison and Indianapolis Railroad', "Ruth's Chris Steak House", 'Arrowhead Research Corporation', 'HydroGen Corporation', 'Frozen Food Express Industries, Inc.', 'American Realty Investors, Inc.', 'Gree Electric Appliances', 'Old Line Bancshares, Inc.', 'IPC Holdings, Limited', 'Southern Company', 'Agilysys, Inc.', 'Syntel Inc.', 'Matrix Service Company', 'Daxor Corporation', 'Illinois Institute of Technology', 'Harvest Natural Resources Inc.', 'CH Energy Group, Inc.', 'Escalade, Incorporated', 'Old Dominion Freight Line, Inc.', 'Highlands Bankshares', 'Heico Corporation', 'Monarch Staffing', 'DSW, Inc.', 'Avant Immunotherapeutics, Inc.', 'Iporussia', 'Technology Research Corporation', 'Sierra Bancorp', 'Salem International University', 'Rodman & Renshaw Capital Group, Inc.', 'Agilent Technologies', 'Sterling Bancshares, Inc.', 'Flexpoint Sensor Systems', 'Waste Technology', 'Northstar Realty Finance Corp.', 'Taubman Centers', 'Atlas Mining', 'Calumet and Hecla Mining Company', 'N M Rothschild & Sons', 'Bryght Northern Research, Incorporated', 'Mylan Laboratories Inc.', 'Metal Management , Inc.', 'Burlington Northern Santa Fe Corp.', 'Story Of My Life Foundation', 'H. J. Heinz Company', 'Starbucks', 'Bridge Bank', 'QMed Inc.', 'Celsion Corporation', 'Vistakon', 'Spirit Finance', 'Chevron Products Co.', 'Aditus Business Solutions, Inc', 'Dollar Thrifty Automotive Group, Inc.', 'Zions Bancorporation', 'Wyeth', 'ABAXIS, Inc.', 'Socialistische Partij Anders', 'ADC Telecommunications', 'Ingram Content Group', 'American School Foundation', 'Keane Inc', 'Recyclebank', 'United Stationers', 'The Conference Board', 'TRX, Inc.', 'Acadia Realty Trust', 'Yahoo! Search Marketing', 'Kensey Nash Corporation', 'Ants Software', 'AmCOMP Incorporated', 'Tim Hortons', 'Global Telecom Technology', 'Big 5 Sporting Goods', 'Chevron U.S.A. Production Co.', 'Personal Products Company', 'Willdan Group, Inc.', 'Nvidia', 'Sibirsky Aluminium Investment Industrial Group', 'Merck & Co.', 'Evans Bancorp, Inc.', 'Central Virginia Bankshares, Inc.', 'Saks Incorporated', 'Optelecom-NKF, Inc.', 'TripIt', 'Grupo Aval Acciones y Valores', 'Wabtec', 'Horizon Lines, Inc.', 'Inverness Medical Innovations, Inc.', 'CT Communications', 'El Paso Corp.', "Steak 'n Shake", 'Graham Corporation', 'Goethe-Institut', 'Lumera Corporation', 'Slacker', 'Enterprise Products', 'Aerobic Creations', 'Somerset Hills Bancorp', 'Ameron International Corporation', 'Golden Star Resources Ltd', 'Bank of the Ozarks', 'Petroleum Development Corporation', 'Mueller Industries, Inc.', 'Ford of Europe', 'Liberty Bancorp, Inc.', 'First Horizon National Corporation', 'Burger King', 'Harleysville National Corporation', 'Super Micro Computer, Inc.', 'Triangle Capital Corporation', 'EastGroup Properties, Inc.', 'Borders Group', 'Apollo Gold Corporation', 'API Nanotronics', 'Citicorp Venture Capital', 'Rensselaer Polytechnic Institute', 'Capitol Federal Financial', 'Media General', 'Phelps Dodge Mining Company', 'Overseas Shipholding Group, Inc.', 'Bank of Commerce Holdings (CA)', 'B. Hill Enterprises LLC', 'Atheros', 'GE Capital', 'Vermont Institute of Natural Science', 'FMC Technologies', 'Zellers', 'National Academy of Sciences', 'Sauer-Danfoss', 'FLIR Systems', 'AFC Enterprises', 'Millennium Pharmaceuticals', 'Synnex', 'AARP', 'OMNI Energy Services Corp.', 'Chicago Mercantile Exchange', 'New England Conservatory of Music', 'Isilon', 'Fisher Communications', 'Huntsman Corporation', 'TRM Corporation', 'Willow Financial Bancorp, Inc.', 'Video Display Corporation', 'Hallador Petroleum', 'LandAmerica Financial Group', 'GloriOil', 'American Safety Insurance Holdings, Ltd.', 'Transcontinental Realty Investors, Inc.', 'Analysts International Corporation', 'TESSCO Technologies Incorporated', 'Friendster', 'Universal Studios', 'Union Drilling, Inc.', 'Washington Mutual', 'American Bird Conservancy', 'Unico American Corporation', 'HAMPTON ROADS BANKSHARES INC', 'The Washington Post Company', 'FlexRx', 'American Spectrum Realty, Inc.', 'Kiewit Corporation', 'Ecologist Green Party of Mexico', 'Canterbury Park Holding Corporation', 'National Research Corporation', 'NewJersey Resources Corporation', 'Delta Pine Land', 'Authentium', 'ViewSonic', 'Catapult Communicatons Corporation', 'Chemical Financial Corporation', 'China Healthcare Acquisition Corp', 'VIA Pharmaceuticals, Inc.', 'University of Iowa', 'URS Corporation', 'Lincoln Educational Services Corporation', 'Bank of Florida Corporation', 'Insignia Systems, Inc.', 'Norican Group', 'Pepsi-Cola North America', 'American Woodmark', 'Kinder Morgan Management, LLC', 'UNOVA, Inc.', 'Globecomm Systems Inc.', 'Huron Consulting Group', 'Echelon Corporation', 'Sigma-Aldrich', 'North American Scientific, Inc.', 'Lockheed Martin', 'On Assignment, Inc.', 'McGraw-Hill Publications Company', 'Irwin Financial Corporation', 'Bradley University', 'Lochridge & Company', 'Genelabs Technologies, Inc.', 'CNB Financial Corporation', 'Ford India Private Limited', 'Laboratory Corporation of America Holdings', 'Frezer', 'Nexity Financial Corporation', 'Comcast Cellular Communications', 'The Bon-Ton', 'Griffin Land & Nurseries, Inc.', 'Univision', 'Arena Pharmaceuticals, Inc.', 'Aéropostale', 'B/E Aerospace', 'ShareBuilder', 'Nationwide Mutual Insurance Company', 'Ipsco', 'Onexim Group', 'Laureate Education', 'Bob Evans Restaurants', 'DPL Inc.', 'Krispy Kreme', 'Kelly Services, Inc.', 'Genaera Corporation', 'Coventry Health Care', 'Chevron Overseas Petroleum Inc.', 'XenoPort, Inc.', 'United Energy Systems of Ukraine', 'Gemstar-TV Guide International', 'State Auto Financial Corporation', 'OptimumBank Holdings, Inc.', 'Alabama Agricultural and Mechanical University', 'Affymax Inc.', 'Intel Corporation', 'Rmk Advantage Income Fund', 'RGC Resources', 'TAL International Group, Inc.', 'Ariel Investments, LLC', 'Gibraltar Industries, Inc.', 'The Royal Conservatoire of Scotland', 'First Federal Bankshares, Inc.', 'Cray', 'Constellation Brands', 'Lear Corporation', 'Windstream Communications', 'ChoicePoint', 'Monster Beverage', 'Alkermes', 'W-H Energy services, Inc.', 'Ball Corp.', 'Kyphon', 'Rurban Financial Corp', 'Entellium', "Carter's, Inc.", 'Emisphere Technologies, Inc.', 'Craftmade International, Inc.', 'Aztar', 'Dyax Corp.', 'Stratasys', 'Opko Health Inc', 'Bucyrus-Erie'}
            Answers = 4436, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.094s]
          Answers = 4436, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.094s]
        Checking schema 245 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.leaders', 'organization.leadership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 246 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.leaders', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 4510
            Final Answer: {'Ann Stuart', 'William John Pepicello', 'Jonathan Gueverra', "Mike E. O'Neal", 'Hanna Segal', 'John Maeda', 'Fr. Frederick C. Comendador', 'Raymond Yannuzzi', 'Michael A. Hayes', 'Suh Chae-Hong', 'Rodney A. Smolla', 'Alain Nemoz', 'Randy Dunn', 'Merilyn Liddell', 'Zeyad Ramadan', 'Dae-Keun Kim', 'Ahmet Muçaj', 'Ronnie Nettles', 'J. David Armstrong, Jr.', 'Jia Zhiqiang', 'George Charalambides', 'Charles W. Hall', 'Shelley Nickel', 'Vladimir Tretyakov', 'Joseph Shepard', 'Jean-Jacques Payan', 'Jon Epstein', 'Willye Dennis', 'Chalermchai Boonyaleepun', 'Iñigo de Oriol Ybarra', 'L. Randolph Lowry III', 'Brian Lemon', 'Eric W. Murray', 'David B. Burks', 'Dr. Nidal Shehadeh', 'Ted D. Spring', 'David Docherty', 'Spencer Nilsen', 'Lim Kok Wing', 'Kai Handel', 'Wayne Burton', 'Mike Simoneaux', 'Brian F. Linnane', 'Charles Lauth', 'John W. Garland', 'Charles M. Edmondson', 'Gregory T. DeCinque', 'Albert Mohler', 'Alf Ó Muirí', 'Seishi Noguchi', 'Morio Matsunaga', 'Alvin Bowman', 'Rick Davey', 'David Melton', 'David A. Heath', 'Jonathan Burke', 'Jonathan Palmer', 'Harold F. Hunter', 'Michael Peters', 'Stanley F. Battle', 'Stephen Beal', 'Charles H. Webb', 'D. Michael Lindsay', 'Daniel L. Anderson', 'George Van Allen', 'Liu Jizhen', 'Ray Bowen', 'Anthony Wise', 'Damdinsuren Bayanduuren', 'Tony McLain', 'Susan Schultz Huxman', 'Gary Kachanoski', 'Barry M. Maloney', 'Isaac Mar Philoxenos', 'Hideo Nakamura', 'Mujib Khan', 'Gilbert Béréziat', 'Setsuo Arikawa', 'Daniel Y. Habuki', 'Peretz Lavie', 'José M. Ortiz', 'Pamela A. Eibeck', 'Mark Schulman', 'Seyed Sadroddin Shariati', 'YAMASHITA Okitsugu', 'Craig Boswell', 'Rob MacIsaac', 'Susan West Engelkemeyer', 'Peter Simon', 'Richard Hanson', 'Allan Gilmour', 'Julia Fabricius', 'Thomas L. Purce', 'Daniel Cotte', 'Jean-Hilaire Belloc', 'Cyndie Shadow', 'Teh Ming Pao', 'Rajiv Gupta', 'Sheikh Aboobacker Ahmed', 'Ronald Crutcher', 'Katsuno Shingo', 'Diana Stano', 'Henry H.L. HU', 'Zhou Rong', 'Feleke Woldeyes', 'George C. Bradley', 'Chuah Hean Teik', 'Tom Traves', 'Guy Lavorel', 'James M. Sunser', 'Jun-hyeong Rho', 'Carol Brown', 'Denis Varaschin', 'Martin Harris', 'Justyn Terry', 'Stephen M. Curtis', 'Jim Murdaugh', 'Adrian Civici', 'Paul Landowski', 'Roger Schultz', 'Ali bin Asjadi', 'George A. Goodman', 'George M. Philip', 'Canon Eric Beresford', 'Paul-Marie Romani', 'Lee Si-Chen', 'Jennifer Braatan', 'Ronald L. Ellis', 'Evans P. Whitaker', 'Taizo Motomura', 'Kimberly R. Cline', 'W. Michael Stoy', 'Donald Campbell', 'Kurt Krueger', 'Marjorie Hass', 'James Wolfe', 'Nadine Lavignotte', 'Shinya Sakai', 'John F. MacArthur', 'Seung-Tae Kim', 'Juan Luis Mejía Arango', 'Jo Anne McFarland', 'John H. Russell', 'Jia Suotang', 'Tuula Teeri', 'Leo E. Chavez', 'Patricia Granados', 'Laura Saunders', 'Hermione Lee', 'Thomas K. McKeon', 'R. Mark Sullivan', 'Zheng Qiang', 'Susan K. Avery', 'Thomas Pynchon', 'Kevin Ogilvie', 'Nancy Leffert', 'Tiffany M. Franks', 'Juliet V. García', 'John O’Donnell', 'Judith A. Bense', 'Charles R. Middleton', 'William L. Perry', 'Michael J. K. Chen', 'Ann McElaney-Johnson', 'Joseph M. Daisy', 'Lim, Duck-Ho', 'Pamela Gann', 'Jean-Claude Legrand', 'William R. Harvey', 'Hao Shu-Chen', 'Wang Yanxin', 'Thomas Cedel', 'Marvin Henberg', 'Kim B. Clark', 'Janet Head', 'Keerath Sanguansai', 'Tony Green', 'Chris Whitaker', 'Jim Brewster', 'Tom Pincince', 'John Klauber', 'Saleh Ismail Najim', 'Bill Messner', 'David W. Burcham', 'Dante G. Guevarra', 'Fazal Haq Mir', 'John R. Broderick', 'Hamid Shirvani', 'Preston Pulliams', 'Jamillah Moore', 'John R. Dempsey', 'Vidal A. Tan', 'Lee Jong-wook', 'David W. Whitlock', 'Toshiharu Hasegawa', 'Chen Chunyang', 'K. James McDowell', 'Jesse Smith', 'B. David Rowe', 'James Earl Rudder', 'John R. Halstead', 'Utpal K. Goswami', 'Penelope H. Wills', 'Doris Givens', 'Dr. Frank Bonner', 'Dr. Mark L. Bailey', 'Judy C. Miner', 'Linda L. M. Bennett', 'David W. Oxtoby', 'Admasu Tsegaye', 'Lance de Masi', 'Reginald Sykes', 'Ali Mohamed Shams Al Din', 'Hannah M. McCarthy', 'Paul J. Fonteyn', 'William T. Greer, Jr.', 'Paul Lamborelle', 'Rodney Erickson', 'Alan Davis', 'Mark J. Olson', 'Bernd Kracke', 'Jackie Jenkins-Scott', 'Kathryn A. Thomas', 'Ronald J. Volpe', 'André Drapeau', 'Yoshiyuki Sakaki', 'Gerd Sonnleitner', 'Sascha Spoun', 'Donald V. Weatherman', 'Zhang Wendong', 'Abdelrahim A. Hunaiti', 'Michael Heine', 'Jeffery Hale', 'Makio Yamamoto', 'Martin Kisseleff', 'Bharati Ray', 'Chen Yulu', 'Jeter S. Sespene', 'Gloria M. Reyes', 'Anne C. Steele', 'Mark Gabis', 'Glenn R. Roquemore', 'Cho Kyoo-hyang', 'Gloria Cordes Larson', 'Ioannis Manolopoulos', 'David Faust', 'Robert Sheeran', 'Michael A. Lanser', 'Larry Goodwin', 'Mike Michalson', 'David C. Cole', 'Louis W. Burgher', 'André Siganos', 'Maria C. Bennett Rose', 'Ebrahim Mohammed Janahi', 'Charles R. Mojock', 'John Downey', 'Edward John Ray', 'John H. Garvey', 'Andrew Dorsey', 'Mike Wisniewski', 'Professor René Chamussy', 'Christopher B. Howard', 'Richard Miller', 'Makoto Tajima', 'Janet Morgan Riggs', 'Tony Hanlon', 'Li Dayong', 'Lori Sundberg', 'Hassan Tajik', 'Tom Bogart', 'Yousef Sobouti', 'Sigurð í Jákupsstovu', 'Jeff Thomas', 'Carlos Campo', 'Merith Niehuss', 'Rebecca Chopp', 'Sun Yiliang', 'Qiu Jin', 'Terry Kimbrow', 'Sung Soo Kim', 'Mary Colleen Heil', 'G. Craig Williford', 'Yukihiro Ito', 'Gary Goff', 'Mohsen Afsharchi', 'Pierre Hébert', 'DeRionne P. Pollard', 'Zhu Xiulin', 'Jerry R. Patton', 'Dottie L. King', 'David Bell', 'James Patrick Shea', 'Wei-Ling Chiang', 'James J. Browne', 'Frank Hereford', 'Paddy Buggy', 'Joshua E. Numan', 'Evelyn E. Jorgenson', 'Bruce Shepard', 'Hu Jun', 'D. David Conklin', 'James M. Dennis', 'Chen Li', 'John Vincent Griffith', 'Bob Alsop', 'Pierre-Gilles de Gennes', 'David Johnson', 'Darryl L. DelHousaye', 'Yangsi Rinpoche', 'Robert V. Antonucci', 'Peter Dominiak', 'David Viar', 'Arthur E. Snyder', 'Gregg A. Mast', 'Bob Brower', 'Bruno Varet', 'Mark Perry', 'Jonathan Brand', 'Johnnie B. Watson', 'Pádraig Mac Floinn', 'Ronald M. Berkman', 'Ceasar I. Agnir', 'Antonio José Dieck Assad', 'Daniel Bloch', 'Joan G. Wexler', 'Thomas Hanschke', 'James Maxwell', 'Jack J. Becherer', 'Robert Harlan Henry', 'Loren G. Agrey', 'Peter J. Davoren', 'Ken Hoppe', 'John F. Johnson', 'Jose Ginel Rodriguez', 'William V. Flores', 'Hong Guang-Xiang', 'Richard A. Peddicord', 'Collette Mercier', 'Brendan J. Murphy', 'Donald Justin Wolfram', 'Paul O. Wendland', 'Dean Lewis', 'Jenn-Der Lin', 'Kurunji Venkatramana Gowda', 'Dirk Craen', 'Henri Rolland', 'Patricia Lofton Hardaway', 'Stephen M. Jordan', 'Imma Tubella Casadevall', 'Emily Williams Knight', 'Robert C. Messina, Jr.', 'Cary Fraser', 'Andrew Thompson', 'Gary Bonvillian', 'Kathi Hiyane-Brown', 'Johan Pahk Yeong-sik', 'Alphonse Laurent-Jean', 'Renu Khator', 'Claude Babin', 'Kent Henning', 'Pablo E. Subong, Jr.', 'Carolyn Meyers', 'Thomas Patrick Sullivan', 'Ana “Cha” Guzmán', 'Zhou Qifeng', 'F. King Alexander', 'Heinz Buerki', 'Arthit Ourairat', 'Bob Nachtsheim', 'Linda Lujan', 'Peter Eden', 'Brad Johnson', 'Bernie Machen', 'Richard Carwardine', 'Edythe M. Abdullah', 'Roy Church', 'Khaled Bouabdallah', 'Bert Glandon', 'Francis Lister Hawks Pott', 'Bruce M. Boghosian', 'Richard Levao', 'Peter Čanecký', 'David Clary', 'Georges Larrouy', 'Robert S. Badal', 'Costas N. Papanicolas', 'Lee Geung young', 'R. Bowen Loftin', 'Leslie M. Palm', 'Ron Anderson', 'Everette J. Freeman', 'John A. Pieper', 'Maria Hernandez Ferrier', 'Steven D. Lavine', 'Deborah Freund', 'Claude Jameux', 'Thomas Rochon', 'Patrick T. Harker', 'Daniel J. Earheart-Brown', 'David P. López', 'Barbara A. Prindiville', 'Priscilla C. Viuya', 'Narciso S. Erguiza', 'Stephen J. Friedman', 'Francisco C. Rodriguez', 'Gene Schmidt', 'Ted Martinez Jr.', 'Jay K. Simmons', 'Abdallah I. Malkawi', 'Joseph M. Stowell, III', 'Joseph Castleberry', 'Jerry M. Wallace', 'George E. Cornelius', 'K. Michael Welch', 'William M. Toms', 'Fay Lea Patria M. Lauraya', 'Daniel Doz', 'Roberto Diaz', 'Sunita V. Cooke', 'Lourdes H. Torrefranca', 'Marcella Marie Garus', 'Roger Carr', 'Brigitte Grass', 'Mohammad Reza Gholami', 'Celeste Schenck', 'Donald Tuski', 'Lee Lambert', 'Yang Xuejun', 'Gérald Guillaumet', 'Michael Stawicki', 'Larry Skogen', 'Eric S. Janus', 'Phyllis Anderson', 'S. Martin Marriott', 'Gerard Buckley', 'Jean-Lou Chameau', 'Louis Vogel', 'Niihara Koichi', 'Walter M. Kimbrough', 'Charles Emory Smith', 'Pirom Kamolratanakul', 'Joseph E. Nyre', 'Richard H. Otto', 'Dino Pedrone', 'Jörg Rocholl', 'George Cordero', 'Theodora J. Kalikow', 'Tony Cantu', 'Zukweon Kim', 'Farid Ouabdesselam', 'Salahalddin Saeed Ali', 'Gou Yih-shun', 'William J. Hynes', 'Kaizer Sohel Ahmed', 'Virginia M. Carson', 'Richard Panzer', 'Jeffery Docking', 'Cai Jianjiang', 'Beverley Pitts', 'John A. Roush', 'Robert J. Dillman', 'Jeffrey A. Ross', 'Deborah C. Jackson', 'Kim Yoon Bae', 'Pierre Mutzenhardt', 'Janet Cunningham', 'Jim Cargill', 'John Letts', 'GE Shirong', 'Dean L. Bresciani', 'Macapado Abaton Muslim', 'David Agnew', 'Bobby Smith', 'Charles S. Kelley, Jr.', 'Prof. Atsushi Seike', 'Michael S. Brophy', 'Mark Rutland', 'Jessie M. Hechanova', 'Yoji Koda', 'Weymouth Spence', 'K. Tsukamoto', 'Doug Easton', 'Hind Mamdouh Hanafy', 'Robert L. Caret', 'Guy Romier', 'Michael Campbell', 'James A. Fries', 'Steven A. Scott', 'Le Vinh Danh', 'Jim Hamilton', 'Charles L. Rice', 'David Svaldi', 'Raosaheb P. Shinde', 'Mary K. Grant', 'Jacqueline Chanda', 'Nancy “Rusty” Barcelo', 'Izumi Kinoshita', 'Sun Qixin', 'Lanny Hall', 'Norval C. Kneten', 'Daryle Scott', 'David R. Smith', 'Michele Haney', 'John H. Converse', 'Shauneen Pete', 'Dan Kinney', 'Dennis Harkins', 'Tomás D. Morales', 'George French, Jr.', 'Thomas Keegan', 'Gail E. Carberry', 'Gary D. Russi', 'Hamed Ben Dhia', 'H.J. (Tom) Thompson', 'Richard Stratton', 'Larry L. Carter', 'Kameyama Ikuo', 'Michael J. Mahon', 'Jaime Dalumpines', 'Katharina McFarland', 'Walter Tribley', 'Dr. Jay A. Perman', 'Makoto Kajitani', 'Indira Samarasekera', 'Mickey L. Burnim', 'Thomas J. Haas', 'Jerry C. Davis', 'Marcia Pfeiffer', 'François Weil', 'Frank Damazio', 'Romeo P. Dela Paz', 'Joseph M. McShane', 'Graham Goldsmith', 'Elsa A. Suralta', 'Makio Takemura', 'Dominic Mwenja', 'Kim Chaisansook', 'Brian Tamblyn', 'Ronald Gallagher', 'Sylvia Payne', 'Robert Fisher', 'Mark T. Zeigler', 'Craig McDaniel', 'Geo-suk Suh', 'Anna Solley', 'Armand Colle', 'Raymond-François Le Bris', 'Robert Ivany', 'Yannick D’Escatha', 'Mark Gearan', 'Moshe Kaveh', 'Glenn Charlesworth', 'Michel Devèze', 'Yongfeng Shang', 'Jean-Paul Caverni', 'Maggie George', 'Sri P. Ramamohan Rao', "J. Randall O'Brien", "Wael Mua'lla", 'J. David Arnold', 'Robert K. Knight', 'Guy F. Riekeman', 'Nancy Carriuolo', 'Jack P. Varsalona', 'Princess Alexandra, The Honourable Lady Ogilvy', 'Robert Dingman', 'Renaud Fabre', 'Richard F. Wilson', 'Takao Daegu', 'Joel Ward', 'Lee Royce', 'So, Byung Ouk', 'M. Richard Shaink', 'Eileen Ely', 'Zheng Nanning', 'Emmanuel Ethis', 'David Finney', 'John Ellis Price', 'Jan Fransoo', 'Gérard Besson', 'A. James Kerley', 'Timothy S. Mescon', 'Kathleen B. Hetherington', 'Dương Ái Phương', 'Fikre Lemessa', 'Mitchell Jacobson', 'Ben S. Malayang', 'Nancy W. Dickey', 'Young Ook Kim', 'Richard G. Shrubb', 'Sharon L. Hirsh', 'Darius Ogden Mills', 'Don Bantz', 'Wilmot Deloui Matthews', 'William T. Hutchinson', 'Jonathan Gibralter', 'Ken Ii', 'Kathleen Waldron', 'Ed Klonoski', 'V.J. Sirwaiya', 'Masuhisa Akai', 'William Mann', 'Mel D. Schiavelli', 'Stephanie Forsyth', 'Edwin H. Welch', 'Catharine Bond Hill', 'Paul W. Gooch', 'Hideki Fukuda', 'Melinda H Reagan', 'Kakha Shengelia', 'Alan Kadish', 'Jorge Espat', 'Charles W. Steger', 'Yasunobu Yanagisawa', 'Han-Joong  Kim', 'Franck Métras', 'Gary Hagen', 'Robert Mayes, Jr.', 'Alain Bravo', 'Troy Vugteveen', 'Carlos Gómez Montt', 'Catherine Chew', 'Harry Fernhout', 'Joseph Urgo', 'Nicanor I. Reyes Sr.', 'Daniel Chițoiu', 'Donna M. Randall', 'Tal Brooke', 'David R. Anderson', 'Bonnie L. Coe', 'Sorajak Kasemsuvan', 'Elson Floyd', 'Ghassan Aouad', 'Luc Johann', 'Danny Panoz', 'Daniel W. Ball', 'Alicia S. Bustos', 'Larry Horn', "John D'Arms", 'Wolfgang-Uwe Friedrich', 'Wenjin SU', 'Kevin A. Pollock', 'David Fuller', 'Jacques Bompaire', 'Lionel Bordeaux', 'Thom M. Armstrong', 'Elizabeth D. Dickey', 'Salvatore M. Perrella', 'Kung-Yee Liang', 'Karen A. Stout', 'Gerald R Karp', 'Martin Tadlock', 'Solomon Rajah', 'Stephen Greiner', 'Osamu Nittono', 'Pascal Reghem', 'Todd S. Hutton', 'Roman Heiligenthal', 'Jon Jay DeTemple', 'Howard Barnett, Jr.', 'Denis Hubert', 'Raminedi Balaraju', 'William G. Cale, Jr.', 'Terry Calaway', 'Osama Sadik Tayeb', 'Richard Lee', 'Margaret Carney', 'Yvonne van Rooy', 'Wilfredo Saniel', 'Thomas Schwarz', 'Christine J. Sobek', 'Christy Cooney', 'Jon Wefald', 'Léon Moussinac', 'James Schmotter', 'Bienvenido Alex K. Bautista', 'Shirley Ann Jackson', 'Diane Steele', 'Lawrence Sullivan Ross', 'Edward H. Hammond', 'Jean-Luc Vayssière', 'Flora W. Tydings', 'William F. Owen, Jr., MD', 'Antonio F. Moreno', 'Zhang Qingjie', 'John Christian U. Young', 'Zhao Dayu', 'Ronald Yap', 'David W. Atkinson', 'Eric W. Kaler', 'Frank Ulrich Montgomery', 'Peter Schineller', 'Ernesto Vázquez Barquet', 'Serge Svizzero', 'Paul Libin', 'Robert F. Agrella', 'Jon R. Wallace', 'James Smith', 'Kei Sato', 'Robert Allison', 'Keith T. Miller', 'John M. Borek', 'Cataldo Salerno', 'Mamdouh Shoukri', 'Martin Rennert', 'Claude Longeon', 'Dennis P. Gallon', 'Richard H. Bliese', 'Casey Crabill', 'Samuel Sangshik Han', 'U. A. G. Isani', 'Kathleen Schatzberg', 'Takeshi Matsuda', 'Renée Herzing', 'Simon Phipps', 'James E. Douthat', 'Jesus Rodrigo F. Torres', 'Ron Proffitt', 'Renato M. Sorolla', 'Robert Chaudenson', 'Tamara Rozhon', 'Phil Schubert', 'Dawn Russell', 'Gibb Gilchrist', 'Salvatore Monaco', 'David E. Daniel', 'Zhou Lie', 'Niel Nielson', 'Theodore N. Ely', 'Pao Long Chang', 'Igarashi Takenobu', 'Xu Jiang', 'Mary Cecilia Jurasinski', 'M. N. Navale', 'Erika Fleming', 'Michael Brearley', 'Zihe Rao', 'Amit Chakma', 'Brian L. Friedrich', 'Livingston Alexander', 'Paul W. Ferguson', 'Todd S. Voss', 'Charisse L. Gillett', 'Donald R. Bobbitt', 'Atsumasa Uchida', 'Ben Hancock', 'David M. Greenhaw', 'Karl Joachim Ebeling', 'Raul M. Marchan', 'James H. Mullen, Jr.', 'Jeffrey A. Jarvis', 'Guy Cathelineau', 'Hyo Soo Lee', 'Edward Guiliano', 'Hiromi Naya', 'Tom Gerety', 'Ken Atwater', 'James McDannel', 'Bernadette Madeuf', 'Scott Thompson', 'Mark R. Foley', 'Fitz Hill', 'Joseph L. Levesque', 'Moses Laufer', 'Robert Teague Milner', 'Yu Seon-gyu', 'Albert Edward Kemp', 'Susumu Kagawa', 'Richard Eyre', 'Alexander Novikov', 'Lars A. Hafner', 'Rollin C. Richmond', 'Ali Davar', 'Mark A. Heinrich', 'Matt Branam', 'Esther L. Barazzone', 'Wilbert J. Friesen', 'Sébastien Bernard', 'Roland Chapdelaine', 'Colgate Darden', 'Louis Agnese Jr.', 'Phil E. Shirley', 'Philippe Dulbecco', 'Cynthia Bioteau', 'Dustin D. Rubeck', 'Fumio Harashima', 'Claude G. Perkins', 'Roger Durand', 'Alecia A. DeCoudreaux', 'Rev. Professor Andrew Dutney', 'Joe Wyse', 'Keith Wade', 'Charles Pollard', 'Yukako Ohashi', 'Joyce F. Brown', 'Martin Butzlaff', 'Luana Ross', 'Matthew S. Holland', 'Michel Meslin', 'Frances Beinecke', 'Michael J. Garanzini', 'Angela Franklin', 'Ann E. Rondeau', 'Mikhail Petrovich Karpenko', 'Ernest Lara', 'Ricardo Maestas', 'Philip D. W. Krey', 'Gary Moncher', 'Harry J. Crane', 'Charles Wall', 'Mary E. Lyons', 'Edith Cowan', 'Glenn D. Mroz', 'Joel Smirnoff', 'Hermann Viets', 'Denis Ranque', 'Richard D. Holland', 'Larry Shinn', 'Gary A. Dill', 'Carlos Noéme', 'A. R. Sullivan', 'Timothy Tennent', 'Celia Barberena', 'C. C. Hemenway', 'Edward J. Yaw', 'Eduardo J. Padrón', 'Kim Joo Sung', 'Bernard R. Ramirez', 'Cheryl Evans', 'Guo Guangsheng', 'Gilles Baillat', 'Katherine Hancock Ragsdale', 'David Mathews', 'Darryl Hiddle', 'Antoinette Hays', 'Thomas C. Shepherd', 'Ken Givens', 'Angela Spreitzer Charles', 'Nancy J. Cable', 'Steve Thomas', 'René Lucas', 'Candace Vancko', 'Yoichi Okabe', 'Tai Chein', 'Jose Manuel Núñez Pliego', 'Joel Petermann', 'Paul Chappell', 'Judy M Merritt', 'Ralph Eichler', 'Stephen J. Tober', 'Teodoro Jhocson-Ocampo', 'Allan Rock', 'Said Irandoust', 'Karl Heinz Däke', 'Yoshiaki Obara', 'Silas Totten', 'Scott McAlpine', 'Cynthia Bechill', 'Jean A. Moss', 'Warren Ross', 'Daniel Zajfman', 'Jane Dammen McAuliffe', 'Jacqueline Genet', 'F. Javier Cevallos', 'Steve Head', 'Peggy D. Kennedy', 'George D. Edwards', 'Margaret Fitzpatrick', 'Lynn G. Gillette', 'Mohammed Sharif Yaftali', 'John M. Anderson', 'Greg Christy', 'James Loftus', 'Timothy R. Lannon', 'Alain Spalanzani', 'Maria Nina Balbas', 'Paul Karsten', 'Gilles Trystram', 'Jerry Beck', 'Nicanor M. Reyes Jr.', 'Gabriel Zeis', 'Allen D. Calvin', 'Ronald Chesbrough', 'Randall VanWagoner', 'Linda N. Hanson', 'Jose Maria Mariano', 'In-Suk Hamm', 'Gregory H. Williams', 'L. Rafael Reif', 'Thomas K. McInerny', 'Bill Behrman', 'Mitchel B. Wallerstein', 'Shaun L. McKay', 'Diego del Alcázar, 10th Marquis of la Romana', 'Tom Samph', 'Mark T. Cregan', 'Mary Sue Coleman', 'Bonifacio S. Villanueva', 'A.H. Flierman', 'François Germinet', 'Chin Seng Chen', 'Henry Etzkowitz', 'Doug DePriest', 'Jacques Bittoun', 'Tom Fogarty', 'Lou Yuangong', 'Rex M. Horne Jr.', 'Waltraud Wende', 'Wendy J. Deichmann', 'Edward F. Leonard III', 'Armand Couture', 'Melinda Nish', 'Ruth Austin Knox', 'Don Tomas', 'Zia Mohyeddin', 'Manuel De Leon', 'Geert Dales', 'Benoît Lauras', 'Daniel J. Martin', 'Robert L. Mees', 'Lori Gaskin', 'Tadashi Matsunaga', 'Devin Stephenson', 'Caroline Marian S. Enriquez', 'Robert C. Brown', 'David Rhodes', 'Chao-hsiang Yang', 'John Annette', 'Donald R. Eastman III', 'Antonio Pérez', 'Paul Mengal', 'Karin Markides', 'Jim Easton', 'Virginia L. Hood', 'Austin Lally', 'Janie C. Park', 'Donald P. Christian', 'Nassrollah Gerami', 'Jack Evans', 'Erich Barke', 'Frank Vandiver', 'Barbara Douglass', 'Samuel Eliot', 'Gene Yoon', 'Michael S. Bassis', 'Greg P. Smith', 'Clarence G. Sexton', 'Tim Foster', 'G.T. Smith', 'Xu Congwei', 'Yosef Mamo', 'Anthony G. Collins', 'Paul G. Gaffney II', 'Gary L. Rhodes', 'William L. Armstrong', 'Barbara Veazey', 'Jean Benkhelil', 'Henry Giles', 'Jack Quinn', 'Lilia Tolentino', 'Nestor De Vera', 'William H. Crouch Jr.', 'James D. Spaniolo', 'Paul E. Raverta', 'Rick Young', 'Peter Ueberroth', 'Guy Scott Shigemi Higashi', 'Sanford Chandler', 'Joe Kubert', 'Philippe Rollet', 'Robert L. Manuel', 'Jan Czuba', 'Robert Zimmer', 'Jacques Legrand', 'Sue DeWine', 'Donald Winnicott', 'Brian Steel', 'Wang Guangqian', 'Mohammad Ali Zolfigol', 'Masataka Inoue', 'Kent John Chabotar', 'Arthur F. Kirk, Jr.', 'Ray Bridwell White', 'John J. DeGioia', 'Roger Guesnerie', 'Chul Lee', 'Colum Murphy', 'Dominic Giroux', 'Kevin J. Mullen', 'Kieron Kennedy', 'Mohamed A. Izzularab', 'Abraham Cardenas', 'William B. Drake, Jr.', 'Matt Proctor', 'Dinesh J. D’Souza', 'David Wilson', 'Wendy B. Libby', 'John I. Jenkins', 'John Leong', 'Paul Nyquist', 'Ronald Mason', 'Kim S. Phipps', 'Jan Vercamst', 'Abdul Majeed al-Zindani', 'Pierre Daumard', 'Roger C. Y. Chen', 'Chui Tsang', 'Axel D. Steuer', 'Tetsuo Fukunaga', 'Fulchiron Hughes', 'John Y. Simon', 'Yoichiro Murakami', 'Jens Weidmann', 'JOSE PAULO E. CAMPOS', 'Tömör-Ochir Sanjbegz', 'Fred Lazarus IV', 'Cheryl Zapata', 'Dan R. Bruss', 'Kim Jong-wook', 'David Neidorf', 'Robert G. Duffett', 'Atty. Casimiro B. Juarez, Jr.', 'Mariko S. Bando', 'Cheryl Marshall', 'Steven G. Gamble', 'Marianne E. Inman', 'Bruno Ravaz', 'John Conroy', 'Koide Tadataka', 'Barry Glassner', 'Peter A. Lillback', 'Eddy Van Gelder', 'Ivor Roberts', 'Michael McGlothlin', 'W. Mark Richardson', 'Paul Greenfield', 'Michael Sweeney', 'Ogawa Hideoki', 'Tim Ditlow', 'Seán McCarthy', 'Hermenigildo B. Reyes', 'Cynthia E. Huggins', 'Solange Adelola Faladé', 'Andre G. Richard', 'Arlin Horton', 'Mohammad Ilyas', 'John W. Rosa', 'James Bowdoin', 'S. Georgia Nugent', 'Charley Holmes', 'Donald E. Bain', 'Masao Furuyama', 'Stuart Baron', 'Vivian M. Presley', 'Geoffrey M. Cox', 'William Murabito', 'Jean-Pierre Gesson', 'Bernard Dizambourg', 'Alan Wildeman', 'Gary Branch', 'Pamela Trotman Reid', 'Rick Niece', 'Kazuyuki Nagai', 'Cathy Cox', 'Ramona Lumpkin', 'Audre Levy', 'Philip A. Glotzbach', 'Abner Jackson', 'Rassoul Dastmozd', 'Michael DePrisco', 'Sean T. Buffington', 'Andreas Fischer', 'Minoru Nojima', 'Pauline van der Meer Mohr', 'Ronald G. Cantor', 'Edward Bennet', 'Julio Leon', 'Joseph Rallo', 'Zhou Xuhong', 'Frank J. Nicchi', 'Gilles Guyot', 'Michel Rousset', 'Christopher Mesecar', 'Margaret A. Huber', 'Mahboubeh Mobasheri', 'John McGuire', 'Haydn H.D. Chen', 'Judson R. Shaver', 'Giancarlo Aragon', 'David L. Eisler', 'Rita Süssmuth', 'Ning Bin', 'Jill Board', 'Janet F. Smith', 'Tilahun Mekonnen Mendedo', 'Bienvinido A. Betaizar', 'Frank G. Miglorie', 'Thomas R. Kepple Jr.', 'Ingrid Newkirk', 'Robert K. McMahan Jr.', 'Robert D Beyer', 'M. Christopher Brown II', 'Stephen D. Minnis', 'David Schroeder', 'Sylviane Gastaldo', 'Yoshito Hori', 'Se Hwa Wu', 'Ann Weaver Hart', 'Robert Wexler', 'V. Scott Koerwer', 'Karla N. Leach', 'David Sandler', 'Eugene Habecker', 'P. George Benson', 'Lee Rasch', 'Michael B. Murphy', 'Masayoshi Kiyohara', 'Gari Browning', 'Richard L. Dawe', 'Robert Pura', 'Joseph Hankin', 'Joseph B. Moore', 'Loren Swartzendruber', 'Vernon O. Crawley', 'Tina K. Anderson', 'Adolfo Jesus R. Gopez', 'John Anderson Fry', 'Devorah Lieberman', 'Roman G. Strongin', 'William Henry Burt', 'Zhan Tao', 'Thomas P. Leary', 'Paul Dale', 'Richard E. Helton', 'Philip W. Eaton', 'Raymundo B. Suplido', 'Theodore Wardlaw', 'David J. Pauldine', 'John A. Strasser', 'Julie Spence', 'David A. Sam', 'Rudolf Gröger', 'Robin Tricoli', 'Alfred Marchev', 'Rolf Cremer', 'Don Moutos', 'Georgia Thomsen', 'Loïc Vaillant', 'Davie Jane Gilmour', 'Suhail Raoof', 'Gifford Pinchot III', 'Matthew D. Shank', 'Ellen L. Meyer', 'Timothy R. Thyreen', 'Soon-ki Kown', 'Issa Batarseh', 'Bruce S. Gordon', 'Russell George', 'Alvin A. Cleveland, Sr.', 'Ho-Joon Choi', 'Don Betz', 'Mark Benedetto', 'Michele Perkins', 'Richard T. Jurasek', 'Pierre Appriou', 'Kurt Mehnert', 'Trent Keough', 'Karl Stoffel', 'Azucena L. Camagan', 'Anthony Aretz', 'Kenneth R. Nielsen', 'Mitjl Carvalho Capet', 'Suzanne Shipley', 'Heinrich Köster', 'Regina Stanback Stroud', 'Juan Vázquez', 'Dr. Gary Cook', 'Diane B. Call', 'Lex O. McMillan III', 'John Bassett', 'Jean-Loup Salzmann', 'Eric Anderson', 'Anne Fraïsse', 'Steven L. VanAusdle', 'Terence Henry', 'Asatsugru Tatsumi', 'Iwamasa Teruo', 'Sucheta Biswas', 'Sergio Ojeda-Cárcamo', 'David Ruggieri', 'Jan-Hendrik Olbertz', 'Terry L. Richardson', 'Mohamed Boussaïri Bouebdelli', 'David J Schmidly', 'Yuri Polyanskov', 'Kathleen Burke-Kelly', 'Harry E. Williams', 'William Ellis', 'Hardaway Hunt Dinwiddie', 'Daniel Levier', 'Carol S Pearson', 'William Carl III', 'Editha Zerna', 'Marie Foster Gnage', 'Anthony S. Caprio', 'Girard W. Weber', 'Jonathan Veitch', 'David L. Chicoine', 'Suppachai Samappito', 'Sylvia Barnard', 'Ali Sheikh Ahmed', 'Hung-tung Yang', 'Gunter Pleuger', 'Jean Le Men', 'Dionisio M. Miranda', 'Jackie L. Fisher, Sr.', 'Edwin Clausen', 'Alexander Gonzalez', 'Dr. Robert Campbell', 'Dana L. Gibson', 'Elizabeth Tice', 'James Chin-Kyung Kim', "Dan O'Rourke", 'William Sanborn Pfeiffer', 'Zhao Yueyu', 'Denise A. Roche', 'Shimon Amar', 'Daniel J. Phelan', 'Piero Martinoli', 'Michael Claire', 'Bernard Etlicher', 'Mohamed Hamid Mohamed', 'Stephen Hertzog', 'Tahar Hadjar', 'Michael Scholar', 'Ryosho Tanigama', 'Sekyung Lee', 'Cao Deming', 'Yannick Lung', 'Mohamed Maged Eldeeb', 'Randy Schmailzl', 'David Wain Coon', 'Ronald L. Oakes', 'Jürgen Weischer', 'JIM JEFFERY', 'Tzu-Hsiang Ko', 'Sami Menkara', 'Tex Boggs', 'Bernard Thibodeau', 'George E. Martin', 'Chito B. Salazar', 'Brantley Briley', 'Charles Petitt', 'Lin, Chin-Chuan', 'François Petit', 'Brian Rohrbough', 'Karl-Heinz Hoffmann', 'Bernard Miège', 'Bassam Deeb', 'Dieter Orzessek', 'David C. Seyle', 'Kathy Krendl', 'Allyson Hughes Handley', 'Evan Dobelle', 'Thiraphong Tangthirasunan', 'Gregory D. Jordan', 'Randall C. Lawrence', 'V. Burns Hargis', 'Christopher M. Thomforde', 'Huang Wei', 'Joseph Britton', 'Duk Hyung Yoo', 'Wes Bryan', 'Gerhard Fuchs', 'Jeff Abernathy', 'Antoine M. Garibaldi', 'Ed Berger', 'Marc Johnson', 'David S. Wolk', 'Kermit Bridges', 'Michel Garnier', 'James Walton', 'David Sam', 'Jacques Bolle', 'Jörg Steinbach', 'Miriam Edulian Pascua', 'Larry M. Phillips', "Aaron Ben Ze'ev", 'Ivan Vakarchuk', 'Toson Deabes', 'Kenan Araz', 'Nancy J. Uscher', 'Kevin Trutna', 'Robert C. Daugherty', 'Georg Krausch', 'Jien-Ming Jue', 'Robert Harrison', 'Datuk Dr. Md.Zabid Hj Abdul Rashid', 'Francesco Cesareo', 'Dan Meyerstein', 'Linda C. Young', 'Paul McCarthy', 'Karsten Schmidt', 'Wang Zuwen', 'Pen-Jung, Weng', 'Carol A. Taylor', 'Billy W. Stewart', 'Dale T. Knobel', 'Roe Darnell', 'Brendan Kilcoyne', 'Anne M. Kress', 'Dr. Joe M. Aguillard', 'Micheal Deering', 'David M. Carr', 'Donald Zillman', 'Jow-Lay Huang', 'Barbara Kavalier', 'James M. Simmons', 'Gerald T. Brouder', 'Stephen Scott', 'Leo Higdon', 'Alastair Pearce', 'Wayne B. Powell', 'Miguel Muñoz', 'Seth P. Galea’i', 'Donald J. Farish', 'Peter Gotcher', 'Ronald A. Bosco', 'Clifton M. Smart', 'Max Blouw', 'Félix V. Matos Rodríguez', 'Josephine C. Reyes', 'James F. Jones', 'Vallop Suwandee', 'Harry T. Lester', 'Jean Raymond', 'Fay Myers', 'Rick Smilow', 'Paul E. Stanton, Jr', 'Larry H. Linamen', 'Orlando J. George, Jr.', 'Robert Fouquet', 'Ron Bormans', 'Axel Kahn', 'Thomas E. Blevins', 'Neil Hoffman', 'Ana Jaramillo', 'Karen R. Lawrence', 'Jose Ignacio Sanchez Galan', 'George Dammer', 'Ernest McNealey', 'W. Myles Shelton', "Vincent O'Donoghue", 'Grace J. Rebollos', 'Priscilla Bell', 'Drew Gilpin Faust', 'Carol Lytch', 'James E. Collins', 'Sheldon M. Schuster', 'Scott Pilarz', 'Michael B. McCall', 'Kim Seung-Taek', 'Thomas Quinn', 'Allen L. Sessoms', 'James L. Muyskens', 'Marion Thomas Harrington', 'David L. Beckley', 'James Keller', 'Daniel J. Carey', 'John C. LaRosa', 'Daniel Ward', 'Donald Kennedy', 'Jacqueline Claunch', 'John T. Casteen III', 'Takuya Katayama', 'Joy McDaniel', 'Terrence A. Gomes', 'James Frazier Barker', 'Emir Caner', 'John Dowling', 'Pierre Charreyron', 'David G. Horner', 'Sandra C. Gray', 'Glen Gabert', 'Erik O. Nielsen', 'Robert L. Barchi', 'Douglas Travis', 'Stephen Toope', 'Jon Strauss', 'Teodoro T. Evangelista', 'Anne Temte', 'Gregory Boquet', 'Ismail Abdel Ghafar', 'Thomas F. Schutte', 'Dieter Leonhard', 'Richard M. Sanchez', 'Joseph P. Opatz', 'Horace Lecoq de Boisbaudran', 'Ron Lynch', 'Victor M. Barosso', 'Tom Avery', 'Marianne Assenmacher', 'David Naylor', 'Diana S Natalicio', 'Pierre Lunel', 'Zargar Shooshtari', 'Everett Piper', 'Patricia Skinner', 'Ronald A. Slepitza', 'Felipe C. Belleza', 'Yongzhong Song', 'Donald DesRoches', 'Jonathan DeFelice', 'Joe A. Stepp', 'John Rudley', 'Lisa Darling', 'Jean Goodnow', 'François-Xavier Clédat', 'Yeong-Bin Yang', 'Eddy Campbell', 'Helena Kennedy, Baroness Kennedy of The Shaws', 'David F. Rankin', 'Daniel Barwick', 'Wallace Loh', 'Cynthia Bambara', 'Margee M. Ensign', 'George R. Spann', 'Antonio Laperal Tamayo', 'Mary J. Meehan', 'Joseph Olson', 'Chuan Yi Tang', 'Alistair Brown', 'Leo Lambert', 'John Bowman', 'Jim Lindenmayer', 'Mathana Santiwat', 'Charles Paul Conn', 'John Feaver', 'Dorsey L. Kendrick', 'Judith Rhoads', 'Marvin Krislov', 'Jacques Robert', 'Joanne Truesdell', 'André J. Cointreau', 'Ernest R. Nichols', 'Kenneth K. Quigley, Jr.', 'Kim Duok-Jool', 'Richard A. Beyer', 'Halmurat Upur', 'Vyacheslav Zarenkov', 'Calvin W.Burnett', 'Masahiko Iburi', 'Harold Shank', 'Mohamed Amara', 'In-Soo Lee', 'Dan Ziegler', 'Pierre Giorgini', 'Richard D. Valentine', 'Shane S. Schulthies', 'Eileen Holden', 'Ma. Rosario O. Lapus', 'Arthur C. Vailas', 'Benjamin B. Dunlap', 'Glenn Poshard', 'Nerijus Pačėsa', 'Edward Noonan', 'Nguyễn Trọng Giảng', 'Fang Guanghua', 'Roderick J. McDavis', 'Qu Jia', 'Nolan Miura', 'Arne Sunde', 'Jon H. Larson', 'Lisa Marsh Ryerson', 'Xu Jinwu', 'John W. Stewart III', 'Jonathan Yagua', 'James Porter', 'Lesley Lovett-Doust', 'Aditya Ghosh', 'Lisa Anderson', 'Jairy Hunter', 'Rob Brons', 'Stuart Feldman', 'Robert Kelley', 'Amy Banse', 'Arturo F. Eustaquio III', 'Liu Yichun', 'Stanley E. Porter', 'Cynthia Zane', 'Crispin A. Cordero', 'Irma Brenman Pick', 'Richard Littlebear', 'Hermann Heiler', 'Ming Da Wu', 'Carl C. Liebert III', 'Stephen Privett', 'Miles L. McCall', 'Ahmet Acar', 'Richard H. Hart', 'R. Owen Williams', 'Debra M. Townsley', 'Aaron Podolefsky', 'Wade McCamey', 'J. Colin Dodds', 'A C S. Arunkumar', 'J. Anthony Fernandez', 'Terry Britton', 'Melissa Joan Hart', 'Dennis D. Berkey', 'Sari Nusseibeh', 'Dorene Petersen', 'Michael J. Kasler', 'Séamus MacFerran', 'Linda M. Bleicken', 'Lourdes L. Albis', 'Bogdan Bogdanov', 'Daniel M. Asquino', 'Fumitake Gejyo', 'Fr. John Horn, S.J.', 'Peter Sperber', 'Marc-André Berclaz', 'Robert F. Schmidt', 'H.J. Pijlman', 'Lester Lefton', 'William B. Greer', 'Joseph G. Jabbra', 'Shirley M. Tilghman', 'Max Azoulay', 'Chung-Weun Hou', 'Claus R. Rollinger', 'Jonathan S. Raymond', 'Yang Zongkai', 'Rajen Vurdien', 'Eberhard Umbach', 'Kendall A. Blanchard', 'Bjong Wolf Yeigh', 'Anne Munley', 'Robert Gervasi', 'Kathryn Laurin', 'Ronald J. Ambrosetti', 'Feather Houstoun', 'JACQUES GARIÉPY', 'Yusuke Sagara', "Jerry F. O'Neill", 'Jean-Michel Uhaldeborde', 'Shih Choon Fong', 'Professor Don Barry', 'Joe Wiley', 'Joao Carlos Brega', 'Yasuko Hasegawa', 'Baker Pattillo', 'Charles Augustus Aiken', 'Wilfredo Lubrico', 'Chia-nan Tai', 'Danny P. Hollingsworth', 'John Rickman', 'Ron Erickson', 'R. Barbara Gitenstein', 'Jean-François Balaudé', 'Benjamin E. Sasse', 'Bob McCullough', 'Teodoro C. Robles', 'Donal Ó Cianáin', 'Bettsey L. Barhorst', 'Michel Mudry', 'James L. Gaudino', 'Dale T. Irvin', 'Abdullah M. Al-Musa', 'Kittichai Triratanasirichai', 'James G. Moseley', 'Yoshiko Arikawa', 'Guillermo P. Torres, Jr.', 'Ruben C. Sevilleja', 'Xu Mei', 'Kim Young-gil', 'David L. Soltz, Ph.D.', 'Aristotle T. Malabanan', 'Dan Reneau', 'Sue Collins', 'Dennis H. Holtschneider', 'Edward G. Boehm, Jr.', 'Rita Rice Morris', 'Uthai Dulyakasem', 'Freeman A. Hrabowski III', 'Chin Shun Wu', 'Dominique Pierre Perrin', 'Anna Wasescha', 'Ko Kajiyama', 'J. J. Conte', 'Anne Leavitt', 'Stephen J. Jerome', 'H. John Harker', 'Josette Travert', 'Fred Pestello', 'W. Bruce Ayers', 'Robert C. Oliver', 'Ronald R. Thomas', 'Denise Yochum', 'Jack McGee', 'Joseph McGrath', 'Dan Boone', 'Cary A. Israel', 'Martha McLeod', 'Joyce Judy', 'Shin-ichi Nakamura', 'Eugene R. Milhizer', 'Wang Zihao', 'Aruna Katara', 'Thomas Curran', 'Henry Lewis III', 'David E. Potts', 'Richard Milliken', 'Marilyn J. Schlack', 'Alan Scheibmeir', 'Tommy King', 'Kala Vijayakumar', 'John L. Anderson', 'Thomas V. Chema', 'Benoît Eurin', 'Kent Ingle', 'Howard Keim', 'Michel Boyer', 'Lise Dumasy', 'Werner Inderbitzin', 'Peter MacKinnon', 'Gil Stork', 'Riley Coulter', 'Richard W. Lariviere', 'Christoph Seeßelberg', 'Chan-Young Bang', 'Alton D. Scales', 'Jeffrey Herbst', 'Doug Wilson', 'John Davies', 'Carol Ballantyne', 'Christopher Hopey', 'Kenneth M. Price', 'Jill Tiefenthaler', 'Robert P. Deegan', 'Steven G. Poskanzer', 'Mikhail Brodsky', 'Maria Myrna Concepcion', 'Mark Escamilla', 'Jekuk Chang', 'Dr. Amado Gabriel Esteban', 'Donald Snyder', 'Emmanuel Kingsley Kwabena Larbi', 'Hyung Jin Jeong', 'Rosalie M. Mirenda', 'D. Bancel', 'Michael F. McLean', 'Emily Dodson de Leon', 'Jonathan E. Paier', 'Morton O. Schapiro', 'John M. Quinn', 'Millicent Valek', 'Phan Thanh Binh', 'Sarah Wright Cardinal', 'H. Scott Bierman', 'Robert Weisbuch', 'Sihn Hang Gyun', 'Jim Madder', 'Steven M. Corey', 'Phil Castille', 'Rob Pearigen', 'Gareth N. Genner', 'Ruben Armiñana', 'Henry D. Shannon', 'Vudtechai Kapilakanchana', 'Robert Bell', 'Michel Quesnel', 'Judith Huntington', 'Duan Baoyan', 'Frédéric Cadet', 'Marvin A. McMickle', 'Ronald L. Vaughn', 'Susan Zech', 'Mary Lydia Ebora', 'Dr. Dwayne Uglem', 'D. Clay Perkins', 'Jo Ellen Johnson Parker', 'Madeleine Slutsky', 'Richard Livingston', 'Ronald L. Litzinger', 'B. James Dawson', 'David Leebron', 'Bruno Sire', 'John Ryder', 'Marcello Fontanesi', 'Rev John Marsland', 'Molla Zadeh', 'Sara Wenger Shenk', 'Anne B. Kerr', 'Betsy Boze', 'William A. Shutkin', 'Jerry Johnson', 'Carol Quillen', 'Ray Roennfeldt', 'Abdolmajid Asadi', 'Francis Christopher Oakley', 'Timothy Hall', 'Lou Anna Simon', 'Jonathan Lash', 'Li Xiaohong', 'Horst Hippler', 'George C. Wright', 'Miguel Santiago', 'Dawood Farahi', 'Robert A. Wharton', 'Detlev Buchholz', 'Alan Shaver', 'Michael P. Viollt', 'John Paul Murphy', 'Yves Lichtenberger', 'Yu Shicheng', 'Sultan bin Mohamed Al-Qasimi', 'Paul Ague', 'Daniel Laurent', 'Pierre Livet', 'Marvin Martinez', 'Karen Whitney', 'Timothy W. Tong', 'William P. Kelly', 'Stephan A Jansen', 'Charles Mathewes', 'Hamza Yusuf', 'Claude Packer', 'Robert L. Bogomolny', 'Carolyn Ray Boone Mahoney', 'S. Alan Ray', 'Don Schoendorfer', 'George Fairchild', 'Jean-Jacques Bernier', 'Günther Grabatin', 'Patrick Molle', 'Jay Rundell', 'Jules Glanzer', 'Vito Ippolito', 'Para M. Jones', 'Muhammad Mustafa Khan', 'Amable Aguiluz IX', 'Pranee Sungkatavat', 'Peter H. Tsaffaras', 'Greg Hamann', 'Kay Albertson', 'Marilyn Luscombe', 'John Williams', 'Sean Riley', 'Hajime Togari', 'Zhang Yaoxue', 'Jim Richardson', 'Kenneth Lemanski', "Shin'ichiro Wakao", 'Georges Champetier', 'Jo Ann Koch', 'Joseph W. Polisi', 'Abdullah A. Al-Othman', 'Akira Fujishima', 'Randy Beutler', 'Yang Chuanping', 'James Rizzuto', 'John V. Lombardi', 'Fabio Villegas Ramírez', 'J. Scott Burhoe', 'Vanchai Sirichana', 'Lee Bollinger', 'Peter Cimbolic', 'David Starr Jordan', 'Wang Cizhao', 'Takuya Eto', 'Keith R. Anderson', 'Raymond S. Angeli', 'Victor W. Henderson', 'Beaulah Schoeman', 'Kichizo Akashi', 'Sara Jayne Steen', 'Myles W. Scoggins', 'Ralph Stengler', 'Babette Simon', 'John Donohoe', 'Russell K. Hotzler', 'Lu Hardin', 'A. Susan Carleo', 'Peter M. Donohue', 'Philip P. Gerbino', 'A.J. Antun', 'Bob H. Green', 'Séamus Ó Riain', 'Tom Ries', 'Alireza Ashouri', 'Nickey Brennan', 'Dr. Ron Common', 'Liu Te-Chin', 'Joseph Aoun', 'Robert G. Ottenhoff', 'Jean Paul Hautier', 'Bruce G. Fawcett', 'Katsue Kojima', 'Li Weian', 'Thomas C. Machalski', 'Kenji Yamamoto', 'Alfred Noble', 'Jeffrey J. P. Tsai', 'Russell Strutt', 'Firoz Rasul', 'Abdullah bin Mohammad Abdullah Al-Rashed', 'C. Peter Magrath', 'Masakatsu Mori', 'Stephen D. Nadauld', 'Dennis Hollinger', 'Kathleen Owens', 'Austin A. Lane', 'Domingo J. Diel', 'Craig Calhoun', 'W. Taylor Reveley III', 'Sorin Blejnar', 'Pascal Binczak', 'Gasim Badri', 'Roger Parrott', 'Claude Courlet', 'Ronald E. Thomas', 'Alan Hurwitz', 'James L. McDonald', 'Sushil Jain', 'Peter Eichhorn', 'Elizabeth Smart', 'Terrence J. Burgess', 'James P. Eckman', 'Isao Taniguchi', 'William P. Leahy', 'Samuel K.C. Chang', 'Seán Kelly', 'Paul Doop', 'Werner Müller-Esterl', 'Dr. Walt R. Griffin', 'Ho Chi Minh', 'Martin Evans', 'Romeo A. Divinagracia', 'Li Peigen', 'Dean C. Collins', 'Pierre Paraf', 'Mark Dreyfus', 'Kay Norton', 'Richard Vistelle', 'Daniel J. Bradley', 'Larry Minks', 'Chang Kuo-wei', 'Elisa Stephens', 'Rob Reimer', 'Jacques Rebecq', 'Suwit Laohasiriwong', 'Nedeña C. Torralba', 'Rose Marie Kujawa', 'Rami Hamdallah', 'E. Gordon Gee', 'Kay Sloan', 'Anthony S Bryk', 'Felix M. Lopez', 'T.J. Arant', 'Milton A. Gordon', 'Terrence J. Downey', 'Donald V. Dowless', 'Carlisle B. Rathburn, III', 'Jeffrey C. Freeman', 'Patrick E. White', 'Eike Harms', 'Daniel Lowery', 'Hah Won', 'Dr. Nancy Kleniewski', 'Paul M. Martin', 'Robert A. Adams', 'Jessica M. Stumpf', 'Michael Carmody', 'Gali Bali', 'Wang Jinsong', 'Bernie Ploeger', 'Yuji Yui', 'Ahmed Enwer Dizeyî', 'Lynn Tolbert Kilchenstein', 'Joe Schaffer', 'Jean-Maurice Verdier', 'Edwin Alderman', 'Bob Davies', 'Harold B. Graves Jr.', 'Lisa Staiano-Coico', 'David R. Holmes Jr', 'Michael Balint', 'Noboru Yoshimura', 'Salem Bouyahia', 'Guy Gardner', 'Daniel T. Oliver', 'L. Larreng', 'Lewis W. Green', 'Kamalain Shaath', 'Jennifer Raab', 'Mordechai Rozanski', 'Labib Khadra', 'Margaret McMenamin', 'Sebastian Brändli', 'Michael A. MacDowell', 'Xu Xianming', 'Zhang Bigong', 'Christopher A. Sims', 'Roseann Runte', 'John Welty', 'Daniel Papp, Ph. D', 'Paul Hannigan', 'Rebecca L. Sherrick', 'David J. Fike', 'Peter Gudmundson', 'Warrick L. Carter', 'Selma Botman', 'Bradley J. Ebersole', 'William E. Troutt', 'Elizabeth Quirino-Lahoz', 'Anthony Hodge', 'Reinhold R. Geilsdörfer', 'Thomas Manley', 'Joe C. Loser, Jr.', "Robert M. O'Neil", 'Pamela Anglin', 'John J. Neuhauser', 'John E D D S Maupin Jr', 'John E. Klein', 'William A. Lewis', 'Dafydd Elis-Thomas', 'Dan Struble', 'James C. Votruba', 'Kevin Drumm', 'Steve Franks', 'Clemente Q. Uson', 'Maeng Eon Park', 'Jose Lastimosa Bacusmo', 'Jean-Louis Gout', 'Willard White', 'John W. Byrd', 'Jong-Tsun Huang', 'Jan Lindsay', 'Kookshin Ahn', 'Carol Jean Vale', 'Cecil O. Samuelson', 'Michael C. Maxey', 'Raymond Cummiskey', 'Kern Koh', 'Chung Dong Gweon', 'Jonathan Michie', 'Salar Kamangar', 'Șerban Pop', 'Dr. Richard Davenport', 'Philip A. Amerson', 'Richard Schenk', 'Charles Menghini', 'Jan L. Gehler', 'Ralph Reavis', 'Kristin R Woolever', 'Horace Mitchell', 'Nora M. Ponce', 'Maurice Lee', 'Herman Saatkamp', 'Barbara Vacarr', 'Pierre Merlin', 'Neal Simon', 'Albert Fernando Patrick Dusaban', 'C. L. Max Nikias', 'Mohammad Qayoumi', 'Hal V. Hoxie', 'Shan Honghong', 'Dr. Rodney D. Bennett', 'Jean-François Sautereau', 'Charles Couyba', 'Richard J. Evans', 'Stephen C. Ainlay', 'Bonnie L. Humphrey', 'Liam Clifford', 'John W. Mills', 'Ke, Bingsheng', 'Henry Hill Harrington', 'Thomas D. Meier', 'Steven W. Eckman', 'Matt Fowler', 'Lloyd Axworthy', 'Michael T. Benson', 'Kenneth Ramchand', 'Penelope W. Kyle', 'Şenay Yalçın', 'Drew Matonak', 'Luis M. Proenza', 'Gerardo O. Santos', 'Fe Nazareno - Martinez', 'Mary L. Fifield', 'Charles Sikorsky', 'Jorge L. Díaz-Herrera', 'Terry Anne Tosh', 'Robert C. Olsen Jr.', 'Thelma J. White', 'Li Jianbao', 'Ernest Jones', 'Roberto C. Yap', 'Lesley M. Hallick', 'Edward William Abel', 'Abdollah Jassbi', 'Todd Cunningham', 'Frederick J. Finks', 'Paul D. Chinchen', 'Ellen McCulloch-Lovell', 'Zafar Ullah Chaudhry', 'Cheong Hee Kiat', 'Samuel Chuah', 'Samuel J. Meisels', 'Barbara Ainsworth', 'McKinley Williams', 'Eduardo Gullas', 'Shen Changyu', 'Kusumi Harushige', 'Dominique Paccard', 'William Durden', 'Roger Decottignies', 'Liang Chee Wee', 'Richard G. Jewell', 'Kang Sam-jae', 'C. Pat Taylor', 'Erlinda Martinez', 'John E. Endicott', 'Richard Ortner', 'Masaru Fakuda', 'Dale Meyer', 'Duranda Greene', 'Barbara-Jayne Lewthwaite', 'Kathy Kinloch', 'Taxifulati Teyibai', 'Ester Albano Garcia', 'James Henry Russell', 'Bob Bernhardt', 'Stephen R. Guptill', 'Jacques Goudet', 'James Gozzo', 'William E. Griscom', 'David McAllister-Wilson', 'Jean Boulouis', 'Chamnian Yosraj', 'Herbert Zickfeld', 'Pongsak Angkasith', 'Jose A. Adames', 'Jill Beck', 'Jean-Louis Quermonne', "Mary Eileen O'Brien", 'Jean-Jacques Bachelier', 'Bryan Chapell', 'Vladimir Vasilev', 'Aloysius Maranan', 'Randy Falco', 'Joseph L. Subbiondo', 'Todd R. Holcomb', 'Patrick Lévy', 'Remegita C. Olvida', "Anne O'Gara", 'Pascal Olivard', 'Bernard Lamarre', 'Terri Scott', 'Barthélémy Jobert', 'Vincent Berger', 'Eugene Giovannini', 'Sharon Y. Hart', 'David J. Werner', 'Hwung-Hweng Hwung', 'Ju Tzong-ching', 'Hsin-Su Yu', 'Stephen Samuel Wise', 'Rodney H. Mabry', 'Piyasakol Sakolsatayadorn', 'Pamela Fox', 'Yasushi Saito', 'Jean-Pierre Poussou', 'Cecilia Cervantes', 'Toshikazu Yasui', 'Carole A. Cowan', 'Oren D. Root', 'Wilfredo Nieves', 'Jolene Koester', 'David B. Smith', 'Rikuo Takai', 'Jane Gerety', 'Nabil al-Araji', 'George Anthony Tilly', 'Vincenzo Scotti', 'Daniel Podolsky', 'Michael C. Miller', 'Yves Le Corre', 'Robert E. Ritschel', 'Katsuki Yokoyama', 'Alexander Green', 'Peter Quinn', 'Mary Ann Leeper', 'Ronald A. Wood', 'Jeff Zucker', 'Frank Cleveland Bolton', 'Carr Waller Pritchett, Sr.', 'Daan Braveman', 'Martha T. Nesbitt', 'Marie-Christine Lemardeley', 'Abdullah al-Husseini', 'Carl Baugh', 'John Smithson', 'Mark La Branche', 'Dr A L Rao', 'Joann La Perla-Morales', 'Brad Smith', 'Niels-Erik Andreasen', 'Joanne V. Creighton', 'Abdel Khaleq al Farra', 'Dr. Charles Welch', 'Shouan Pan', 'Alice Gast', 'John E. Jablonski', 'Quintin B. Bullock', 'Robert A. Corrigan', 'J.H. Riddell', 'Sheftel Neuberger', 'Anuwar Ali', 'Rod Wilson', 'Satish K. Tripathi', 'Thomas F. Flynn', 'Teresa A. Sullivan', 'Lewis N. Walker', 'Hisatake Shibuya', 'Robert Grove-Markwood', 'Patricia E. Potter', 'Ned Levine', 'Steven M. Rose', 'Pádraig MacNamee', 'Susan Fuhrman', 'Paul Haidostian', 'Jean-Charles Pomerol', 'Joan Hinde Stewart', 'Andrew Hugine, Jr.', 'Toshifumi Yada', 'Judith A. Ramaley', 'Guangsheng Fu', 'Raymond Polin', 'Chris Brogan', 'Frank Rose', 'JoAnne Boyle', 'Wilfred Bion', 'Terence Curtin', 'Miriam Ruth Arzate Mosqueda', 'Tom Cobjørnsen', 'James Reid Cole', 'Clara Miller', 'Jack Miller', 'Jerry MacArthur Hultin', 'Dr. Gary Kachanoski', 'Olivier Audeoud', 'G. Edward Hughes', 'Daniel R. Porterfield', 'Philip Speas', 'Howard Willets', 'Ohsawa Kanju', 'Pradit Takerngrangsarit', 'John Delaney', 'Steven C. Boguslawski', 'Harris Pastides', 'Charles Teague', 'Arturo Fernández Pérez', 'Peter W. Teague', 'Jodi L. Abbott', 'Byong-Kwan Won', 'Shirin Aqa Zarif', 'Vincent Maniaci', 'Pam Eddinger', 'Akio Yuki', 'Kevin F. Nagel', 'Richard Levis McCormick', 'Fabienne Blaise', 'Liu Ming', 'Naohide Kinae', 'J. Cameron West', 'James L. Clark', 'Robert Gallucci', 'James R. Campion', 'Jean Burgos', 'Kevin Glen Walthers', 'Tony Zeiss', 'Ivory V. Nelson', 'Jason T. Konesco', 'Paul C. Pribbenow', 'John Grosskopf', 'Kiyosi MORITA', 'Bernard Couvillion', 'Nihat Berker', 'Sidney A. McPhee', 'Pierre Vialle', 'John Hilpert', 'David M. Doran', 'John Balester Jenkins', 'Richard Gurnon', 'Jackie Vietti', 'Stephen Mulkey', 'Glenn E. Mayle', 'Jerry Cain', 'Dennis L. Hefner', 'Ruthann Knechel Johansen', 'John C. Reynders', 'Floyd T. Cunningham', 'James L. Flanagan', 'Eduardo De Los Angeles', 'Daniel Lehmann', 'Sylvie Faucheux', 'Daniel McCarthy', 'Barbara Couture', 'Motter Snell', 'Ed Schrader', 'I Made Bakta', 'Annie Doona', 'Neil Jacobstein', 'Mark Maxwell', 'Feliciano S. Rosete', 'Douglas Allen', 'Jörg Wallmeier', 'Steven Goldman', 'Glenda O. Barron', 'Walter C. Bartlett', 'Carl (Tobey) Oxholm III', 'Sharon Carry', 'Kishore Roy', 'Kenneth Dobbins', 'Albert Charles Jacobs', 'William N. Johnston', 'Richard F. Giese', 'Scott B Ransom', 'Walter Peeters', 'Ro Kunil', 'Steven Knapp', 'Philip Conroy', 'Michael T. Wood', 'Ernesto M. Arceo', 'Kathy  Player', 'Léon Deshairs', 'John Dever', 'James P Torgerson', 'Donald J. Harrington', 'Otogo Kataoka', 'Bart Patterson', 'Emilio P. Jaruda', 'Masami Yamamoto', 'Carl Zylstra', 'Richard Flynn', 'Abdullatif Ahmad Al-Bader', 'Scott D. Miller', 'Anthony Ibarra B. Fabella', 'Andrew Westmoreland', 'J. Steven Bishop', 'Hiam Sakr', 'James F. Winterstein', 'Lance W. Carluccio', 'Miomir Žužul', 'Lorne M. Buchman', 'Dianne Boardley Suber', 'Albert Chan', 'Robert J. Duncan Jr.', 'Ann Marie Murray', 'Zorica Pantic', 'Bertrand Monthubert', 'Carol Heitz', 'R. Thompson Bond', 'William Beauchamp', 'Seán McCague', 'Robert Witt', 'Thomas L. Lewis', 'Ulrike Beisiegel', 'James Jacobs', 'Mario Monti', 'Jean Hernandez', 'Fletcher M. Lamkin', 'Robert S. Nelsen', 'Andrew P. Roth', 'Theresa Mary Martin', 'Serhiy Kvit', 'René Rémond', 'Stuart C. Lord', 'Michael McGinniss', 'Serban Agachi', 'Mahmoud Safari', 'John J. Hutchinson', 'Maria Luisa R. Soliven', 'L. Jay Lemons', 'Helen Drinan', 'Adelaida de la Calle Martín', 'Ou Jinping', 'Mark A. Heckler', 'Joe Shoen', 'Tony Atwater', 'Richard Kobritz', 'Colleen Perry Keith', 'Carol T. Christ', 'James Dale Rottweiler', 'Margaret L. Drugovich', 'Bentley B. Rayburn', 'Eric Conte', 'Paul Marion', 'William C. Powers', 'Ray Barber', 'Bruce Speck', 'Joseph B. Oxendine', 'Eugene J. McAllister', 'Peter Kelly', 'James J. Linksz', 'Joel Seligman', 'Mark Page', 'Chris Maples', 'Shirley Mullen', 'L.Steve Thornburg', 'Emmet A. Dennis', 'Brian Casey', 'Jacquelyn Armitage', 'Mehmet Karaca', 'Paige Patterson', 'Cynthia Azari', 'André Astier', 'Max Robba', 'Primitivo Viray Jr.', 'Robert J. Lipsitz', 'Donald J. Laackman', 'Norman Francis', 'M. Elise Kriss', 'Dr. Haruki ONISHI', 'Shuichiro Maeda', 'Frederick G. Slabach', 'Patrick J. Schloss', 'Danielle Tartakowsky', 'David C. Hodge', 'Young-Ho Kim', 'Thomas Sanford Gathright', 'Masako Iino', 'Ta-Wei Lee', 'Alireza Rahai', 'Youssoufi Touré', 'Dominique Lafon-Augé', 'Li Jiajun', 'Mineo Nakajima', 'Susan C. Aldridge', 'Franco Cuccurullo', 'Kunio Suzuki', 'Ronald W. Harden', 'Philip P. Kerstetter', 'Hee-Ok Kim', 'Paul E. Patton', 'Dianne Lynch', 'Osei K. Darkwa', 'Edward J. Harris Jr.', 'C Cathleen Raffaeli', 'Patricia Hsieh', 'Judith Maxwell Greig', 'Wesley Cornelious McClure', 'Todd J. Leach', 'Pearl H M King', 'David Olah', 'H. Kim Bottomly', 'David Maxwell', 'Leon Botstein', 'Scott Atherton', 'Allegra Brigham', 'Stanley J.Pritchett, Sr.', 'Kenshi Kusano', 'Xu Ningsheng', 'Stephen J.Hodges', 'Mike Mace', 'Brian C. Rosenberg', 'Atsushi Uchida', 'Clyde Muse', 'Robert Louis Francois Marie', 'António Manuel da Cruz Serra', 'Marwan Kamal', 'Brian Shanley', 'Jerry D. Campbell', 'George P. ""Bud"" Peterson', 'Joxel García', 'Dr. Reginald S. Avery', 'John Dunn', 'Mai Trong Nhuan', 'Clinton D. Gardner', 'Jared Cohon', 'William D. Law', 'Thérèse Lebrun', 'Don Lovisa', 'Fernando León García', 'Trevor Gardner', 'Conway A. Jeffress', 'Donald P. Astrab', 'Hou Jianguo', 'David Warren', 'Byron Klaus', 'Michel Tourlière', 'Dawn Lindsay', 'M. Christopher White', 'Joseph Robertson', 'Anne-Marie Sandler', 'George Hsieh', 'William M.B. Fleming Jr.', 'Gérard Mary', 'Gary E. Weedman', 'Kichibee Otsuka', 'William Craft', 'Truitt Adair', 'Robert Flores', 'Mohammad Hossein Imani', 'François Tomas', 'George Harne', 'Robert H. Spence', 'Walter E. Massey', 'Joel Sutton Kendall', 'Agha Muhammad Umer Farooq', 'Jack M. Lewis', 'Mary Pat Seurkamp', 'D. Gregory Main', 'Kandi W. Deitemeyer', 'Kitti Tiraseth', 'Joanna B. Cuenca', 'Myles Brandt', 'Deborah Travis', 'Randal Wisbey', 'Jacqueline Dutheil de La Rochère', 'Francis K. H. So', 'Prof. Dr. Katharina Krause', 'Eric Brenman', 'Lim Jae-sik', 'Janet Eisner', 'Kevin J. Manning', 'Tedd Mitchell', 'Yau-Gene Chan', 'George B. ""Barney"" Forsythe', 'Hideo Yamamoto', 'Pearl Kiyawn Nageak Brower', 'Stan Jensen', 'Dr. Mauri Ditzler', 'Daniel Paul Larson', 'Barbara K. Mistick', 'Carlos Hernández', 'Ronald D. Liebowitz', 'Theodore Frothingham', 'Giuseppe N. Colasurdo', 'David Huwiler', 'Tessa Martinez Pollack', 'Roger Ferlo', 'Robert Head', 'Wu Jianmin', 'Todd Williams', 'Manuel Tunon de Lara', 'Nancy H. Blattner', 'Dennis Brown', 'Eddie N. Moore', 'Sharon K. Hahs', 'Alain Ayache', 'John Smarrelli Jr.', 'H. Jeffrey Rafn', 'Osman El Sayed Lotfy', 'Steve Echols', 'G. J. Frederick', 'Beate Rennen-Allhoff', 'Manuel J. Fernós López-Cepero', 'Joanne Jaeger Tomblin', 'Eloy Oakley', 'Jonathan A. Kaplan', 'Nicole Le Querler', 'Michael Rao', 'Ron Newcomb', 'Jean-Robert Pitte', 'Iain Torrance', 'Paul Maurer', 'John Eatwell, Baron Eatwell', 'Claude Condé', 'Billy D. Hilyer', 'Harvill C. Eaton', 'Jem Spectar', 'Serena Smith', 'John N. Varona Echeandía', 'David Olive', 'Oscar Dahlene', 'Mark Zacovic', 'Steven DiSalvo', 'Elizabeth Kiss', 'Hiroshi Shimoyama', 'Colin Murdoch', 'Shinil Yoon', 'Remsen Brinckerhoff Ogilby', 'Joel Bloom', 'Richard Rose', 'James Kelly', 'Rose B. Bellanca', 'Brian Blount', 'Norman L. Stephens, Jr.', 'Simone Bonnafous', 'Gordon Bietz', 'Daniel W. Johnson', 'David Ross', 'David L. Parkyn', 'Mostafa Gouda', 'Tony Woodcock', 'Shirley C. Raines', 'David Barnard', 'Robert K. Glenn', 'W. Hubert Keen', 'Lourdes L. Almeda-Sese', 'Walter H. Nolte', 'Maurice Descotes', 'Gilles Roussel', 'Jim Underwood', 'Anthony Cheung', 'James F. Birge', 'Jau-Jang Lu', 'Obed Jiménez', 'Roger H. Sublett', 'Marshall W. Smith', 'Thomas W. Ross', 'Obay Said Al-Dewachi', 'Toshimasa Asahara', 'Philip Boroughs', 'Bryan Hillis', 'Hiroki Yoshida', 'Paula Marie Buley', 'Richard E. Wylie', 'Maurice Vincent', 'Ezat Parnia', 'Robert G. Templin, Jr.', 'Richard Joel', 'Akihisa Inoue', 'John Jasinski', 'Pauric Travers', 'Ron Jones', 'Christian Forestier', 'Anthony A. Morillo', 'Luc Hittinger', 'Michael V. Carter', 'Jack Daniels, III', 'Robert G. McCulloch', 'Scott L. Wyatt', 'Cheryl Davenport Dozier', 'Joe Kanosky', 'Mary Evans Sias', 'Dr. Daniel H. López', 'Mary Spilde', 'Skip Sullivan', 'Caroll Ryan', 'Don Hudspeth', 'Kevin Eaton', 'Uriel Sebree Hall', 'Takeo Shinmura', 'Ahmad Shaabani', 'Michel Delamar', 'Kazuo Hiramatsu', 'Michael Diffily', 'Carole M. Berotte Joseph', 'Mark Gorveatte', 'Wang Jiaxin', 'Crispino P. Reyes', 'Jean-Michel Minovez', 'Albin Haller', 'Robert Sirota', 'Boonmark Sirinaovakul', 'Sadayoshi Ito', 'Drew Bogner', 'Abdul Hakim Juri', 'Hélène Lamicq', 'Bill Brown', 'Lisa Bacon', 'Karen L. Gould', 'Danette Toone', 'Lih J. Chen', 'Raed Skhiri', 'Gilbert M. Hingone', 'Kadri Özçaldıran', 'John S. Capps', 'Br. Victor Franco FSC', 'Anthony Jose M. Tamayo', 'Scott Elliot', 'Atty. Rafaelito M. Garayblas', 'Brent R. Calvin', 'Joachim Treusch', 'Steven H. Tallant', 'Bertil Andersson', 'Mark P. Becker', 'Takayuki Nose', 'Graham Spanier', 'John C. Bowling', 'Kiyohito Yamasawa', 'Jenny Frost', 'F. Dennis Riegelnegg', 'Ricky Choi', 'Mark Roosevelt', 'Jin-Fu Chang', 'Wang Cheng', 'Chin Chung-Jen', 'Bryan D. Albrecht', 'Tori Haring-Smith', 'Gregory L. Geoffroy', 'Walter Harrison', 'Samuel L. Stanley', 'Richard M. Rhodes', 'Rodolfo Arevalo', 'Atty. Roberto P. Laurel', 'Seigo Nagao', 'Naila Enverga-Leveriza', 'Jacques Marignan', 'Mick Loftus', 'Kazuo Inamori', 'Shi Jianjun', 'David Keene', 'Lydia B. Echauz', 'Cyrille van Effenterre', 'Rob Denson', "Robert O'Keefe", 'Kee Young Kim', 'Verna Magee-Shepherd', 'Steadman Upham', 'Monica Jeffs', 'John Frederick Schwaller', 'Sam Monroe', 'Kevin Quinn', 'John J. Petillo', 'Thomas M. Fallo', 'Hubert R. Krygsman', 'Lee Gil Ya', 'William Hartley', 'Dr. Hossam Mohamed Kamel Mahmoud', 'Tim Hansen', 'Cleveland Sellers', 'David Dawson', 'Ronald C. Heacock', 'David Martin', 'Steven R. Cramer', 'Robert E. Johnson', 'Stan Fletcher', 'Tim Bellamey', 'Deborah F. Stanley', 'Ian Anderson', 'Jesús Ferro Bayona', 'Johnette McKown', 'Robert A. Scott', 'Richard L. Torgerson', 'James P. Clements', 'Gordon Graham', 'Robert L. Niehoff', 'Kamal Puri', 'Muhamad Rasat Muhamad', 'John Jackson', 'Thomas W. Gilligan', 'André Tiran', 'Jim Moran', 'Yun Chi Isarangkul Gurnee Na Ayudhya', 'Robert A. Clark', 'Ken Steorts', 'Carolane Williams', 'David Golinkin', 'Danielle Newberry Ripich', 'William D. Underwood', 'Julia Leeman', 'Luther Fred Carter', 'Sister Peg Albert', 'Ann Marie Vaughan', 'Kevin M. Ross', 'Maureen Piercy', 'Patel Amrish R.', 'John Foley', 'Norman Williams', 'Dr. Jesse Rogers', 'Thomas A. Kazee', 'Donna M. Carroll', 'Jean Emile Gombert', 'Howard Rundle', 'Carmen Twillie Ambar', 'Robert Grant Aitken', 'Ralph Nilson', 'Jean-Pierre Dedonder', 'Pierre Sineux', 'Thomas J Hynes Jr', 'Christopher Dahl', 'Gary A. Denbow', 'Winfred L Thompson', 'Maurice Renard', 'Hagit Messer Yaron', 'Russell Mason', 'Nolen J. Fuqua', 'David Sobrepeña', 'Julius C. Rodulfa', 'Elizabeth Jeffreys', 'Nguyen Dong Phong', 'Joseph Stuart', 'Robert Martin', 'Dan McAlexander', 'Yongmin Kim', 'HRH The Prince of Wales', 'George Washburn', 'Jeff Clark', 'Francis D. Farrell', 'Mark Mitsui', 'Theodore Davidge Lockwood', 'Colleen Hester', 'Makito Morishima', 'Lawrence D. Czarda', 'Rachid El Guerjouma', 'Raghavendra Rao', 'Alan S. Cureton', 'Masao Ota', 'Han Young-sil', 'Wendi B. Carpenter', 'Hidefumi Kobatake', 'Roberto Cuevas García', 'Alaa Abd-El-Aziz', 'Greg R. Weisenstein', 'Cormac Ó Brolcháin', 'Sergio S. Cao', 'Tim Faltyn', 'Patrice Jean Louis Louvet', 'Susan Cole', 'Jeffery S. Allbritten', 'Lafayette Lumpkin Foster', 'Kyoil Suh', 'Francisco T. Estepa', 'Hank Dunn', 'Adam Limentani', 'Gordon Burns', 'Michael Kehoe', 'Wolfgang A. Herrmann', 'Innocenzo Cipolletta', 'Eduardo S. Caillo', 'Allan Cahoon', 'Ángel Cabrera', 'Jean-Yves Mérindol', 'Geoffrey Bannister', 'William L. Pollard', 'Mark Putnam', 'André Legrand', 'Lillian Negrón Colón', 'Jennifer Barnes', 'Raymond S. Greenberg', 'Robert A. Baines', 'Peter Nieß', 'Louis Lowry Mcinnis', 'Ron Sears', 'Nahyan bin Mubarak Al Nahyan', 'John Wagner', 'James B. Epting', 'Michael P. Schneider', 'Dennis Lindsay', 'Pascal Saffache', 'Michael T. Victor', 'Huang Jin', 'Christopher Bratton', 'Carol A. Lucey', 'John J. Sbrega', 'Richard J. Liekweg', 'Lloyd Edward Story, Jr.', 'Robert O. Brems', 'James Danko', 'M. Lee Pelton', 'Angelo Armenti, Jr.', 'Kwang-ja Rhee', 'Guy Haaze', 'Fu Zitang', 'Michelle R. Howard-Vital', 'William A. Staples', 'John M. Ferretti', 'Nadine Forest', 'Johnny Lee Allen', 'Benjamin Jealous', 'L. Timothy Ryan', 'LIU Zhigang', 'Stephen Sundborg', 'Charles Crabtree', 'Stephen J. Kopp', 'Marsha K. Drennon', 'Ute von Lojewski', 'George A. Pruitt', 'John Bramley', 'Jose Gaspar', 'Robert Helmer', 'John P. Johnson', 'Daniel K. Church', 'Thomas Kunkel', 'Thomas Bieger', 'Thom D. Chesney', 'William M. Holda', 'Dennis J. Murray', 'Dan Angel', 'F. Gregory Campbell', 'Angeline D. Godwin', 'Firmin Tuffin', 'Bruce D. Benson', 'Yong Jung Kwon', 'Robert G. Bottoms', 'Bagher Larijani', 'Takao Gunji', 'Benjamin Allen', 'Linwood H. Rose', 'Robert G. Humphreys, Sr.', 'Philippe Augé', 'Christa Slejko', 'Anita Hansbo', 'Bruno Mantovani', 'Her-Jiun Sheu', 'Richard Peduzzi', 'Anne Anderson', 'Mark H. Erickson', 'Charles C. Krulak', 'Ali A. Houshmand', 'Michael E. Stevens', 'Yoo Jae-cheon', 'Arol Augsburger', 'Augustine L. Boquer', 'Karen Gross', 'Matthew Harrison', 'Gerhard Mammen', 'Larry R. Thompson', 'George Achenbach', 'Mark Bryce', 'Robert Fraina', 'Richard Mouw', 'Yoshihiko Kamii', 'Irene Kovala', 'Ethem Tolga', 'Jonah Rice', 'Gene Prough', 'Robert G. Boehmer', 'A. Buwayhid Langroodi', 'Lee Soon-Ja', 'Stephen T. Hulbert', 'John R. Paige', 'Viji George', 'Kris Williams', 'Francine G. McNairy', 'Tatehata Akira', 'Carol Garrison', 'Jean Claude Martin', 'Yoshihisa Tabuchi', 'James P. Klyczek', 'Lee Barker', 'Charles J. Nagele', 'Ryan Sidin', 'Stanley G. Cohen', 'John R. Hargrave', 'Nasrullah Khan Khilji', "O'dell M. Owens", 'Sean McManus', 'Paul R. Geissler', 'David L. Levinson', 'Brian Murphy', 'Jerry Farley', 'Rock F. Jones', 'Peter Dorman', 'Jeff Marsee', 'Frank M. Yamada', 'Yves H. Berthelot', 'Vil S. Bakirov', 'Sujin Jinahyon', 'Morris W. Beverage, Jr.', 'Andrew Baruch Wachtel', 'Dr. Michael Fiorentino, Jr.', 'George W. Sebolt', 'Dr. F. Dominic Dottavio', 'John Derry', 'Raymond Clapper', 'Steven M. Kinsella', 'Jun Young Kim', 'Jack Meade', 'Serwan Baban', 'Allen Goben', 'Han Qide', 'Stephen R. Briggs', 'Ted Landsmark', 'Walther Christoph Zimmerli', 'Umran Inan', 'Kathryn Jeffery', 'Potenciano Larrazabal', 'Alma Bella B. Diputado', 'Doug Whitlock', 'Kazumi Yamazaki', 'John J. Staschak', 'Christopher Forbes', 'Michael Hogan', 'Joe Hardiman', 'Michel Imberty', 'Rose H. Johnson', 'Robert Mendenhall', 'KIM Yoon Soo', 'Paul Langevin', 'Yoshiki Nishizawa', 'Cecilia N. Gascon', 'Samuel Hoi', 'Mary E Rittling', "Christopher O'Hearn", 'Timothy J. Nelson', 'Mira D. Sinco', 'WU Dexing', 'Linda Eastman', 'Charles J. Dougherty', 'Sebastian Bodu', 'Yo Akioka', 'Jonathan Astroth', 'Cornelius M. Kerwin', 'Takashi Ohyama', 'Ileana Rodriguez-Garcia', 'Janet Philipp', 'Tomoya Yoshioka', 'Cornelius B. Murphy, Jr.', 'Mary B. Marcy', 'Rob Palmarin', 'Douglas Knowlton', 'Michael Clark Turner', 'Kallol Guha', 'Dennis Dease', 'Nozomu Hoshimiya', 'Lin Jianhua', 'Thomas Christopher Greene', 'Robert A. Brown', 'Younis Amr', 'James J. Mergiotti', 'David Angel', 'Nathan Essex', 'Glendon Forgey', 'Mohamed H. El-Azzazi', 'Dennis Jones', 'Kevin Wildes', 'Jake Schrum', 'Tom Dyer', 'Sarah Chubb', 'Rasoul Khodabakhsh', 'Hiroyuki Hata', 'Jean-Pierre FINANCE', 'Susan Stone', 'Don Meyer', 'Victor Hugo Claros', 'Dennis Bona', 'Khalid Abdullah Tamim', 'Janet Todd', 'Alain BONMARTIN', 'Hitoo Nishino', 'Paul Klotman', 'Rick Artman', 'Joseph Henry Pritchett', 'Tan Chorh Chuan', 'Stuart Rabinowitz', 'Loretta P. Adrian', 'Eileen Wilson-Oyelaran', 'Yasuko Muramatsu', 'Lionel Collet', 'Sue K. Hammersmith', 'Harold G. Jeffcoat', 'Mary Ellen Jukoski', 'Robert Michael Franklin, Jr.', 'Paul Schützenberger', 'Joseph Womack', 'Charles L. Cotrell', 'H. Edward Flentje', 'James M. Beck', 'Thomas Elmer Will', 'James R. Ramsey', 'David Beckmann', 'Patrick Awuah', 'David Williams', 'Gilles Fourtanier', 'Susumu Shono', 'Duckryul Hong', 'Der-Tsai Lee', 'Darrel D. Colson', 'L.D. Britt', 'Joel E. Tabora', 'W. David Watts', 'Mark A. Smith', 'Barbara Beebe', 'Michael Kortstock', 'Rishi Jamdagni', 'Albert K. Karnig', 'Paul Baldasare, Jr.', 'Katsuhiko Shirai', 'Mohamed Mahmoud Abdelul Aal', "Gail O'Connor Mellow", 'Takashi Tajiri', 'George Keith Funston', 'Mark B. Rosenberg', 'Stéphane Attali', 'Roger H. Brown', 'David Sallee', 'Thomas Ealy', 'Jürgen Hesselbach', 'James Nowlan', 'Kenneth P. Ruscio', 'Marc Saillard', 'Ricardo R. Fernández', 'Harry Chalmiers', 'Graça Machel', 'Way Kuo', 'Fabio Beltram', 'Michael Jäckel', 'Oliver Murphy', 'Tyrone Pretorius', 'Jeremy Travis', 'Greg Hill', 'Edna Mora Szymanski', 'Patricia McGuire', 'Anthony J. DiGiorgio', 'Beverly A. Wharton', 'David W. Ray', 'Patrick J. McAtee', 'Pamela Balch', 'Brian Norton', 'William L. Henrich', 'Anthony Catanese', 'John Alexander Anderson', 'Nikolaus Risch', 'Rubel Shelly', 'Jeffrey P. von Arx', 'Shai Reshef', 'Richard Carvajal', 'Abu Bakar Suleiman', 'Felixberto C. Sta. Maria', 'Jesús Armando Longoria Gándara', 'Sheldon Levy', 'Mary Reap', 'Larry Hostetter', 'Lee Gorsuch', 'Ralph Weeks', 'Jay Helman', 'Harry G. Preuss', 'Michael See Tan', 'Robin Calote', 'Sophie Bejean', 'Jean-Luc Mayaud', 'Sunder Ramaswamy', 'Olin Joynton', 'Edwin R. Massey', 'Woodrow Burt', 'Rafael Torres Valdez', 'Lori Bettison-Varga', 'Nick Mithani', 'Jerzy Owsiak', 'Brian Mazur', 'Nagesh Rao', 'Talal Masri', 'Salam Zakaria Al-Agha', 'Michael J. Graham', 'R. Bastide', 'Michael B. Alexander', 'David J. Steinberg', 'James H. Ammons', 'Abdel Hammed Abdel Tawab Sabry', 'Thomas Church Brownell', 'Soo Geun Song', 'Wilfried Seidel', 'Patrick Finnegan', 'Edward L. Ayers', 'Franklin White', 'Frank Burns', 'Ricardo Azziz', 'William T. Abare, Jr.', 'Pamela Lewis Davies', 'Joseph E. (Tim) Gilmour, Ph.D', 'Dominic Pistillo', 'B. Steven Spann', 'Billy B. Beck', 'Patricia C. Donohue', 'Mark W. Rocha', 'David Dockery', 'Sidney A. Ribeau', 'Maurice Tanche', 'Michael J. Sheeran', 'Mark C. Gordon', 'David Helfand', 'John Barrett Kerfoot', 'Eric McKeithan', 'Happy Craven Fernandez', 'John L. Hennessy', 'Peter J. Boylan', 'Toshio Hirano', 'Keith Miller', 'Ernst E. Roberts', 'John N. Christenson', 'Robert A. Underwood', 'Edilberto de Jesus', 'Colm Allman', 'Michael R. Avery', 'Jo Young Switzer', 'Chris Redman', 'Philippe Maystadt', 'Corlis A. McGee', 'Daniel Porter', 'Jessica White', 'Rev. Monsignor Franklyn M. Casale', 'MaryAnn Baenninger', 'Jean Frézal', 'Willard Clark Lewallen', 'Michele Ernst', 'Andrew K. Benton', 'Felina Co-Young', 'Samuel W. ""Dub"" Oliver', 'John T. Broderick, Jr.', 'Glendon G. Thompson', 'David R. Decker', 'Peter J. Sireno', 'Gregory J. Marick', 'Jiang Chengyu', 'Nicholas V. Kroeze', 'Cho In-won', 'André Herpin', 'Reza Roosta Azad', 'Jennifer Wimbish', 'Harold R. Wilde', 'John Garland James', 'Maria G. Hinfelaar', 'Sadeq Hamed', 'Georges Durry', 'Justus Devadas', 'David J. Schleich', 'William T. Luckey Jr.', 'J. Larry Durrence', 'Peter Mora', 'Dionisio Cachero', 'Rich Wagner', 'John G. Peters', 'Charles Welch', 'Tom Aylesbury', 'Pierre Zundel', 'Sven Mueller', 'Vicky Smith', 'Paula S. Wallace', 'Clayton Tatro', 'Ahmad Mufid Subuh', 'Ali Zedan', 'Cornelis P. Venema', 'Steven L. Johnson', 'Billy Hawkins', 'Trudie Kibbe Reed', 'Fernando Galván', 'José Hazim Frappier', 'Linda Bevilacqua', 'Larry Rice', 'Aqeel A.Yasseen Al-kufi', 'Frederick V. Moore', 'William W. Destler', 'Pei Gang', 'Nathan O. Hatch', 'Serene Jones', 'John Lloyd Newcomb', 'B.Shorgan', 'Erik Bitterbaum', 'Katsuhiko Wakabayashi', 'Paula Peinovich', 'Kris DiGiacomo', 'Keith A. Pretty', 'Jimmy R. Jenkins, Sr.', 'P P Chhabria', 'George W. Waldner', 'E. Ann McGee', 'Dennison W. Griffith', 'Hiroshi Matsumoto', 'Marie Angelella George', 'Guy Cousineau', 'Christina Paxson', 'Irène Sokologorsky', 'Jon Dudas', 'Mary B. Hawkins', 'Daniel J. Elsener', 'Carol W. Eaton', 'Santosh Kumar Chakraborty', 'James L. Catanzaro', 'Hans Jürgen Prömel', 'Stefano Rodota', 'Esperanza Vistro', 'David M. Carlisle', 'Dorothy Cowser Yancy', 'Barbara Risser', 'Eileen Schwalbach', 'David F. Houston', 'Richard R. Shurtz', 'Andrea J. Lee', 'Andrzej Koźmiński', 'Brendan MacCarthy', 'Richard Dorman', 'Frank Pogue', 'Akira Isogai', 'Marvalene Hughes', 'Joseph S. Brosnan', 'David A. Norman', 'Rolf Tarrach', 'James A. Gray III', 'Danilo E. Abayon', 'Augusta A. Julian', 'William Bizzell', 'Juan L. Maldonado', 'James W. Abbott', 'Jacques Mohcine Bahi', 'Laura Skandera Trombley', 'J. Thomas Isherwood', 'Douglas N. Hastad', 'Ray Keck III', 'Gail Thaxton', 'Garry Jones', 'Ronald Machtley', 'Michel Soutif', 'Don A. Woodburn', 'Thomas P. Rosandich', 'Yoshihito Okinaga', 'Wayne J. Riley', 'Crisostomo A. Cacho', 'Jean Scott', 'Paula M. Rooney', 'Jean Lemerle', 'Xie Heping', 'Stephen C. MacDonald', 'Pierre-Paul Zalio', 'Neftali Yagua', 'Satchidananda Dhar', 'William Hewitt Gillespie', 'Cheryl T. Sparks', 'Deborah M. DiCroce', 'Myron F. McCoy', 'John C. Fitzpatrick', 'Jörg Kirbs', 'Frederick M. Lawrence', 'Mark Emde', 'Robert A. Vartabedian', 'V. Krishnamurthy', 'Saeki Hiroshi', 'Regina Peruggi', 'Mike Sandefur', 'David R. Hopkins', 'Jean-Pierre Laborde', 'John Turner', 'Jean Chambaz', 'Timothy J. Flanagan', 'Paul Sidouropolous', 'Ahn Kyung Soo', 'Maria Puziferro', 'Professor Richard Roberts', 'Curt Hemmeler', 'Scott Turow', 'Alayne Thorpe', 'Cui Xiliang', 'John L. Lahey', 'Milton S. Eisenhower', 'Harry G. Gardner', 'Lester C. Newman', 'Tsutomu Fuse', 'Roy F. Heynderickx', 'Lori A. Weyers', 'Gena Glickman', 'Robert Lindgren', 'Randy Roberts', 'Curt Frye', 'Paul Leroi', 'Jerry E Mcgee', 'Roy Alden Atwood', 'Judy Genshaft', 'Guy Somekh', 'Waldie Neufeld', 'Daniel A Dibiasio', 'Daniel R. Jones', 'Hideki Mori', 'Dana Mohler-Faria', 'Ray Lyman Wilbur', 'Peter Dewhurst', 'Nancy B. Moody', 'Jack Boothman', 'Raymond W. Staats', 'Tracy Fitzsimmons', 'Tsugio Tajiri', 'John Shultz', 'Brian McMillan', 'George E. Ross', 'Henry Yong', 'Jean-Charles Nicaise Perrin', 'D. C. Coston', 'Bernard Amyot', 'Walter J. Asonevich', 'Albert Walker', 'Paolo Lamberti', 'Abderraouf Mahbouli', 'Jack Thomas', 'James H. Barnes III', 'Donald Tresidder', 'Hazrat Maulana Abdul Hafiz Muradabadi', 'Karen L. Zorn', 'Maxime Allard', 'Richard Meyers', 'Eugene G. Sander', 'Il Ku Kang', 'Mahmoud Hashem Abdel-Kader', 'Lawrence R. Rast, Jr', 'Thomas P. Foley', 'Richard W. Phillips', 'Francis M. McCafferty', 'R. Gerald Turner', 'Wilson G. Hess', 'Richard Cox, Jr.', 'Guillaume Leyte', 'Matthew Schure', 'Angus Graeme', 'Toshio Masuda', 'Paul S. Trible, Jr.', 'Dale A. Lunsford', 'John Sellars', 'Seyyed Ali Mohammad Mirmohammadi Meybodi', 'Dr. Ronald (Ron) Burnett', 'Robert C. Gillett', 'Mark Boughan', 'Steven E. Franklin', 'Gaetano Viciconte', 'F. Ann Millner', 'Mick Starcevich', 'Angela Velenosi', 'Donald Katt', 'Alastair Summerlee', 'Kun Lee', 'Wen Gebo', 'Paul Kasper Johnson', 'Denvy A. Bowman', 'Bee Ching Ong Kian-Koc', 'Antoine Aiello', 'Louis Kauffman', 'Michael Joe', 'Paul Zingg', 'Joseph Pipa', 'Rev. Fr. Enrico Peter A. Silab, OAR', 'Willy Waldack', 'Luis Ernesto Derbez', 'H.E. ""Buddy"" Payne', 'Tim Howard', 'Anne McNutt', 'Dr. James M. Rosser', 'Elliot Hirshman', 'Choo Thiam Siew', 'Ophelia Fugoso', 'Esther Fike', 'Susan A. May', 'Michael McRobbie', 'Sandra Kurtinitis', 'Jim Edge', 'Francis Hardouin', 'Taketoshi Okuno', 'Xu Mingzhi', 'Francesca Onley', 'C. Michael Smith', 'Robert H. Huntington', 'Joseph Emmanuel L. Angeles', 'William H. Harris', 'Sid Davis', 'Pádraig Ó Fainín', 'Raynard S. Kington', 'Willi Hoffer', "Timothy T. O'Donnell", 'Dennis G. Massey', 'Donald E Burke', 'Carl Schlachte', 'Sakarindr Bhumiratana', 'Leonard A Schlesinger', 'Abdul Raheem Mourad', 'John D. Haeger', 'Elsa M. Núñez', 'Katherine P. Douglas', 'René Kühne', 'Arthi Narayanan', 'Ajeenkya Patil', 'Janet Dudley-Eshbach', 'Claude Larsonneur', 'Linda L. Lacy', 'Larry Goodman', 'Seyyed Ali Abtahi', 'Carl J. Strikwerda', 'Jack N. Lightstone', 'Robert M. Smith', 'Nick Carter', 'Brigitte Chanoine', 'Nora Lumbera-Magnaye', 'Mary Ellen Mazey', 'Karen Haynes', 'James S. Klauber, Sr.', 'Oh Yeon-cheon', 'David A.Caruso', 'Koki Hagino', 'Dustin Swanger', 'Dale K. Nesbary', 'Patrick Aebischer', 'Dr. Joseph Savoie', 'Mark Haynal', 'Jean-François Dhainaut', 'Ron Moss', 'Daniel S. Papp', 'Mark Evered', 'Michael Droge', 'Mohammad-Reza Mahdavi Kani', 'Jennifer Ramey', 'Michel Carayol', 'Robert Godfrey', 'Lars Pallesen', 'Laurence Barton', 'Michael S. Roth', 'Carl Hite', 'Tom Buchanan', 'Patricia N. Long', 'Gregory Aloia', 'Mark T. O’Farrell', 'Jack M. Wilson', 'Anthony Munroe', 'Guglielmo Marconi', 'Thelma B. Thompson', 'Peter Lee', 'Qian Xuhong', "Randy O'Rear", 'George E. Cooper', 'Barry M. Buxton', 'Wayne D. Watson', 'David Bridges', 'Elizabeth A. Fleming', 'Jose Eduardo S. Valdez', 'Mohammed Ibrahim Al-Hassan', 'Edward P. Smith', 'Matthew Derr', 'Vianne Timmons', 'David Kratz', 'Maria Klawe', 'Richard Guarasci', 'James Harvey', 'David L. DeGarmo', 'Anatoly Torkunov', 'Tan Xiangyong', 'Patrick McDevitt', 'Kuniaki Takata', 'Richard V. Hurley', 'Thomas Michael McGovern', 'Richard P. Salmi', 'William Scroggins', 'G.B Deglurkar', 'Michael A. Miller', 'Charles M. Ambrose', 'Dr. Gary A. Ransdell', 'Flavel Sweeten Luther', 'James H. Richey', 'Heidi Hadsell', 'Michel Alliot', 'Warren Nichols', 'Lucien Bernard', 'Shun Kodama', 'Jacques Meyer', 'Nongnit Teerawatanasuk', 'Frank Longaker', 'Henrique F. Tokpa', 'Brent Knight', 'Noreen M. Carrocci', 'Bruce Blanding', 'Mark E. Keenum', 'Clifford M Scott', 'Ken Daughters', 'Rowaida  Al-Maaitah', 'Greg A. Chamberlain', 'Joe McDonagh', 'Harriet Wallberg-Henriksson', 'Guy McLean', 'Charles H. Polk', 'Alphonse Dupront', 'Thomas Neal', 'Jacques Comby', 'Cristina Padolina', 'Lars Bergman', 'Tod A. Burnett', 'Reinhard Burger', 'Victor G. Alicea', 'Steve Timmermans', 'Joaquín Emilio Sánchez-García', 'Barbara McMillin', 'Randall J. Webb', 'Tokuya Okamoto', 'Cindy Ross', 'Vincent Nichols', 'David T. Harrison', 'Daniel J. Obara', 'Joy W. Goldstein', 'Philip Sims', 'Shigeru Katamine', 'Robert L. Breuder', 'Alain Boudou', 'Guy Bailey', 'Victoriano Estira', 'Alice Marie Jacobs', 'Michel Combarnous', 'Su Zhiwu', 'R. Alton Lacey', 'Rafaelito M. Garayblas', 'William J. Brennan', 'Takao Hotokebuchi', 'Jacque Carter', 'Wim Wiewel', 'Teravuti Boonyasopon', 'Ty Handy', 'Vitalii Kurylo', 'Alex Johnson', 'Judith Johansen', 'Borden Winslow Painter, Jr.', 'Amr Galal El-Adawi', 'Henry L. Smith', 'James Kayode Makinde', 'Alan Irwin', 'Troy Paino', 'Carol A. Leary', 'Roberto Gutierrez', 'Michael Calmano', 'Iñaki Goirizelaia', 'Mildred García', 'Mohammed Farashuddin', 'Christiane Dienel', 'Angelica Leviste', 'Frank A. James, III', 'Walid Moussa', 'Martin Paul', 'Waded Cruzado', 'Samuel C. Eastman', 'Alain Beretz', 'D. Ramanaidu', 'John C. Bravman', 'Ronald Freedman', 'J.Philip', 'D. Merrill Ewert', 'Fred Moavenzadeh', 'C. N. Chang', 'Kwesi Yankah', 'Claude Séverin', 'Pierre Baras', 'George Iwama', 'Dr. Mary Jane Saunders', 'Thomas H. Powell', 'Jens Wüstemann', 'Liu Xiangrong', 'David L. Callender', 'Geoffrey B. Shields', 'Roger P. Perez', 'Ralf D. Wegener', 'Julia M. McNamara', 'Zahra Hejazizadeh', 'Yoshihiro Hidaka', 'Michael M. Alba', 'Mary Adams', 'Michael J. Vinciguerra', 'Michael J. Sorrell', 'Musa Juwad Aziz Al-Musawi', 'Harold Geneen', 'Haywood L. Strickland', 'Driss Ouaouicha', 'John J. Hurley', 'Elizabeth Erickson', 'Lois Lee', 'Paul Larivaille', 'Gregorio Bañaga, Jr', 'Michael F. Adams', 'Richard Cummins', 'Kang Tae Beom', 'John William Ward', 'Meliton  B. Salazar, Jr.', 'David R. Brigham', 'James Brenneman', 'Sandeep Marwah', "Jim O'Neill", 'Jay A. Gershen', 'Vlatko Andonov', 'Suh Nam-pyo', 'Helmut J. Schmidt', 'Richard W. Schneider', 'William B. Eisenhardt', 'Jerome S. Parker', 'Mark J. Tierno', 'Andrew Petter', 'Joseph Sung', 'James R. Phifer', 'Bernard Teyssié', 'Nicholas Triantafilou', 'David H. Turpin', 'Lynsi Torres', 'Michael L. Burke', 'Otis C. Friend', 'Scott Cowen', 'David C. Joyce', 'J. Michael Adams', 'Dennis C. Golden', 'Riccardo Varaldo', 'Calvin O. Butts', 'Ken B. Kemper', 'Tony Frank', 'Kim Bae Cheol', 'Rémi Toussain', 'Martin H. Nadelman', 'Marilynn Bastedo', 'James Timothy Cloyd', 'Paul M. Robertson', 'Scott Hodge', 'Edita Sabonsolin-Genson', 'Norman Maphosa', 'Robert J. Imhoff', 'Chan Yuk-shee', 'Wilson G. Bradshaw', 'Barbara E. Murphy', 'Jacques Adnet', 'I.B. Fedorov', 'Samir Fatteh', 'Jo Marshall', "Bernard O'Connor", 'Keith Taylor', 'Jyh-Yang Wu', 'Nathaniel Glover, Jr.', 'Francisco Gayoba', 'Grafton J. Nunes', 'David Ellenson', 'John Tibbits', 'Elizabeth Coleman', 'André Laberrigue', 'Takuya Marumoto', 'Ji Baocheng', 'Yoshitaka Tanimoto', 'M. R. C. Greenwood', 'Lloyd Jacobs', 'Carl E. Haynes', 'Yannick Vallée', 'Megan Williams', 'Helen Bartlett', 'Masato Kuwahara', 'Ronald A. DePinho', 'Nicholas Rubidge', 'Katherine M. Johnson', 'Omar Hefni', 'Patrick Nichelson', 'Menachem Ben-Sasson', 'William D. Morrow', 'Tan Sri Datuk Arshad Ayub', 'Pamela M. Wilson', 'John K. Johnson', 'William E. Brown', 'Doris Helmich', 'Oh Keo Don', 'Richard Thompson', 'Ron Britton', 'Abdullah Atalar', 'John Ettling', 'M. Duane Nellis', 'Monico V. Jacob', 'Rev. John Ryan', 'Bonita Jacobs', 'Takehiko Sugiyama', 'Nobuhiro Yamada', 'Tom Ramage', 'Derry Connolly', 'David C. Mitchell', 'Harley Knowles', 'John D. Fozard', 'Elsa Murano', 'Hassan Ziari', 'Beheruz Sethna', 'Philip Pumerantz', 'Karl-Dieter Grüske', 'David Parcerisas', 'Charley D. Holstein', 'Thomas R. Hurst', 'Kirk T. Bachmann', 'Charles E. Callahan', 'MaryLynn West-Moynes', 'Denise Trauth', 'G. Blair Dowden', 'Luns C. Richardson', 'Benjamin P. Sapitula', 'Mesalina E. Cloma', 'Robert L. Wyatt', 'Julius Medenblik', 'Francine Demichel', 'Julien Quéré', 'Sparky Reeves', 'Lise Bourgeois', 'Helen Giles-Gee', 'Elizabeth S. Marcuse', 'Richard H. Brodhead', 'Sharon D. Herzberger', 'Yu Jianshe', 'Vladimir Bautin', 'Leroy M. Morishita', 'Robert E. Zeigler', 'David Yarlott Jr.', 'Charles, Prince of Wales', 'Wallace Sterling', 'Kerry D. Romesburg', 'John Scaringe', 'Greg Adkins', 'Zhang Taicheng', 'Dennis Genig', 'Jacques Izard', 'Claude Frioux', 'Cesar C. Meñez', 'Joseph Godsall', 'Steven R. Wallace', 'Marty Schans', 'Josefina R. Quiachon', 'Joseph L. Kennedy', 'James E. Selbe', 'Gail Mee', 'D.L. Moody', 'Christopher Blake', 'Rolf Dieter Postlep', 'Joanne M. Burrows', 'Thomas L. Hellie', 'Richard J. Pappas', 'Georges Molinié', 'Neculae Plăiașu', 'Marie Mc Loughlin', 'James Louis Doti', 'Osman Yildirim', 'Jose Ramon Villarin', 'Pierre Tapie', 'Sam Davison', 'Peter-André Alt', 'James S Metcalf', 'William Campion', 'Richard G. Whitehead', 'Ignacio Jiménez Raneda', 'Huang Dawei', 'Richard R. Rush', 'Kelvin W. Sharp', 'Larry Rivers', 'Geraldine M. Perri', 'Michael K. Young', 'Fardad Fateri', 'Matthew Carter', 'Nathaniel Sheldon Wheaton', 'Anthony E. Beebe', 'Todd Parnell', 'Gilbert R. Arce', 'Gilbert Héroux', 'Dick Merriman', 'Ken-ichi Semba', 'Loren P. Gresham', 'Kim Sun-Uk', 'Nabil Abu-Ghazaleh', 'Dieter Lenzen', 'François Duvergé', 'John K. McVay', 'Masako Sanada', 'Randy Parker', 'Rüdiger Bormann', 'Carolyn Martin', 'Gary V. Nelson', 'Patrick Breen', 'Patrick Raynaud', 'Denise Mullen', 'James Fairfield English, Jr.', 'Alice Hunt', 'Susan Martin', 'Ruben Vardanian', 'David J. Mollahan', 'Leslie MacLaren', 'David M. Dooley', 'Jimmy Weinblatt', 'Mohd Shukri Ab Yajid', 'Bernard Li', 'Gérard Toupance', 'Markus Steffen', 'Josefina S. Sumaya', 'Diana Derycz-Kessler', 'Zhong Weihe', 'Donald J. Guter', 'Gerhard Casper', 'Dr. Thomas Gamble', 'Stephen W. Dana', 'Georges Fauré', 'Majid Ghassemi', 'James Bultman', 'Wang Jianji', 'Amy Gutmann', 'Charles E. Schlimpert', 'Nick Bruno', 'Con Murphy', 'Mujahid Kamran', 'Steven C. Ender', 'Boonsom Siribumrungsukha', 'Lawrence Biondi', 'Michael S. Stewart', 'Matthew Myer Boulton', 'Thomas L. Magnanti', 'Rebecca Ann Parker', 'Cheryl Lyn Walker', 'Mohamed Rochdi', 'Takayasu Mitani', 'Fr. Jesus Quirce LC', 'Nelson Glueck', 'Emma Marcegaglia', 'Yves Lecointe', 'Ashalata M. Phalke', 'Thomas W. Newsom', 'Hazo W. Carter, Jr.', 'Alan D. Marble', 'Zhang Jie', 'Eilis McGovern', 'Sabo Ojano', 'Dr.Yu Lizhong', 'Sabine Doering-Manteuffel', 'Clem Bason', 'Wang Jia Qiong', 'Kim Hyungtae', 'Ricardo P. Pama', 'Gaylen Byker', 'Jeff Miller', 'Christian Sergheraert', 'Seán Ryan', 'William Ruud', 'Marek Bojarski', 'Peyton R. Helm', 'James R. Appleton', 'José Morales Orozco', 'Gary M. Green', 'Tim Summerlin', 'Pauline Yu', 'Yoshiko  Okazaki', 'Berthold Goldman', 'Murray K. Hoy', 'Michael L. Cooper-White', 'Alan G. Merten', 'Heather Knight', 'Earl H. Potter III', 'Elden Monday', 'Wayne D. Andrews', 'Jack Friedlander', 'Junichi Yamazaki', 'J. Laurel Jones', 'JoAnn W. Haysbert', 'David J. Skorton', 'Horace A. Judson', 'Stan L. Albrecht', 'John L. Crain', 'Robert W. Brown', 'Sheikha Abdulla Al-Misnad', 'Ephraim Isaac', 'Pamela J. Transue', 'Gary W. Barkley', 'Ray Di Pasquale', 'Tom Collins', 'William A. Bloodworth', 'Stephen Jones', 'Frederick Burkhardt', 'Marc Pena', 'Kimberly Perry', 'Ruth Simmons', 'M. Jules Baux', 'William H. Jones', 'Richard Lloyd', 'Jean Deschamps', 'Stuart Dorsey', 'Sung Nak Kang', 'Marcia G. Welsh', 'Ken Starr', 'Kawaguchi Kiyofumi', 'Don Day', 'Katsuyuki Fukuda', 'Barry Hogg', 'David Hitchens Morgan', 'John F. Klem', 'Susan Herbst', 'Mahmoud Eltayeb', 'Bradley M Gottfried', 'Bernd Reissert', 'Peter J. Slevin', 'Zhong Binglin', 'Eric R. Gilbertson', 'Sandy Newman', 'J. Michael Ortiz', 'Karl Petersen', 'Donna Shalala', 'He Qinhua', 'Hwa Jin Shim', 'Mark Huddleston', 'David L. Boren', 'Pamela Luster', 'Francis Raftery', 'Johan Sterte', 'Ken Tourand', 'Walter Bircher', 'Fred Keating', 'Ding Xiaodong', 'Duane C. Acker', 'Edward de Rosset', 'Michael Plater', 'Norihiko Fukui', 'Carlos Eduardo Cantarelli', 'Kamal Nath', 'John H. Ricketson', 'Eliphalet Nott Potter', 'Thom Johnston', 'Terry Marlink', 'Elizabeth Stroble', 'Frederik Ohles', 'Diane Brunner', 'Ed Huckeby', 'Albert Ilyich Vladimirov', 'James E. Middleton', 'Belay Kassa', 'Maurice Davin', 'Jean Vaillancourt', 'Bai Chunli', 'Patricia Maguire Meservey', 'Denis Cummins', 'Park Jongwon', 'David A. Bryant', 'Johann Gerhardt', 'Kristin King', 'Mike Wylie', 'Jay Coogan', 'Arlyn S. Villanueva', 'Carole A. McCoy', 'Eugene J. Cornacchia', 'Kevin C Eichner', 'Alan G. Walker', 'Caroline Whitson', 'Frédéric Dardel', 'Wes Fehr', 'Royce Engstrom', 'France A. Córdova', 'Neal Smatresk', 'Eric J. Barron', 'A. Lorris Betz', 'Charles McVety', 'Ciarán Ó Catháin', 'George S. Bridges', 'Stephen Spinelli Jr', 'Robert L. Satcher, Sr.', 'Jon Bauer', 'Michinari Hamaguchi', 'Huai Jinpeng', 'Nancy Oliver Gray', 'Brandon Webb', 'Valerie Hepburn', 'David L. Owen', 'Toshio Watanabe', 'Daniel Martina', 'Frank Dineen', 'Reagan F. Romali', 'Richard Hindls', 'Mahmood Mohammadzade Shabestari', 'D.J. van den Berg', 'Elias Foutsis', 'Debora Spar', 'Joseph P Chinnici', 'Byung-Jib Jang', 'Henry N. Tisdale', 'Patrick Chézaud', 'Steven C. Bahls', 'J. Patrick O’Brien', 'Patrick O’Connor', 'Sheila Ruhland', 'Chen Jining', 'Jeffrey D. Armstrong', 'Anne Sado', 'Gérard Blanchard', 'Ahmed Bennis', 'Betty Inclan', 'Dennis Golladay', 'Reynaldo B. Vea', 'Kai Brodersen', 'Abdelhafidh Gharbi', 'Stephen J. Owens', 'Wang Yingjun', 'Corazon C. Osorio', 'Jack Kenny Williams', 'Nasser A. Salain', 'Takahashi Minoru', 'J. Larry Richards', 'J. Matthew Pinson', 'Larry G. Bailey', 'Adolphe Van Glabbeke', 'Eli Capilouto', 'Clinton A. Valley', 'Jeffrey Bullock', 'Francesco Salamini', 'Ilhi Synn', 'Eiji Hatta', 'William H. Mobley', 'Patrick Hervé', 'Ronald L. May', 'Moisés Wasserman', 'Jean-Claude Bodéré', 'Abel Andriantsimahavandy', 'Robert B. Sloan', 'Leslie E. Wong', 'Jose F. Peralta', 'Yu Huadong', 'Dan Lucian Vlădescu', 'Dr. William A. Meehan', 'Michel Beaud', 'Grant Cornwell', 'Neil Albert Salonen', 'Richard Myers', 'John Hitt', 'Aodh Ó Broin', 'Sompol Pongthai', 'Gabriel Cau', 'Betty McCrohan', 'John O. Schwenn', 'Raymond Nadolny', 'Mariano C. De Jesus', 'Yoshimi Sugimura', 'Elaine P. Maimon', 'Wen-Ta Chiu', 'Michael Zerr', 'Mark R. Ramseth', 'Stephen D. Livesay', 'Dieter Bitter-Suermann', 'Jesús Contreras García', 'Jonkheer Roelof de Wijkerslooth de Weerdesteyn', 'Philip Johnson', 'Michele Zeller Geigle', 'Daniel L. Akin', 'Richard H. Hersh', 'Ryan Messmore', 'Yang Zhijian', 'David E. Nixon', 'Joan Lescinski', 'Judy R. Rogers', 'Sam Stern', 'Jowel C. Laguerre', 'Kaoru Kitagawa', 'Pan Gongkai', 'Riess Potterveld', 'Akisato Mizuno', 'Hu Haiyan', 'James D. Evans', "Aloysius Paul D'Souza", 'Jean-Pierre Perrot', 'Jerry Sue Thornton', 'Zhu Di', 'Michael G. Scales', 'Barbara Gellman-Danley', 'Beverly Wade Hogan', 'Zhu Chongshi', 'Jack P. Calareso', 'Maryanne Stevens', 'Sanford J. Ungar', 'Dr R. Brinley Jones CBE', 'Kenneth L. Ender', 'Beck A. Taylor', 'Kirk Schulz', 'Philippe Ardant', 'Gregory D. Williams', 'Frank A. Tichenor', 'Lee Sungwoo', 'Larry L. Earvin', 'Sibrand Poppema', 'Michel Guillou', 'Lloyd Kirsch', 'Gordon Moulton', 'Jeff Zabudsky', 'Donald Senior', 'Danny D. Dial', 'Rachel Rosenthal', 'Peter Angstadt', 'Chang Shi-Won', 'Linda Moley', 'Ted Brown', 'Chen Jun', 'Abdou Moumouni Dioffo', 'Laroussi Oueslati', 'Cesare Azzali', 'James A. McCain', 'William J. Carroll', 'Perry D. White', 'Cheryl Roberts', 'Karsanbhai Patel', 'Troy D. VanAken', 'Irving Fisher', 'Martin Radvan', 'L. Michael Metke', 'Nicholas C. Neupauer', 'Zhang Minxuan', 'Jack Ohle', 'Susan Hockfield', 'James T. Harris III', 'Jürgen Lehmann', 'Elizabeth A. Hill', 'Thomas Rietschel', 'Pat MacLaughlin', 'Dennis Trotter', 'Don Wright', 'Bobby Fong', 'Joseph Klafter', 'Khalid Abdul Rahman Al-Ohaly', 'Carol Ann Mooney', 'Korenaga Shun', 'Claude Laugénie', 'Frits Pannekoek', 'Jannett N. Jackson', 'Jahnae H. Barnett', 'Shari L. Olson', 'Candace Introcaso', 'Jung, Sang-Chul', 'Francis Godard', 'Anna Carmela Pesongco', 'Harry Lee Williams', 'Derek Sagima', 'Harold Nolte', 'James W. Wagner', 'George Williamson Smith', 'Peter B. Barr', 'Patricia A. Schoelles', 'David Black', 'Stephen D. Schutt', 'John Sexton', 'Gregory S. Powell', 'Teresa Amott', 'Mariano M. Lerin', 'Jeff Metcalf', 'Julianne Malveaux', 'Park Chul', 'Daniel Raynes Goodwin', 'David Swinton', 'Yuli Tamir', "William L. Fox '75", 'Vinton Thompson', 'Chun-Fu Wu', 'Eileen Servidio', 'Robert Gates', 'Wenquan Tao', 'Bevan Morris', 'Ariela Lowenstein', 'Phillip Matthews', 'Ricardo Romo', 'Ronald J. Daniels', 'Konstantine Gatsios', 'David R. Ellison', 'Guy Couarraze', 'Darron Collins', 'Loren J. Anderson', 'Florence M. Garcia', 'Bernie MacDonald', 'Jo Ann M. Gora', 'Stephen A. Gould', 'Kenneth Garren', 'Patrick Deane', 'Dipak C. Jain', 'Victoriano B. Tirol', 'Dan Ehrenkrantz', 'Dominique Gentile', 'Philippe Tchatmitchian', 'Mim Pride', 'Mario García Valdez', 'Beverly Daniel Tatum', 'Percy H. Maxim Lee', 'Sadasivam Jaganada Reddi', 'Jean-Louis Billoët', 'Edgar F. Shannon, Jr.', 'Claude Comair', 'Earl D. Brooks II', 'Ahmed Ibrahim Nassar', 'Rick Mann', 'Mohammad Esmail Hamedani Golshan', 'Leslie N. Pollard', 'Paul T. Killpatrick', 'Patty M. Scott', 'Richard Jusseaume', 'Wang Xiaojia', 'Francisco Paulino V. Cayco', 'Francisco B. Benitez', 'Kevin Todeschi', 'Ester B. Ogena', 'François Laurent', 'Thomas Otto Walton', 'Chad Williams', 'Lewis M. Duncan', 'Kevin Mackin', 'Mitchell Reiss', 'Claude Feuerstein', 'John S. Erwin', 'Thomas A. Henzinger', 'Stephen A. Hayner', 'Werner Hoyer', 'Marc Tessier-Lavigne', 'Rob Klapper', 'Marilyn H. Burstein', 'Cafer Özkul', 'Dale T. Chapman', 'Mark Weiss', 'Gerhard Fouquet', 'M. Elizabeth Cannon', 'Thomas Baynum', 'Jo Allen', 'Chang Ho-sung', 'Jim Reynolds', 'Mary Cullinan', 'Adel Tweissi', 'Laurent Batsch', 'Anthony Monaco', 'R. Patricia Fadden', 'David Alexander', 'Katharine W. Winograd', 'Joseph L. Badgley', 'Phillip L. Davis', 'Nurcan Baç', 'John J. ""Ski"" Sygielski', 'Charles Demaris', 'Katherine Fell', 'Yvon Berland', 'Sara Diamond', 'Michael J. Gaeta', 'Albert Marouani', 'Rosemary Jeffries', 'William W. Sellers', 'Ron Penner', 'John Randall Drinko', 'William Edmund Fahey', 'Sarah Squire', 'David G. Trickett', 'Ikeda Rentarō', 'Sally Mason', 'Wade Dyke', 'Nariman Farvardin', 'Margaret Stallmeyer', 'Ir. Triyogi Yuwono', 'Noriyuki Inaba', 'Liam Wakefield', 'Eugène Morand', 'Craig D. Swenson', 'Hans-Eberhard Schurk', 'Jo Ann Boydston', 'Gu Binglin', 'Duane M. Ford', 'Adnan Hussain', 'Lisa Rossbacher', 'Junichi Hamada', 'Maravene Loeschke', 'Daniel Hanson', "Gregory G. Dell'Omo", 'Nathan Depew', 'David A. Busic', 'Alane K. Shanks', 'John Chrysoulakis', 'Cheryl D. King', 'Dustin Tackett', 'Ehi Omoragbon', 'Colin Diver', 'Barry Mills', 'Martha Dunagin Saunders', 'James F. Bell', 'E. Clorisa Phillips', 'Brooks A. Keel', 'Nilda Masirag', 'Dean Spielmann', 'Adam Falk', 'Dr. Daniel J. Curran', 'Lawrence F. Probst III', 'Bancha Saenghiran', 'Jorge Iván Vélez Arocho', 'Peter Mercer', 'Robert Altenkirch', 'Robin E. Baker', 'Terry P. McMahan', 'Dietmar Willoweit', 'Edward Ashton Rollins', 'Shri Amrishbhai Patel', 'Jean Conway', 'Kevin Ingram', 'David E. Van Zandt', 'Marcelline Cody', 'Stanley N. Katz', 'CH Hydrose Musliyar', 'Stephen Thorsett', 'Sofia D. Taguinod', 'Barbara Snyder', 'Chris Kimball', 'Roger N. Casey', 'Fred Hilmer', 'Lynn Pasquerella', 'William K. Thierfelder', 'Ed Meadows', 'Gerald Gerbrandt', 'Martha A. Smith', 'Rick Levin', 'Larry J. McKinney', 'Andrea Cook', 'Alfredo E. Pascual', 'Richard Durst', 'Juan Olivarez', 'Muhammed Sahin', 'Michael M. Crow', 'James L. Edwards', 'Laurie Rancourt', 'John R. Brazil', 'Byong-Jin You', 'Paul Hennigan', 'Joseph J. McGowan', 'Joseph Spring', 'Jean-Jacques Fol', 'Dennis A. Ahlburg', 'Tsuyoshi Tsutsumi', 'J. Arturo Reyes', 'Peter Lehmann', 'Jim Yong Kim', 'Jarvis E. Miller', 'Robert Gordon', 'Nabil Shawagfeh', 'Hugh Connolly', 'James Malcolm', 'Arthur Kent White', 'Terrence Leas', 'James A. Donahue', 'Eugène Schaeffer', 'Laurence A. Hinz', 'William E. Adams', 'Charlita Shelton', 'Steven C. Wheelwright', 'Michael D. Richards', 'Henry T. McDonald', 'Steven W. Shirley', 'Joanne K. Glasser', 'Steven Stargardter', 'Bill Path', 'Richard Durán', 'George Burton', 'Forrest Elliot Harris, Sr.', 'Christopher Bailey', 'Christine Ziegler Gangloff', 'Luigi Dadda', 'Hans Müller-Steinhagen', 'Bon-Su Lee', 'Tom Trebon', 'S. R. Shankapal', 'Christine M. Wiseman', 'Yoichi Kamejima', 'Karen Lewis', 'Humphrey Lee', 'Charles F. Monahan, Jr.', 'Shim Sang-Kook', 'Shi-Shuenn Chen', 'Ron D. Wright', 'Sang-Yong Kim', 'Jeff Iorg', 'Zhou Wenbin', 'Cliff L. Wood', 'Steven H. Kaplan', 'Jack Magruder', 'Lang Lowrey', 'Tonian Hohberg', 'Kikon Kim', 'Yukio Ikeda', 'Hugh R. Brady', 'Michael Engh', 'Paul J. LeBlanc', 'Diarmuid Hegarty', 'Kevin W. Cosby', 'Ira H. Rubenzahl', 'John A. Martin', 'Michael Vivoda', 'Denise Henning', 'Michael Hay', 'Wang Shuguo', 'Auguste Louvrier de Lajolais', 'Kenneth A. Smith', 'H. Montagu Allan', 'Newton Myvett', 'Mary Sarah', 'Yoshiyasu Shirai', 'Donald L. Beggs', 'Norihiko Suzuki', 'William Sewell', 'Larry P. Arnn', 'Caroll Ríos de Rodríguez', 'Lawrence Schall, J.D. Ed. D.', 'Walter Schweitzer', 'Timothy Stokes', 'Richard Rogers', 'Kim Byung-chul', 'Xu Xiaohu', 'Janet C. Baldwin', 'Robert R. Orr', "Hazel R. O'Leary", 'Mark Young', 'Gregory V. Hall', 'Jin Q Kim', 'K. Sraku-Lartey', 'Debra Petke', 'Alex McFarland', 'Minoru Usui', 'Samir Chatterjee', 'Ray Challis', 'Philip C. Williams', 'Dieter Rehm', 'Gilbert Angénieux', 'Jay Gogue', 'Stephan Carapiet', 'Robin Pollard', 'Yang Yu-liang', 'Henry J. Waters', 'Jackson N. Sasser', 'James Gaffney', 'William Marion Jardine', 'John Casper Branner', 'Sanford C Shugart', 'Brad Boruff', 'Javier Garciadiego', 'Ronald L. Carter', 'Dan G. Lunsford', 'Mary Meaney', 'Marcia V. Keizs', "John O'Brien", 'Charles Mercieca', 'Pierre-Roger Gaussin', 'James L. McKearney', 'Dene Kay Thomas', 'Erme R. Camba', "Shin'ichi Tamura", 'Mohamed Noor', 'Oscar S. Suarez', 'Mark G. Zarling', 'Vicente K. Fabella', 'Robert Barney Dallenbach', 'Gustave B KABRE', 'Arthur Imperatore, Sr.', 'Bob Kustra', 'Makoto Kimura', 'Juan Alejandro Tobias', 'Joel Reidenberg', 'Torsten Johne', "Brennan O'Donnell", 'Paul Armes', 'Hernando Gomez', 'Mary Hines', 'Robert Lumiansky', 'Rosalind Reichard', 'Jamshed Bharucha', 'Esteban Morcillo Sánchez', 'Garabed Antranikian', 'Gayle Beebe', 'Philip Ryken', 'Swami Gautamananda', 'Godehard Ruppert', 'Billie Jo Kipp', 'Jean Dry', 'Thayne McCulloh', 'Antonio Leaño Reyes', 'Anthony S. Tricoli', 'Minoru Makita', 'Debbie L. Sydow', 'Jerry Corcoran', 'Peter Garcia', 'Matthew Madrid', 'Ken-ichi Iga', 'Paula Hart', 'Gilbert L. Rochon', 'Hasaan Sedghi', 'Kazuo Irie', 'Susan Karr', 'Juan Julià Igual', 'Dianne F. Harrison', 'Alfred Forchel', 'Ronald E. Manahan', 'Eric C. Radtke', 'Brian Parker', 'Marcus Miller', 'Roberto Mallari', 'Gary Lee Spears', 'Josep Borrell', 'William D. Adams', 'Michael Adelman', 'Rev. G. J. Frederick', 'Richard Wall Lyman', 'Daniel Weiss', 'Shaan Kumar', 'Dan Patterson', 'William D. Huston', 'Christopher Nelson', 'Lav Chhiv Eav', 'Donna H. Oliver', 'Haralambos Coccossis', 'Denis Robinson', 'Thomas J. Snyder', 'Li Jin', 'Walter G Joffe', 'Thomas K Meier', 'Sabine Kunst', 'Tan Min', 'James H. Taylor', 'Mahmoud Abu Muis', 'Jeremy D. Brown', 'Young Tae Chang', 'A. Rodney Allbright', 'Séamus Gardiner', 'David A. DeCenzo', 'John Richman', 'Roger Williams', 'Stanley N. Olson', 'Brian J. R. Stevenson', 'Ahmed M. B. Shehab El-Din', 'Seyit Aydın', 'Rivka Carmi', 'Georgia Costello', 'Debra S. Daniels', 'Olympio V. Caparas', 'Kensei Nagata', 'Cynthia Anderson', 'William Richards', 'Carlton E. Brown'}
            Answers = 4498, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.127s]
          Answers = 4498, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.128s]
        Checking schema 247 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.governors', 'organization.organization_board_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 51
            Final Answer: {'1896', '1921', '1811', '1947', '1995', '1908', '1924', '1977', '1874', '1865', '1956', '1925', '1917', '1861', '2011', '1880', '1919', '1990', '1957', '1940', '2009', '1907', '1944', '1900', '1913', '2002', '1963', '1855', '2012', '2003', '1938', '1852', '1864', '1903', '2010', '1859', '1879', '1681', '1993', '1965', '1849', '1981', '1999', '1854', '1928', '1920', '2001'}
            Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 248 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.governors', 'organization.organization_board_membership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 249 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 180
            Final Answer: {'South Africa', 'Moldova', 'Dominica', 'Nicaragua', 'Iceland', 'Congo', 'Ukraine', 'Malta', 'Yugoslavia', 'Turkey', 'China', 'Mauritius', 'Iraqi Kurdistan', 'Tunisia', 'Montenegro', 'Brazil', 'Indonesia', 'Malawi', 'Liberia', 'Poland', 'Angola', 'Burundi', 'Pakistan', 'Second Polish Republic', 'Bangladesh', 'Croatia', 'Zimbabwe', 'Tanzania', 'Palau', 'Maldives', 'Turkmenistan', 'United States of America', 'Ireland', 'Trinidad and Tobago', 'Botswana', 'Benin', 'Estonia', 'Israel', 'North Korea', 'Chile', 'Myanmar', 'Mali', 'State of Palestine', 'São Tomé and Príncipe', 'Zambia', 'Latvia', 'Yemen', 'Lebanon', 'Slovakia', 'United Arab Emirates', 'India', 'Austria', 'Guadeloupe', 'Serbia', 'Kyrgyzstan', 'South Sudan', 'Timor-Leste', 'Spain', 'Seychelles', 'Algeria', 'Eritrea', 'Western Saraha', 'Niger', 'Rwanda', 'Suriname', 'Equatorial Guinea', 'Cameroon', 'Uganda', 'Côte d’Ivoire', 'Mexico', 'Venezuela', 'Madrid', 'Federated States of Micronesia', 'Mauritania', 'Norway', 'Peru', 'Singapore', 'Guinea', 'Madagascar', 'Alsace', 'Sierra Leone', 'Iraq', 'New Jersey', 'Fiji', 'Madeira', 'New Caledonia', 'Nauru', 'Armenia', 'Abkhazia', 'Ecuador', 'Guinea-Bissau', 'Republic of Kosovo', 'Costa Rica', 'Cuba', 'Burkina Faso', 'Togo', 'Confederate States of America', 'Panama', 'Transnistria', 'Syria', 'Republic of Mahabad', 'Mongolia', 'Nepal', 'Sudan', 'Gabon', 'Germany', 'Slovenia', 'Palestinian National Authority', 'Republic of Indonesia', 'Afghanistan', 'Djibouti', 'El Salvador', 'Somaliland', 'Central African Republic', 'Chad', 'Argentina', 'Ethiopia', 'Madras Presidency', 'Marshall Islands', 'Egypt', 'Albania', 'Iran', 'Philippines', 'Russia', 'Nigeria', 'Bolivia', 'Dominican Republic', 'Czechoslovakia', 'France', 'Mozambique', 'Northern Cyprus', 'Portugal', 'United States Virgin Islands', 'Cape Verde', 'Sri Lanka', 'Azerbaijan', 'Tajikistan', 'Hungary', 'Haiti', 'Canary Islands', 'Laos', 'Comoros', 'Vietnam', 'Uzbekistan', 'Colombia', 'Lithuania', 'Czech Republic', 'Taiwan', 'Uruguay', 'Belarus', 'Socialist Federal Republic of Yugoslavia', 'Ghana', 'South Korea', 'Kenya', 'Cyprus', 'Porto', 'Democratic Republic of the Congo', 'Georgia', 'Nagorno-Karabakh Republic', 'Kazakhstan', 'Guatemala', 'Honduras', 'Guyana', 'Senegal', 'Namibia', 'Finland', 'Republic of Macedonia', 'Bosnia and Herzegovina', 'Kiribati', 'Kosovo', 'Martinique', 'South Ossetia', 'Bulgaria', 'Somalia', 'Gambia', 'Italy', 'Romania', 'Greece', 'Paraguay', 'Vanuatu'}
            Answers = 180, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 180, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 250 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 251 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.governors', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 63
            Final Answer: {'Alpine Ski Club', 'Restaurant el Corazón de Siría, C.A.', 'Doris Inc', 'Union Banking Corporation', 'Royal Academy of Medicine, Ireland', 'Dallas Fort Worth Search Engine Marketing Association', 'Lacan Circle of Melbourne', 'Rainbow Days Inc.', 'British Society of Aesthetics', 'Royal Institute of British Architects', 'First Quantum Minerals', 'NBC Sports', 'Bank for International Settlements', 'John A. Roebling Sons Company', 'American University in Cairo', 'Suez Canal Company', 'Compagnie Universelle du Canal Inter-océanique de Panama', 'Royal Geographical Society', 'Historical Society of Afghanistan', 'Royal College of Physicians of Ireland', 'European Central Bank', 'American Institute of Steel Construction', 'Himalayan Club', 'Devon and Cornwall Migration Committee', 'Pandora Media Inc.', 'Spyglass Entertainment', 'African Development Bank', 'American Geographical Society', 'American Meat Science Association', 'Anglo-Portuguese Society', 'Santee Historical Society', 'Architectural Association School of Architecture', 'General Confederation of Liberal Trade Unions of Belgium', 'Geological Society of London', 'Metropolitan Drinking Fountain and Cattle Trough Association', 'Mount Everest Committee', 'Tarrant Regional Water District', 'Infinity Broadcasting Corporation', 'Royal Society', 'American Kennel Club', 'The Lute Society', 'Alpine Club', 'American Society of Civil Engineers', 'Dravo Contracting Company', 'Covington and Cincinnati Bridge Company', 'Research Chefs Association', 'OffTheGrid Group, Inc.', 'Royal Horticultural Society', 'Ipswich Museum', 'Fonds de Garantie des Depôts', 'Sea Shepherd Conservation Society', 'Scandinavian Society for Iranian Studies', 'Asiatic Society of Bangladesh', "Fédération Internationale de l'Automobile", 'Egypt Exploration Society', 'UBmatrix', 'Metasystems Design Group', 'European Bank for Reconstruction and Development', 'West Pier Society', 'Search Engine Marketing Professional Organization', 'The Asiatic Society', 'Random House', 'Indian Institute of Architects'}
            Answers = 63, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 63, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 252 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.governors', 'organization.organization_board_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 35
            Final Answer: {'1867', '1899', '1901', '1995', '2013', '1998', '1966', '1916', '1861', '2011', '1919', '1969', '1997', '1940', '1907', '1913', '2002', '2012', '1889', '2006', '1864', '1693', '1894', '1858', '1927', '1949', '1952', '1849', '1922', '1854', '2004', '1881', '1876', '1838'}
            Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 253 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 729
            Final Answer: {'Artur da Costa e Silva', 'Mary McAleese', 'René Coty', 'Isabel Martínez de Perón', 'Rafael Navas Pardo', 'Farooq Leghari', 'Héctor García Godoy', 'Fernando Collor de Mello', 'Alfredo Stroessner', 'Gloria Macapagal-Arroyo', 'Augusto Pinochet', 'Gabriel Narutowicz', 'José María Velasco Ibarra', 'Paul Biya', 'José Evaristo Uriburu', 'Carlos Antonio López', 'Salvador Jorge Blanco', 'José Mujica', 'Kim Young-sam', 'Guillermo León Valencia', 'Miguel de la Madrid', 'Deogracias Fonseca Espinosa', 'Tito Okello', 'Ezer Weizman', 'Alexander Lukashenko', 'Julián Trujillo Largacha', 'Ranasinghe Premadasa', 'Cevdet Sunay', 'Fernando de la Rúa', 'Américo Tomás', 'Bashar al-Assad', 'Charles Robberts Swart', 'Buenaventura Báez', 'Khalifa bin Zayed Al Nahyan', 'Chris Heunis', 'Miguel Juárez Celman', 'László Sólyom', 'Zillur Rahman', 'Olusegun Obasanjo', 'Giorgio Napolitano', 'Joaquín Mosquera', 'Ahmad Tejan Kabbah', 'Arturo Frondizi', 'James Buchanan', 'Rafael Urdaneta', 'Ramón Castillo', 'Ivo Josipović', 'Susilo Bambang Yudhoyono', 'Maciej Rataj', 'Mahmoud Abbas', 'Zhelyu Zhelev', 'Pedro Peña', 'Henri Christophe', 'Hilla Limann', 'Ismaïl Omar Guelleh', 'Józef Piłsudski', 'Kenneth Cockrel, Jr.', 'Arthur Chung', 'Alpha Condé', 'Fakhruddin Ali Ahmed', 'Jacques Gillot', 'Ilham Aliyev', 'Johannes de Klerk', 'Chester A. Arthur', 'Benigno ""Noynoy"" Aquino III', 'Anthony Carmona', 'Park Geun-hye', 'Francisco Gregorio Billini', 'Ricardo Lagos', 'Neelam Sanjiva Reddy', 'Milo Đukanović', 'José María Campo Serrano', 'Sebastián Piñera', 'A. P. J. Abdul Kalam', 'Roh Moo-hyun', 'Jean-Baptiste Riché', 'Andris Bērziņš', 'Alejandro Woss y Gil', 'José María Melo', 'Sharif Sheikh Ahmed', 'Bronisław Komorowski', 'Modibo Keïta', 'John Atta Mills', 'Mariano Roque Alonzo', 'Abulhassan Banisadr', 'Eduardo Camaño', 'Jakaya Kikwete', 'Henri Namphy', 'Abraham Lincoln', 'José Eduardo dos Santos', 'Daniel Fignolé', "Valéry Giscard d'Estaing", 'Ramon Magsaysay', 'Ahmed Ben Bella', 'Emílio Garrastazu Médici', 'Nuno Cardoso', 'Bernardino Machado', 'William Henry Harrison', 'Epeli Nailatikau', 'Nicolae Ceaușescu', 'János Áder', 'Basappa Danappa Jatti', 'Danilo Türk', 'José Manuel Marroquín', 'Lee Teng-hui', 'Kurt Waldheim', 'Patrick Hillery', 'Christian Wulff', 'Getúlio Vargas', 'Megawati Sukarnoputri', 'Stanisław Wojciechowski', 'Manuel Roxas', 'Julio Argentino Roca', 'Choummaly Sayasone', 'Hu Jintao', 'León Febres Cordero', 'Heinz Fischer', 'Rosen Plevneliev', 'Álvaro Uribe', 'Pedro Antonio Pimentel', 'Süleyman Demirel', 'Sergio Osmeña', 'Yayi Boni', 'Fulgencio Batista', 'Aaron Baker', 'Jean-Claude Duvalier', 'Roberto M. Levingston', 'Teófilo Braga', 'Corazon Aquino', 'Milan Milutinović', 'Juan Bosch', 'Donald Ramotar', 'Ayub Khan', 'William Howard Taft', 'P. W. Botha', 'Abd Rabbuh Mansur Hadi', 'Radovan Karadžić', 'Mohammad-Ali Rajai', 'Eustorgio Salgar Moreno', 'Mikheil Saakashvili', 'Fernando Henrique Cardoso', 'Mário Soares', 'Hamid Karzai', 'James A. Garfield', 'Pranab Mukherjee', 'Ronald Reagan', 'Carlos P. Garcia', 'Mary Robinson', 'Domingo Faustino Sarmiento', 'Massoud Barzani', 'Boniface Alexandre', 'Manuel Bonilla', 'Benjamin Harrison', 'Bartolomé Mitre', 'Carlos Felipe Morales', 'Abdul Hamid', 'James Michel', 'Lech Wałęsa', 'Ólafur Ragnar Grímsson', 'Gamal Abdel Nasser', 'Pedro Bartolomé Benoit', 'Michael D. Higgins', 'George Bush', 'Dong Biwu', 'Robert Kocharyan', 'António José de Almeida', 'Jean-Louis Pierrot', 'Carlos Eugenio Restrepo', 'Teodoro Obiang Nguema Mbasogo', 'Rafael Núñez', 'Xi Jinping', 'José P. Laurel', 'Roque Sáenz Peña', 'Santiago Pérez de Manosalbas', 'Andrew Johnson', 'Salvador Allende', 'Roberto Urdaneta Arbeláez', 'Dmitry Medvedev', 'Kgalema Motlanthe', 'Nicolae Timofti', 'Prosper Avril', 'İsmet İnönü', 'Rubén Piedrahíta Arango', 'Ivan Gašparovič', 'Laurent-Désiré Kabila', 'Nicos Anastasiades', 'José Miguel Gómez', 'Dési Bouterse', 'Jorge Sampaio', 'Karolos Papoulias', 'Manuel María Mallarino', 'Mahmoud Ahmadinejad', 'Lech Kaczyński', 'Chaim Weizmann', 'César Gaviria', 'Andry Rajoelina', 'Carlo Azeglio Ciampi', 'Ram Baran Yadav', 'Juan Manuel Santos', 'Truong Tan Sang', 'Ricardo Martinelli', 'Manuel de Oliveira Gomes da Costa', 'Michel Martelly', 'José Eusebio Otalora', 'Émile Jonassaint', 'Bakir Izetbegović', 'Cearbhall Ó Dálaigh', 'Óscar Carmona', 'James Madison', 'Tirésias Simon Sam', 'Paul Kagame', 'Juan Perón', 'Moncef Marzouki', 'José de Obaldía', 'Manuel Teixeira Gomes', 'Bazilio Olara-Okello', 'Kim Il-sung', 'Ernesto Samper', 'Antonio Guzmán Fernández', 'Manuel Antonio Sanclemente', 'Bingu wa Mutharika', 'Syngman Rhee', 'Manuel Zelaya', 'Qazi Muhammad', 'Josip Broz Tito', 'Aleksander Kwaśniewski', 'Martin Van Buren', 'Alfonso López Michelsen', 'José María Cabral', 'Zail Singh', 'Heinrich Lübke', 'Joseph Kasa-Vubu', 'Charles Taylor', 'Sukarno', 'Justo José de Urquiza', 'Warren G. Harding', 'Václav Klaus', 'Armando Guebuza', 'Idriss Déby', 'Mutesa II of Buganda', 'Revolutionary Junta', 'Jorge Carlos Fonseca', 'Fernando Arturo de Meriño', 'José Bonifacio Aquileo Elías Parra Gómez', 'Agostinho Neto', 'Uhuru Kenyatta', 'Leslie Manigat', 'Taur Matan Ruak', 'Ali Abdullah Saleh', 'Mustafa Kemal Atatürk', 'Enrique Olaya Herrera', 'Ma Ying-jeou', 'Mobutu Sese Seko', 'Zulfikar Ali Bhutto', 'Hipólito Yrigoyen', 'Émile Loubet', 'Janez Drnovšek', 'Hassan Sheikh Mohamoud', 'Michel Djotodia', 'Suharto', 'Emomalii Rahmon', 'V. V. Giri', 'Laureano Gómez', 'Carlos Menem', 'Joseph Estrada', 'Xanana Gusmão', 'Vincent R. Impellitteri', 'Muhammad Naguib', 'Francisco Henríquez y Carvajal', 'Vincent Auriol', 'Negasso Gidada', 'Faure Gnassingbé', 'Václav Havel', 'José Sarney', 'Nelson Mandela', 'Jacques Chirac', 'Dwight D. Eisenhower', 'João do Canto e Castro', 'Niceto Alcalá-Zamora', 'Alberto Lleras Camargo', 'Rutherford B. Hayes', 'Omar al-Bashir', 'Samuel Doe', 'Charles Rivière-Hérard', 'Leopoldo Galtieri', 'Eduardo Duhalde', 'Jefferson Davis', 'Árpád Göncz', 'Fabre Geffrard', 'Nicholas Liverpool', 'Manuel Quintana', 'Andrés Pastrana Arango', 'Girma Wolde-Giorgis', 'Nissage Saget', 'Millard Fillmore', 'Ghulam Ishaq Khan', 'Park Chung-hee', 'Yitzhak Ben-Zvi', 'Biljana Plavšić', 'Miloš Zeman', 'Dilma Rousseff', 'Robert Mugabe', 'Gustavo Rojas Pinilla', 'Jomo Kenyatta', 'Sprent Dabwido', 'Héctor José Cámpora', 'Roh Tae-woo', 'Gregorio Luperón', 'Turgut Özal', 'Raúl Castro', 'Juan Esteban Pedernera', 'Alejandro Agustín Lanusse', 'Raoul Cédras', 'Zachary Taylor', 'Ibrahim Nasir', 'Alexander Ankvab', 'João Bernardo Vieira', 'Yasser Arafat', 'Itamar Franco', 'Francisco Javier Zaldúa', 'Idi Amin', 'Derviş Eroğlu', 'Blaise Compaoré', 'José Domingo Molina Gómez', 'Fazal Ilahi Chaudhry', 'Sidónio Bernardino Cardoso da Silva Pais', 'Georgi Parvanov', 'Otto Pérez Molina', 'Pedro Eugenio Aramburu', 'Jiang Zemin', 'Vicente López y Planes', 'John Adams', 'Ramón González Valencia', 'Carlos de Azeredo', 'Roman Herzog', 'Ellen Johnson Sirleaf', 'Elpidio Quirino', 'Ulises Francisco Espaillat', 'Sidónio Pais', 'Malam Bacai Sanhá', 'Federico Franco', 'Valdis Zatlers', 'Mohamed Nasheed', 'Almazbek Atambayev', 'Lysius Salomon', 'Bernardino Rivadavia', 'Eduardo Lonardi', 'Manuel Murillo Toro', 'Kim Dae-jung', 'Juan Carlos Onganía', 'Julio César Turbay Ayala', 'Manuel de Jesús Troncoso de la Concha', 'Gabriel París Gordillo', 'Leonid Kravchuk', 'Cesareo Guillermo', 'Urho Kekkonen', 'Humberto de Alencar Castelo Branco', 'Borut Pahor', 'Yahya Jammeh', 'John Quincy Adams', 'Darío Echandía', 'Serge Letchimy', 'Fernando Cabral', 'Hosni Mubarak', 'William Walker', 'Kenneth Kaunda', 'Andrew Jackson', 'Iskander Mirza', 'Johnson Toribiong', 'Rafael Correa', 'Horacio Vásquez', 'Abdoulaye Wade', 'Cristina Fernández de Kirchner', 'Goodluck Jonathan', 'José Ignacio de Márquez', 'Yang Shangkun', 'Chadli Bendjedid', 'Francisco de Paula Santander', 'Alberto João Jardim', 'Walter Scheel', 'Miguel Antonio Caro', 'Jérôme Cahuzac', 'Ramón Cáceres', 'Arthur Griffith', 'José María Rojas Garrido', 'Juan José Nieto Gil', 'Slobodan Milošević', 'Anote Tong', 'Esperanza Aguirre', 'José María Guido', 'Michael Sata', 'Joyce Banda', 'Viktor Yanukovych', 'Boris Tadić', 'Charles D. B. King', 'François Hollande', 'Władysław Raczkiewicz', 'George Washington', 'Eduardo Frei Ruiz-Tagle', 'Paul von Hindenburg', 'Johannes Rau', 'Jean Pierre Boyer', 'Fidel V. Ramos', 'Néstor Kirchner', 'Ian Khama', 'Luis Sáenz Peña', 'Joaquim Duarte Silva', 'António de Spínola', 'José Félix Uriburu', 'Santiago Derqui', 'Eliud Williams', 'Hafez al-Assad', 'Jaime de Ornelas Camacho', 'Pervez Musharraf', 'Misael Pastrana Borrero', 'Juan Isidro Jimenes Pereyra', 'Joseph Kabila', 'Ahmed Mahamoud Silanyo', 'Emilio Aguinaldo', 'Atifete Jahjaga', 'William McKinley', 'Joel Chaisson', 'Iolu Abil', 'Ertha Pascal-Trouillot', 'François Duvalier', 'Bartolomé Calvo', 'Joaquín Balaguer', 'Marc Bazin', 'Raúl Alberto Lastiri', 'Miguel Abadía Méndez', 'Abdelaziz Bouteflika', 'Zalman Shazar', 'Roberto Eduardo Viola', 'Pál Schmitt', 'Mohamed Ould Abdel Aziz', 'Nebojša Radmanović', 'Petar Stoyanov', 'Vladimir Putin', 'Diosdado Macapagal', 'Tommy Remengesau', "Umaru Musa Yar'Adua", 'John Dramani Mahama', 'Hifikepunye Pohamba', 'Eduardo Santos Montejo', 'Alexandros Zaimis', 'Herbert Hoover', 'Georges Pompidou', 'Carl Gustaf Emil Mannerheim', "Seán T. O'Kelly", 'Éamon de Valera', 'Frederik Willem de Klerk', 'Macky Sall', 'Francisco Macías Nguema', 'Mohammad Hidayatullah', 'Muhammad Zia-ul-Haq', 'Ephraim Katzir', 'Mohammed Waheed Hassan', 'Marco Fidel Suárez', 'Pratibha Patil', 'Michel Suleiman', 'Francisco da Costa Gomes', 'Chiang Ching-kuo', 'Mohamed Morsi', 'Rafael Reyes', 'Roberto María Ortiz', 'Jacob Zuma', 'Hérard Abraham', 'Harry S. Truman', 'Vicente Fox', 'Enrique Bolaños', 'Philippe Richert', 'Horacio Cartes', 'Kumba Ialá', 'José Hilario López', 'Carlos Holguín Mallarino', 'Viktor Yushchenko', 'Eladio Victoria', 'Yitzhak Navon', 'Akbar Hashemi Rafsanjani', 'Godfrey Binaisa', 'Manuel Quezon', 'Richard von Weizsäcker', 'José Desiderio Valverde', 'Manuel de Arriaga', 'Vladimir Voronin', 'Bujar Nishani', 'Anwar Sadat', 'Nicolás Avellaneda', 'Leonel Fernández', 'Islam Karimov', 'Abelardo L. Rodríguez', 'Bako Sahakyan', 'Sibghatullah Mojaddedi', 'Charles de Gaulle', 'Gustav Heinemann', 'Pierre Nkurunziza', 'Alfonso López Pumarejo', 'Denis Sassou Nguesso', 'Agustín Pedro Justo', 'Grover Cleveland', 'Moussa Traoré', 'Virgilio Barco Vargas', 'Tarja Halonen', 'Burhanuddin Rabbani', 'Yun Bo-seon', 'Luiz Inácio Lula da Silva', 'Gurbanguly Berdimuhamedow', 'Sauli Niinistö', 'Serzh Sargsyan', 'Thein Sein', 'Khamtai Siphandon', 'Felipe Calderón', 'Rui Rio', 'Moshe Katsav', 'Tancredo Neves', 'Fernando Gomes', 'Rufino Cuervo y Barreto', 'Jean-François Robillon', 'Clímaco Calderón', 'Porfirio Lobo Sosa', 'Marcelo Torcuato de Alvear', 'Mohammed Omar', 'José Rafael Molina Ureña', 'R. Venkataraman', 'Aníbal Cavaco Silva', 'Joachim Gauck', 'Dag Terje Andersen', 'Tony Tan', 'Nicolas Sarkozy', 'Vidoje Žarković', 'Mwai Kibaki', 'Jorge Holguín', 'Armand Fallières', 'Laura Chinchilla', 'Lyndon B. Johnson', 'Celâl Bayar', 'Jacinto Peynado', 'Jorge Rafael Videla', 'Rawhi Fattouh', 'Manuel María de los Santos Acosta Castillo', 'Léon Blum', 'José Figueroa Alcorta', 'René Préval', 'Sylvain Salnave', 'Rajendra Prasad', 'Daniel Ortega', 'Cemal Gürsel', 'Yusuf Lule', 'Faustin Soulouque', 'Sarvepalli Radhakrishnan', 'Carlos Lleras Restrepo', 'Pedro Pablo Ramírez', 'Edelmiro Julián Farrell', 'François Mitterrand', 'Hassan Gouled Aptidon', 'Salva Kiir Mayardit', 'Harold Martin', 'Eveline Widmer-Schlumpf', 'João Goulart', 'Demetris Christofias', 'Horst Köhler', 'Mahinda Rajapaksa', 'Antonio Thrasybule Kébreau', 'Ali Khamenei', 'Douglas Hyde', 'Franklin D. Roosevelt', 'Dalia Grybauskaitė', 'Liu Shaoqi', 'François Bozizé', 'Saparmurat Niyazov', 'Hipólito Mejía', 'Carlos Salinas de Gortari', 'K. R. Narayanan', 'James Monroe', 'José Ramos-Horta', 'Ernest Bai Koroma', 'Isaias Afewerki', 'Boris Yeltsin', 'Mátyás Szűrös', 'Francisco Craveiro Lopes', 'Héctor Trujillo', 'Traian Băsescu', 'Jürgen Wohlrabe', 'Adolfo Rodríguez Saá', 'Christopher Loeak', 'Juan de Dios Aranzazu', 'Festus Mogae', 'Yoweri Museveni', 'Cincinnatus Leconte', 'Aziz Duwaik', 'Mahamadou Issoufou', 'Milton Obote', 'George Maxwell Richards', 'Raúl Alfonsín', 'Michelle Bachelet', 'Abdurrahman Wahid', 'Alassane Ouattara', 'Josefa Iloilo', 'Mohamed Abdelaziz', 'John F. Kennedy', 'Assaat', 'Luigi Einaudi', 'Barack Obama', 'Jacobo Majluta Azar', 'Richard Nixon', 'Yevgeny Shevchuk', 'Eliseo Payán', 'Theodor Heuss', 'Zine El Abidine Ben Ali', 'Manuel Altagracia Cáceres', 'Arturo Rawson', 'Karl Carstens', 'Shankar Dayal Sharma', 'Arturo Umberto Illia', 'Antonio Imbert Barrera', 'Sandro Pertini', 'Reynaldo Bignone', 'Kurmanbek Bakiyev', 'Li Xiannian', 'Patrice de Mac-Mahon, Duke of Magenta', 'Mariano Ospina Rodríguez', 'Manuel Pinto da Costa', 'B. J. Habibie', 'Carlos Pellegrini', 'Yuan Shikai', 'Calvin Coolidge', 'Theodore Roosevelt', 'Samora Machel', 'Hugo Chávez', 'Marc Ravalomanana', 'Kailash Purryag', 'Yahya Khan', 'Michel Domingue', 'Fernando Lugo', 'Juan Bautista Ceballos', 'Amadou Toumani Touré', 'José Vicente Concha', 'Jimmy Carter', 'Jalal Talabani', 'Nicolás Maduro', 'Bill Clinton', 'John Anderson', 'Erskine Hamilton Childers', 'Danilo Medina', 'Woodrow Wilson', 'Gjorge Ivanov', 'Simón Bolívar', 'Franklin Pierce', 'Sheila Dixon', 'Ernesto Geisel', 'Manny Mori', 'Asif Ali Zardari', 'João Figueiredo', 'George H. W. Bush', 'Zakir Hussain', 'Mohammed Daoud Khan', 'Ikililou Dhoinine', 'Tassos Papadopoulos', 'Thomas Jefferson', 'Abdullah Gül', 'Ulises Heureaux', 'Juan Wanceslao Figuereo', 'Ezequiel Hurtado', 'Chaim Herzog', 'Tsakhiagiin Elbegdorj', 'Froilán Largacha Hurtado', 'Fidel Castro', 'Anerood Jugnauth', 'Tomislav Nikolić', 'Patricio Aylwin', 'Vigdís Finnbogadóttir', 'Ignacy Mościcki', 'Belisario Betancur', 'Marcus Stephen', 'Victorino de la Plaza', 'Shimon Peres', 'Pedro Santana', 'Luis Ernesto Ordóñez Castillo', 'John Tyler', 'Francisco Solano López', 'William R. Tolbert, Jr.', 'José López Portillo', 'Leonid Kuchma', 'James K. Polk', 'Domingo Caycedo', 'Alexandre Pétion', 'Joseph Nérette', 'Nursultan Nazarbayev', 'Rafael Filiberto Bonnelly', 'Ramón Puerta', 'Manuel de Regla Mota', 'Philippe Guerrier', 'Chiang Kai-shek', 'Makarios III', 'Florvil Hyppolite', 'Filip Vujanović', 'Mohammad Khatami', 'Ali Bongo Ondimba', 'José Mendes Cabeçadas', 'Bamir Topi', 'Lee Myung-bak', 'Muhammad Rafiq Tarar', 'Mariano Ospina Pérez', 'Jean-Bertrand Aristide', 'Vadim Brovtsev', 'Ulysses S. Grant', 'Evo Morales', 'Tomás Cipriano de Mosquera', 'Enrique Peña Nieto', 'António Ramalho Eanes', 'Rafael Trujillo', 'Meles Zenawi', 'Ferdinand Marcos', 'Paulino Rivero', 'John Hamilton', 'Paulo Muwanga', 'Sun Yat-sen', 'Ollanta Humala', 'Toomas Hendrik Ilves', 'Saddam Hussein', 'Željko Komšić', 'Pedro Nel Ospina', 'Gerald Ford', 'José Santos Gutiérrez Prieto', 'George Abela', 'Mauricio Funes', 'S. R. Nathan', 'Ignacio María González', 'Manuel Jimenes'}
            Answers = 729, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 729, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 254 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 152
            Final Answer: {'President of Yugoslavia', 'President of the Canary Islands', 'President of Kosovo', 'President of Mongolia', 'President of Djibouti', 'President of Uruguay', 'President of Mauritius', 'President of Israel', 'President of Northern Cyprus', 'President of São Tomé and Príncipe', 'President of Azerbaijan', 'President of the United Republic of Tanzania', 'President of Slovenia', 'President of the Government of New Caledonia', 'President of the Central African Republic', 'President of Haiti', 'President of Vanuatu', 'President of Lithuania', 'President of El Salvador', 'President of Palau', 'President of Benin', 'President of the Republic of China', 'President of Bosnia and Herzegovina', 'President of the United States', 'President of Malta', 'President of France', 'President of Ukraine', 'President of Russia', 'President of Syria', 'President of Somaliland', 'President of Finland', 'President of Kiribati', 'President of Argentina', 'President of Kyrgyzstan', 'President of Chile', 'President of East Timor', 'President of Madagascar', 'President of Abkhazia', 'President of Indonesia', 'President of Algeria', 'President of India', 'President of Italy', 'President of Dominica', 'President of the General Council', 'President of Lebanon', 'President of Germany', 'President of Transnistria', 'President of Brazil', 'President of North Korea', 'President of Turkey', 'President of Poland', 'President of Botswana', 'President of Estonia', 'President of Turkmenistan', 'President of Guinea-Bissau', 'President of Senegal', 'President of Croatia', 'President of the Philippines', 'President of the Democratic Republic of the Congo', 'President of Mexico', 'President of the Palestinian National Authority', 'President of Afghanistan', 'President of Sierra Leone', 'President of Iraq', 'President of Armenia', 'President of the Nagorno-Karabakh Republic', 'President of Nauru', 'President of the Republic of Macedonia', 'President of Uzbekistan', "President of the People's Republic of China", 'President of Cyprus', 'President of Pakistan', 'President of Moldova', 'President of Slovakia', 'State President of South Africa', 'President of Yemen', 'President of South Africa', 'President of Bolivia', 'President of Latvia', 'President of Georgia', 'President of the Marshall Islands', 'President of Cuba', 'President of the Federated States of Micronesia', 'President of Eritrea', 'President of the Czech Republic', 'President of Iraqi Kurdistan', 'President of Ghana', 'President of Belarus', 'President of South Sudan', 'President of the Maldives', 'President of Niger', 'President of Fiji', 'President of Gabon', 'President of Czechoslovakia', 'President of the Confederate States of America', 'President of Angola', 'President of the Sahrawi Arab Democratic Republic', 'President of Nepal', 'President of Iran', 'President of the State of Palestine', 'President of  the Republic Zambia', 'President of the Regional Council', 'Acting President of South Ossetia', 'President of Namibia', 'President of Kenya', 'President of Ecuador', 'President of Equatorial Guinea', 'President of Romania', 'President of Vietnam', 'President of the Swiss Confederation', 'President of the High Transitional Authority', 'French Committee for Finance the Economy and Budget', 'President of  Ethiopia', 'President of Tunisia', 'President of Ireland', 'President of Singapore', 'President of Venezuela', 'President of South Korea', 'President of Dáil Éireann', 'President of Egypt', 'President of Sri Lanka', 'President of the Republic of Yemen', 'President of Guatemala', 'President of the Spanish Republic', 'President of Kazakhstan', 'President of the Dominican Republic', 'President of Bangladesh', 'President of Rwanda', 'President of Somalia', 'President of the National Council', 'President of Laos', 'President of Panama', 'President of Iceland', 'President of Mauritania', 'President of Austria', 'President of Liberia', 'President of Greece', 'President of Colombia', 'President of Sudan', 'President of Montenegro', 'President of Nicaragua', 'President of Trinidad and Tobago', 'President of Hungary', 'President of the United Arab Emirates', 'President of Malawi', 'President of Suriname', 'President of Paraguay', 'President of Tajikistan', 'President of Bulgaria', 'President of Serbia', 'President of Nigeria', 'President of Uganda'}
            Answers = 152, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 152, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 255 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.governors', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 89
            Final Answer: {'Jacques de Larosière', 'Thierry Dissaux', 'Asim Ghaffar', 'George Herbert Walker', 'Charles P. Daly', 'Urban Bäckström', 'Diana Poulton', 'Thomas A. Bartlett', 'George Bancroft', 'Elaine Murphy', 'Russell Grigg', 'Jeffrey Moore', 'Fred Halfpap', 'Ferdinand de Lesseps', 'Francis L. Hawks', 'Robert Peary', 'Richard Upjohn Light', 'Mel Karmazin', 'Sir Patrick Dun', 'John Huston Finley', 'Roger E. Ferch', 'Thomas Holdich', 'G Clive Newall', 'Ahmad Ali Kohzad', 'Owen Luder', 'Robert William Edis', 'Jonathan Yagua', 'Harold Evans', 'Sir John Fowler, 1st Baronet', 'Armindo Monteiro', 'Charles Jonnart', 'Malcolm Budd', 'George Howard, 7th Earl of Carlisle', 'Victor W. Henderson', 'Paul Watson', 'Donald Kaberuka', 'Khan Bahadur Abdur Rahman Khan', 'Henry Grinnell', 'Charles Scott Sherrington', 'Muhammad Ibrahim', 'Lombe Athill', 'Jean-Claude Trichet', 'Charles Roebling', 'Tom George Longstaff', 'Ali bin Asjadi', 'Mario Draghi', 'Janet Carver', 'Joe Kennedy', 'Jan Vercamst', 'Alexander Green', 'Jonathan Glickman', 'George Wittet', 'Martin Conway, 1st Baron Conway of Allington', 'John Betjeman', 'Abdul Halim', 'Charles A. Watson', 'V B Edwards', 'William Stokes', 'Vinay M Parelkar', 'Dr. Mohammad Enamul Haq', 'Blaine D Leonard', 'Waldorf Astor, 2nd Viscount Astor', 'Henry Benedict Medlicott', 'Sir Henry Rawlinson, 1st Baronet', 'Dick Ebersol', 'Dan Sturdivant', 'Muhammad Shahidullah', 'Francis Younghusband', 'Howard Willets', 'Jean Todt', 'Thomas Andrew Knight', 'Sunir Kapoor', 'John Percy Farrar', 'Archer Milton Huntington', 'Maurice Laing', 'Richard Ransom', 'Lambert Lilly', 'Abdul Hamid', 'Biswanath Banerji', 'Ashk Dahlén', 'Nout Wellink', 'Frank Burns', 'Richard Dixon Oldham', "Auguste-Louis-Albéric, prince d'Arenberg", 'Seth Low', 'William Birdwood, 1st Baron Birdwood', 'Mike Grehan', 'George Fillmore Swain', 'Randy Huffman'}
            Answers = 89, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 89, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 256 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.governors', 'organization.organization_board_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.role.governors ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 257 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 743
            Final Answer: {'1983', '1899', '1860', '1995', '1947', '1985', '1998', '1829', '1977', '1942', '1861', '1951', '1990', '1997', '2007', '1897', '1944', '1892', '1862', '1906', '1855', '1964', '1889', '1884', '1923', '1982', '1817', '1903', '1886', '1879', '1858', '1911', '1965', '2005', '1841', '1920', '1881', '1652', '1868', '1898', '1872', '1961', '1950', '1818', '1953', '1915', '1978', '1930', '1865', '1973', '1967', '1880', '1919', '2009', '1848', '1825', '1877', '1842', '1979', '1863', '1933', '1991', '1980', '1988', '1913', '1900', '1984', '2002', '1963', '1938', '1968', '1870', '1875', '1830', '1955', '2010', '1885', '1934', '1948', '1952', '1976', '1832', '1959', '1922', '1797', '1910', '1809', '1975', '1837', '2008', '1914', '1921', '1924', '1943', '1970', '1895', '1956', '1904', '1925', '1878', '1869', '1996', '1932', '1969', '1957', '1940', '1994', '1882', '1801', '1736', '1893', '1888', '1987', '1960', '1853', '1974', '2000', '1949', '1993', '1912', '1929', '1843', '1887', '1854', '1971', '2004', '1840', '1857', '1909', '1867', '1901', '2013', '1850', '1931', '1962', '1966', '1874', '1856', '1916', '1789', '1890', '1831', '1844', '2011', '1958', '1954', '1847', '1926', '1819', '1986', '2012', '1945', '2003', '1918', '2006', '1992', '1864', '1989', '1826', '1806', '1866', '1849', '1935', '1972', '1981', '1845', '1735', '1999', '1946', '1928', '2001', '1827', '1876'}
            Answers = 173, P = 0.005780, R = 1.000000, F1 = 0.011494
          } [0.012s]
          Answers = 173, P = 0.005780, R = 1.000000, F1 = 0.011494
        } [0.012s]
        Checking schema 258 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 580
            Final Answer: {'1983', '1860', '1899', '1995', '1947', '1985', '1998', '1829', '1977', '1942', '1861', '1951', '1997', '1990', '2007', '1897', '1944', '1892', '1862', '1906', '1855', '1964', '1889', '1884', '1923', '1982', '1817', '1903', '1879', '1886', '1858', '1911', '1939', '1965', '2005', '1841', '1881', '1747', '1898', '1868', '1902', '1872', '1950', '1818', '1961', '1915', '1953', '1978', '1930', '1865', '1973', '1967', '1880', '1919', '1905', '2009', '1848', '1825', '1877', '1842', '1979', '1863', '1933', '1991', '1980', '1988', '1913', '1900', '1984', '2002', '1963', '1938', '1968', '1870', '1830', '1955', '2010', '1885', '1934', '1936', '1952', '1948', '1976', '1832', '1959', '1922', '1797', '1910', '1809', '1975', '1837', '2008', '1914', '1921', '1943', '1970', '1895', '1956', '1904', '1925', '1878', '1869', '1917', '1996', '1932', '1655', '1969', '1957', '1940', '1994', '1882', '1801', '1736', '1893', '1888', '1987', '1853', '1960', '1974', '2000', '1949', '1993', '1912', '1929', '1843', '1887', '1854', '1971', '2004', '1840', '1857', '1909', '1867', '1901', '2013', '1850', '1962', '1966', '1874', '1856', '1916', '1890', '1831', '1844', '2011', '1954', '1958', '1847', '1926', '1819', '1986', '2012', '1945', '2003', '1918', '2006', '1992', '1864', '1989', '1894', '1866', '1849', '1935', '1972', '1981', '1845', '1946', '1999', '1928', '2001', '1827', '1876'}
            Answers = 172, P = 0.005814, R = 1.000000, F1 = 0.011561
          } [0.009s]
          Answers = 172, P = 0.005814, R = 1.000000, F1 = 0.011561
        } [0.009s]
        Checking schema 259 / 396: {
          [('Main', '==', 'm.060c4', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'Fiji'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 260 / 396: {
          [('Main', '==', 'm.060c4', ['government.political_appointer.appointees', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'Mozambique'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 261 / 396: {
          [('Main', '==', 'm.060c4', ['government.political_appointer.appointees', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'Prime minister'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 262 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 17
            Final Answer: {'Regional Government of Madeira', 'Parliament of Nauru', 'National Assembly', 'Gobierno de la Comunidad de Madrid', 'New Jersey Provincial Council', 'Cabinet of South Africa', 'Abgeordnetenhaus of Berlin', 'Portuguese Second Republic', 'Council of State', 'Baltimore City Council', 'Louisiana State Senate', 'First Portuguese Republic', 'Parliament of Norway', 'Detroit City Council', 'New York City Council', 'Camara Municipal do Porto', 'Chilean presidential election, 1970'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 263 / 396: {
          [('Main', '==', 'm.060c4', ['religion.religious_leadership_title.leaders', 'religion.religious_organization_leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:religion.religious_leadership_title.leaders ?o1 . ?o1 fb:religion.religious_organization_leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:religion.religious_leadership_title.leaders ?o1 . ?o1 fb:religion.religious_organization_leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 5
            Final Answer: {'Soka Gakkai', 'North American College of Gnostic Bishops', 'Presidency of Religious Affairs', 'Union for Reform Judaism', 'Darul Huda Islamic University'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 264 / 396: {
          [('Main', '==', 'm.060c4', ['projects.project_role.projects', 'projects.project_participation.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:projects.project_role.projects ?o1 . ?o1 fb:projects.project_participation.from_date ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:projects.project_role.projects ?o1 . ?o1 fb:projects.project_participation.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 2
            Final Answer: {'1982', '1995'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 265 / 396: {
          [('Main', '==', 'm.060c4', ['government.political_appointer.appointees', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'Luisa Diogo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 266 / 396: {
          [('Main', '==', 'm.060c4', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 267 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 2
            Final Answer: {'United States of America', 'Madrid'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 268 / 396: {
          [('Main', '==', 'm.060c4', ['government.political_appointer.appointees', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 269 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 2
            Final Answer: {'Pedro Pires', 'National Assembly of South Africa'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 270 / 396: {
          [('Main', '==', 'm.060c4', ['religion.religious_leadership_title.leaders', 'religion.religious_organization_leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:religion.religious_leadership_title.leaders ?o1 . ?o1 fb:religion.religious_organization_leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:religion.religious_leadership_title.leaders ?o1 . ?o1 fb:religion.religious_organization_leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 271 / 396: {
          [('Main', '==', 'm.060c4', ['religion.religious_leadership_title.leaders', 'religion.religious_organization_leadership.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:religion.religious_leadership_title.leaders ?o1 . ?o1 fb:religion.religious_organization_leadership.start_date ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:religion.religious_leadership_title.leaders ?o1 . ?o1 fb:religion.religious_organization_leadership.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 2
            Final Answer: {'2010', '1975'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 272 / 396: {
          [('Main', '==', 'm.060c4', ['projects.project_role.projects', 'projects.project_participation.project'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:projects.project_role.projects ?o1 . ?o1 fb:projects.project_participation.project ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:projects.project_role.projects ?o1 . ?o1 fb:projects.project_participation.project ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 3
            Final Answer: {'Dialog spin-out as separate corporation', 'Edible Schoolyard', 'Stanford Initiative on Improving K-12 Education'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 273 / 396: {
          [('Main', '==', 'm.060c4', ['projects.project_role.projects', 'projects.project_participation.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:projects.project_role.projects ?o1 . ?o1 fb:projects.project_participation.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:projects.project_role.projects ?o1 . ?o1 fb:projects.project_participation.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 3
            Final Answer: {'Alice Waters', 'Roger K. Summit', 'John L. Hennessy'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 274 / 396: {
          [('Main', '==', 'm.060c4', ['projects.project_role.projects', 'projects.project_participation.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:projects.project_role.projects ?o1 . ?o1 fb:projects.project_participation.to_date ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:projects.project_role.projects ?o1 . ?o1 fb:projects.project_participation.to_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'1982'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 275 / 396: {
          [('Main', '==', 'm.060c4', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 276 / 396: {
          [('Main', '==', 'm.060c4', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 277 / 396: {
          [('Main', '==', 'm.060c4', ['government.political_appointer.appointees', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 4
            Final Answer: {'1999', '2005', '1994', '2004'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 278 / 396: {
          [('Main', '==', 'm.060c4', ['government.political_appointer.appointees', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:26:23] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 2
            Final Answer: {'2005', '1999'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 279 / 396: {
          [('Main', '==', 'm.060c4', ['religion.religious_leadership_title.leaders', 'religion.religious_organization_leadership.leader'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:religion.religious_leadership_title.leaders ?o1 . ?o1 fb:religion.religious_organization_leadership.leader ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:religion.religious_leadership_title.leaders ?o1 . ?o1 fb:religion.religious_organization_leadership.leader ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 6
            Final Answer: {'Daisaku Ikeda', 'Shaun McCann', 'Eric Yoffie', 'CH Hydrose Musliyar', 'M. Victor Paul', 'Mehmet Görmez'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 280 / 396: {
          [('Main', '==', 'm.060c4', ['religion.religious_leadership_title.leaders', 'religion.religious_organization_leadership.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:religion.religious_leadership_title.leaders ?o1 . ?o1 fb:religion.religious_organization_leadership.end_date ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:religion.religious_leadership_title.leaders ?o1 . ?o1 fb:religion.religious_organization_leadership.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 281 / 396: {
          [('Main', '==', 'm.060c4', ['projects.project_role.projects', 'projects.project_participation.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:projects.project_role.projects ?o1 . ?o1 fb:projects.project_participation.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:projects.project_role.projects ?o1 . ?o1 fb:projects.project_participation.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 282 / 396: {
          [('Main', '==', 'm.060c4', ['organization.role.leaders', 'organization.leadership.as_of_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.as_of_date ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.as_of_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 283 / 396: {
          [('Main', '==', 'm.060c4', ['organization.organization_committee_title.members_with_this_title', 'organization.organization_committee_membership.committee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.organization_committee_title.members_with_this_title ?o1 . ?o1 fb:organization.organization_committee_membership.committee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.organization_committee_title.members_with_this_title ?o1 . ?o1 fb:organization.organization_committee_membership.committee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 11
            Final Answer: {'Penya Chescandinavia', 'Kentucky Junior Chamber of Commerce', 'B’nai B’rith International', 'Covington-Kenton County Chamber of Commerce', 'Icelandic Society for Intelligence Research', 'Kenton County Heart Association', 'Covington Junior Chamber of Commerce', 'Inner Actions-Committee', 'Methodist League', 'WPPA Executive Committee', 'Kenton County Bar Association'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 284 / 396: {
          [('Main', '==', 'm.060c4', ['organization.organization_committee_title.members_with_this_title', 'organization.organization_committee_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.organization_committee_title.members_with_this_title ?o1 . ?o1 fb:organization.organization_committee_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.organization_committee_title.members_with_this_title ?o1 . ?o1 fb:organization.organization_committee_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 285 / 396: {
          [('Main', '==', 'm.060c4', ['book.editor_title.editors', 'book.editorial_tenure.editor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:book.editor_title.editors ?o1 . ?o1 fb:book.editorial_tenure.editor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:book.editor_title.editors ?o1 . ?o1 fb:book.editorial_tenure.editor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'Timothy P. Suddard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 286 / 396: {
          [('Main', '==', 'm.060c4', ['book.editor_title.editors', 'book.editorial_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:book.editor_title.editors ?o1 . ?o1 fb:book.editorial_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:book.editor_title.editors ?o1 . ?o1 fb:book.editorial_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 287 / 396: {
          [('Main', '==', 'm.060c4', ['fictional_universe.fictional_job_title.fictional_characters_with_this_job', 'fictional_universe.fictional_employment_tenure.employee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:fictional_universe.fictional_job_title.fictional_characters_with_this_job ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.employee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:fictional_universe.fictional_job_title.fictional_characters_with_this_job ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.employee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'Gaius Baltar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 288 / 396: {
          [('Main', '==', 'm.060c4', ['fictional_universe.fictional_job_title.fictional_characters_with_this_job', 'fictional_universe.fictional_employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:fictional_universe.fictional_job_title.fictional_characters_with_this_job ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:fictional_universe.fictional_job_title.fictional_characters_with_this_job ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 289 / 396: {
          [('Main', '==', 'm.060c4', ['organization.organization_committee_title.members_with_this_title', 'organization.organization_committee_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.organization_committee_title.members_with_this_title ?o1 . ?o1 fb:organization.organization_committee_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:organization.organization_committee_title.members_with_this_title ?o1 . ?o1 fb:organization.organization_committee_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 14
            Final Answer: {'Theodor Herzl', 'David Wolffsohn', 'Frank Goldman', 'Daniel Cervera', 'Philip Klutznick', 'Hrafn Thorri Thórisson', 'Henry Monsky', 'Label A. Katz', 'William A. Wexler', 'Alfred M. Cohen', 'Adolf Kraus', 'Scott Walker', 'Andrew W. Clark', 'Otto Warburg'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 290 / 396: {
          [('Main', '==', 'm.060c4', ['book.editor_title.editors', 'book.editorial_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:book.editor_title.editors ?o1 . ?o1 fb:book.editorial_tenure.from ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:book.editor_title.editors ?o1 . ?o1 fb:book.editorial_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'1985'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 291 / 396: {
          [('Main', '==', 'm.060c4', ['organization.organization_committee_title.members_with_this_title', 'organization.organization_committee_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.organization_committee_title.members_with_this_title ?o1 . ?o1 fb:organization.organization_committee_membership.from ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.organization_committee_title.members_with_this_title ?o1 . ?o1 fb:organization.organization_committee_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 16
            Final Answer: {'1925', '1911', '1948', '1965', '1947', '1931', '1945', '1953', '1938', '1959', '1951', '2005', '1905', '1907', '1897', '1956'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 292 / 396: {
          [('Main', '==', 'm.060c4', ['organization.organization_committee_title.members_with_this_title', 'organization.organization_committee_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.organization_committee_title.members_with_this_title ?o1 . ?o1 fb:organization.organization_committee_membership.to ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:organization.organization_committee_title.members_with_this_title ?o1 . ?o1 fb:organization.organization_committee_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 16
            Final Answer: {'1904', '1925', '1911', '1947', '1948', '1965', '1953', '1932', '1945', '1938', '1959', '1951', '1847', '1971', '1920', '1956'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 293 / 396: {
          [('Main', '==', 'm.060c4', ['book.editor_title.editors', 'book.editorial_tenure.periodical'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:book.editor_title.editors ?o1 . ?o1 fb:book.editorial_tenure.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:book.editor_title.editors ?o1 . ?o1 fb:book.editorial_tenure.periodical ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 1
            Final Answer: {'Grassroots Motorsports'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 294 / 396: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.from']), ('Entity', '==', 'm.06c97', ['!business.employment_tenure.from', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'1969'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 295 / 396: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.title']), ('Entity', '==', 'm.06c97', ['business.job_title.people_with_this_title', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 296 / 396: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.to']), ('Entity', '==', 'm.06c97', ['!business.employment_tenure.to', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'1974'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 297 / 396: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.person']), ('Entity', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 298 / 396: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.company']), ('Entity', '==', 'm.06c97', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 299 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.jurisdiction_of_office']), ('Entity', '==', 'm.06c97', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Current: 300 / 396
        Checking schema 300 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.basic_title']), ('Entity', '==', 'm.06c97', ['government.government_office_category.officeholders', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 301 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.office_holder']), ('Entity', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 302 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.office_position_or_title']), ('Entity', '==', 'm.06c97', ['government.government_office_or_title.office_holders', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'President of the United States'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 303 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.from']), ('Entity', '==', 'm.06c97', ['!government.government_position_held.from', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'1969'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 304 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.to']), ('Entity', '==', 'm.06c97', ['!government.government_position_held.to', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.to ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.to ?o2 . ?o1 fb:government.government_position_held.office_holder fb:m.06c97 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'1974'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 305 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.office_holder']), ('Entity', '==', 'm.06c97', ['government.us_vice_president.to_president'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:government.us_vice_president.to_president fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:government.us_vice_president.to_president fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'Gerald Ford'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 306 / 396: {
          [('Main', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.office_holder']), ('Entity', '==', 'm.06c97', ['government.us_president.vice_president'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:government.us_president.vice_president fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:government.us_president.vice_president fb:m.06c97 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'Dwight D. Eisenhower'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 307 / 396: {
          [('Main', '==', 'm.06c97', ['film.actor.film', 'film.performance.character_note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 308 / 396: {
          [('Main', '==', 'm.06c97', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'1974'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 309 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'1969', '1956'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 310 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'President', 'Vice President'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 311 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Bachelor of Laws'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 312 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 3
            Final Answer: {'1930', '1937', '1934'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 313 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 5
            Final Answer: {'Harold Nixon', 'Arthur Nixon', 'Edward Nixon', 'Donald Nixon'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 314 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Pat Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 315 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Mission Inn'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 316 / 396: {
          [('Main', '==', 'm.06c97', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 3
            Final Answer: {'Archive Footage', 'Voice', 'Him/Herself'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 317 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.party', 'government.political_party_tenure.politician'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 318 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 319 / 396: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 320 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 3
            Final Answer: {'Senator', 'President', 'Vice President'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 321 / 396: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Attorney general', 'Secretary of State'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 322 / 396: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 4
            Final Answer: {'United States Department of Transportation', 'Cabinet of the United States', 'United States Department of Defense', 'Executive Office of the President of the United States'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 323 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'United States House of Representatives', 'United States Senate'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 324 / 396: {
          [('Main', '==', 'm.06c97', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 325 / 396: {
          [('Main', '==', 'm.06c97', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 326 / 396: {
          [('Main', '==', 'm.06c97', ['military.military_person.service', 'military.military_service.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.rank ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.rank ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Lieutenant Commander'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 327 / 396: {
          [('Main', '==', 'm.06c97', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.crime'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.crime ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.crime ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Watergate scandal'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 328 / 396: {
          [('Main', '==', 'm.06c97', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.accuser'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.accuser ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.accuser ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'John Dean'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 329 / 396: {
          [('Main', '==', 'm.06c97', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.speaker_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 330 / 396: {
          [('Main', '==', 'm.06c97', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.speech_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speech_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speech_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Watergate scandal'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 331 / 396: {
          [('Main', '==', 'm.06c97', ['people.appointer.appointment_made', 'people.appointment.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 332 / 396: {
          [('Main', '==', 'm.06c97', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 4
            Final Answer: {'Pat Nixon', 'Tricia Nixon Cox', 'Julie Nixon Eisenhower'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 333 / 396: {
          [('Main', '==', 'm.06c97', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.to ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'1964'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 334 / 396: {
          [('Main', '==', 'm.06c97', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'K-19: The Widowmaker', 'Above the Law'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 335 / 396: {
          [('Main', '==', 'm.06c97', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'1978'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 336 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'1960', '1974'}
            Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
          } [0.030s]
          Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
        } [0.031s]
        Checking schema 337 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'1940'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 338 / 396: {
          [('Main', '==', 'm.06c97', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 34
            Final Answer: {'Transformers: Dark of the Moon', 'Hearts and Minds', 'The Greatest Speeches of All Time: Vol. 2', 'A Promise to the Dead: The Exile Journey of Ariel Dorfman', 'Maafa 21', 'Good Morning, Vietnam', 'War Made Easy: How Presidents & Pundits Keep Spinning Us to Death', 'Bigger, Stronger, Faster*', 'Hair: Let the Sun Shine In', 'Live Free or Die Hard', 'Dark Side of the Moon', "Denis Leary: Lock 'N Load", 'The Shock Doctrine', 'American Gangster', 'True Stories', 'Frost Nixon: The Original Watergate Interviews', 'Dear Fidel', 'The Greatest Speeches of All Time: Vol. 3', 'The Making of the President: 1960', 'Greatest Presidents of the United States', 'The U.S. vs. John Lennon', 'Gonzo: The Life and Work of Dr. Hunter S. Thompson', 'Dark Legacy', 'Grass', 'The Strawberry Statement', 'Gasland', 'The Fog of War: Eleven Lessons from the Life of Robert S. McNamara', 'The Century That Made America Great', 'Sputnik Mania', 'Witness to War: Dr. Charlie Clements', 'Millhouse', 'And Now for Something Completely Different', 'Facing Ali', 'Sicko'}
            Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 339 / 396: {
          [('Main', '==', 'm.06c97', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 340 / 396: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 26
            Final Answer: {'James Thomas Lynn', 'James R. Schlesinger', 'David Gergen', 'John Dean', 'George H. W. Bush', 'Claude Brinegar', 'Henry Kissinger', 'William P. Rogers', 'Ron Ziegler', 'Melvin R. Laird', 'George W. Romney', 'John Connally', 'Elliot Richardson', 'H. R. Haldeman', 'Robert Bork', 'Alexander Haig', 'George P. Shultz', 'Jesse Leonard Steinfeld', 'Roy Ash', 'David M. Kennedy', 'John A. Volpe', 'William E. Simon', 'Robert Mayo', 'Leonard Garment', 'Caspar Weinberger', 'Charles Colson'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 341 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 342 / 396: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 18
            Final Answer: {'White House Deputy', 'White House Staff Assistant', 'National Security Advisor', 'United States Attorney General', 'United States Secretary of Transportation', 'United States Surgeon General', 'United States Secretary of the Treasury', 'United States Secretary of Housing and Urban Development', 'Director, United States Office of Management and Budget', 'United States Secretary of Health, Education, and Welfare', 'United States Secretary of Defense', 'United States Solicitor General', 'White House Press Secretary', 'United States Ambassador to the United Nations', 'United States Secretary of State', 'Under Secretary of State', 'White House Counsel', 'White House Chief of Staff'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 343 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 4
            Final Answer: {'President of the United States', 'United States Representative', 'Vice President of the United States', 'United States Senator'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 344 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'California', 'California’s 12th congressional district'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 345 / 396: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 346 / 396: {
          [('Main', '==', 'm.06c97', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 347 / 396: {
          [('Main', '==', 'm.06c97', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'861'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 348 / 396: {
          [('Main', '==', 'm.06c97', ['military.military_person.service', 'military.military_service.military_force'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.military_force ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.military_force ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'United States Navy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 349 / 396: {
          [('Main', '==', 'm.06c97', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.presented_work'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {"Richard Nixon's resignation speech", 'Checkers speech'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 350 / 396: {
          [('Main', '==', 'm.06c97', ['people.appointer.appointment_made', 'people.appointment.appointed_role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Associate Justice of the Supreme Court of the United States', 'Chief Justice of the United States'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 351 / 396: {
          [('Main', '==', 'm.06c97', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 352 / 396: {
          [('Main', '==', 'm.06c97', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 353 / 396: {
          [('Main', '==', 'm.06c97', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 354 / 396: {
          [('Main', '==', 'm.06c97', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 3
            Final Answer: {'Archive Footage', 'Uncredited', 'Him/Herself'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 355 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 356 / 396: {
          [('Main', '==', 'm.06c97', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 357 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 358 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 3
            Final Answer: {'Whittier College', 'Duke University School of Law', 'Fullerton Union High School'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 359 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 360 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'1993'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 361 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 362 / 396: {
          [('Main', '==', 'm.06c97', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 363 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.party', 'government.political_party_tenure.party'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Republican Party'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 364 / 396: {
          [('Main', '==', 'm.06c97', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 7
            Final Answer: {'Episode #30', 'The Impossible Astronaut', 'The American Film Institute Salute to James Cagney', 'Johnny Grant', 'Episode #15', 'Day of the Moon', 'The Future of the GOP'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 365 / 396: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:26:24] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 19
            Final Answer: {'1973', '1972', '1969', '1970', '1971', '1974'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 366 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 4
            Final Answer: {'1969', '1953', '1950', '1947'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 367 / 396: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 24
            Final Answer: {'1973', '1972', '1970', '1977', '1971', '1975', '1974'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 368 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 4
            Final Answer: {'1950', '1953', '1961', '1974'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 369 / 396: {
          [('Main', '==', 'm.06c97', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'The Nixon Interviews'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 370 / 396: {
          [('Main', '==', 'm.06c97', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 371 / 396: {
          [('Main', '==', 'm.06c97', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'855'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 372 / 396: {
          [('Main', '==', 'm.06c97', ['military.military_person.service', 'military.military_service.military_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.military_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.military_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 373 / 396: {
          [('Main', '==', 'm.06c97', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.suspect'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.suspect ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.suspect ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 6
            Final Answer: {'Robert Mardian', 'H. R. Haldeman', 'John Ehrlichman', 'Kenneth Parkinson', 'John N. Mitchell'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 374 / 396: {
          [('Main', '==', 'm.06c97', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.date_of_accusation'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.date_of_accusation ?o2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.date_of_accusation ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'1973'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 375 / 396: {
          [('Main', '==', 'm.06c97', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.type_or_format_of_presentation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.type_or_format_of_presentation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.type_or_format_of_presentation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 3
            Final Answer: {'Television address', 'Speech', 'Farewell address'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 376 / 396: {
          [('Main', '==', 'm.06c97', ['people.appointer.appointment_made', 'people.appointment.declared_on'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.declared_on ?o2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.declared_on ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 3
            Final Answer: {'1969', '1972', '1970'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 377 / 396: {
          [('Main', '==', 'm.06c97', ['people.appointer.appointment_made', 'people.appointment.appointee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 4
            Final Answer: {'Harry Blackmun', 'Warren E. Burger', 'Lewis F. Powell, Jr.', 'William Rehnquist'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 378 / 396: {
          [('Main', '==', 'm.06c97', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.pet'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 4
            Final Answer: {'Pasha', 'Vicki', 'King Timahoe', 'Checkers'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 379 / 396: {
          [('Main', '==', 'm.06c97', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.date ?o2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'1972', '1974'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 380 / 396: {
          [('Main', '==', 'm.06c97', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.method'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.method ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.method ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Gun'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 381 / 396: {
          [('Main', '==', 'm.06c97', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.assassinated_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassinated_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassinated_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 382 / 396: {
          [('Main', '==', 'm.06c97', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'White House', 'Parliament Hill'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 383 / 396: {
          [('Main', '==', 'm.06c97', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.outcome'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.outcome ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.outcome ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Failure'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 384 / 396: {
          [('Main', '==', 'm.06c97', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.assassin'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassin ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassin ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Samuel Byck', 'Arthur Bremer'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 385 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.from']), ('Entity', '==', 'm.060c4', ['!business.employment_tenure.from', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'1969'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 386 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.title']), ('Entity', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 387 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.to']), ('Entity', '==', 'm.060c4', ['!business.employment_tenure.to', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'1974'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 388 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person']), ('Entity', '==', 'm.060c4', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 389 / 396: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.company']), ('Entity', '==', 'm.060c4', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 390 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office']), ('Entity', '==', 'm.060c4', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 391 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.basic_title']), ('Entity', '==', 'm.060c4', ['government.government_office_category.officeholders', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 392 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.office_holder']), ('Entity', '==', 'm.060c4', ['government.politician.government_positions_held', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 393 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title']), ('Entity', '==', 'm.060c4', ['government.government_office_or_title.office_holders', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'President of the United States'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 394 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.from']), ('Entity', '==', 'm.060c4', ['!government.government_position_held.from', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'1969'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 395 / 396: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.to']), ('Entity', '==', 'm.060c4', ['!government.government_position_held.to', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . ?o1 fb:government.government_position_held.basic_title fb:m.060c4 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'1974'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        383 / 396 coarse schemas kept with ans_size > 0.
      } [5.383s]
      Coarse level ended, resulting in 383 schemas.
    } [12.402s]
    Type level searching (total types = 10): {
      Current: 0 / 383
[{'type.int'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'base.activism.activism_issue'}]
[{'government.us_vice_president'}]
[{'music.instrument'}]
[{'music.recording'}]
[{'type.int'}]
[{'symbols.namesake'}]
[{'book.book_edition'}]
[{'film.film'}]
[{'media_common.quotation'}]
[{'people.person'}]
[{'base.saturdaynightlive.snl_character'}]
[{'base.inaugurations.inauguration'}]
[{'book.written_work'}]
[{'government.election_campaign'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'base.politicalconventions.political_convention'}]
[{'type.int'}]
[{'base.americancomedy.celebrity_impressionist'}]
[{'base.qualia.recreational_drug'}]
[{'book.book_edition'}]
[{'base.argumentmaps.apology'}]
[{'people.ethnicity'}]
[{'people.profession'}]
[{'base.americancomedy.celebrity_impressionist'}]
[{'government.government_office_or_title'}]
[{'fictional_universe.fictional_character'}]
[{'media_common.quotation'}]
[{'fictional_universe.fictional_character'}]
[{'media_common.quotation'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'location.location'}]
[{'people.place_of_interment'}]
[{'base.activism.activism_issue'}]
[{'government.us_vice_president'}]
[{'music.recording'}]
[{'symbols.namesake'}]
[{'film.film'}]
[{'media_common.quotation'}]
[{'people.person'}]
[{'people.cause_of_death'}]
[{'military.military_conflict'}]
[{'base.kwebbase.kwsentence'}]
[{'government.us_president'}]
[{'base.inaugurations.inauguration'}]
[{'media_common.quotation'}]
[{'book.written_work'}]
[{'government.election_campaign'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'base.kwebbase.kwconnection'}]
[{'base.politicalconventions.political_convention'}]
[{'type.int'}]
[{'type.int'}]
[{'base.americancomedy.celebrity_impressionist'}]
[{'people.ethnicity'}]
[{'people.profession'}]
[{'base.americancomedy.celebrity_impressionist'}]
[{'media_common.quotation'}]
[{'type.datetime'}]
[{'people.gender'}]
[{'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_program_guest'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'government.political_party_tenure'}, {'government.politician'}]
[{'tv.tv_guest_role'}, {'tv.special_tv_performance_type'}]
      Current: 100 / 383
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'base.politicalconventions.pres_delegate_vote_tally'}, {'base.politicalconventions.primary_candidate'}]
[{'base.crime.crime_accusation'}, {'base.crime.crime'}]
[{'base.crime.crime_accusation'}, {'base.crime.crime_accuser'}]
[{'event.speech_or_presentation'}, {'event.public_speaker'}]
[{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
[{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.restaurant_choice'}, {'base.popstra.restaurant'}]
[{'base.popstra.canoodled'}, {'base.popstra.celebrity'}]
[{'base.popstra.fashion_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.religion_choice'}, {'base.popstra.religion'}]
[{'people.appointment'}, {'people.appointer'}]
[{'law.legal_case_party_relationship'}, {'law.legal_case'}]
[{'architecture.occupancy'}, {'type.datetime'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet_owner'}]
[{'base.famouspets.pet_ownership'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'film.performance'}, {'film.film'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'people.marriage'}, {'type.datetime'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.politicalconventions.pres_delegate_vote_tally'}, {'type.float'}]
[{'base.crime.criminal_conviction'}, {'base.crime.convicted_criminal'}]
[{'base.crime.criminal_conviction'}, {'base.crime.crime'}]
[{'royalty.chivalric_order_membership'}, {'royalty.chivalric_order_member'}]
[{'event.speech_or_presentation'}, {'event.presented_work'}]
[{'base.popstra.operation'}, {'base.popstra.procedure'}]
[{'base.popstra.support'}, {'base.popstra.organization'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.fashion_choice'}, {'base.popstra.company'}]
[{'base.popstra.party_attendance_person'}, {'base.popstra.celebrity'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
[{'people.appointment'}, {'people.appointed_role'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'law.legal_case_party_relationship'}, {'law.litigant'}]
[{'architecture.occupancy'}, {'architecture.building'}]
[{'base.famouspets.pet_ownership'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.non_character_role'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'government.political_party_tenure'}, {'government.political_party'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'influence.peer_relationship'}, {'influence.influence_node'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_program'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.politicalconventions.pres_delegate_vote_tally'}, {'base.politicalconventions.political_convention'}]
[{'base.crime.criminal_conviction'}, {'base.fight.crime_type'}]
[{'base.crime.criminal_conviction'}, {'base.fight.sentence'}]
[{'royalty.chivalric_order_membership'}, {'royalty.order_of_chivalry'}]
[{'base.crime.crime_accusation'}, {'base.crime.crime_suspect'}]
[{'base.crime.crime_accusation'}, {'type.datetime'}]
[{'event.speech_or_presentation'}, {'event.type_of_public_presentation'}]
[{'event.speech_or_presentation'}, {'type.datetime'}]
[{'base.popstra.dated'}, {'base.popstra.celebrity'}]
[{'base.popstra.public_insult'}, {'base.popstra.celebrity'}]
      Current: 200 / 383
[{'base.popstra.public_insult'}, {'base.popstra.celebrity'}]
[{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
[{'base.popstra.operation'}, {'base.popstra.celebrity'}]
[{'base.popstra.support'}, {'base.popstra.celebrity'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.restaurant_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.canoodled'}, {'type.datetime'}]
[{'base.popstra.party_attendance_person'}, {'base.popstra.party'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.religion_choice'}, {'base.popstra.celebrity'}]
[{'people.appointment'}, {'type.datetime'}]
[{'people.appointment'}, {'people.appointee'}]
[{'law.legal_case_party_relationship'}, {'law.legal_party_role'}]
[{'architecture.occupancy'}, {'architecture.building_occupant'}]
[{'architecture.occupancy'}, {'type.datetime'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet'}]
[{'user.dfhuynh.default_domain.assassination'}, {'type.datetime'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.method_of_assassination'}]
[{'base.politicalconventions.convention_speech'}, {'base.politicalconventions.political_convention'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.assassinated_person'}]
[{'user.dfhuynh.default_domain.assassination'}, {'location.location'}]
[{'base.politicalconventions.convention_speech'}, {'type.datetime'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.assassination_outcome'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.assassin'}]
[{'base.politicalconventions.convention_speech'}, {'base.politicalconventions.convention_speaker'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.leadership'}, {'organization.role'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'organization.role'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'religion.religious_organization_leadership'}, {'religion.religious_organization'}]
[{'projects.project_participation'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'religion.religious_organization_leadership'}, {'religion.religious_leadership_title'}]
[{'religion.religious_organization_leadership'}, {'type.datetime'}]
[{'projects.project_participation'}, {'projects.project'}]
[{'projects.project_participation'}, {'projects.project_participant'}]
[{'projects.project_participation'}, {'type.datetime'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'religion.religious_organization_leadership'}, {'religion.religious_leader'}]
[{'religion.religious_organization_leadership'}, {'type.datetime'}]
[{'projects.project_participation'}, {'projects.project_role'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.organization_committee_membership'}, {'organization.organization_committee'}]
[{'organization.organization_committee_membership'}, {'organization.organization_committee_title'}]
[{'book.editorial_tenure'}, {'book.periodical_editor'}]
[{'book.editorial_tenure'}, {'book.editor_title'}]
[{'fictional_universe.fictional_employment_tenure'}, {'fictional_universe.fictional_character'}]
[{'fictional_universe.fictional_employment_tenure'}, {'fictional_universe.fictional_job_title'}]
[{'organization.organization_committee_membership'}, {'organization.organization_member'}]
[{'book.editorial_tenure'}, {'type.datetime'}]
[{'organization.organization_committee_membership'}, {'type.datetime'}]
[{'organization.organization_committee_membership'}, {'type.datetime'}]
[{'book.editorial_tenure'}, {'book.periodical'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
      Current: 300 / 383
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'government.political_party_tenure'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'military.military_service'}, {'military.rank'}]
[{'base.crime.crime_accusation'}, {'base.crime.crime'}]
[{'base.crime.crime_accusation'}, {'base.crime.crime_accuser'}]
[{'event.speech_or_presentation'}, {'event.public_speaker'}]
[{'event.speech_or_presentation'}, {'event.speech_topic'}]
[{'people.appointment'}, {'people.appointer'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet_owner'}]
[{'base.famouspets.pet_ownership'}, {'type.datetime'}]
[{'film.performance'}, {'film.film'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'military.military_service'}, {'military.armed_force'}]
[{'event.speech_or_presentation'}, {'event.presented_work'}]
[{'people.appointment'}, {'people.appointed_role'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'government.political_party_tenure'}, {'government.political_party'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_program'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'military.military_service'}, {'military.military_person'}]
[{'base.crime.crime_accusation'}, {'base.crime.crime_suspect'}]
[{'base.crime.crime_accusation'}, {'type.datetime'}]
[{'event.speech_or_presentation'}, {'event.type_of_public_presentation'}]
[{'people.appointment'}, {'type.datetime'}]
[{'people.appointment'}, {'people.appointee'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet'}]
[{'user.dfhuynh.default_domain.assassination'}, {'type.datetime'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.method_of_assassination'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.assassinated_person'}]
[{'user.dfhuynh.default_domain.assassination'}, {'location.location'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.assassination_outcome'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.assassin'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
      60 typed schemas retrieved from 383 coarse schemas.
      Calculating F1 for 60 typed schemas: {
        Current: 0 / 60
        Checking schema 0 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.parents']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 2 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.children']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 3 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.children']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Chelsea Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 4 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.parents']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'people.person', 'government.us_vice_president'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 5 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.parents']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 6 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.parents']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 7 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 8 / 60: {
          [('Main', '==', 'm.06c97', ['government.us_president.vice_president']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.us_vice_president'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Spiro Agnew', 'Gerald Ford'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 9 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.children']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'people.person', 'government.us_vice_president'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 10 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.children']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 11 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.children']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 12 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.children']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Tricia Nixon Cox', 'Julie Nixon Eisenhower'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 13 / 60: {
          [('Main', '==', 'm.06c97', ['people.deceased_person.cause_of_death']), ('Type', '==', 'people.cause_of_death', ['type.object.type'])]
          var_types: [{'people.cause_of_death'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.type fb:people.cause_of_death . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.type fb:people.cause_of_death . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Cerebral edema', 'Stroke'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 60: {
          [('Main', '==', 'm.06c97', ['government.us_vice_president.to_president']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.us_president'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.us_vice_president.to_president ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.us_vice_president.to_president ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Dwight D. Eisenhower'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 15 / 60: {
          [('Main', '==', 'm.06c97', ['government.politician.election_campaigns']), ('Type', '==', 'government.us_vice_presidential_campaign', ['type.object.type'])]
          var_types: [{'government.election_campaign', 'government.us_vice_presidential_campaign'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.type fb:government.us_vice_presidential_campaign . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c97 fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.type fb:government.us_vice_presidential_campaign . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 16 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 17 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 18 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 19 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 20 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 21 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Hillary Rodham Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 22 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 23 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 24 / 60: {
          [('Main', '==', 'm.0157m', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 25 / 60: {
          [('Main', '==', 'm.0157m', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 26 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.student']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 27 / 60: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 28 / 60: {
          [('Main', '==', 'm.0157m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 29 / 60: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 8
            Final Answer: {'George Washington', 'Franklin D. Roosevelt', 'Ronald Reagan', 'Eric S. Raymond', 'Abraham Lincoln', 'John F. Kennedy', 'George H. W. Bush', 'Robert McNamara'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 30 / 60: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.060c4'}
            Query return lines = 63
            Final Answer: {'Alan Rosenberg', 'Harry S. Truman', 'Woodrow Wilson', 'Richard Nixon', 'Charles O. Rossotti', 'Joseph Lovett', 'Roger Weisberg', 'Richard E. Berendzen', 'August Busch IV', 'Donald Olding Hebb', 'Michael Crawford', 'David Baltimore', 'George H. W. Bush', 'Robert Zoellick', 'Jonathan Miller', 'James Gustave Speth', 'John Wells', 'Edwin Catmull', 'Bob Barr', 'Don Blankenship', 'Paul Wolfowitz', 'Franklin D. Roosevelt', 'Ronald Reagan', 'Ellen Johnson Sirleaf', 'Susan L. Taylor', 'David Satcher', 'Van Jones', 'Donna Shalala', 'Henry Ford', 'August Busch III', 'Robert McNamara', 'Uli Hoeneß', 'Nicolas Sarkozy', 'Bill Gates', 'Herbert Hoover', 'Antonio M. Reid', 'Rick Howard', 'Oprah Winfrey', 'General Butt Naked', 'Karl Malden', 'Dana White', 'Mary Sue Coleman', 'Alan Kay', 'Cameron Mackintosh', 'Dwight D. Eisenhower', 'Theodore Roosevelt', 'David Hoberman', 'John H. Marmaduke', 'Gene Baur', 'Daniel Meyer', 'Timothy Geithner', 'Violeta Chamorro', 'Brian Mulroney', 'Bob Iger', 'Jimmy Carter', 'Rob Dyrdek', 'Gerald Ford', 'John F. Kennedy', 'Phil Knight', 'Michael Tiemann', 'Bill D. Moyers', 'Bill Clinton', 'William McKinley'}
            Answers = 63, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.057s]
          Answers = 63, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.057s]
        Checking schema 31 / 60: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.person']), ('Entity', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 32 / 60: {
          [('Main', '==', 'm.060c4', ['business.job_title.people_with_this_title', 'business.employment_tenure.person']), ('Entity', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.060c4 fb:business.job_title.people_with_this_title ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.person fb:m.06c97 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 33 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'people.person', 'government.us_vice_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 34 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 35 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 36 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 37 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'people.person', 'government.us_vice_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 38 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 39 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 40 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 2
            Final Answer: {'Pat Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 41 / 60: {
          [('Main', '==', 'm.06c97', ['government.politician.party', 'government.political_party_tenure.politician']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.political_party_tenure'}, {'government.us_vice_president', 'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 42 / 60: {
          [('Main', '==', 'm.06c97', ['government.politician.party', 'government.political_party_tenure.politician']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.political_party_tenure'}, {'government.us_president', 'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 43 / 60: {
          [('Main', '==', 'm.06c97', ['people.appointer.appointment_made', 'people.appointment.appointed_by']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.appointment'}, {'people.appointer', 'government.us_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 44 / 60: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.office_holder']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.us_vice_president', 'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'George H. W. Bush'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 45 / 60: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.office_holder']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.us_president', 'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'George H. W. Bush'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 46 / 60: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.office_holder']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.us_vice_president', 'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:25] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 47 / 60: {
          [('Main', '==', 'm.06c97', ['government.politician.government_positions_held', 'government.government_position_held.office_holder']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.us_president', 'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 48 / 60: {
          [('Main', '==', 'm.06c97', ['government.political_appointer.appointees', 'government.government_position_held.appointed_by']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.us_president', 'government.political_appointer'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 49 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'government.us_vice_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 50 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 51 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 52 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 53 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.education', 'education.education.student']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.person', 'government.us_vice_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 54 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.education', 'education.education.student']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 55 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.education', 'education.education.student']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 56 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 57 / 60: {
          [('Main', '==', 'm.06c97', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 58 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person']), ('Entity', '==', 'm.060c4', ['people.person.employment_history', 'business.employment_tenure.title']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 59 / 60: {
          [('Main', '==', 'm.06c97', ['people.person.employment_history', 'business.employment_tenure.person']), ('Entity', '==', 'm.060c4', ['people.person.employment_history', 'business.employment_tenure.title']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:26] Q_Schema Request: {
            WebQ_1595|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c97 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o1 fb:business.employment_tenure.title fb:m.060c4 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c97', 'm.060c4'}
            Query return lines = 1
            Final Answer: {'Richard Nixon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        36 / 60 typed schemas kept with ans_size > 0.
      } [0.825s]
      Typed level ended, resulting in 419 schemas.
    } [0.851s]
    Time level searching (total times = 0): {
      Current: 0 / 419
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.book_edition.publication_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.book_edition.publication_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwsentence.from', 'base.kwebbase.kwsentence.until'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [set(), set()]
      Current: 100 / 419
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
self.var_time_preds: [{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.restaurant_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.canoodled.date'}, set()]
self.var_time_preds: [{'base.popstra.fashion_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.religion_choice.start_date', 'base.popstra.religion_choice.end_date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.to', 'royalty.chivalric_order_membership.from'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.popstra.operation.date'}, set()]
self.var_time_preds: [{'base.popstra.support.start_date', 'base.popstra.support.end_date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.fashion_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.party_attendance_person.date'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.to', 'royalty.chivalric_order_membership.from'}, {'royalty.order_of_chivalry.date_last_awarded', 'royalty.order_of_chivalry.date_founded'}]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
self.var_time_preds: [{'base.popstra.public_insult.date'}, set()]
      Current: 200 / 419
self.var_time_preds: [{'base.popstra.public_insult.date'}, set()]
self.var_time_preds: [{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
self.var_time_preds: [{'base.popstra.operation.date'}, set()]
self.var_time_preds: [{'base.popstra.support.start_date', 'base.popstra.support.end_date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.restaurant_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.canoodled.date'}, set()]
self.var_time_preds: [{'base.popstra.party_attendance_person.date'}, {'base.popstra.party.date'}]
self.var_time_preds: [{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
self.var_time_preds: [{'base.popstra.religion_choice.start_date', 'base.popstra.religion_choice.end_date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'religion.religious_organization_leadership.start_date', 'religion.religious_organization_leadership.end_date'}, set()]
self.var_time_preds: [{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'religion.religious_organization_leadership.start_date', 'religion.religious_organization_leadership.end_date'}, set()]
self.var_time_preds: [{'religion.religious_organization_leadership.start_date', 'religion.religious_organization_leadership.end_date'}, set()]
self.var_time_preds: [{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, {'projects.project.planned_completion_date', 'projects.project.actual_completion_date', 'projects.project.start_date'}]
self.var_time_preds: [{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
self.var_time_preds: [{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'religion.religious_organization_leadership.start_date', 'religion.religious_organization_leadership.end_date'}, set()]
self.var_time_preds: [{'religion.religious_organization_leadership.start_date', 'religion.religious_organization_leadership.end_date'}, set()]
self.var_time_preds: [{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'organization.organization_committee_membership.to', 'organization.organization_committee_membership.from'}, {'organization.organization_committee.date_formed', 'organization.organization_committee.date_dissolved'}]
self.var_time_preds: [{'organization.organization_committee_membership.to', 'organization.organization_committee_membership.from'}, set()]
self.var_time_preds: [{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
self.var_time_preds: [{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.organization_committee_membership.to', 'organization.organization_committee_membership.from'}, set()]
self.var_time_preds: [{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
self.var_time_preds: [{'organization.organization_committee_membership.to', 'organization.organization_committee_membership.from'}, set()]
self.var_time_preds: [{'organization.organization_committee_membership.to', 'organization.organization_committee_membership.from'}, set()]
self.var_time_preds: [{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
      Current: 300 / 419
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
      Current: 400 / 419
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
      0 timed schemas retrieved from 419 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 419 schemas.
    } [0.009s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 419
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'music.recording.date'}]
[set()]
[set()]
[{'book.book_edition.publication_date'}]
[{'film.film.initial_release_date'}]
[{'media_common.quotation.date'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.book_edition.publication_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'media_common.quotation.date'}]
[set()]
[{'media_common.quotation.date'}]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'music.recording.date'}]
[set()]
[{'film.film.initial_release_date'}]
[{'media_common.quotation.date'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'base.kwebbase.kwsentence.from', 'base.kwebbase.kwsentence.until'}]
[set()]
[set()]
[{'media_common.quotation.date'}]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[set()]
[{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'media_common.quotation.date'}]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[set(), set()]
      Current: 100 / 419
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[set(), set()]
[set(), set()]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
[{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.restaurant_choice.date'}, set()]
[{'base.popstra.canoodled.date'}, set()]
[{'base.popstra.fashion_choice.date'}, set()]
[{'base.popstra.religion_choice.start_date', 'base.popstra.religion_choice.end_date'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[set(), set()]
[set(), set()]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'royalty.chivalric_order_membership.to', 'royalty.chivalric_order_membership.from'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.popstra.operation.date'}, set()]
[{'base.popstra.support.start_date', 'base.popstra.support.end_date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.fashion_choice.date'}, set()]
[{'base.popstra.party_attendance_person.date'}, set()]
[{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'royalty.chivalric_order_membership.to', 'royalty.chivalric_order_membership.from'}, {'royalty.order_of_chivalry.date_last_awarded', 'royalty.order_of_chivalry.date_founded'}]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
[{'base.popstra.public_insult.date'}, set()]
      Current: 200 / 419
[{'base.popstra.public_insult.date'}, set()]
[{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
[{'base.popstra.operation.date'}, set()]
[{'base.popstra.support.start_date', 'base.popstra.support.end_date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.restaurant_choice.date'}, set()]
[{'base.popstra.canoodled.date'}, set()]
[{'base.popstra.party_attendance_person.date'}, {'base.popstra.party.date'}]
[{'base.popstra.vacation_choice.start_date', 'base.popstra.vacation_choice.end_date'}, set()]
[{'base.popstra.religion_choice.start_date', 'base.popstra.religion_choice.end_date'}, set()]
[{'people.appointment.declared_on'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'religion.religious_organization_leadership.start_date', 'religion.religious_organization_leadership.end_date'}, set()]
[{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'religion.religious_organization_leadership.start_date', 'religion.religious_organization_leadership.end_date'}, set()]
[{'religion.religious_organization_leadership.start_date', 'religion.religious_organization_leadership.end_date'}, set()]
[{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, {'projects.project.planned_completion_date', 'projects.project.actual_completion_date', 'projects.project.start_date'}]
[{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
[{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
[set(), set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'religion.religious_organization_leadership.start_date', 'religion.religious_organization_leadership.end_date'}, set()]
[{'religion.religious_organization_leadership.start_date', 'religion.religious_organization_leadership.end_date'}, set()]
[{'projects.project_participation.from_date', 'projects.project_participation.to_date'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'organization.organization_committee_membership.to', 'organization.organization_committee_membership.from'}, {'organization.organization_committee.date_formed', 'organization.organization_committee.date_dissolved'}]
[{'organization.organization_committee_membership.to', 'organization.organization_committee_membership.from'}, set()]
[{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
[{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
[set(), set()]
[set(), set()]
[{'organization.organization_committee_membership.to', 'organization.organization_committee_membership.from'}, set()]
[{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
[{'organization.organization_committee_membership.to', 'organization.organization_committee_membership.from'}, set()]
[{'organization.organization_committee_membership.to', 'organization.organization_committee_membership.from'}, set()]
[{'book.editorial_tenure.to', 'book.editorial_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
      Current: 300 / 419
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[set(), set()]
[{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'people.appointment.declared_on'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[set(), set()]
[{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[set(), set()]
[set(), set()]
[{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'people.appointment.declared_on'}, set()]
[{'people.appointment.declared_on'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'people.person.date_of_birth'}]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
      Current: 400 / 419
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[{'government.political_party_tenure.from', 'government.political_party_tenure.to'}, set()]
[{'people.appointment.declared_on'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
      0 ordinal schemas retrieved from 419 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 419 schemas.
    } [0.009s]
    [2020-12-03 14:26:26] buffer saved.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 ?type2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.from ?o2 . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 ?type2 WHERE { fb:m.060c4 fb:organization.role.leaders ?o1 . ?o1 fb:organization.leadership.from ?o2 . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 ?type2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 ?type2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 ?type2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 ?type2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 ?type2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 ?type2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 ?type2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.from ?o2 . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 ?type2 WHERE { fb:m.060c4 fb:government.government_office_category.officeholders ?o1 . ?o1 fb:government.government_position_held.to ?o2 . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 500.
    419 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1595_schema].
  } [9m10.569s]
  Entering Q 1596 / 5810 [b'what job did martin luther king jr have?']: {
    Show 4 E + 10 T + 0 Tm + 0 Ord = 14 linkings: {
      #00 Entity: [1, 2) (job) == m.04115t2 (job) {'score': 6195.137567, 'source': 2.0}
      #01 Entity: [1, 2) (job) == m.06y3r (steve jobs) {'score': 2879.399372, 'source': 2.0}
      #02 Entity: [1, 2) (job) == m.0bs5zk (undeclared) {'score': 1399.349829, 'source': 2.0}
      #03 Entity: [3, 7) (martin luther king jr) == m.051cc (Martin_Luther_King%2c_Jr.) {'score': 23956.501331, 'source': 1.0}
      #04 Type: [1, 2) (job) == business.job_title (job title) {'sim': 0.809829}
      #05 Type: [0, 3) (what job did) == media_common.lost_work (lost work) {'sim': 0.770217}
      #06 Type: [1, 2) (job) == film.film_job (film job) {'sim': 0.73695}
      #07 Type: [0, 2) (what job) == fictional_universe.fictional_job_title (fictional job title) {'sim': 0.716347}
      #08 Type: [0, 2) (what job) == music.music_video_job (music video job) {'sim': 0.715892}
      #09 Type: [1, 3) (job did) == media_common.finished_work (finished work) {'sim': 0.704997}
      #10 Type: [0, 3) (what job did) == book.written_work (written work) {'sim': 0.682114}
      #11 Type: [0, 2) (what job) == media_common.creative_work (creative work) {'sim': 0.670505}
      #12 Type: [0, 3) (what job did) == book.cited_work (cited work) {'sim': 0.660996}
      #13 Type: [5, 6) (king) == royalty.kingdom (kingdom) {'sim': 0.660405}
    } [0.000s]
    14 link data save to file.
    Coarse level searching (total entities = 4): {
      [Len-1||F1/4] (2020-12-03 14:35:23) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.04115t2 ?p1 ?o1 . }
        [2020-12-03 14:35:23] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.04115t2 ?p1 ?o1 . }
          Query return lines = 8
        } [0.007s]
        Filt_Query_Ret = 2 / 8 ( 0.007s)
        [Len-1||F1/4||2/4-1] (2020-12-03 14:35:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 fb:m.051cc . }
          [2020-12-03 14:35:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 fb:m.051cc . }
            Query return lines = 0
          } [0.014s]
          Filt_Query_Ret = 0 / 0 ( 0.014s)
        } [0.014s]
      } [0.021s]
      [Len-1||F2/4] (2020-12-03 14:35:23) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.051cc ?p1 ?o1 . }
        [2020-12-03 14:35:23] SPARQL hit!
        Filt_Query_Ret = 37 / 56 ( 0.000s)
        [Len-1||F2/4||1/4-1] (2020-12-03 14:35:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 fb:m.04115t2 . }
          [2020-12-03 14:35:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 fb:m.04115t2 . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
        [Len-1||F2/4||3/4-1] (2020-12-03 14:35:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 fb:m.06y3r . }
          [2020-12-03 14:35:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 fb:m.06y3r . }
            Query return lines = 0
          } [0.029s]
          Filt_Query_Ret = 0 / 0 ( 0.029s)
        } [0.029s]
        [Len-1||F2/4||4/4-1] (2020-12-03 14:35:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 fb:m.0bs5zk . }
          [2020-12-03 14:35:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 fb:m.0bs5zk . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
      } [0.058s]
      [Len-1||F3/4] (2020-12-03 14:35:23) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06y3r ?p1 ?o1 . }
        [2020-12-03 14:35:23] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.06y3r ?p1 ?o1 . }
          Query return lines = 54
        } [0.007s]
        Filt_Query_Ret = 33 / 54 ( 0.007s)
        [Len-1||F3/4||2/4-1] (2020-12-03 14:35:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06y3r ?p1 ?o1 . ?o1 ?p2 fb:m.051cc . }
          [2020-12-03 14:35:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06y3r ?p1 ?o1 . ?o1 ?p2 fb:m.051cc . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.016s]
      } [0.023s]
      [Len-1||F4/4] (2020-12-03 14:35:23) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0bs5zk ?p1 ?o1 . }
        [2020-12-03 14:35:23] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0bs5zk ?p1 ?o1 . }
          Query return lines = 24
        } [0.009s]
        Filt_Query_Ret = 14 / 24 ( 0.009s)
        [Len-1||F4/4||2/4-1] (2020-12-03 14:35:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bs5zk ?p1 ?o1 . ?o1 ?p2 fb:m.051cc . }
          [2020-12-03 14:35:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bs5zk ?p1 ?o1 . ?o1 ?p2 fb:m.051cc . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
      } [0.027s]
      [Len-2||F1/4] (2020-12-03 14:35:23) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:35:23] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04115t2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 60
        } [0.019s]
        Filt_Query_Ret = 0 / 60 ( 0.019s)
      } [0.019s]
      [Len-2||F2/4] (2020-12-03 14:35:23) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:35:23] SPARQL hit!
        Filt_Query_Ret = 39 / 1075 ( 0.004s)
        [Len-2||F2/4||1/4-1] (2020-12-03 14:35:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04115t2 . }
          [2020-12-03 14:35:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04115t2 . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
        [Len-2||F2/4||1/4-2] (2020-12-03 14:35:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04115t2 . }
          [2020-12-03 14:35:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04115t2 . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-2||F2/4||3/4-1] (2020-12-03 14:35:23) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06y3r . }
          [2020-12-03 14:35:23] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06y3r . }
            Query return lines = 0
          } [0.026s]
          Filt_Query_Ret = 0 / 0 ( 0.026s)
        } [0.026s]
        [Len-2||F2/4||3/4-2] (2020-12-03 14:35:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06y3r . }
          [2020-12-03 14:35:24] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06y3r . }
            Query return lines = 1
          } [0.136s]
          Filt_Query_Ret = 0 / 1 ( 0.136s)
        } [0.136s]
        [Len-2||F2/4||4/4-1] (2020-12-03 14:35:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0bs5zk . }
          [2020-12-03 14:35:24] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0bs5zk . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-2||F2/4||4/4-2] (2020-12-03 14:35:24) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0bs5zk . }
          [2020-12-03 14:35:24] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.051cc ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0bs5zk . }
            Query return lines = 0
          } [1.109s]
          Filt_Query_Ret = 0 / 0 ( 1.109s)
        } [1.109s]
      } [1.313s]
      [Len-2||F3/4] (2020-12-03 14:35:25) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06y3r ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:35:25] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06y3r ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 1103
        } [0.048s]
        Filt_Query_Ret = 51 / 1103 ( 0.052s)
        [Len-2||F3/4||2/4-1] (2020-12-03 14:35:25) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06y3r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.051cc . }
          [2020-12-03 14:35:25] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06y3r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.051cc . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
        [Len-2||F3/4||2/4-2] (2020-12-03 14:35:25) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06y3r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.051cc . }
          [2020-12-03 14:35:25] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06y3r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.051cc . }
            Query return lines = 2
          } [0.820s]
          Filt_Query_Ret = 0 / 2 ( 0.820s)
        } [0.820s]
      } [0.889s]
      [Len-2||F4/4] (2020-12-03 14:35:26) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bs5zk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:35:26] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0bs5zk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 425
        } [0.048s]
        Filt_Query_Ret = 7 / 425 ( 0.050s)
        [Len-2||F4/4||2/4-1] (2020-12-03 14:35:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0bs5zk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.051cc . }
          [2020-12-03 14:35:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0bs5zk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.051cc . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F4/4||2/4-2] (2020-12-03 14:35:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0bs5zk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.051cc . }
          [2020-12-03 14:35:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0bs5zk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.051cc . }
            Query return lines = 2
          } [1.424s]
          Filt_Query_Ret = 0 / 2 ( 1.424s)
        } [1.424s]
      } [1.481s]
      183 coarse schemas retrieved from scratch.
      Calculating F1 for 183 coarse schemas: {
        Current: 0 / 183
        Checking schema 0 / 183: {
          [('Main', '==', 'm.04115t2', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04115t2 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04115t2 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04115t2'}
            Query return lines = 10
            Final Answer: {'The only job where you start at the top, is digging a hole.', 'The biggest mistake that you can make is to believe that you are working for somebody else. Job security is gone. The driving force of a career must come from the individual. Remember: Jobs are owned by the company, you own your career!', 'The best way to appreciate your job is to imagine yourself without one.', "I've met a few people who had to change their jobs in order to change their lives, but I've met many more people who merely had to change their motive to service in order to change their lives.", 'Work harder on yourself than you do on your job.', "There's no scarcity of opportunity to make a living at what you love. There is only a scarcity of resolve to make it happen.", 'Our job is not to set things right but to see them right.', 'There is no indispensable man.', "The trouble with the rat race is that even if you win you're still a rat.", "My job is never work -- the only time it seems like work is when I'd rather be doing something else."}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 1 / 183: {
          [('Main', '==', 'm.04115t2', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04115t2 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04115t2 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04115t2'}
            Query return lines = 1
            Final Answer: {'The Working Life: The Promise and Betrayal of Modern Work'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 2 / 183: {
          [('Main', '==', 'm.051cc', ['user.alexander.misc.murdered_person.date_murdered'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.051cc fb:user.alexander.misc.murdered_person.date_murdered ?o1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.051cc fb:user.alexander.misc.murdered_person.date_murdered ?o1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'1968'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 3 / 183: {
          [('Main', '==', 'm.051cc', ['user.alexander.misc.murdered_person.place_murdered'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:user.alexander.misc.murdered_person.place_murdered ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:user.alexander.misc.murdered_person.place_murdered ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Lorraine Motel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 4 / 183: {
          [('Main', '==', 'm.051cc', ['book.author.series_written_or_contributed_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:book.author.series_written_or_contributed_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:book.author.series_written_or_contributed_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'The Papers of Martin Luther King, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 5 / 183: {
          [('Main', '==', 'm.051cc', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 6 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.051cc fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.051cc fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'1929'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 7 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 8 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 2
            Final Answer: {'African American', 'American'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 9 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 2
            Final Answer: {'Martin Luther King, Sr.', 'Alberta Williams King'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 10 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Baptists'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 11 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.051cc fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.051cc fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'1.69'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 12 / 183: {
          [('Main', '==', 'm.051cc', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Memphis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 13 / 183: {
          [('Main', '==', 'm.051cc', ['people.deceased_person.place_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Jr., National Historic Site'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 14 / 183: {
          [('Main', '==', 'm.051cc', ['base.activism.activist.area_of_activism'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 7
            Final Answer: {'Humanitarian', 'Civil and political rights', 'Anti-racism', 'Black Liberation', "African Americans' rights", 'Nonviolence', 'Anti-Apartheid'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 15 / 183: {
          [('Main', '==', 'm.051cc', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 6
            Final Answer: {'Freedom Dub', 'I Have a Dream', 'Guerilla Warfare (snippet)', 'Life', 'Birmingham 1963: Keep Moving'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 16 / 183: {
          [('Main', '==', 'm.051cc', ['symbols.namesake.named_after'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:symbols.namesake.named_after ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:symbols.namesake.named_after ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Sr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 17 / 183: {
          [('Main', '==', 'm.051cc', ['user.alexander.misc.murdered_person.murdered_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:user.alexander.misc.murdered_person.murdered_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:user.alexander.misc.murdered_person.murdered_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'James Earl Ray'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 18 / 183: {
          [('Main', '==', 'm.051cc', ['influence.influence_node.influenced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 11
            Final Answer: {'Jesus Christ', 'Mahatma Gandhi', 'Theodore Parker', 'Benjamin Mays', 'Leo Tolstoy', 'M. Gandhi', 'Abraham Lincoln', 'Bayard Rustin', 'Henry David Thoreau', 'Onwutalobi Anthony-Claret', 'Hosea Williams'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 19 / 183: {
          [('Main', '==', 'm.051cc', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 27
            Final Answer: {'Martin Luther King Jr. Middle School', 'Martin Luther King, Jr. Memorial', 'Dr. Martin Luther King, Jr. Library', 'Martin Luther King, Jr. Academy', 'Martin Luther King III', 'Dr. Martin Luther King, Jr. Academic Middle School', 'Martin Luther King Bridge', 'Martin Luther King, Jr. High School', 'Martin Luther King Jr. Shoreline', 'Martin Luther King Jr. East Busway', 'Martin Luther King Jr. Memorial Bridge', 'Martin Luther King, Jr. Plaza', 'Martin Luther King Magnet at Pearl High School', 'Martin Luther King High School', 'Martin Luther King, Jr. Educational Campus', 'Martin Luther King Jr. Freeway', 'Martin Luther King Middle School', 'Martin Luther King, Jr., National Historic Site', 'Martin Luther King, Jr. Day', 'Martin Luther King, Jr. Multi-Service Ambulatory Care Center', 'Martin Luther King Junior Laboratory School', 'Martin Luther King Jr. Memorial Library'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 20 / 183: {
          [('Main', '==', 'm.051cc', ['base.schemastaging.context_name.nickname'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 21 / 183: {
          [('Main', '==', 'm.051cc', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 3
            Final Answer: {'Our Friend, Martin', 'The Boy King', 'King: A Filmed Record... Montgomery to Memphis'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 22 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 73
            Final Answer: {'Darkness can not drive out darkness; only light can do that. Hate cannot drive out hate; only love can do that.', "I have almost reached the regrettable conclusion that the Negro's great stumbling block in his stride toward freedom is not the White Citizen's Councilor or the Ku Klux Klanner, but the white moderate.", 'Shallow understanding from people of good will is more frustrating than absolute misunderstanding from people of ill-will.', "If a man hasn't discovered something that he will die for, he isn't fit to live.", "Whatever your life's work is, do it well. A man should do his job so well that the living, the dead, and the unborn could do it no better.", 'We must build dikes of courage to hold back the flood of fear.', 'I am coming to feel that the people of ill will have used time much more effectively than the people of goodwill. We will have to repent in this generation not merely for the vitriolic words and actions of the bad people, but for the appalling silence of the good people. We must come to see that human progress never rolls in on wheels of inevitability. It comes through the tireless efforts and persistent work of men willing to be co-workers with God, and without this hard work time itself becomes an ally of the forces of social stagnation. We must use time creatively, and forever realize that the time is always ripe to do right. Now is the time to make real the promise of democracy, and transform our pending national elegy into a creative psalm of brotherhood. Now is the time to lift our national policy from the quicksand of racial injustice to the solid rock of human dignity.', 'When you are right you cannot be too radical; when you are wrong, you cannot be too conservative.', 'Yes, I see the Church as the body of Christ. But, oh! How we have blemished and scarred that body through social neglect and through fear of being nonconformists.', 'Property is intended to serve life, and no matter how much we surround it with rights and respect, it has no personal being. It is part of the earth man walks on. It is not man.', 'Law and order exist for the purpose of establishing justice and when they fail in this purpose they become the dangerously structured dams that block the flow of social progress.', 'Mankind must evolve for all human conflict a method which rejects revenge, aggression, and retaliation. The foundation of such a method is love.', 'War is a poor chisel to carve out tomorrow.', "Everybody can be great... because anybody can serve. You don't have to have a college degree to serve. You don't have to make your subject and verb agree to serve. you only need a heart full of grace. a soul generated by love.", 'We have genuflected before the god of science only to find that it has given us the atomic bomb, producing fears and anxieties that science can never mitigate.', 'I have a dream that one day this nation will rise up and live out the true meaning of its creed: We hold these truths to be self-evident that all men are created equal. I have a dream that my four little children will one day live in a nation where they will not be judged by the color of their skin but by the content of their character. I have a dream today.', 'The hottest place in Hell is reserved for those who remain neutral in times of great moral conflict.', 'We must accept finite disappointment, but never lose infinite hope.', "I want to be the white man's brother, not his brother-in-law.", 'I have a dream that my four little children will one day live in a nation when they will not be judged by the color of their skin, but by the content of their character.', 'At the center of non-violence stands the principle of love.', 'Occasionally in life there are those moments of unutterable fulfillment which cannot be completely explained by those symbols called words. Their meaning can only be articulated by the inaudible language of the heart. Such is the moment I am presently experiencing. I experience this high and joyous moment not for myself alone but for those devotees of nonviolence who have moved so courageously against the ramparts of racial injustice and who in the process have acquired a new estimate of their own human worth. Many of them are young and cultured. Others are middle aged and middle class. The majority are poor and untutored. But they are all united in the quiet conviction that it is better to suffer in dignity than to accept segregation in humiliation. These are the real heroes of the freedom struggle: they are the noble people for whom I accept the Nobel Peace Prize.', 'It is my hope that as the Negro plunges deeper into the quest for freedom and justice he will plunge even deeper into the philosophy of non-violence. The Negro all over the South must come to the point that he can say to his white brother: We will match your capacity to inflict suffering with our capacity to endure suffering. We will meet your physical force with soul force. We will not hate you, but we will not obey your evil laws. We will soon wear you down by pure capacity to suffer.', 'The church must be reminded that it is not the master or the servant of the state, but rather the conscience of the state.', "Life's most persistent and urgent question is: What are you doing for others? Living is a form of not being sure, not knowing what next or how. The moment you know how, you begin to die a little.", "When we let freedom ring, when we let it ring from every village and every hamlet, from every state and every city, we will be able to speed up that day when all of God's children, black men and white men, Jews and Gentiles, Protestants and Catholics, will be able to join hands and sing in the words of that old Negro spiritual, Free at last! Free at last! Thank God Almighty, we are free at last!", 'I believe that unarmed truth and unconditional love will have the final word in reality. That is why right, temporarily defeated, is stronger than evil triumphant.', 'Nothing pains some people more than having to think.', 'One who breaks an unjust law that conscience tells him is unjust, and who willingly accepts the penalty of imprisonment in order to arouse the conscience of the community over its injustice, is in reality expressing the highest respect for law.', 'Peace is not merely a distant goal that we seek, but a means by which we arrive at that goal.', 'The ultimate weakness of violence is that it is a descending spiral, begetting the very thing it seeks to destroy. Instead of diminishing evil, it multiplies it. Through violence you may murder the liar, but you cannot murder the lie, nor establish the truth. Through violence you may murder the hater, but you do not murder hate. In fact, violence merely increases hate. So it goes. Returning violence for violence multiplies violence, adding deeper darkness to a night already devoid of stars. Darkness cannot drive out darkness; only light can do that. Hate cannot drive out hate: only love can do that.', 'The past is prophetic in that it asserts loudly that wars are poor chisels for carving out peaceful tomorrows.', 'The time is always right to do what is right.', 'Morality cannot be legislated, but behavior can be regulated. Judicial decrees may not change the heart, but they can restrain the heartless.', 'Free at last, free at lastThank God almightyWe are free at last', 'I have decided to stick with love. Hate is too great a burden to bear.', 'I have a dream that one day on the red hills of Georgia the sons of former slaves and the sons of former slave owners will be able to sit down together at the table of brotherhood.', "Pity may represent little more than the impersonal concern which prompts the mailing of a check, but true sympathy is the personal concern which demands the giving of one's soul.", 'He who passively accepts evil is as much involved in it as he who helps to perpetrate it.', 'We must combine the toughness of the serpent with the softness of the dove, a tough mind and a tender heart.', 'We must learn to live together as brothers or perish together as fools.', 'Freedom is never voluntarily given by the oppressor; it must be demanded by the oppressed.', 'The ultimate measure of a man is not where he stands in moments of comfort and convenience, but where he stands at times of challenge and controversy.', 'We must use time creatively -- and forever realize that the time is always hope to do great things.', 'Hatred paralyzes life; love releases it. Hatred confuses life; love harmonizes it. Hatred darkens life; love illuminates it.', 'No, no, we are not satisfied, and we will not be satisfied until justice rolls down like waters and righteousness like a mighty stream.', 'All progress is precarious, and the solution of one problem brings us face to face with another problem.', 'Let us therefore continue our triumphal march to the realization of the American dream. for all of us today, the battle is in our hands. The road ahead is not altogether a smooth one. There are no broad highways that lead us easily and inevitably to quick solutions. We are still in for the season of suffering. How long? Not long. Because no lie can live forever. our God is marching on.', 'I submit that an individual who breaks the law that conscience tells him is unjust and willingly accepts the penalty by staying in jail to arouse the conscience of the community over its injustice, is in reality expressing the very highest respect for law.', "The quality, not the longevity, of one's life is what is important.", 'I have a dream that one day this nation will rise up and live out the true meaning of its creed; We hold these truths to be self-evident: that all men are created equal', 'Injustice anywhere is a threat to justice everywhere.', 'There is nothing more tragic than to find an individual bogged down in the length of life, devoid of breadth.', 'If a man is called to be a streetsweeper, he should sweep streets even as Michelangelo painted, or Beethoven composed music, or Shakespeare wrote poetry. He should sweep streets so well that all the hosts of heaven and earth will pause to say, here lived a great streetsweeper who did his job well.', 'We who in engage in nonviolent direct action are not the creators of tension. We merely bring to the surface the hidden tension that is already alive.', 'I look to a day when people will not be judged by the color of their skin, but by the content of their character.', 'Nothing in the world is more dangerous than sincere ignorance and conscientious stupidity.', 'That old law about an eye for an eye leaves everybody blind. The time is always right to do the right thing.', 'The question is not whether we will be extremists, but what kind of extremists we will be.', 'There can be no deep disappointment where there is not deep love.', 'I feel that we will continue to have a non-violent movement, and we will continue to find the vast majority of Negroes committed to non-violence, at least as the best tactical approach and from a pragmatic point of view as the best strategy in dealing with the problem of racial injustice. Realism impels me to admit, however, that when there is justice and the pursuit of justice, violence appears, and where there is injustice and frustration, the potentialities for violence are greater, and I would like to strongly stress the point that the more we can achieve victories through non-violence, the more it will be possible to keep the non-violent discipline at the center of the movement. But the more we find individuals facing conditions of frustration, conditions of disappointment and seething despair as a result of the slow pace of things and the failure to change conditions, the more it will be possible for the apostles of violence to interfere.', "It may be true that the law cannot make a man love me, but it can keep him from lynching me, and I think that's pretty important.", 'Riots are the voices of the unheard.', 'Like anybody, I would like to live a long life. Longevity has its place. But Im not concerned about that now. I just want to do Gods will. And Hes allowed me to go up to the mountain. And Ive looked over, and Ive seen the promised land. I may not get there with you, but I want you to know tonight that we as a people will get to the promised land.', 'We will have to repent in this generation not merely for the hateful words and actions of the bad people but for the appalling silence of the good people.', "We may have all come on different ships, but we're in the same boat now.", "I just want to do God's will. And He's allowed me to go up to the mountain. And I've looked over, and I've seen the Promised Land.", 'A riot is the language of the unheard.', 'Occasionally in life there are those moments of unutterable fulfillment which cannot be completely explained by those symbols called words. Their meanings can only be articulated by the inaudible language of the heart.', 'In this Revolution no plans have been written for retreat.', 'The Negro needs the white man to free him from his fears. The white man needs the Negro to free him from his guilt.', 'The more there are riots, the more repressive actin will take place, and the more we face the danger of a right-wing takeover and eventually a fascist society.', 'Now, I say to you today my friends, even though we face the difficulties of today and tomorrow, I still have a dream. It is a dream deeply rooted in the American dream. I have a dream that one day this nation will rise up and live out the true meaning of its creed: -- we hold these truths to be self-evident, that all men are created equal.'}
            Answers = 73, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 73, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 23 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 4
            Final Answer: {'Dexter Scott King', 'Martin Luther King III', 'Bernice King', 'Yolanda King'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 24 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.051cc fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.051cc fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'69'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 25 / 183: {
          [('Main', '==', 'm.051cc', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Assassination by firearm'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 26 / 183: {
          [('Main', '==', 'm.051cc', ['influence.influence_node.influenced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 5
            Final Answer: {'Mose Kalev', 'Cornel West', 'Felix Dodds', 'Bell Hooks', 'Albert Lutuli'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 27 / 183: {
          [('Main', '==', 'm.051cc', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 22
            Final Answer: {'The Papers of Martin Luther King, Jr., Volume II: Rediscovering Precious Values, July 1951-November 1955', 'Strength to Love', 'A Testament of Hope : The Essential Writings and Speeches of Martin Luther King, Jr.', 'Letter from Birmingham Jail', 'Daddy King', 'The Trumpet of Conscience', 'The Papers of Martin Luther King, Jr., Volume V: Threshold of a New Decade, January 1959-December 1960', 'Words of Martin Luther King, Jr', 'The Martin Luther King, Jr. Companion', "Teacher's Booklet. From Montgomery to Memphis", "Why We Can't Wait", 'The Papers of Martin Luther King, Jr., Volume IV: Symbol of the Movement, January 1957-December 1958', 'The Papers of Martin Luther King, Jr., Volume VI: Advocate of the Social Gospel, September 1948 – March 1963', 'The Papers of Martin Luther King, Jr., Volume III: Birth of a New Age, December 1955-December 1956', 'Drum Major Instinct Sermon', 'A Knock at Midnight', 'The Measure of a Man', 'I have a dream', 'The Papers of Martin Luther King, Jr., Volume I: Called to Serve, January 1929-June 1951', 'Stride toward freedom; the Montgomery story', 'Where Do We Go from Here: Chaos or Community?'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 28 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:27] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 3
            Final Answer: {'Pastor', 'Writer', 'Preacher'}
            Answers = 3, P = 1.000000, R = 0.750000, F1 = 0.857143
          } [0.021s]
          Answers = 3, P = 1.000000, R = 0.750000, F1 = 0.857143
        } [0.021s]
        Checking schema 29 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 30 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Atlanta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.042s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.042s]
        Checking schema 31 / 183: {
          [('Main', '==', 'm.051cc', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.051cc fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.051cc fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'1968'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 32 / 183: {
          [('Main', '==', 'm.051cc', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 6
            Final Answer: {'Pillar of Fire: America in the King Years, 1963-1965', 'The Papers of Martin Luther King, Jr., Volume VI: Advocate of the Social Gospel, September 1948 – March 1963', "Countdown of 10 Amazing Moments from the Year 2011: No. 9 Belafonte's New Song", 'Countdown of 10 Amazing Moments from the Year 2011: No. 4 the Martin Luther King Jr. Memorial', 'America in the King Years', 'Notebook on Black History Month 2012 (part 4) The Black Power Mixtape 1967-1975'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 33 / 183: {
          [('Main', '==', 'm.051cc', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 2
            Final Answer: {'Montgomery Improvement Association', 'Southern Christian Leadership Conference'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 34 / 183: {
          [('Main', '==', 'm.051cc', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 2
            Final Answer: {'Professor X', 'Martin Luther King, Jr.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 35 / 183: {
          [('Main', '==', 'm.051cc', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 36 / 183: {
          [('Main', '==', 'm.051cc', ['base.crime.crime_victim.crime_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:base.crime.crime_victim.crime_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:base.crime.crime_victim.crime_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Assassination'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 37 / 183: {
          [('Main', '==', 'm.051cc', ['user.jschell.default_domain.orator.speech_given'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:user.jschell.default_domain.orator.speech_given ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:user.jschell.default_domain.orator.speech_given ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'I Have a Dream'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 38 / 183: {
          [('Main', '==', 'm.051cc', ['base.fight.protester.involved_in_protest'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:base.fight.protester.involved_in_protest ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:base.fight.protester.involved_in_protest ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'March on Washington for Jobs and Freedom'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 39 / 183: {
          [('Main', '==', 'm.06y3r', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 40 / 183: {
          [('Main', '==', 'm.06y3r', ['user.ngerakines.social_software.twitter_user.twitter_username'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:user.ngerakines.social_software.twitter_user.twitter_username ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:user.ngerakines.social_software.twitter_user.twitter_username ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 41 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06y3r fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.06y3r fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'1955'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 42 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 43 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'Syrian American', 'Arab American', 'German American', 'Caucasian race'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 44 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'Clara Jobs', 'Abdulfattah John Jandali', 'Paul Jobs', 'Joanne Carole Schieble'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 45 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'Zen', 'Atheism', 'Buddhism', 'Lutheranism'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 46 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06y3r fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.06y3r fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'1.88'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 47 / 183: {
          [('Main', '==', 'm.06y3r', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Palo Alto'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 48 / 183: {
          [('Main', '==', 'm.06y3r', ['people.deceased_person.place_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Alta Mesa Memorial Park'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 49 / 183: {
          [('Main', '==', 'm.06y3r', ['law.inventor.inventions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:law.inventor.inventions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:law.inventor.inventions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'Macintosh', 'iPad', 'iPhone', 'iPod'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 50 / 183: {
          [('Main', '==', 'm.06y3r', ['base.eating.practicer_of_diet.diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:base.eating.practicer_of_diet.diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:base.eating.practicer_of_diet.diet ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Vegetarianism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 51 / 183: {
          [('Main', '==', 'm.06y3r', ['film.producer.films_executive_produced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:film.producer.films_executive_produced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:film.producer.films_executive_produced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Toy Story'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 52 / 183: {
          [('Main', '==', 'm.06y3r', ['medicine.notable_person_with_medical_condition.condition'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:medicine.notable_person_with_medical_condition.condition ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:medicine.notable_person_with_medical_condition.condition ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Pancreatic cancer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 53 / 183: {
          [('Main', '==', 'm.06y3r', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 3
            Final Answer: {'Steve Jobs: Billion Dollar Hippy', 'Jobs', 'Pirates of Silicon Valley'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 54 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 6
            Final Answer: {'Design', 'Real artists ship.', 'I want to put a ding in the universe.', 'Oh, and one more thing....', 'When you’re young, you look at television and think, There’s a conspiracy. The networks have conspired to dumb us down. But when you get a little older, you realize that’s not true. The networks are in business to give people exactly what they want. That’s a far more depressing thought. Conspiracy is optimistic! You can shoot the bastards!', 'Most people make the mistake of thinking design is what it looks like. People think it’s this veneer — that the designers are handed this box and told, ‘Make it look good!’ That’s not what we think design is. It’s not just what it looks like and feels like. Design is how it works.'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 55 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'Erin Siena Jobs', 'Reed Jobs', 'Eve Jobs', 'Lisa Brennan-Jobs'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 56 / 183: {
          [('Main', '==', 'm.06y3r', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Insulinoma'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 57 / 183: {
          [('Main', '==', 'm.06y3r', ['tv.tv_subject.tv_episodes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:tv.tv_subject.tv_episodes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:tv.tv_subject.tv_episodes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Steve Jobs: Billion Dollar Hippy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 58 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'Designer', 'Inventor', 'Entrepreneur', 'Businessperson'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 59 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 60 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'San Francisco'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 61 / 183: {
          [('Main', '==', 'm.06y3r', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06y3r fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.06y3r fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'2011'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 62 / 183: {
          [('Main', '==', 'm.06y3r', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 2
            Final Answer: {'The Second Coming of Steve Jobs', 'Options: The Secret Life of Steve Jobs'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 63 / 183: {
          [('Main', '==', 'm.06y3r', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 5
            Final Answer: {'Homebrew Computer Club', 'Apple Inc.', 'Pixar', 'NeXT', 'Apple Store'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 64 / 183: {
          [('Main', '==', 'm.06y3r', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 2
            Final Answer: {'Steve Jobs', 'Fake Steve Jobs'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 65 / 183: {
          [('Main', '==', 'm.06y3r', ['computer.computer_designer.computers_designed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:computer.computer_designer.computers_designed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:computer.computer_designer.computers_designed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'Macintosh', 'NeXT Computer', 'Macintosh 128K', 'iMac'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 66 / 183: {
          [('Main', '==', 'm.06y3r', ['food.diet_follower.follows_diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Vegetarian food'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 67 / 183: {
          [('Main', '==', 'm.06y3r', ['base.qualia.recreational_drug_user.drug_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Lysergic acid diethylamide'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 68 / 183: {
          [('Main', '==', 'm.06y3r', ['user.mheller.default_domain.adopted_child.adoptive_parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:user.mheller.default_domain.adopted_child.adoptive_parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:user.mheller.default_domain.adopted_child.adoptive_parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 2
            Final Answer: {'Paul Jobs', 'Clara Jobs'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 69 / 183: {
          [('Main', '==', 'm.06y3r', ['user.mdaconta.human_resources.employee.employedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:user.mdaconta.human_resources.employee.employedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:user.mdaconta.human_resources.employee.employedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Apple Inc.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 70 / 183: {
          [('Main', '==', 'm.06y3r', ['user.mdaconta.human_resources.employee.title'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:user.mdaconta.human_resources.employee.title ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:user.mdaconta.human_resources.employee.title ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 71 / 183: {
          [('Main', '==', 'm.06y3r', ['user.mdaconta.human_resources.employee.is_a_supervisor'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:user.mdaconta.human_resources.employee.is_a_supervisor ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:user.mdaconta.human_resources.employee.is_a_supervisor ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 72 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.country_of_origin'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 73 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.air_date_of_first_episode'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:tv.tv_program.air_date_of_first_episode ?o1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:tv.tv_program.air_date_of_first_episode ?o1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'2001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 74 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.seasons'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.seasons ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.seasons ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 2
            Final Answer: {'Undeclared - Season 1', 'Undeclared - Season 0'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 75 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 4
            Final Answer: {'Comedy', 'Comedy film', 'Sitcom', 'Comedy-drama'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 76 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.air_date_of_final_episode'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:tv.tv_program.air_date_of_final_episode ?o1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:tv.tv_program.air_date_of_final_episode ?o1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'2002'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 77 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.number_of_seasons'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:tv.tv_program.number_of_seasons ?o1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:tv.tv_program.number_of_seasons ?o1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 78 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.episodes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.episodes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.episodes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 26
            Final Answer: {'Eric Visits', "Eric's POV", 'Pilot', 'Prototype', 'Addicts', 'The Assistant', 'So You Have a Boyfriend', 'Truth or Dare', 'Hell Week (2)', 'Rush and Pledge (1)', 'The Day After', "Parents' Weekend", 'God Visits', 'Oh, So You Have a Boyfriend?', 'Eric Visits Again', 'Oh, So You Have a Boyfriend', 'Sick in the Head', 'Hal and Hillary', 'Jobs, Jobs, Jobs', 'Rush and Pledge', 'Full Bluntal Nugety', 'The Perfect Date', 'Hell Week'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 79 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.currently_in_production'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.currently_in_production ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.currently_in_production ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 80 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.program_creator'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.program_creator ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.program_creator ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'Judd Apatow'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 81 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.episode_running_time'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:tv.tv_program.episode_running_time ?o1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:tv.tv_program.episode_running_time ?o1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 2
            Final Answer: {'30', '22'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 82 / 183: {
          [('Main', '==', 'm.0bs5zk', ['media_common.netflix_title.netflix_genres'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:media_common.netflix_title.netflix_genres ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:media_common.netflix_title.netflix_genres ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 5
            Final Answer: {'TV Sitcoms', 'TV Comedies', 'Television', 'Sitcoms', 'TV Shows'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 83 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.number_of_episodes'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:tv.tv_program.number_of_episodes ?o1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:tv.tv_program.number_of_episodes ?o1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'17'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 84 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.languages'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.languages ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0bs5zk fb:tv.tv_program.languages ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 85 / 183: {
          [('Main', '==', 'm.0bs5zk', ['user.robert.default_domain.rated_tv_program.ew_rating'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:user.robert.default_domain.rated_tv_program.ew_rating ?o1 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 WHERE { fb:m.0bs5zk fb:user.robert.default_domain.rated_tv_program.ew_rating ?o1 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'85'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 86 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 3
            Final Answer: {'Bachelor of Arts', 'PhD', 'Bachelor of Divinity'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 87 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 3
            Final Answer: {'1948', '1951', '1955'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 88 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 89 / 183: {
          [('Main', '==', 'm.051cc', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Grammy Award for Best Spoken Word Album'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 90 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 3
            Final Answer: {'Alfred Daniel Williams King', 'Christine King Farris'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 91 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 2
            Final Answer: {'Coretta Scott King'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 92 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Heiberger'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 93 / 183: {
          [('Main', '==', 'm.051cc', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 2
            Final Answer: {'Archive Footage', 'Him/Herself'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 94 / 183: {
          [('Main', '==', 'm.051cc', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 8
            Final Answer: {'1963', '1964', '1959', '1957', '1970', '1977', '2004', '1966'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 95 / 183: {
          [('Main', '==', 'm.051cc', ['award.award_winner.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 96 / 183: {
          [('Main', '==', 'm.051cc', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 2
            Final Answer: {'Why I Oppose the War in Vietnam', 'Stride toward freedom; the Montgomery story'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 97 / 183: {
          [('Main', '==', 'm.051cc', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.speaker_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 98 / 183: {
          [('Main', '==', 'm.051cc', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.speech_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speech_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speech_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Racism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 99 / 183: {
          [('Main', '==', 'm.051cc', ['base.nobelprizes.nobel_prize_winner.nobel_honor', 'base.nobelprizes.nobel_honor.nobel_prize_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:base.nobelprizes.nobel_prize_winner.nobel_honor ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.nobel_prize_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:base.nobelprizes.nobel_prize_winner.nobel_honor ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.nobel_prize_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Current: 100 / 183
        Checking schema 100 / 183: {
          [('Main', '==', 'm.051cc', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Life'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 101 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Sociology'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 102 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:28] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Atlanta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 103 / 183: {
          [('Main', '==', 'm.051cc', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Why I Oppose the War in Vietnam'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 104 / 183: {
          [('Main', '==', 'm.051cc', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'1970'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 105 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'1953'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 106 / 183: {
          [('Main', '==', 'm.051cc', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 31
            Final Answer: {'Assassinations That Changed the World', 'Stills of the Movement: The Civil Rights Photojournalism of Flip Schulke', '2012: Time for Change', 'Blue Eyed', 'The Greatest Speeches of All Time: Vol. 2', 'In Remembrance of Martin', 'King: Man of Peace in a Time of War', 'Dr. Martin Luther King, Jr.: A Historical Perspective', 'The Black Power Mixtape 1967-1975', 'Mike Douglas: Moments and Memories', 'King Kennedy', 'We Shall Not Be Moved', 'Hair: Let the Sun Shine In', 'I Am Curious (Yellow)', 'Arthur Ashe: Citizen of the World', 'Martin Luther King, Jr: I Have a Dream', 'Precious: Based on the Novel Push by Sapphire', 'Been to the Mountaintop: Martin Luther King Jr.', 'Tupac Shakur: Thug Angel: The Life of an Outlaw', 'Gonzo: The Life and Work of Dr. Hunter S. Thompson', 'The Greatest Speeches of All Time: Vol. 1', 'Free at Last: Civil Rights Heroes', 'Salute', 'The March', 'Mighty Times: The Legacy of Rosa Parks', 'Imaginary Witness: Hollywood and the Holocaust', 'Brother Outsider: The Life of Bayard Rustin', 'Citizen King: American Experience', '30 for 30:  The Best That Never Was', 'Facing Ali', 'Capitalism: A Love Story'}
            Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 107 / 183: {
          [('Main', '==', 'm.051cc', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 108 / 183: {
          [('Main', '==', 'm.051cc', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'1971 Grammy Awards'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 109 / 183: {
          [('Main', '==', 'm.051cc', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.presented_work'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 3
            Final Answer: {"I've Been to the Mountaintop", 'I Have a Dream', 'How Long, Not Long'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 110 / 183: {
          [('Main', '==', 'm.051cc', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'March on Washington for Jobs and Freedom'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 111 / 183: {
          [('Main', '==', 'm.051cc', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 112 / 183: {
          [('Main', '==', 'm.051cc', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 2
            Final Answer: {'Archive Footage', 'Him/Herself'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 113 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 4
            Final Answer: {'Washington High School', 'Boston University', 'Crozer Theological Seminary', 'Morehouse College'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 114 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 115 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 2
            Final Answer: {'1954', '1948'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 116 / 183: {
          [('Main', '==', 'm.051cc', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 117 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'1968'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 118 / 183: {
          [('Main', '==', 'm.051cc', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 119 / 183: {
          [('Main', '==', 'm.051cc', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Martin Luther King, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 120 / 183: {
          [('Main', '==', 'm.051cc', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 9
            Final Answer: {'Presidential Medal of Freedom', 'Margaret Sanger Awards', 'Nobel Peace Prize', 'Jawaharlal Nehru Award for International Understanding', 'Congressional Gold Medal', 'Anisfield-Wolf Book Awards', 'Grammy Award for Best Spoken Word Album', "Time's Person of the Year", 'Spingarn Medal'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 121 / 183: {
          [('Main', '==', 'm.051cc', ['influence.influence_node.peers', 'influence.peer_relationship.peers'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:influence.influence_node.peers ?o1 . ?o1 fb:influence.peer_relationship.peers ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:influence.influence_node.peers ?o1 . ?o1 fb:influence.peer_relationship.peers ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 3
            Final Answer: {'George MacPherson Docherty', 'James Baldwin'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 122 / 183: {
          [('Main', '==', 'm.051cc', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.type_or_format_of_presentation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.type_or_format_of_presentation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.type_or_format_of_presentation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 1
            Final Answer: {'Speech'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 123 / 183: {
          [('Main', '==', 'm.051cc', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.date ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 2
            Final Answer: {'1965', '1963'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 124 / 183: {
          [('Main', '==', 'm.051cc', ['base.nobelprizes.nobel_prize_winner.nobel_honor', 'base.nobelprizes.nobel_honor.subject_area'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:base.nobelprizes.nobel_prize_winner.nobel_honor ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.subject_area ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:base.nobelprizes.nobel_prize_winner.nobel_honor ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.subject_area ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 3
            Final Answer: {'Civil rights movement', 'Nonviolence', 'Civil disobedience'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 125 / 183: {
          [('Main', '==', 'm.06y3r', ['user.narphorium.people.wealthy_person.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:user.narphorium.people.wealthy_person.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:user.narphorium.people.wealthy_person.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 2
            Final Answer: {'4.4e+09', '5.7e+09'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 126 / 183: {
          [('Main', '==', 'm.06y3r', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'7e+09'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 127 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 7
            Final Answer: {'2000', '1986', '1985', '1976', '1997', '1974'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 128 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 3
            Final Answer: {'Co-Founder', 'Interim Chief Executive Officer', 'Chief Executive Officer'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 129 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 2
            Final Answer: {'1972', '1974'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 130 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Steve Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 131 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 5
            Final Answer: {'1986', '1996', '1976', '1981', '2006'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 132 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 3
            Final Answer: {'Patricia Ann Jobs', 'Mona Simpson'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 133 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 3
            Final Answer: {'Laurene Powell', 'Chris-Ann Brennan'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 134 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Ahwahnee Hotel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 135 / 183: {
          [('Main', '==', 'm.06y3r', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 2
            Final Answer: {'Archive Footage', 'Him/Herself'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 136 / 183: {
          [('Main', '==', 'm.06y3r', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'2002', '2012', '1985', '1987'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 137 / 183: {
          [('Main', '==', 'm.06y3r', ['award.award_winner.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 138 / 183: {
          [('Main', '==', 'm.06y3r', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'14'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 139 / 183: {
          [('Main', '==', 'm.06y3r', ['architecture.architectural_structure_owner.structures_owned', 'architecture.ownership.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.start_date ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'1984'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 140 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.leader_of', 'organization.leadership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.from ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'1997'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 141 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.leader_of', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Chief Executive Officer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 142 / 183: {
          [('Main', '==', 'm.06y3r', ['user.narphorium.people.wealthy_person.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:user.narphorium.people.wealthy_person.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:user.narphorium.people.wealthy_person.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 143 / 183: {
          [('Main', '==', 'm.06y3r', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 144 / 183: {
          [('Main', '==', 'm.06y3r', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'therichest.org'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 145 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.employment_history', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 5
            Final Answer: {'2000', '1985', '2011', '1996', '2006'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 146 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Silicon Valley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 147 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 5
            Final Answer: {'Apple Inc.', 'National Academy of Engineering', 'Pixar', 'The Walt Disney Company', 'World Technology Network'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 148 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 3
            Final Answer: {'2006', '1977', '1984'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 149 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'1991'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 150 / 183: {
          [('Main', '==', 'm.06y3r', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 8
            Final Answer: {'Triumph of the Nerds', 'Nerds 2.0.1: A Brief History of the Internet', 'Steve Jobs: The Lost Interview', 'Pixar: 25 Magic Moments', 'Disconnect: Cell Phones & Cancer', 'The Pixar Story', 'Steve Jobs: One Last Thing', 'Thinking Differently'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 151 / 183: {
          [('Main', '==', 'm.06y3r', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'Steve Wozniak', 'John Lasseter', 'Edwin Catmull'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 152 / 183: {
          [('Main', '==', 'm.06y3r', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Producers Guild of America Awards 2001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 153 / 183: {
          [('Main', '==', 'm.06y3r', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Steve Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 154 / 183: {
          [('Main', '==', 'm.06y3r', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 155 / 183: {
          [('Main', '==', 'm.06y3r', ['architecture.architectural_structure_owner.structures_owned', 'architecture.ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Steve Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 156 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.leader_of', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Apple Inc.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 157 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.leader_of', 'organization.leadership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.to ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'2011'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 158 / 183: {
          [('Main', '==', 'm.06y3r', ['user.narphorium.people.wealthy_person.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:user.narphorium.people.wealthy_person.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:user.narphorium.people.wealthy_person.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 2
            Final Answer: {'2006', '2007'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 159 / 183: {
          [('Main', '==', 'm.06y3r', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'2011'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 160 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Steve Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 161 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 6
            Final Answer: {'Atari', 'Hewlett-Packard', 'Apple Inc.', 'Pixar', 'The Walt Disney Company', 'NeXT'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 162 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'Homestead High School', 'Cupertino Junior High School', 'Monta Loma Elementary School', 'Reed College'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 163 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Steve Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 164 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'1972'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 165 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Steve Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 166 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 167 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'2011'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 168 / 183: {
          [('Main', '==', 'm.06y3r', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 2
            Final Answer: {'Domestic partnership', 'Marriage'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 169 / 183: {
          [('Main', '==', 'm.06y3r', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Steve Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 170 / 183: {
          [('Main', '==', 'm.06y3r', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 4
            Final Answer: {'National Medal of Technology', 'Jefferson Award for Greatest Public Service by an Individual 35 Years or Under', 'Grammy Trustees Award', 'PGA Vanguard Award'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 171 / 183: {
          [('Main', '==', 'm.06y3r', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Time 100'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 172 / 183: {
          [('Main', '==', 'm.06y3r', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 WHERE { fb:m.06y3r fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 173 / 183: {
          [('Main', '==', 'm.06y3r', ['architecture.architectural_structure_owner.structures_owned', 'architecture.ownership.structure'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.structure ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.structure ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Jackling House'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 174 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.leader_of', 'organization.leadership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:29] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 175 / 183: {
          [('Main', '==', 'm.06y3r', ['business.board_member.leader_of', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:30] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 1
            Final Answer: {'Steve Jobs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 176 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:30] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'Undeclared'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 177 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.tv_producer', 'tv.tv_producer_term.producer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.tv_producer ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:30] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.tv_producer ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'Judd Apatow'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 178 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:30] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 8
            Final Answer: {'Charlie Hunnam', 'Loudon Wainwright III', 'Seth Rogen', 'Jay Baruchel', 'Monica Keena', 'Carla Gallo', 'Timm Sharp', 'Jason Segel'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 179 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.original_network', 'tv.tv_network_duration.network'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:30] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'Fox Broadcasting Company'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 180 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:30] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 5
            Final Answer: {'Ron Garner', 'Lloyd Haythe', 'Rachel Lindquist', 'Lizzie Exley', 'Eric'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 181 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.original_network', 'tv.tv_network_duration.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:30] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'Undeclared'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 182 / 183: {
          [('Main', '==', 'm.0bs5zk', ['tv.tv_program.tv_producer', 'tv.tv_producer_term.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.tv_producer ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:30] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0bs5zk fb:tv.tv_program.tv_producer ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0bs5zk'}
            Query return lines = 1
            Final Answer: {'Undeclared'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        171 / 183 coarse schemas kept with ans_size > 0.
      } [2.504s]
      Coarse level ended, resulting in 171 schemas.
    } [6.335s]
    Type level searching (total types = 10): {
      Current: 0 / 171
[{'media_common.quotation'}]
[{'book.written_work'}]
[{'type.datetime'}]
[{'location.location'}]
[{'book.literary_series'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'location.location'}]
[{'people.place_of_interment'}]
[{'base.activism.activism_issue'}]
[{'music.recording'}]
[{'symbols.name_source'}]
[{'user.alexander.misc.murderer'}]
[{'influence.influence_node'}]
[{'symbols.namesake'}]
[{'film.film'}]
[{'media_common.quotation'}]
[{'people.person'}]
[{'type.float'}]
[{'people.cause_of_death'}]
[{'influence.influence_node'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'visual_art.artwork'}]
[{'base.fight.crime_type'}]
[{'user.jschell.default_domain.famous_speech'}]
[{'base.fight.protest'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'location.location'}]
[{'people.place_of_interment'}]
[{'law.invention'}]
[{'base.eating.diets'}]
[{'film.film'}]
[{'medicine.disease'}]
[{'film.film'}]
[{'media_common.quotation'}]
[{'people.person'}]
[{'people.cause_of_death'}]
[{'tv.tv_series_episode'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'computer.computer'}]
[{'food.diet'}]
[{'base.qualia.recreational_drug'}]
[{'user.mheller.default_domain.adoptive_parent'}]
[{'organization.organization'}]
[{'location.country'}]
[{'type.datetime'}]
[{'tv.tv_series_season'}]
[{'tv.tv_genre'}]
[{'type.datetime'}]
[{'type.int'}]
[{'tv.tv_series_episode'}]
[{'tv.tv_program_creator'}]
[{'type.int'}]
[{'media_common.netflix_genre'}]
[{'type.int'}]
[{'language.human_language'}]
[{'type.int'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'event.speech_or_presentation'}, {'event.public_speaker'}]
[{'event.speech_or_presentation'}, {'event.speech_topic'}]
[{'base.nobelprizes.nobel_honor'}, {'base.nobelprizes.nobel_prize_winner'}]
[{'film.performance'}, {'film.film'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
      Current: 100 / 171
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'event.speech_or_presentation'}, {'event.presented_work'}]
[{'event.speech_or_presentation'}, {'event.public_speaking_event'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'influence.peer_relationship'}, {'influence.influence_node'}]
[{'event.speech_or_presentation'}, {'event.type_of_public_presentation'}]
[{'event.speech_or_presentation'}, {'type.datetime'}]
[{'base.nobelprizes.nobel_honor'}, {'base.nobelprizes.nobel_subject_area'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.ranking'}, {'type.int'}]
[{'architecture.ownership'}, {'type.datetime'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.leadership'}, {'organization.role'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'people.place_lived'}, {'location.location'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'architecture.ownership'}, {'architecture.architectural_structure_owner'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'architecture.ownership'}, {'architecture.structure'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.tv_network_duration'}, {'tv.tv_network'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
[{'tv.tv_network_duration'}, {'tv.tv_program'}]
[{'tv.tv_producer_term'}, {'tv.tv_program'}]
      7 typed schemas retrieved from 171 coarse schemas.
      Calculating F1 for 7 typed schemas: {
        Current: 0 / 7
        Checking schema 0 / 7: {
          [('Main', '==', 'm.051cc', ['book.author.works_written']), ('Type', '==', 'book.written_work', ['type.object.type'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:book.author.works_written ?o1 . ?o1 fb:type.object.type fb:book.written_work . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:30] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:book.author.works_written ?o1 . ?o1 fb:type.object.type fb:book.written_work . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 22
            Final Answer: {'The Papers of Martin Luther King, Jr., Volume II: Rediscovering Precious Values, July 1951-November 1955', 'Strength to Love', 'A Testament of Hope : The Essential Writings and Speeches of Martin Luther King, Jr.', 'Letter from Birmingham Jail', 'Daddy King', 'The Trumpet of Conscience', 'The Papers of Martin Luther King, Jr., Volume V: Threshold of a New Decade, January 1959-December 1960', 'Words of Martin Luther King, Jr', 'The Martin Luther King, Jr. Companion', "Teacher's Booklet. From Montgomery to Memphis", "Why We Can't Wait", 'The Papers of Martin Luther King, Jr., Volume IV: Symbol of the Movement, January 1957-December 1958', 'The Papers of Martin Luther King, Jr., Volume VI: Advocate of the Social Gospel, September 1948 – March 1963', 'The Papers of Martin Luther King, Jr., Volume III: Birth of a New Age, December 1955-December 1956', 'Drum Major Instinct Sermon', 'A Knock at Midnight', 'The Measure of a Man', 'I have a dream', 'The Papers of Martin Luther King, Jr., Volume I: Called to Serve, January 1929-June 1951', 'Stride toward freedom; the Montgomery story', 'Where Do We Go from Here: Chaos or Community?'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [1.361s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [1.361s]
        Checking schema 1 / 7: {
          [('Main', '==', 'm.051cc', ['book.book_subject.works']), ('Type', '==', 'book.written_work', ['type.object.type'])]
          var_types: [{'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:book.written_work . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:31] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.051cc fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:book.written_work . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 6
            Final Answer: {'Pillar of Fire: America in the King Years, 1963-1965', 'The Papers of Martin Luther King, Jr., Volume VI: Advocate of the Social Gospel, September 1948 – March 1963', "Countdown of 10 Amazing Moments from the Year 2011: No. 9 Belafonte's New Song", 'Countdown of 10 Amazing Moments from the Year 2011: No. 4 the Martin Luther King Jr. Memorial', 'America in the King Years', 'Notebook on Black History Month 2012 (part 4) The Black Power Mixtape 1967-1975'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.377s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.377s]
        Checking schema 2 / 7: {
          [('Main', '==', 'm.06y3r', ['people.deceased_person.place_of_death']), ('Type', '==', 'royalty.kingdom', ['type.object.type'])]
          var_types: [{'royalty.kingdom', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:royalty.kingdom . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:31] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:royalty.kingdom . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 3 / 7: {
          [('Main', '==', 'm.06y3r', ['people.person.place_of_birth']), ('Type', '==', 'royalty.kingdom', ['type.object.type'])]
          var_types: [{'royalty.kingdom', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:royalty.kingdom . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:31] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06y3r fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:royalty.kingdom . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 4 / 7: {
          [('Main', '==', 'm.051cc', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.presented_work']), ('Type', '==', 'book.written_work', ['type.object.type'])]
          var_types: [{'event.speech_or_presentation'}, {'book.written_work', 'event.presented_work'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.type fb:book.written_work . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:31] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.051cc fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.type fb:book.written_work . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.051cc'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.204s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.204s]
        Checking schema 5 / 7: {
          [('Main', '==', 'm.06y3r', ['people.person.spouse_s', 'people.marriage.location_of_ceremony']), ('Type', '==', 'royalty.kingdom', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'royalty.kingdom', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.type fb:royalty.kingdom . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:32] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.type fb:royalty.kingdom . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 6 / 7: {
          [('Main', '==', 'm.06y3r', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'royalty.kingdom', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'royalty.kingdom', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:royalty.kingdom . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:32] Q_Schema Request: {
            WebQ_1596|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06y3r fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:royalty.kingdom . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06y3r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        2 / 7 typed schemas kept with ans_size > 0.
      } [2.021s]
      Typed level ended, resulting in 173 schemas.
    } [2.030s]
    Time level searching (total times = 0): {
      Current: 0 / 173
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'law.invention.date_of_invention'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'computer.computer.introduced', 'computer.computer.discontinued'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.nobelprizes.nobel_honor.year'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
      Current: 100 / 173
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.nobelprizes.nobel_honor.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, {'architecture.structure.closed', 'architecture.structure.destruction_date', 'architecture.structure.construction_started', 'architecture.structure.opened', 'architecture.structure.topped_out'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [{'tv.tv_network_duration.to', 'tv.tv_network_duration.from'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [{'tv.tv_network_duration.to', 'tv.tv_network_duration.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
self.var_time_preds: [{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
      0 timed schemas retrieved from 173 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 173 schemas.
    } [0.004s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 173
[{'media_common.quotation.date'}]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'music.recording.date'}]
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[{'media_common.quotation.date'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[set()]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[{'law.invention.date_of_invention'}]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[{'film.film.initial_release_date'}]
[{'media_common.quotation.date'}]
[{'people.person.date_of_birth'}]
[set()]
[{'tv.tv_series_episode.air_date'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[set()]
[{'computer.computer.introduced', 'computer.computer.discontinued'}]
[set()]
[set()]
[set()]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[{'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
[set()]
[set()]
[set()]
[{'tv.tv_series_episode.air_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.nobelprizes.nobel_honor.year'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
      Current: 100 / 173
[{'award.award_honor.year'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[set(), set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), set()]
[{'event.speech_or_presentation.date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.nobelprizes.nobel_honor.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, {'architecture.structure.closed', 'architecture.structure.destruction_date', 'architecture.structure.construction_started', 'architecture.structure.opened', 'architecture.structure.topped_out'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[{'tv.tv_network_duration.to', 'tv.tv_network_duration.from'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[{'tv.tv_network_duration.to', 'tv.tv_network_duration.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
[{'book.written_work.copyright_date', 'book.written_work.date_of_first_publication', 'book.written_work.date_written'}]
      0 ordinal schemas retrieved from 173 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 173 schemas.
    } [0.004s]
    [2020-12-03 14:35:32] buffer saved.
    173 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1596_schema].
  } [23.745s]
  Entering Q 1597 / 5810 [b'what characters does seth macfarlane voice?']: {
    Show 1 E + 10 T + 0 Tm + 0 Ord = 11 linkings: {
      #00 Entity: [3, 5) (seth macfarlane) == m.021yw7 (Seth_MacFarlane) {'score': 49600.406648, 'source': 0.0}
      #01 Type: [5, 6) (voice) == music.voice (musical voice) {'sim': 0.857072}
      #02 Type: [1, 2) (characters) == fictional_universe.fictional_character (fictional character) {'sim': 0.837044}
      #03 Type: [0, 2) (what characters) == book.book_character (book character) {'sim': 0.782497}
      #04 Type: [5, 6) (voice) == opera.opera_character_voice (opera character voice) {'sim': 0.780114}
      #05 Type: [1, 2) (characters) == fictional_universe.fictional_character_creator (fictional character creator) {'sim': 0.768544}
      #06 Type: [0, 2) (what characters) == comic_books.comic_book_character (comic book character) {'sim': 0.760918}
      #07 Type: [1, 3) (characters does) == fictional_universe.character_gender (character gender) {'sim': 0.750859}
      #08 Type: [1, 3) (characters does) == comic_strips.comic_strip_character (comic strip character) {'sim': 0.73899}
      #09 Type: [1, 3) (characters does) == fictional_universe.character_powers (character power) {'sim': 0.733034}
      #10 Type: [0, 2) (what characters) == book.poem_character (poem character) {'sim': 0.731662}
    } [0.000s]
    11 link data save to file.
    Coarse level searching (total entities = 1): {
      [Len-1||F1/1] (2020-12-03 14:35:47) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.021yw7 ?p1 ?o1 . }
        [2020-12-03 14:35:47] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.021yw7 ?p1 ?o1 . }
          Query return lines = 48
        } [0.008s]
        Filt_Query_Ret = 22 / 48 ( 0.008s)
      } [0.009s]
      [Len-2||F1/1] (2020-12-03 14:35:47) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.021yw7 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:35:47] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.021yw7 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 786
        } [0.103s]
        Filt_Query_Ret = 57 / 786 ( 0.106s)
      } [0.106s]
      79 coarse schemas retrieved from scratch.
      Calculating F1 for 79 coarse schemas: {
        Current: 0 / 79
        Checking schema 0 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_writer.episodes_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:tv.tv_writer.episodes_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:tv.tv_writer.episodes_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 18
            Final Answer: {'Death Has a Shadow', '""School Bully""/""Time Machine""', 'Super Mario Rescues the Princess', 'Why Bob Marley Should Not Have Acted as His Own Attorney', 'Family Guy Viewer Mail 1', 'Pilot', 'Original Pilot', 'North by North Quahog', 'Love, Blactually', 'Mother Tucker', 'Orthodontic Police/""The Cow with Four Eyes""', "Cow's Instincts...Don't It?", 'A Dog On The $25,000 Pyramid', 'Ballerina Cow', 'Back to the Pilot', 'Complete Uncensored Collection'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 1 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.021yw7 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 WHERE { fb:m.021yw7 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'1973'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 2 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 2
            Final Answer: {'Ronald Milton MacFarlane', 'Ann Perry Sager'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 4 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Atheism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 5 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.021yw7 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 WHERE { fb:m.021yw7 fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'1.78'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 6 / 79: {
          [('Main', '==', 'm.021yw7', ['film.editor.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.editor.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.editor.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'The Life of Larry'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 7 / 79: {
          [('Main', '==', 'm.021yw7', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 3
            Final Answer: {'Family Guy: Live in Vegas', 'Family Guy Live In Vegas', 'Music Is Better Than Words'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.044s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.044s]
        Checking schema 8 / 79: {
          [('Main', '==', 'm.021yw7', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 28
            Final Answer: {'Two Sleepy People', "You're The Cream In My Coffee", "She's Wonderful Too", 'Dear Booze', "It's Anybody's Spring", 'The Sadder But Wiser Girl', 'Babysitting Is a Bum Deal', "Puberty's Gonna Get Me", 'Quahog Holiday', 'Fanfare & Intro', 'But Then I Met You', "Love Won't Let You Get Away", 'Theme from ""Family Guy""', 'The Last Time I Saw Paris', 'Slightly Out of Tune (aka Desafinado)', 'T.V. Medley', 'One Boy', "It's Easy To Remember", 'Something Good', 'The Night They Invented Champagne', 'The ""Q"" Man Loves Nobody', 'Anytime, Anywhere', "All Cartoons are F**kin' Dicks", 'Music Is Better Than Words', "Nine O'Clock", 'You And I', 'Bow Music (Theme From ""Family Guy"")', "But I'm Yours"}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 9 / 79: {
          [('Main', '==', 'm.021yw7', ['film.producer.films_executive_produced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.producer.films_executive_produced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.producer.films_executive_produced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Inside the CIA'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 10 / 79: {
          [('Main', '==', 'm.021yw7', ['film.director.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 6
            Final Answer: {'Inside the CIA', 'Larry & Steve', 'The Life of Larry', 'Ted', 'Larry shorts', 'A Million Ways to Die in the West'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 11 / 79: {
          [('Main', '==', 'm.021yw7', ['film.film_art_director.films_art_directed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.film_art_director.films_art_directed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.film_art_director.films_art_directed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'The Life of Larry'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 12 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_program_creator.programs_created'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:tv.tv_program_creator.programs_created ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:tv.tv_program_creator.programs_created ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 4
            Final Answer: {'Family Guy', 'The Cleveland Show', "Seth MacFarlane's Cavalcade of Cartoon Comedy", 'American Dad!'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 13 / 79: {
          [('Main', '==', 'm.021yw7', ['film.producer.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.producer.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.producer.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 4
            Final Answer: {'Ted', 'Larry shorts', 'Family Guy Presents: Stewie Griffin: The Untold Story', 'Looney Tunes: Back in Action'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 14 / 79: {
          [('Main', '==', 'm.021yw7', ['influence.influence_node.influenced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Matthew Creed'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 15 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 13
            Final Answer: {'Television Producer', 'Television Director', 'Comedian', 'Singer', 'Lyricist', 'Voice Actor', 'Screenwriter', 'Musician', 'Composer', 'Film Producer', 'Film Director', 'Animator', 'Actor'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 16 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 17 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Kent'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 18 / 79: {
          [('Main', '==', 'm.021yw7', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Fuzzy Door Productions'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 19 / 79: {
          [('Main', '==', 'm.021yw7', ['film.film_story_contributor.film_story_credits'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.film_story_contributor.film_story_credits ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.film_story_contributor.film_story_credits ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 2
            Final Answer: {'Ted', 'Family Guy Presents: Stewie Griffin: The Untold Story'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 20 / 79: {
          [('Main', '==', 'm.021yw7', ['fictional_universe.fictional_character_creator.fictional_characters_created'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 12
            Final Answer: {'Lois Griffin', 'Peter Griffin', 'Steve Smith', 'Brian Griffin', 'Donna Tubbs', 'Stan Smith', 'Lester Krinklesac', 'Chris Griffin', 'Francine Smith', 'Glenn Quagmire', 'Hayley Smith', 'Roger'}
            Answers = 12, P = 0.333333, R = 0.400000, F1 = 0.363636
          } [0.012s]
          Answers = 12, P = 0.333333, R = 0.400000, F1 = 0.363636
        } [0.012s]
        Checking schema 21 / 79: {
          [('Main', '==', 'm.021yw7', ['film.writer.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.writer.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:film.writer.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 4
            Final Answer: {'Ted', 'Inside the CIA', 'Larry & Steve', 'The Life of Larry'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 22 / 79: {
          [('Main', '==', 'm.021yw7', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'1e+08'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 23 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {"Bachelor's degree"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 24 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'1991'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 25 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 26 / 79: {
          [('Main', '==', 'm.021yw7', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 14
            Final Answer: {'Primetime Emmy Award for Outstanding Animated Program (for Programming One Hour or More)', 'Grammy Award for Best Song Written for a Motion Picture, Television or Other Visual Media', 'Primetime Emmy Award for Outstanding Original Music And Lyrics', 'MTV Movie Award for Best Shirtless Performance', 'Primetime Emmy Award for Outstanding Voice-Over Performance', 'Primetime Emmy Award for Outstanding Animated Program', 'British Academy Television International Award', 'Primetime Emmy Award for Outstanding Comedy Series', 'MTV Movie Award for Best On-Screen Duo', 'MTV Movie Award for Best Fight', 'Primetime Emmy Award for Outstanding Animated Program  (for Programming Less Than One Hour)', 'Academy Award for Best Original Song', 'MTV Movie Award for Best WTF Moment', 'Grammy Award for Best Traditional Pop Vocal Album'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 27 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 2
            Final Answer: {'Rachael MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 28 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 6
            Final Answer: {'Family Guy', '3 South', 'The Cleveland Show', "Seth MacFarlane's Cavalcade of Cartoon Comedy", 'American Dad!', 'The Pitts'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 29 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.seasons'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 11
            Final Answer: {'Family Guy - Season 8', 'Family Guy - Season 3', 'Family Guy - Season 2', 'Family Guy - Season 1', 'The Cleveland Show - Season 1', 'Family Guy - Season 6', 'The Cleveland Show - Season 2', 'Family Guy - Season 7', 'Family Guy - Season 4', 'Family Guy - Season 5', 'Family Guy - Season 9'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 30 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 2
            Final Answer: {'1999', '2009'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 31 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 32 / 79: {
          [('Main', '==', 'm.021yw7', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 33 / 79: {
          [('Main', '==', 'm.021yw7', ['cvg.game_voice_actor.computer_game_voice_performances', 'cvg.game_performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 3
            Final Answer: {'Peter Griffin', 'Stewie Griffin', 'Brian Griffin'}
            Answers = 3, P = 1.000000, R = 0.300000, F1 = 0.461538
          } [0.012s]
          Answers = 3, P = 1.000000, R = 0.300000, F1 = 0.461538
        } [0.013s]
        Checking schema 34 / 79: {
          [('Main', '==', 'm.021yw7', ['cvg.game_voice_actor.computer_game_voice_performances', 'cvg.game_performance.performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Voice'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 35 / 79: {
          [('Main', '==', 'm.021yw7', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 3
            Final Answer: {'2002', '2000', '2013'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 36 / 79: {
          [('Main', '==', 'm.021yw7', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 2
            Final Answer: {'Ted', 'Family Guy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 37 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_writer.tv_programs', 'tv.tv_program_writer_relationship.tv_program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.tv_program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.tv_program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 4
            Final Answer: {'Family Guy', "Dexter's Laboratory", 'American Dad!', 'Jungle Cubs'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 38 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_writer.tv_programs', 'tv.tv_program_writer_relationship.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.start_date ?o2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'1999'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 39 / 79: {
          [('Main', '==', 'm.021yw7', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:47] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 2
            Final Answer: {'Amanda Bynes'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 40 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 41 / 79: {
          [('Main', '==', 'm.021yw7', ['business.board_member.leader_of', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Chief Executive Officer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 42 / 79: {
          [('Main', '==', 'm.021yw7', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 43 / 79: {
          [('Main', '==', 'm.021yw7', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'celebritynetworth.com'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 44 / 79: {
          [('Main', '==', 'm.021yw7', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 12
            Final Answer: {'Family Guy Presents: Stewie Griffin: The Untold Story', 'Inside the CIA', 'Larry & Steve', 'Hellboy II: The Golden Army', 'The Life of Larry', 'Roast of David Hasselhoff', 'Ted', 'Larry shorts', 'Pilot Season', 'Tooth Fairy', "Family Guy Presents: Seth & Alex's Almost Live Comedy Show", 'The Drawn Together Movie: The Movie!'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 45 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Animation'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 46 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 2
            Final Answer: {'Providence', 'Connecticut'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 47 / 79: {
          [('Main', '==', 'm.021yw7', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 7
            Final Answer: {'Family Guy', 'Everybody Needs a Best Friend', 'The Cleveland Show', 'Music Is Better Than Words', 'Ted', 'American Dad!', 'Christmastime Is Killing Us'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 48 / 79: {
          [('Main', '==', 'm.021yw7', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 WHERE { fb:m.021yw7 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 10
            Final Answer: {'2008', '2000', '2013', '2002', '2011', '2012', '2006', '2005', '2009', '2010'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 49 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 50 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane/Frank Ocean'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 51 / 79: {
          [('Main', '==', 'm.021yw7', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Trek Nation'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 52 / 79: {
          [('Main', '==', 'm.021yw7', ['cvg.game_voice_actor.computer_game_voice_performances', 'cvg.game_performance.game'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.game ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.game ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Family Guy Video Game!'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 53 / 79: {
          [('Main', '==', 'm.021yw7', ['cvg.game_voice_actor.computer_game_voice_performances', 'cvg.game_performance.playable'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.playable ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.playable ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 54 / 79: {
          [('Main', '==', 'm.021yw7', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 3
            Final Answer: {'Walter Murphy', 'Mark Wahlberg'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 55 / 79: {
          [('Main', '==', 'm.021yw7', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 3
            Final Answer: {'54th Primetime Emmy Awards', '52nd Primetime Emmy Awards', '2013 MTV Movie Awards'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 56 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 57 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Executive Producer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 58 / 79: {
          [('Main', '==', 'm.021yw7', ['business.board_member.leader_of', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Fuzzy Door Productions'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 59 / 79: {
          [('Main', '==', 'm.021yw7', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 19
            Final Answer: {'Kid in Pound', 'Sulu', 'Stan Smith', 'Ricky', 'Ensign Skippee', 'Intelligent Smart Robotic Animated Eraser Lady', 'Ziggy', 'Old Man', 'Ted', 'Man in underwear', 'Seth MacFarlane', 'Larry Cummings', 'Lois Cummings', 'Roger the Alien', 'Scottsman', 'Pilot', 'Steve', 'Captain Kirk', 'Johann'}
            Answers = 19, P = 0.052632, R = 0.100000, F1 = 0.068966
          } [0.016s]
          Answers = 19, P = 0.052632, R = 0.100000, F1 = 0.068966
        } [0.016s]
        Checking schema 60 / 79: {
          [('Main', '==', 'm.021yw7', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 61 / 79: {
          [('Main', '==', 'm.021yw7', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Voice'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 62 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 63 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Hanna-Barbera'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 64 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 2
            Final Answer: {'Rhode Island School of Design', 'Kent School'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 65 / 79: {
          [('Main', '==', 'm.021yw7', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 66 / 79: {
          [('Main', '==', 'm.021yw7', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 72
            Final Answer: {'Michael Rowe', 'Rick Wiener', 'Gary Janetti', 'Craig Hoffman', 'Walter Murphy', 'Ken Wong', 'Brian Scully', 'Danny Smith', 'Pete Michels', 'Albert Calleros', 'Maureen Mlynarczyk', 'Clarence Livingston', 'Dominic Polcino', 'Mark Wahlberg', 'Dan Vebber', 'Alex Borstein', 'David A. Goodman', 'Doug Gallery', 'Jim Bernstein', 'Wellesley Wild', 'Tom Pope', 'Chris Bennett', 'Mike L. Mayfield', 'Diana Ritchey', 'Dan Povenmire', 'Erik Durbin', 'Ron Hughart', 'David Bastian', 'Ralph Fernan', 'David Zuckerman', 'Greg Colton', 'Ron Jones', 'Billiam Coronel', 'Brian Boyle', 'Chris Sheridan', 'Sherry Gunther', 'Caleb Meurer', 'Michael Shipley', 'Bill Buchanan', 'Mike Barker', 'Mike Henry', 'Murray Miller', 'Laura McCreary', 'Kirker Butler', 'Steve Callaghan', 'Kara Vallow', 'Mark Hentemann', 'Gabe Miller', 'Jamie H. Huang', 'Patrick Buchanan', 'Alec Sulkin', 'Max Martinez', 'Joseph Lee', 'Anthony Lioi', 'Daniel Palladino', 'Richard Appel', 'Eric Bryan', 'Shannon Smith', 'Nahnatchka Khan', 'Peter Shin', 'Erik Sommers', 'Jonathan Greenberg', 'Brent Woods', 'Judah Miller', 'Brandi Young', 'Andi Klein', 'Chris Robertson', 'Aseem Batra', 'Kenny Schwartz', 'Jonathan Fener', 'Matt Weitzman'}
            Answers = 71, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 71, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 67 / 79: {
          [('Main', '==', 'm.021yw7', ['award.award_nominee.award_nominations', 'award.award_nomination.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 68 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 24
            Final Answer: {'Dr. Elmer Hartman', 'Tom Tucker', 'Carter Pewterschmidt', 'Glenn Quagmire', 'Jeff McGarland', 'Stan Smith', 'Jasper', 'Seth', 'Engineer', 'Tim the Bear', 'Peter Griffin', 'Kevin Swanson', 'Stewie Griffin', 'TV Announcer', 'Seamus', 'Kool-aid Guy', 'God', 'Nate Griffin', 'Roger', 'Jake Tucker', 'Brian Griffin', "Hillary's Date", 'Wayne the Brain', 'Mickey McFinnegan'}
            Answers = 24, P = 0.416667, R = 1.000000, F1 = 0.588235
          } [0.023s]
          Answers = 24, P = 0.416667, R = 1.000000, F1 = 0.588235
        } [0.023s]
        Checking schema 69 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 2
            Final Answer: {'Uncredited', 'Voice'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 70 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Host'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 71 / 79: {
          [('Main', '==', 'm.021yw7', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 72 / 79: {
          [('Main', '==', 'm.021yw7', ['cvg.game_voice_actor.computer_game_voice_performances', 'cvg.game_performance.voice_actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.voice_actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.voice_actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 73 / 79: {
          [('Main', '==', 'm.021yw7', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 3
            Final Answer: {'Primetime Emmy Award for Outstanding Original Music And Lyrics', 'MTV Movie Award for Best On-Screen Duo', 'Primetime Emmy Award for Outstanding Voice-Over Performance'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 74 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 38
            Final Answer: {'Marg Helgenberger, Seth MacFarlane, The National', 'Fred Willard, Seth McFarlane, & Alex Borstein', 'Family Guy: Partial Terms of Endearment', 'I Solemnly Swear', 'Affliction', 'Suck It', 'The 12th Annual Teen Choice Awards', 'No More Good Days', 'Jenny McCarthy, Seth MacFarlane, The Cult', 'Toy Meets Girl', 'A Smith in the Hand', 'Stewie Kills Lois and Lois Kills Stewie', 'The Forgotten', 'Nick Kicks Butt', 'Junk in the Trunk', 'Stannie Get Your Gun', 'All About Steve', 'Super Trivia', 'Road to the North Pole', "Lorelai's Graduation Day", 'Badunkadunk', "I Can't Stan You", 'Dog Gone', 'Super Mario Rescues The Princess', 'Ashley Judd, Seth MacFarlane, Pet Shop Boys', 'The Deep End', 'Seth MacFarlane', 'Show #2339', '1987', 'Seth McFarlane & Alex Borstein', 'Federated Resources', 'Episode #1205', "Peter's Progress", 'But Not In That Way', 'Lincoln Lover', 'Excellence in Broadcasting'}
            Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 75 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_writer.tv_programs', 'tv.tv_program_writer_relationship.writer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.writer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_writer.tv_programs ?o1 . ?o1 fb:tv.tv_program_writer_relationship.writer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 76 / 79: {
          [('Main', '==', 'm.021yw7', ['base.popstra.celebrity.dated', 'base.popstra.dated.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 3
            Final Answer: {'Amanda Bynes', 'Eliza Dushku'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 77 / 79: {
          [('Main', '==', 'm.021yw7', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 4
            Final Answer: {'Family Guy', 'The Cleveland Show', 'The Winner', 'American Dad!'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 78 / 79: {
          [('Main', '==', 'm.021yw7', ['business.board_member.leader_of', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        77 / 79 coarse schemas kept with ans_size > 0.
      } [1.069s]
      Coarse level ended, resulting in 77 schemas.
    } [1.184s]
    Type level searching (total types = 10): {
      Current: 0 / 77
[{'tv.tv_series_episode'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'film.film'}]
[{'music.album'}]
[{'music.recording'}]
[{'film.film'}]
[{'film.film'}]
[{'film.film'}]
[{'tv.tv_program'}]
[{'film.film'}]
[{'influence.influence_node'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'organization.organization'}]
[{'film.film'}]
[{'fictional_universe.fictional_character'}]
[{'film.film'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
[{'tv.regular_tv_appearance'}, {'type.datetime'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_program_guest'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'cvg.game_performance'}, {'cvg.game_character'}]
[{'cvg.game_performance'}, {'cvg.computer_game_performance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'tv.tv_program_writer_relationship'}, {'tv.tv_program'}]
[{'tv.tv_program_writer_relationship'}, {'type.datetime'}]
[{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer'}]
[{'organization.leadership'}, {'organization.role'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'film.performance'}, {'film.film'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'cvg.game_performance'}, {'cvg.computer_videogame'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer_type'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
[{'tv.regular_tv_appearance'}, {'tv.special_tv_performance_type'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.non_character_role'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'cvg.game_performance'}, {'cvg.game_voice_actor'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'tv.tv_program_writer_relationship'}, {'tv.tv_writer'}]
[{'base.popstra.dated'}, {'base.popstra.celebrity'}]
[{'tv.tv_producer_term'}, {'tv.tv_program'}]
[{'organization.leadership'}, {'business.board_member'}]
      14 typed schemas retrieved from 77 coarse schemas.
      Calculating F1 for 14 typed schemas: {
        Current: 0 / 14
        Checking schema 0 / 14: {
          [('Main', '==', 'm.021yw7', ['people.person.parents']), ('Type', '==', 'fictional_universe.fictional_character_creator', ['type.object.type'])]
          var_types: [{'fictional_universe.fictional_character_creator', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:fictional_universe.fictional_character_creator . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:fictional_universe.fictional_character_creator . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 1 / 14: {
          [('Main', '==', 'm.021yw7', ['people.person.gender']), ('Type', '==', 'fictional_universe.character_gender', ['type.object.type'])]
          var_types: [{'people.gender', 'fictional_universe.character_gender'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.gender ?o1 . ?o1 fb:type.object.type fb:fictional_universe.character_gender . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:people.person.gender ?o1 . ?o1 fb:type.object.type fb:fictional_universe.character_gender . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 2 / 14: {
          [('Main', '==', 'm.021yw7', ['fictional_universe.fictional_character_creator.fictional_characters_created']), ('Type', '==', 'fictional_universe.fictional_character', ['type.object.type'])]
          var_types: [{'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.type fb:fictional_universe.fictional_character . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.type fb:fictional_universe.fictional_character . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 12
            Final Answer: {'Lois Griffin', 'Peter Griffin', 'Steve Smith', 'Brian Griffin', 'Donna Tubbs', 'Stan Smith', 'Lester Krinklesac', 'Chris Griffin', 'Francine Smith', 'Glenn Quagmire', 'Hayley Smith', 'Roger'}
            Answers = 12, P = 0.333333, R = 0.400000, F1 = 0.363636
          } [0.132s]
          Answers = 12, P = 0.333333, R = 0.400000, F1 = 0.363636
        } [0.132s]
        Checking schema 3 / 14: {
          [('Main', '==', 'm.021yw7', ['fictional_universe.fictional_character_creator.fictional_characters_created']), ('Type', '==', 'book.book_character', ['type.object.type'])]
          var_types: [{'fictional_universe.fictional_character', 'book.book_character'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.type fb:book.book_character . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.type fb:book.book_character . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 4 / 14: {
          [('Main', '==', 'm.021yw7', ['fictional_universe.fictional_character_creator.fictional_characters_created']), ('Type', '==', 'comic_books.comic_book_character', ['type.object.type'])]
          var_types: [{'comic_books.comic_book_character', 'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.type fb:comic_books.comic_book_character . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.type fb:comic_books.comic_book_character . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 5 / 14: {
          [('Main', '==', 'm.021yw7', ['fictional_universe.fictional_character_creator.fictional_characters_created']), ('Type', '==', 'comic_strips.comic_strip_character', ['type.object.type'])]
          var_types: [{'comic_strips.comic_strip_character', 'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.type fb:comic_strips.comic_strip_character . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.type fb:comic_strips.comic_strip_character . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 6 / 14: {
          [('Main', '==', 'm.021yw7', ['fictional_universe.fictional_character_creator.fictional_characters_created']), ('Type', '==', 'book.poem_character', ['type.object.type'])]
          var_types: [{'book.poem_character', 'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.type fb:book.poem_character . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.021yw7 fb:fictional_universe.fictional_character_creator.fictional_characters_created ?o1 . ?o1 fb:type.object.type fb:book.poem_character . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 7 / 14: {
          [('Main', '==', 'm.021yw7', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'fictional_universe.fictional_character_creator', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'fictional_universe.fictional_character_creator', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character_creator . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character_creator . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 8 / 14: {
          [('Main', '==', 'm.021yw7', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'fictional_universe.fictional_character_creator', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'fictional_universe.fictional_character_creator', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character_creator . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character_creator . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 9 / 14: {
          [('Main', '==', 'm.021yw7', ['cvg.game_voice_actor.computer_game_voice_performances', 'cvg.game_performance.character']), ('Type', '==', 'fictional_universe.fictional_character', ['type.object.type'])]
          var_types: [{'cvg.game_performance'}, {'fictional_universe.fictional_character', 'cvg.game_character'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.character ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:cvg.game_voice_actor.computer_game_voice_performances ?o1 . ?o1 fb:cvg.game_performance.character ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 3
            Final Answer: {'Peter Griffin', 'Stewie Griffin', 'Brian Griffin'}
            Answers = 3, P = 1.000000, R = 0.300000, F1 = 0.461538
          } [0.045s]
          Answers = 3, P = 1.000000, R = 0.300000, F1 = 0.461538
        } [0.045s]
        Checking schema 10 / 14: {
          [('Main', '==', 'm.021yw7', ['film.actor.film', 'film.performance.character']), ('Type', '==', 'fictional_universe.fictional_character', ['type.object.type'])]
          var_types: [{'film.performance'}, {'fictional_universe.fictional_character', 'film.film_character'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:48] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 19
            Final Answer: {'Kid in Pound', 'Sulu', 'Stan Smith', 'Ricky', 'Ensign Skippee', 'Intelligent Smart Robotic Animated Eraser Lady', 'Ziggy', 'Old Man', 'Ted', 'Man in underwear', 'Seth MacFarlane', 'Larry Cummings', 'Lois Cummings', 'Roger the Alien', 'Scottsman', 'Pilot', 'Steve', 'Captain Kirk', 'Johann'}
            Answers = 19, P = 0.052632, R = 0.100000, F1 = 0.068966
          } [0.244s]
          Answers = 19, P = 0.052632, R = 0.100000, F1 = 0.068966
        } [0.244s]
        Checking schema 11 / 14: {
          [('Main', '==', 'm.021yw7', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'fictional_universe.fictional_character_creator', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'fictional_universe.fictional_character_creator', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character_creator . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:49] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character_creator . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 12 / 14: {
          [('Main', '==', 'm.021yw7', ['people.person.education', 'education.education.student']), ('Type', '==', 'fictional_universe.fictional_character_creator', ['type.object.type'])]
          var_types: [{'education.education'}, {'fictional_universe.fictional_character_creator', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character_creator . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:49] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character_creator . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 1
            Final Answer: {'Seth MacFarlane'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 13 / 14: {
          [('Main', '==', 'm.021yw7', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.character']), ('Type', '==', 'fictional_universe.fictional_character', ['type.object.type'])]
          var_types: [{'tv.regular_tv_appearance'}, {'tv.tv_character', 'fictional_universe.fictional_character'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:35:49] Q_Schema Request: {
            WebQ_1597|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.021yw7 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.type fb:fictional_universe.fictional_character . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.021yw7'}
            Query return lines = 24
            Final Answer: {'Dr. Elmer Hartman', 'Tom Tucker', 'Carter Pewterschmidt', 'Glenn Quagmire', 'Jeff McGarland', 'Stan Smith', 'Jasper', 'Seth', 'Engineer', 'Tim the Bear', 'Peter Griffin', 'Kevin Swanson', 'Stewie Griffin', 'TV Announcer', 'Seamus', 'Kool-aid Guy', 'God', 'Nate Griffin', 'Roger', 'Jake Tucker', 'Brian Griffin', "Hillary's Date", 'Wayne the Brain', 'Mickey McFinnegan'}
            Answers = 24, P = 0.416667, R = 1.000000, F1 = 0.588235
          } [0.264s]
          Answers = 24, P = 0.416667, R = 1.000000, F1 = 0.588235
        } [0.264s]
        9 / 14 typed schemas kept with ans_size > 0.
      } [0.834s]
      Typed level ended, resulting in 86 schemas.
    } [0.839s]
    Time level searching (total times = 0): {
      Current: 0 / 86
self.var_time_preds: [{'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, set()]
self.var_time_preds: [{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [set(), {'cvg.computer_videogame.release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, set()]
self.var_time_preds: [{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
      0 timed schemas retrieved from 86 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 86 schemas.
    } [0.003s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 86
[{'tv.tv_series_episode.air_date'}]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[{'music.album.release_date'}]
[{'music.recording.date'}]
[{'film.film.initial_release_date'}]
[{'film.film.initial_release_date'}]
[{'film.film.initial_release_date'}]
[{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[{'organization.organization.date_founded'}]
[{'film.film.initial_release_date'}]
[set()]
[{'film.film.initial_release_date'}]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'people.person.date_of_birth'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, set()]
[{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), {'film.film.initial_release_date'}]
[set(), {'cvg.computer_videogame.release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, set()]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, {'organization.organization.date_founded'}]
[set(), set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'tv.tv_series_episode.air_date'}]
[{'tv.tv_program_writer_relationship.end_date', 'tv.tv_program_writer_relationship.start_date'}, set()]
[{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
[{'tv.tv_producer_term.to', 'tv.tv_producer_term.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'organization.leadership.from', 'organization.leadership.as_of_date', 'organization.leadership.to'}, set()]
[set()]
[set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
      0 ordinal schemas retrieved from 86 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 86 schemas.
    } [0.002s]
    [2020-12-03 14:35:49] buffer saved.
    86 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1597_schema].
  } [20.508s]
  Entering Q 1598 / 5810 [b'where did macho camacho got shot at?']: {
    Show 4 E + 10 T + 0 Tm + 0 Ord = 14 linkings: {
      #00 Entity: [2, 3) (macho) == m.01cd6t (massive compact halo object) {'score': 129.952305, 'source': 2.0}
      #01 Entity: [2, 3) (macho) == m.03z8jh (machos) {'score': 159.742637, 'source': 2.0}
      #02 Entity: [2, 4) (macho camacho) == m.0lxcw (H%c3%a9ctor_Camacho) {'score': 109356.682197, 'source': 1.0}
      #03 Entity: [3, 4) (camacho) == m.0j3dznn (camacho (wrestler)) {'score': 94.775354, 'source': 2.0}
      #04 Type: [0, 2) (where did) == media_common.lost_work (lost work) {'sim': 0.737278}
      #05 Type: [0, 2) (where did) == people.place_lived (place lived) {'sim': 0.703608}
      #06 Type: [0, 1) (where) == location.place_with_neighborhoods (place with neighborhoods) {'sim': 0.687732}
      #07 Type: [0, 1) (where) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.659286}
      #08 Type: [0, 2) (where did) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.650589}
      #09 Type: [0, 1) (where) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.649255}
      #10 Type: [0, 2) (where did) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.641702}
      #11 Type: [0, 2) (where did) == media_common.finished_work (finished work) {'sim': 0.640596}
      #12 Type: [0, 1) (where) == military.military_unit_place_of_origin (military unit place of origin) {'sim': 0.635708}
      #13 Type: [0, 2) (where did) == location.us_state (us state) {'sim': 0.63183}
    } [0.000s]
    14 link data save to file.
    Coarse level searching (total entities = 4): {
      [Len-1||F1/4] (2020-12-03 14:36:07) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01cd6t ?p1 ?o1 . }
        [2020-12-03 14:36:07] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01cd6t ?p1 ?o1 . }
          Query return lines = 4
        } [0.005s]
        Filt_Query_Ret = 0 / 4 ( 0.005s)
      } [0.005s]
      [Len-1||F2/4] (2020-12-03 14:36:07) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03z8jh ?p1 ?o1 . }
        [2020-12-03 14:36:07] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03z8jh ?p1 ?o1 . }
          Query return lines = 7
        } [0.010s]
        Filt_Query_Ret = 1 / 7 ( 0.010s)
        [Len-1||F2/4||3/4-1] (2020-12-03 14:36:07) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03z8jh ?p1 ?o1 . ?o1 ?p2 fb:m.0j3dznn . }
          [2020-12-03 14:36:07] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03z8jh ?p1 ?o1 . ?o1 ?p2 fb:m.0j3dznn . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
      } [0.017s]
      [Len-1||F3/4] (2020-12-03 14:36:07) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0j3dznn ?p1 ?o1 . }
        [2020-12-03 14:36:07] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0j3dznn ?p1 ?o1 . }
          Query return lines = 8
        } [0.004s]
        Filt_Query_Ret = 3 / 8 ( 0.004s)
        [Len-1||F3/4||1/4-1] (2020-12-03 14:36:07) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j3dznn ?p1 ?o1 . ?o1 ?p2 fb:m.01cd6t . }
          [2020-12-03 14:36:07] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j3dznn ?p1 ?o1 . ?o1 ?p2 fb:m.01cd6t . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-1||F3/4||2/4-1] (2020-12-03 14:36:07) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j3dznn ?p1 ?o1 . ?o1 ?p2 fb:m.03z8jh . }
          [2020-12-03 14:36:07] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j3dznn ?p1 ?o1 . ?o1 ?p2 fb:m.03z8jh . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
      } [0.020s]
      [Len-1||F4/4] (2020-12-03 14:36:08) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0lxcw ?p1 ?o1 . }
        [2020-12-03 14:36:08] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0lxcw ?p1 ?o1 . }
          Query return lines = 30
        } [0.011s]
        Filt_Query_Ret = 16 / 30 ( 0.011s)
      } [0.011s]
      [Len-2||F1/4] (2020-12-03 14:36:08) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01cd6t ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:36:08] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01cd6t ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 18
        } [0.037s]
        Filt_Query_Ret = 0 / 18 ( 0.038s)
      } [0.038s]
      [Len-2||F2/4] (2020-12-03 14:36:08) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03z8jh ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:36:08] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03z8jh ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 173
        } [0.013s]
        Filt_Query_Ret = 2 / 173 ( 0.014s)
        [Len-2||F2/4||3/4-1] (2020-12-03 14:36:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03z8jh ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0j3dznn . }
          [2020-12-03 14:36:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03z8jh ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0j3dznn . }
            Query return lines = 0
          } [0.020s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
        [Len-2||F2/4||3/4-2] (2020-12-03 14:36:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03z8jh ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0j3dznn . }
          [2020-12-03 14:36:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03z8jh ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0j3dznn . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
      } [0.048s]
      [Len-2||F3/4] (2020-12-03 14:36:08) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j3dznn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:36:08] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j3dznn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 73
        } [0.011s]
        Filt_Query_Ret = 0 / 73 ( 0.011s)
      } [0.011s]
      [Len-2||F4/4] (2020-12-03 14:36:08) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0lxcw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:36:08] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0lxcw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 421
        } [0.079s]
        Filt_Query_Ret = 23 / 421 ( 0.081s)
      } [0.081s]
      45 coarse schemas retrieved from scratch.
      Calculating F1 for 45 coarse schemas: {
        Current: 0 / 45
        Checking schema 0 / 45: {
          [('Main', '==', 'm.03z8jh', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03z8jh fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03z8jh fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03z8jh'}
            Query return lines = 1
            Final Answer: {'Greece'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 1 / 45: {
          [('Main', '==', 'm.0j3dznn', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0j3dznn fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 WHERE { fb:m.0j3dznn fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0j3dznn'}
            Query return lines = 1
            Final Answer: {'1983'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 2 / 45: {
          [('Main', '==', 'm.0j3dznn', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0j3dznn fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 WHERE { fb:m.0j3dznn fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.0j3dznn'}
            Query return lines = 1
            Final Answer: {'104.3'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 3 / 45: {
          [('Main', '==', 'm.0j3dznn', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j3dznn fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j3dznn fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j3dznn'}
            Query return lines = 1
            Final Answer: {'Kissimmee'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 4 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0lxcw fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 WHERE { fb:m.0lxcw fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'1962'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 5 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 6 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 2
            Final Answer: {'Maria Matias', 'Héctor Luis Camacho, Sr'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 7 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0lxcw fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 WHERE { fb:m.0lxcw fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'1.69'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 8 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'San Juan'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.006s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.006s]
        Checking schema 9 / 45: {
          [('Main', '==', 'm.0lxcw', ['sports.boxer.reach'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0lxcw fb:sports.boxer.reach ?o1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 WHERE { fb:m.0lxcw fb:sports.boxer.reach ?o1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'1.75'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 45: {
          [('Main', '==', 'm.0lxcw', ['medicine.notable_person_with_medical_condition.condition'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:medicine.notable_person_with_medical_condition.condition ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:medicine.notable_person_with_medical_condition.condition ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Brain death'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 11 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 4
            Final Answer: {'Justin Camacho', 'Tyler Camacho', 'Héctor Camacho, Jr.', 'Christian Camacho'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 12 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0lxcw fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 WHERE { fb:m.0lxcw fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'73.03'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 13 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Ballistic trauma'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Professional Boxer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 15 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 16 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Bayamón'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 17 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0lxcw fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 WHERE { fb:m.0lxcw fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 18 / 45: {
          [('Main', '==', 'm.0lxcw', ['sports.boxer.weight_division'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:sports.boxer.weight_division ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:sports.boxer.weight_division ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 3
            Final Answer: {'Super featherweight', 'Lightweight', 'Light welterweight'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 19 / 45: {
          [('Main', '==', 'm.0lxcw', ['sports.boxer.stance'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:sports.boxer.stance ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:sports.boxer.stance ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Southpaw stance'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 20 / 45: {
          [('Main', '==', 'm.03z8jh', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03z8jh fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 WHERE { fb:m.03z8jh fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.03z8jh'}
            Query return lines = 1
            Final Answer: {'37.8833'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 21 / 45: {
          [('Main', '==', 'm.03z8jh', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03z8jh fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 WHERE { fb:m.03z8jh fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.03z8jh'}
            Query return lines = 1
            Final Answer: {'21.2'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 22 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Héctor Camacho'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 23 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 2
            Final Answer: {'Amy Torres'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 24 / 45: {
          [('Main', '==', 'm.0lxcw', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Contestant'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 25 / 45: {
          [('Main', '==', 'm.0lxcw', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Héctor Camacho'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 26 / 45: {
          [('Main', '==', 'm.0lxcw', ['sports.boxer.matches', 'boxing.match_boxer_relationship.winner_won'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:sports.boxer.matches ?o1 . ?o1 fb:boxing.match_boxer_relationship.winner_won ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:sports.boxer.matches ?o1 . ?o1 fb:boxing.match_boxer_relationship.winner_won ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 27 / 45: {
          [('Main', '==', 'm.0lxcw', ['base.schemastaging.athlete_extra.coaches', 'base.schemastaging.coach_athlete_relationship.coach'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:base.schemastaging.athlete_extra.coaches ?o1 . ?o1 fb:base.schemastaging.coach_athlete_relationship.coach ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:base.schemastaging.athlete_extra.coaches ?o1 . ?o1 fb:base.schemastaging.coach_athlete_relationship.coach ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Angelo Dundee'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 28 / 45: {
          [('Main', '==', 'm.0lxcw', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 2
            Final Answer: {'ESPN: J.C. Chavez', 'Cartel 1882'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 29 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 2
            Final Answer: {'Bayamón', 'Manhattan'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 30 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0lxcw fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 WHERE { fb:m.0lxcw fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'1991'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 31 / 45: {
          [('Main', '==', 'm.0lxcw', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'ESPN: J.C. Chavez'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 32 / 45: {
          [('Main', '==', 'm.0lxcw', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Héctor Camacho'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 33 / 45: {
          [('Main', '==', 'm.0lxcw', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.seasons'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.seasons ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.seasons ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Mira Quien Baila'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 34 / 45: {
          [('Main', '==', 'm.0lxcw', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Boxing'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 35 / 45: {
          [('Main', '==', 'm.0lxcw', ['sports.boxer.matches', 'boxing.match_boxer_relationship.match'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:sports.boxer.matches ?o1 . ?o1 fb:boxing.match_boxer_relationship.match ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:sports.boxer.matches ?o1 . ?o1 fb:boxing.match_boxer_relationship.match ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 2
            Final Answer: {'Hector Camacho-Perry Ballard', 'Hector Camacho vs. Edwin Rosario'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 36 / 45: {
          [('Main', '==', 'm.0lxcw', ['base.schemastaging.athlete_extra.coaches', 'base.schemastaging.coach_athlete_relationship.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:base.schemastaging.athlete_extra.coaches ?o1 . ?o1 fb:base.schemastaging.coach_athlete_relationship.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:base.schemastaging.athlete_extra.coaches ?o1 . ?o1 fb:base.schemastaging.coach_athlete_relationship.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Héctor Camacho'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 37 / 45: {
          [('Main', '==', 'm.0lxcw', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Carlos Rodriguez'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 38 / 45: {
          [('Main', '==', 'm.0lxcw', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Héctor Camacho'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 39 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0lxcw fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 WHERE { fb:m.0lxcw fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'2001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 40 / 45: {
          [('Main', '==', 'm.0lxcw', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 41 / 45: {
          [('Main', '==', 'm.0lxcw', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Héctor Camacho'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 42 / 45: {
          [('Main', '==', 'm.0lxcw', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0lxcw fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.from ?o2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 WHERE { fb:m.0lxcw fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 43 / 45: {
          [('Main', '==', 'm.0lxcw', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0lxcw fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.to ?o2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 WHERE { fb:m.0lxcw fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 44 / 45: {
          [('Main', '==', 'm.0lxcw', ['sports.boxer.matches', 'boxing.match_boxer_relationship.boxer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:sports.boxer.matches ?o1 . ?o1 fb:boxing.match_boxer_relationship.boxer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:sports.boxer.matches ?o1 . ?o1 fb:boxing.match_boxer_relationship.boxer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Héctor Camacho'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        44 / 45 coarse schemas kept with ans_size > 0.
      } [0.535s]
      Coarse level ended, resulting in 44 schemas.
    } [0.766s]
    Type level searching (total types = 10): {
      Current: 0 / 44
[{'location.location'}]
[{'type.datetime'}]
[{'type.float'}]
[{'location.location'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'type.float'}]
[{'location.location'}]
[{'type.float'}]
[{'medicine.disease'}]
[{'people.person'}]
[{'type.float'}]
[{'people.cause_of_death'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'sports.boxing_weight_division'}]
[{'sports.boxing_stance'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'sports.pro_sports_played'}, {'sports.pro_athlete'}]
[{'base.schemastaging.coach_athlete_relationship'}, {'base.schemastaging.sports_coach'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_series_season'}]
[{'sports.pro_sports_played'}, {'sports.sport'}]
[{'boxing.match_boxer_relationship'}, {'boxing.boxing_match'}]
[{'base.schemastaging.coach_athlete_relationship'}, {'base.schemastaging.athlete_extra'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'tv.tv_regular_personal_appearance'}, {'type.datetime'}]
[{'tv.tv_regular_personal_appearance'}, {'type.datetime'}]
[{'boxing.match_boxer_relationship'}, {'sports.boxer'}]
      15 typed schemas retrieved from 44 coarse schemas.
      Calculating F1 for 15 typed schemas: {
        Current: 0 / 15
        Checking schema 0 / 15: {
          [('Main', '==', 'm.03z8jh', ['location.location.containedby']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03z8jh fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03z8jh fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03z8jh'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 1 / 15: {
          [('Main', '==', 'm.03z8jh', ['location.location.containedby']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03z8jh fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03z8jh fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03z8jh'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 15: {
          [('Main', '==', 'm.03z8jh', ['location.location.containedby']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03z8jh fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03z8jh fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03z8jh'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 3 / 15: {
          [('Main', '==', 'm.0j3dznn', ['people.person.place_of_birth']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j3dznn fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j3dznn fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j3dznn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 4 / 15: {
          [('Main', '==', 'm.0j3dznn', ['people.person.place_of_birth']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j3dznn fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j3dznn fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j3dznn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 5 / 15: {
          [('Main', '==', 'm.0j3dznn', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j3dznn fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j3dznn fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j3dznn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 6 / 15: {
          [('Main', '==', 'm.0lxcw', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 7 / 15: {
          [('Main', '==', 'm.0lxcw', ['people.deceased_person.place_of_death']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 8 / 15: {
          [('Main', '==', 'm.0lxcw', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 9 / 15: {
          [('Main', '==', 'm.0lxcw', ['people.person.place_of_birth']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 15: {
          [('Main', '==', 'm.0lxcw', ['people.person.place_of_birth']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 11 / 15: {
          [('Main', '==', 'm.0lxcw', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0lxcw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 12 / 15: {
          [('Main', '==', 'm.0lxcw', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 1
            Final Answer: {'Manhattan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 13 / 15: {
          [('Main', '==', 'm.0lxcw', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 14 / 15: {
          [('Main', '==', 'm.0lxcw', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:08] Q_Schema Request: {
            WebQ_1598|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0lxcw fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0lxcw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        1 / 15 typed schemas kept with ans_size > 0.
      } [0.125s]
      Typed level ended, resulting in 45 schemas.
    } [0.129s]
    Time level searching (total times = 0): {
      Current: 0 / 45
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
self.var_time_preds: [{'base.schemastaging.coach_athlete_relationship.to', 'base.schemastaging.coach_athlete_relationship.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
self.var_time_preds: [{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.schemastaging.coach_athlete_relationship.to', 'base.schemastaging.coach_athlete_relationship.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
      0 timed schemas retrieved from 45 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 45 schemas.
    } [0.001s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 45
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set(), set()]
[set(), set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, {'sports.pro_athlete.career_end', 'sports.pro_athlete.career_start'}]
[{'base.schemastaging.coach_athlete_relationship.to', 'base.schemastaging.coach_athlete_relationship.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
[{'sports.pro_sports_played.career_start', 'sports.pro_sports_played.career_end'}, set()]
[set(), set()]
[{'base.schemastaging.coach_athlete_relationship.to', 'base.schemastaging.coach_athlete_relationship.from'}, set()]
[set(), set()]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[{'tv.tv_regular_personal_appearance.from', 'tv.tv_regular_personal_appearance.to'}, set()]
[set(), set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
      0 ordinal schemas retrieved from 45 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 45 schemas.
    } [0.001s]
    [2020-12-03 14:36:08] buffer saved.
    45 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1598_schema].
  } [2.839s]
  Entering Q 1599 / 5810 [b'what has ian somerhalder played in?']: {
    Show 1 E + 10 T + 0 Tm + 0 Ord = 11 linkings: {
      #00 Entity: [2, 4) (ian somerhalder) == m.044mvs (Ian_Somerhalder) {'score': 27024.171899, 'source': 0.0}
      #01 Type: [4, 5) (played) == sports.pro_sports_played (sports played) {'sim': 0.790985}
      #02 Type: [4, 5) (played) == theater.play (play) {'sim': 0.787711}
      #03 Type: [4, 5) (played) == games.playing_card_game_play_direction (playing card game play direction) {'sim': 0.728862}
      #04 Type: [0, 2) (what has) == business.company_name_change (organization name change) {'sim': 0.698398}
      #05 Type: [0, 2) (what has) == media_common.lost_work (lost work) {'sim': 0.695888}
      #06 Type: [4, 5) (played) == games.playing_card_game (playing card game) {'sim': 0.690014}
      #07 Type: [5, 7) (in ?) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.689696}
      #08 Type: [0, 2) (what has) == medicine.notable_person_with_medical_condition (public figure with medical condition) {'sim': 0.686216}
      #09 Type: [5, 6) (in) == fictional_universe.school_in_fiction (school in fiction) {'sim': 0.677541}
      #10 Type: [0, 2) (what has) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.67276}
    } [0.000s]
    11 link data save to file.
    Coarse level searching (total entities = 1): {
      [Len-1||F1/1] (2020-12-03 14:36:10) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.044mvs ?p1 ?o1 . }
        [2020-12-03 14:36:10] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.044mvs ?p1 ?o1 . }
          Query return lines = 30
        } [0.035s]
        Filt_Query_Ret = 10 / 30 ( 0.036s)
      } [0.036s]
      [Len-2||F1/1] (2020-12-03 14:36:10) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.044mvs ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:36:10] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.044mvs ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 420
        } [0.075s]
        Filt_Query_Ret = 37 / 420 ( 0.076s)
      } [0.077s]
      47 coarse schemas retrieved from scratch.
      Calculating F1 for 47 coarse schemas: {
        Current: 0 / 47
        Checking schema 0 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.044mvs fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 WHERE { fb:m.044mvs fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'1978'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 2 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 3
            Final Answer: {'English American', 'Irish American', 'French American'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 3 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 2
            Final Answer: {'Edna Somerhalder', 'Robert Somerhalder'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 4 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Catholicism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 5 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.044mvs fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 WHERE { fb:m.044mvs fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'1.77'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 6 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.044mvs fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 WHERE { fb:m.044mvs fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'71'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 7 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 2
            Final Answer: {'Model', 'Actor'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 8 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 9 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Covington'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 10 / 47: {
          [('Main', '==', 'm.044mvs', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'4e+06'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 11 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:10] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Ian Somerhalder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 12 / 47: {
          [('Main', '==', 'm.044mvs', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 2
            Final Answer: {'Screen Actors Guild Award for Outstanding Performance by an Ensemble in a Drama Series', "People's Choice Award for Favorite TV Drama Actor"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 13 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 3
            Final Answer: {'Robert Somerhalder', 'Robyn Somerhalder'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 14 / 47: {
          [('Main', '==', 'm.044mvs', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 6
            Final Answer: {'Young Americans', 'Smallville', 'Lost', 'Tell Me You Love Me', 'Fearless', 'The Vampire Diaries'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 15 / 47: {
          [('Main', '==', 'm.044mvs', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.seasons'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.seasons ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 6
            Final Answer: {'The Vampire Diaries - Season 1', 'Smallville - Season 3', 'The Vampire Diaries - Season 4', 'The Vampire Diaries - Season 2', 'The Vampire Diaries - Season 3', 'Lost - Season 1'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 16 / 47: {
          [('Main', '==', 'm.044mvs', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 2
            Final Answer: {'2009', '2004'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 17 / 47: {
          [('Main', '==', 'm.044mvs', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 18 / 47: {
          [('Main', '==', 'm.044mvs', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'2006'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 19 / 47: {
          [('Main', '==', 'm.044mvs', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Lost'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 20 / 47: {
          [('Main', '==', 'm.044mvs', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Damon Salvatore'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 21 / 47: {
          [('Main', '==', 'm.044mvs', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 2
            Final Answer: {'Nicky Hilton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 22 / 47: {
          [('Main', '==', 'm.044mvs', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 23 / 47: {
          [('Main', '==', 'm.044mvs', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'therichest.org'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 24 / 47: {
          [('Main', '==', 'm.044mvs', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 19
            Final Answer: {'The Tournament', 'Wake', "National Lampoon's TV: The Movie", 'Life as a House', 'The Rules of Attraction', 'How to Make Love to a Woman', 'Marco Polo', 'The Lost Samaritan', 'Anatomy of a Hate Crime', 'Lost City Raiders', 'In Enemy Hands', 'Fireball', 'Celebrity', 'Changing Hearts', 'Cradlewood', 'The Anomaly', 'Fearless', 'Pulse', 'The Sensation of Sight'}
            Answers = 19, P = 0.526316, R = 1.000000, F1 = 0.689655
          } [0.007s]
          Answers = 19, P = 0.526316, R = 1.000000, F1 = 0.689655
        } [0.007s]
        Checking schema 25 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 5
            Final Answer: {'Louisiana', 'New York', 'Milan', 'London', 'Paris'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 26 / 47: {
          [('Main', '==', 'm.044mvs', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 2
            Final Answer: {'Lost', 'The Vampire Diaries'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 27 / 47: {
          [('Main', '==', 'm.044mvs', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 4
            Final Answer: {'2006', '2011', '2012', '2010'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 28 / 47: {
          [('Main', '==', 'm.044mvs', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Ian Somerhalder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 29 / 47: {
          [('Main', '==', 'm.044mvs', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.to ?o2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'2004'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 30 / 47: {
          [('Main', '==', 'm.044mvs', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 2
            Final Answer: {"The Cast of 'Lost': Before They Were TV Stars", "Making 'Wake'"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 31 / 47: {
          [('Main', '==', 'm.044mvs', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 17
            Final Answer: {'Josh Holloway', "Terry O'Quinn", 'Malcolm David Kelley', 'Daniel Dae Kim', 'Emilie de Ravin', 'Matthew Fox', 'Cynthia Watros', 'Naveen Andrews', 'Maggie Grace', 'Dominic Monaghan', 'Adewale Akinnuoye-Agbaje', 'Evangeline Lilly', 'Kim Yoon-jin', 'Jorge Garcia', 'Harold Perrineau Jr.', 'Michelle Rodriguez'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 32 / 47: {
          [('Main', '==', 'm.044mvs', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'2005 Screen Actors Guild Awards'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 33 / 47: {
          [('Main', '==', 'm.044mvs', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Ian Somerhalder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 34 / 47: {
          [('Main', '==', 'm.044mvs', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'2011'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 35 / 47: {
          [('Main', '==', 'm.044mvs', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 16
            Final Answer: {'Daniel Meltzer', 'William Archer', 'Dexter', 'Jack Kubiak', 'Marco Polo', 'Jason Kelly', 'Paul Denton', 'Josh', 'Drifter', 'Danny Miller', 'Jordan Gracie', 'Lee Cooper', 'Tyler', 'Russell Henderson', 'Miles Slade'}
            Answers = 15, P = 0.066667, R = 0.100000, F1 = 0.080000
          } [0.010s]
          Answers = 15, P = 0.066667, R = 0.100000, F1 = 0.080000
        } [0.011s]
        Checking schema 36 / 47: {
          [('Main', '==', 'm.044mvs', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Ian Somerhalder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 37 / 47: {
          [('Main', '==', 'm.044mvs', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Uncredited'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 38 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {"St. Paul's School"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 39 / 47: {
          [('Main', '==', 'm.044mvs', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Ian Somerhalder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 40 / 47: {
          [('Main', '==', 'm.044mvs', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 17
            Final Answer: {'Josh Holloway', "Terry O'Quinn", 'Malcolm David Kelley', 'Daniel Dae Kim', 'Emilie de Ravin', 'Matthew Fox', 'Cynthia Watros', 'Naveen Andrews', 'Maggie Grace', 'Dominic Monaghan', 'Adewale Akinnuoye-Agbaje', 'Evangeline Lilly', 'Kim Yoon-jin', 'Jorge Garcia', 'Harold Perrineau Jr.', 'Michelle Rodriguez'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 41 / 47: {
          [('Main', '==', 'm.044mvs', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 6
            Final Answer: {'Nick', 'Hamilton Fleming', 'Damon Salvatore', 'Jordan Gracie', 'Boone Carlyle', 'Adam Knight'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 42 / 47: {
          [('Main', '==', 'm.044mvs', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Ian Somerhalder'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 43 / 47: {
          [('Main', '==', 'm.044mvs', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'Screen Actors Guild Award for Outstanding Performance by an Ensemble in a Drama Series'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 44 / 47: {
          [('Main', '==', 'm.044mvs', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 29
            Final Answer: {'Episode 7', 'Hereafter', 'Al Roker, Ian Somerhalder, Alan Alda, Huey Lewis', '162 Candles', 'Velocity', 'Episode 6', 'The Best Defense', "A Girl's Life", 'The 12th Annual Teen Choice Awards', 'Obsession', 'LA X', 'Revenge is Best Served Cold', 'Hilarie Burton, Sara Evans, Jon Voight, Al Roker', 'Ian Somerhalder, Leo Allen, Geto Boys', 'Further Instructions', 'LA X (Part 2)', 'Exposé', 'Crisis', 'Asylum', 'Matthew McConaughey/Frankie J.', 'Delete', 'Episode 8', 'Dominance', 'Episode 5', 'Episode 4', 'Abandoned', 'Episode 9', 'LA X (Part 1)', 'Episode 74'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 45 / 47: {
          [('Main', '==', 'm.044mvs', ['base.popstra.celebrity.dated', 'base.popstra.dated.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 2
            Final Answer: {'Nina Dobrev'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 46 / 47: {
          [('Main', '==', 'm.044mvs', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.date ?o2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 WHERE { fb:m.044mvs fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 1
            Final Answer: {'2003'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        47 / 47 coarse schemas kept with ans_size > 0.
      } [0.628s]
      Coarse level ended, resulting in 47 schemas.
    } [0.740s]
    Type level searching (total types = 10): {
      Current: 0 / 47
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'type.float'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_series_season'}]
[{'tv.regular_tv_appearance'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'tv.tv_guest_role'}, {'tv.tv_character'}]
[{'base.popstra.canoodled'}, {'base.popstra.celebrity'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.regular_tv_appearance'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'base.popstra.dated'}, {'base.popstra.celebrity'}]
[{'base.popstra.canoodled'}, {'type.datetime'}]
      4 typed schemas retrieved from 47 coarse schemas.
      Calculating F1 for 4 typed schemas: {
        Current: 0 / 4
        Checking schema 0 / 4: {
          [('Main', '==', 'm.044mvs', ['people.person.parents']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.044mvs fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 1 / 4: {
          [('Main', '==', 'm.044mvs', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 2 / 4: {
          [('Main', '==', 'm.044mvs', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 3 / 4: {
          [('Main', '==', 'm.044mvs', ['people.person.education', 'education.education.student']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:36:11] Q_Schema Request: {
            WebQ_1599|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.044mvs fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.044mvs'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        0 / 4 typed schemas kept with ans_size > 0.
      } [0.069s]
      Typed level ended, resulting in 47 schemas.
    } [0.072s]
    Time level searching (total times = 0): {
      Current: 0 / 47
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.canoodled.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
self.var_time_preds: [{'base.popstra.canoodled.date'}, set()]
      0 timed schemas retrieved from 47 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 47 schemas.
    } [0.001s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 47
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'people.person.date_of_birth'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, {'tv.tv_series_season.from', 'tv.tv_series_season.to'}]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'base.popstra.canoodled.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.from', 'tv.regular_tv_appearance.to'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'tv.tv_series_episode.air_date'}]
[{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
[{'base.popstra.canoodled.date'}, set()]
      0 ordinal schemas retrieved from 47 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 47 schemas.
    } [0.001s]
    [2020-12-03 14:36:11] buffer saved.
    47 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/1500-1599/1599_schema].
  } [5.415s]
  All Done.
} [20m54.007s]
Time tracker display: {
              Name	Avg. (s)	    Freq	Time (s)
          single_q	 73.6308	      17	1251.7240
   query_q_sc_stat	  0.0118	    2829	 33.5125
       coarse_comb	  1.8682	      17	 31.7589
      query_sparql	  0.1087	     289	 31.4259
         coarse_F1	  1.4294	      17	 24.3000
           linking	  0.5802	      17	  9.8626
              type	  0.6160	      16	  9.8565
          typed_F1	  0.2930	      17	  4.9805
        ordinal_F1	  0.1811	      17	  3.0792
          timed_F1	  0.0825	      17	  1.4029
        timed_comb	  0.0203	      17	  0.3444
        typed_comb	  0.0080	      17	  0.1367
          ord_comb	  0.0073	      17	  0.1249
              time	  0.0000	      16	  0.0006
           ordinal	  0.0000	      16	  0.0001
            entity	  0.0000	      16	  0.0001
} [0.000s]
