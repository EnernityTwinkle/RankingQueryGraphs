[smart_candgen] ...  {
  Loading Webquestions from cPickle ...
  5810 WebQuesetions loaded.
args.linking_only: False
  QueryService initialize ...  {
    Loading ComplexQuestions from cPickle ...
    2100 ComplexQuestions loaded.
    Loading Webquestions from cPickle ...
    5810 WebQuesetions loaded.
    7910 QA loaded from WebQ & CompQ.
    Loading SPARQL cache ... {
      1741 SPARQL cache loaded.
    } [0.319s]
    Loading <q_sc, stat> cache ... {
      16412 <q_sc, stat> cache loaded.
    } [0.502s]
    Initialize complete.
  } [0.866s]
  Loading <word, idx> pairs from [../../data/word_emb_in_use/word_emb.indices] ... 
  84320 <word, idx> loaded.
  Loading word embeddings for [../../data/word_emb_in_use/word_emb.glove_300.npy] ...
  (84320, 300) word embedding loaded.
  44 dependency name loaded.
  GlobalLinker initializing ...  {
    201 ordinal & 235 superlative words loaded.
    Load entity linking table from [../../data/linkings/WebQ/webq.all.top3_source_ensemble_data.q_links]: {
      5810 questions of link data loaded.
    } [0.256s]
    FBHelper: 12237 type names loaded.
    12237 type embedding loaded.
    Initialize complete.
  } [0.862s]
  simple type match = False
  simple time match = False
  Entering Q 5400 / 5810 [b'what ocean is around hawaii?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5401 / 5810 [b'what is the most common language spoken in argentina?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5402 / 5810 [b'what language tunisia?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5403 / 5810 [b'what are some inventions that leonardo da vinci invented?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5404 / 5810 [b'who wrote st trinians?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5405 / 5810 [b'what are malaysian coins called?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5406 / 5810 [b'what type government does mexico have?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5407 / 5810 [b'what currency does dominican republic take?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5408 / 5810 [b'what inspired michael jackson to become a singer?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5409 / 5810 [b'who is the texas state senator?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5410 / 5810 [b'what to visit in london city?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5411 / 5810 [b'what genre of art is the mona lisa?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5412 / 5810 [b'who does peter griffin voice?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5413 / 5810 [b'when did tony romo got drafted?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5414 / 5810 [b'what does anne frank died of?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5415 / 5810 [b'what are the catholic holy days?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5416 / 5810 [b'what language is most commonly spoken in belgium?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5417 / 5810 [b'where did frank baum die?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5418 / 5810 [b'where is tunis on a map?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5419 / 5810 [b'who is nicolas cage married too?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5420 / 5810 [b'who are the members of the supreme court 2009?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5421 / 5810 [b"who does the voice for chucky in child's play?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5422 / 5810 [b'what did mary wollstonecraft fight for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5423 / 5810 [b'what is new france?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5424 / 5810 [b'what year did the phillies begin?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5425 / 5810 [b'what country is dyson made?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5426 / 5810 [b'what language does iceland speak?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5427 / 5810 [b'what was dr seuss real name?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5428 / 5810 [b'what did gloria steinem founded?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5429 / 5810 [b'where to eat crawfish in beaumont?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5430 / 5810 [b'what language they speak in scotland?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5431 / 5810 [b'what boarding school did mark zuckerberg go to?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5432 / 5810 [b'what are bigos?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5433 / 5810 [b"where are ike and tina turner's children?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5434 / 5810 [b'what are some of leonardo da vinci most famous inventions?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5435 / 5810 [b'when did shaq come into the nba?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5436 / 5810 [b'where do they speak turkish?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5437 / 5810 [b'what is the zip code for walnut creek?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5438 / 5810 [b'who will the cavaliers draft 2012?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5439 / 5810 [b'who was the voice of darth vader in the original star wars movie?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5440 / 5810 [b'where is english spoken around the world?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5441 / 5810 [b'what music did louis armstrong play?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5442 / 5810 [b'what form of currency does germany use?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5443 / 5810 [b'where is the latin language from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5444 / 5810 [b'what are the top tourist attractions in rome?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5445 / 5810 [b'who were the children of king solomon?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5446 / 5810 [b'what did andy irons die from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5447 / 5810 [b'where is auburn university located?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5448 / 5810 [b'who is tatyana ali parents?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5449 / 5810 [b'where did leif ericson grow up?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5450 / 5810 [b'what language do the maasai speak?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5451 / 5810 [b'what political party was hitler in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5452 / 5810 [b'who is the leader of north korea today?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5453 / 5810 [b'where do the appalachian mountains run through?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5454 / 5810 [b'what money does spain use?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5455 / 5810 [b'where was terry waite born?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5456 / 5810 [b'what country did the battle of san juan hill take place?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5457 / 5810 [b'what kind of government does the united states have currently?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5458 / 5810 [b'when was the last time the orioles won the world series?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5459 / 5810 [b'what did shakespeare learn in grammar school?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5460 / 5810 [b'who did ben stiller date?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5461 / 5810 [b'what is the most common language in norway?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5462 / 5810 [b'what influenced william shakespeare to start writing?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5463 / 5810 [b'where did benjamin franklin went to school?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5464 / 5810 [b'who is the governor of arizona 2009?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5465 / 5810 [b'what movies has spike lee made?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5466 / 5810 [b'what did bernie mac died of?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5467 / 5810 [b'what countries does the arctic circle run through?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5468 / 5810 [b'where is electrolux based?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5469 / 5810 [b'what is houston timezone?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5470 / 5810 [b'where do italy people live?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5471 / 5810 [b'where did russians originate?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5472 / 5810 [b"what was shakespeare's wife called?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5473 / 5810 [b'when did truman become president?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5474 / 5810 [b'what did ferdinand magellan do?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5475 / 5810 [b'when was abraham lincoln declared president?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5476 / 5810 [b'where do burmese cats originate from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5477 / 5810 [b'who played kirk?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5478 / 5810 [b'where is mt st helens located?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5479 / 5810 [b'what county is st paul minnesota in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5480 / 5810 [b'who was king henry viii son?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5481 / 5810 [b'who does david beckham play for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5482 / 5810 [b'who won the battle of gettysburg?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5483 / 5810 [b'where was franz ferdinand from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5484 / 5810 [b'what was benedict arnold most famous for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5485 / 5810 [b'who plays lex luthor on smallville?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5486 / 5810 [b'what are dallas cowboys colors?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5487 / 5810 [b'what does bentley mean?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5488 / 5810 [b'what is the currency of the czech republic?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5489 / 5810 [b'when was the last time the la kings won a playoff series?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5490 / 5810 [b'where did spencer pratt go to school?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5491 / 5810 [b'what disease did abraham lincoln had?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5492 / 5810 [b'who is vancouver canucks coach?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5493 / 5810 [b'where did cs lewis wrote?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5494 / 5810 [b'what is carlos pena jr nationality?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5495 / 5810 [b'what did thomas jefferson do before he became president?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 5496 / 5810 [b'what language do the cheyenne speak?']: {
    Read 15 links from file.
    Show 5 E + 10 T + 0 Tm + 0 Ord = 15 linkings: {
      #00 Entity: [1, 2) (language) == m.03fr0y (university of south carolina upstate) {'score': 1061.164321, 'source': 2.0}
      #01 Entity: [1, 2) (language) == m.04g7d (language) {'score': 19469.56975, 'source': 2.0}
      #02 Entity: [4, 5) (cheyenne) == m.0886gq (Cheyenne_Jackson) {'score': 1.250984, 'source': 1.0}
      #03 Entity: [4, 5) (cheyenne) == m.09z601 (Cheyenne_Kimball) {'score': 1.447379, 'source': 1.0}
      #04 Entity: [4, 5) (cheyenne) == m.0fw3f (Cheyenne%2c_Wyoming) {'score': 36.30255, 'source': 0.0}
      #05 Type: [1, 2) (language) == language.language_dialect (language dialect) {'sim': 0.917232}
      #06 Type: [1, 2) (language) == computer.programming_language (programming language) {'sim': 0.872471}
      #07 Type: [0, 2) (what language) == language.language_writing_type (language writing type) {'sim': 0.84238}
      #08 Type: [0, 2) (what language) == language.language_writing_system (language writing system) {'sim': 0.839229}
      #09 Type: [1, 2) (language) == language.human_language (human language) {'sim': 0.830001}
      #10 Type: [1, 2) (language) == computer.programming_language_paradigm (programming language paradigm) {'sim': 0.812534}
      #11 Type: [1, 2) (language) == language.language_creator (language creator) {'sim': 0.804178}
      #12 Type: [1, 2) (language) == language.language_family (language family) {'sim': 0.802832}
      #13 Type: [0, 2) (what language) == fictional_universe.fictional_language (language in fiction) {'sim': 0.793377}
      #14 Type: [1, 2) (language) == computer.programming_language_developer (programming language developer) {'sim': 0.76792}
    } [0.000s]
    Coarse level searching (total entities = 5): {
      [Len-1||F1/5] (2020-12-03 14:17:20) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03fr0y ?p1 ?o1 . }
        [2020-12-03 14:17:20] SPARQL hit!
        FBHelper: 66554 domain + 65935 range info loaded.
        FBHelper: 1729 mediator types loaded.
        Filt_Query_Ret = 8 / 28 ( 0.177s)
        FBHelper: 11388 inverse predicate info loaded.
        [Len-1||F1/5||3/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03fr0y ?p1 ?o1 . ?o1 ?p2 fb:m.0886gq . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F1/5||4/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03fr0y ?p1 ?o1 . ?o1 ?p2 fb:m.09z601 . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F1/5||5/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03fr0y ?p1 ?o1 . ?o1 ?p2 fb:m.0fw3f . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 1 / 1 ( 0.000s)
        } [0.000s]
      } [0.194s]
      [Len-1||F2/5] (2020-12-03 14:17:20) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.04g7d ?p1 ?o1 . }
        [2020-12-03 14:17:20] SPARQL hit!
        Filt_Query_Ret = 4 / 14 ( 0.000s)
        [Len-1||F2/5||3/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04g7d ?p1 ?o1 . ?o1 ?p2 fb:m.0886gq . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F2/5||4/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04g7d ?p1 ?o1 . ?o1 ?p2 fb:m.09z601 . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-1||F2/5||5/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04g7d ?p1 ?o1 . ?o1 ?p2 fb:m.0fw3f . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.000s]
      [Len-1||F3/5] (2020-12-03 14:17:20) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0886gq ?p1 ?o1 . }
        [2020-12-03 14:17:20] SPARQL hit!
        Filt_Query_Ret = 8 / 24 ( 0.000s)
        [Len-1||F3/5||1/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0886gq ?p1 ?o1 . ?o1 ?p2 fb:m.03fr0y . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 1 / 1 ( 0.000s)
        } [0.000s]
        [Len-1||F3/5||2/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0886gq ?p1 ?o1 . ?o1 ?p2 fb:m.04g7d . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.000s]
      [Len-1||F4/5] (2020-12-03 14:17:20) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.09z601 ?p1 ?o1 . }
        [2020-12-03 14:17:20] SPARQL hit!
        Filt_Query_Ret = 13 / 24 ( 0.000s)
        [Len-1||F4/5||1/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09z601 ?p1 ?o1 . ?o1 ?p2 fb:m.03fr0y . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 1 / 1 ( 0.000s)
        } [0.000s]
        [Len-1||F4/5||2/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09z601 ?p1 ?o1 . ?o1 ?p2 fb:m.04g7d . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.000s]
      [Len-1||F5/5] (2020-12-03 14:17:20) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0fw3f ?p1 ?o1 . }
        [2020-12-03 14:17:20] SPARQL hit!
        Filt_Query_Ret = 15 / 33 ( 0.000s)
        [Len-1||F5/5||1/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fw3f ?p1 ?o1 . ?o1 ?p2 fb:m.03fr0y . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 2 / 2 ( 0.000s)
        } [0.000s]
        [Len-1||F5/5||2/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fw3f ?p1 ?o1 . ?o1 ?p2 fb:m.04g7d . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.001s]
      [Len-2||F1/5] (2020-12-03 14:17:20) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03fr0y ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:20] SPARQL hit!
        Filt_Query_Ret = 35 / 395 ( 0.002s)
        [Len-2||F1/5||3/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03fr0y ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0886gq . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F1/5||3/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03fr0y ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0886gq . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 1 ( 0.000s)
        } [0.000s]
        [Len-2||F1/5||4/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03fr0y ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09z601 . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F1/5||4/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03fr0y ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09z601 . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F1/5||5/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03fr0y ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0fw3f . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 182 ( 0.001s)
        } [0.001s]
        [Len-2||F1/5||5/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03fr0y ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0fw3f . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 7 ( 0.000s)
        } [0.000s]
      } [0.003s]
      [Len-2||F2/5] (2020-12-03 14:17:20) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04g7d ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:20] SPARQL hit!
        Filt_Query_Ret = 2 / 160 ( 0.001s)
        [Len-2||F2/5||3/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04g7d ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0886gq . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F2/5||3/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04g7d ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0886gq . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F2/5||4/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04g7d ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.09z601 . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F2/5||4/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04g7d ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.09z601 . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F2/5||5/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04g7d ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0fw3f . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F2/5||5/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04g7d ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0fw3f . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.001s]
      [Len-2||F3/5] (2020-12-03 14:17:20) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0886gq ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:20] SPARQL hit!
        Filt_Query_Ret = 21 / 381 ( 0.001s)
        [Len-2||F3/5||1/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0886gq ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03fr0y . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 182 ( 0.001s)
        } [0.001s]
        [Len-2||F3/5||1/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0886gq ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03fr0y . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 1 ( 0.000s)
        } [0.000s]
        [Len-2||F3/5||2/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0886gq ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04g7d . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F3/5||2/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0886gq ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04g7d . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.003s]
      [Len-2||F4/5] (2020-12-03 14:17:20) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09z601 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:20] SPARQL hit!
        Filt_Query_Ret = 9 / 493 ( 0.002s)
        [Len-2||F4/5||1/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09z601 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03fr0y . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 182 ( 0.001s)
        } [0.001s]
        [Len-2||F4/5||1/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09z601 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03fr0y . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 1 ( 0.000s)
        } [0.000s]
        [Len-2||F4/5||2/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09z601 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04g7d . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F4/5||2/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.09z601 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04g7d . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.003s]
      [Len-2||F5/5] (2020-12-03 14:17:20) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fw3f ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:20] SPARQL hit!
        Filt_Query_Ret = 28 / 818 ( 0.003s)
        [Len-2||F5/5||1/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fw3f ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03fr0y . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 364 ( 0.001s)
        } [0.001s]
        [Len-2||F5/5||1/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fw3f ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03fr0y . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 9 ( 0.000s)
        } [0.000s]
        [Len-2||F5/5||2/5-1] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fw3f ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04g7d . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F5/5||2/5-2] (2020-12-03 14:17:20) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fw3f ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04g7d . }
          [2020-12-03 14:17:20] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.005s]
      148 coarse schemas retrieved from scratch.
      Calculating F1 for 148 coarse schemas: {
        Current: 0 / 148
        Checking schema 0 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution.school_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03fr0y fb:education.educational_institution.school_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 1 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution.colors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03fr0y fb:education.educational_institution.colors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 2 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution.mascot'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03fr0y fb:education.educational_institution.mascot ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 3 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution_campus.educational_institution'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03fr0y fb:education.educational_institution_campus.educational_institution ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 4 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03fr0y fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 5 / 148: {
          [('Main', '==', 'm.03fr0y', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03fr0y fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 6 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution.campuses'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03fr0y fb:education.educational_institution.campuses ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 7 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution.sports_teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03fr0y fb:education.educational_institution.sports_teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 8 / 148: {
          [('Main', '==', 'm.03fr0y', ['location.location.containedby']), ('Entity', '==', 'm.0fw3f', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03fr0y fb:location.location.containedby ?o1 . ?o1 fb:location.location.contains fb:m.0fw3f . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 9 / 148: {
          [('Main', '==', 'm.04g7d', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04g7d fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 87, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 10 / 148: {
          [('Main', '==', 'm.04g7d', ['base.database.database_topic.database_s_for_this_topic'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04g7d fb:base.database.database_topic.database_s_for_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 11 / 148: {
          [('Main', '==', 'm.04g7d', ['user.alexander.philosophy.subject.philosophers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04g7d fb:user.alexander.philosophy.subject.philosophers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 12 / 148: {
          [('Main', '==', 'm.04g7d', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04g7d fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 13 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0886gq fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 14 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0886gq fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 15 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0886gq fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 16 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0886gq fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 17 / 148: {
          [('Main', '==', 'm.0886gq', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0886gq fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 18 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0886gq fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 19 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0886gq fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 20 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0886gq fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.nationality']), ('Entity', '==', 'm.03fr0y', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0886gq fb:people.person.nationality ?o1 . ?o1 fb:location.location.contains fb:m.03fr0y . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 22 / 148: {
          [('Main', '==', 'm.09z601', ['music.artist.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 23 / 148: {
          [('Main', '==', 'm.09z601', ['music.artist.label'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:music.artist.label ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 24 / 148: {
          [('Main', '==', 'm.09z601', ['broadcast.artist.content'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:broadcast.artist.content ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 25 / 148: {
          [('Main', '==', 'm.09z601', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.09z601 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 26 / 148: {
          [('Main', '==', 'm.09z601', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 27 / 148: {
          [('Main', '==', 'm.09z601', ['music.group_member.instruments_played'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:music.group_member.instruments_played ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 28 / 148: {
          [('Main', '==', 'm.09z601', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 29 / 148: {
          [('Main', '==', 'm.09z601', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 30 / 148: {
          [('Main', '==', 'm.09z601', ['music.artist.origin'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:music.artist.origin ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 31 / 148: {
          [('Main', '==', 'm.09z601', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 32 / 148: {
          [('Main', '==', 'm.09z601', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 33 / 148: {
          [('Main', '==', 'm.09z601', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 34 / 148: {
          [('Main', '==', 'm.09z601', ['music.producer.tracks_produced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:music.producer.tracks_produced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 35 / 148: {
          [('Main', '==', 'm.09z601', ['people.person.nationality']), ('Entity', '==', 'm.03fr0y', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09z601 fb:people.person.nationality ?o1 . ?o1 fb:location.location.contains fb:m.03fr0y . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 36 / 148: {
          [('Main', '==', 'm.0fw3f', ['travel.travel_destination.tourist_attractions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 37 / 148: {
          [('Main', '==', 'm.0fw3f', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 38 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 56, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 39 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_county_place.county'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:location.hud_county_place.county ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 40 / 148: {
          [('Main', '==', 'm.0fw3f', ['base.biblioness.bibs_location.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 41 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 42 / 148: {
          [('Main', '==', 'm.0fw3f', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 43 / 148: {
          [('Main', '==', 'm.0fw3f', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 44 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_county_place.place'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 45 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.citytown.postal_codes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:location.citytown.postal_codes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 46 / 148: {
          [('Main', '==', 'm.0fw3f', ['base.biblioness.bibs_location.state'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:base.biblioness.bibs_location.state ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 47 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 48 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0fw3f fb:location.location.area ?o1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 49 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 50 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.location.nearby_airports'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 51 / 148: {
          [('Main', '==', 'm.0fw3f', ['base.biblioness.bibs_location.country']), ('Entity', '==', 'm.03fr0y', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:location.location.contains fb:m.03fr0y . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 52 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.location.containedby']), ('Entity', '==', 'm.03fr0y', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:location.location.containedby ?o1 . ?o1 fb:location.location.contains fb:m.03fr0y . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 53 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.number_of_undergraduates', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 54 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.number_of_postgraduates', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.university.number_of_postgraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 55 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution.faculty', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 56 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.domestic_tuition', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.university.domestic_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 57 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.local_tuition', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.university.local_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 58 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 59 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 60 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution.students_graduates', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 61 / 148: {
          [('Main', '==', 'm.03fr0y', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 62 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.parent', 'organization.organization_relationship.child'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.parent ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 63 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.leadership', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 64 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.acceptance_rate', 'education.acceptance_rate.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 65 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.number_of_postgraduates', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.university.number_of_postgraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 66 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.number_of_undergraduates', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 67 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution.faculty', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 68 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.domestic_tuition', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:education.university.domestic_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 69 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.local_tuition', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:education.university.local_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 70 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 71 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.headquarters', 'location.mailing_address.street_address'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 72 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.headquarters', 'location.mailing_address.state_province_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 73 / 148: {
          [('Main', '==', 'm.03fr0y', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 74 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.leadership', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 75 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.acceptance_rate', 'education.acceptance_rate.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.rate ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 76 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.domestic_tuition', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.university.domestic_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 77 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.university.local_tuition', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:education.university.local_tuition ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 78 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 79 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.headquarters', 'location.mailing_address.postal_code'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 80 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.headquarters', 'location.mailing_address.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 81 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution.students_graduates', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 82 / 148: {
          [('Main', '==', 'm.03fr0y', ['education.educational_institution.students_graduates', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 83 / 148: {
          [('Main', '==', 'm.03fr0y', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 84 / 148: {
          [('Main', '==', 'm.03fr0y', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03fr0y fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 85 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.parent', 'organization.organization_relationship.parent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.parent ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 86 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.leadership', 'organization.leadership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 87 / 148: {
          [('Main', '==', 'm.03fr0y', ['organization.organization.leadership', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03fr0y fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 88 / 148: {
          [('Main', '==', 'm.04g7d', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04g7d fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 89 / 148: {
          [('Main', '==', 'm.04g7d', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04g7d fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 90 / 148: {
          [('Main', '==', 'm.0886gq', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 91 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 92 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 93 / 148: {
          [('Main', '==', 'm.0886gq', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 94 / 148: {
          [('Main', '==', 'm.0886gq', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 95 / 148: {
          [('Main', '==', 'm.0886gq', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 96 / 148: {
          [('Main', '==', 'm.0886gq', ['theater.theater_actor.theater_roles', 'theater.theater_role.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0886gq fb:theater.theater_actor.theater_roles ?o1 . ?o1 fb:theater.theater_role.to ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 97 / 148: {
          [('Main', '==', 'm.0886gq', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 98 / 148: {
          [('Main', '==', 'm.0886gq', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 99 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0886gq fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 100 / 148
        Checking schema 100 / 148: {
          [('Main', '==', 'm.0886gq', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 101 / 148: {
          [('Main', '==', 'm.0886gq', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 102 / 148: {
          [('Main', '==', 'm.0886gq', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 103 / 148: {
          [('Main', '==', 'm.0886gq', ['theater.theater_actor.theater_roles', 'theater.theater_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:theater.theater_actor.theater_roles ?o1 . ?o1 fb:theater.theater_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 104 / 148: {
          [('Main', '==', 'm.0886gq', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 105 / 148: {
          [('Main', '==', 'm.0886gq', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 106 / 148: {
          [('Main', '==', 'm.0886gq', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 107 / 148: {
          [('Main', '==', 'm.0886gq', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 108 / 148: {
          [('Main', '==', 'm.0886gq', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 109 / 148: {
          [('Main', '==', 'm.0886gq', ['theater.theater_actor.theater_roles', 'theater.theater_role.play'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:theater.theater_actor.theater_roles ?o1 . ?o1 fb:theater.theater_role.play ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 110 / 148: {
          [('Main', '==', 'm.0886gq', ['theater.theater_actor.theater_roles', 'theater.theater_role.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0886gq fb:theater.theater_actor.theater_roles ?o1 . ?o1 fb:theater.theater_role.from ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 111 / 148: {
          [('Main', '==', 'm.09z601', ['music.group_member.membership', 'music.group_membership.group'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09z601 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 112 / 148: {
          [('Main', '==', 'm.09z601', ['music.group_member.membership', 'music.group_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09z601 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 113 / 148: {
          [('Main', '==', 'm.09z601', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09z601 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 114 / 148: {
          [('Main', '==', 'm.09z601', ['music.group_member.membership', 'music.group_membership.start'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09z601 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.start ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 115 / 148: {
          [('Main', '==', 'm.09z601', ['music.group_member.membership', 'music.group_membership.end'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.09z601 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.end ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 116 / 148: {
          [('Main', '==', 'm.09z601', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09z601 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 117 / 148: {
          [('Main', '==', 'm.09z601', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09z601 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 118 / 148: {
          [('Main', '==', 'm.09z601', ['music.group_member.membership', 'music.group_membership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09z601 fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 119 / 148: {
          [('Main', '==', 'm.09z601', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09z601 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 120 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 121 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.total_90_day_vacant_residential_addresses', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 122 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.estimated_number_foreclosures', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 123 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.estimated_number_of_mortgages', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 124 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.hhuniv', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 125 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.total_residential_addresses', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 126 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.bls_unemployment_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.bls_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 127 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.location.geolocation', 'location.geocode.datum'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fw3f fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.datum ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 128 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.capital_of_administrative_division.capital_of', 'location.administrative_division_capital_relationship.administrative_division'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fw3f fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 129 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 130 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.total_90_day_vacant_residential_addresses', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 131 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.estimated_number_foreclosures', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 132 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.estimated_number_of_mortgages', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 133 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.hhuniv', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 134 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.total_residential_addresses', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 135 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fw3f fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 136 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.bls_unemployment_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.bls_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 137 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fw3f fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 138 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.total_90_day_vacant_residential_addresses', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 139 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.estimated_number_foreclosures', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 140 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.estimated_number_of_mortgages', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 141 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.hhuniv', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 142 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.hud_foreclosure_area.total_residential_addresses', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fw3f fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 143 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 144 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 145 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 146 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0fw3f fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 147 / 148: {
          [('Main', '==', 'm.0fw3f', ['location.capital_of_administrative_division.capital_of', 'location.administrative_division_capital_relationship.capital'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fw3f fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        144 / 148 coarse schemas kept with ans_size > 0.
      } [0.014s]
      Coarse level ended, resulting in 144 schemas.
    } [0.225s]
    Type level searching (total types = 10): {
      Current: 0 / 144
[{'education.school_category'}]
      FBHelper: 1870 sub/super type pairs loaded.
[{'visual_art.color'}]
[{'education.school_mascot'}]
[{'education.educational_institution'}]
[{'type.datetime'}]
[{'location.location'}]
[{'education.educational_institution_campus'}]
[{'sports.school_sports_team'}]
[{'location.location'}]
[{'media_common.quotation'}]
[{'base.database.database'}]
[{'user.alexander.philosophy.philosopher'}]
[{'book.written_work'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'type.float'}]
[{'music.album'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'location.country'}]
[{'music.genre'}]
[{'music.record_label'}]
[{'broadcast.content'}]
[{'type.datetime'}]
[{'location.country'}]
[{'music.instrument'}]
[{'music.album'}]
[{'music.recording'}]
[{'location.location'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'music.recording'}]
[{'location.country'}]
[{'travel.tourist_attraction'}]
[{'people.person'}]
[{'location.us_county'}]
[{'location.location'}]
[{'location.location'}]
[{'film.film'}]
[{'book.newspaper'}]
[{'location.location'}]
[{'location.postal_code'}]
[{'location.location'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'aviation.airport'}]
[{'location.location'}]
[{'location.location'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'location.mailing_address'}, {'location.location'}]
[{'education.education'}, {'education.educational_degree'}]
[{'award.ranking'}, {'type.int'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'organization.leadership'}, {'organization.role'}]
[{'education.acceptance_rate'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'location.mailing_address'}, {'location.administrative_division'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'education.acceptance_rate'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'location.mailing_address'}, {'location.postal_code'}]
[{'location.mailing_address'}, {'location.country'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_program_guest'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'tv.tv_guest_role'}, {'tv.tv_character'}]
[{'theater.theater_role'}, {'type.datetime'}]
[{'film.performance'}, {'film.film'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'people.marriage'}, {'type.datetime'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
      Current: 100 / 144
[{'theater.theater_role'}, {'theater.theater_actor'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'theater.theater_role'}, {'theater.theater_production'}]
[{'theater.theater_role'}, {'type.datetime'}]
[{'music.group_membership'}, {'music.musical_group'}]
[{'music.group_membership'}, {'music.group_member'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'music.group_membership'}, {'type.datetime'}]
[{'music.group_membership'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'music.group_membership'}, {'music.performance_role'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'location.administrative_division_capital_relationship'}, {'location.administrative_division'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.administrative_division_capital_relationship'}, {'location.capital_of_administrative_division'}]
      2 typed schemas retrieved from 144 coarse schemas.
      Calculating F1 for 2 typed schemas: {
        Current: 0 / 2
        Checking schema 0 / 2: {
          [('Main', '==', 'm.0fw3f', ['location.location.people_born_here']), ('Type', '==', 'language.language_creator', ['type.object.type'])]
          var_types: [{'language.language_creator', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fw3f fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:language.language_creator . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 1 / 2: {
          [('Main', '==', 'm.0886gq', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'language.language_creator', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'language.language_creator', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0886gq fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:language.language_creator . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:20] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        0 / 2 typed schemas kept with ans_size > 0.
      } [0.000s]
      Typed level ended, resulting in 144 schemas.
    } [0.018s]
    Time level searching (total times = 0): {
      Current: 0 / 144
      FBHelper: 31940 predicate names loaded.
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'base.database.database.launch_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'broadcast.content.production_end', 'broadcast.content.production_start'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'organization.organization_relationship.from', 'organization.organization_relationship.to', 'organization.organization_relationship.as_of_date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.as_of_date', 'organization.leadership.to', 'organization.leadership.from'}, set()]
self.var_time_preds: [{'education.acceptance_rate.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'organization.leadership.as_of_date', 'organization.leadership.to', 'organization.leadership.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'education.acceptance_rate.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'organization.organization_relationship.from', 'organization.organization_relationship.to', 'organization.organization_relationship.as_of_date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.as_of_date', 'organization.leadership.to', 'organization.leadership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'theater.theater_role.from', 'theater.theater_role.to'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [set(), set()]
      Current: 100 / 144
self.var_time_preds: [{'theater.theater_role.from', 'theater.theater_role.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'theater.theater_role.from', 'theater.theater_role.to'}, {'theater.theater_production.date_closed', 'theater.theater_production.date_opened'}]
self.var_time_preds: [{'theater.theater_role.from', 'theater.theater_role.to'}, set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
      0 timed schemas retrieved from 144 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 144 schemas.
    } [0.236s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 144
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'media_common.quotation.date'}]
[{'base.database.database.launch_date'}]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[set()]
[set()]
[set()]
[set()]
[{'music.album.release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'broadcast.content.production_end', 'broadcast.content.production_start'}]
[set()]
[set()]
[set()]
[{'music.album.release_date'}]
[{'music.recording.date'}]
[set()]
[set()]
[set()]
[set()]
[{'music.recording.date'}]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'award.ranking.year'}, set()]
[{'organization.organization_relationship.from', 'organization.organization_relationship.to', 'organization.organization_relationship.as_of_date'}, {'organization.organization.date_founded'}]
[{'organization.leadership.as_of_date', 'organization.leadership.to', 'organization.leadership.from'}, set()]
[{'education.acceptance_rate.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'award.ranking.year'}, set()]
[{'organization.leadership.as_of_date', 'organization.leadership.to', 'organization.leadership.from'}, {'organization.organization.date_founded'}]
[{'education.acceptance_rate.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'organization.organization_relationship.from', 'organization.organization_relationship.to', 'organization.organization_relationship.as_of_date'}, {'organization.organization.date_founded'}]
[{'organization.leadership.as_of_date', 'organization.leadership.to', 'organization.leadership.from'}, set()]
[set(), set()]
[set(), set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'theater.theater_role.from', 'theater.theater_role.to'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), {'film.film.initial_release_date'}]
[set(), set()]
      Current: 100 / 144
[{'theater.theater_role.from', 'theater.theater_role.to'}, set()]
[set(), set()]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), {'tv.tv_series_episode.air_date'}]
[{'theater.theater_role.from', 'theater.theater_role.to'}, {'theater.theater_production.date_closed', 'theater.theater_production.date_opened'}]
[{'theater.theater_role.from', 'theater.theater_role.to'}, set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[set(), set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[set(), set()]
[set(), set()]
[{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
      0 ordinal schemas retrieved from 144 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 144 schemas.
    } [0.003s]
    [2020-12-03 14:17:21] buffer saved.
    144 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/5400-5499/5496_schema].
  } [16.909s]
  Entering Q 5497 / 5810 [b'who was married to jane wyman?']: {
    Show 1 E + 10 T + 0 Tm + 0 Ord = 11 linkings: {
      #00 Entity: [4, 6) (jane wyman) == m.01933d (Jane_Wyman) {'score': 26351.276584, 'source': 0.0}
      #01 Type: [0, 3) (who was married) == people.place_lived (place lived) {'sim': 0.719002}
      #02 Type: [0, 2) (who was) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.699803}
      #03 Type: [0, 2) (who was) == media_common.lost_work (lost work) {'sim': 0.698797}
      #04 Type: [2, 3) (married) == fictional_universe.marriage_of_fictional_characters (marriage) {'sim': 0.686736}
      #05 Type: [2, 3) (married) == people.marriage (marriage) {'sim': 0.686736}
      #06 Type: [0, 3) (who was married) == people.family_name (family name) {'sim': 0.644892}
      #07 Type: [0, 3) (who was married) == people.deceased_person (deceased person) {'sim': 0.644537}
      #08 Type: [3, 4) (to) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.625839}
      #09 Type: [0, 2) (who was) == people.cause_of_death (cause of death) {'sim': 0.625593}
      #10 Type: [0, 2) (who was) == film.person_or_entity_appearing_in_film (person or entity appearing in film) {'sim': 0.620625}
    } [0.000s]
    11 link data save to file.
    Coarse level searching (total entities = 1): {
      [Len-1||F1/1] (2020-12-03 14:17:38) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01933d ?p1 ?o1 . }
        [2020-12-03 14:17:38] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01933d ?p1 ?o1 . }
          Query return lines = 35
        } [0.007s]
        Filt_Query_Ret = 15 / 35 ( 0.007s)
      } [0.007s]
      [Len-2||F1/1] (2020-12-03 14:17:38) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01933d ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:38] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01933d ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 503
        } [0.155s]
        Filt_Query_Ret = 35 / 503 ( 0.157s)
      } [0.157s]
      50 coarse schemas retrieved from scratch.
      Calculating F1 for 50 coarse schemas: {
        Current: 0 / 50
        Checking schema 0 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01933d fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 WHERE { fb:m.01933d fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'1917'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 1 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 2 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 2
            Final Answer: {'Manning Jefferies Mayfield', 'Gladys Hope Christian'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 3 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Catholicism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 4 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01933d fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 WHERE { fb:m.01933d fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'1.59'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 5 / 50: {
          [('Main', '==', 'm.01933d', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Rancho Mirage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 6 / 50: {
          [('Main', '==', 'm.01933d', ['people.deceased_person.place_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Forest Lawn Cemetery (Cathedral City)'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 7 / 50: {
          [('Main', '==', 'm.01933d', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 8
            Final Answer: {'In the Cool, Cool, Cool of the Evening', 'Zing a Little Zong', 'No Two People', 'No Two People (Have Ever Been So in Love)'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 8 / 50: {
          [('Main', '==', 'm.01933d', ['people.family_member.family'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.family_member.family ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.family_member.family ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Reagan Family'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 9 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 3
            Final Answer: {'Michael Reagan', 'Maureen Reagan', 'Christine Reagan'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 10 / 50: {
          [('Main', '==', 'm.01933d', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Natural causes'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 11 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 3
            Final Answer: {'Actor', 'Dancer', 'Singer'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 12 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Female'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 13 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Saint Joseph'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 14 / 50: {
          [('Main', '==', 'm.01933d', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01933d fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 WHERE { fb:m.01933d fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 15 / 50: {
          [('Main', '==', 'm.01933d', ['music.group_member.membership', 'music.group_membership.group'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Bing Crosby & Jane Wyman'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.017s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.017s]
        Checking schema 16 / 50: {
          [('Main', '==', 'm.01933d', ['music.group_member.membership', 'music.group_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Jane Wyman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 17 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'1932'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 18 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Jane Wyman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 19 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 5
            Final Answer: {'Golden Globe Award for Best Performance by an Actress In A Television Series - Drama', 'Academy Award for Actress in a Leading Role', 'Primetime Emmy Award for Outstanding Lead Actress in a Drama Series', 'Golden Globe Award for Best Actress - Drama Film', 'Golden Globe Henrietta Award for World Film Favorites'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 20 / 50: {
          [('Main', '==', 'm.01933d', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 3
            Final Answer: {'Falcon Crest', 'The Jane Wyman Show', 'Summer Playhouse'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 21 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 5
            Final Answer: {'Ernest Eugene Wyman', 'Myron Futterman', 'Fred Karger', 'Ronald Reagan'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 22 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 3
            Final Answer: {'Santa Barbara', 'Glendale', 'New Orleans'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 23 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 5
            Final Answer: {'1948', '1951', '1949', '1984', '1952'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 24 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_winner.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 25 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 3
            Final Answer: {'The Blue Veil', 'Falcon Crest', 'Johnny Belinda'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 26 / 50: {
          [('Main', '==', 'm.01933d', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 3
            Final Answer: {'Barbara Stanwyck', 'Loretta Young'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 27 / 50: {
          [('Main', '==', 'm.01933d', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Jane Wyman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 28 / 50: {
          [('Main', '==', 'm.01933d', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 41
            Final Answer: {'How to Commit Marriage', 'Here Comes the Groom', 'The Incredible Journey of Doctor Meg Laurel', 'Stage Fright', 'Lucy Gallant', 'Bon Voyage!', 'Three Guys Named Mike', 'Crime by Night', 'Larceny, Inc.', 'Kid Nightingale', 'The Yearling', 'Pollyanna', 'Tugboat Annie Sails Again', "Let's Do It Again", 'A Kiss in the Dark', 'An Angel from Texas', 'So Big', 'Night and Day', 'Holiday for Lovers', 'The Blue Veil', 'The Lost Weekend', "He Couldn't Say No", 'Magic Town', "You're in the Army Now", 'Tail Spin', 'Bad Men of Missouri', "Princess O'Rourke", 'Magnificent Obsession', 'My Favorite Spy', 'Johnny Belinda', 'The Sunday Round-Up', 'Slim', 'The Story of Will Rogers', 'All That Heaven Allows', 'Footlight Serenade', 'Smart Blonde', 'Just for You', 'The Lady Takes a Sailor', 'Brother Rat and a Baby', 'The Glass Menagerie', 'Miracle in the Rain'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 29 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Palm Springs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 30 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 7
            Final Answer: {'Falcon Crest', 'The Jane Wyman Show', 'The Yearling', 'Magnificent Obsession', 'Jane Wyman Theatre', 'The Blue Veil', 'Johnny Belinda'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 31 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 10
            Final Answer: {'1946', '1948', '1959', '1957', '1951', '1949', '1983', '1984', '1954', '1952'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 32 / 50: {
          [('Main', '==', 'm.01933d', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Jane Wyman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 33 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 5
            Final Answer: {'1961', '1937', '1933', '1952', '1940'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 34 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 2
            Final Answer: {'Gregory Peck'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 35 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 5
            Final Answer: {'9th Golden Globe Awards', '6th Golden Globe Awards', '41st Golden Globe Awards', '8th Golden Globe Awards', '21st Academy Awards'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 36 / 50: {
          [('Main', '==', 'm.01933d', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Jane Wyman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 37 / 50: {
          [('Main', '==', 'm.01933d', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 13
            Final Answer: {'Judy Craig', 'Connie', 'Dixie', 'Butte Soule', 'Elaine Benson', 'Selina DeJong', 'Mary Hathaway', 'Helen Phillips', 'Marcy Lewis', 'Ma Baxter', 'Bliss Dobson', "Stumpy's Girl", 'Eve Gill / Doris Tinsdale'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 38 / 50: {
          [('Main', '==', 'm.01933d', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Jane Wyman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 39 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 2
            Final Answer: {'University of Missouri–Columbia', 'Lafayette High School'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 40 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Jane Wyman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 41 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'1930'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 42 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 2
            Final Answer: {'Gregory Peck'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 43 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_nominee.award_nominations', 'award.award_nomination.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 44 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 5
            Final Answer: {'1965', '1955', '1948', '1938', '1935'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 45 / 50: {
          [('Main', '==', 'm.01933d', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 46 / 50: {
          [('Main', '==', 'm.01933d', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 4
            Final Answer: {'Academy Award for Actress in a Leading Role', 'Golden Globe Henrietta Award for World Film Favorites', 'Golden Globe Award for Best Actress - Drama Film', 'Golden Globe Award for Best Performance by an Actress In A Television Series - Drama'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 47 / 50: {
          [('Main', '==', 'm.01933d', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 36
            Final Answer: {'Wagon Train Mutiny', 'When Hell Froze', 'Prince of Apple Towns', 'The Deadly Guest', 'Who is Sylvia?', 'scheduled: Nelson Eddy & Gale Sherwood; Brothers Four; Wayne & Shuster', 'The Hermit', 'Aug 07, 1971', 'December 28, 1962', 'A Deadly Guest', 'The Visitor', 'Episode dated 20 December 1958', 'Death Leaves a Tip', 'Academy Award Songs', 'The American Film Institute Salute to Alfred Hitchcock', 'To See an Angel Die', 'The 31st Annual Academy Awards', 'The Desertion of Keith Ryder', 'Season 2, Episode 15', 'Why Does God Allow Men to Suffer?', 'Discovery at Fourteen', 'The 27th Annual Academy Awards', 'The 25th Annual Academy Awards', 'If I Should Die Before I Wake', 'The 24th Annual Academy Awards', 'The Doctor Willoughby Story', 'The Younger Generation', "Another Time, Another Place/Doctor Who/Gopher's Engagement", 'And Other Things I May Not See', 'EPISODE #515', 'Lady on the Brink', 'Amelia', 'The 19th Annual Academy Awards', 'Episode dated 21 November 1968', 'The 39th Annual Golden Globe Awards', 'The 21st Annual Academy Awards'}
            Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 48 / 50: {
          [('Main', '==', 'm.01933d', ['base.popstra.celebrity.dated', 'base.popstra.dated.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 2
            Final Answer: {'Cesar Romero'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 49 / 50: {
          [('Main', '==', 'm.01933d', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'The Jane Wyman Show'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        48 / 50 coarse schemas kept with ans_size > 0.
      } [0.577s]
      Coarse level ended, resulting in 48 schemas.
    } [0.741s]
    Type level searching (total types = 10): {
      Current: 0 / 48
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'location.location'}]
[{'people.place_of_interment'}]
[{'music.recording'}]
[{'people.family'}]
[{'people.person'}]
[{'people.cause_of_death'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'music.group_membership'}, {'music.musical_group'}]
[{'music.group_membership'}, {'music.group_member'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'people.marriage'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'base.popstra.dated'}, {'base.popstra.celebrity'}]
[{'tv.tv_producer_term'}, {'tv.tv_program'}]
      11 typed schemas retrieved from 48 coarse schemas.
      Calculating F1 for 11 typed schemas: {
        Current: 0 / 11
        Checking schema 0 / 11: {
          [('Main', '==', 'm.01933d', ['people.person.parents']), ('Type', '==', 'people.deceased_person', ['type.object.type'])]
          var_types: [{'people.deceased_person', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:people.deceased_person . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:people.deceased_person . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 2
            Final Answer: {'Manning Jefferies Mayfield', 'Gladys Hope Christian'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 1 / 11: {
          [('Main', '==', 'm.01933d', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 11: {
          [('Main', '==', 'm.01933d', ['people.person.children']), ('Type', '==', 'people.deceased_person', ['type.object.type'])]
          var_types: [{'people.deceased_person', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:people.deceased_person . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:people.deceased_person . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 2
            Final Answer: {'Maureen Reagan', 'Christine Reagan'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 3 / 11: {
          [('Main', '==', 'm.01933d', ['people.person.children']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 4 / 11: {
          [('Main', '==', 'm.01933d', ['people.deceased_person.cause_of_death']), ('Type', '==', 'people.cause_of_death', ['type.object.type'])]
          var_types: [{'people.cause_of_death'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.type fb:people.cause_of_death . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:38] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01933d fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.type fb:people.cause_of_death . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Natural causes'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 5 / 11: {
          [('Main', '==', 'm.01933d', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'people.deceased_person', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'people.deceased_person', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:people.deceased_person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:39] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:people.deceased_person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Jane Wyman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 6 / 11: {
          [('Main', '==', 'm.01933d', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:39] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 7 / 11: {
          [('Main', '==', 'm.01933d', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'people.deceased_person', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'people.deceased_person', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:people.deceased_person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:39] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:people.deceased_person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 5
            Final Answer: {'Ernest Eugene Wyman', 'Myron Futterman', 'Fred Karger', 'Ronald Reagan'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.084s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.084s]
        Checking schema 8 / 11: {
          [('Main', '==', 'm.01933d', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:39] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Ronald Reagan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 9 / 11: {
          [('Main', '==', 'm.01933d', ['people.person.education', 'education.education.student']), ('Type', '==', 'people.deceased_person', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.deceased_person', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:people.deceased_person . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:39] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:people.deceased_person . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 1
            Final Answer: {'Jane Wyman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 10 / 11: {
          [('Main', '==', 'm.01933d', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:39] Q_Schema Request: {
            WebQ_5497|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01933d fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01933d'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        7 / 11 typed schemas kept with ans_size > 0.
      } [0.262s]
      Typed level ended, resulting in 55 schemas.
    } [0.266s]
    Time level searching (total times = 0): {
      Current: 0 / 55
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'music.group_membership.start', 'music.group_membership.end'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'people.person.date_of_birth', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_cremation'}]
self.var_time_preds: [{'people.person.date_of_birth', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_cremation'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_cremation'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_cremation'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_cremation'}]
      0 timed schemas retrieved from 55 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 55 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 55
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[{'music.recording.date'}]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'music.group_membership.start', 'music.group_membership.end'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
[{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set(), {'tv.tv_series_episode.air_date'}]
[{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
[{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'people.person.date_of_birth', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_cremation'}]
[{'people.person.date_of_birth', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_cremation'}]
[set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_cremation'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_cremation'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth', 'people.deceased_person.date_of_burial', 'people.deceased_person.date_of_death', 'people.deceased_person.date_of_cremation'}]
      0 ordinal schemas retrieved from 55 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 55 schemas.
    } [0.001s]
    [2020-12-03 14:17:39] buffer saved.
    55 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/5400-5499/5497_schema].
  } [5.725s]
  Entering Q 5498 / 5810 [b'who played mickey in the rocky movies?']: {
    Show 6 E + 10 T + 0 Tm + 0 Ord = 16 linkings: {
      #00 Entity: [2, 3) (mickey) == m.01jx92 (Robert_Blake_(actor)) {'score': 1.351145, 'source': 1.0}
      #01 Entity: [2, 3) (mickey) == m.025s7bn (Mickey_Mouse_Clubhouse) {'score': 1.91347, 'source': 1.0}
      #02 Entity: [2, 3) (mickey) == m.057ph (Mickey_Mouse) {'score': 278.088419, 'source': 0.0}
      #03 Entity: [4, 6) (the rocky) == m.06c6l (Rocky_Mountains) {'score': 264.377332, 'source': 1.0}
      #04 Entity: [5, 6) (rocky) == m.0cf08 (rocky) {'score': 24887.476397, 'source': 2.0}
      #05 Entity: [6, 7) (movies) == m.02vxn (film) {'score': 2719.599756, 'source': 2.0}
      #06 Type: [1, 2) (played) == sports.pro_sports_played (sports played) {'sim': 0.790985}
      #07 Type: [1, 2) (played) == theater.play (play) {'sim': 0.787711}
      #08 Type: [3, 5) (in the) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.7326}
      #09 Type: [4, 5) (the) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.7314}
      #10 Type: [1, 2) (played) == games.playing_card_game_play_direction (playing card game play direction) {'sim': 0.728862}
      #11 Type: [4, 5) (the) == symbols.heraldic_variation_of_the_field (heraldic variation of the field) {'sim': 0.721294}
      #12 Type: [3, 5) (in the) == book.place_of_publication_period (place of publication period) {'sim': 0.717792}
      #13 Type: [3, 5) (in the) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.702403}
      #14 Type: [3, 5) (in the) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.702126}
      #15 Type: [1, 2) (played) == games.playing_card_game (playing card game) {'sim': 0.690014}
    } [0.000s]
    16 link data save to file.
    Coarse level searching (total entities = 6): {
      [Len-1||F1/6] (2020-12-03 14:17:43) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01jx92 ?p1 ?o1 . }
        [2020-12-03 14:17:43] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01jx92 ?p1 ?o1 . }
          Query return lines = 30
        } [0.009s]
        Filt_Query_Ret = 12 / 30 ( 0.009s)
        [Len-1||F1/6||3/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 fb:m.02vxn . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 fb:m.02vxn . }
            Query return lines = 0
          } [0.132s]
          Filt_Query_Ret = 0 / 0 ( 0.132s)
        } [0.132s]
        [Len-1||F1/6||5/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 fb:m.06c6l . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 fb:m.06c6l . }
            Query return lines = 1
          } [0.036s]
          Filt_Query_Ret = 1 / 1 ( 0.036s)
        } [0.036s]
        [Len-1||F1/6||6/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 fb:m.0cf08 . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 fb:m.0cf08 . }
            Query return lines = 0
          } [0.039s]
          Filt_Query_Ret = 0 / 0 ( 0.039s)
        } [0.039s]
      } [0.217s]
      [Len-1||F2/6] (2020-12-03 14:17:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.025s7bn ?p1 ?o1 . }
        [2020-12-03 14:17:44] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.025s7bn ?p1 ?o1 . }
          Query return lines = 20
        } [0.018s]
        Filt_Query_Ret = 10 / 20 ( 0.018s)
        [Len-1||F2/6||3/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 fb:m.02vxn . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 fb:m.02vxn . }
            Query return lines = 0
          } [0.065s]
          Filt_Query_Ret = 0 / 0 ( 0.065s)
        } [0.065s]
        [Len-1||F2/6||5/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 fb:m.06c6l . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 fb:m.06c6l . }
            Query return lines = 1
          } [0.073s]
          Filt_Query_Ret = 1 / 1 ( 0.073s)
        } [0.073s]
        [Len-1||F2/6||6/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 fb:m.0cf08 . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 fb:m.0cf08 . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
      } [0.173s]
      [Len-1||F3/6] (2020-12-03 14:17:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02vxn ?p1 ?o1 . }
        [2020-12-03 14:17:44] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02vxn ?p1 ?o1 . }
          Query return lines = 40
        } [0.010s]
        Filt_Query_Ret = 22 / 40 ( 0.010s)
        [Len-1||F3/6||1/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 fb:m.01jx92 . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 fb:m.01jx92 . }
            Query return lines = 0
          } [0.029s]
          Filt_Query_Ret = 0 / 0 ( 0.029s)
        } [0.029s]
        [Len-1||F3/6||2/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 fb:m.025s7bn . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 fb:m.025s7bn . }
            Query return lines = 0
          } [0.029s]
          Filt_Query_Ret = 0 / 0 ( 0.029s)
        } [0.029s]
        [Len-1||F3/6||4/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 fb:m.057ph . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 fb:m.057ph . }
            Query return lines = 0
          } [0.042s]
          Filt_Query_Ret = 0 / 0 ( 0.042s)
        } [0.042s]
        [Len-1||F3/6||5/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 fb:m.06c6l . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 fb:m.06c6l . }
            Query return lines = 0
          } [0.033s]
          Filt_Query_Ret = 0 / 0 ( 0.033s)
        } [0.033s]
        [Len-1||F3/6||6/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 fb:m.0cf08 . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 fb:m.0cf08 . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
      } [0.157s]
      [Len-1||F4/6] (2020-12-03 14:17:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.057ph ?p1 ?o1 . }
        [2020-12-03 14:17:44] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.057ph ?p1 ?o1 . }
          Query return lines = 24
        } [0.006s]
        Filt_Query_Ret = 9 / 24 ( 0.006s)
        [Len-1||F4/6||3/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 fb:m.02vxn . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 fb:m.02vxn . }
            Query return lines = 0
          } [0.080s]
          Filt_Query_Ret = 0 / 0 ( 0.080s)
        } [0.080s]
        [Len-1||F4/6||5/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 fb:m.06c6l . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 fb:m.06c6l . }
            Query return lines = 0
          } [0.043s]
          Filt_Query_Ret = 0 / 0 ( 0.043s)
        } [0.043s]
        [Len-1||F4/6||6/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 fb:m.0cf08 . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 fb:m.0cf08 . }
            Query return lines = 0
          } [0.026s]
          Filt_Query_Ret = 0 / 0 ( 0.026s)
        } [0.026s]
      } [0.156s]
      [Len-1||F5/6] (2020-12-03 14:17:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06c6l ?p1 ?o1 . }
        [2020-12-03 14:17:44] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.06c6l ?p1 ?o1 . }
          Query return lines = 21
        } [0.011s]
        Filt_Query_Ret = 12 / 21 ( 0.011s)
        [Len-1||F5/6||1/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 fb:m.01jx92 . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 fb:m.01jx92 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-1||F5/6||2/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 fb:m.025s7bn . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 fb:m.025s7bn . }
            Query return lines = 0
          } [0.025s]
          Filt_Query_Ret = 0 / 0 ( 0.025s)
        } [0.025s]
        [Len-1||F5/6||3/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 fb:m.02vxn . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 fb:m.02vxn . }
            Query return lines = 0
          } [0.064s]
          Filt_Query_Ret = 0 / 0 ( 0.064s)
        } [0.064s]
        [Len-1||F5/6||4/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 fb:m.057ph . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 fb:m.057ph . }
            Query return lines = 0
          } [0.045s]
          Filt_Query_Ret = 0 / 0 ( 0.045s)
        } [0.045s]
      } [0.165s]
      [Len-1||F6/6] (2020-12-03 14:17:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0cf08 ?p1 ?o1 . }
        [2020-12-03 14:17:44] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0cf08 ?p1 ?o1 . }
          Query return lines = 48
        } [0.005s]
        Filt_Query_Ret = 30 / 48 ( 0.005s)
        [Len-1||F6/6||1/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 fb:m.01jx92 . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 fb:m.01jx92 . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-1||F6/6||2/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 fb:m.025s7bn . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 fb:m.025s7bn . }
            Query return lines = 0
          } [0.014s]
          Filt_Query_Ret = 0 / 0 ( 0.014s)
        } [0.014s]
        [Len-1||F6/6||3/6-1] (2020-12-03 14:17:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 fb:m.02vxn . }
          [2020-12-03 14:17:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 fb:m.02vxn . }
            Query return lines = 2
          } [0.108s]
          Filt_Query_Ret = 0 / 2 ( 0.108s)
        } [0.108s]
        [Len-1||F6/6||4/6-1] (2020-12-03 14:17:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 fb:m.057ph . }
          [2020-12-03 14:17:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 fb:m.057ph . }
            Query return lines = 0
          } [0.047s]
          Filt_Query_Ret = 0 / 0 ( 0.047s)
        } [0.047s]
      } [0.188s]
      [Len-2||F1/6] (2020-12-03 14:17:45) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:45] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 442
        } [0.062s]
        Filt_Query_Ret = 32 / 442 ( 0.064s)
        [Len-2||F1/6||3/6-1] (2020-12-03 14:17:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02vxn . }
          [2020-12-03 14:17:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02vxn . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-2||F1/6||3/6-2] (2020-12-03 14:17:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . }
          [2020-12-03 14:17:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . }
            Query return lines = 0
          } [0.688s]
          Filt_Query_Ret = 0 / 0 ( 0.688s)
        } [0.689s]
        [Len-2||F1/6||5/6-1] (2020-12-03 14:17:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c6l . }
          [2020-12-03 14:17:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c6l . }
            Query return lines = 182
          } [0.062s]
          Filt_Query_Ret = 0 / 182 ( 0.063s)
        } [0.063s]
        [Len-2||F1/6||5/6-2] (2020-12-03 14:17:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c6l . }
          [2020-12-03 14:17:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c6l . }
            Query return lines = 4
          } [1.939s]
          Filt_Query_Ret = 0 / 4 ( 1.939s)
        } [1.940s]
        [Len-2||F1/6||6/6-1] (2020-12-03 14:17:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cf08 . }
          [2020-12-03 14:17:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cf08 . }
            Query return lines = 0
          } [0.028s]
          Filt_Query_Ret = 0 / 0 ( 0.028s)
        } [0.028s]
        [Len-2||F1/6||6/6-2] (2020-12-03 14:17:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cf08 . }
          [2020-12-03 14:17:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01jx92 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cf08 . }
            Query return lines = 0
          } [1.976s]
          Filt_Query_Ret = 0 / 0 ( 1.976s)
        } [1.976s]
      } [4.770s]
      [Len-2||F2/6] (2020-12-03 14:17:49) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:49] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 334
        } [0.615s]
        Filt_Query_Ret = 9 / 334 ( 0.616s)
        [Len-2||F2/6||3/6-1] (2020-12-03 14:17:50) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02vxn . }
          [2020-12-03 14:17:50] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02vxn . }
            Query return lines = 0
          } [0.120s]
          Filt_Query_Ret = 0 / 0 ( 0.120s)
        } [0.120s]
        [Len-2||F2/6||3/6-2] (2020-12-03 14:17:50) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . }
          [2020-12-03 14:17:50] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . }
            Query return lines = 1
          } [1.264s]
          Filt_Query_Ret = 0 / 1 ( 1.264s)
        } [1.264s]
        [Len-2||F2/6||5/6-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c6l . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c6l . }
            Query return lines = 182
          } [0.087s]
          Filt_Query_Ret = 0 / 182 ( 0.088s)
        } [0.088s]
        [Len-2||F2/6||5/6-2] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c6l . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c6l . }
            Query return lines = 2
          } [1.910s]
          Filt_Query_Ret = 0 / 2 ( 1.911s)
        } [1.911s]
        [Len-2||F2/6||6/6-1] (2020-12-03 14:17:53) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cf08 . }
          [2020-12-03 14:17:53] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cf08 . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
        [Len-2||F2/6||6/6-2] (2020-12-03 14:17:53) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cf08 . }
          [2020-12-03 14:17:53] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025s7bn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cf08 . }
            Query return lines = 0
          } [1.980s]
          Filt_Query_Ret = 0 / 0 ( 1.980s)
        } [1.980s]
      } [6.000s]
      [Len-2||F3/6] (2020-12-03 14:17:55) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:55] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 786
        } [0.201s]
        Filt_Query_Ret = 16 / 786 ( 0.204s)
        [Len-2||F3/6||1/6-1] (2020-12-03 14:17:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01jx92 . }
          [2020-12-03 14:17:56] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01jx92 . }
            Query return lines = 0
          } [0.026s]
          Filt_Query_Ret = 0 / 0 ( 0.026s)
        } [0.026s]
        [Len-2||F3/6||1/6-2] (2020-12-03 14:17:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01jx92 . }
          [2020-12-03 14:17:56] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01jx92 . }
            Query return lines = 2
          } [1.773s]
          Filt_Query_Ret = 0 / 2 ( 1.773s)
        } [1.773s]
        [Len-2||F3/6||2/6-1] (2020-12-03 14:17:57) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025s7bn . }
          [2020-12-03 14:17:57] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025s7bn . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
        [Len-2||F3/6||2/6-2] (2020-12-03 14:17:57) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025s7bn . }
          [2020-12-03 14:17:57] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025s7bn . }
            Query return lines = 5
          } [0.497s]
          Filt_Query_Ret = 0 / 5 ( 0.497s)
        } [0.497s]
        [Len-2||F3/6||4/6-1] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.057ph . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.057ph . }
            Query return lines = 0
          } [0.058s]
          Filt_Query_Ret = 0 / 0 ( 0.058s)
        } [0.058s]
        [Len-2||F3/6||4/6-2] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.057ph . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.057ph . }
            Query return lines = 1
          } [1.433s]
          Filt_Query_Ret = 0 / 1 ( 1.433s)
        } [1.433s]
        [Len-2||F3/6||5/6-1] (2020-12-03 14:17:59) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c6l . }
          [2020-12-03 14:17:59] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c6l . }
            Query return lines = 0
          } [0.054s]
          Filt_Query_Ret = 0 / 0 ( 0.054s)
        } [0.054s]
        [Len-2||F3/6||5/6-2] (2020-12-03 14:17:59) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c6l . }
          [2020-12-03 14:17:59] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c6l . }
            Query return lines = 4
          } [1.946s]
          Filt_Query_Ret = 0 / 4 ( 1.946s)
        } [1.946s]
        [Len-2||F3/6||6/6-1] (2020-12-03 14:18:01) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cf08 . }
          [2020-12-03 14:18:01] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cf08 . }
            Query return lines = 0
          } [0.023s]
          Filt_Query_Ret = 0 / 0 ( 0.023s)
        } [0.023s]
        [Len-2||F3/6||6/6-2] (2020-12-03 14:18:01) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cf08 . }
          [2020-12-03 14:18:01] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02vxn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cf08 . }
            Query return lines = 1
          } [1.977s]
          Filt_Query_Ret = 0 / 1 ( 1.977s)
        } [1.977s]
      } [8.002s]
      [Len-2||F4/6] (2020-12-03 14:18:03) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:03] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 266
        } [0.089s]
        Filt_Query_Ret = 24 / 266 ( 0.090s)
        [Len-2||F4/6||3/6-1] (2020-12-03 14:18:03) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02vxn . }
          [2020-12-03 14:18:03] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02vxn . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-2||F4/6||3/6-2] (2020-12-03 14:18:03) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . }
          [2020-12-03 14:18:03] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . }
            Query return lines = 0
          } [1.895s]
          Filt_Query_Ret = 0 / 0 ( 1.895s)
        } [1.895s]
        [Len-2||F4/6||5/6-1] (2020-12-03 14:18:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c6l . }
          [2020-12-03 14:18:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06c6l . }
            Query return lines = 0
          } [0.057s]
          Filt_Query_Ret = 0 / 0 ( 0.057s)
        } [0.057s]
        [Len-2||F4/6||5/6-2] (2020-12-03 14:18:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c6l . }
          [2020-12-03 14:18:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06c6l . }
            Query return lines = 2
          } [1.943s]
          Filt_Query_Ret = 0 / 2 ( 1.943s)
        } [1.943s]
        [Len-2||F4/6||6/6-1] (2020-12-03 14:18:07) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cf08 . }
          [2020-12-03 14:18:07] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cf08 . }
            Query return lines = 0
          } [0.031s]
          Filt_Query_Ret = 0 / 0 ( 0.031s)
        } [0.031s]
        [Len-2||F4/6||6/6-2] (2020-12-03 14:18:07) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cf08 . }
          [2020-12-03 14:18:07] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.057ph ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cf08 . }
            Query return lines = 0
          } [1.974s]
          Filt_Query_Ret = 0 / 0 ( 1.974s)
        } [1.974s]
      } [6.008s]
      [Len-2||F5/6] (2020-12-03 14:18:09) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:09] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 666
        } [0.085s]
        Filt_Query_Ret = 9 / 666 ( 0.088s)
        [Len-2||F5/6||1/6-1] (2020-12-03 14:18:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01jx92 . }
          [2020-12-03 14:18:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01jx92 . }
            Query return lines = 0
          } [0.045s]
          Filt_Query_Ret = 0 / 0 ( 0.045s)
        } [0.045s]
        [Len-2||F5/6||1/6-2] (2020-12-03 14:18:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01jx92 . }
          [2020-12-03 14:18:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01jx92 . }
            Query return lines = 0
          } [1.861s]
          Filt_Query_Ret = 0 / 0 ( 1.861s)
        } [1.861s]
        [Len-2||F5/6||2/6-1] (2020-12-03 14:18:11) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025s7bn . }
          [2020-12-03 14:18:11] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025s7bn . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-2||F5/6||2/6-2] (2020-12-03 14:18:11) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025s7bn . }
          [2020-12-03 14:18:11] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025s7bn . }
            Query return lines = 0
          } [0.544s]
          Filt_Query_Ret = 0 / 0 ( 0.544s)
        } [0.545s]
        [Len-2||F5/6||3/6-1] (2020-12-03 14:18:12) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02vxn . }
          [2020-12-03 14:18:12] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02vxn . }
            Query return lines = 0
          } [0.031s]
          Filt_Query_Ret = 0 / 0 ( 0.031s)
        } [0.031s]
        [Len-2||F5/6||3/6-2] (2020-12-03 14:18:12) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . }
          [2020-12-03 14:18:12] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . }
            Query return lines = 4
          } [1.415s]
          Filt_Query_Ret = 0 / 4 ( 1.415s)
        } [1.416s]
        [Len-2||F5/6||4/6-1] (2020-12-03 14:18:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.057ph . }
          [2020-12-03 14:18:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.057ph . }
            Query return lines = 0
          } [0.047s]
          Filt_Query_Ret = 0 / 0 ( 0.047s)
        } [0.047s]
        [Len-2||F5/6||4/6-2] (2020-12-03 14:18:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.057ph . }
          [2020-12-03 14:18:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06c6l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.057ph . }
            Query return lines = 0
          } [1.956s]
          Filt_Query_Ret = 0 / 0 ( 1.956s)
        } [1.956s]
      } [5.997s]
      [Len-2||F6/6] (2020-12-03 14:18:15) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:15] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 856
        } [0.176s]
        Filt_Query_Ret = 35 / 856 ( 0.179s)
        [Len-2||F6/6||1/6-1] (2020-12-03 14:18:16) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01jx92 . }
          [2020-12-03 14:18:16] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01jx92 . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.022s)
        } [0.022s]
        [Len-2||F6/6||1/6-2] (2020-12-03 14:18:16) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01jx92 . }
          [2020-12-03 14:18:16] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01jx92 . }
            Query return lines = 5
          } [1.799s]
          Filt_Query_Ret = 0 / 5 ( 1.799s)
        } [1.799s]
        [Len-2||F6/6||2/6-1] (2020-12-03 14:18:17) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025s7bn . }
          [2020-12-03 14:18:17] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025s7bn . }
            Query return lines = 0
          } [0.027s]
          Filt_Query_Ret = 0 / 0 ( 0.027s)
        } [0.027s]
        [Len-2||F6/6||2/6-2] (2020-12-03 14:18:17) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025s7bn . }
          [2020-12-03 14:18:17] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025s7bn . }
            Query return lines = 0
          } [0.459s]
          Filt_Query_Ret = 0 / 0 ( 0.459s)
        } [0.459s]
        [Len-2||F6/6||3/6-1] (2020-12-03 14:18:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02vxn . }
          [2020-12-03 14:18:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02vxn . }
            Query return lines = 38
          } [0.012s]
          Filt_Query_Ret = 0 / 38 ( 0.013s)
        } [0.013s]
        [Len-2||F6/6||3/6-2] (2020-12-03 14:18:18) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . }
          [2020-12-03 14:18:18] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . }
            Query return lines = 4
          } [1.504s]
          Filt_Query_Ret = 1 / 4 ( 1.504s)
          [Len-2||F6/6||3/6-2||4/6-1] (2020-12-03 14:18:19) {
            Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 ?p4 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p4 fb:m.057ph . ?o2 ?p3 fb:m.02vxn . }
            [2020-12-03 14:18:19] SPARQL Request: {
              SELECT DISTINCT ?p1 ?p2 ?p3 ?p4 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p4 fb:m.057ph . ?o2 ?p3 fb:m.02vxn . }
              Query return lines = 0
            } [2.004s]
            Filt_Query_Ret = 0 / 0 ( 2.004s)
          } [2.004s]
          [Len-2||F6/6||3/6-2||4/6-2] (2020-12-03 14:18:21) {
            Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 ?p4 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . ?o2 ?p4 fb:m.057ph . }
            [2020-12-03 14:18:21] SPARQL Request: {
              SELECT DISTINCT ?p1 ?p2 ?p3 ?p4 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02vxn . ?o2 ?p4 fb:m.057ph . }
              Query return lines = 0
            } [0.120s]
            Filt_Query_Ret = 0 / 0 ( 0.120s)
          } [0.120s]
        } [3.629s]
        [Len-2||F6/6||4/6-1] (2020-12-03 14:18:21) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.057ph . }
          [2020-12-03 14:18:21] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.057ph . }
            Query return lines = 0
          } [0.097s]
          Filt_Query_Ret = 0 / 0 ( 0.097s)
        } [0.097s]
        [Len-2||F6/6||4/6-2] (2020-12-03 14:18:22) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.057ph . }
          [2020-12-03 14:18:22] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cf08 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.057ph . }
            Query return lines = 4
          } [1.778s]
          Filt_Query_Ret = 0 / 4 ( 1.778s)
        } [1.778s]
      } [8.003s]
      223 coarse schemas retrieved from scratch.
      Calculating F1 for 223 coarse schemas: {
        Current: 0 / 223
        Checking schema 0 / 223: {
          [('Main', '==', 'm.01jx92', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 1 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01jx92 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 WHERE { fb:m.01jx92 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'1933'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 2 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 3 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Italian American'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 4 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 2
            Final Answer: {'Elizabeth Cafone', 'Giacomo Gubitosi'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 5 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01jx92 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 WHERE { fb:m.01jx92 fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'1.63'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 6 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 3
            Final Answer: {'Rose Lenore Sophia Blake', 'Delinah Blake', 'Noah Blake'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 7 / 223: {
          [('Main', '==', 'm.01jx92', ['base.saturdaynightlive.snl_host.episodes_hosted'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:base.saturdaynightlive.snl_host.episodes_hosted ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:base.saturdaynightlive.snl_host.episodes_hosted ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'SNL - 8.6'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 8 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 2
            Final Answer: {'Actor', 'Soldier'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 9 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 10 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.languages'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.languages ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.languages ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 11 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Nutley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 12 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.nationality']), ('Entity', '==', 'm.06c6l', ['location.location.partially_contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.nationality ?o1 . ?o1 fb:location.location.partially_contains fb:m.06c6l . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01jx92 fb:people.person.nationality ?o1 . ?o1 fb:location.location.partially_contains fb:m.06c6l . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01jx92', 'm.06c6l'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 13 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.country_of_origin'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 14 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.air_date_of_first_episode'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.025s7bn fb:tv.tv_program.air_date_of_first_episode ?o1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 WHERE { fb:m.025s7bn fb:tv.tv_program.air_date_of_first_episode ?o1 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 1
            Final Answer: {'2006'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 15 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.seasons'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.seasons ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.seasons ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 5
            Final Answer: {'Mickey Mouse Clubhouse - Season 3', 'Mickey Mouse Clubhouse - Season 0', 'Mickey Mouse Clubhouse - Season 1', 'Mickey Mouse Clubhouse - Season 4', 'Mickey Mouse Clubhouse - Season 2'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 16 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 4
            Final Answer: {'Cartoon series', 'Animated cartoon', "Children's television series", 'Animation'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 17 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.number_of_seasons'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.025s7bn fb:tv.tv_program.number_of_seasons ?o1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 WHERE { fb:m.025s7bn fb:tv.tv_program.number_of_seasons ?o1 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 1
            Final Answer: {'3'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 18 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.episodes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.episodes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.episodes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 130
            Final Answer: {'Mickey Goes Fishing', 'Quest for the Crystal Mickey', "Minnie's Bee Story", 'Daisy the Painter', 'Daisy in the Sky', "Minnie and Daisy's Flower Shower", 'Goofy Goes Goofy', "Mickey's Springtime Surprise", "Mickey's Camp Out", 'Daisy Bo Peep', "Mickey's Great Outdoors", "Mickey's Fishy Story", 'Mickey Mouse Clubhouse: Road Rally', "Daisy's Pet Project", "Pluto's Puppy-sitting Adventure", "Pluto's Ball", 'Помощь Мурабель', 'The Golden Boo Boo', "Goofy's Goofbot", 'Goofy On Mars', "Goofy's Bird", 'A Surprise for Minnie', "Mickey's Great Clubhouse Hunt", 'Sleeping Minnie', 'Goofy the Homemaker', 'Storybook Surprises', "Donald's Hiccups", 'Sir Goofs-a-Lot', 'Ковбой Дональд', 'Зарядка для Дональда', "Donald's Ducks", "Mickey's Easter", 'The Wizard of Dizz', "Mickey's Art Show", "Mickey's Big Band Concert", 'Space Adventure', "Goofy's Gone", 'Pluto to the Rescue', "Prince Pete's Catnap", "Mickey's Mousekersize", "Goofy's Hat", 'Choo Choo Express', 'Road Rally', 'Плуто и прыгучий мяч', 'Donald And The Baby Sheep', "Pluto's Playmate", 'Donald of the Desert', 'SuperGoof`s Super Puzzle', 'Mickey and the Enchanted Egg', "Mickey's Silly Problem", 'Space Captain Donald', "Minnie's Mouseke-Calendar", "Minnie's Rainbow", "Pete's Beach Blanket Luau", "Minnie's Bow-tique", "Donald's Clubhouse", "Goofy's Coconutty Monkey", 'Donald Hatches an Egg', "Goofy's Thinking Cap", "Donald's Lost Lion", "Mickey's Big Surprise", "Mickey's Christmas Magic", "Mickey's Thanks A Bunch Day", 'Aye Aye Captain Mickey', "Mickey's Message from Mars", "Minnie's Birthday", "Mickey's Show and Tell", 'Dr. Daisy MD', 'Goofy s thinking cap', "Goofy's Magical Mix-Up", "Mickey's Adventures in Wonderland", 'Minnie Red Riding Hood', 'Мини ищет котёнка', "Daisy's Pony Tale", 'Футбольная зарядка для Гуфи', 'The Friendship Team', 'Big Splash', 'Happy Birthday Toodles', 'Mickey Saves Santa', "Pluto's Dinosaur Romp", 'Минни хочет устроить парад', "Minnie's Masquerade", 'Pluto Lends a Paw', "Mickey's Comet", 'Mickey and Donald Have a Farm', "Mickey's Handy Helpers", "Mickey's Little Parade", "Daisy's Grasshopper", 'Поможем Питу', "Mickey's Color Adventure", 'Goofy the Great', "Minnie's Picnic", 'Goofy Baby', 'Mickey And Pluto To The Rescue', 'Goofy Babysitter', 'Message from Mars', "Donald's Big Balloon Race", "Mickey and Minnie's Jungle Safari", "Pluto's Tale", "Goofy's Petting Zoo", "Daisy's Dance", "Goofy's Super Wish", 'Mickeys Numbers', "Donald's Special Delivery", "Mickey's Halloween Treat", 'Donald and the Beanstalk', "Mickey's Round Up", 'The Go-Getters', 'Donald the Frog Prince', 'Donald the Genie', "Fancy Dancin' Goofy", "Mickey's Big Job", "Mickey's Treasure Hunt", 'Mickey-Go-Seek', "Mickey's Treat", "Clarabelle's Clubhouse Mooo-sical", 'Secret Spy Daisy', 'Goofy in Training', 'A Valentine Surprise For Minnie', "Minnie's Mystery", "Goofy's Giant Adventure", 'Хорошее настроение для Минни', "Minnie's Pajama Party", "Pluto's Bubble Bath", "Pluto's Best", "Clarabelle's Clubhouse Carnival"}
            Answers = 126, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 126, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 19 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.currently_in_production'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.currently_in_production ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.currently_in_production ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 20 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.episode_running_time'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.025s7bn fb:tv.tv_program.episode_running_time ?o1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 WHERE { fb:m.025s7bn fb:tv.tv_program.episode_running_time ?o1 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 1
            Final Answer: {'25'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 21 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.number_of_episodes'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.025s7bn fb:tv.tv_program.number_of_episodes ?o1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 WHERE { fb:m.025s7bn fb:tv.tv_program.number_of_episodes ?o1 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 1
            Final Answer: {'47'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 22 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.languages'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.languages ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.languages ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 23 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.country_of_origin']), ('Entity', '==', 'm.06c6l', ['location.location.partially_contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:location.location.partially_contains fb:m.06c6l . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025s7bn fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:location.location.partially_contains fb:m.06c6l . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l', 'm.025s7bn'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 24 / 223: {
          [('Main', '==', 'm.02vxn', ['law.invention.inventor'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:law.invention.inventor ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:law.invention.inventor ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Eadweard Muybridge'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 25 / 223: {
          [('Main', '==', 'm.02vxn', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 30
            Final Answer: {"There's only one thing that can kill the movies, and that's education.", "People sometimes say that the way things happen in the movies is unreal, but actually it's the way things happen to you in life that's unreal. The movies make emotions look so strong and real, whereas when things really do happen to you, it's like watching television -- you don't feel anything.", 'My movie is born first in my head, dies on paper; is resuscitated by the living persons and real objects I use, which are killed on film but, placed in a certain order and projected on to a screen, come to life again like flowers in water.', 'A strange thing has happened -- while all the other arts were born naked, this, the youngest, has been born fully-clothed. It can say everything before it has anything to say. It is as if the savage tribe, instead of finding two bars of iron to play with, had found scattering the seashore fiddles, flutes, saxophones, trumpets, grand pianos by Erhard and Bechstein, and had begun with incredible energy, but without knowing a note of music, to hammer and thump upon them all at the same time.', 'A film is never really any good unless the camera is an eye in the head of a poet.', 'Why should people pay good money to go out and see bad films when they can stay home and see bad television for nothing?', 'Dialogue should simply be a sound among other sounds, just something that comes out of the mouths of people whose eyes tell the story in visual terms.', "I'll be back", '""\'Mixtape\' is a very appropriate word to include in the title of Goran Hugo Olsson’s film because it includes a rich mixture of cultural voices. They speak across different dividing lines such as those of haves and have-nots, youth and maturity, black and white, national and global, and the past and the present.""', 'What is saved in the cinema when it achieves art is a spontaneous continuity with all mankind. It is not an art of the princes or the bourgeoisie. It is popular and vagrant. In the sky of the cinema people learn what they might have been and discover what belongs to them apart from their single lives.', "In Hollywood the woods are full of people that learned to write, but evidently can't read. If they could read their stuff, they'd stop writing.", 'The motion picture is like a picture of a lady in a half-piece bathing suit. If she wore a few more clothes, you might be intrigued. If she wore no clothes at all, you might be shocked. But the way it is, you are occupied with noticing that her knees are too bony and that her toenails are too large. The modern film tries too hard to be real. Its techniques of illusion are so perfect that it requires no contribution from the audience but a mouthful of popcorn.', "If my films make one more person miserable, I'll feel I have done my job.", 'The only way to get rid of my fears is to make films about them.', 'A film is a petrified fountain of thought.', "I rather think the cinema will die. Look at the energy being exerted to revive it -- yesterday it was color, today three dimensions. I don't give it forty years more. Witness the decline of conversation. Only the Irish have remained incomparable conversationalists, maybe because technical progress has passed them by.", 'The director is simply the audience. So the terrible burden of the director is to take the place of that yawning vacuum, to be the audience and to select from what happens during the day which movement shall be a disaster and which a gala night. His job is to preside over accidents.', 'In good films, there is always a directness that entirely frees us from the itch to interpret.', 'Hello, I Must Be Going', 'The movies today are too rich to have any room for genuine artists. They produce a few passable craftsmen, but no artists. Can you imagine a Beethoven making $100, 000 a year?', "Film is more than the twentieth-century art. It's another part of the twentieth-century mind. It's the world seen from inside. We've come to a certain point in the history of film. If a thing can be filmed, the film is implied in the thing itself. This is where we are. The twentieth century is on film. You have to ask yourself if there's anything about us more important than the fact that we're constantly on film, constantly watching ourselves.", 'Movies are a fad. Audiences really want to see live actors on a stage.', 'The making of a picture ought surely to be a rather fascinating adventure. It is not; it is an endless contention of tawdry egos, some of them powerful, almost all of them vociferous, and almost none of them capable of anything much more creative than credit-stealing and self-promotion.', 'Cinema is the culmination of the obsessive, mechanistic male drive in western culture. The movie projector is an Apollonian straight-shooter, demonstrating the link between aggression and art. Every pictorial framing is a ritual limitation, a barred precinct.', 'A wide screen just makes a bad film twice as bad.', 'Films can only be made by by-passing the will of those who appear in them, using not what they do, but what they are.', 'For me, the cinema is not a slice of life, but a piece of cake.', 'Drama is life with the dull parts cut out of it.', 'Pictures are for entertainment, messages should be delivered by Western Union.', 'The cinema, like the detective story, makes it possible to experience without danger all the excitement, passion and desirousness which must be repressed in a humanitarian ordering of life.'}
            Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 26 / 223: {
          [('Main', '==', 'm.02vxn', ['book.periodical_subject.periodicals'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:book.periodical_subject.periodicals ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:book.periodical_subject.periodicals ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 102
            Final Answer: {'Screen International', 'Operating Cameraman Magazine', 'First', 'Array DVD magazine', 'Starburst', 'HorrorHound', 'DVD Monthly', 'Neon', 'Stardust', 'MovieMaker', 'Positif', 'Fatal Visions', 'Playback', 'Film Journal International', 'Eye For Film', 'British Film', 'Cinemaya', 'Black Film Review', 'The Moving Arts Film Journal', 'Filmfare', 'Kine Weekly', 'Little White Lies', 'Take One', 'American Cinematographer', 'Film Review', 'Moviespot', 'Mohanlal Special', 'Filmmaker', 'Midi Minuit Fantastique', 'Famous Monsters of Filmland', "Ecrans d'Afrique", 'Entertainment Today', 'Kinema Junpo', 'Chithrabhumi', 'fps magazine', 'Sight & Sound', 'Cinema Mangalam', 'The Score Magazine', 'Monthly Film Bulletin', 'Cinema Sewer', 'Wholphin', 'Total Film', 'Cinefex', 'Cine Blitz', 'Film Comment', 'Cineaste', 'Psychotronic Video', 'Connect Savannah News, Arts, and Entertainment Weekly', "Phantom of the Movies' Videoscope", 'Cinema Retro', 'Screen', 'Escrever Cinema', 'Premiere', 'CineAction', 'Film Ireland', 'Cashiers du Cinemart', 'Script', 'Cick Magazine', 'Anandalok', 'G-Fan', 'Pariscope', 'Hotdog Magazine', 'Bright Lights Film Journal', 'Film Threat', 'Backstage', 'African American Review', 'VJM Media Group', 'DVD magazine', 'Ciak', 'Maayan', 'Fangoria', 'Deep Red Magazine', 'The Monster Times', 'Geek Monthly', 'Variety', 'Studio magazine', 'Modern Screen', 'Empire', 'Cinefantastique', 'Filmjournalen', 'The Dark Side', 'Sleazoid Express', 'Picturegoer', 'Cinema X', 'Vellinakshatram', 'Starlog', 'Fantastic Films', 'Rue Morgue', 'Scarlet Street', 'Films of the Golden Age', 'Entertainment Weekly', 'Video Watchdog', 'TAKE:1', 'Fade In', 'Film', 'Photoplay', 'Femme Fatales', 'Empty', 'Classic Images', 'Filmink', 'Shivers', 'Castle of Frankenstein'}
            Answers = 102, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 102, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 27 / 223: {
          [('Main', '==', 'm.02vxn', ['book.magazine_genre.magazines_in_this_genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:book.magazine_genre.magazines_in_this_genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:book.magazine_genre.magazines_in_this_genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Kinema Junpo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 28 / 223: {
          [('Main', '==', 'm.02vxn', ['interests.collection_category.sub_categories'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:interests.collection_category.sub_categories ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:interests.collection_category.sub_categories ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 2
            Final Answer: {'Star Wars', 'Prelinger Archives'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 29 / 223: {
          [('Main', '==', 'm.02vxn', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 3
            Final Answer: {'Why Be Good?: Sexuality & Censorship in Early Cinema', 'Lives and Deaths of the Poets', 'Edgar G. Ulmer—The Man Off Screen'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 30 / 223: {
          [('Main', '==', 'm.02vxn', ['people.profession.people_with_this_profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:people.profession.people_with_this_profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:people.profession.people_with_this_profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Leah Ayres'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 31 / 223: {
          [('Main', '==', 'm.02vxn', ['organization.organization_sector.organizations_in_this_sector'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:organization.organization_sector.organizations_in_this_sector ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:organization.organization_sector.organizations_in_this_sector ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 118
            Final Answer: {'Film Academy Baden-Württemberg', 'European Film Promotion', 'Film Unit', 'Rooftop Films', 'Kerala State Chalachitra Academy', 'The Film Company', 'Film Australia', 'Motion Picture Association', 'Deutsches Filminstitut', 'British Film Institute', 'The British Screen Advisory Council', 'Three Cities Productions', 'Also Like Life', 'Swedish Film Institute', 'Ausfilm', 'Political Film Society', 'Association of Moving Image Archivists', 'Voluntary Self Regulation of the Movie Industry', 'The Avalon Table', 'Directing Workshop for Women', 'Academy of Canadian Cinema & Television', 'National Film Preservation Act', 'The Film Foundation', 'Saskatchewan Filmpool Cooperative', 'BFI National Archive', 'European Film Academy', 'Volatile Works', "The Film-Makers' Cooperative", 'Incite Productions', 'Hollywood Trident Foundation', 'Art Directors Guild', 'California Newsreel', 'Academy of Motion Picture Arts and Sciences', 'Central Asian and Southern Caucasus Film Festivals Confederation', 'UK Screen Association', 'Northwest Film Forum', 'Producers Guild of America', 'International Federation of Film Critics', 'Motion Picture Sound Editors', 'Doc Films', 'University Film and Video Association', 'Cinema for Peace', 'Global Film Initiative', 'Cinematheque', 'Olympia Film Society', 'European Fantastic Film Festivals Federation', 'Audio-Visual Preservation Trust of Canada', 'Pittsburgh Filmmakers', 'Media Archive for Central England', 'Facets Multi-Media', 'European Film Fund', 'San Diego Film Commission', 'Central Board of Film Censors', 'UK Film Council', 'Western Norway Film Commission', "Des Cinemas Pour l'Afrique", 'Northern Region Film and Television Archive', 'Iowa Film Critics', 'Film society', 'LAAFTA', 'Filmmakers Alliance', 'Chicago Institute for the Moving Image', 'Canadian Film Institute', "Children's Film Foundation", 'Directors Guild Trust', 'AHDS Performing Arts', 'Writers Guild of Canada', 'Filem Negara Malaysia', 'British Kinematograph, Sound and Television Society', 'Australian Screen Editors', 'Asian Film Archive', "London Film-Makers' Co-op", 'Eirin', 'Film and Video Arts Society', 'International Arts and Film Foundation', 'Vikalp', 'Austrian Film Commission', 'Glasgow Film Office', 'The Film Music Society', 'Painted Space', 'University of Bradford Union', 'Melbourne Cinematheque', 'Casting Society of America', 'Bay Area Video Coalition', 'Digital Shorts', 'Regional screen agencies', 'Greater Cleveland Film Commission', 'The D-Word', 'Cinenova', 'Peace One Day', "Stuntmen's Association of Motion Pictures", 'Chlotrudis Society for Independent Film', 'American Cinematheque', 'National Film Board of Canada', 'Arts Engine', 'Irish Film and Television Network', 'American Film Institute', 'Scary Cow Productions', 'Independent Filmmakers Cooperative of Ottawa', 'Sundance Channel', 'CinemaScore', 'Directors Guild of Great Britain', 'Estonian Film Foundation', 'Russian Guild of Film Critics', 'Danish Film Institute', 'World Cinema Foundation', 'San Francisco Film Society', 'Docs in Progress', 'Abingdon Film Unit', 'American Cinema Editors', 'Warwick Student Cinema', 'Oxford University Film Foundation', 'The Hollywood Symphony Orchestra', 'FIAPF', 'Irish Film Board', 'Australian Film Institute', 'New Media Council', 'Schwarze Filmschaffende in Deutschland'}
            Answers = 118, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 118, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 32 / 223: {
          [('Main', '==', 'm.02vxn', ['business.industry.companies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:business.industry.companies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:business.industry.companies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 297
            Final Answer: {'Free Range Studios', 'Limelight Department', 'ShroudFilm', 'Centropolis Film Productions', 'Dharma Productions', 'Daybreak Pacific', 'The Little Giraffe', 'Edison Studios', 'SCS Films', 'Mosfilm', 'WWE Studios', 'Ilion Animation Studios', 'First National', 'Yari Film Group', 'Columbia Pictures', 'Troublemaker Studios', 'October Films', 'Legendary Pictures', 'Lorimar Television', 'Warner Independent Pictures', 'Rajshri Media', 'Gracie Films', 'Telepictures', 'Phuoc Sang Films', 'Blinding Edge Pictures', 'Platinum Dunes', 'Weston Woods Studios', 'Mpower Pictures', 'Toho Co., Ltd.', 'Shochiku', 'Studio Ghibli', 'Kaleidoscope Entertainment', 'Swedish Film Institute', 'The Geffen Film Company', 'Flower Films', 'Astro Shaw', 'EuropaCorp', 'EOne Films', 'Dreamz Unlimited', 'MGM Holdings', 'Vertigo Films', 'Dualstar', 'Motown Motion Picture Studios', 'Sony Pictures Entertainment', 'Centron Corporation', 'Lenfilm', 'Blood Ceremony Films', 'Variance Films', 'Modern Theatres', 'Vishesh Films', 'ImageMovers Digital', 'ImageMovers', 'Icon Productions', 'Cinema Hill', 'Pixar', 'Frederator Films', 'Carolco Pictures', 'Blue Omega', 'Ramoji Film City', 'Freestyle Releasing', 'Campus Studios', 'Mandt Bros. Productions', 'Touchstone Pictures', '21st Century Film Corporation', 'Haxan Films', 'Heyday Films', 'Arri', 'Spyglass Entertainment', 'Mutant Enemy Productions', 'Echo Films', 'Gordon Stanfield Animation', 'Screen Gems', 'Basic Pictures', 'E1 Entertainment', 'Music Corporation of America', 'StudioCanal', 'Koch Entertainment', 'Trimark Pictures', 'Tadjikfilm', 'Trimurti Films', 'Lasergraphics', 'Siskel/Jacobs Productions', 'Universal Studios', 'Artisan Entertainment', 'Shannon & Company', 'Periscope Entertainment', 'Snap Kick Productions', 'Lakeshore Entertainment', 'The Curiosity Company', 'Warner Bros.-Seven Arts', 'Diffusion Pictures', '40 Acres and a Mule Filmworks', 'Rough Draft Studios', 'Reel Corporation', 'Shaw Brothers Studio', 'Vijaya Vauhini Studios', 'Romar Entertainment', 'Dark Castle Entertainment', 'A Band Apart', 'Film Roman', 'Orion Pictures', 'Sverdlovsk Film Studio', 'Action International Pictures', 'El Deseo', 'View Askew Productions', 'IFC Films', 'Tyler Perry Studios', 'Camera 40 Productions', 'Atlantic Entertainment Group', 'Samuel Bronston Productions', 'One Channel TV Corporation', 'DreamWorks Classics', 'Imagine Entertainment', 'Mirabai Films', 'The Kennedy/Marshall Company', 'Ignite Entertainment', 'Participant Media', 'Gorevision films', 'Signal Fire Films', 'Mediapeers', 'Office Kitano', 'Starz Distribution', 'Dolphin Entertainment', 'Red Chillies VFX', 'Pathé', 'Mandeville Films', 'Metro-Goldwyn-Mayer', 'Troma Entertainment', 'Village Roadshow', 'Apatow Productions', 'Belarusfilm', 'Suomen Filmiteollisuus', 'Savoy Pictures', 'World Wide Pictures', 'CineVox', 'Network 18', 'Kadokawa Group Holdings', 'Empire International Pictures', 'Spy Pictures', 'Kantana Group', 'Central Studios', 'GMA Records', 'Mandalay Pictures', 'Consolidated Film Industries', 'Quantel', 'Wiedemann & Berg Filmproduktion', 'Caravan Pictures', 'Miramax Films', 'Anchor Bay Entertainment', 'Castle Rock Entertainment', 'Bombo Sports & Entertainment', 'The Oz Film Manufacturing Company', 'Hungry Man Productions', 'MTV Films', 'Aardman Animations', 'Sun Pictures', 'Promenade Pictures', 'Digital Media Factory', 'GMA Films', 'Canal+ Group', 'Indo British Film Co', 'Pony Canyon', 'The Samuel Goldwyn Company', 'Panavision', 'X-Ray Kid Studios', 'Barrandov Studios', 'Efftee Studios', 'Fox Entertainment Group', '1492 Pictures', 'Odessa Filmworks', 'Sundream Motion Pictures', 'RKO Pictures', 'Dead Gentlemen Productions', 'True West Films', 'Titra Studios', 'Funny-Films Oy', 'Harder/Fuller Films', 'Freehand Group', 'Filmways', 'American Film Foundation', 'Def2shoot', 'Village Roadshow Pictures', 'Silicon Artists, Inc.', 'Flying Spot Entertainment', 'Clearwater Features', 'The Kushner-Locke Company', 'Gaumont Film Company', 'Bad Robot Productions', 'The Cannon Group', 'Fleischer Studios', 'Dovzhenko Film Studios', 'Focus Features', 'Rockhopper', 'Sahamongkol Film International', 'Fresco Pictures', 'MTD Entertainment Corporation', 'Shree Ashtavinayak Cine Vision Ltd', 'Still Playing With Toys', 'R. K. Films', 'Amblin Entertainment', 'Infinitum Nihil', 'Lucasfilm', 'Vinod Chopra Productions', 'Happy Madison Productions', 'Revolution Studios', 'Nickelodeon Movies', 'Overture Films', 'Film Booking Offices of America', 'Patagonik Film Group', 'CAOZ Ltd.', 'Hollywood Pictures', 'The Scream Factory', 'Dimension Films', 'Malpaso Productions', 'Village Roadshow Entertainment Group', 'Capitol Films', 'Roland Park Pictures', 'Famous Players Film Company', 'Palm Pictures', 'Fu Works', 'Regency Enterprises', 'The Weinstein Company', 'Strand Releasing', 'Silver Screen Partners', 'Paramount Vantage', 'Newmarket Films', 'Carsey-Werner Productions', 'Plan B Entertainment', 'Orange Sky Golden Harvest', 'Eros International', 'Pakshiraja Studios', 'DEFA-Studio für Spielfilme', 'Walden Media', 'J Storm', 'Samuel Goldwyn Films', 'Media Magik Entertainment', 'Rooster Teeth Productions', 'Halaqah Media', 'Trigger Street Productions', 'Merchant Ivory Productions', 'American Zoetrope', 'Bluebox Limited', 'United International Pictures', 'Summit Entertainment', 'Night Star Pictures', 'Stunts Canada', 'Sonet Film', 'Bavaria Film', 'Melendez Films', 'AVM Productions', 'Saga Studios', 'Silver Pictures', 'Dogwoof Pictures', 'Fortune Features', '20th Century Fox', 'BoB and Partners Co. Ltd.', 'Gorky Film Studio', 'China Star Entertainment Group', 'Triumph Films', 'Level 1 Entertainment', 'Cha Cha Cha Films', 'Paramount Pictures', 'TriStar Pictures', 'Five Star Production', 'Halestorm Entertainment', 'Magnolia Pictures', 'Rogue', 'Moviecam', 'Disneynature', 'Tsuburaya Productions', 'Renaissance Pictures', 'Splendid Medien AG', 'Japan Home Video', 'Cinergi Pictures', 'NOOMA', 'AQP Collective Pictures', 'Zentropa', 'Imagica', 'Plexifilm', 'ThinkFilm', 'JCE Movies Limited', 'Harpo Productions', 'DreamWorks', 'Gold Typhoon', 'Walt Disney Pictures', 'Oddworld Inhabitants', 'Sherwood Pictures', 'Teamwork Motion Pictures', 'Innocent Pictures', 'Movie Jigsaw', 'Go Fish Pictures', 'Kino International', 'Syncopy Inc.', 'Fortissimo Films', '2929 Entertainment', 'Relativity Media', 'Flipside Film Company'}
            Answers = 297, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 297, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 33 / 223: {
          [('Main', '==', 'm.02vxn', ['business.industry.parent_industry'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:business.industry.parent_industry ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:business.industry.parent_industry ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Motion Picture and Sound Recording Industries'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.051s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.052s]
        Checking schema 34 / 223: {
          [('Main', '==', 'm.02vxn', ['business.industry.child_industry'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:business.industry.child_industry ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:business.industry.child_industry ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 5
            Final Answer: {'Motion Picture and Video Production', 'Postproduction Services and Other Motion Picture and Video Industries', 'Motion Picture and Video Exhibition', 'Motion Picture and Video Distribution'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 35 / 223: {
          [('Main', '==', 'm.02vxn', ['award.award_discipline.awards_in_this_discipline'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:award.award_discipline.awards_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:award.award_discipline.awards_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 348
            Final Answer: {'Australian Film Institute Award for Best Screenplay', 'Golden Space Needle Audience Award for Best Actor', 'Golden Rooster Award for Best Supporting Actor', 'Gotham Independent Film Award for Best Ensemble Performance', 'Japan Academy Prize for Outstanding Achievement in Music', 'Goya Award for Best Director', 'Golden Gate Award for Best Animated Short', 'Golden Globe Award for Best Foreign Language Film', 'Academy Award for Best Documentary Short Subject', 'Siegessäule Readers Award', 'Golden Space Needle', 'Japan Academy Prize for Popularity Award', 'Polish Academy Award for Best Film', 'Hundred Flowers Award for Best Supporting Actress', 'German Film Award for Best Score', 'AACTA Award for Best Lead Actress', 'Japan Academy Prize for Outstanding Achievement in Cinematography', 'Hong Kong Film Award for Best New Performer', 'Golden Globe Award for Best Supporting Actor - Film', 'Australian Film Institute Award for Best Screenplay, Original', 'Tokyo International Film Festival Best Supporting Actress', 'Hong Kong Film Award for Best Cinematography', 'Goya Award for Best Film', 'Cannes Jury Prize', 'Filmfare Best Movie Award', 'Japan Academy Prize for Outstanding Achievement in Lighting Direction', 'Cannes Short Film Special Distinction', 'Hong Kong Film Award for Best Asian Film', 'David di Donatello for Best Director', 'National Film Award for Best Non-Feature Film Direction', 'Nika Award - Lifetime Achievement Award', 'Gotham Independent Film Award for Best Feature Film', 'Golden Rooster Award for Best Picture', 'Ariel Award for Best Costume Design', 'Sundance Film Festival Directing Award: U.S. Dramatic', 'SFX Award for Best Film Director', 'Golden Globe Award for Best Actress - Drama Film', 'Hundred Flowers Award for Best Chinese Opera Film', 'Sundance Film Festival U.S. Documentary Editing Award', 'Cannes Best Actress Award', 'Japan Academy Prize for Special Award from the Chairman', 'Golden Globe Award for Best Drama Film', 'Filmfare Award for Best Director', 'Polish Academy Award for Best Director', 'Mainichi Eiga Concours Award for Best Film', 'British Independent Film Award for  Best British Documentary', 'British Independent Film Award for Best Supporting Actress', 'Polish Academy Award Discovery of the Year', 'SFX Award for Best Movie', 'Polish Academy Audience Award', 'Hong Kong Film Award for Best Actress', 'Hundred Flowers Award for Best Director', 'David di Donatello for Best Producer', 'Japan Academy Prize for Outstanding Performance by an Actor in a Leading Role', 'Best Movie Foreign Release - JRL Gay Adult Film Awards', 'Polish Academy Award for Best Screenplay', 'Ursa Major Award for Best Anthropomorphic Motion Picture', 'Golden Globe Award for Best Screenplay - Motion Picture', 'Philadelphia QFest Jury Award for Best Short Film', 'Award of the Argentinean Academy for Best Sound', 'Silver Lion Award for Best Director', 'British Independent Film Award Douglas Hickox Award', 'Award of the Argentinean Academy for Best Make Up', 'Japan Academy Prize for Special Award of Honour from the Association', 'Japan Academy Prize for Outstanding Performance by an Actress in a Supporting Role', 'Australian Film Institute Award for Best Achievement in Production Design', 'Ariel Award for Best Art Design', 'Silver Bear for Best Actress', 'David di Donatello for Best New Director', 'Jury Grand Prix', 'Sundance Film Festival Best of NEXT Award', 'German Film Award for Best Actor', 'DGA Lifetime Achievement Award', '1st Prize Cinéfondation', 'David di Donatello for Best Actress', 'Cannes Lifetime Achievement Award', 'Nika Award for Best Documentary', 'Japan Academy Prize for Outstanding Achievement in Filming Technique', 'Hundred Flowers Award for Best Art Direction', 'Teddy Award for Best Acting Performance', 'Nika Award for Best Actress', 'Un Certain Regard Special Jury Prize', 'German Film Award - Special Award for Outstanding Contributions to German Cinema', 'Sundance Film Festival World Cinema Documentary Editing Award', 'Prize of Un Certain Regard', 'AACTA Award for Best Original Music Score', 'Ariel Award for Best Actor', 'Hong Kong Film Award for Best Director', 'Dublin Film Critics Award for  Best Female Performance', 'César Award for Best Film', 'Golden Bear Award for Best Feature-Length Documentary', 'Polish Academy Award for Best Supporting Actress', 'Award of the Argentinean Academy for Best Actress', 'Cannes Grand Prix', 'German Film Award for Best Actress', 'National Board of Review Award for Best Film', 'Philadelphia QFest Audience Award for Best Documentary Feature', 'Golden Globe Award for Best Supporting Actress - Film', 'Goya Award for Best Supporting Actor', 'Silver Bear for Best Screenplay', 'Sundance Film Festival Excellence in Cinematography Award: U.S. Dramatic', 'Polish Academy Award for Best Supporting Actor', 'German Film Award for Best Feature Film', 'Salvador Toscano Medal', 'Goya Award for Best Actor', "People's Choice Award for Favorite Horror Movie", 'British Independent Film Award for Best Foreign Independent Film', 'David di Donatello for Best Cinematography', 'Crystal Globe', 'Award of the Argentinean Academy for Best Screenplay, Adaptation', 'Sundance Film Festival Grand Jury Prize: World Cinema Dramatic', 'Bram Stoker Award for Best Screenplay', 'Cannes Best Actor Award', 'Philadelphia QFest Audience Award for Best Feature Comedy', 'Japan Academy Prize for Rookie of the Year', 'Filmfare Best Male Debut Award', 'Sundance Film Festival Special Jury Prize: World Cinema Documentary', 'Vienna Film Award', 'Filmfare Award for Best Film', 'German Film Award for Best Supporting Actress', 'German Film Award for Best Sound Editing', 'AACTA Award for Best Editing', 'Ray Bradbury Award', 'Hundred Flowers Award for Best Supporting Actor', 'Sundance Film Festival Directing Award: U.S. Documentary', 'Polish Academy Special Award', 'Hong Kong Film Award for Best Supporting Actor', 'Best Artistic Contribution', 'Prize of the Ecumenical Jury', 'David di Donatello for Best European Film', 'BIFF Award for Best Feature Film', 'Philadelphia QFest Jury Award for Best Documentary', 'Teddy Jury Award', 'British Independent Film Award for Best Screenplay', 'Goya Award for Best Original Screenplay', 'Polish Academy Award for Best Cinematography', 'Polish Academy Award for Best Actor', 'Philadelphia QFest Jury Award for Best Director', 'Hong Kong Film Award for Best Screenplay', 'David Di Donatello for Best Costume Design', 'Gotham Independent Film Award for Best Film Not Playing at a Theater Near You', 'Golden Rooster Award for Best Actress', 'Best Movie of the Year  - JRL Gay Adult Film Awards', 'Award of the Argentinean Academy for Best Film', 'Hong Kong Film Award for Best Film', "German Film Award - Viewers' Choice: Best German Film of the Year", 'Bristish Independent Film Award for Best Supporting Actor', 'Gotham Independent Film Award for Best Documentary', 'Japan Academy Prize for Director of the Year', 'Raindance Film Festival Jury Prize for Best UK Feature', 'Philadelphia QFest Audience Award for Best Short Film', 'Sundance Film Festival World Cinema Directing Award: Dramatic', "People's Choice Award for Favorite Movie", 'Sundance Film Festival Excellence in Cinematography Award: U.S. Documentary', '3rd Prize Cinéfondation', 'Sundance Film Festival Audience Award: U.S. Documentary', 'Polish Academy Life Achievement Award', 'Goya Award for Best European Film', 'Gotham Independent Film Award for Breakthrough Director', 'Directing Prize of Un Certain Regard', 'Bodil Award for Best American Film', 'Goya Award for Best Costume Design', 'Nika Award for Best Director', 'Hong Kong Film Award  for Best Original Film Score', 'Grand Bell Award for Best Picture', 'Goya Award for Best Production Design', 'Best Twink Movie of the Year - JRL Gay Adult Film Awards', 'Philadelphia QFest Jury Award for Best Feature Film', 'Goya Award for Best New Actor', 'Sundance Film Festival Special Jury Prize for Best Ensemble Cast', 'Alfred P. Sloan Prize', 'German Film Award for Best Cinematography', 'Spur Award for Best Drama Script', 'César Award for Best Foreign Film', 'Japan Academy Prize for Outstanding Performance by an Actor in a Supporting Role', 'Japan Academy Award for Special Award from the Association', 'Cannes Film Festival Award for Best Screenplay', 'Goya Award for Best Supporting Actress', 'Gawad Urian Award for Best Picture', 'Cannes Best Director Award', "Caméra d'Or - Special Distinction", 'British Independent Film Award for Best Actor', 'David di Donatello for Best Screenplay', 'German Film Award for Best Script', 'Hong Kong Film Award for Best New Director', 'Nika Award for Best Film', 'German Film Award for Best Editing', 'Best Solo Video - GayVN', 'David di Donatello for Best Supporting Actor', 'Kinema Junpo Award for Best Film', 'Gotham Independent Film Audience Award', 'Golden Rooster Award for Best Art Direction', 'Grand Prize at the Mannheim-Heidelberg International Filmfestival', 'British Independent Film Award for Most Promising Newcomer', 'Hundred Flowers Award for Best Co-produced Film', 'Un Certain Regard Award for Best Actress', 'Best Performance in a Comic Role', 'Golden Rooster Award for Best Actor', 'DGA Award for Outstanding Directorial Achievement in Feature Film', 'Polish Academy Award for Best Editing', 'Sundance Film Festival World Cinema Cinematography Award for Documentary Filmmaking', 'Hong Kong Film Award for Best Supporting Actress', 'AACTA Award for Best Direction', 'Sundance Film Festival Audience Award: World Cinema Dramatic', 'Sundance Film Festival Excellence in Cinematography Award: World Cinema Dramatic', 'Polish Academy Award for Best Costume Design', 'Sundance Film Festival Audience Award: World Cinema Documentary', 'David di Donatello for Best Actor', 'Golden Wolf for Best Film', 'David di Donatello for Best Foreign Film', 'Nika Award for Best Actor', 'IDFA Award for Best Feature-Length Documentary', 'Best Gangbang Movie of the Year - JRL Gay Adult Film Awards', 'Ariel Award for Best Actress', 'Polish Academy Award for Best European Film', 'Golden Globe Award for Best Film - Musical or Comedy', 'Polish Academy Award for Best Actress', 'Japan Academy Prize for Outstanding Achievement in Winning an Outstanding Achievement', 'Hundred Flowers Award for Best Animation', 'Silver Bear for Best Director', 'David di Donatello for Best Music', 'Ariel Award for Best Picture', 'Independent Spirit Award for Best First Feature', 'Goya Award for Best New Actress', 'Hong Kong Film Award for Best Actor', 'Kurd Lasswitz Prize for Best Film', 'Goya Award for Best Actress', 'Silver Bear Extraordinary Jury Prize - Comedy', 'Hong Kong Film Award for Best Film Editing', 'Golden Icon', 'César Award for Best Writing - Adaptation', 'Goya Award for Best Spanish Language Foreign Film', 'César Award for Best Director', 'British Independent Film Award for Best British Independent Film', 'FAMAS Award for Best Picture', 'AACTA Award for Best Lead Actor', 'Hundred Flowers Award for Best Original Score', 'Filmfare Best Film of 50 Years', 'Sundance Film Festival Special Jury Prize for Breakout Performance: World Dramatic', 'Hundred Flowers Award for Best Actor', 'Hong Kong Film Award for Best Original Film Song', 'Zee Cine Award for Best Film', 'Hong Kong Film Award for Best Action Choreography', 'David di Donatello for Best Sound', 'Golden Blaster Award', 'Independent Spirit Award for Best First Screenplay', 'Japan Academy Prize for Screenplay of the Year', 'David di Donatello for Best Supporting Actress', 'Polish Academy Award for Best Producer', 'Bodil Award for Best Non-American Film', 'Japan Academy Prize for Picture of the Year', 'Golden Globe Cecil B. DeMille Award', 'Special Teddy Award', 'Teddy Award for Best Feature Film', 'National Board of Review Award for Best Breakthrough Performance', 'Goya Award for Best Adapted Screenplay', 'Expresión en Corto Best Mexican Film', 'Nebula Award for Best Script', 'German Film Award for Best Supporting Actor', 'Japan Academy Prize for Outstanding Achievement in Film Editing', 'Golden Bear Award for Best Motion Picture', 'Festival Genius Audience Award', 'Satellite Award for Best Foreign Language Film', "Caméra d'Or", 'Polish Academy Award for Best Film Score', 'AACTA Award for Best Adapted Screenplay', 'Silver Bear for Best Actor', 'David di Donatello for Best Film', 'Award of the Argentinean Academy for Best Actor', 'Golden Rooster Award for Best Director', 'Nika Award for Best Screenplay', 'Golden Lion', 'Award of the Argentinean Academy for Best Art Direction', 'Irish Film and Television Award for Best Director of Photography', 'British Independent Film Award Raindance Award', 'Independent Spirit Award for Best Feature', 'Palm Dog Award', 'Spur Award for Best Documentary', 'David di Donatello for Best Production Design', 'Ariel Award for Best Director', "German Film Award for Best Children's Film", 'Satellite Award for Best Film', 'British Independent Film Award for Best Director of a British Independent Film', 'Teddy Audience Award', 'Japan Academy Prize for Outstanding Achievement in Sound Recording', 'Australian Film Institute Award for Best Costume Design', 'Irish Film and Television Award for Best Film', 'PEN USA Literary Award for a Screenplay', 'Big Golden Arena for Best Film', 'Australian Film Institute Award for Best Actress in a Supporting Role', 'Polish Academy Award for Best Production Design', 'Hong Kong Film Award for Best Sound Design', 'Nika Award for Best Cinematography', 'German Film Award for Best Costume Design', 'Bronze Horse', 'National Film Award for Best Supporting Actor', "SFIFF Founder's Directing Award", 'Award of the Argentinean Academy for Best New Actress', 'Japan Academy Prize for Animation of the Year', 'Hundred Flowers Award for Best Actress', 'Japan Academy Prize for Outstanding Achievement in Art Direction', 'Hundred Flowers Award for Best Cinematography', 'Sundance Film Festival Special Jury Prize: U.S. Dramatic', 'National Film Award for Best Actor', 'Sundance Film Festival Special Jury Prize - U.S. Documentary', 'Golden Rooster Award for Best Supporting Actress', '2nd Prize - Cinéfondation', 'VPRO Tiger Award', 'Filmfare Award for Best Art Direction', 'Goya Award for Best Cinematography', 'Japan Academy Prize for Outstanding Performance by an Actress in a Leading Role', "Palme d'Or", 'AACTA Award for Best Supporting Actor', 'Filmfare Award for Best Performance in a Negative Role', 'African Movie Academy Award for Best Director', 'Sundance Film Festival Grand Jury Prize: World Cinema Documentary', 'Sundance Film Festival World Cinema Screenwriting Award', 'Golden Globe Award for Best English-Language Foreign Film', 'Japan Academy Prize for Outstanding Foreign Language Film', 'Hundred Flowers Award for Best Picture', 'Producers Guild of America Award for Best Theatrical Motion Picture', 'Edgar Award for Best Motion Picture Screenplay', 'David di Donatello for Best Foreign Director', 'British Independent Film Award for Best Achievement in Production', 'German Film Award for Best Direction', 'Edinburgh International Film Festival Standard Life Audience Award', 'David di Donatello for Best Editing', 'Nika Award for Best Music', 'British Independent Film Award for Best Actress', 'Vulcain Prize for an artist technician', 'Bodil Award for Best Danish Film', 'Golden Space Needle Audience Award for Best Actress', 'African Movie Academy Award for Best  Film', 'Gotham Independent Film Award for Breakthrough Actor', 'Philadelphia QFest Audience Award for Best Feature Film', 'Special Golden Ariel', 'AACTA Award for Best Cinematography', 'St. Louis Gateway Film Critics Association Award for Best Picture', 'Satellite Award for Best Film – Musical or Comedy', 'Sundance Film Festival Grand Jury Prize - U.S. Dramatic', 'Jury Prize - Un Certain Regard', 'Sundance Film Festival Audience Award: U.S.  Dramatic', 'Vulcan Award', 'German Film Award for Best Documentary', 'SXSW Grand Jury Award for Best Documentary Feature', 'Award of the Argentinean Academy for Best Editing', 'Award of the Argentinean Academy for Best Cinematography', 'Award of the Argentinean Academy for Best Director'}
            Answers = 348, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 348, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 36 / 223: {
          [('Main', '==', 'm.02vxn', ['exhibitions.exhibition_subject.exhibitions_created_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'The Paradise Institute'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 37 / 223: {
          [('Main', '==', 'm.02vxn', ['base.database.database_topic.database_s_for_this_topic'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:base.database.database_topic.database_s_for_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:base.database.database_topic.database_s_for_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Open Media Database'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 38 / 223: {
          [('Main', '==', 'm.02vxn', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 441
            Final Answer: {'My Life as a 10-Year-Old Boy', 'Practicas Con 4 Guiones', 'Profoundly Erotic', 'Como Mejorar un Guion', 'A British Picture', 'The Talented Mr. Ripley', 'Harlem Renaissance Dialogues (part 3): A Poet Rediscovered in The Great Debaters', 'Las Grandes Peliculas', 'How to Talk Dirty and Influence People', 'Going Steady', 'Moe Howard and the Three Stooges', 'Wes Craven', 'Sweet smell of success', 'Have You Seen…?: A Personal Introduction to 1,000 Films', 'Citizen Kane', "Mao's Last Dancer", 'The Field Guide to Sponsored Films', 'Body of vision', 'The Sound of Laughter', 'The Client', 'Guia Oficial de La Pelicula El Senor de Los Anillos', 'Makhmalbaf at Large', 'Movies on TV', 'Film as art', "Harrison's Reports and Film Reviews", 'The Undeclared War', 'Permanent midnight', 'John Ford', 'Print The Legend: The Life and Times of John Ford', 'The Kite Runner', 'I Hated, Hated, Hated This Movie', 'Understanding Audiences and the Film Industry', 'Vamp', 'Celebrity Detox', "My Mother's Keeper", 'Reality and Dreams', 'Film as a Subversive Art', 'The Long Banana Skin', 'Confessions of a Hollywood Star', 'Horror films of the 1970s', 'Reeling', 'Shaft', 'Not in front of the children', 'Street With No Name: A History of the Classic American Film Noir', 'Celebrity Lies', 'Kong Unbound: The Cultural Impact, Pop Mythos, and Scientific Plausibility of a Cinematic Legend', 'The Aurum Film Encyclopedia', 'Famous Forry Fotos', 'Moving Pictures', 'Science Fiction / Horror', 'ReAction! Chemistry in the Movies', 'Star Wars Encyclopedia', 'Weapons of Mass Seduction', "A Liar's Autobiography", 'The films of John Carpenter', 'The Power of Movies: How Screen and Mind Interact', 'The Art of Monsters, Inc', 'The Brief, Madcap Life of Kay Kendall', 'The top 10 of film', 'Sexo, mentiras y Hollywood', 'Notes on the 150th Anniversary of the Emancipation Proclamation', 'Slaves on screen', 'Red dragon', 'Transformers, Vol. 12', 'Black and White and Blue', 'Ghost', "Who's Who of Victorian Cinema", 'Movie Love', 'Joan Crawford', 'V for Vendetta: from Script to Film', 'If there were demons, then perhaps there were angels', 'Get Shorty', 'Comment by Maya Deren on “Meditation on Violence”', 'Brits in Hollywood', 'Dark Passage', 'Close up', "The Animator's Survival Kit", 'How to read a film', 'On the road to Tara', 'Moab Is My Washpot', 'Breaking the Glass Armor', "Nothing's Sacred", 'Profoundly Disturbing', 'The Bollywood Saga', 'Animation on DVD', 'New Novel, New Wave, New Politics', 'The Rock and Roll Film Encyclopedia', 'Creating Movies with a New Dimension: Time', "You'll Never Eat Lunch in This Town Again", 'The Indian in the Cupboard', 'Detours and lost highways', 'Sex Lives of the Hollywood Goddesses', 'John Wayne', 'Taking it all in', 'Now in Theaters Everywhere', 'Flashback', 'View from the Exterior', 'Which Lie Did I Tell?', 'The Society of the Spectacle', 'Star Trek Memories', 'LegEND', 'Hollywood vs. America', 'Anthony McCall: The Solid Light Films and Related Works', 'The Studs Terkel Interviews', 'My Autobiography', 'Hollywood And Whine', 'How It Happened Here', 'Letters and Diaries of Kathleen Ferrier', 'Gods in Polyester', 'The Search for Reality', 'Lucky', 'Reading the Vampire Slayer', 'New Queer Cinema: A Critical Reader', 'Hollywood Hex', 'Raising Kane and Other Essays', 'My Booky Wook', 'Elizabeth Taylor', 'The Ladykillers', 'The Rough Guide to Sci-Fi Movies', "Easy Riders, Raging Bulls: How the Sex-Drugs-And Rock 'N Roll Generation Saved Hollywood", 'Time Within Time: The Diaries 1970–1986', 'Somewhere in Time', 'Joe Bob Goes Back to the Drive In', 'Douglas Sirk Por Douglas Sirk', 'Star wars', 'Cinematography: The Creative Use of Reality', 'Films Beget Films', 'Creatures of the Night', 'Hooked', 'Journeys Into the Future', 'Little Children', 'Adventures in Creative Film-Making', 'Shakespeare in the Movies: From the Silent Era to Shakespeare in Love', 'Adventures in the Screen Trade', 'Spaghetti Nightmares', 'Ritual in Transfigured Time', 'Grandes Peliculas 2/ Big Movies 2', 'Satoshi Kon', 'Film history', 'Graham Crackers: Fuzzy Memories, Silly Bits, and Outright Lies', 'The Guerilla Filmmakers Handbook', 'Fools, bells, and the habit of eating', 'The long banana skin', 'Godard', 'Radical Hollywood', 'Movies and Methods', 'A Letter', 'Labyrinths', "The Moon's a Balloon", 'Too Fat to Fish', 'Art of Noir: The Posters And Graphics From The Classic Era Of Film Noir', 'A Move Abroad', 'Freak Like Me', 'When The Lights Go Down', 'Scream', 'Gollum: How We Made Movie Magic', 'Great Romantic Films', 'The Complete Ripping Yarns', 'All About Oscar', 'Rebecca', 'Libro del Guion', 'The usual suspects', 'Losing It', 'The Via Veneto Papers', 'Bergman', 'Awake in the Dark', 'Metallica: This Monster Lives', 'Seagalogy', 'The Sisterhood of the Traveling Pants', 'The Devil Finds Work', 'Metropolis', 'The Walls Came Tumbling Down', 'The Kenneth Williams Diaries', 'Films Without Images', 'The Hollywood Hall of Shame', 'Private Parts', 'Eisenstein on Disney', 'Snow White and the Seven Dwarfs', 'Naming Names', 'The Celluloid Closet', 'Now Playing at the Valencia', 'Charlie Chaplin: Intimate Close-Ups', 'City Boys', 'The Complete Films Of Laurel & Hardy', 'Cinema 1: The Movement Image', 'Look Who It Is!', 'A Beautiful Mind: The Shooting Script', 'Gods and monsters', 'Moving Experiences', "Leonard Maltin's Movie Guide", 'Jacques Tati: His Life and Art', 'Screenwriters Award-Winner Set, Collection 3', 'Broken mirrors/broken minds', 'Ernst Lubitsch', 'It Came from Outer Space', 'Rapture', 'Film Art', 'Songs My Mother Taught Me', 'Cult Movies', 'The Pianist and Taking Sides', 'Joe Bob Goes to the Drive In', 'Variety International Film Guide 2004', 'Dear Me', 'The Lord of the Rings', 'The Boys from Brazil', 'Bob Hope: The Road Well-Traveled', 'Bambi vs. Godzilla: On the Nature, Purpose, and Practice of the Movie Business', 'David Lean', 'Rebels on the backlot', 'Tribeca Talks', 'State of the Art', 'Stranger Than Fiction', 'The 50 Greatest Cartoons', 'Round Up the Usual Suspects: The Making of Casablanca', 'Hide in plain sight', 'Never Coming To A Theater Near You', 'Frames', 'The Dharma of Star Wars', 'Casino', "An analytical guide to television's Battlestar Galactica", 'The speed of sound', '$30 Film School', 'Knee Deep in Paradise', 'The Erotic Anime Movie Guide', 'Silent Bob Speaks', 'Mental Hygiene: Classroom Films 1945–1970', 'Where the Red Fern Grows', 'To the Stars: The Autobiography of George Takei', 'The Big Picture: The New Logic of Money and Power in Hollywood', 'Running Time', 'Taking It All In', 'Walkabout', 'Afterglow: A Last Conversation with Pauline Kael', 'The Astro Boy Essays', 'New Worlds, New Civilizations', 'Aftershocks', 'Rocky Stories', 'Complicated women', 'On Directing Film', 'On Cukor', 'I Lost It at the Movies', 'Seeing Is Believing', "Morecambe & Wise : There's No Answer To That!", 'Accidental Genius: How John Cassavetes Invented American Independent Film', 'Cinema as an Art Form', 'Mysterious Stranger', 'The Rat Pack', 'The Impulse to Preserve', 'The Da Vinci Code Illustrated Screenplay', 'Seven Samurai', 'The New Wave, 30th Anniversary Edition', 'An anagram of ideas on art, form and film', '101 Greatest Films of Mystery & Suspense', 'Three philosophical filmmakers', 'The Fifty Worst Films of All Time', 'El Manual del Guionista', 'Miss America', 'World Cinema: Diary of a Day', 'Just a Geek', 'They Went Thataway', 'Natasha', 'Eric & Ernie : The Autobiography of Morecambe & Wise', 'Men, women, and chain saws', 'The Butcher Boy', 'Goldwyn', 'Find Me', 'Expanded Cinema', 'Gasping for Airtime: Two Years in the Trenches of Saturday Night Live', 'Asian pop cinema', 'Jimmy Stewart', 'One More Time', 'Mercy in Her Eyes', 'Behind the Screen', '1001 Movies You Must See Before You Die', 'Ekei Bole Shooting', 'From Caligari to Hitler: A Psychological History of the German Film', 'From the Lower East Side to Hollywood', "The Filmgoer's Companion", 'A Night at the Movies, or, You Must Remember This', 'The Great Movies', 'The Cinema Book', 'The Unimportance of Being Oscar', 'Little Nellie 007', 'The Two of Us: My Life with John Thaw', 'The West Wing Script Book', "A Year at the Movies: One Man's Filmgoing Odyssey", 'MacMillan International Film Encyclopedia', 'Our Films, Their Films', 'Cinema of outsiders', 'Valentino', 'Killer instinct', 'Sergio Leone', 'First and Last', 'Encyclopedia of Domestic Animation', 'When Harry met Sally--', 'Mondo Macabro', 'Mr. Strangelove', 'Your Movie Sucks', 'Monster: Living Off the Big Screen', 'Choreography for the Camera', 'On The Passion of the Christ', 'Moteros Tranquilos, Toros Salvajes', 'Behind the Camera', 'Conversations with Woody Allen', 'London Film Location Guide', 'My Life', 'Exploring the Matrix', 'My Life in Art', 'Planning the Low-Budget Film', 'The Cavalry Charges', "Walt's Time: From Before to Beyond", '28 Days Later', 'North by Northwest', 'Mommie Dearest', 'Ingmar Bergman, Cinematic Philosopher', 'Sirk on Sirk', 'The End of Celluloid', 'Making short films', 'Tecnica del Montaje Cinematografico', 'Forms of Being', 'Blackeyes', 'Reel Bad Arabs', 'Movies in Fifteen Minutes', 'Creative Cutting', 'Little Criminals', 'All I Need to Know about Filmmaking I Learned from the Toxic Avenger', 'I Am Not Spock', 'The Memoirs of an Amnesiac', 'Rebel Without a Crew', 'River of Shadows: Eadweard Muybridge and the Technological Wild West', 'Chaplin: His Life and Art', 'Nickelodeon theatres and their music', 'Star Trek Movie Memories', 'Virtual Tibet', 'The Unbearable Lightness of Being', 'Natalie Wood', 'Movie Lust', 'The Man Who Stopped Time', 'I Am Spock', 'Herr Lubitsch Goes to Hollywood', 'New Directions in Film Art', 'American Movie Critics', 'Ken Adam', 'Blue Days, Black Nights: A Memoir', 'The Conformist', 'The Frodo Franchise', "You Can Run But You Can't Hide: The Life and Times of Dog the Bounty Hunter", 'Adaptation', 'Love, Sex, Death, and the Meaning of Life', 'Elizabeth', 'Doing It Right', 'Incredibly Strange Films', 'Immoral Tales: European Sex & Horror Movies 1956-1984', 'Reality transformed', 'Alec Guinness', 'The Magic Behind the Voices', 'A very dangerous citizen', 'The Battle for Bond', 'Father Ted', 'The Monogram Checklist', 'Spaghetti Westerns', 'On the Waterfront', 'The Modern Amazons: Warrior Women On-Screen', 'Oz Before the Rainbow', 'The Word Made Flesh', 'Meat is Murder', 'Trainspotting', 'Killing for Culture', 'The Sewing Circle', 'Steve McQueen', 'My Son the Fanatic', 'The Confetti Trees', 'War and Cinema', 'The Columbia Comedy Shorts', 'Lon of 1000 Faces', 'The Variety Almanac 2000', 'Cities of Words', 'Planning by Eye', 'You Are There Teleplays', 'Natural Selection', 'Deeper into Movies', 'If--', 'Growing Up Brady', 'Magic is New', 'The War on Mel Gibson', 'The dark side of the screen', 'Make your own damn movie!', 'Lynch on Lynch', 'The Naked Truth', 'Sundance to Sarajevo', 'The Very Eye of Night', 'Swept from the sea', 'Screen', 'Napoleon', 'The New Biographical Dictionary of Film', 'Lolita', 'Bright darkness', "C-SPAN's LCV 2011 U.S. Cities Tour Wraps up Savannah Shoot, Now in Charleston", 'Sex Lives of Hollywood Idols', 'The Making of The Wizard of Oz', 'The Believer', 'Rebel', 'Breakout', 'Amateur versus Professional', "La Psychologie de l'Art", 'Creation Cinema series', 'Kiss Kiss Bang Bang', 'The A to Z of New Religious Movements', 'Profile in Silver', 'Me and My Shadows: A Family Memoir', "I'm a Born Liar: A Fellini Lexicon", 'Notorious', 'If Chins Could Kill: Confessions of a B Movie Actor', 'Pursuits of Happiness', 'I, Robot', 'Robert Mitchum', 'My Boring Ass Life: The Uncomfortably Candid Diary of Kevin Smith', "Harlan Ellison's Watching", "This 'N That", 'Screenwriters Award-Winner Set, Collection 2', 'Blockbuster', 'The Night of The Hunter', "Mike Nelson's Movie Megacheese", 'Even Cowgirls Get the Blues', 'The lavender screen', 'A critical history of Doctor Who on television', 'The world viewed', 'Outlaw Animation', 'The Kennedys in Hollywood, Updated Edition', 'Freeze Frame', 'Bob Hope', 'Film in Australia', 'A method to their madness', 'Bishoy Chalachchitra', 'Film', 'Gospel of the Living Dead', 'Cinderella Man', 'Teen Dreams', 'The science of Star wars'}
            Answers = 439, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 439, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 39 / 223: {
          [('Main', '==', 'm.02vxn', ['visual_art.visual_art_medium.artworks'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:visual_art.visual_art_medium.artworks ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:visual_art.visual_art_medium.artworks ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Art Make-Up, Nos. 1-4'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 40 / 223: {
          [('Main', '==', 'm.02vxn', ['education.field_of_study.journals_in_this_discipline'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:education.field_of_study.journals_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:education.field_of_study.journals_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 5
            Final Answer: {'Cinema Journal', 'Velox: Critical Approaches to Contemporary Film', 'CineAction', 'http://olourde.canalblog.com/', 'Film Comment'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 41 / 223: {
          [('Main', '==', 'm.02vxn', ['internet.website_category.sites'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:internet.website_category.sites ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:internet.website_category.sites ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 49
            Final Answer: {'Douban', 'FilmAffinity', 'Filmweb', 'The Lone Ranger Official Site', 'Christian Film Database', 'Yahoo! Movies', 'BoxOffice Buz', 'Slant Magazine', 'PassPlay', 'Selena Gomez Website', 'Internet Movie Database', 'Filmfront', 'British Comedy Guide', 'Up Official Website', 'Hong Kong Movie DataBase', 'Frankenweenie Official Website', 'Popcornflix', 'http://blogbiz.pl', 'Let It Shine Official Website', 'Hong Kong Cinemagic', 'Complete Index to World Film', 'Viewster', 'Cinderella', 'Finding Nemo', 'explore', 'Flixster.com', 'MyMovies.net', 'Frankenweenie (1984)', 'Brave Official Website', 'Movieline', 'Withoutabox', 'Official Website of Peter Pan', 'Korean Movie Database', 'Disney.com', 'Zamm', 'rockhopper.tv', 'Disney Channel', 'Oz: The Great and Powerful Official Website', 'The Odd Life of Timothy Green official website', 'Hollywood Streams', 'OpenFlix', 'globalonenessproject.org', 'FindAnyFilm.com', 'Off Planet Films', 'Box Office India', 'Fandor', 'Movie2k.to', 'Stylus Magazine', 'John Carter Official Website'}
            Answers = 49, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 49, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 42 / 223: {
          [('Main', '==', 'm.02vxn', ['broadcast.genre.content'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:broadcast.genre.content ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:broadcast.genre.content ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 246
            Final Answer: {'The 10th Wonder Podcast (MP3)', 'Henry Michel Rulez The World » Henry Michel Rulez The World', 'Kingdoms Of Grace', 'Scottish Students on Screen - a Podcastmatters Ltd Production', 'PRI: To the Best of Our Knowledge', 'Tales of Horror Podcast', 'Cowboy  Theater', 'Family Theater  Podcast', 'Samantha Brown Podcasts', 'Early TV Matinee', 'Adventures of Flash Gordon Podcast', 'Nightly Business Report - NBR Podcast | PBS', 'TERRA: THE NATURE OF OUR WORLD', 'Saw*Kick Media » Sports Report', 'Get Off Topic Podcast', 'Gunsmoke  Podcast', 'Fibber McGee and Molly Show', 'PodComics (HD) - Free daily animated shorts', 'Professional Rockstars - PRTV', "Rock N' Reel", 'TheSailingChannel.TV', 'Cort and Fatboy', 'Captain Midnight Adventures Podcast', 'In The Now', "thewrockclub's Podcast", 'On The Media', 'CBS Entertainment News Podcast - Entertainment Report', 'EPIC-FU (ipod)', 'Filter MagCAST', 'Samantha Brown Podcast', 'Beatles A Rama The Show', 'Agatha Christie Radio Mysteries', "chibitokyo's Podcast", 'Half Hour Wasted', 'Drake & Josh', 'Doctor Who: Tin Dog Podcast', 'Star Wars Action News', 'The History Channel: Just Another Day', 'The Jack Benny Show Podcast', 'Four Guys Walk Into a Bar...', "Attack of the Show's Daily Video Podcast", 'Worldview Podcast', 'ULTRA FORCE VISUALS', 'AIRpod', 'Pinocchio', 'The Zero Room', 'Radio Tv ...en sincronía podcast', 'EarDrummahz Radio Podcast', 'Buffy Between the Lines', 'The Ricky Gervais Podcast', 'Masters Cast', 'APM: Sound Opinions on Demand', 'High School Musical 2', 'Talk Trek', "Zahooee's World", 'Cisco Kid Podcast', "WNYC's Soundcheck", 'Home Planet', 'Greys Anatomy Official podcast', 'X Minus One Podcast', 'Forum', 'Vintage ToonCast', 'British Science Fiction Podcast', 'Radio NRI Indian Music Update. Bollywood and Beyond!', 'Pod Surf TV', 'NPR: Movies', 'GeeksOn', 'BILL MOYERS JOURNAL | PBS', 'French Maid TV', 'HBO Films', 'PodComics - Free daily animated shorts', 'Folk Rock Podcast of Shaolin Records', 'Vintage Memories', 'bt IndieCast', 'Comedy Central: Stand-Up (Video)', 'Weihnachten bis nichts mehr geht', 'Anime Pulse', 'Movies', 'Curb Your Enthusiasm (Season 6)', "KQED's Pacific Time", 'Dragon in Georgia Podcast', 'Studio 360', "Oprah.com's Spirit Channel", 'The Victory Garden video podcast | PBS', 'Picture Show Pundits', "Dave's Hollywood Minute - The Online Edition", 'I Was A Communist For The FBI Podcast', "WFUV's Movie Review Podcast", 'Crank That Duffle Bag Boiz', 'Around the Net', 'ACM', 'gspn.tv - Weekly Lost Podcast', 'Tiki Bar TV', 'Ducky Does TV | Give Me My Remote Podcast', 'Cash & Treasures Podcast', 'CNN: Showbiz Tonight (Video)', 'The Big Brother Podcast', 'Super Heroes Podcast', 'Adventures of Bulldog Drummond Podcast', "The Daily 10's Hollywood Rap-Up Podcast (video)", 'Tell Me You Love Me', 'Take One Step for a Healthy Heart - companion podcast | PBS', 'KINO -  Map of the Universe - TV', 'MuggleCast : Harry Potter podcasting', 'CNN: The Screening Room (Video)', "FBi 94.5's Big Screen", "Tim Goodman's TV Talk Machine", 'Spider-Man Crawl Space Podcast', 'The Serials', 'Just Another Fanboy', "Trip Fandango's Cavalcade of Stars", 'I AM LEGEND OFFICIAL UK DVD PODCAST', "Entertainment Weekly's Inspirations Podcast", "Slate's Spoiler Specials", 'Hannah Montana Podcast!', '9/11 SYNCHRONICITY: Coincidence or Premeditated?', 'Sleepy Cast', 'Wagons West', 'Kore New Media', 'Doctor Who Podcast: Whovian Quest', 'The Directors Cut Radio Program', 'FOXCAST: Family Guy', 'Discovery Channel Video Podcasts', 'FatFreeFilm', 'AtomFilms To Go', "Karmagrrrl's Video Podcast", 'Around Comics - The Comic Book Culture Podcast', 'VH1 Best Week Ever', 'Decoder Ring Theatre', 'Comedy 365', 'What Not To Wear: Trends', 'Film Reviewz Weekly Podcast', 'Alaska HDTV | Medium Format', "People.com: This Week's Buzz", 'HBO Latino', 'Rumblefish New Music Podcast with Zach and Whit', 'Reel Prose', 'The Shadow  Podcast', 'The CattyCast', 'National Geographic Video Shorts', 'Zero Hour Podcast', 'Comedy Central MotherLoad Web Shows ( Video )', 'Mophonics presents...episode 2', 'Filmnews', 'Quick Stop Entertainment', 'Andrew Zimmern Podcast', 'Bruce Wagner Show™ - ""not just another gay talk show host""', 'Crank That Mixtape', 'HBO Documentary Films', 'Podcast Helsingborg', 'Swelltown: The Weekly Juice', 'Il Trio Medusa', 'New York Times: Movie Review', "WNYC's Brian Lehrer Show", 'Filmspotting', 'Moving Rushmore Vidcast HD', 'UVTV: Metal, Hardcore & Hard Rock Music Videos', 'Space Patrol  TV', 'Tommy2.Net Exclusive Interviews', 'Crime Fighters', 'Wild Chronicles', 'Firefly Talk, A Firefly Podcast', 'FrequencyCast UK TV and Tech', 'Dane Cook : DANEcast', 'Dan Sindel - Symphonic Guitars..! Guitar Driven Podcasts', 'Beware of the Babylon Podcast', 'Northwest Noise', 'Noisescape TV RSS Feed', 'Street Fury Video Podcast', 'American Experience | PBS', 'VOX Talk', 'Movies You Should See', 'Filmed, Not Stirred', 'Tekzilla', 'DVD Verdict Presents...', 'Sci-Fi Talk', 'Jean-Michel Cousteau: Ocean Adventures . Podcasts | PBS', 'Survivor Fans Podcast', 'Scifi Friday', 'SciFiDig', 'Real HT Info Podcast', 'ShowGirls', 'PT Cruiser Cast', 'Podshow Radio', 'VH1 Flavor of Love Podcast', 'Tango Tales: all about Argentine tango', 'Jason & Iyare - At Large', "Dusty Wright's Culture Catch - Podcast", "fuzzybuttonfilms' podcast", 'Tropical Pizza', "rosedropmedia's Podcast", 'The Eclectic Review', 'Movies 101', 'Video Deejay Chiama Italia', "CafeJava's JAVACAST", 'Cheat! Video Podcast', 'Inside Look', 'Welcome to Hong Kong', 'WARP Anime Podcast', 'Daytime Confidential', 'The Midnight Podcast', 'RRR FM', 'Tea.  Earl Grey.  Hot.', "X-Play's Daily Video Podcast", 'AnimeNation Anime News', "perrymason's Podcast", 'BG Blast', 'TV Ate My Dinner', 'Your High School Musical', 'Dog Whisperer', 'TriggerStreetTV', 'Tarkan DeLuxe', 'UKotaku', 'Reel Reviews Radio', 'San Francisco Chronicle: Movies with Mick LaSalle', 'Deejay Chiama Italia', 'Travel Ideas Podcast', 'Saw*Kick Media » Audio', "Knitwitch's Scifi/Fantasy Zone Podcast", 'Father Knows Best Podcast', 'Primetime Pulse', 'Tony and Friends Podcast', 'Tuning In With Wayne Henderson', 'Terry & The Pirates Podcast', 'Galore Podcast', 'RED BAR RADIO .com', 'NerdCast', 'gspn.tv - Heroes Podcast', 'TheSurfNetwork.com - Free Sessions', 'Dick Dynamo the 5th Dimensional Man', 'Lux Radio Theater  Podcast', 'Kryptographik', 'CNN: On Screen', 'Cinemax', 'The McLaughlin Group', "geeksyndicate's Podcast", 'Saw*Kick Media » B-Sides', 'Never Not Funny', 'Simply Hear', 'British Invaders', 'Jon Brunson Outdoors', 'NPR: Justice Talking', 'Tavis Smiley . All-American Presidential Forums | PBS', 'Hollywood Party Girl Podcast', 'The Shadow and James Show', 'Mail Order Zombie'}
            Answers = 246, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 246, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 43 / 223: {
          [('Main', '==', 'm.02vxn', ['amusement_parks.ride_theme.rides'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:amusement_parks.ride_theme.rides ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:amusement_parks.ride_theme.rides ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Universal Florida Studio Tour'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 44 / 223: {
          [('Main', '==', 'm.02vxn', ['base.events.subject_of_festival.festivals_of_this_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:base.events.subject_of_festival.festivals_of_this_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:base.events.subject_of_festival.festivals_of_this_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Film festival'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 45 / 223: {
          [('Main', '==', 'm.02vxn', ['film.film_festival_focus.festivals_with_this_focus'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:film.film_festival_focus.festivals_with_this_focus ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:film.film_festival_focus.festivals_with_this_focus ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 14
            Final Answer: {'Palm Springs International Film Festival', 'The YoungCuts Film Festival', 'Tokyo Filmex', 'Festival Paris Cinéma', 'AFI Dallas International Film Festival', "International Critics' Week", 'Film Comment Selects', 'Big Bear Lake International Film Festival', 'Newport Beach Film Festival', 'Cork Film Festival', 'New Horizons Film Festival', 'Mostly British Film Festival', 'Helsinki Film Festival', 'Pesaro Film Festival'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 46 / 223: {
          [('Main', '==', 'm.057ph', ['fictional_universe.fictional_character.appears_in_these_fictional_universes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.appears_in_these_fictional_universes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.appears_in_these_fictional_universes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Mouseton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 47 / 223: {
          [('Main', '==', 'm.057ph', ['fictional_universe.fictional_character.occupation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.occupation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.occupation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Police detective'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 48 / 223: {
          [('Main', '==', 'm.057ph', ['fictional_universe.fictional_character.species'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.species ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.species ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Mouse'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 49 / 223: {
          [('Main', '==', 'm.057ph', ['fictional_universe.fictional_character.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 50 / 223: {
          [('Main', '==', 'm.057ph', ['fictional_universe.fictional_character.character_created_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.character_created_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.character_created_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 2
            Final Answer: {'Walt Disney', 'Ub Iwerks'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 51 / 223: {
          [('Main', '==', 'm.057ph', ['base.parody.parodied_subject.parodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:base.parody.parodied_subject.parodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:base.parody.parodied_subject.parodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'The Ring'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 52 / 223: {
          [('Main', '==', 'm.057ph', ['base.americancomedy.impersonated_celebrity.impersonated_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Rich Little'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 53 / 223: {
          [('Main', '==', 'm.057ph', ['base.familyguy.family_guy_reference.episodes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:base.familyguy.family_guy_reference.episodes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:base.familyguy.family_guy_reference.episodes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'A Hero Sits Next Door'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 54 / 223: {
          [('Main', '==', 'm.057ph', ['base.disneyana.disney_product_theme.disney_products_based_on_this_theme'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:base.disneyana.disney_product_theme.disney_products_based_on_this_theme ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.057ph fb:base.disneyana.disney_product_theme.disney_products_based_on_this_theme ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'WDW Mickey Mouse Pin Trading 2006 pin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 55 / 223: {
          [('Main', '==', 'm.06c6l', ['travel.travel_destination.tourist_attractions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'Banff National Park'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 56 / 223: {
          [('Main', '==', 'm.06c6l', ['geography.mountain_range.mountains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:geography.mountain_range.mountains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:geography.mountain_range.mountains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 101
            Final Answer: {'Challenger Point', 'Treasure Mountain', 'Lolo Peak', 'Bushnell Peak', 'Mount Bailey', 'Bennett Peak', 'Mount Robson', 'Mount Oxford', 'Greenhorn Mountain', 'Snowmass Peak', 'Mount Sherman', 'Mount Nystrom', 'Mount Shavano', 'Mount Lindsey', 'Baldy Mountain', 'Torreys Peak', 'Wheeler Peak', 'Truchas Peak', 'Conejos Peak', 'Gothic Mountain', 'Pyramid Peak', 'Mount Columbia', 'Mount Sopris', 'Mount Julian', 'Missouri Mountain', 'West Elk Peak', 'Maroon Bells', 'Tabeguache Peak', 'Castle Mountain', 'Mount Moran', 'Parkview Mountain', 'Mount Princeton', 'Summit Peak', 'Graham Peak', 'Little Bear Peak', 'Ouray Peak', 'Venado Peak', 'Lone Cone', 'Bison Peak', 'Yellowstone Caldera', 'East Spanish Peak', 'Mount Wood', 'Cheyenne Mountain nuclear bunker', 'Antora Peak', 'Santa Fe Baldy', 'Hesperus Mountain', 'Mount Gass', 'Chair Mountain', 'East Beckwith Mountain', 'Whetstone Mountain', 'Capitol Peak', 'Mount Wilson', 'Dolores Peak', 'Mount Gunnison', 'Crestone Needle', 'Borah Peak', 'Mount Herard', 'Mount Bross', 'West Buffalo Peak', 'Mount Richthofen', 'Mount Democrat', 'Atlantic Peak', 'Clark Peak', 'Wind River Peak', 'Sultan Mountain', 'Francs Peak', 'Granite Peak', 'Elliott Mountain', 'Mount Peale', 'La Plata Peak', 'Parry Peak', 'Tower Mountain', 'Lavender Peak', 'Matchless Mountain', 'Mount Gould', 'Lizard Head', 'Peak 13,010', 'Mount Siyeh', 'Mount Jackson', 'Castle Peak', 'Mount Elbert', 'Saviers Peak', 'Tijeras Peak', 'Flat Top Mountain', 'South River Peak', 'Twilight Peak', 'North Arapaho Peak', 'Snowmass Mountain', 'Anthracite Peak', 'Mount Lincoln', 'Hagues Peak', 'Cloud Peak', 'Columbia Point', 'Quandary Peak', 'Saint Nicholas Peak', 'Specimen Mountain', 'Blanca Peak', 'Mount Massive', 'Mummy Mountain', 'Huron Peak'}
            Answers = 100, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 100, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 57 / 223: {
          [('Main', '==', 'm.06c6l', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 4
            Final Answer: {'Rocky Mountain National Park', 'Lake of Glass', 'Canadian Rockies', 'Broomfield'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 58 / 223: {
          [('Main', '==', 'm.06c6l', ['location.location.partially_containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 2
            Final Answer: {'United States of America', 'Canada'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 59 / 223: {
          [('Main', '==', 'm.06c6l', ['geography.mountain_range.passes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:geography.mountain_range.passes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:geography.mountain_range.passes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 133
            Final Answer: {'Chief Joseph Pass', 'Yellow Jacket Pass', 'Wolf Creek Pass', 'Gibbons Pass', 'South Kawka Pass', 'Mullan Pass', 'Big Mountain Pass', 'Fraser Pass', 'Logan Pass', 'Molar Pass', 'Dunraven Pass', 'Miette Pass', 'Rollins Pass', 'McClure Pass', 'Loveland Pass', 'Imogene Pass', 'Willow Creek Pass', 'Pine Pass', 'Lookout Pass', 'Trout Creek Pass', 'Buffalo Pass', 'Galena Summit', 'Abbot Pass', 'Targhee Pass', 'Sylvan Pass', 'Berthoud Pass', 'Flesher Pass', 'South Pass', 'Kakwa Pass', 'Milner Pass', 'Poncha Pass', 'Guardsman Pass', 'Highwood Pass', 'Monument Hill', 'Teton Pass', 'Red Pass', 'Monarch Pass', 'Lolo Pass', 'Firebrand Pass', 'Gunsight Pass', 'Buchanan Pass', 'Molas Pass', 'Powder River Pass', 'Craig Pass', 'Argentine Pass', 'Rogers Pass', 'McGregor Pass', 'Ute Pass', 'Assiniboine Pass', 'Scofield Pass', 'Tennessee Pass', 'Lemhi Pass', 'Elk Pass', 'Jones Pass', 'Dead Indian Pass', 'Colter Pass', 'Mosca Pass', 'Marias Pass', 'Athabasca Pass', 'Bridger Pass', 'Guanella Pass', 'Raynolds Pass', 'La Poudre Pass', 'Tomichi Pass', 'Kicking Horse Pass', 'Jonas Pass', 'Badger Pass', 'Akamina Pass', 'Kenosha Pass', 'Black Sage Pass', 'Vail Pass', 'Taylor Pass', 'Colorado mountain passes', 'Beartooth Pass', 'Wapiti Pass', 'Gore Pass', 'Marshall Pass', 'Eagle Pass', 'Howse Pass', 'Raton Pass', 'Hagerman Pass', 'Centre Pass', 'Shrine Pass', 'Granite Pass', 'Rabbit Ears Pass', 'Monida Pass', 'Fall River Pass', 'Cotton Grass Pass', 'Red Hill Pass', 'Kananaskis Pass', 'Red Mountain Pass', 'Bozeman Pass', 'Mosquito Pass', 'Coal Bank Pass', 'Yellowhead Pass', 'Nez Perce Pass', 'Red Cone Pass', 'Lost Trail Pass', 'Swiftcurrent Pass', 'Glorieta Pass', 'Sinclair Pass', 'Sunwapta Pass', 'North Molar Pass', 'Muddy Pass', 'Muncho Pass', 'Vermilion Pass', 'Kootenai Pass', 'Togwotee Pass', 'Wilkerson Pass', 'Cochetopa Pass', 'MacDonald Pass', 'Robson Pass', 'Pearl Pass', 'Carcajou Pass', 'Bush Pass', 'Two Ocean Pass', 'Cameron Pass', 'Independence Pass', 'Sifton Pass', 'Fremont Pass', 'Cottonwood Pass', 'Snoqualmie Pass', 'Pine Creek Pass', 'Tumbling Pass', 'Black Bear Road', 'Boreas Pass', 'Big Hole Pass', 'Hoosier Pass', 'Crowsnest Pass', 'Squaw Pass', 'Lizard Head Pass', 'Ptarmigan Pass', 'Warner Pass'}
            Answers = 133, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 133, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 60 / 223: {
          [('Main', '==', 'm.06c6l', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'Dr. Strangelove'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 61 / 223: {
          [('Main', '==', 'm.06c6l', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 3
            Final Answer: {'UTC−07:00', 'UTC-8', 'UTC−06:00'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 62 / 223: {
          [('Main', '==', 'm.06c6l', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06c6l fb:location.location.area ?o1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 WHERE { fb:m.06c6l fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'991691'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 63 / 223: {
          [('Main', '==', 'm.06c6l', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 2
            Final Answer: {'Canada', 'North America'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 64 / 223: {
          [('Main', '==', 'm.06c6l', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 30
            Final Answer: {'Warpath of the Mountain Man', 'The ghost town mystery', 'Adventures in the Rocky Mountains', 'Where the wild rose blooms', 'Journey of the mountain man', 'The target', 'Promise me tomorrow', 'Wrath of the mountain man', 'Whispers of moonlight', 'The unquiet country', 'Code of the mountain man', 'Ambush of the mountain man', 'To know her by name', 'Candle', 'Trek Of The Mountain Man', 'Through the Yellowstone Park on horseback', 'Valor of the Mountain Man', 'Pursuit of the mountain man', 'Written in the Stars', 'The last mountain man', 'Canyon winter', 'The Return Of The Mountain Man', 'Where the waters divide', 'Rage of the mountain man', 'Fury of the mountain man', 'Quest of the mountain man', 'Monkey Beach', 'Cunning of the mountain man', 'Mountain man', 'Yellowstone Treasures'}
            Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 65 / 223: {
          [('Main', '==', 'm.06c6l', ['fictional_universe.fictional_setting.works_set_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:fictional_universe.fictional_setting.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:fictional_universe.fictional_setting.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'The Journal of Julius Rodman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 66 / 223: {
          [('Main', '==', 'm.06c6l', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'Dark Autumn, Rocky Mountains'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 67 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 68 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.music'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.music ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.music ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Bill Conti'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 69 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.production_companies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.production_companies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.production_companies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 2
            Final Answer: {'Chartoff-Winkler Productions', 'United Artists'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 70 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.featured_film_locations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.featured_film_locations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.featured_film_locations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 2
            Final Answer: {'Grand Olympic Auditorium', 'Philadelphia'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 71 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.film_set_decoration_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_set_decoration_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_set_decoration_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Ray Molyneaux'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 72 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.film_production_design_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_production_design_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_production_design_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'William J. Cassidy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 73 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.film_casting_director'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_casting_director ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_casting_director ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Caro Jones'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 74 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.film_series'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_series ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_series ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 75 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.featured_song'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.featured_song ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.featured_song ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Gonna Fly Now'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 76 / 223: {
          [('Main', '==', 'm.0cf08', ['media_common.quotation_source.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:media_common.quotation_source.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:media_common.quotation_source.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Yo, Adrian!'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 77 / 223: {
          [('Main', '==', 'm.0cf08', ['education.school_mascot.school'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:education.school_mascot.school ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:education.school_mascot.school ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'A. Crawford Mosley High School'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 78 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 4
            Final Answer: {'Drama', 'Action film', 'Sports film', 'Romance Film'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 79 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 80 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.film_art_direction_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_art_direction_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_art_direction_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'James Spencer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 81 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.directed_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.directed_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.directed_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'John G. Avildsen'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 82 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.initial_release_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0cf08 fb:film.film.initial_release_date ?o1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 WHERE { fb:m.0cf08 fb:film.film.initial_release_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'1976'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 83 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.tagline'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.tagline ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.tagline ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 84 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.written_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.written_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.written_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Sylvester Stallone'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 85 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.executive_produced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.executive_produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.executive_produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Gene Kirkwood'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 86 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.film_collections'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_collections ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.film_collections ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {"AFI's 100 Years...100 Movies"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 87 / 223: {
          [('Main', '==', 'm.0cf08', ['media_common.netflix_title.netflix_genres'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:media_common.netflix_title.netflix_genres ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:media_common.netflix_title.netflix_genres ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 8
            Final Answer: {'Dramas', 'Triumph of the Underdogs', 'Drama', 'Classic Dramas', 'Boxing', 'Blockbuster', 'Sports Dramas', 'Sports Stories'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 88 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.produced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 2
            Final Answer: {'Irwin Winkler', 'Robert Chartoff'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 89 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.cinematography'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.cinematography ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.cinematography ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'James Crabe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 90 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.edited_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.edited_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.edited_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 2
            Final Answer: {'Richard Halsey', 'Scott Conrad'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 91 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.rating'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.rating ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.rating ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'PG (USA)'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 92 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.soundtrack'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.soundtrack ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.soundtrack ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 2
            Final Answer: {'Rocky I Soundtrack', 'Rocky'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 93 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.subjects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.subjects ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.subjects ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Boxing'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 94 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.sequel'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.sequel ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:film.film.sequel ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky II'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 95 / 223: {
          [('Main', '==', 'm.0cf08', ['user.robert.ranked_lists.ranked_list_item.appears_in_ranked_lists'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:user.robert.ranked_lists.ranked_list_item.appears_in_ranked_lists ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:user.robert.ranked_lists.ranked_list_item.appears_in_ranked_lists ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 96 / 223: {
          [('Main', '==', 'm.0cf08', ['dataworld.gardening_hint.split_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cf08 fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 97 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Robert Blake'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 98 / 223: {
          [('Main', '==', 'm.01jx92', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 7
            Final Answer: {'Golden Globe Award for Best Actor - Drama Film', 'Golden Globe Award for Best Performance by an Actor in a Mini-Series or Motion Picture Made for Television', "People's Choice Award for Favorite Performer in a New TV Program", 'Primetime Emmy Award for Outstanding Lead Actor - Drama Series', 'Golden Globe Award for Best Performance by an Actor in a Television Series – Drama', 'Golden Raspberry Award for Worst Actor', 'Primetime Emmy Award for Outstanding Lead Actor - Miniseries or a Movie'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 99 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 3
            Final Answer: {'James Gubitosi', 'Joan Blake'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Current: 100 / 223
        Checking schema 100 / 223: {
          [('Main', '==', 'm.01jx92', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 5
            Final Answer: {'Baretta', 'Hell Town', 'Our Gang', 'The Richard Boone Show'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 101 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 3
            Final Answer: {'Sondra Blake', 'Bonnie Lee Bakley'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 102 / 223: {
          [('Main', '==', 'm.01jx92', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Archive Footage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 103 / 223: {
          [('Main', '==', 'm.01jx92', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01jx92 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.01jx92 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 2
            Final Answer: {'1975', '1976'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 104 / 223: {
          [('Main', '==', 'm.01jx92', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Baretta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 105 / 223: {
          [('Main', '==', 'm.01jx92', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 18
            Final Answer: {'Virgil Moss', 'Hap Johnson', 'Johnny Blake', 'Bobby Madero', 'Pete Cloud', 'Rick Carter', 'Alfredo', 'Knox Maquon', 'Chu Chu', 'Billy the Kid', 'Paul', 'Davy', 'Billy MacWilliams', 'Jesse Verdugo', 'Rain Cloud', 'Tom', 'Junior', 'Max Gufler'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 106 / 223: {
          [('Main', '==', 'm.01jx92', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 42
            Final Answer: {'Bubbling Troubles', 'Electra Glide in Blue', 'Apache War Smoke', 'Three Violent People', 'Money Train', 'This Property Is Condemned', 'Trouble on the Trail', 'Dancing Romeo', 'Dad for a Day', 'Bridal Suite', 'The Big Premiere', 'Mokey', 'Radio Bugs', 'Calling All Kids', 'Ripped Off', 'The Purple Gang', "Captain Spanky's Show Boat", 'The Return of Rin Tin Tin', 'Auto Antics', 'Homesteaders of Paradise Valley', "Doin' Their Bit", 'Great Stagecoach Robbery', "Alfalfa's Double", 'In Cold Blood', 'Joy Scouts', 'Time Out for Lessons', 'All About Hash', 'Tell Them Willie Boy Is Here', 'Busting', 'The Greatest Story Ever Told', 'Family Troubles', 'Tale of a Dog', 'Lost Highway', 'Judgment Day: The John List Story', 'Heart of a Champion: The Ray Mancini Story', "Andy Hardy's Double Life", 'Unexpected Riches', 'The Big Noise', 'The New Pupil', 'Marshal of Laredo', 'Coast to Coast', 'PT 109'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 107 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 2
            Final Answer: {'Nutley', 'Los Angeles'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.038s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.038s]
        Checking schema 108 / 223: {
          [('Main', '==', 'm.01jx92', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 5
            Final Answer: {'Judgment Day: The John List Story', 'Blood Feud', 'Electra Glide in Blue', 'Baretta', 'Coast to Coast'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 109 / 223: {
          [('Main', '==', 'm.01jx92', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01jx92 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.01jx92 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 8
            Final Answer: {'1975', '1980', '1983', '1993', '1977', '1974', '1984', '1976'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 110 / 223: {
          [('Main', '==', 'm.01jx92', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Robert Blake'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 111 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01jx92 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.01jx92 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 2
            Final Answer: {'1961', '2000'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 112 / 223: {
          [('Main', '==', 'm.01jx92', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Paul Williams Still Alive'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 113 / 223: {
          [('Main', '==', 'm.01jx92', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Robert Blake'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 114 / 223: {
          [('Main', '==', 'm.01jx92', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 2
            Final Answer: {"2nd People's Choice Awards", '27th Primetime Emmy Awards'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 115 / 223: {
          [('Main', '==', 'm.01jx92', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Robert Blake'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 116 / 223: {
          [('Main', '==', 'm.01jx92', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 117 / 223: {
          [('Main', '==', 'm.01jx92', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Robert Blake'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 118 / 223: {
          [('Main', '==', 'm.01jx92', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 24
            Final Answer: {'Willie Boy', 'Toto', "Daniel 'Mokey' Delano", 'Lenny Mancini', 'Sidney', 'Donald Patterson', 'Charles Callahan', 'Paul the Refugee Lad', 'Mickey', 'Simon the Zealot', "William Joseph 'Honeyboy' Willard", 'Vice Detective Patrick Farrel', 'Teddy ""Cherokee"" Wilcox', "'Tooky' Stedman", 'Mystery Man', 'Luis Herrera', 'Egbert Hartley', "Charles 'Bucky' Harris", 'Perry Smith', 'John Wintergreen', 'Little Beaver', 'Rafael Ortega'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 119 / 223: {
          [('Main', '==', 'm.01jx92', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Robert Blake'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 120 / 223: {
          [('Main', '==', 'm.01jx92', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 2
            Final Answer: {'Archive Footage', 'Uncredited'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 121 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.places_lived', 'people.place_lived.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01jx92 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.start_date ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.01jx92 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'1938'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 122 / 223: {
          [('Main', '==', 'm.01jx92', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Robert Blake'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 123 / 223: {
          [('Main', '==', 'm.01jx92', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Det. Tony Baretta'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 124 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01jx92 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.01jx92 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 2
            Final Answer: {'2001', '1983'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 125 / 223: {
          [('Main', '==', 'm.01jx92', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 126 / 223: {
          [('Main', '==', 'm.01jx92', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 1
            Final Answer: {'Robert Blake'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 127 / 223: {
          [('Main', '==', 'm.01jx92', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 3
            Final Answer: {'Primetime Emmy Award for Outstanding Lead Actor - Drama Series', 'Golden Globe Award for Best Performance by an Actor in a Television Series – Drama', "People's Choice Award for Favorite Performer in a New TV Program"}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 128 / 223: {
          [('Main', '==', 'm.01jx92', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01jx92 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01jx92'}
            Query return lines = 28
            Final Answer: {'Gypsy', 'Robert Blake/Kenny Loggins', "The Professor's Daughter", "The Kid from Hell's Kitchen", 'Smuggled Silver', 'Heritage', 'A Place For Abel Hix', 'Trade Me Deadly', 'Robert Blake', "My Brother's Keeper", 'The Fatalist', 'Natalie Wood', 'The Joe Muharich Story', 'A Mouthful of Dust', 'New York to L.A.', 'Hostage for Hanging', 'No Amnesty for Death', 'Bullets and the Booby Trap', 'Winter Soldier', 'The Price of Death', "He's Only a Boy", 'A Creature Lurks in Ambush', 'The Shooting of Jesse May', 'A Moment in the Sun', 'The 29th Annual Emmy Awards', 'Imagine a Long, Bright Corridor', 'The Leather Dollar', '750919'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 129 / 223: {
          [('Main', '==', 'm.025s7bn', ['award.award_nominated_work.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 4
            Final Answer: {'Daytime Emmy Award for Outstanding Directing in an Animated Program', 'Daytime Emmy Award for Outstanding Achievement In Music Direction And Composition', 'Daytime Emmy Award for Outstanding Performer in an Animated Program', "Daytime Emmy Award for Outstanding Pre-School Children's Series"}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 130 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 1
            Final Answer: {'Mickey Mouse Clubhouse'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 131 / 223: {
          [('Main', '==', 'm.025s7bn', ['award.award_nominated_work.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 1
            Final Answer: {'Mickey Mouse Clubhouse'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 132 / 223: {
          [('Main', '==', 'm.025s7bn', ['award.award_nominated_work.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.025s7bn fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.025s7bn fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 2
            Final Answer: {'2011', '2008'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 133 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 11
            Final Answer: {'Corey Burton', 'Russi Taylor', 'Billy West', 'Maurice LaMarche', 'Tony Anselmo', 'Bill Farmer', 'Tress MacNeille', 'Frank Welker', 'Wayne Allwine', 'Will Ryan', 'April Winchell'}
            Answers = 11, P = 0.090909, R = 1.000000, F1 = 0.166667
          } [0.024s]
          Answers = 11, P = 0.090909, R = 1.000000, F1 = 0.166667
        } [0.024s]
        Checking schema 134 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.original_network', 'tv.tv_network_duration.network'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 1
            Final Answer: {'Disney Channel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 135 / 223: {
          [('Main', '==', 'm.025s7bn', ['award.award_nominated_work.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 5
            Final Answer: {'Rob LaDuca', 'Mike Himelstein', 'Michael Turner', 'Bill Farmer', 'Bradley Bowlen'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 136 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 5
            Final Answer: {'Minnie Mouse', 'Donald Duck', 'Mickey Mouse', 'Goofy', 'Daisy Duck'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 137 / 223: {
          [('Main', '==', 'm.025s7bn', ['tv.tv_program.original_network', 'tv.tv_network_duration.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025s7bn fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025s7bn'}
            Query return lines = 1
            Final Answer: {'Mickey Mouse Clubhouse'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 138 / 223: {
          [('Main', '==', 'm.02vxn', ['education.field_of_study.students_majoring', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 6
            Final Answer: {'MFA', 'Bachelor of Arts', 'Bachelor of Fine Arts', 'M.A.', 'High School Diploma', "Bachelor's degree"}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 139 / 223: {
          [('Main', '==', 'm.02vxn', ['education.field_of_study.students_majoring', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 13
            Final Answer: {'1992', '1966', '1979', '1991', '1996', '1995', '1989', '2006', '2003', '2008', '1986'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 140 / 223: {
          [('Main', '==', 'm.02vxn', ['education.field_of_study.students_majoring', 'education.education.specialization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 2
            Final Answer: {'Acting', 'Salutatorian'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 141 / 223: {
          [('Main', '==', 'm.02vxn', ['base.ontologies.ontology_class.equivalent_classes', 'base.ontologies.ontology_class_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.ontologies.ontology_class.equivalent_classes ?o1 . ?o1 fb:base.ontologies.ontology_class_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.ontologies.ontology_class.equivalent_classes ?o1 . ?o1 fb:base.ontologies.ontology_class_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 2
            Final Answer: {'Bibliographic Ontology', 'COSMO'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 142 / 223: {
          [('Main', '==', 'm.02vxn', ['base.firsts.first_achievement_category.firsts', 'base.firsts.first_achievement.achievement'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.firsts.first_achievement_category.firsts ?o1 . ?o1 fb:base.firsts.first_achievement.achievement ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.firsts.first_achievement_category.firsts ?o1 . ?o1 fb:base.firsts.first_achievement.achievement ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 2
            Final Answer: {'First major African-American feature filmmaker', 'Feature length'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 143 / 223: {
          [('Main', '==', 'm.02vxn', ['interests.collection_category.collectors', 'interests.collection.collector'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:interests.collection_category.collectors ?o1 . ?o1 fb:interests.collection.collector ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:interests.collection_category.collectors ?o1 . ?o1 fb:interests.collection.collector ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Alfredo Li Gotti'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 144 / 223: {
          [('Main', '==', 'm.02vxn', ['education.field_of_study.students_majoring', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 13
            Final Answer: {'Drawing', 'Radio', 'Theatre', 'Drama', 'Sociology', 'Photography', 'Painting', 'English', 'Television', 'Political Science', 'Media Arts', 'African American studies'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 145 / 223: {
          [('Main', '==', 'm.02vxn', ['base.ontologies.ontology_class.equivalent_classes', 'base.ontologies.ontology_class_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.ontologies.ontology_class.equivalent_classes ?o1 . ?o1 fb:base.ontologies.ontology_class_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.ontologies.ontology_class.equivalent_classes ?o1 . ?o1 fb:base.ontologies.ontology_class_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Film'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 146 / 223: {
          [('Main', '==', 'm.02vxn', ['base.firsts.first_achievement_category.firsts', 'base.firsts.first_achievement.category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.firsts.first_achievement_category.firsts ?o1 . ?o1 fb:base.firsts.first_achievement.category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.firsts.first_achievement_category.firsts ?o1 . ?o1 fb:base.firsts.first_achievement.category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Film'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 147 / 223: {
          [('Main', '==', 'm.02vxn', ['base.firsts.first_achievement_category.firsts', 'base.firsts.first_achievement.first'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.firsts.first_achievement_category.firsts ?o1 . ?o1 fb:base.firsts.first_achievement.first ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.firsts.first_achievement_category.firsts ?o1 . ?o1 fb:base.firsts.first_achievement.first ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 2
            Final Answer: {'Oscar Micheaux', 'The Story of the Kelly Gang'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 148 / 223: {
          [('Main', '==', 'm.02vxn', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 149 / 223: {
          [('Main', '==', 'm.02vxn', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Film'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 150 / 223: {
          [('Main', '==', 'm.02vxn', ['education.field_of_study.students_majoring', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 40
            Final Answer: {'National Film School of Denmark', 'Columbia University', 'Wesleyan University', 'University of California, Los Angeles', 'Harvard University', 'Ealing, Hammersmith and West London College', 'Eleanor Gerson School', 'University of Cape Town', 'Emerson College', 'University of Bristol', 'Victoria University of Wellington', 'South Seas Film and Television School', 'University of British Columbia', 'Loyola Marymount University', 'Universidad del Cine', "Pasadena's Art Center College of Design", 'USC School of Cinematic Arts', 'San Diego State University', 'Ryerson University', 'University of Wisconsin-Madison', 'Academy of Performing Arts in Prague', 'UCLA School of Theater, Film and Television', 'Columbia University School of the Arts', 'S. I. Newhouse School of Public Communications', 'Tisch School of the Arts', 'New York University', 'University of Southern California', 'Royal College of Art', 'Glasgow School of Art', 'University of Colorado at Boulder', 'London Film School', 'Hunter College', 'Temple University', 'Gerasimov Institute of Cinematography', 'California College of the Arts', 'Seoul Institute of the Arts', 'Rusden College', 'University of Winnepeg', 'University of California, Santa Barbara', 'Iranian Broadcasting College'}
            Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 151 / 223: {
          [('Main', '==', 'm.02vxn', ['education.field_of_study.students_majoring', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 53
            Final Answer: {'Wolfgang Held', 'Alex Gilbert', 'Andrea Jackson', 'La Monte Edwards', 'Siddiq Barmak', 'George Kapiniaris', 'Matthew Hannam', 'Robbie Coltrane', 'Pepper McGowan', 'Denis Sanders', 'Andrew Bujalski', 'Gustavo Ferrada', 'David Bezmozgis', 'Iliza Shlesinger', 'Angelina Jolie', 'John Harrison', 'Trent Olsen', 'Jan Krawitz', 'Jemaine Clement', 'Luke Matheny', 'Spike Lee', 'Dona Noga', 'Hong Sang-soo', 'Martín Rejtman', 'Vladimir Durán', 'Ming Kai Leung', 'Nick Carpenter', 'Jamal Edwards', 'Isaac Adamson', 'Joshua Marston', 'Kim Ha Neul', 'Jamie Travis', 'Robert Yeoman', 'Darius Khondji', 'Bahman Ghobadi', 'Robert Hewitt Wolfe', 'Doug Roland', 'Simon Pegg', 'Jesse Williams', 'Henrik Ruben Genz', 'Marley Shelton', 'Bradley Kaye', 'Jan Němec', 'Tom DiCillo', 'Marc Webb', 'Jack Jason', 'Martin Scorsese', 'Qualid Ladraa', 'Mark Sawers', 'Oliver Hermanus', 'Kal Penn', 'James Welland', 'Michael Bay'}
            Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 152 / 223: {
          [('Main', '==', 'm.02vxn', ['education.field_of_study.students_majoring', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.02vxn fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 6
            Final Answer: {'2005', '2002', '2011', '1995', '1988'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 153 / 223: {
          [('Main', '==', 'm.02vxn', ['interests.collection_category.collectors', 'interests.collection.category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:interests.collection_category.collectors ?o1 . ?o1 fb:interests.collection.category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:25] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02vxn fb:interests.collection_category.collectors ?o1 . ?o1 fb:interests.collection.category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 1
            Final Answer: {'Film'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 154 / 223: {
          [('Main', '==', 'm.057ph', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 2
            Final Answer: {"Disney's House of Mouse", 'Mickey Mouse Clubhouse'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 155 / 223: {
          [('Main', '==', 'm.057ph', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'2001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 156 / 223: {
          [('Main', '==', 'm.057ph', ['cvg.game_character.games', 'cvg.game_performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Mickey Mouse'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 157 / 223: {
          [('Main', '==', 'm.057ph', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.057ph fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.057ph fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'1979'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 158 / 223: {
          [('Main', '==', 'm.057ph', ['tv.tv_character.appeared_in_tv_episodes', 'tv.tv_guest_role.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_episodes ?o1 . ?o1 fb:tv.tv_guest_role.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_episodes ?o1 . ?o1 fb:tv.tv_guest_role.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Mickey Mouse'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 159 / 223: {
          [('Main', '==', 'm.057ph', ['tv.tv_character.appeared_in_tv_episodes', 'tv.tv_guest_role.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_episodes ?o1 . ?o1 fb:tv.tv_guest_role.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_episodes ?o1 . ?o1 fb:tv.tv_guest_role.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Voice'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 160 / 223: {
          [('Main', '==', 'm.057ph', ['film.film_character.portrayed_in_films', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 57
            Final Answer: {'The Little Whirlwind', 'Playful Pluto', 'The Nifty Nineties', "Squatter's Rights", 'Hollywood Party', "Mickey's Circus", "Orphan's Benefit", "Mickey's Delayed Date", 'Society Dog Show', 'A Disney Christmas Gift', 'The Barn Dance', 'A Goofy Movie', 'Mr. Mouse Takes a Trip', 'The Chain Gang', 'Mickey in Arabia', 'The Muppets at Walt Disney World', "Mickey's Revue", "Mickey's Polo Team", "Mickey's 60th Birthday", 'Parade of the Award Nominees', 'Magician Mickey', 'Mickey Mouse In Runaway Brain', 'Symphony Hour', 'Giantland', 'Lend a Paw', "Mickey's Surprise Party", 'The Simple Things', "Mickey's Birthday Party", 'Building a Building', 'Fantasia', 'The Whalers', 'Gulliver Mickey', "Mickey's Amateurs", 'Lonesome Ghosts', 'Fun and Fancy Free', 'Plane Crazy', 'The Band Concert', "Mickey's Trailer", "The Gallopin' Gaucho", 'Mickey and the Seal', 'The Karnival Kid', 'Clock Cleaners', 'Thru the Mirror', 'Who Framed Roger Rabbit', 'Brave Little Tailor', "Mickey's Magical Christmas: Snowed in at the House of Mouse", 'Steamboat Willie', 'On Ice', 'Runaway Brain', 'The Mad Doctor', 'Disney Learning Adventures: Mickey and the Beanstalk', 'The Whoopee Party', "Mickey's Mechanical Man", "Mickey's Mellerdrammer", 'Moose Hunters', "Mickey's Gala Premier", 'Fiddling Around'}
            Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 161 / 223: {
          [('Main', '==', 'm.057ph', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Wayne Allwine'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.011s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.011s]
        Checking schema 162 / 223: {
          [('Main', '==', 'm.057ph', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.to ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'2003'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 163 / 223: {
          [('Main', '==', 'm.057ph', ['cvg.game_character.games', 'cvg.game_performance.game'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.game ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.game ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 2
            Final Answer: {'Kingdom Hearts', 'Epic Mickey'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 164 / 223: {
          [('Main', '==', 'm.057ph', ['cvg.game_character.games', 'cvg.game_performance.playable'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.playable ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.playable ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 165 / 223: {
          [('Main', '==', 'm.057ph', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 3
            Final Answer: {'Marcel Carné', 'Charles Vanel'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 166 / 223: {
          [('Main', '==', 'm.057ph', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'4th César Awards'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 167 / 223: {
          [('Main', '==', 'm.057ph', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Mickey Mouse'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 168 / 223: {
          [('Main', '==', 'm.057ph', ['tv.tv_character.appeared_in_tv_episodes', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_episodes ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_episodes ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Wayne Allwine'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.011s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.011s]
        Checking schema 169 / 223: {
          [('Main', '==', 'm.057ph', ['film.film_character.portrayed_in_films', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Mickey Mouse'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 170 / 223: {
          [('Main', '==', 'm.057ph', ['film.film_character.portrayed_in_films', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 3
            Final Answer: {'Walt Disney', 'Jimmy MacDonald', 'Wayne Allwine'}
            Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
          } [0.013s]
          Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
        } [0.013s]
        Checking schema 171 / 223: {
          [('Main', '==', 'm.057ph', ['film.film_character.portrayed_in_films', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 3
            Final Answer: {'Archive Footage', 'Voice', 'Uncredited'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 172 / 223: {
          [('Main', '==', 'm.057ph', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Mickey Mouse'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 173 / 223: {
          [('Main', '==', 'm.057ph', ['tv.tv_character.appeared_in_tv_program', 'tv.regular_tv_appearance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_program ?o1 . ?o1 fb:tv.regular_tv_appearance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Voice'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 174 / 223: {
          [('Main', '==', 'm.057ph', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'Honorary César'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 175 / 223: {
          [('Main', '==', 'm.057ph', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 1
            Final Answer: {'All-TIME 100 Greatest Toys'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 176 / 223: {
          [('Main', '==', 'm.057ph', ['tv.tv_character.appeared_in_tv_episodes', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_episodes ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:tv.tv_character.appeared_in_tv_episodes ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 29
            Final Answer: {'Goofy for a Day', "Pete's House of Villains", 'The Stolen Cartoons', "Daisy's Debut", 'King Larry Swings In', 'Unplugged Club', 'Big Bad Wolf Daddy', 'Timon & Pumbaa', "Pete's Christmas Caper", "Clarabelle's Big Secret", "Ladies' Night", 'Rent Day', 'Jiminy Cricket', 'The Three Caballeros', 'Suddenly Hades', "Donald's Lamp Trade", 'Thanks to Minnie', 'Salute To Sports', 'House of Genius', "Max's New Car", 'House Of Magic', 'Dennis The Duck', 'House of Crime', 'Super Goof', 'Pluto Saves the Day', "Donald's Pumbaa Prank", 'Mickey and the Culture Clash', 'Gone Goofy', "Goofy's Valentine Date"}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 177 / 223: {
          [('Main', '==', 'm.057ph', ['fictional_universe.fictional_character.romantically_involved_with', 'fictional_universe.romantic_involvement.partner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.057ph fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.057ph'}
            Query return lines = 2
            Final Answer: {'Minnie Mouse'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 178 / 223: {
          [('Main', '==', 'm.06c6l', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c6l fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c6l fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 179 / 223: {
          [('Main', '==', 'm.06c6l', ['location.location.geolocation', 'location.geocode.elevation'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c6l fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.elevation ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.06c6l fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.elevation ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'4401'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 180 / 223: {
          [('Main', '==', 'm.06c6l', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c6l fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.06c6l fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'722'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 181 / 223: {
          [('Main', '==', 'm.06c6l', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c6l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c6l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 182 / 223: {
          [('Main', '==', 'm.06c6l', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c6l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c6l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'Rocky Mountains'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 183 / 223: {
          [('Main', '==', 'm.06c6l', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c6l fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.06c6l fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'39.1178'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 184 / 223: {
          [('Main', '==', 'm.06c6l', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c6l fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.06c6l fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'-106.445'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 185 / 223: {
          [('Main', '==', 'm.06c6l', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c6l fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c6l fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'Rocky Mountains'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 186 / 223: {
          [('Main', '==', 'm.06c6l', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c6l fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.06c6l fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 1
            Final Answer: {'721'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 187 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.estimated_budget', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'1100'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 188 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.starring', 'film.performance.character_note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.starring ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.starring ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 189 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_nominated_work.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 22
            Final Answer: {'BAFTA Award for Best Screenplay', 'Academy Award for Best Director', 'Academy Award for Best Picture', 'Academy Award for Actor in a Leading Role', 'Golden Globe Award for Best Original Score', 'Academy Award for Actress in a Leading Role', 'Golden Globe Award for Best Screenplay - Motion Picture', 'BAFTA Award for Best Actor in a Leading Role', 'Academy Award for Sound Mixing', 'DGA Award for Outstanding Directorial Achievement in Feature Film', 'Satellite Award for Best Overall Blu-Ray Disc', 'BAFTA Award for Best Direction', 'BAFTA Award for Best Editing', 'Academy Award for  Actor in a Supporting Role', 'Academy Award for Film Editing', 'BAFTA Award for Best Film', 'Golden Globe Award for Best Actress - Drama Film', 'Academy Award for Best Original Screenplay', 'Golden Globe Award for Best Director - Film', 'Golden Globe Award for Best Drama Film', 'Golden Globe Award for Best Actor - Drama Film', 'National Society of Film Critics Award for Best Supporting Actress'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 190 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_winning_work.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 3
            Final Answer: {'1977', '1976', '1978'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.041s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.041s]
        Checking schema 191 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_winning_work.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 192 / 223: {
          [('Main', '==', 'm.0cf08', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 6
            Final Answer: {'52', '78', '4', '2', '96', '57'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 193 / 223: {
          [('Main', '==', 'm.0cf08', ['base.greatfilms.ranked_item.appears_in_ranked_lists', 'base.greatfilms.ranking.ranking'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:base.greatfilms.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:base.greatfilms.ranking.ranking ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:base.greatfilms.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:base.greatfilms.ranking.ranking ?o2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'78'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 194 / 223: {
          [('Main', '==', 'm.0cf08', ['base.greatfilms.ranked_item.appears_in_ranked_lists', 'base.greatfilms.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:base.greatfilms.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:base.greatfilms.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:base.greatfilms.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:base.greatfilms.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 195 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.release_date_s', 'film.film_regional_release_date.release_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.release_date ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.release_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 5
            Final Answer: {'2005', '2006', '1976'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 196 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.estimated_budget', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 197 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.starring', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.starring ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.starring ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 198 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_nominated_work.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 6
            Final Answer: {'Rocky III', 'Rocky V', 'Rocky IV', 'Rocky II', 'Rocky Balboa'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 199 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_nominated_work.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 3
            Final Answer: {'1977', '1976', '2009'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Current: 200 / 223
        Checking schema 200 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.runtime', 'film.film_cut.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 201 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_winning_work.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 6
            Final Answer: {'Irwin Winkler', 'Robert Chartoff', 'Scott Conrad', 'Sylvester Stallone', 'Richard Halsey', 'John G. Avildsen'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 202 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_winning_work.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 5
            Final Answer: {'1977 David di Donatello Awards', '34th Golden Globe Awards', 'Directors Guild of America Awards 1976', '49th Academy Awards', '1st Japan Academy Prize'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 203 / 223: {
          [('Main', '==', 'm.0cf08', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 204 / 223: {
          [('Main', '==', 'm.0cf08', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 205 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.distributors', 'film.film_film_distributor_relationship.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 206 / 223: {
          [('Main', '==', 'm.0cf08', ['base.greatfilms.ranked_item.appears_in_ranked_lists', 'base.greatfilms.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:base.greatfilms.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:base.greatfilms.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:base.greatfilms.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:base.greatfilms.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {"AFI's 100 Years...100 Movies"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 207 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.release_date_s', 'film.film_regional_release_date.film_release_distribution_medium'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_distribution_medium ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_distribution_medium ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 2
            Final Answer: {'Theatrical', 'DVD'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 208 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.release_date_s', 'film.film_regional_release_date.film_release_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 209 / 223: {
          [('Main', '==', 'm.0cf08', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 210 / 223: {
          [('Main', '==', 'm.0cf08', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 211 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.starring', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.starring ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.starring ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 50
            Final Answer: {'George Jergens', 'Ringside Police Officer', "Apollo Creed's Bodyguard", 'Adrian Pennino', "Buddy, Gazzo's Bodyguard", 'Club Corner Man', 'Streetcorner Singer #3', 'Reporter #1', 'Bartender', 'TV Interviewer', 'Aftershave Commercial Director', "Rocky's Dog", 'Drunk', "Tony Gazzo's Girlfriend", 'Apollo Creed', 'Spider Rico', 'Streetcorner Singer #2', 'Tony Gazzo', 'Fight Announcer', 'Spectator #2', 'TV Commentator #1', "Apollo's Corner", 'Club Fight Referee', 'Mary Anne Creed', 'Streetcorner Singer #1', 'Championship Fight Announcer', 'TV Commentator #2', 'Reporter #2', 'Rocky Balboa', 'Marie', "Jergens' Secretary", 'Fats', 'Ice Rink Attendant', "Paulie's Date", 'Timekeeper', 'Cut Man', 'Owner of Pet Shop', 'Mike', 'Paulie Pennino', 'Spectator #1', 'Streetcorner Singer #4', 'Apollo Corner Man', 'Club Fight Announcer', 'Tony ""Duke"" Evers', 'Fight Commentator', 'Mickey Goldmill', 'Streetcorner Singer #5', 'Dipper', 'Chiptooth', 'Fighter'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 212 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.starring', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.starring ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.starring ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 51
            Final Answer: {'Lavelle Roby', 'Bill Baldwin', 'Burt Young', 'Michael Dorn', 'Lou Filippo', 'William E. Ring', 'Jack Hollander', 'Bobby Cassidy', 'DeForest Covan', 'Arnold Johnson', 'Talia Shire', 'Al Silvani', 'Stan Shaw', 'Joe Sorbello', 'Frankie Van', 'Paris Eagle', 'Joseph C. Giambelluc', 'Thayer David', 'Joe Frazier', 'Frank Stallone', 'George Memmoli', 'Diana Lewis', "George O'Hanlon", 'Peter Glassberg', 'Hank Rolike', 'John Pleshette', 'Frank Stallone  Sr.', 'Jane Marla Robbins', 'Frank Pesce', 'Jodi Letizia', 'Simmy Bow', 'Butkus Stallone', 'Burgess Meredith', 'Billy Sands', 'Robert Leh', 'Christopher Avildsen', 'Arthur Tovey', 'Larry Carroll', 'Jeri McBride', 'Don Sherman', 'Robert L. Tangrea', 'Stu Nahan', 'Kathleen Parker', 'Sylvester Stallone', 'Tony Burton', 'Lloyd Kaufman', 'Joe Spinell', 'Jimmy Gambina', 'Pedro Lovell', "Shirley O'Hara", 'Carl Weathers'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 213 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.starring', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.starring ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.starring ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 2
            Final Answer: {'Uncredited', 'Him/Herself'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 214 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_nominated_work.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 14
            Final Answer: {'Robert Chartoff', 'Irwin Winkler', 'Burt Young', 'Bud Alper', 'Scott Conrad', 'Sylvester Stallone', 'Richard Halsey', 'John G. Avildsen', 'Burgess Meredith', 'Talia Shire', 'Bill Conti', 'Lyle J. Burbridge', 'Harry W. Tetrick', 'William McCaughey'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 215 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_nominated_work.award_nominations', 'award.award_nomination.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 216 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.runtime', 'film.film_cut.runtime'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.runtime ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.runtime ?o2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 2
            Final Answer: {'120', '119'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 217 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_winning_work.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 7
            Final Answer: {'David di Donatello for Best Foreign Actor', 'Academy Award for Film Editing', 'Academy Award for Best Director', 'Golden Globe Award for Best Drama Film', 'Japan Academy Prize for Outstanding Foreign Language Film', 'DGA Award for Outstanding Directorial Achievement in Feature Film', 'Academy Award for Best Picture'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 218 / 223: {
          [('Main', '==', 'm.0cf08', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 7
            Final Answer: {"AFI's 100 Years...100 Movies", "AFI's 100 Years...100 Thrills", 'National Film Registry', "AFI's 100 Years…100 Movies – 10th Anniversary Edition", "AFI's 100 Years...100 Cheers", "AFI's 10 Top 10 Sports Films", 'The Movie List: the first 9200'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 219 / 223: {
          [('Main', '==', 'm.0cf08', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 WHERE { fb:m.0cf08 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 3
            Final Answer: {'2001', '2006', '2007'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 220 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.distributors', 'film.film_film_distributor_relationship.distributor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.distributor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.distributor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'United Artists'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 221 / 223: {
          [('Main', '==', 'm.0cf08', ['film.film.release_date_s', 'film.film_regional_release_date.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08'}
            Query return lines = 1
            Final Answer: {'Rocky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 222 / 223: {
          [('Main', '==', 'm.0cf08', ['award.award_nominated_work.award_nominations', 'award.award_nomination.award']), ('Entity', '==', 'm.02vxn', ['award.award_category.disciplines_or_subjects'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:award.award_category.disciplines_or_subjects fb:m.02vxn . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cf08 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:award.award_category.disciplines_or_subjects fb:m.02vxn . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cf08', 'm.02vxn'}
            Query return lines = 4
            Final Answer: {'Golden Globe Award for Best Actress - Drama Film', 'DGA Award for Outstanding Directorial Achievement in Feature Film', 'Golden Globe Award for Best Screenplay - Motion Picture', 'Golden Globe Award for Best Drama Film'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        215 / 223 coarse schemas kept with ans_size > 0.
      } [3.094s]
      Coarse level ended, resulting in 215 schemas.
    } [42.931s]
    Type level searching (total types = 10): {
      Current: 0 / 215
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'type.float'}]
[{'people.person'}]
[{'base.saturdaynightlive.snl_episode'}]
[{'people.profession'}]
[{'people.gender'}]
[{'language.human_language'}]
[{'location.location'}]
[{'location.country'}]
[{'location.country'}]
[{'type.datetime'}]
[{'tv.tv_series_season'}]
[{'tv.tv_genre'}]
[{'type.int'}]
[{'tv.tv_series_episode'}]
[{'type.int'}]
[{'type.int'}]
[{'language.human_language'}]
[{'location.country'}]
[{'law.inventor'}]
[{'media_common.quotation'}]
[{'book.periodical'}]
[{'book.magazine'}]
[{'interests.collection_category'}]
[{'film.film'}]
[{'people.person'}]
[{'organization.organization'}]
[{'business.business_operation'}]
[{'business.industry'}]
[{'business.industry'}]
[{'award.award_category'}]
[{'exhibitions.exhibition'}]
[{'base.database.database'}]
[{'book.written_work'}]
[{'visual_art.artwork'}]
[{'book.journal'}]
[{'internet.website'}]
[{'broadcast.content'}]
[{'amusement_parks.ride'}]
[{'base.events.type_of_festival'}]
[{'film.film_festival'}]
[{'fictional_universe.fictional_universe'}]
[{'fictional_universe.character_occupation'}]
[{'fictional_universe.character_species'}]
[{'fictional_universe.character_gender'}]
[{'fictional_universe.fictional_character_creator'}]
[{'base.parody.parody'}]
[{'base.americancomedy.celebrity_impressionist'}]
[{'base.familyguy.family_guy_episode'}]
[{'base.disneyana.disney_product'}]
[{'travel.tourist_attraction'}]
[{'geography.mountain'}]
[{'location.location'}]
[{'location.location'}]
[{'geography.mountain_pass'}]
[{'film.film'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'fictional_universe.work_of_fiction'}]
[{'visual_art.artwork'}]
[{'language.human_language'}]
[{'film.music_contributor'}]
[{'film.production_company'}]
[{'film.film_location'}]
[{'film.film_set_designer'}]
[{'film.film_production_designer'}]
[{'film.film_casting_director'}]
[{'film.film_series'}]
[{'film.film_featured_song'}]
[{'media_common.quotation'}]
[{'education.educational_institution'}]
[{'film.film_genre'}]
[{'location.country'}]
[{'film.film_art_director'}]
[{'film.director'}]
[{'type.datetime'}]
[{'film.writer'}]
[{'film.producer'}]
[{'film.film_collection'}]
[{'media_common.netflix_genre'}]
[{'film.producer'}]
[{'film.cinematographer'}]
[{'film.editor'}]
[{'film.content_rating'}]
[{'music.soundtrack'}]
[{'film.film_subject'}]
[{'film.film'}]
[{'type.object'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'people.marriage'}, {'people.person'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
      Current: 100 / 215
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'tv.tv_guest_role'}, {'tv.tv_character'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'people.place_lived'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.tv_network_duration'}, {'tv.tv_network'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
[{'tv.tv_network_duration'}, {'tv.tv_program'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'base.ontologies.ontology_class_mapping'}, {'base.ontologies.ontology'}]
[{'base.firsts.first_achievement'}, {'base.firsts.achievement'}]
[{'interests.collection'}, {'interests.collector'}]
[{'education.education'}, {'education.field_of_study'}]
[{'base.ontologies.ontology_class_mapping'}, {'base.ontologies.ontology_class'}]
[{'base.firsts.first_achievement'}, {'base.firsts.first_achievement_category'}]
[{'base.firsts.first_achievement'}, {'base.firsts.first'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'interests.collection'}, {'interests.collection_category'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'tv.regular_tv_appearance'}, {'type.datetime'}]
[{'cvg.game_performance'}, {'cvg.game_character'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'tv.tv_guest_role'}, {'tv.tv_character'}]
[{'tv.tv_guest_role'}, {'tv.special_tv_performance_type'}]
[{'film.performance'}, {'film.film'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.regular_tv_appearance'}, {'type.datetime'}]
[{'cvg.game_performance'}, {'cvg.computer_videogame'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
[{'tv.regular_tv_appearance'}, {'tv.special_tv_performance_type'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'fictional_universe.romantic_involvement'}, {'fictional_universe.fictional_character'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'location.geocode'}, {'type.float'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'award.ranking'}, {'type.int'}]
[{'base.greatfilms.ranking'}, {'type.int'}]
[{'base.greatfilms.ranking'}, {'base.greatfilms.ranked_item'}]
[{'film.film_regional_release_date'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'film.performance'}, {'film.film'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'film.film_cut'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'film.film_film_distributor_relationship'}, {'film.film'}]
[{'base.greatfilms.ranking'}, {'base.greatfilms.ranked_list'}]
      Current: 200 / 215
[{'film.film_regional_release_date'}, {'film.film_distribution_medium'}]
[{'film.film_regional_release_date'}, {'location.location'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'film.film_cut'}, {'type.float'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'film.film_film_distributor_relationship'}, {'film.film_distributor'}]
[{'film.film_regional_release_date'}, {'film.film'}]
[{'award.award_nomination'}, {'award.award_category'}]
      2 typed schemas retrieved from 215 coarse schemas.
      Calculating F1 for 2 typed schemas: {
        Current: 0 / 2
        Checking schema 0 / 2: {
          [('Main', '==', 'm.02vxn', ['book.book_subject.works']), ('Type', '==', 'theater.play', ['type.object.type'])]
          var_types: [{'theater.play', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02vxn fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02vxn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 1 / 2: {
          [('Main', '==', 'm.06c6l', ['book.book_subject.works']), ('Type', '==', 'theater.play', ['type.object.type'])]
          var_types: [{'theater.play', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:26] Q_Schema Request: {
            WebQ_5498|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c6l fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c6l'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        0 / 2 typed schemas kept with ans_size > 0.
      } [0.041s]
      Typed level ended, resulting in 215 schemas.
    } [0.050s]
    Time level searching (total times = 0): {
      Current: 0 / 215
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_series_season.to', 'tv.tv_series_season.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.database.database.launch_date'}]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.website.launched', 'internet.website.ended'}]
self.var_time_preds: [{'broadcast.content.production_end', 'broadcast.content.production_start'}]
self.var_time_preds: [{'amusement_parks.ride.opened', 'amusement_parks.ride.closed'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film_festival.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'geography.mountain.last_eruption', 'geography.mountain.date_of_first_ascent'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'type.object.timestamp'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
      Current: 100 / 215
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [set(), {'cvg.computer_videogame.release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'film.film_film_distributor_relationship.year'}, {'film.film.initial_release_date'}]
self.var_time_preds: [set(), set()]
      Current: 200 / 215
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, set()]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'film.film_film_distributor_relationship.year'}, set()]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
      0 timed schemas retrieved from 215 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 215 schemas.
    } [0.005s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 215
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'tv.tv_series_season.to', 'tv.tv_series_season.from'}]
[set()]
[set()]
[{'tv.tv_series_episode.air_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'media_common.quotation.date'}]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[{'people.person.date_of_birth'}]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[set()]
[{'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set()]
[{'base.database.database.launch_date'}]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[set()]
[{'internet.website.launched', 'internet.website.ended'}]
[{'broadcast.content.production_end', 'broadcast.content.production_start'}]
[{'amusement_parks.ride.opened', 'amusement_parks.ride.closed'}]
[set()]
[{'film.film_festival.date_founded'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'geography.mountain.last_eruption', 'geography.mountain.date_of_first_ascent'}]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[set()]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'media_common.quotation.date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[{'type.object.timestamp'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set(), {'people.person.date_of_birth'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'award.award_honor.year'}, set()]
      Current: 100 / 215
[{'award.award_honor.year'}, set()]
[set(), set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'people.place_lived.start_date', 'people.place_lived.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set(), {'tv.tv_series_episode.air_date'}]
[{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[set(), set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[set(), set()]
[set(), {'film.film.initial_release_date'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[set(), {'cvg.computer_videogame.release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[set(), set()]
[set(), set()]
[{'film.film_regional_release_date.release_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[{'film.film_film_distributor_relationship.year'}, {'film.film.initial_release_date'}]
[set(), set()]
      Current: 200 / 215
[{'film.film_regional_release_date.release_date'}, set()]
[{'film.film_regional_release_date.release_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'award.award_nomination.year'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'film.film_film_distributor_relationship.year'}, set()]
[{'film.film_regional_release_date.release_date'}, {'film.film.initial_release_date'}]
[{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
      0 ordinal schemas retrieved from 215 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 215 schemas.
    } [0.005s]
    [2020-12-03 14:18:26] buffer saved.
    215 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/5400-5499/5498_schema].
  } [1m40.662s]
  Entering Q 5499 / 5810 [b'what language does peru speak?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [3, 4) (peru) == m.016wzw (Peru) {'score': 30600.337917, 'source': 0.0}
      #01 Entity: [3, 4) (peru) == m.03rrdb (Peru_national_football_team) {'score': 2.750267, 'source': 0.0}
      #02 Type: [1, 2) (language) == language.language_dialect (language dialect) {'sim': 0.917232}
      #03 Type: [1, 2) (language) == computer.programming_language (programming language) {'sim': 0.872471}
      #04 Type: [1, 3) (language does) == language.language_writing_system (language writing system) {'sim': 0.845137}
      #05 Type: [0, 2) (what language) == language.language_writing_type (language writing type) {'sim': 0.84238}
      #06 Type: [1, 2) (language) == language.human_language (human language) {'sim': 0.830001}
      #07 Type: [1, 2) (language) == computer.programming_language_paradigm (programming language paradigm) {'sim': 0.812534}
      #08 Type: [1, 2) (language) == language.language_creator (language creator) {'sim': 0.804178}
      #09 Type: [1, 2) (language) == language.language_family (language family) {'sim': 0.802832}
      #10 Type: [0, 2) (what language) == fictional_universe.fictional_language (language in fiction) {'sim': 0.793377}
      #11 Type: [1, 2) (language) == computer.programming_language_developer (programming language developer) {'sim': 0.76792}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:19:24) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.016wzw ?p1 ?o1 . }
        [2020-12-03 14:19:24] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.016wzw ?p1 ?o1 . }
          Query return lines = 106
        } [0.011s]
        Filt_Query_Ret = 41 / 106 ( 0.011s)
      } [0.011s]
      [Len-1||F2/2] (2020-12-03 14:19:24) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03rrdb ?p1 ?o1 . }
        [2020-12-03 14:19:24] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03rrdb ?p1 ?o1 . }
          Query return lines = 17
        } [0.016s]
        Filt_Query_Ret = 5 / 17 ( 0.016s)
      } [0.016s]
      [Len-2||F1/2] (2020-12-03 14:19:24) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.016wzw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:24] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.016wzw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 1198
        } [0.265s]
        Filt_Query_Ret = 166 / 1198 ( 0.270s)
      } [0.272s]
      [Len-2||F2/2] (2020-12-03 14:19:24) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03rrdb ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:24] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03rrdb ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 250
        } [0.042s]
        Filt_Query_Ret = 17 / 250 ( 0.043s)
      } [0.043s]
      229 coarse schemas retrieved from scratch.
      Calculating F1 for 229 coarse schemas: {
        Current: 0 / 229
        Checking schema 0 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 4
            Final Answer: {'Unitary state', 'Presidential system', 'Constitutional republic', 'Republic'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Spanish Language'}
            Answers = 1, P = 1.000000, R = 0.166667, F1 = 0.285714
          } [0.023s]
          Answers = 1, P = 1.000000, R = 0.166667, F1 = 0.285714
        } [0.023s]
        Checking schema 2 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 25
            Final Answer: {'Puno Region', 'Huancavelica Region', 'Ica Region', 'Cusco Region', 'Cajamarca Region', 'Moquegua Region', 'Madre de Dios Region', 'Callao Region', 'Tacna Region', 'Huánuco Region', 'Ucayali Region', 'Lambayeque Region', 'Loreto Region', 'Lima Region', 'Tumbes Region', 'Amazonas Region', 'Ancash Region', 'La Libertad Region', 'Pasco Region', 'Apurímac Region', 'Junín Region', 'San Martín Region', 'Piura Region', 'Arequipa Region', 'Ayacucho Region'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 3 / 229: {
          [('Main', '==', 'm.016wzw', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 4 / 229: {
          [('Main', '==', 'm.016wzw', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Earth'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 5 / 229: {
          [('Main', '==', 'm.016wzw', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Sovereign state'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 6 / 229: {
          [('Main', '==', 'm.016wzw', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 7 / 229: {
          [('Main', '==', 'm.016wzw', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Congress of the Republic of Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 8 / 229: {
          [('Main', '==', 'm.016wzw', ['government.governmental_jurisdiction.agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 8
            Final Answer: {'Peruvian Ministry of Environment', 'Peruvian Ministry of Education', 'Peruvian Ministry of Agriculture', 'Peruvian Ministry of Economy and Finance', 'Peruvian Ministry of Defence', 'Instituto Nacional de Estadística e Informática', 'Peruvian Ministry of Foreign Commerce and Tourism', 'National Registry of Identification and Civil Status'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 9 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:24] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 178
            Final Answer: {'Marco Martos Carrera', 'Gianfranco Quattrini', 'José González Ganoza', 'Luis Carpio', 'Jorge Pardo', 'Enrique Guzmán y Valle', 'Anibal Quijano', 'Vivian Baella', 'Jorge Cori', 'Antonio Brack Egg', 'Javier Heraud', 'Jorge Piqueras', 'Celso Garrido Lecca', 'Julissa Miro', 'Marco Ruiz', 'Melitón Carvajal', 'Leonel Romero', 'José Olaya', 'Antonio Maquilón', 'Julio O. Ramos', 'Ángel Ojeda', 'Wenceslaus Sarmiento', 'Oscar Mollohuanca', 'Juan Jiménez Mayor', 'César Medina', 'Antenor Orrego', 'Aldo Olcese', 'Pedro Suárez Vértiz', 'John David Spence', 'Augusto B. Leguía', 'Diego Virrueta', 'Javier Chirinos', 'Rose Lowder', 'Modesto Montoya', 'Ignacio Álvarez Thomas', 'Victor Delfín', 'Jhony Obeso', 'Gloria Alexandra', 'Ana María Martínez', 'José Zamora Gonzales', 'Valeriano López', 'José del Castillo', 'Sergio Ubillús', 'Claudio Constantini', 'Mariano Ignacio Prado', 'Demetrio Neyra', 'Walter Alva', 'Ana Cecilia Carrillo', 'José Casanova', 'Julio Lores', 'Julio Quintana', 'Sandra Vergara', 'Jorge Bazán', 'Rafael Castillo', 'Mauro Mina', 'Juan Morales', 'Jaime Huerta', 'Juan Flores', 'Manuel de Mendiburu', 'Raúl Porras Barrenechea', 'Felipillo', 'Jesús Cisneros', 'Luis José de Orbegoso', 'Rafael Farfán', 'Leslie Shaw', 'José González', 'José Navarro', 'Alfredo Quesada', 'Jorge Benitez', 'Yonhy Lescano', 'Eladio Reyes', 'Tilsa Tsuchiya', 'Luis Antonio Escobar', 'Gladys Zender', 'José Gil de Castro', 'Domingo Elías', 'Jesus Goyzueta', 'Eloy Campos', 'Víctor Isla', 'Luis Mayme', 'José Granda', 'Paul Mejia', 'José Pardo y Barreda', 'Gustavo Vassallo', 'Felipe Pardo y Aliaga', 'Alfonso Barrantes Lingán', 'Roberto Carcelen', 'Jaime Delgado Aparicio', 'Ricardo Blume', 'Roberto Rojas', 'Juan Alfonso Valle', 'Juana Burga Cervera', 'Murder of Airi Kinoshita', 'Gabriella De Ferrari', 'Bernardo Fort-Brescia', 'Irene Wang', 'Sebastián Salazar Bondy', 'Rafael Roncagliolo', 'Fabiola Leon Velarde', 'Romero Frank', 'Miguel Trauco', 'Ignacio Merino', 'Daniel Hernández', 'Fredy Otárola', 'Marina Mora', 'Rubén Correa', 'Anthony Atala', 'Eldy Banda', 'Julio García', 'Santiago Fujimori', 'Jorge Olaechea', 'Francisco Antonio De Zela', 'Anita Fernandini de Naranjo', 'Jean Pierre Magnet', 'Carlos Enrique Polanco', 'Mercedes Cabanillas', 'Enio Novoa', 'Lizardo Rodríguez Nue', 'Carlos Flores Córdova', 'Raul Geller', 'Javier González', 'Francisco Boza', 'Luis Guadalupe', 'Claudia Hernández', 'Carlos Flores Ascencio', 'Orlando de la Torre', 'Pedro González', 'Alberto Tejada Noriega', 'Yancarlo Casas', 'Luis La Fuente', 'José Morales', 'Ángela Leyva', 'Lucho Barrios', 'Josimar Atoche', 'Oscar Arizaga', 'Manuel Quimper', 'Ramon Stagnaro', 'Óscar R. Benavides', 'Eduardo Tokeshi', 'Janio Posito', 'Cayetano Heredia', 'Débora Sulca', 'Iván Santillán', 'Melcochita', 'Allan Wagner Tizón', 'Daniel Reyes', 'Domingo García', 'Johan Vásquez', 'Susana Higuchi', 'Alberto Soria', 'Yordy Reyna', 'Félix Salinas', 'Cristina Gálvez', 'Tracy Freundt', 'Jorge Sarmiento', 'Juan Zevallos', 'Víctor Cedrón', 'Pablo Marcos', 'Pablo Pacheco', 'Brenda Uribe', 'Miguel Araujo', 'Percy Gibson', 'Blanca Varela', 'Luis Rubiños', 'José Fernández', 'Luis Reyna', 'Vanessa Palacios', 'Víctor Benítez', 'Hernán Hinostroza', 'Jenny Gago', 'Enrique Diaz', 'Javier Fuentes-Leon', 'Jaime Zevallos', 'Alberto Denegri', 'Juan Diego Gutiérrez', 'Juan Cáceres', 'Luis Cruzado', 'Wendy Sulca'}
            Answers = 178, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 178, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 10 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.partially_contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Andes', 'Amazon rainforest'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 11 / 229: {
          [('Main', '==', 'm.016wzw', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Paddington Bear'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 12 / 229: {
          [('Main', '==', 'm.016wzw', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 3
            Final Answer: {"Peru women's youth volleyball team", 'Peru national football team', "Peru women's national volleyball team"}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.041s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.041s]
        Checking schema 13 / 229: {
          [('Main', '==', 'm.016wzw', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Cervecera del Sur del Peru Cusquena', 'Compania del cervecera del Peru Peru Gold'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 14 / 229: {
          [('Main', '==', 'm.016wzw', ['biology.breed_origin.breeds_originating_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peruvian Hairless Dog'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 15 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peruvian nuevo sol'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 16 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 6
            Final Answer: {'Aymara language', 'Puquina Language', 'Quechua', 'Waorani Language', 'Spanish Language', 'Omagua Language'}
            Answers = 6, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.025s]
          Answers = 6, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.025s]
        Checking schema 17 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'pe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 18 / 229: {
          [('Main', '==', 'm.016wzw', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peruvian region'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 19 / 229: {
          [('Main', '==', 'm.016wzw', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Vice President of Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 20 / 229: {
          [('Main', '==', 'm.016wzw', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Government of Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 21 / 229: {
          [('Main', '==', 'm.016wzw', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.016wzw fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 WHERE { fb:m.016wzw fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'1821'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 22 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2276
            Final Answer: {'Luricocha District', 'Otuzco', 'San Cristóbal de Rajan District', 'Mollendo Airport', 'Pachaconas District', 'Micaela Bastidas District', 'Nuevo Imperial District', 'Pozuzo District', 'Chivay', 'Ramón Castilla District', 'Daniel Alcides Carrión National University', 'Huayna Picchu', 'Lake Lauricocha', 'Esperanza, Ucayali', 'Cahuac District', 'San Pablo District, Bellavista', 'Chambira River', 'San Pedro de Cajas District', 'San Pedro de Saño District', 'Choras District', 'Yanahuara District', 'Universidad San Luis Gonzaga', 'Universidad Nacional de Cajamarca, main campus', 'Quechualla District', 'Santa Teresa District', 'Saposoa District', 'Yuracmarca District', 'Catahuasi District', 'Hongos District', 'Masisea District', 'Aija District', 'Ollaraya District', 'Molino District', 'Picota', 'Challhuahuacho District', 'San Ramón', 'Juliaca District', 'Chachani', 'Santo Domingo de la Capilla District', 'Sumbilca District', 'Marcavelica District', 'Nuñoa District', 'Ayauca District', 'Guadalupito District', 'Tambo Colorado', 'Cachachi District', 'Santo Domingo District', 'Santa Rosa de Quives District', 'Camporredondo District', 'Pikchu Pikchu', 'Lámud District', 'Shunte District', 'Turpay District', 'New Iberia', 'Piura District', 'Trujillo District', 'Alis District', 'Huachos District', 'Chancaybaños District', 'Lambayeque District', 'Cotaparaco District', 'Tintay Puncu District', 'Písac', 'Pomalca District', 'Echarate District', 'Quebrada Magunchal River', 'Cochorco District', 'Chinchao District', 'Santo Domingo de los Olleros District', 'Ambo, Peru', 'Mollepata District, Santiago de Chuco', 'Santiago de Paucaray District', 'Antonio Raymondi Province', 'Pucyura District', 'Lima District', 'Sexi District', 'Llalli District', 'San Pedro de Pilas District', 'Conchucos District', 'Pomacocha District, Acobamba', 'Anra District', 'Huacrachuco District', 'Pucará District, Huancayo', 'Miguel Checa District', 'Iberia Airport', 'Chirinos District', 'Grocio Prado District', 'Ñahuimpuquio District', 'Eduardo Villanueva District', 'Santiago de Challas District', 'Socota District', 'Sayán District', 'Socabaya District', 'Cotahuasi Subbasin Landscape Reserve', 'San Francisco de Asís District', 'Muñani District', 'Colcha District', 'Santiago de Chilcas District', 'Universidad Privada del Norte', 'Nueve de Julio District', 'Cayma District', 'Colcabamba District, Tayacaja', 'Paita District', 'Buenos Aires District, Morropón', 'Alférez FAP Alfredo Vladimir Sara Bauer Airport', 'Ucuncha District', 'Chuquibamba District, Chachapoyas', 'Huancarqui District', 'Shilla District', 'Pachacamac District', 'Churcampa District', 'Nevado Chopicalqui', 'Ocucaje District', 'Morrope District', 'San Miguel de El Faique District', 'San Francisco de Cayrán District', 'Atalaya', 'Sarín District', 'Saña District', 'Huangascar District', 'Newton College', 'Lucre District, Quispicanchi', 'Achaya District', 'Conila District', 'Sangarará', 'Mollepata District, Anta', 'Sitabamba District', 'Totos District', 'Taurija District', 'Supe Puerto', 'Los Aquijes District', 'Tinco District', 'Tarapoto', 'Paccho District', 'Tabalosos District', 'Chepén Province', 'Antonio Raymondi District', 'Piura Region', 'Pacora District', 'Sondorillo District', 'Jaqui District', 'Coasa District', 'Pueblo Libre District, Huaylas', 'Yanac District', 'Oxamarca District', 'La Banda de Shilcayo District', 'Amotape District', 'Montero District', 'Sancos District, Huanca Sancos', 'Chorrillos District', 'Talavera District', 'Pacllón District', 'Pacapausa District', 'Chavín de Huantar District', 'Churuja District', 'Cuchumbaya District', 'Progreso District', 'La Viuda Island', 'Las Amazonas District', 'Pampamarca District, Yarowilca', 'Salitral District, Morropón', 'Caracoto District', 'Pampas District, Tayacaja', 'Rapayan District', 'Asillo District', 'Yanacancha District, Chupaca', 'Pararin District', 'San Damian District', 'Posic District', 'Yauca District', 'Shanao District', 'Quilca District', 'Ayacucho Region', 'Nauta District', 'Pallasca District', 'Huayopata District', 'Arenal District, Paita', 'Santa District', 'Huarmey', 'El Agustino', 'Yura District', 'Sondor District', 'Chocope District', 'Paucar del Sara Sara Province', 'San Pedro de Casta District', 'Chavín de Pariarca District', 'Perené River', 'Sunampe District', 'Caminaca District', 'Rímac River', 'Casa Grande District', 'Omas District', 'Pativilca', 'San Mateo District, Huarochirí', 'Pampas District, Huaraz', 'Pomahuaca District', 'Santo Tomás de Pata District', 'San Antonio District, San Martín', 'Sullana District', 'Florencia de Mora District', '27 de Noviembre District', 'Higos Urco pampa', 'Shatoja District', 'Arequipa Region', 'Rímac District', 'Santo Tomás District, Luya', 'Sauce District', 'Zúñiga District', 'Quiruvilca District', 'Julcán District, Julcán', 'Ayna District', 'Huacaña District', 'Ondores District', 'Paucar District', 'Rioja Province', 'Mariano Nicolás Valcárcel District', 'La Esperanza District, Trujillo', 'Llusco District', 'Huaquirca District', 'Cañaris District', 'Paucarbamba District', 'Goyllarisquizga District', 'Ite District', 'Uco District', 'Parinari District', 'Santiago de Lucanamarca District', 'Cusco', 'Molinopampa District', 'Mollendo District', 'Huaylas District', 'National University of San Marcos', 'Chopicalqui', 'Pariahuanca District, Carhuaz', 'Ancahuasi District', 'Universidad Nacional de Jaen, main campus', 'Sallique District', 'Oyolo District', 'Santo Tomás District, Cutervo', 'Charat District', 'National University of Engineering', 'Bambamarca District, Bolívar', 'Los Olivos District', 'Pacaycasa District', 'Lagunas District, Chiclayo', 'Punta Hermosa', 'Tingo District', 'Huancapi District', 'Ituata District', 'Urubamba River', 'Vilcabamba District, Grau', 'Cajamarca Region', 'La Peca', 'Coyllurqui District', 'Challabamba District', 'Vilcanchos District', 'Universidad Tecnológica del Perú, main campus', 'Barranco District', 'Huaso District', 'La Joya District', 'Anguía District', 'Tumbes Region', 'Universidad Privada de Tacna, main campus', 'Tambopata National Reserve', 'San Pedro de Chaulán District', 'Huamalí District', 'Cupi District', 'San Antonio de Chuca District', 'Ataquero District', 'Palca District, Huancavelica', 'Santa Cruz de Flores District', 'Quisqui District', 'Nieva River', 'Chapimarca District', 'Bolívar District, Bolívar', 'San José de Quero District', 'Iguain District', 'Querocotillo District', 'Luya Viejo District', 'El Parco District', 'Santiago District, Ica', 'San Francisco de Daguas District', 'Capillas District', 'Miraflores District, Yauyos', 'Checacupe District', 'La Esperanza District, Santa Cruz', 'Cochamal District', 'Chingas District', 'San Andrés de Tupicocha District', 'Canaria District', 'Chiguata District', 'Lauricocha, Huánuco', 'Huancaray District', 'Toraya District', 'Cortegana District', 'El Tambo District', 'San Andrés de Cutervo District', 'Alerta', 'Viques District', 'Vice District', 'Padre Abad District', 'Torres Causana District', 'Tirapata District', 'Puquio District', 'Cesar Torque Podesta Airport', 'San Cristóbal District, Luya', 'Yanaca District', 'Susapaya District', 'Paratia District', 'Bagua Grande District', 'Salas District, Lambayeque', 'Cieneguilla', 'Yauyos District, Jauja', 'Cayna District', 'Acos District', 'Charcana District', 'Arequipa', 'Yonán District', 'Musga District', 'El Cenepa District', 'Pardo Miguel District', 'Kimbiri', 'San Juan de Rontoy District', 'San Juan de Siguas District', 'General Sánchez Cerro Province', 'Cochabamba District, Chota', 'Tomas District', 'Manas District, Peru', 'Contumazá District', 'Coliseo Amauta', 'Coliseo Mariscal Caceres', 'Madre de Dios River', 'Huancayo', 'San Isidro District, Huaytará', 'Sacred Valley', 'Huata District, Huaylas', 'Sicuani District', 'Cerro Colorado District', 'Ahuaycha District', 'Moquegua', 'Iñapari District', 'Jaén District', 'Quince Mil', 'Tingo María Airport', 'Huanca District', 'Pongo de Mainique', 'Lambayeque Region', 'Capachica District', 'Pichigua District', 'Pueblo Nuevo District, Chincha', 'Sanagorán District', 'Suyo District', 'Amashca District', 'Urcos District', 'Comandante FAP Germán Arias Graziani Airport', 'Changuillo District', 'Rondocan District', 'Masma District', 'Shapaja District', 'Pastaza District', 'Alpamayo', 'San José del Alto District', 'Quilcas District', 'Ambo District', 'Cayara District', 'Llochegua District', 'Trompeteros District', 'San Ramon Airport', 'Huamanguilla District', 'Marangani District', 'Ciro Alegria Airport', 'Huayllahuara District', 'Viraco District', 'Los Andes Peruvian University', 'Obas District', 'Lucanas District', 'Teniente FAP Jaime Montreuil Morales Airport', 'Rosaspata District', 'Umachiri District', 'Fitzcarrald District', 'Zapatero District', 'Ichupampa District', 'Lamas', 'Aco District, Concepción', 'Humay District', 'Santo Domingo de Acobamba District', 'Cochapeti District', 'Santa Ana de Huaycahuacho District', 'Taraco District', 'San Vicente de Cañete', 'Pasco Province', 'Sechura District', 'El Algarrobal District', 'Pachía District', 'Vilcas Huamán Province', 'San José District, Pacasmayo', 'Santa Catalina de Mossa District', 'San Miguel District, Lima', 'San Juan de Tantaranche District', 'Raqchi', 'Huancaya District', 'Tambo River', 'Pampas District, Pallasca', 'Choquequirao', 'Atuncolla District', 'Huachocolpa District, Huancavelica', 'Huamantanga District', 'Huacachina', 'Pullo District', 'Tupe District', 'Limabamba District', 'Casma', 'Ananea District', 'Condoroma District', 'Sivia', 'Anta District, Carhuaz', 'Olleros District, Huaraz', 'Conchán District', 'Juli District', 'Carumas District', 'Lajas District', 'Chuquis District', 'Subtanjalla District', 'Cap. FAP José A. Quiñones Gonzáles International Airport', 'Lagunas District, Alto Amazonas', 'Antabamba Province', 'Rupa-Rupa District', 'Cerro de Pasco', 'Miguel Iglesias District', 'Cordillera Oriental', 'Colcabamba District, Aymaraes', 'Sangallaya District', 'Anta District, Acobamba', 'Salaverry District', 'Marañón River', 'Yanama District', 'Chinchipe River', 'Zorritos District', 'Amantaní', 'Yautan District', 'Sandia District', 'Caravelí District', 'Chilca District, Cañete', 'Acas District', 'Santa Cruz de Cocachacra District', 'Santiago de Pischa District', 'Pitipo District', 'Carabayllo District', 'Nieva District', 'Juanjui Airport', 'Pampamarca District, La Unión', 'Salcabamba District', 'Tacna District', 'Levanto District', 'Río Negro District', 'Catacaos', 'Alto Selva Alegre District', 'Pampachiri', 'San Luis District, San Pablo', 'Jivia District', 'Coalaque District', 'Conayca District', 'Quinches District', 'Luis Carranza District', 'Ubinas', 'Pacarán District', 'Ricran District', 'Río Tambo District', 'Mala District', 'Kelluyo District', 'Tambopata District', 'Potoni District', 'Huambos District', 'Ticrapo District', 'Miracosta District', 'National University of Education Enrique Guzmán y Valle', 'Aplao', 'Chanchamayo, Junín', 'San Miguel de Corpanqui District', 'Vilavila District', 'Cayalti District', 'Huantar District', 'Huaricolca District', 'Querco District', 'Pallanchacra District', 'Mariano Melgar District', 'Pacaipampa District', 'Huayllacayán District', 'Bolívar', 'Namora District', 'Huanca Sancos', 'Alto de la Alianza District', 'Tarucachi District', 'Misti', 'Independencia District, Vilcas Huamán', 'San Luis District, Carlos Fermín Fitzcarrald', 'Ilabaya District', 'Jircan District', 'Pira District', 'Comandante Noel District', 'Capaya District', 'Universidad Nacional del Santa, main campus', 'Chadín District', 'Sayapullo District', 'Aczo District', 'José María Quimper District', 'Tambo Grande District', 'Cuyocuyo District', 'Chiclayo', 'Cascapara District', 'Loreto Region', 'Cajamarquilla District', 'Atavillos Bajo District', 'Coracora District', 'Hualgayoc District', 'Plain of Bagua', 'La Huaca District', 'Santa Ana District, Castrovirreyna', 'Etén Puerto District', 'Salcahuasi District', 'Lomas District', 'Monzón District', 'Paucas District', 'Cuispes District', 'Tauripampa District', 'Caja District', 'Huanoquite District', 'Huando District', 'Illimo District', 'Chugay District', 'Capitán FAP Renán Elías Olivera Airport', 'Pisuquia District', 'Conduriri District', 'Castilla District', 'Chalaco District', 'Cochabamba District, Huaraz', 'Universidad Nacional de la Amazonía Peruana, main campus', 'Queropalca District', 'Cap. FAP Guillermo Concha Iberico International Airport', 'Coata District', 'Manu District', 'Huaribamba District', 'San José de Ushua District', 'Mache District', 'Hotel Paracas', 'Bellavista de la Unión District', 'Maranura District', 'Mariscal Benavides District', 'Huanta District', 'Zurite District', 'Pataypampa District', 'San Joaquín District, Peru', 'San Martín de Porres District', 'Magdalena de Cao District', 'Quiaca District', 'Chira River', 'Ayaviri District, Yauyos', 'Nazca District', 'Purús District', 'Ingenio District', 'Chimbán District', 'La Coipa District', 'Curimaná District', 'Cuturapi District', 'Ccorpachico', 'San Pedro de Huancayre District', 'Curgos District', 'Tambo District, Huaytará', 'Yucay District', 'Nepeña District', 'Asquipata District', 'Salaverry', 'Ocros District, Huamanga', 'Chachas District', 'Chinchayqucha', 'San Juan de Lopecancha District', 'Huanchay District', 'Tapiche District', 'Cristo Nos Valga District', 'San Isidro de Maino District', 'Huaura District', 'San Juan de Yanac District', 'Cachimayo District', 'Daniel A. Carrión Province', 'Paca District', 'Chontabamba District', 'Acolla District', 'Bambamarca District, Hualgayoc', 'Matalaque District', 'Lincha District', 'Vista Alegre District, Rodríguez de Mendoza', 'Huancano District', 'Quebrada Seca River', 'Melgar Province', 'Llumpa District', 'San Buenaventura District, Marañón', 'La Pampa District', 'Punchana District', 'Abancay District', 'Santa Lucía District, Lampa', 'Universidad Los Ángeles de Chimbote, main campus', 'Llauta District', 'La Victoria District, Lima', 'Huacho District', 'Yanacancha District, Pasco', 'Huayan District', 'Lahuaytambo District', 'Santiago de Chuco District', 'Sitacocha District', 'Marías District', 'Pebas District', 'Toro Muerto', 'Lurigancho-Chosica', 'Mariscal Cáceres District, Camaná', 'San Luis District, Lima', 'Huarango District', 'La Tinguiña District', 'Islay District', 'Cordillera Blanca', 'Putumayo River', 'Moro District', 'Niepos District', 'Cahuacho District', 'Universidad Peruana Austral de Cusco, main campus', 'Capelo District', 'Yunguyo', 'Chala District', 'Huambo District, Rodríguez de Mendoza', 'Campanilla District', 'Coviriali District', 'Marcapata District', 'Zepita', 'Machu Picchu', 'Morococha District', 'Tibillo District', 'Yarumayo District', 'Valera District', 'San Juan del Oro District', 'Abancay', 'Tambillo District', 'Trita District', 'Cap. FAP Carlos Martínez de Pinillos International Airport', 'Iquitos', 'Alberto Leveau District', 'Vista Alegre District, Nazca', 'San Ignacio District, Peru', 'Cajamarca District', 'Yauca del Rosario District', 'Shupluy District', 'San Antonio de Cusicancha District', 'Cangallo', 'Quilcapuncu District', 'Pucallpa', 'San Pablo District, Canchis', 'Huanchaco District', 'Sara Sara District', 'Otoca District', 'Chiara District, Huamanga', 'Lacroja District', 'Cashapampa District', 'Caleta de Carquin District', 'Abelardo Pardo Lezameta District', 'Tumán District', 'Huacullani District', 'Ticaco District', 'Huacar District', 'Alca District', 'Santa Cruz District, Alto Amazonas', 'Sullana', 'Santa Ana District, La Convención', 'Gocta Cataracts', 'Nor Yauyos-Cochas Landscape Reserve', 'Chilcayoc District', 'Picsi District', 'San Miguel District, La Mar', 'San Miguel District, San Miguel', 'Manseriche District', 'La Merced District, Aija', 'Callao Region', 'Santa Rita de Siguas District', 'Ccarhuayo District', 'Surquillo', 'San Bartolo District', 'Yanaquihua District', 'Jepelacio District', 'Piscobamba District', 'Motupe District', 'Kosñipata District', 'Ene River', 'San Jerónimo de Tunán District', 'Alto Saposoa District', 'Paita', 'Sartimbamba District', 'Tayabamba District', 'Recta District', 'Callalli District', 'Bajo Biavo District', 'Puyca District', 'Rosario District, Acobamba', 'Andahuaylillas District', 'San Miguel de Chaccrapampa District', 'Chacayán District', 'Pichacani District', 'Chancay District, Huaral', 'Poroto District', 'Azángaro District, Azángaro', 'Rodríguez Ballón International Airport', 'Calango District', 'Chavín District', 'Moyobamba', 'Andoas', 'Barranca District, Datem del Marañón', 'Huánuco', 'Mariscal Nieto Province', 'Carhuapampa District', 'Tiabaya District', 'Cochas District, Ocros', 'Paccha District, Yauli', 'San Francisco del Yeso District', 'Nevado Copa', 'Ucayali River', 'National University Federico Villareal', 'Crucero District', 'Chucuito District', 'Tipán District', 'Túcume', 'Yungay', 'Buldibuyo District', 'Saucepampa District', 'Coris District', 'Urubamba', 'Pucalá District', 'Uchumarca District', 'Alférez FAP David Figueroa Fernandini Airport', 'Tingo de Ponasa District', 'La Capilla District', 'Paccha District, Jauja', 'Fernando Lores District', 'Anco District, La Mar', 'Santa Rosa de Sacco District', 'San Pedro de Putina Punco District', 'Longotea District', 'Huayllabamba District, Urubamba', 'Nazca', 'Curicaca District', 'Ccapi District', 'Pedro Vilca Apaza District', 'Imaza District', 'Cañete Province', 'Jayanca District', 'Huancarama District', 'Sitajara District', 'Tarma District', 'Salpo District', 'Marcabal District', 'Máncora District', 'San Antonio District, Cañete', 'San Juan District, Castrovirreyna', 'Callahuanca District', 'Corani District', 'Ayahuanco District', 'Yamango District', 'Usquil District', 'Punchana', 'Huaripampa District', 'Lamas Province', 'Chumpi District', 'Santiago de Quirahuara District', 'San Miguel de Cauri District', 'Moho, Peru', 'Querecotillo District', 'Tumbes District', 'Siula Grande', 'Juliaca', 'Vargas Guerra District', 'Universidad Nacional Santiago Antúnez de Mayolo, main campus', 'Virú', 'Tumbes River', 'San José de Ticllas District', 'Daniel Alcides Carrión Province', 'Ataura District', 'Oyotún District', 'Cutervo District', 'Ollantaytambo District', 'Huaranchal District', 'Huánuco District', 'San Agustín District', 'Palca District, Lampa', 'Puno Region', 'Lacramarca River', 'Ate District', 'San Gaban District', 'Juanjui District', 'Cajatambo District', 'Tarata District', 'Acomayo District', 'Santa Cruz de Andamarca District', 'Markham College', 'Chazuta District', 'Para District', 'Copallín District', 'Acopampa District', 'Huachis District', 'Colonia District', 'Sabancaya', 'Umari District', 'Campoverde District', 'Yauyos District, Yauyos', 'Sivia District', 'Utco District', 'Santa Catalina District', 'Santa María District, Panama', 'Laraos District, Yauyos', 'Buena Vista Alta District', 'Ocumal District', 'Luya District', 'Pampa Hermosa National Sanctuary', 'Chiquián District', 'Vichayal District', 'Quinistaquillas District', 'Pilcomayo District', 'Carampoma District', 'Langa District', 'Shamboyacu District', 'Unión Agua Blanca District', 'Chaupimarca District', 'Pamparomas District', 'Pacanga District', 'Paucartambo District, Paucartambo', 'Yuyapichis District', 'San Pedro de Lloc District', 'Castrovirreyna District', 'Balsas District', 'Manuel Antonio Mesones Muro District', 'Sonche District', 'Santa Cruz District, Palpa', 'Santiago de Pupuja District', 'Independencia District, Huaraz', 'Mochumi District', 'Caynarachi District', 'Pachacamac', 'Huancabamba District, Oxapampa', 'Pillpinto District', 'Huayllay National Sanctuary', 'Anapia District', 'Las Lomas District', 'Ancón District', 'Huachón District', 'Requena District', 'Cascas District', 'Baños District', 'Carabamba District', 'Puños District', 'Universidad Nacional Federico Villarreal', 'Chaglla District', 'San Felipe District', 'Sicsibamba District', 'José Manuel Quiroz District', 'Achoma District', 'Oropesa District, Antabamba', 'Nueva Cajamarca District', 'Huachupampa District', 'Candarave District', 'Universidad de Silvaner-Sede Lima, main campus', 'Huay-Huay District', 'Breña', 'Pampamarca District, Canas', 'Santo Domingo de Capillas District', 'Hacienda San José', 'Tocmoche District', 'Pucacuro National Reserve', 'Chacabamba District', 'Huancaspata District', 'Sinsicap District', 'Padre Marquez District', 'Saman District', 'Sacsamarca District', 'Santa Rosa District, El Dorado', 'Víctor Fajardo Province', 'Chanchamayo District', 'San Juan de Tarucani District', 'Chivay District', 'Chilcaymarca District', 'Putis', 'Mañazo District', 'Machaguay District', 'Huaytará District', 'Jacas Grande District', 'Inguilpata District', 'Nasca Airport', 'Marcará District', 'Chojata District', 'Huarocondo District', 'Cumba District', 'Quilahuani District', 'Samegua District', 'Tarma', 'Ocros District, Ocros', 'Nicasio District', 'Jesús District, Lauricocha', 'Independencia District, Lima', 'Yauya District', 'Sepahua District', 'Conchamarca District', 'Yauyucán District', 'Bocas del Toro District', 'Quichuay District', 'San Hilarion District', 'Hermilio Valdizán District', 'Chupa District', 'Peruvian Union University', 'Orurillo District', 'Vilca District', 'Ayabaca District', 'Apurímac River', 'San Pedro de Huacarpana District', 'Colasay District', 'Satipo District', 'San Juan de Licupis District', 'Ripán District', 'Sama District', 'Ninacaca District', 'Mejía District', 'La Florida District', 'Cojata District', 'Víctor Larco Herrera, Peru', 'Caballococha Airport', 'Moho District', 'Checca District', 'Guitarrero Cave', 'Anta District, Anta', 'Coishco District', 'Parco District', 'Virundo District', 'Huacho', 'Punta Lobos', 'Accha District', 'Maras', 'Chuquibamba District, Condesuyos', 'Calapuja District', 'Lloque District', 'Cujillo District', 'Huamanquiquia District', 'Andamarca District', 'Choropampa District', 'Jacas Chico District', 'Huasicancha District', 'Omacha District', 'Piura', 'Zorritos', 'Pinto Recodo District', 'Bolognesi Province', 'Ccoyo', 'Santa Cruz de Chuca District', 'Upahuacho District', 'Bella Unión District', 'Ichigkat muja – Cordillera del Condor National Park', 'San Pedro de Palco District', 'Mirgas District', 'Quiñota District', 'Chongos Alto District', 'Sihuas', 'Huayllay District', 'San Pedro de Lloc', 'San Pedro de Cachora District', 'Miraflores District, Arequipa', 'Querobamba District', 'Angasmarca District', 'Cusco Region', 'Cusipata District', 'Santa Lucía District, Lucanas', 'Quellouno District', 'San Buenaventura District, Canta', 'Miraflores Park Hotel', 'Alto Biavo District', 'Totora District', 'Callao', 'Tigre District', 'Chincha Alta District', 'Vitor District', 'Carapo District', 'Cerro Santa Cruz', 'Cabana District, San Román', 'Madre de Dios District', 'Tambobamba District', 'Andoas District', 'Corongo District', 'Universidad Nacional Jorge Basadre Grohmann', 'Matarani', 'Llapa District', 'Churubamba District', 'Lunahuaná', 'Los Morochucos District', 'San Martín Region', 'Cumbe Mayo', 'Pausa District', 'Vilque District', 'Santa Rosa District, El Collao', 'Cocharcas District', 'Masma Chicche District', 'Pisco', 'Santa Cruz District, Huaylas', 'Chirimoto District', 'Shipasbamba District', 'Margos District', 'Celendín', 'Piscoyacu District', 'San Cristóbal District, Mariscal Nieto', 'San Cristóbal of Huamanga University', 'San Rafael District, Ambo', 'Llacanora District', 'Punta Pariñas', 'Caicay District', 'Colan District', 'La Mar Province', 'Comaina River', 'Tingo María', 'Javary River', 'Laria District', 'Colpas District', 'Aplao District', 'Huancayo District', 'Curahuasi District', 'Putumayo District', 'Pancán District', 'Tarica District', 'Carhuaz', 'Huandoy', 'Omia District', 'Manta District', 'Churin', 'Arapa District', 'Lacabamba District', 'Yunguyo District', 'Yavari District', 'Arahuay District', 'San Juan de Salinas District', 'Tunan Marca District', 'Lambrama District', 'Tumay Huaraca District', 'Yurúa District', 'Lalaquiz District', 'Soloco District', 'Cotahuasi District', 'La Arena District', 'San Carlos District, Bongará', 'Pisac District', 'Soritor District', 'Ayapata District', 'Universidad Nacional Toribio Rordríguez De Mendoza, main campus', 'Quivilla District', 'Conila', 'Casa de Fierro', 'Llata District', 'San Pedro de Chunan District', 'Huancané District', 'Huancarani District', 'Acora District', 'Río Grande District, Palpa', 'Tambogrande', 'Otishi National Park', 'Huamanga Province', 'Panao District', 'Calca District', 'Santa Ana de Tusi District', 'Capazo District', 'Aurahua District', 'Huachocolpa District, Tayacaja', 'Rahuapampa District', 'Tauca District', 'Mancos District', 'Alcamenca District', 'Puno', 'Layo District', 'Chamaca District', 'Carhuanca District', 'Accomarca District', 'Mariatana District', 'Chichas District', 'Camaná', 'Mollebaya District', 'Belén District, Maynas', 'Mariano Dámaso Beraun District', 'Pacucha District', 'Moquegua Region', 'Yanatile District', 'Pisco District', 'Las Pirias District', 'Chuschi District', 'Soras District', 'Chillón River', 'Tumbadén District', 'Cacatachi District', 'San Lorenzo de Quinti District', 'Huancan District', 'Lampa Province', 'Chankillo', 'Huanca-Huanca District', 'Marcapomacocha District', 'Emilio San Martín District', 'Llipata District', 'Mayor General FAP Armando Revoredo Iglesias Airport', 'Yanahuanca District', 'Bernal District', 'Ignacio Escudero District', 'San Marcos de Rocchac District', 'Cura Mori District', 'Carhuacallanga District', 'Monsefú District', 'El Alto District', 'Río Santiago District', 'Santiago de Chocorvos District', 'Virú District', 'El Porvenir District, Trujillo', 'Cajabamba District', 'Cochas District, Yauyos', 'Lircay District', 'San Antonio District, Huarochirí', 'El Prado District', 'Quicacha District', 'South Science University', 'Carmen de la Legua Reynoso', 'Jorge Chávez International Airport', 'Curibaya District', 'Jilili District', 'Pajarillo District', 'Laraos District', 'Huac-Huas District', 'Chota District', 'Tinicachi District', 'Huambo District, Caylloma', 'Huallanca District, Bolognesi', 'Julcán District, Jauja', 'Bolívar District, San Miguel', 'Bambas District', 'Inca Manco Cápac International Airport', 'El Eslabón District', 'Quinua District', 'Universidad Nacional de Trujillo', 'Cahuapanas District', 'Amazonas Region', 'Daniel Alomías Robles District', 'Túcume District', 'Sarayacu District', 'Alejandro Velasco Astete International Airport', 'Estique-Pampa District', 'San Francisco de Asís de Yarusyacán District', 'Paico District', 'José Leonardo Ortíz District', 'Paranday District', 'San José District, Lambayeque', 'Colquioc District', 'Waytapallana', 'Granada District', 'Universidad de San Martín de Porres', 'Acobamba District, Sihuas', 'Palca District, Tacna', 'Catache District', 'Shunqui District', 'Quilmaná District', 'San Javier de Alpabamba District', 'Macate District', 'San Antonio District, Puno', 'Universidad de Moquegua, main campus', 'Santo Toribio District', 'Tomepampa District', 'Sechura Desert', 'Succha District', 'Santa Barbara de Carhuacayan District', 'Huacaybamba District', 'Torata District', 'San Pablo, Peru', 'Ilo Province', 'Omate District', 'Chupaca District', 'Chicama District', 'Moquegua District', 'Morococha', 'Yorongos District', 'Uticyacu District', 'Laberinto District', 'San Borja District', 'Huertas District', 'Puquina District', 'Ascope District', 'Huancavelica District', 'San Luis de Lucma District', 'Curasco District', 'Chalamarca District', 'Tongod District', 'Taquile Island', 'Ticlacayán District', 'Paracas District', 'Colca District, Victor Fajardo', 'Quinuabamba District', 'Quishuar District', 'Canchabamba District', 'Ubinas District', 'Punta Negra', 'Bagua', 'La Brea District', 'Singa District', 'Tocache District', 'Lince District', 'Pocohuanca District', 'Uchumayo District', 'Paramonga', 'Universidad Nacional del Centro del Perú, main campus', 'Huacachi District', 'Kaquiabamba District', 'Reque District', 'Sexy, Peru', 'Morcolla District', 'La Merced District, Churcampa', 'Malvas District', 'Arancay District', 'Huariaca District', 'Concepción District, Vilcas Huamán', 'Pómac Forest Historical Sanctuary', 'Mamara District', 'Huamancaca Chico District', 'Limatambo District', 'Cospán District', 'Callayuc District', 'Yamón District', 'Provinces of Peru', 'Huanca Sancos Province', 'Jesús Nazareno District', 'Pariacoto District', 'Jazán District', 'Catilluc District', 'Morropón District', 'Chincheros Province', 'Saurama District', 'Vegueta District', 'Universidad de Chiclayo, main campus', 'Ocaña District', 'Universidad Nacional del Callao', 'Fidel Olivas Escudero District', 'Yungar District', 'Huamatambo District', 'Pitumarca District', 'Ferreñafe Province', 'Perené District', 'San Juan de Chacña District', 'San José District, Azángaro', 'Tuti District', 'Chongoyape District', 'Velille District', 'Pachacutec District', 'Puerto Inca District', 'Vinchos District', 'Huanza District', 'San Gregorio District', 'Pichari District', 'Aparicio Pomares District', 'Pichari', 'Cachicadán District', 'Artesonraju', 'Cuenca District, Huarochirí', 'San Juan de Iris District', 'Ongón District', 'Huancabamba River', 'Pativilca District', 'Mosque Bab ul Islam', 'Universidad Andina del Cusco, main campus', 'Chongos Bajo District', 'La Molina National Agrarian University', 'Alto Larán District', 'Huanuhuanu District', 'Coya District', 'San Roque de Cumbaza District', 'Majes District', 'Picota District', 'Huasta District', 'Mosoc Llacta District', 'San Pablo District, San Pablo', 'El Tallán District', 'El Ingenio District', 'Encañada District', 'Vicco District', 'Saisa District', 'Ucayali Region', 'Rázuri District', 'Chupuro District', 'Luyando District', 'Aguarico River', 'Universidad Católica de Santa María', 'San Isidro District, Lima', 'Tingo de Saposoa District', 'Pinra District', 'Lonya Grande District', 'Lima Province', 'Sapillica District', 'Huasahuasi District', 'Puerto Bermúdez District', 'Cunas River', 'Papaplaya District', 'Longuita District', 'Pichirhua District', 'Ragash District', 'Andarapa District', 'Saylla District', 'Pisco Airport', 'Coronel FAP Francisco Secada Vignetta International Airport', 'Cocas District', 'San Rafael District, Bellavista', 'Surco District, Huarochirí', 'Usicayos District', 'Acochaca District', 'Awajun District', 'Samuel Pastor District', 'San Sebastian District', 'Maras District', 'Viñac District', 'Huayacundo Arma District', 'San Juan de Jarpa District', 'Comas District, Lima', 'Inambari District', 'Chavín de Huantar', 'Universidad San Ignacio de Loyola', 'Camaná District', 'Chacoche District', 'Deán Valdivia District', 'Huamachuco District', 'Nueva Requena District', 'Universidad Privada San Pedro, main campus', 'Cangallo District', 'Chetilla District', 'Yanahuaya District', 'Nuevo Occoro District', 'Curpahuasi District', 'Universidad Nacional de San Martín, main campus', 'Laredo District', 'Huaraz', 'San Pedro de Pillao District', 'Huayllabamba District, Sihuas', 'Tambo District, La Mar', 'San Juan Bautista District, Huamanga', 'Namballe District', 'Quillabamba', 'Asunción Province', 'San Juan Bautista District, Maynas', 'Urarinas District', 'Patapo District', 'Acaray', 'Atiquipa District', 'Condebamba District', 'Tupac Amaru Inca District', 'San Antonio de Putina Province', 'Punta de Bombon District', 'Ahuac District', 'Lima Metropolitan Area', 'Trujillo', 'Chicche District', 'Moyobamba District', 'Marcabamba District', 'Orcopampa District', 'Contamana District', 'Caraybamba District', 'Santa Rosa District, La Mar', 'San Miguel de Mayocc District', 'Soraya District', 'Maquia District', 'Yauli District, Yauli', 'San Juan Bautista District, Ica', 'Chachapoyas', 'San Pedro de Coris District', 'Putina District', 'San Juan de la Virgen District', 'Capacmarca District', 'Samanco District', 'Simbal District', 'Janjaillo District', 'Andahuaylas', 'Pucusana', 'Urpay District', 'Socos District', 'Magdalena del Mar', 'Universidad Católica de Trujillo, main campus', 'Vitis District', 'Ascensión District', 'Calana District', 'San Antonio District, Grau', 'Chepén District', 'Andajes District', 'Paucartambo District, Pasco', 'Recuay, Peru', 'Cerro Azul District', 'Espinar District', 'Molinos District', 'Celendín District', 'Chimbote District', 'Oropesa District, Quispicanchi', 'Acobamba District, Tarma', 'Jequetepeque District', 'Morales District', 'Universidad Antonio Ruiz de Montoya, main campus', 'El Mantaro District', 'Larco Museum', 'San Martín District', 'Puerto Esperanza Airport', 'Tintay District', 'Huaraz Province', 'San Benito District', 'Acos Vinchos District', 'Huayrapata District', 'Cholón District', 'Jauja', 'Nuevo Progreso District', 'Miraflores District, Huamalíes', 'Huancavelica', 'La Primavera District', 'Palca District, Tarma', 'Unicachi District', 'Frías District', 'Lancones District', 'San Antonio de Antaparco District', 'Huallanca District, Huaylas', 'Uranmarca District', 'Madre de Dios Region', 'Patambuco District', 'Ulcumayo District', 'Yuracyacu District', 'Uchiza District', 'Villa Rica District', 'Marcas District', 'Alerta Airport', 'Universidad Señor de Sipán, main campus', 'National University of St Augustin of Arequipa', 'Santiago de Anchucaya District', 'Combapata District', 'Palcazu River', 'Huaya District', 'La Cuesta District, Otuzco', 'San Silvestre de Cochan District', 'Chulucanas District', 'San Marcos District', 'Yurimaguas', 'Maca District', 'San Jerónimo District, Luya', 'Quiches District', 'Montevideo District', 'Chiliquín District', 'Acostambo District', 'Jauja District', 'Huancapón District', 'Universidad Nacional del Altiplano, main campus', 'Condormarca District', 'Justo Apu Sahuaraura District', 'Llapo District', 'Paiján District', 'Ciudad Nueva District', 'Cacra District', 'Acocro District', 'Cajamarquilla', 'Ocros', 'San Juan District, Lucanas', 'Carmen Salcedo District', 'San Miguel de Acos District', 'Colegio Franklin Delano Roosevelt, The American School of Lima', 'Huata District, Puno', 'Lucre District, Aymaraes', 'Iquitos District', 'La Jalca District', 'Chocos District', 'Cuenca District, Huancavelica', 'Tigre River', 'Huánuco Region', 'Indiana District, Maynas', 'Universidad Nacional de Huancavelica, main campus', 'Huaraz District', 'Huambo District, Arequipa', 'Cordillera de Colán National Sanctuary', 'Corculla District', 'Chinchero District', 'Ocobamba District, La Convención', 'Huayllo District', 'Huayllati District', 'San Antonio de Cachi District', 'Cabana', 'Urubamba District', 'Chilete District', 'Langui District', 'El Carmen de la Frontera District', 'Universidad Nacional Hermilio Valdizán, main campus', 'Huatasani District', 'Quequeña District', 'Mayo River', 'Santa Rosa District, Melgar', 'Chillia District', 'Manzanares District', 'Lurín District', 'Huanipaca District', 'Laramarca District', 'Limbani District', 'Santa Rosa District, Rodríguez de Mendoza', 'Tacabamba District', 'Iray District', 'Mariscal Cáceres District, Huancavelica', 'San Juan de Miraflores', 'Zepita District', 'Tantara District', 'Coronel FAP Carlos Ciriani Santa Rosa International Airport', 'Matara District', 'Jamalca District', 'Suitucancha District', 'Imperial District', 'Cusco District', 'Wallqa Wallqa', 'Andagua District', 'Pilpichaca District', 'Corosha District', 'Quillo District', 'Chiclayo District', 'Pampa Hermosa District, Satipo', 'Huallaga District', 'Santa Rosa District, Jaén', 'Putinza District', 'Huacchis District', 'Ninabamba District', 'La Unión District, Dos de Mayo', 'Cap. FAP Pedro Canga Rodríguez Airport', 'Chincho District', 'Huantán District', 'Santa María de Chicmo District', 'Circa District', 'Yantalo District', 'Cahuachi', 'Jesús District, Cajamarca', 'Sabandía District', 'San Juan de Lurigancho', 'Calquis District', 'Cajacay District', 'Pomacocha District, Andahuaylas', 'Los Organos District', 'Ayabaca', 'El Oro District', 'Huaca de la Luna', 'Supe District', 'Santa Rosa District, Pallasca', 'Ichoca', 'La Molina District', 'Moya District', 'La Oroya', 'Caylloma District', 'Cuñumbuqui District', 'Aucara District', 'Alto Nanay District', 'Universidad Ricardo Palma', 'Parcona District', 'Huasmín District', 'Yunga District', 'Cordillera Negra', 'Chancay District, San Marcos', 'Apurímac Region', 'Asunción District, Chachapoyas', 'Honoria District', 'Cascas', 'Coropuna', 'Candarave', 'Caraz', 'Jumbilla District', 'Ollantaytambo', 'Wanchaq District', 'Lares District', 'Ica District', 'Lampa District, Lampa', 'Mariscal Castilla District, Concepción', 'Chacapampa District', 'Ocoyo District', 'Teniente Cesar Lopez Rojas District', 'Canchaque District', 'Paccaritambo District', 'Morona District', 'Tinta District', 'Apata District', 'La Unión District, Piura', 'Yauli District, Huancavelica', 'Chaccho District', 'Tomay Kichwa District', 'Lamay District', 'Acraquia District', 'Sangarará District', 'Llama District, Chota', 'Santa Rosa District, Grau', 'Cochamarca District', 'Chipurana District', 'Huarmaca District', 'Huantsan', 'Chinchaypujio District', 'Locumba District', 'Huancas District', 'Pamparomas', 'Napo District', 'Chontali District', 'Carlos Fermín Fitzcarrald Province', 'Yarabamba District', 'Huancaraylla District', 'Pasco Region', 'Rinconada Llicuar District', 'Huicungo District', 'Llamellín District', 'Lucma District, Gran Chimú', 'Nanchoc District', 'Chaparra District', 'Kimbiri District', 'Pucará District, Lampa', 'Cabanillas District', 'San Salvador District', 'San Andrés District', 'Azángaro District, Yauyos', 'La Rinconada, Peru', 'Huampara District', 'Huaylillas District', 'Llamellín', 'Pontifical Catholic University of Peru, main campus', 'Nueva Arica District', 'Tapo District', 'Huallaga River', 'Camanti District', 'Tournavista District', 'Cochabamba District, Huacaybamba', 'Andabamba District, Santa Cruz', 'José Domingo Choquehuanca District', 'Magdalena District, Cajamarca', 'Vitoc District', 'La Perla District', 'Santa Cruz de Toledo District', 'Huarmey Province', 'Waywash mountain range', 'Chuluncayani Adventist University', 'El Milagro District', 'La Libertad de Pallán District', 'Pachamarca District', 'Sarhua District', 'University of Piura', 'Palcazu District', 'Pusi District', 'Copa District', 'Bolognesi District', 'Canchayllo District', 'Pampa Hermosa District, Ucayali', 'Teniente Manuel Clavero District', 'Colcabamba District, Huaraz', 'Córdova District', 'Peruvian Amazon', 'Tarma Province', 'Santo Tomás District, Chumbivilcas', 'Aija, Peru', 'La Unión District, Tarma', 'Gregorio Pita District', 'Tabaconas District', 'Chincha Baja District', 'Tanta District', 'Hualhuas District', 'Leimebamba District', 'Chilca District, Huancayo', 'Caraz District', 'Congalla District', 'Jiskairumoko', 'Casma District', 'Paucarpata District', 'Cabanaconde District', 'Huayllay Grande District', 'Huaro District', 'Tacna Region', 'Tauria District', 'Yauli District, Jauja', 'Vilcabamba District, La Convención', 'Yurimaguas District', 'Huaral District', 'University of Lima', 'Catac District', 'Orcotuna District', 'San Jacinto District', 'Daniel Hernández District', 'Santa Leonor District', 'José Gálvez District', 'Wari ruins', 'Cochas District, Concepción', 'Chachapoyas District', 'Chincha Alta', 'Carmen Alto District', 'Codo del Pozuzo District', 'Llocllapampa District', 'Alfonso Ugarte District', 'Santa María del Mar', 'Monobamba District', 'La Libertad District', 'Incahuasi District', 'Francisco Carle Airport', 'Huancavelica Region', 'Coronel Gregorio Albarracín Lanchipa District', 'Lamud', 'Los Baños del Inca District', 'Carhuaz Province', 'Tacna', 'Livitaca District', 'Zarumilla River', 'San Pedro District, Lucanas', 'Huaynaputina', 'Pedro Galvez District', 'Pichanaqui District', 'La Cruz District, Tumbes', 'Copani District', 'Universidad Católica de San Pablo', 'Ocuviri District', 'Moisés Benzaquen Rengifo Airport', 'Cajunga', 'Ponto District', 'Pacobamba District', 'Yerupajá', 'La Libertad Region', 'Cullhuas District', 'Characato District', 'Florida District, Peru', 'Izcuchaca District', 'Navan District', 'Taray District', 'Túpac Amaru District', 'Chungui District', 'Checras District', 'Canis District', 'Santa Anita District', 'Villa María del Triunfo', 'Sihuas District', 'Santiago-Comaina Reserved Zone', 'Colca Canyon', 'San Cristóbal District, Lucanas', 'Sapallanga District', 'La Merced', 'Ccochaccasa District', 'Cartavio, Peru', 'Jeberos District', 'Cusca District', 'Pampa de la Quinua', 'Purús Province', 'Universidad Nacional de Ucayali, main campus', 'Huanta Province', 'Nicolás de Piérola District', 'Tambo de Mora District', 'José Crespo Y Castillo District', 'San Luis District, Cañete', 'Pueblo Nuevo District, Ferreñafe', 'Villa El Salvador', 'Regions of Peru', 'Mariscal Gamarra District', 'Santa Rosa District, Chiclayo', 'Independencia District, Pisco', 'Chiguirip District', 'Tapairihua District', 'San José de Sisa District', 'Chugur District', 'Ayacucho', 'Iparía District', 'Choco District', 'Pomabamba', 'Huambo, Arequipa', 'Coporaque District, Caylloma', 'Bellavista District, Jaén', 'San Cristóbal District, Picota', 'Tapuc District', 'Ticllos District', 'La Oroya District', 'Papayal District', 'Jacobo Hunter District', 'Pampas de Hospital District', 'Poroy District', 'Machupicchu District', 'Pocsi District', 'Sillustani', 'Inchupalla District', 'Julcamarca District', 'San Fernando District', 'Providencia District', 'Pucacaca District', 'Ocoña District', 'Rumisapa District', 'Ocongate District', 'Tarapoto District', 'Chacas District', 'Phara District', 'Tamburco District', 'Marca District', 'Ranracancha District', 'Mollepampa District', 'Colquepata District', 'Ollachea District', 'Aucallama District', 'Secclla District', 'María District', 'Yaquerana District', 'Salas District, Ica', 'Colquemarca District', 'Chingalpo District', 'Ichocán District', 'Aquia District', 'Huandoval District', 'Pacaraos District', 'Pachangara District', 'Magdalena District, Chachapoyas', 'Acopia District', 'Paramonga District', 'Anco-Huallo District', 'Madean District', 'Pillco Marca District', 'Quinua', 'Agallpampa District', 'Chalhuanca District', 'Andaray District', 'Coronel FAP Alfredo Mendívil Duarte Airport', 'Huaros District', 'Pikillaqta', 'Balsa Puerto District', 'Rondos District', 'Haquira District', 'Universidad Científica del Sur', 'Paucará District', 'Chisquilla District', 'Mito District', 'Ampato', 'Huarochirí District', 'Chochope District', 'Uraca District', 'Antioquia District', 'Yupan District', 'Quehue District', 'Tantarica District', 'Huachac District', 'Salamanca District', 'Mollendo', 'San Jerónimo District, Cusco', 'Pomabamba District', 'Tahuanía District', 'Huari District', 'Pataz District', 'Paimas District', 'Agua Blanca District', 'Huanuara District', 'Atavillos Alto District', 'Mato District', 'Huimbayoc District', 'Chavinillo District', 'Acobamba Province', 'La Victoria District, Chiclayo', 'Lachaqui District', 'Santa María del Valle District', 'Cabana District, Lucanas', 'Yaurisque District', 'Catacaos District', 'Suykutambo District', 'San Pedro de Chana District', 'Caplina River', 'Acoria District', 'Paucarcolla District', 'Andahuaylas District', 'Macusani District', 'Grau Province', 'Universidad Nacional de Tumbes, main campus', 'Universidad Católica Sedes Sapientiae, main campus', 'Salcantay', 'Tnte. Gral. Gerardo Pérez Pinedo Airport', 'Cabana District, Ancash', 'Callanmarca District', 'Cad. FAP Guillermo del Castillo Paredes Airport', 'Pariñas District', 'Sachaca District', 'Plateria District', 'Cupisnique District', 'Pías District', 'Choros District', 'Pozuzo River', 'Chiara District, Andahuaylas', 'Huascarán', 'Manantay District', 'Cotaruse District', 'San Francisco de Sangayaico District', 'Santiago de Tuna District', 'Vilque Chico District', 'Bellavista District, Bellavista', 'Quinjalca District', 'Muquiyauyo District', 'Pilluana District', 'Ventanilla District', 'Salitral District, Sullana', 'Swidwin Airport', 'Santiago de Surco', 'Cayetano Heredia University', 'Guzmango District', 'Huambalpa District', 'Ajoyani District', 'Santa Rosa de Ocopa District', 'San Clemente District', 'Mara District', 'San Pedro de Larcay District', 'Moyobamba Airport', 'Sayla District', 'Aramango District', 'Sibayo District', 'Cajay District', 'Nevado Pisco', 'Manú River', 'Laramate District', 'Calamarca District', 'Universidad Nacional José Faustino Sánchez Carrión, main campus', 'Ongoy District', 'Acobambilla District', 'Huayllapampa District', 'Yarinacocha District', 'Aguas Verdes District', 'Arma District', 'Lluta District', 'Carania District', 'Coronel Castañeda District', 'Cáceres del Perú District', 'Anchonga District', 'Callao District', 'Tambopata River', 'Oxapampa', 'Ihuari District', 'El Carmen District, Churcampa', 'Sillapata District', 'Chimbote', 'Ayacucho District', 'Etén District', 'Huaca Pucllana', 'Huañec District', 'Ica, Peru', 'Cayetano Heredia University, main campus', 'Chaclacayo', 'Universidad Privada de Trujillo, main campus', 'Huaccana District', 'Pacocha District', 'Lucanas Province', 'Llacllin District', 'Leonor Ordóñez District', 'San Juan De Marcona Airport', 'José Luis Bustamante District', 'Puno District', 'San José de los Molinos District', 'Asia District, Peru', 'Ilo', 'Santiago de Cao District', 'Huabal District', 'Lima', 'Llama District, Mariscal Luzuriaga', 'Ayo District', 'Río Grande District, Condesuyos', 'Antauta District', 'Casa del Moral', 'Alto Inambari District', 'Chaviña District', 'San Vicente de Cañete District', 'Inahuaya District', 'Santa Eulalia District', 'Bellavista District, Sullana', 'Alto Pichigua District', 'Barranquita District', 'Chilcas District', 'San Luis de Shuaro District', 'San Pedro District, Ocros', 'Colta District', 'San Mateo de Otao District', 'Paccha District, Chota', 'Andahuaylas Airport', 'Sanctuary of Las Nazarenas', 'Macari District', 'Pucará District, Jaén', 'Recuay District', 'San Pedro District, Canchis', 'Gorgor District', 'Cayarani District', 'Chupamarca District', 'Acarí District', 'Saquena District', 'Yanque District', 'Pariahuanca District, Huancayo', 'Pazos District', 'Leoncio Prado District, Lucanas', 'Yanas District', 'Coporaque District, Espinar', 'Soplin District', 'Calzada District', 'Puyusca District', 'Universidad Alas Peruanas, main campus', 'Irazola District', 'Huayucachi District', 'Tres Unidos District', 'Cocachacra District', 'Saksaywaman', 'Cocabamba District', 'Sabaino District', 'Comas District, Concepción', 'Universidad Continental de Ciencias e Ingeniería, main campus', 'Llaylla District', 'Eleazar Guzman Barron District', 'Santa River', 'Muqui District', 'Pampacolca District', 'Chacapalpa District', 'Ticapampa District', 'Matacoto District', 'Corrales District', 'Pallpata District', 'Huarmey District', 'Palpa District', 'Turpo District', 'Tres de Diciembre District', 'Bagua District', 'Toribio Casanova District', 'Heath River', 'Elías Soplín Vargas District', 'Cairani District', 'Juan Espinoza Medrano District', 'Lambayeque', 'Ccatca District', 'La Punta District', 'Pachiza District', 'Puente Piedra District', 'Junín District', 'Pueblo Nuevo District, Chepén', 'Collique Airport', 'Vischongo District', 'Palcamayo District', 'Sicchez District', 'Concepción District, Concepción', 'Cenepa River', 'Sucre Province', 'Matucana District', 'Lucma District, Mariscal Luzuriaga', 'Oyón District', 'Marco District', 'Carmen District, San José', 'Ilo Airport', 'Sechura', 'Pisacoma District', 'National University of San Antonio Abad in Cuzco', 'Ancash Region', 'Alonso de Alvarado District', 'Ricardo Palma District', 'Ferreñafe District', 'Sausa District', 'Junín Region', 'Kishuara District', 'El Sira Communal Reserve', 'Bellavista District', 'Antabamba District', 'Olmos District', 'Huanchaco', 'Pimpingos District', 'Mangas District', 'San Pablo District, Mariscal Ramón Castilla', 'Lari District', 'Ayaví District', 'Layo', 'Huayo District', 'San Francisco District, Ambo', 'Sipán', 'San Nicolás District, Carlos Fermín Fitzcarrald', 'Buenos Aires District, Picota', 'San Salvador de Quije District', 'Canta District', 'Huacrapuquio District', 'José Sabogal District', 'Quito-Arma District', 'Camilaca District', 'Nuevo Chimbote District', 'Amarilis District', 'San Juan District, Sihuas', 'Yambrasbamba District', 'Pongo', 'Huaynacotas District', 'Chambara District', 'Jorge Chávez District', 'Quiquijana District', 'San José de Lourdes District', 'Leoncio Prado District, Huaura', 'Canoas de Punta Sal District', 'Parobamba District', 'Chincheros District', 'Pólvora District', 'Caujul District', 'Olleros District, Chachapoyas', 'University of the Pacific', 'Vilcabamba District, Daniel Alcides Carrión', 'Acobamba District, Acobamba', 'Ambar District', 'Quelccaya Ice Cap', 'Corongo Province', 'Pueblo Nuevo District, Ica', 'Huamachuco', 'Pastoruri Glacier', 'Nanay River', 'Chinchihuasi District', 'Santa Rosa District, Lima', 'Moche District', 'Yanaoca District', 'San Juan de Bigote District', 'Chucatamani District', 'Chuquibambilla District', 'Pomacanchi District', 'Punchao District', 'San Bartolome District', 'San Jerónimo District, Andahuaylas', 'Estique District', 'Pomacancha District', 'Nevado Mismi', 'Hualmay District', 'Uñón District', 'Universidad Femenina del Sagrado Corazón, main campus', 'Coayllo District', 'San Juan de Yscos District', 'Aco District, Corongo', 'Vilcas Huamán District', 'Kunturkanki District', 'Santa Cruz District, Santa Cruz', 'Jenaro Herrera District', 'Supe Puerto District', 'Chiquián', 'Monastery of San Francisco, Lima', 'Culebras District', 'Marcona District', 'Pilchaca District', 'Matapalo District', 'Tamarindo', 'Casca District', 'Ranrahirca District', 'Pucusana District', 'Conima District', 'Tiquillaca District', 'Ocoruro District', 'Sicaya District', 'Tinyahuarco District', 'Simón Bolívar District, Peru', 'Quinocay District', 'Lima Region', 'Querocoto District', 'Santiago District, Cusco', 'Lobitos District', 'Polobaya District', 'Huaral', 'Santillana District', 'El Porvenir District, San Martín', 'Sina District', 'Huancané Province', 'Callería District', 'Congas District', 'Sañayca District', 'Lagunas District, Ayabaca', 'Casitas District', 'Lunahuaná District', 'Habana District', 'Parinacochas Province', 'Pararca District', 'Juan Guerra District', 'Mantaro River', 'Cap. FAP Víctor Montes Arias Airport', 'Universidad Privada César Vallejo, main campus', 'Cajamarca', 'Cajaruro District', 'Pimentel District', 'Utcubamba river', 'San Nicolás District, Rodríguez de Mendoza', 'Jangas District', 'Puinahua District', 'Paruro District', 'Ocobamba District, Chincheros', 'Raimondi District', 'Guadalupe District, Pacasmayo', 'Tantamayo District', 'Barranca District, Barranca', 'Cheto District', 'San Juan District, Cajamarca', 'San Bernardino District, San Pablo', 'Tapacocha District', 'Miraflores District, Lima', 'Tumbes, Peru', 'Máncora', 'Carhuaz District', 'Arequipa District', 'Ichuña District', 'El Pato Ab Airport', 'Sincos District', 'Ilo District', 'Chalcos District', 'Desaguadero District', 'Yungay District', 'Huancabamba District, Huancabamba', 'Jaén', 'Caral', 'Chicla District', 'Zarumilla District', 'San Francisco de Ravacayco District', 'Universidad Peruana de Ciencias e Informática, main campus', 'Apongo District', 'Pomata District', 'Tate District', 'Atico District', 'FAP Captain David Abenzur Rengifo International Airport', 'La Matanza District', 'Sancos District, Lucanas', 'Tahuamanu District', 'Pacasmayo District', 'Heroínas Toledo District', 'Ilave District', 'Tilali District', 'Santa Cruz District, Cutervo', 'San Juan de Cutervo District', 'San Antón District', 'Ayaviri District, Melgar', 'Mollebamba District', 'Ica Region', 'Huayllán District', 'Sacanche District', 'Tisco District', 'San Miguel de Aco District', 'Chachapoyas Airport', 'Huacllan District', 'Masin District', 'Matahuasi District', 'Tapay District', 'Colcamar District', 'Manú Province', 'Pión District', 'Jaravi', 'Puerto Maldonado', 'Aramango', 'Alto Tapiche District', 'Parcoy District', 'Surcubamba District', 'La Ramada District', 'Las Piedras District', 'Los Amigos Biological Station', 'Pallqarahu', 'Belén District, Sucre', 'Llipa District', 'Chipao District', 'San Ramón District, Chanchamayo', 'Cabanilla District', 'Oxapampa District', 'Sorochuco District', 'Inclán District', 'Lonya Chico District', 'Pachas District', 'Andabamba District, Acobamba', 'Santa Isabel de Siguas District', 'Chumuch District', 'Poechos Reservoir', 'Chan Chan', 'Padre Aldamiz International Airport', 'Ocalli District', 'Ccorca District', 'Carhuamayo District', 'Pacaya-Samiria National Reserve', 'Pulán District', 'Chao District', 'Pampas Chico District', 'Mazán District', 'Chulucanas', 'Jesús María District, Lima', 'Milpuc District', 'Pocollay District', 'Pilcuyo District', 'Madrigal District', 'Lampian District', 'Longar District', 'Las Palmas Airport', 'Caspisapa District', 'Anco District, Churcampa', 'María Parado de Bellido District', 'Talara', 'Huayana District', 'Huacaschuque District', 'Colca District, Huancayo', 'Cotabambas District'}
            Answers = 2275, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.101s]
          Answers = 2275, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.102s]
        Checking schema 23 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 23
            Final Answer: {'Battle of Punta Gruesa', 'War of the Pacific', 'Battle of Maraycalla', 'War of the Confederation', 'Battle of Arica', 'Battle of Chillopampa', '2004 South American Summit', 'Operation Corridor', 'Battle of La Concepción', 'Inca Civil War', 'Battle of Tarapacá', 'Battle of Miraflores', 'Battle of Buin', 'Campaign to Defend Siping', '2007 Elcine', 'Internal conflict in Peru', 'Battle of Huarina', 'Battle of Iquique', 'Blockade of Iquique', 'Gran Colombia – Peru War', 'Siege of Santo Domingo', 'Battle of Vilcaconga', 'Peruvian War of Independence'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 24 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 25 / 229: {
          [('Main', '==', 'm.016wzw', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'1936 Summer Olympics', '2008 Summer Olympics'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 26 / 229: {
          [('Main', '==', 'm.016wzw', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Aguirre, the Wrath of God'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 27 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Lima'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 28 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.016wzw fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 WHERE { fb:m.016wzw fb:location.country.calling_code ?o1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'51'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 29 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.currency_formerly_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 3
            Final Answer: {'Peruvian inti', 'Peruvian libra', 'Peruvian sol'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.053s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.054s]
        Checking schema 30 / 229: {
          [('Main', '==', 'm.016wzw', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'El Comercio', 'El Peruano'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.044s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.044s]
        Checking schema 31 / 229: {
          [('Main', '==', 'm.016wzw', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 26
            Final Answer: {'Puno Region', 'Huancavelica Region', 'Ica Region', 'Cusco Region', 'Cajamarca Region', 'Callao', 'Moquegua Region', 'Madre de Dios Region', 'Callao Region', 'Tacna Region', 'Huánuco Region', 'Ucayali Region', 'Lambayeque Region', 'Loreto Region', 'Lima Region', 'Tumbes Region', 'Amazonas Region', 'Ancash Region', 'La Libertad Region', 'Pasco Region', 'Apurímac Region', 'Junín Region', 'San Martín Region', 'Piura Region', 'Arequipa Region', 'Ayacucho Region'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 32 / 229: {
          [('Main', '==', 'm.016wzw', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 33 / 229: {
          [('Main', '==', 'm.016wzw', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Peruvian region', 'Peruvian province'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 34 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Time in Peru', 'UTC-5'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 35 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.016wzw fb:location.location.area ?o1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 WHERE { fb:m.016wzw fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'1.28522e+06'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 36 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 3
            Final Answer: {'South America', 'Latin America', 'Americas'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 37 / 229: {
          [('Main', '==', 'm.016wzw', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 25
            Final Answer: {'Birds of Peru', 'The Moche warrior', 'The Peru Reader', 'Secret of the Andes', 'Evil Star', 'The Lost City', 'Francisco Pizarro', 'Lost treasure of the Inca', 'Go and come back', 'The Machu Picchu Guidebook', 'Dos indios', 'Trail of Feathers', 'The Bridge of San Luis Rey', 'Moon Rope/Un lazo a la luna', 'The sunflower', 'Temple', 'Over the Andes', 'Nightwatch', 'Sendero Luminoso in context', 'The Celestine Prophecy', 'Touching the Void', 'House of the Tiger King', 'The Cubs and Other Stories', 'South American Fights and Fighters', 'The myths of Mexico and Peru'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 38 / 229: {
          [('Main', '==', 'm.016wzw', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'United Nations'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 39 / 229: {
          [('Main', '==', 'm.016wzw', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 138
            Final Answer: {'Revolutionary Socialist Party', 'United Left', 'Mariateguist Unified Party', 'Democratic Youth Front', 'Popular Forces', 'Liberty Movement', 'National Integration Party', 'Revolutionary Communist Party – Red Trench', 'Agrarian National Party', 'Revolutionary Communist Party', 'Confederación de Trabajadores del Perú', 'Solidarity and Democracy', 'Ciudad Saludable', 'Socialist Democrat Party', 'Constitutional Renewal Party of Peru', 'Pradist Democratic Movement', 'Revolutionary Left Movement', 'Peruvian Socialist Movement', 'Cambio 90', 'Peruvian Popular Action', 'All for Victory', 'Democratic Front of National Unity', 'Revolutionary Mariateguist Party', 'Communist Party of Peru – Red Fatherland', 'Step by Step', 'Democrat Party (Peru)', 'Decentralist Party of the South', 'The Hunger Project', 'American Popular Revolutionary Alliance', 'Independent Civil Party', 'Democratic Force', 'Christian Social Party', 'Urban Rural Trade Unionist Party of Peru', 'Liberal Party', 'Peru 2000', 'Confederación Unitaria de Trabajadores del Perú', 'National Liberation Front', 'Independent Moralizing Front', 'Worker Peasant Student and Popular Front', "Agricultural People's Front of Peru", 'Reformist Democratic Party', 'Independent Patriotic Legion', 'Go on Country', 'National Renewal', "People's Solution", 'Revolutionary Union', 'National Front of Workers and Peasants', 'Proletarian Nationalist Party', 'Republican Party of Peru', 'Hayist Bases Movement', 'Peru Now', 'Communist Party – Red Star', 'Nationalist Social Democrat Party', 'Democratic Union Party', 'Popular Action', 'National Alliance', 'Cambia Perú', 'Peruvian Resurgence', 'Democratic Party of Peru', 'Revolutionary Vanguard (Communist Proletarian)', 'Economist Party', "Christian People's Party", 'Peruvian Nationalist Party', 'Proletarian Party of Peru', 'Civilista Party', 'Fuerza 2011', 'Socialist Party of Peru', 'Movement of Socialist Affirmation', 'APRA Rebelde', 'Peruvian Communist Party – Red Flag', "Let's Make Progress Peru", 'National Civic Union', 'We Are Peru', 'Revolutionary Marxist Workers Party', 'Nationalist Party of Peru', 'Socialist Vanguard Party', 'Popular Union', 'Christian Democrat Party', 'Democratic Front', 'Republican Action', 'Civic Union Party', 'Christian Social Party of Peru', 'Democratic Reconstruction', 'Puka Llacta', 'Peruvian Democratic Party', 'Peruvian Communist Party', 'Workers Party', 'National Solidarity Party', 'Union for Peru', 'Project Country', 'Regionalist National Party of the Centre', 'National Party', 'Revolutionary Socialist Party (Marxist–Leninist)', 'Socialist Political Action', 'National Co-ordination of Independents', 'Nationalist Party', 'Democratic National Party', 'Odriíst National Union', 'Sí Cumple', 'Program for Appropriate Technology in Health', 'Socialist Party', 'Party for Social Democracy', 'Revolutionary Left Union', 'Communist Party of Peru (Marxist–Leninist)', 'Alliance for Progress', 'Peruvian Revolutionary Nationalist Party', 'National Justice', 'Progressive Social Movement', 'Democratic Left Movement', 'Shining Path', 'Revolutionary Democratic Action', 'Revolutionary Vanguard (Politico-Military)', 'Independent Civic Union', 'Revolutionary Vanguard', 'Possible Peru', 'People on the March', 'National Union', 'New Left Movement', 'Popular Democratic Unity', 'With Force Peru', 'Decentralist Party', 'Independent Civic Movement', 'Democrat Party', 'Constitutional Party', 'Center Front', 'Labour Party of Peru', 'National Restoration', 'Peruvian Humanist Party', 'Decentralization Coalition', 'National Renewal Movement', 'Peruvian Democratic Union', "And It's Called Peru", 'National Democratic Front', 'Democratic Vanguard Party', 'Left Socialist Accord', 'Andean Renaissance', 'Alliance for the Future'}
            Answers = 137, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.040s]
          Answers = 137, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.040s]
        Checking schema 40 / 229: {
          [('Main', '==', 'm.016wzw', ['sports.sport_country.multi_event_tournaments_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'1991 Pan American Games'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 41 / 229: {
          [('Main', '==', 'm.03rrdb', ['soccer.football_team.current_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rrdb fb:soccer.football_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rrdb fb:soccer.football_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 42 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03rrdb fb:sports.sports_team.founded ?o1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 WHERE { fb:m.03rrdb fb:sports.sports_team.founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'1922'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 43 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rrdb fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rrdb fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 44 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rrdb fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rrdb fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Football'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 45 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.arena_stadium'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rrdb fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rrdb fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Estadio Nacional'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 46 / 229: {
          [('Main', '==', 'm.016wzw', ['base.popstra.celebrity.insult_victim', 'base.popstra.public_insult.perpetrator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:base.popstra.celebrity.insult_victim ?o1 . ?o1 fb:base.popstra.public_insult.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:base.popstra.celebrity.insult_victim ?o1 . ?o1 fb:base.popstra.public_insult.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Cameron Diaz'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 47 / 229: {
          [('Main', '==', 'm.016wzw', ['base.popstra.celebrity.insult_victim', 'base.popstra.public_insult.victim'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:base.popstra.celebrity.insult_victim ?o1 . ?o1 fb:base.popstra.public_insult.victim ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:base.popstra.celebrity.insult_victim ?o1 . ?o1 fb:base.popstra.public_insult.victim ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 48 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 54
            Final Answer: {'2657', '1815', '2622', '2466', '1514', '9929439', '2168', '1318', '2255', '1051', '2816', '2340', '2724', '2507', '1946', '2079', '2124', '1902', '2755', '1146', '1213', '1858', '1247', '1772', '2586', '4500000', '2660', '1282', '1114', '1728', '1990', '1179', '2876', '1556', '2907', '2212', '1598', '1685', '1641', '2424', '2382', '1433', '2035', '1082', '2939', '2846', '1355', '2298', '2691', '1394', '2547', '2786', '1473', '1021'}
            Answers = 54, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 54, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 49 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 15
            Final Answer: {'1930', '1936', '1980', '1230', '1776', '1920', '1280', '2030', '1570', '1120', '1770', '1910', '1250', '1870', '1100'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 50 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 8
            Final Answer: {'-724999', '-36000', '-624999', '-300000', '-80000', '0', '-350000', '-180000'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 51 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 40
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '1974', '1988', '1972', '1979', '1993', '2009', '1982', '2006', '2004', '1997', '2002', '1975', '1990', '1980', '2007', '1985', '1996', '1989', '1977', '1999', '1998', '2001', '1994', '2003', '1976', '1973', '1978', '1995', '1971', '1983', '1984', '2008', '1986'}
            Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 52 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 41
            Final Answer: {'645.238', '556.016', '657.258', '1105', '398.607', '527.019', '597.038', '444.338', '436.254', '681.582', '416.799', '538.357', '482.833', '583.173', '741.443', '531.546', '479.797', '549.483', '556.965', '1045', '972.482', '479.874', '593.393', '1135', '610.686', '706.947', '420.059', '1049', '472.873', '559.573', '838.862', '765.594', '556.712', '520.362', '551.22', '549.906', '504.951', '451.94', '572.252', '890.284', '803.758'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 53 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 36
            Final Answer: {'3140', '3230', '3130', '3280', '4600', '1016', '4610', '3320', '8280', '6820', '3340', '3860', '6030', '3550', '2880', '2770', '3790', '8070', '5530', '8230', '4860', '3190', '4790', '8790', '5100', '9440', '3170', '3050', '7620', '5290', '4280', '7160', '4120', '9320', '4640', '8390'}
            Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 54 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 40
            Final Answer: {'5.94739e+10', '6.92517e+10', '1.90029e+11', '6.16743e+10', '1.35532e+11', '5.64685e+10', '8.8786e+10', '1.50735e+11', '7.86447e+10', '9.82787e+10', '2.29773e+11', '2.41457e+11', '1.27417e+11', '2.98599e+11', '5.64686e+10', '4.78718e+10', '1.18292e+11', '7.28778e+10', '5.79822e+10', '6.11512e+10', '2.14743e+11', '6.9079e+10', '7.67356e+10', '2.35695e+11', '5.35222e+10', '1.23803e+11', '2.36699e+11', '6.80218e+10', '2.55447e+11', '2.77562e+11', '5.94738e+10', '2.01768e+11', '1.66227e+11', '1.42297e+11', '1.13561e+11', '7.05612e+10', '4.78721e+10', '1.15607e+11', '1.03891e+11', '2.71018e+11'}
            Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 55 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 53
            Final Answer: {'740.74', '903.22', '304.27', '968.6', '497.04', '2252', '4457.93', '276.3', '447.66', '595.13', '1212', '548.65', '8500', '6017.91', '4412.39', '380.63', '1029', '2880', '1174', '2304', '1043', '1083', '487.38', '641.64', '3817.12', '3312.37', '2559', '746.69', '2135', '252.15', '1195', '1367', '2056', '1918', '1599', '2021', '438.31', '968.05', '997.27', '1408', '915.6', '323.82', '1561', '5283.22', '2400', '2279', '922.27', '2262', '1515', '595.04', '504.15', '890.13', '2060'}
            Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 56 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'6.25065e+09', '3.45445e+10', '6.9725e+10', '6.13467e+10', '2.39053e+10', '1.53883e+11', '1.55193e+10', '2.06612e+10', '2.05766e+10', '5.67723e+10', '3.50547e+09', '5.32904e+10', '2.82276e+09', '6.02975e+09', '1.64134e+10', '3.6084e+10', '5.0261e+09', '2.50371e+09', '2.49668e+10', '1.21621e+10', '1.23756e+10', '5.36741e+10', '1.91299e+10', '4.24138e+09', '1.07233e+11', '1.98455e+10', '2.62944e+10', '5.58761e+10', '2.48174e+10', '3.48347e+10', '1.79775e+10', '5.94705e+09', '5.58398e+09', '1.26923e+11', '1.76662e+11', '7.23514e+09', '5.15095e+10', '3.19962e+09', '9.23038e+10', '1.55426e+10', '1.3491e+10', '1.88384e+10', '5.92229e+10', '4.491e+10', '7.93851e+10', '5.39358e+10', '1.4231e+10', '1.26823e+11', '8.06977e+09', '5.67517e+10', '8.94574e+09', '1.07028e+10'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 57 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'3.245e+08', '460470000', '2785', '-123860000', '536830000', '1583', '650660000', '665100000', '455200000', '382550000', '588230000', '471860000', '432280000', '623020000', '518450000', '2814', '556760000', '2331', '393230000', '545110000', '699540000', '773150000', '335700000', '346380000', '5.47e+08', '606980000', '379350000', '3.3933e+08', '508590000', '556900000', '305410000', '-76240000', '719730000', '514280000', '703560000', '33470000', '460450000', '429280000', '581030000', '461540000', '747480000', '2627', '-255920000', '537540000', '73620000', '327690000', '861800000', '442060000', '3.144e+08', '467740000', '488310000', '5.2237e+08'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 58 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 42
            Final Answer: {'2.08042e+10', '8.7428e+09', '4.18159e+10', '9.86492e+09', '1.76361e+10', '3.09117e+10', '2.88129e+10', '9.41657e+09', '3.2239e+10', '6.26382e+09', '9.32318e+09', '2.77054e+10', '3.73365e+10', '9.53408e+09', '1.23256e+10', '1.15102e+10', '2.04211e+10', '3.47196e+10', '3.05603e+10', '2.9705e+10', '2.65965e+10', '4.02344e+09', '3.01528e+10', '1.83805e+10', '1.5046e+10', '3.58531e+09', '2.9033e+10', '3.40974e+09', '1.87258e+10', '2.02077e+10', '1.08711e+10', '2.95085e+10', '2.36502e+10', '4.48717e+10', '0', '2.93404e+10', '1.305e+10', '3.17326e+10', '7.72508e+09', '5.38054e+09', '2.92942e+10', '2.841e+10'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 59 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 10
            Final Answer: {'0.43', '0.99', '0.48', '1.41', '0.33', '0.76', '0.86', '0.54', '1.1', '0.32'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 60 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 7
            Final Answer: {'-5.42538e+09', '-3.46653e+09', '-2.57872e+09', '-8.1193e+09', '-6.01994e+09', '-6.18785e+09', '-8.18874e+09'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 61 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'6.515', '3.514', '6.415', '2.929', '2.993', '2.501', '4.25', '6.684', '6.073', '2.651', '6.86', '4.144', '2.821', '6.307', '2.774', '6.192', '4.729', '2.691', '2.576', '5.009', '4.475', '4.36', '5.702', '3.142', '5.153', '6.605', '3.064', '6.75', '6.872', '3.617', '4.866', '2.538', '5.952', '2.872', '5.828', '6.836', '3.226', '5.572', '6.876', '3.933', '4.038', '5.297', '5.437', '2.464', '3.317', '3.413', '2.731', '2.613', '3.828', '4.598', '3.722', '6.8'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 62 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 53
            Final Answer: {'50.655', '59.42', '56.394', '72.467', '74', '73.976', '71.359', '62.398', '73.05', '54.948', '63.522', '57.653', '65.55', '66.509', '58.83', '64.568', '49.194', '64.054', '70.931', '50.141', '57.043', '49.666', '53.368', '58.242', '48.704', '68.492', '48.187', '61.813', '72.772', '73.543', '54.164', '73.765', '71.759', '67.485', '69.001', '67.985', '52.597', '69.999', '66.028', '72.129', '73.306', '70.476', '60.618', '55.696', '60.016', '66.993', '47.643', '51.878', '62.969', '65.064', '69.505', '61.219', '51.23'}
            Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 63 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 50
            Final Answer: {'2005', '1992', '1981', '2000', '1991', '1974', '1986', '1988', '1972', '1979', '1963', '1964', '1993', '2009', '1960', '1982', '1962', '2006', '2004', '1997', '1968', '2002', '1990', '1975', '1980', '1985', '1961', '2007', '1996', '1989', '1977', '1999', '1970', '1998', '1966', '2001', '1994', '1976', '1973', '1995', '2003', '1978', '1967', '1965', '2008', '1971', '1983', '1984', '1969', '1987'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 64 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 54
            Final Answer: {'2005', '1992', '1981', '2000', '1991', '2010', '1974', '2011', '1986', '1876', '1988', '1972', '1979', '1963', '1993', '1964', '2009', '1962', '1982', '1960', '2006', '2004', '1997', '1968', '2002', '1990', '1975', '2007', '1980', '1961', '1985', '1996', '1989', '1977', '1998', '1999', '1970', '2001', '1966', '2003', '1994', '1973', '1908', '1978', '1976', '1967', '1965', '1995', '2008', '1971', '1983', '1984', '1969', '1987'}
            Answers = 54, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 54, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 65 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 24
            Final Answer: {'2005', '1992', '2000', '1991', '2010', '2011', '1993', '2009', '2006', '2004', '1997', '2002', '1990', '2007', '1985', '1996', '1989', '1999', '1998', '2001', '2003', '1994', '1995', '2008'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 66 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 11
            Final Answer: {'2005', '1965', '1975', '1985', '1980', '1990', '2000', '2010', '1960', '1970', '1995'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 67 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:25] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Electricity consumption per capita, World Development Indicators and Global Development Finance, World Bank', 'Electricity consumption per capita, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 68 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 69 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 70 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 71 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 72 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 73 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 74 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 75 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 76 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'GNI per capita in PPP dollars, World Development Indicators, World Bank', 'GNI per capita in PPP dollars, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 77 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Gross National Income in PPP dollars, World Development Indicators and Global Development Finance, World Bank', 'Gross National Income in PPP dollars, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 78 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'GDP per capita (current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 79 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Gross Domestic Product'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 80 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Aid flows at constant US$, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 81 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Debt stock, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 82 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Pump price for fuel, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 83 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Foreign direct investment, net (BoP, current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 84 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Gross savings (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 85 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Population Growth Rate, World Development Indicators and Global Development Finance, World Bank', 'Population growth rate, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 86 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Military expenditure as percentage of GDP, World Development Indicators, World Bank', 'Military expenditure as percentage of GDP, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 87 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'GDP growth rate, World Development Indicators, World Bank', 'World Bank, World Development Indicators, GDP Growth Rate'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 88 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Interest rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 89 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Total debt service (% of exports of goods, services and income), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 90 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Proportion of seats held by women in national parliaments (%), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 91 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'GDP production (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 92 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.child_labor_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Children at work (% of children ages 7-14), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 93 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Merchandise trade (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 94 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Inflation, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 95 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Labor participation rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 96 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Market capitalization of listed companies (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 97 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Prevalence of undernourishment (% of population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 98 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'High-technology exports (% of manufactured exports), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 99 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Health expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Current: 100 / 229
        Checking schema 100 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Literacy rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 101 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Internet users as percentage of population, World Development Indicators, World Bank', 'Internet users as percentage of population, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 102 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'GDP expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 103 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Part time employment, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 104 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Emigration rate of tertiary educated (% of total tertiary educated population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 105 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'2005', '1992', '1981', '2000', '1991', '2010', '1974', '2011', '1986', '1988', '1972', '1979', '1963', '1964', '1993', '2009', '1960', '1962', '1982', '2006', '1969', '2004', '1997', '1968', '2002', '1961', '1985', '2007', '1980', '1990', '1975', '1996', '1989', '1977', '1998', '1970', '1999', '2001', '1966', '2003', '1994', '1973', '1976', '1978', '1995', '1967', '1965', '1971', '1983', '1984', '2008', '1987'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 106 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'2005', '1992', '1981', '2000', '1991', '2010', '1974', '2011', '1986', '1988', '1972', '1979', '1963', '1964', '1993', '2009', '1982', '1960', '1962', '2006', '2004', '1997', '1968', '2002', '1990', '2007', '1961', '1975', '1985', '1980', '1996', '1989', '1977', '1998', '1970', '1999', '2001', '1966', '1994', '1976', '2003', '1978', '1973', '1995', '1967', '1965', '2008', '1971', '1983', '1984', '1969', '1987'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 107 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 51
            Final Answer: {'1.35776', '1.17082', '1.12378', '1.03572', '0.976208', '1.39537', '1.37842', '0.980089', '1.45044', '1.26693', '1.00267', '0.945421', '1.36022', '1.0281', '1.00235', '1.04347', '0.904016', '0.846002', '1.02287', '1.54486', '1.02509', '1.09768', '1.15226', '1.12568', '1.37272', '0.823183', '1.08792', '1.30399', '1.11107', '1.19316', '1.42411', '1.45014', '0.922963', '1.36797', '1.45992', '1.20723', '1.1627', '1.10078', '1.34865', '1.44968', '1.26842', '1.44212', '1.17148', '0.992562', '1.10877', '1.30352', '1.32166', '1.64628', '0.948161', '1.10039', '1.00474'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 108 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 40
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '1974', '1988', '1972', '1979', '1993', '2009', '1982', '2006', '2004', '1997', '2002', '1975', '1985', '1980', '2007', '1990', '1996', '1989', '1977', '1999', '1998', '2001', '2003', '1976', '1973', '1995', '1978', '1994', '1971', '1983', '1984', '2008', '1986'}
            Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 109 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Energy use per capita, World Development Indicators, World Bank', 'Energy use per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 110 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Population'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 111 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Armed forces personnel, total, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 112 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Net migration, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 113 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 32
            Final Answer: {'2005', '1992', '1981', '2000', '1991', '2010', '1986', '2011', '1988', '1993', '2009', '1982', '2006', '2004', '1997', '2002', '1990', '1985', '1980', '2007', '1996', '1989', '1999', '1998', '2001', '1994', '2003', '1995', '1983', '1984', '2008', '1987'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 114 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 32
            Final Answer: {'2005', '1992', '1981', '2000', '1991', '2010', '1986', '2011', '1988', '1993', '2009', '1982', '2006', '2004', '1997', '2002', '1990', '1985', '1980', '2007', '1996', '1989', '1998', '1999', '2001', '2003', '1994', '1995', '1983', '1984', '2008', '1987'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 115 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '1974', '2011', '1988', '1972', '1979', '1963', '1964', '1993', '2009', '1962', '1982', '1960', '2006', '1969', '2004', '1997', '1968', '2002', '1990', '2007', '1980', '1975', '1961', '1985', '1996', '1989', '1977', '1999', '1970', '1998', '1966', '2001', '1994', '1976', '2003', '1978', '1995', '1973', '1967', '1965', '1971', '1983', '1984', '2008', '1986'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 116 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '1974', '2011', '1988', '1972', '1979', '1963', '1993', '1964', '2009', '1960', '1962', '1982', '2006', '1969', '2004', '1997', '1968', '2002', '1990', '2007', '1961', '1980', '1975', '1985', '1996', '1989', '1977', '1999', '1998', '1970', '1966', '2001', '2003', '1976', '1973', '1995', '1994', '1978', '1967', '1965', '1971', '1983', '1984', '2008', '1986'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 117 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '1974', '2011', '1988', '1972', '1979', '1963', '1993', '1964', '2009', '1962', '1982', '1960', '2006', '1969', '2004', '1997', '1968', '2002', '1975', '2007', '1990', '1961', '1985', '1980', '1996', '1989', '1977', '1999', '1998', '1970', '2001', '1966', '2003', '1976', '1978', '1994', '1973', '1995', '1967', '1965', '1971', '1983', '1984', '2008', '1986'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 118 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 42
            Final Answer: {'2005', '1992', '1981', '2000', '1991', '2010', '1974', '2011', '1986', '1988', '1972', '1979', '1993', '2009', '1982', '2006', '2004', '1997', '2002', '1975', '1985', '1980', '1990', '2007', '1996', '1989', '1977', '1999', '1998', '1970', '2001', '2003', '1978', '1976', '1995', '1973', '1994', '1971', '1983', '1984', '2008', '1987'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 119 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 10
            Final Answer: {'1992', '2012', '2004', '2002', '2000', '2010', '1995', '1998', '2006', '2008'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 120 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 7
            Final Answer: {'2005', '2007', '2010', '2009', '2006', '2011', '2008'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 121 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 35
            Final Answer: {'16.14', '17.85', '18.35', '7.55', '19.16', '20.67', '20.03', '16.22', '16.49', '27.03', '27.28', '17.24', '16.2', '28.05', '20.48', '23.44', '3.77', '18.16', '15.89', '17', '19.67', '25.07', '16.95', '10.29', '22.69', '22.66', '15.99', '28.16', '12.19', '18.33', '23.75', '12.47', '18.73', '15.82', '15.96'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 122 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 45
            Final Answer: {'1.93', '2.47', '2.32', '1.16', '2.8', '2.61', '2.66', '1.71', '2.36', '2.22', '2.28', '1.58', '1.66', '2.85', '2.77', '2.86', '1.41', '1.75', '2.18', '1.08', '1.79', '2.76', '2.54', '1.2', '1.33', '2.41', '2.78', '2.12', '1.26', '2.06', '2.79', '2.72', '1.05', '2.7', '1.83', '1.88', '2.74', '2.25', '2.89', '1.99', '1.11', '1.07', '1.49', '2.83', '2.9'}
            Answers = 45, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 45, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 123 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 25
            Final Answer: {'1.27249', '1.94815', '1.18735', '1.16771', '1.09276', '2.03509', '1.77517', '0.082676', '1.45995', '1.16467', '2.01291', '1.49361', '1.86558', '1.78789', '1.75192', '1.9448', '1.09332', '0.262337', '1.15418', '1.68435', '1.44875', '1.76976', '1.32702', '1.4279', '1.34888'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 124 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 55
            Final Answer: {'4.03228', '8.90528', '5.02018', '0.282736', '3.7747', '0.214895', '6.82669', '-11.7', '5.2', '4.93924', '7.35005', '-11.8', '-0.657951', '4.18089', '8.39488', '2.8', '5.83688', '1.96072', '-0.428767', '9.80337', '-0.6', '8.82341', '-8.7', '2.1659', '0.914131', '6.8073', '4.76499', '3.07754', '2.51822', '6.86406', '8.34019', '9.25007', '10', '8', '5.7964', '4.97673', '8.90562', '0.354541', '3.40156', '0.835134', '0.402917', '7.18059', '2.95059', '2.86978', '7.7405', '3.72055', '12.8216', '3.79465', '8.60891', '8.78497', '6.60028', '6.91233', '-5.14324', '9.80371', '5.37567'}
            Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 125 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 24
            Final Answer: {'3.54', '3.12', '11.8', '10.2', '3.23', '7.55', '2.33', '10.9', '1.54', '15.46', '2.59', '9.63', '3.51', '9.9', '1135', '2439', '170.54', '59.65', '3.21', '9.8', '2.83', '10.35', '161.78', '2.42'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 126 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 35
            Final Answer: {'19.84', '13.13', '30.35', '21.66', '16.98', '24.13', '30.16', '13.73', '59.4', '17.4', '6.48', '34.39', '14.56', '50.35', '62.61', '27.08', '37.27', '23.31', '21.49', '38.18', '36.09', '9.68', '27.86', '34.22', '8.95', '18.43', '27.94', '26.24', '30.56', '11.05', '13.67', '28.06', '48.97', '44.82', '53.6'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 127 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 7
            Final Answer: {'17.5', '5.6', '21.5', '18.3', '10.8', '27.5', '29.2'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 128 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 44
            Final Answer: {'9.21', '7.23', '7.85', '8.5', '8.04', '8.78', '15.92', '11.21', '6.43', '7.63', '18.68', '18.6', '16.49', '9.03', '21.07', '18.85', '6.78', '16.78', '11.68', '17.95', '18.34', '13.12', '20.81', '16.37', '15.65', '6.95', '8.45', '7.29', '10.3', '8.54', '8.76', '7.21', '9.22', '6.99', '18.12', '8.66', '8.98', '8.25', '15.3', '18.02', '18.7', '17.8', '7.32', '19.95'}
            Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 129 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.child_labor_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'42.2', '24.1'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 130 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 51
            Final Answer: {'25.62', '47.64', '17.78', '21.89', '25.11', '24.63', '25.69', '23.4', '23.69', '25.34', '46.95', '27.38', '23.09', '20.52', '27.1', '19.46', '26.79', '42.76', '42.41', '27.79', '37.63', '27.44', '25.19', '26.05', '31.32', '24.78', '48.07', '33.65', '26.19', '26.71', '22.67', '25.55', '34.21', '19.9', '27.07', '22.49', '20.64', '22.23', '32.86', '34.17', '44.97', '38.47', '29.39', '32.42', '31.33', '22.3', '28.53', '26.57', '23.65', '24.98', '24.52'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 131 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 51
            Final Answer: {'409.53', '1.62', '33.5', '1.53', '2.26', '3.66', '64.52', '111.11', '8.79', '5.88', '3.47', '19.16', '11.13', '9.74', '7.25', '16.4', '1.98', '5.56', '5.79', '667.02', '7481.66', '66.78', '16.78', '23.74', '1.78', '2', '73.53', '162.75', '3398.68', '3.76', '10', '0.19', '59.16', '8.56', '6.56', '38.18', '23.35', '2.94', '11.54', '110.53', '77.99', '5.98', '7.02', '6.05', '6.65', '48.58', '57.63', '75.47', '3.37', '85.87', '9.8'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 132 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 21
            Final Answer: {'41.27', '42.61', '42.7', '41.87', '42.28', '44.7', '37.34', '43.82', '42.45', '44.56', '37.28', '37.69', '40.12', '38.9', '42.84', '42.39', '36.52', '41.23', '36.91', '44.36', '41.24'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 133 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 23
            Final Answer: {'45.34', '98.56', '29.69', '22', '26', '4.52', '23.54', '54.96', '7.29', '28.85', '14.67', '20.64', '64.99', '18.21', '43.84', '19.82', '26.17', '3.09', '44.84', '3.24', '21.98', '64.63', '20.52'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 134 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 5
            Final Answer: {'15.9', '22.5', '32.6', '21.4', '11.2'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 135 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 20
            Final Answer: {'4.38', '2.49', '4.29', '2.64', '2.41', '4.55', '5.82', '1.43', '6.22', '2.89', '6.59', '3.46', '2.72', '3.23', '2.51', '2.61', '4.49', '4.04', '2.75', '1.35'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 136 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:26] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 15
            Final Answer: {'5.75', '4.5', '4.69', '5.34', '4.51', '4.37', '4.86', '5.08', '4.68', '4.46', '4.52', '4.88', '4.35', '4.81', '4.48'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 137 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 6
            Final Answer: {'89.59', '87.91', '87.67', '81.92', '88.7', '87.15'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 138 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 20
            Final Answer: {'0.033412', '20.7', '30.57', '11.6', '1.9525', '25.2', '8.96695', '1.19038', '34.77', '0.008505', '17.1', '0.246233', '3.07643', '0.40343', '36.5', '0', '7.57876', '14.1', '31.4'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 139 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'-7.43', '-1.23', '-8.18', '1.93', '-3.77', '8.67', '0.67', '3.92', '-1.43', '-6.82', '-2.42', '-0.06', '0.66', '5.92', '-1.75', '0.18', '-4.22', '-4.85', '-0.66', '-1.84', '3.58', '-2.05', '3.94', '-0.29', '-0.08', '2.98', '-3.41', '-0.79', '-4.88', '-3.02', '-5.4', '-3.6', '0.13', '3.64', '2.72', '1.89', '8.65', '-2.15', '-11.09', '0.21', '-2.08', '-3.45', '-0.96', '6.66', '-3.83', '-3.22', '6.51', '-3.7', '-2.14', '-5.66', '-1.38', '-2.84'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 140 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 10
            Final Answer: {'26', '27.7', '16.5', '24', '18.5', '18.8', '16.8', '19.4', '20.5', '15.1'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 141 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'5.83', '5.96'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 142 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 35
            Final Answer: {'2005', '1992', '1981', '2000', '1991', '2010', '2011', '1986', '1988', '1979', '1993', '2009', '1982', '2006', '2004', '1997', '2002', '1990', '1985', '2007', '1980', '1996', '1989', '1977', '1999', '1998', '2001', '1994', '2003', '1978', '1995', '1983', '1984', '2008', '1987'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 143 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '1974', '2011', '1988', '1972', '1979', '1963', '1964', '1993', '2009', '1982', '1960', '1962', '2006', '2004', '1997', '1968', '2002', '1961', '1985', '2007', '1980', '1975', '1990', '1996', '1989', '1977', '1999', '1970', '1998', '1966', '2001', '2003', '1976', '1978', '1994', '1995', '1973', '1967', '1965', '2008', '1971', '1983', '1984', '1969', '1986'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 144 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 23
            Final Answer: {'2005', '1992', '2000', '1991', '2010', '2011', '1993', '2009', '2006', '2004', '1997', '2002', '1990', '2007', '1996', '1989', '1999', '1998', '2001', '1994', '2003', '1995', '2008'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 145 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 51
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '1974', '2011', '1988', '1972', '1979', '1963', '1964', '1993', '2009', '1962', '1982', '2006', '2004', '1997', '1968', '2002', '1975', '1961', '1985', '2007', '1980', '1990', '1996', '1989', '1977', '1999', '1970', '1998', '2001', '1966', '2003', '1978', '1973', '1995', '1976', '1994', '1967', '1965', '2008', '1971', '1983', '1984', '1969', '1986'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 146 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 24
            Final Answer: {'2005', '1992', '2000', '1991', '2010', '2011', '1988', '1993', '2009', '2006', '2004', '1997', '2002', '1990', '2007', '1996', '1989', '1998', '1999', '2001', '1994', '2003', '1995', '2008'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 147 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 35
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '2011', '1988', '1979', '1993', '2009', '1982', '2006', '2004', '1997', '2002', '1990', '1985', '1980', '2007', '1996', '1989', '1977', '1998', '1999', '2001', '2003', '1978', '1994', '1995', '1983', '1984', '2008', '1986'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 148 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 16
            Final Answer: {'2005', '2012', '1997', '2002', '2004', '1990', '2007', '2011', '2001', '2010', '2009', '1998', '1999', '2006', '2003', '2008'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 149 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 46
            Final Answer: {'2005', '1992', '2000', '1991', '2010', '1974', '1986', '2011', '1988', '1972', '1979', '1963', '1993', '1964', '2009', '1960', '1962', '2006', '2004', '1997', '1968', '2002', '1961', '2007', '1990', '1975', '1996', '1989', '1977', '1999', '1970', '1998', '1966', '2001', '1994', '1978', '1973', '1995', '2003', '1976', '1967', '1965', '2008', '1971', '1969', '1987'}
            Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 150 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.child_labor_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.child_labor_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'2007', '2000'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 151 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'2005', '1992', '1981', '2000', '1991', '2010', '1974', '1986', '2011', '1988', '1972', '1979', '1963', '1964', '1993', '2009', '1982', '1962', '1960', '2006', '1969', '2004', '1997', '1968', '2002', '1990', '1985', '1980', '2007', '1975', '1961', '1996', '1989', '1977', '1998', '1999', '1970', '1966', '2001', '2003', '1978', '1973', '1995', '1994', '1976', '1967', '1965', '1971', '1983', '1984', '2008', '1987'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 152 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 51
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '1974', '2011', '1988', '1972', '1979', '1963', '1964', '1993', '2009', '1982', '1962', '2006', '1969', '2004', '1997', '1968', '2002', '1975', '2007', '1980', '1985', '1990', '1961', '1996', '1989', '1977', '1998', '1970', '1999', '1966', '2001', '1994', '2003', '1976', '1978', '1973', '1995', '1967', '1965', '1971', '1983', '1984', '2008', '1986'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 153 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 22
            Final Answer: {'2005', '1992', '2000', '1991', '2010', '2011', '1993', '2009', '2006', '2004', '1997', '2002', '1990', '2007', '1996', '1998', '1999', '2001', '2003', '1994', '1995', '2008'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 154 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 23
            Final Answer: {'2005', '1992', '2000', '1991', '2010', '2011', '1993', '2009', '2006', '2004', '1997', '2002', '1990', '2007', '1996', '1989', '1998', '1999', '2001', '2003', '1994', '1995', '2008'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 155 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 5
            Final Answer: {'2005', '2000', '1991', '2011', '2008'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 156 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 20
            Final Answer: {'2005', '1992', '1994', '1997', '2004', '2002', '2011', '2007', '2000', '1996', '1993', '2006', '2010', '1995', '2009', '1999', '1998', '2001', '2003', '2008'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 157 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 17
            Final Answer: {'2005', '1997', '2004', '2002', '2008', '2007', '2000', '2006', '2010', '1996', '2009', '1998', '1999', '2001', '2003', '2011', '1995'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 158 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 6
            Final Answer: {'2005', '1981', '2007', '1993', '2006', '2004'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 159 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 19
            Final Answer: {'2005', '2004', '1997', '2002', '2011', '1990', '2007', '2000', '2010', '1996', '1995', '2006', '2009', '1999', '1998', '2001', '2003', '1994', '2008'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 160 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '1974', '2011', '1988', '1972', '1979', '1963', '1964', '1993', '2009', '1960', '1982', '1962', '2006', '1969', '2004', '1997', '1968', '2002', '1990', '1961', '1975', '2007', '1985', '1980', '1996', '1989', '1977', '1998', '1970', '1999', '2001', '1966', '1994', '1976', '2003', '1995', '1978', '1973', '1967', '1965', '1971', '1983', '1984', '2008', '1986'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 161 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 11
            Final Answer: {'2005', '2004', '2002', '2011', '2007', '2006', '2010', '2009', '2001', '2003', '2008'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 162 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'1990', '2000'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 163 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Fertility Rate'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 164 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 3
            Final Answer: {'Life expectancy, World Development Indicators, World Bank', 'World Bank, World Development Indicators, Life Expectancy', 'World Bank, World Development Indicators, Population'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 165 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'CO2 emissions per capita, World Development Indicators, World Bank', 'CO2 emissions per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 166 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 44
            Final Answer: {'644.242', '458.755', '543.666', '541.39', '481.074', '465.993', '411.761', '472.644', '449.708', '651.233', '528.516', '571.151', '639.251', '625.474', '443.417', '472.574', '654.882', '635.283', '432.331', '472.606', '543.681', '431.406', '508.912', '431.642', '528.553', '683.778', '472.755', '495.152', '663.553', '475.394', '681.64', '438.792', '448.883', '682.879', '550.449', '550.34', '667.131', '446.714', '523.2', '675.799', '460.449', '432.371', '570.547', '673.179'}
            Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 167 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.measurement_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 51
            Final Answer: {'2005', '1992', '1981', '1987', '2000', '1991', '2010', '1974', '1988', '1972', '1979', '1963', '1964', '1993', '2009', '1982', '1960', '1962', '2006', '1969', '2004', '1997', '1968', '2002', '1990', '1975', '1980', '1985', '2007', '1961', '1996', '1989', '1977', '1999', '1970', '1998', '2001', '1966', '1994', '1976', '1973', '1995', '1978', '2003', '1967', '1965', '1971', '1983', '1984', '2008', '1986'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 168 / 229: {
          [('Main', '==', 'm.016wzw', ['user.robert.earthquakes.earthquake_epicenter.earthquakes_centered_here', 'user.robert.earthquakes.earthquake_nearest_location.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:user.robert.earthquakes.earthquake_epicenter.earthquakes_centered_here ?o1 . ?o1 fb:user.robert.earthquakes.earthquake_nearest_location.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:user.robert.earthquakes.earthquake_epicenter.earthquakes_centered_here ?o1 . ?o1 fb:user.robert.earthquakes.earthquake_nearest_location.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 169 / 229: {
          [('Main', '==', 'm.016wzw', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 170 / 229: {
          [('Main', '==', 'm.016wzw', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 171 / 229: {
          [('Main', '==', 'm.016wzw', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 172 / 229: {
          [('Main', '==', 'm.016wzw', ['organization.organization_member.member_of', 'organization.organization_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.to ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'1939'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 173 / 229: {
          [('Main', '==', 'm.016wzw', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 20
            Final Answer: {'Spanish American wars of independence', 'Battle of Yungay', 'War of the Pacific', 'Battle of Tarqui', 'War of the Confederation', '2009 Peruvian political crisis', 'Ecuadorian–Peruvian territorial dispute of 1857–1860', 'Cenepa War', 'Paquisha War', 'Chincha Islands War', 'Ecuadorian–Peruvian War', 'Battle of Buin', 'Battle of Pichincha', 'Battle of Ayacucho', 'Battle of Guayaquil', 'Operation Chavín de Huántar', 'Peruvian War of Independence', 'Internal conflict in Peru', 'Battle of Pacocha', 'Battle of Ingavi'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 174 / 229: {
          [('Main', '==', 'm.016wzw', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 3
            Final Answer: {'Bolivia', 'Ronda Campesina'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 175 / 229: {
          [('Main', '==', 'm.016wzw', ['military.military_combatant.military_commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'War of the Pacific'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 176 / 229: {
          [('Main', '==', 'm.016wzw', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.045s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.045s]
        Checking schema 177 / 229: {
          [('Main', '==', 'm.016wzw', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 20
            Final Answer: {'Sebastian Jahnsen Madico', 'Ornella Oettl Reyes', 'Claudia Rivero', 'Rodrigo Pacheco Carrillo', 'Eduardo Mendizábal', 'Nicolas Pacheco Espinosa', 'Roberto Carcelen', 'Gladys Tejeda', 'Silvana Saldarriaga', 'Peter López', 'Victor Aspillaga Alayza', 'Andrea Cedron Rodriguez', 'Ines Melchor', 'Mario Bazan', 'Wilma Arizapana', 'Mauricio Fiol Villanueva', 'Raul Pacheco', 'Paloma Schmidt', 'Manfred Oettl Reyes', 'Juan Postigos'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 178 / 229: {
          [('Main', '==', 'm.016wzw', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 179 / 229: {
          [('Main', '==', 'm.016wzw', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 6
            Final Answer: {'2000 Summer Olympics', '1984 Summer Olympics', '1988 Summer Olympics', '1948 Summer Olympics', '1992 Summer Olympics', '1996 Summer Olympics'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 180 / 229: {
          [('Main', '==', 'm.016wzw', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 6
            Final Answer: {"Volleyball at the 1988 Summer Olympics – Women's tournament", 'Shooting at the 1984 Summer Olympics - Trap', "Shooting at the 1948 Summer Olympics - Men's 50 metre Pistol", 'Shooting at the 1992 Summer Olympics – Skeet', "Volleyball at the 2000 Summer Olympics – Women's tournament", "Volleyball at the 1996 Summer Olympics – Women's volleyball"}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 181 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Consumer price index (2005 = 100), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 182 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 183 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 184 / 229: {
          [('Main', '==', 'm.016wzw', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Ollanta Humala'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 185 / 229: {
          [('Main', '==', 'm.016wzw', ['organization.organization_member.member_of', 'organization.organization_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 3
            Final Answer: {'1943', '1920', '1945'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 186 / 229: {
          [('Main', '==', 'm.016wzw', ['military.military_combatant.military_commanders', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 187 / 229: {
          [('Main', '==', 'm.016wzw', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'3619'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 188 / 229: {
          [('Main', '==', 'm.016wzw', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 14
            Final Answer: {'Cross-country skiing', 'Freestyle wrestling', 'Badminton', 'Road running', 'Sailing', 'Rowing', 'Shooting sport', 'Taekwondo', 'Weightlifting', 'Greco-Roman wrestling', 'Judo', 'Track and field athletics', 'Alpine skiing', 'Swimming'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 189 / 229: {
          [('Main', '==', 'm.016wzw', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 190 / 229: {
          [('Main', '==', 'm.016wzw', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Silver medal', 'Gold medal'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 191 / 229: {
          [('Main', '==', 'm.016wzw', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 192 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 193 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_since'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'1821'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 194 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 52
            Final Answer: {'2005', '1992', '1981', '2000', '1991', '2010', '1974', '2011', '1986', '1988', '1972', '1979', '1963', '1993', '1964', '2009', '1960', '1962', '1982', '2006', '2004', '1997', '1968', '2002', '1975', '1985', '1980', '1961', '1990', '2007', '1996', '1989', '1977', '1999', '1970', '1998', '2001', '1966', '2003', '1978', '1973', '1994', '1995', '1976', '1967', '1965', '2008', '1971', '1983', '1984', '1969', '1987'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 195 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.index_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 24
            Final Answer: {'90.86', '102', '92.84', '47.39', '94.93', '103.82', '109.82', '31.9', '87.57', '118.65', '92.66', '65.17', '100', '0', '72.69', '113.05', '84.63', '58.64', '18.38', '98.41', '78.91', '114.78', '3.61', '0.05'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 196 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 197 / 229: {
          [('Main', '==', 'm.016wzw', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjusted_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 51
            Final Answer: {'2.73708e+10', '2.39247e+10', '3.86437e+10', '2.85151e+10', '5.83475e+10', '2.48278e+10', '3.57463e+10', '1.90229e+10', '5.32904e+10', '2.20718e+10', '6.54327e+10', '3.8047e+10', '8.43024e+10', '8.50288e+10', '1.97306e+10', '5.60859e+10', '3.60901e+10', '3.49182e+10', '4.30883e+10', '3.09103e+10', '1.75585e+10', '3.68718e+10', '9.25069e+10', '7.67758e+10', '4.71305e+10', '3.67336e+10', '4.33947e+10', '3.37695e+10', '3.79252e+10', '4.1648e+10', '2.93334e+10', '6.12513e+10', '3.56028e+10', '2.49158e+10', '3.58474e+10', '4.83174e+10', '1.63563e+10', '7.04975e+10', '2.58613e+10', '3.97258e+10', '3.90924e+10', '4.71942e+10', '4.18994e+10', '5.34049e+10', '3.84631e+10', '5.12942e+10', '5.17631e+10', '5.16339e+10', '2.10329e+10', '4.36983e+10', '3.67137e+10'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 198 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:19:27] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'-11.2583'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 199 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'-75.1374'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Current: 200 / 229
        Checking schema 200 / 229: {
          [('Main', '==', 'm.016wzw', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 6
            Final Answer: {'Bolivia', 'Ecuador', 'Colombia', 'Brazil', 'Chile'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 201 / 229: {
          [('Main', '==', 'm.016wzw', ['user.robert.earthquakes.earthquake_epicenter.earthquakes_centered_here', 'user.robert.earthquakes.earthquake_nearest_location.earthquake'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:user.robert.earthquakes.earthquake_epicenter.earthquakes_centered_here ?o1 . ?o1 fb:user.robert.earthquakes.earthquake_nearest_location.earthquake ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:user.robert.earthquakes.earthquake_epicenter.earthquakes_centered_here ?o1 . ?o1 fb:user.robert.earthquakes.earthquake_nearest_location.earthquake ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru earthquake'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 202 / 229: {
          [('Main', '==', 'm.016wzw', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'2011'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 203 / 229: {
          [('Main', '==', 'm.016wzw', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 8
            Final Answer: {'Andean Community of Nations', 'United Nations Stabilisation Mission in Haiti', 'United Nations', 'Asia-Pacific Economic Cooperation', 'League of Nations', 'Union of South American Nations', 'World Bank', 'United Nations Relief and Rehabilitation Administration'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 204 / 229: {
          [('Main', '==', 'm.016wzw', ['military.military_combatant.military_commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 2
            Final Answer: {'Andrés Avelino Cáceres', 'Miguel Grau Seminario'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.037s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.037s]
        Checking schema 205 / 229: {
          [('Main', '==', 'm.016wzw', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 206 / 229: {
          [('Main', '==', 'm.016wzw', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'3401'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 207 / 229: {
          [('Main', '==', 'm.016wzw', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 3
            Final Answer: {'2010 Winter Olympics', '1948 Summer Olympics', '2012 Summer Olympics'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 208 / 229: {
          [('Main', '==', 'm.016wzw', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 32
            Final Answer: {'Fiorella Aita', 'Denisse Fajardo', 'Yulissa Zamudio', 'Leyla Chihuán', 'Milagros Moy', 'Miriam Gallardo', 'Elena Keldibekova', 'Milagros Uceda', 'Katherine Horny', 'Rosa Garcia', 'Gina Torrealva', 'Cenaida Uribe', 'Cecilia Tait', 'Yolanda Delgado', 'Gabriela Pérez del Solar', 'Janet Vasconzuelo', 'Luisa Cervera', 'Sonia Heredia', 'Francisco Boza', 'Sara Joya', 'Paola Ramos', 'Milagros Contreras', 'Edwin Vásquez', 'Alejandra de la Guerra', 'Juan Giha', 'Iris Falcón', 'Natalia Malaga', 'Milagros Camere', 'Marjorie Vilchez', 'Sandra Rodríguez', 'Diana Soto', 'Luren Baylon'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 209 / 229: {
          [('Main', '==', 'm.016wzw', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Flag of Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 210 / 229: {
          [('Main', '==', 'm.016wzw', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.016wzw fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'1825'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 211 / 229: {
          [('Main', '==', 'm.016wzw', ['location.country.national_anthem', 'government.national_anthem_of_a_country.anthem'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016wzw fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'National Anthem of Peru'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 212 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.roster', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 72
            Final Answer: {'Juan Cominges', 'Edwuin Gómez', 'Christofer Gonzáles', 'Néstor Duarte', 'Wilmer Aguirre', 'Christian Cueva', 'Giancarlo Carmona', 'William Chiroque', 'Hernán Rengifo', 'Paolo Hurtado', 'Raúl Fernández', 'Édson Uribe', 'Michael Guevara', 'Yordy Reyna', 'Juan Manuel Vargas', 'José Carvallo', 'Diego Penny', 'Aldo Corzo', 'José del Solar', 'Juan Morales', 'Jesús Álvarez', 'Álvaro Ampuero', 'Jaime Vásquez', 'Leao Butrón', 'Paolo Guerrero', 'Carlos Zambrano', 'Roberto Guizasola', 'Irven Ávila', 'Joel Pinto', 'André Carrillo', 'Ronald Quinteros', 'Renzo Sheput', 'Claudio Pizarro', 'Daniel Chávez', 'Carlos Fernández', 'Rafael Farfán', 'Christian Garcia', 'Raúl Ruidíaz', 'Juan Carlos Mariño', 'Paolo de la Haza', 'Josepmir Ballón', 'Luis Advíncula', 'Rinaldo Cruzado', 'Santiago Acasiete', 'Christian Ramos', 'Jefferson Farfán', 'Andy Pando', 'Walter Vílchez', 'Joel Sánchez', 'Carlos Lobatón', 'José Canova', 'Werner Schuler', 'John Galliquio', 'Paulo Albarracín', 'Salomón Libman', 'Aurelio Saco Vértiz', 'Renzo Revoredo', 'Luis García Uribe', 'Junior Ross', 'José Carlos Fernández', 'Carlos Zegarra', 'Jair Céspedes', 'Roberto Palacios', 'Alfredo Rojas', 'Yoshimar Yotún', 'Jhoel Herrera', 'Luis Alberto Ramírez', 'Antonio Gonzales', 'Osnar Noronha', 'Alberto Junior Rodríguez', 'Gianfranco Espinoza', 'Edwin Retamoso'}
            Answers = 72, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 72, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 213 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.roster', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 214 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.roster', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 16
            Final Answer: {'2005', '1992', '2012', '1997', '2004', '2001', '2007', '2010', '2009', '1999', '2013', '2006', '2003', '2011', '2008', '1986'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 215 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.coaches', 'sports.sports_team_coach_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rrdb fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.from ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.03rrdb fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 216 / 229: {
          [('Main', '==', 'm.03rrdb', ['soccer.football_team.league', 'soccer.football_league_participation.league'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:soccer.football_team.league ?o1 . ?o1 fb:soccer.football_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:soccer.football_team.league ?o1 . ?o1 fb:soccer.football_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'CONMEBOL'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 217 / 229: {
          [('Main', '==', 'm.03rrdb', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Peru national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 218 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.roster', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 2
            Final Answer: {'2001', '2012'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 219 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Peru national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 220 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.coaches', 'sports.sports_team_coach_tenure.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Peru national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 221 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.league', 'sports.sports_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Peru national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 222 / 229: {
          [('Main', '==', 'm.03rrdb', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rrdb fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.from ?o2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 WHERE { fb:m.03rrdb fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 223 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.roster', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 4
            Final Answer: {'Goalkeeper', 'Defender', 'Forward', 'Midfielder'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 224 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.coaches', 'sports.sports_team_coach_tenure.coach'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.coach ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.coach ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Sergio Markarián'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 225 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.coaches', 'sports.sports_team_coach_tenure.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.coaches ?o1 . ?o1 fb:sports.sports_team_coach_tenure.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Head coach'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 226 / 229: {
          [('Main', '==', 'm.03rrdb', ['sports.sports_team.league', 'sports.sports_league_participation.league'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Peruvian Football Federation'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 227 / 229: {
          [('Main', '==', 'm.03rrdb', ['soccer.football_team.league', 'soccer.football_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:soccer.football_team.league ?o1 . ?o1 fb:soccer.football_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:soccer.football_team.league ?o1 . ?o1 fb:soccer.football_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Peru national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 228 / 229: {
          [('Main', '==', 'm.03rrdb', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.manager'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.manager ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rrdb fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.manager ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rrdb'}
            Query return lines = 1
            Final Answer: {'Sergio Markarián'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        223 / 229 coarse schemas kept with ans_size > 0.
      } [3.596s]
      Coarse level ended, resulting in 223 schemas.
    } [3.938s]
    Type level searching (total types = 10): {
      Current: 0 / 223
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'government.government_agency'}]
[{'people.person'}]
[{'location.location'}]
[{'fictional_universe.fictional_character'}]
[{'sports.sports_team'}]
[{'food.beer'}]
[{'biology.animal_breed'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.government_office_or_title'}]
[{'government.government'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'olympics.olympic_games'}]
[{'film.film'}]
[{'location.citytown'}]
[{'type.int'}]
[{'finance.currency'}]
[{'book.newspaper'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'organization.organization'}]
[{'sports.multi_event_tournament'}]
[{'type.datetime'}]
[{'sports.sports_team_location'}]
[{'sports.sport'}]
[{'sports.sports_facility'}]
[{'base.popstra.public_insult'}, {'base.popstra.celebrity'}]
[{'base.popstra.public_insult'}, {'base.popstra.celebrity'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_metric_ton'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
      Current: 100 / 223
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_metric_ton'}, {'type.float'}]
[{'measurement_unit.dated_kgoe'}, {'type.datetime'}]
[{'measurement_unit.dated_kgoe'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_metric_ton'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_kgoe'}, {'type.float'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'user.robert.earthquakes.earthquake_nearest_location'}, {'user.robert.earthquakes.earthquake_epicenter'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_event_competition'}]
[{'measurement_unit.dated_index_value'}, {'dataworld.information_source'}]
[{'measurement_unit.adjusted_money_value'}, {'finance.currency'}]
[{'measurement_unit.adjusted_money_value'}, {'dataworld.information_source'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_sport'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_medal'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'measurement_unit.dated_index_value'}, {'type.datetime'}]
[{'measurement_unit.dated_index_value'}, {'type.float'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'user.robert.earthquakes.earthquake_nearest_location'}, {'user.robert.earthquakes.earthquake'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'military.military_command'}, {'military.military_commander'}]
      Current: 200 / 223
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_athlete'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'government.national_anthem_of_a_country'}, {'government.national_anthem'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_coach_tenure'}, {'type.datetime'}]
[{'soccer.football_league_participation'}, {'soccer.football_league'}]
[{'soccer.football_team_management_tenure'}, {'soccer.football_team'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_team_coach_tenure'}, {'sports.sports_team'}]
[{'sports.sports_league_participation'}, {'sports.sports_team'}]
[{'soccer.football_team_management_tenure'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_team_coach_tenure'}, {'sports.sports_team_coach'}]
[{'sports.sports_team_coach_tenure'}, {'sports.coaching_position'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
[{'soccer.football_league_participation'}, {'soccer.football_team'}]
[{'soccer.football_team_management_tenure'}, {'soccer.football_team_manager'}]
      3 typed schemas retrieved from 223 coarse schemas.
      Calculating F1 for 3 typed schemas: {
        Current: 0 / 3
        Checking schema 0 / 3: {
          [('Main', '==', 'm.016wzw', ['location.country.official_language']), ('Type', '==', 'language.human_language', ['type.object.type'])]
          var_types: [{'language.human_language'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.official_language ?o1 . ?o1 fb:type.object.type fb:language.human_language . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.official_language ?o1 . ?o1 fb:type.object.type fb:language.human_language . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 1
            Final Answer: {'Spanish Language'}
            Answers = 1, P = 1.000000, R = 0.166667, F1 = 0.285714
          } [0.008s]
          Answers = 1, P = 1.000000, R = 0.166667, F1 = 0.285714
        } [0.008s]
        Checking schema 1 / 3: {
          [('Main', '==', 'm.016wzw', ['location.location.people_born_here']), ('Type', '==', 'language.language_creator', ['type.object.type'])]
          var_types: [{'language.language_creator', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:language.language_creator . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:language.language_creator . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 2 / 3: {
          [('Main', '==', 'm.016wzw', ['location.country.languages_spoken']), ('Type', '==', 'language.human_language', ['type.object.type'])]
          var_types: [{'language.human_language'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.type fb:language.human_language . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:28] Q_Schema Request: {
            WebQ_5499|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016wzw fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.type fb:language.human_language . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016wzw'}
            Query return lines = 6
            Final Answer: {'Aymara language', 'Puquina Language', 'Quechua', 'Waorani Language', 'Spanish Language', 'Omagua Language'}
            Answers = 6, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.026s]
          Answers = 6, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.026s]
        2 / 3 typed schemas kept with ans_size > 0.
      } [0.041s]
      Typed level ended, resulting in 225 schemas.
    } [0.051s]
    Time level searching (total times = 0): {
      Current: 0 / 225
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.popstra.public_insult.date'}, set()]
self.var_time_preds: [{'base.popstra.public_insult.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
      Current: 100 / 225
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_since', 'government.national_anthem_of_a_country.official_anthem_until'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_since', 'government.national_anthem_of_a_country.official_anthem_until'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'user.robert.earthquakes.earthquake.date_and_time'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
self.var_time_preds: [set(), set()]
      Current: 200 / 225
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_since', 'government.national_anthem_of_a_country.official_anthem_until'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.from', 'sports.sports_team_roster.to'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
self.var_time_preds: [{'sports.sports_team_roster.from', 'sports.sports_team_roster.to'}, set()]
self.var_time_preds: [{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.to', 'soccer.football_team_management_tenure.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.from', 'sports.sports_team_roster.to'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.from', 'sports.sports_team_roster.to'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'soccer.football_team_management_tenure.to', 'soccer.football_team_management_tenure.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.from', 'sports.sports_team_roster.to'}, set()]
self.var_time_preds: [{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
self.var_time_preds: [{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.to', 'soccer.football_team_management_tenure.from'}, set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
      0 timed schemas retrieved from 225 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 225 schemas.
    } [0.005s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 225
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_agency.date_founded'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'sports.sports_team.founded'}]
[{'food.beer.first_brewed'}]
[set()]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[{'organization.organization.date_founded'}]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'base.popstra.public_insult.date'}, set()]
[{'base.popstra.public_insult.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
      Current: 100 / 225
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_since', 'government.national_anthem_of_a_country.official_anthem_until'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_since', 'government.national_anthem_of_a_country.official_anthem_until'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), {'user.robert.earthquakes.earthquake.date_and_time'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.to', 'organization.organization_membership.from'}, set()]
[set(), set()]
      Current: 200 / 225
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'symbols.flag_use.from_date', 'symbols.flag_use.to_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_since', 'government.national_anthem_of_a_country.official_anthem_until'}, set()]
[{'sports.sports_team_roster.from', 'sports.sports_team_roster.to'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
[{'sports.sports_team_roster.from', 'sports.sports_team_roster.to'}, set()]
[{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
[set(), set()]
[{'soccer.football_team_management_tenure.to', 'soccer.football_team_management_tenure.from'}, set()]
[{'sports.sports_team_roster.from', 'sports.sports_team_roster.to'}, set()]
[{'sports.sports_team_roster.from', 'sports.sports_team_roster.to'}, {'sports.sports_team.founded'}]
[{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, {'sports.sports_team.founded'}]
[set(), {'sports.sports_team.founded'}]
[{'soccer.football_team_management_tenure.to', 'soccer.football_team_management_tenure.from'}, set()]
[{'sports.sports_team_roster.from', 'sports.sports_team_roster.to'}, set()]
[{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
[{'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to'}, set()]
[set(), set()]
[set(), set()]
[{'soccer.football_team_management_tenure.to', 'soccer.football_team_management_tenure.from'}, set()]
[set()]
[set()]
      0 ordinal schemas retrieved from 225 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 225 schemas.
    } [0.004s]
    [2020-12-03 14:19:28] buffer saved.
    225 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/5400-5499/5499_schema].
  } [1m52.652s]
  All Done.
} [3m57.890s]
Time tracker display: {
              Name	Avg. (s)	    Freq	Time (s)
          single_q	 58.9870	       4	235.9480
       coarse_comb	 10.1387	       4	 40.5547
      query_sparql	  0.3054	     132	 40.3065
   query_q_sc_stat	  0.0113	     668	  7.5662
         coarse_F1	  1.8202	       4	  7.2809
           linking	  0.4699	       4	  1.8796
              type	  0.6260	       3	  1.8780
          typed_F1	  0.0862	       4	  0.3447
        timed_comb	  0.0619	       4	  0.2476
        typed_comb	  0.0103	       4	  0.0414
          ord_comb	  0.0033	       4	  0.0131
          timed_F1	  0.0000	       4	  0.0002
        ordinal_F1	  0.0000	       4	  0.0002
              time	  0.0000	       3	  0.0001
           ordinal	  0.0000	       3	  0.0000
            entity	  0.0000	       3	  0.0000
} [0.000s]
