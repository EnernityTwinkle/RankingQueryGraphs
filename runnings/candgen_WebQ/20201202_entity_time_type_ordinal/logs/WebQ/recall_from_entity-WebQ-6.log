[smart_candgen] ...  {
  Loading Webquestions from cPickle ...
  5810 WebQuesetions loaded.
args.linking_only: False
  QueryService initialize ...  {
    Loading ComplexQuestions from cPickle ...
    2100 ComplexQuestions loaded.
    Loading Webquestions from cPickle ...
    5810 WebQuesetions loaded.
    7910 QA loaded from WebQ & CompQ.
    Loading SPARQL cache ... {
      1653 SPARQL cache loaded.
    } [0.275s]
    Loading <q_sc, stat> cache ... {
      13395 <q_sc, stat> cache loaded.
    } [0.522s]
    Initialize complete.
  } [0.839s]
  Loading <word, idx> pairs from [../../data/word_emb_in_use/word_emb.indices] ... 
  84320 <word, idx> loaded.
  Loading word embeddings for [../../data/word_emb_in_use/word_emb.glove_300.npy] ...
  (84320, 300) word embedding loaded.
  44 dependency name loaded.
  GlobalLinker initializing ...  {
    201 ordinal & 235 superlative words loaded.
    Load entity linking table from [../../data/linkings/WebQ/webq.all.top3_source_ensemble_data.q_links]: {
      5810 questions of link data loaded.
    } [0.259s]
    FBHelper: 12237 type names loaded.
    12237 type embedding loaded.
    Initialize complete.
  } [0.860s]
  simple type match = False
  simple time match = False
  Entering Q 600 / 5810 [b'what episode does rukia fade away?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 601 / 5810 [b'what is brazil time zone?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 602 / 5810 [b'who wrote john 3 16 in the bible?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 603 / 5810 [b'what do people in the czech republic speak?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 604 / 5810 [b'where did bruno mars get his start?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 605 / 5810 [b'who was tex beneke?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 606 / 5810 [b'what are all the things thomas edison invented?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 607 / 5810 [b'what does albania speak?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 608 / 5810 [b"what is shakira's nationality?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 609 / 5810 [b'where did the sultan of the ottoman empire live?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 610 / 5810 [b'who is playing bilbo baggins?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 611 / 5810 [b'what position did george washington serve in the constitutional convention?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 612 / 5810 [b'where is the 2012 ncaa basketball tournament?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 613 / 5810 [b'what episode did kate leave ncis?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 614 / 5810 [b'where are the seneca indians now?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 615 / 5810 [b'what did farrah dad do?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 616 / 5810 [b'where did matt barnes play?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 617 / 5810 [b'where does the jordan river begin?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 618 / 5810 [b'what college did lil wayne graduated from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 619 / 5810 [b'where did rihanna come from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 620 / 5810 [b'who does kurt busch drive for now?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 621 / 5810 [b'what years did the knicks win the championship?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 622 / 5810 [b'what is the time zone in uk now?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 623 / 5810 [b'what does dustin diamond do now?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 624 / 5810 [b'what state did thomas jefferson live in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 625 / 5810 [b'where are google headquarters located?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 626 / 5810 [b'who is princess leia?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 627 / 5810 [b'what was richard wright known for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 628 / 5810 [b'where is the nascar hall of fame?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 629 / 5810 [b'what do australia call their money?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 630 / 5810 [b'what was the name of wright brothers plane?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 631 / 5810 [b'where is located university of leeds?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 632 / 5810 [b'who is gilbert gottfried snl?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 633 / 5810 [b'what language do they denmark?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 634 / 5810 [b'what did martin luther do?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 635 / 5810 [b'what team did grover cleveland alexander play for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 636 / 5810 [b'what was eli whitney nationality?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 637 / 5810 [b'what was christiaan barnard famous for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 638 / 5810 [b'where was dwight d. eisenhower from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 639 / 5810 [b'where do audi come from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 640 / 5810 [b'what team is chris paul on?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 641 / 5810 [b'what to do washington dc december?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 642 / 5810 [b'what language is spoken in singapore?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 643 / 5810 [b'who is sanjay gupta married too?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 644 / 5810 [b'what do singapore speak?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 645 / 5810 [b'what movies did luke perry play in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 646 / 5810 [b'who wrote the book of st. john?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 647 / 5810 [b'who is kobe bryant dad?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 648 / 5810 [b'what continent does israel belong to?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 649 / 5810 [b'what is the capital city of albania?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 650 / 5810 [b"where is thomas jefferson's home?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 651 / 5810 [b'what is wentworth miller in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 652 / 5810 [b'what is the capital of spain in 2010?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 653 / 5810 [b'who killed harvey milk?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 654 / 5810 [b'what was the title of the first book dr. seuss wrote?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 655 / 5810 [b'who owns nissan car manufacturer?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 656 / 5810 [b'where is the university of west alabama located?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 657 / 5810 [b'what did kenny everett die off?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 658 / 5810 [b'what main language do they speak in brazil?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 659 / 5810 [b'where does joey king live?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 660 / 5810 [b'what happened to justin bieber 2012?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 661 / 5810 [b'how many australian states and territories?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 662 / 5810 [b'what was manchester united first name?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 663 / 5810 [b'who is the governor of hawaii now?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 664 / 5810 [b'when did herbert hoover become president?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 665 / 5810 [b'where did elvis presley started his career?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 666 / 5810 [b'what happened vince mcmahon?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 667 / 5810 [b'what jobs did harriet tubman have?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 668 / 5810 [b'where does unesco operate?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 669 / 5810 [b'what does canada grow for food?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 670 / 5810 [b'where in the bible does it talk about david?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 671 / 5810 [b'what does amanda seyfried play in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 672 / 5810 [b'what language do people speak in iran?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 673 / 5810 [b'what is the jurisdiction of the us supreme court?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 674 / 5810 [b'what voice does hank azaria do on the simpsons?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 675 / 5810 [b'who is the leader of japan?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 676 / 5810 [b'what time zone is the uk in right now?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 677 / 5810 [b'what instrument does bela fleck play?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 678 / 5810 [b'what position does ray allen?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 679 / 5810 [b'what branch is made up of the house of representatives?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 680 / 5810 [b'where did kurds originate from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 681 / 5810 [b'where did chancellorsville battle take place?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 682 / 5810 [b'what year was the cubs last world series?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 683 / 5810 [b'who is playing hawkeye in the avengers movie?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 684 / 5810 [b'what country speak english as native language?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 685 / 5810 [b'who was king or queen after victoria?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 686 / 5810 [b'what movie did rihanna play in?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 687 / 5810 [b'when was the last time the oakland raiders were in the super bowl?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 688 / 5810 [b'what religion was mary todd lincoln?']: {
    Read 12 links from file.
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [1, 2) (religion) == m.06bvp (religion) {'score': 25345.183729, 'source': 2.0}
      #01 Entity: [3, 6) (mary todd lincoln) == m.01ypl0 (Mary_Todd_Lincoln) {'score': 137433.877747, 'source': 0.0}
      #02 Type: [1, 2) (religion) == religion.religion (religion) {'sim': 1.0}
      #03 Type: [1, 2) (religion) == location.religion_percentage (religion percentage) {'sim': 0.791316}
      #04 Type: [0, 2) (what religion) == religion.belief (belief) {'sim': 0.757646}
      #05 Type: [1, 2) (religion) == religion.religious_practice (religious practice) {'sim': 0.744811}
      #06 Type: [0, 2) (what religion) == religion.religious_order (religious order) {'sim': 0.743856}
      #07 Type: [0, 3) (what religion was) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.733557}
      #08 Type: [0, 3) (what religion was) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.72326}
      #09 Type: [0, 2) (what religion) == religion.religious_leadership_title (religious leadership title) {'sim': 0.72108}
      #10 Type: [0, 3) (what religion was) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.704954}
      #11 Type: [0, 3) (what religion was) == religion.place_of_worship (place of worship) {'sim': 0.70489}
    } [0.000s]
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:14:56) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01ypl0 ?p1 ?o1 . }
        [2020-12-03 14:14:56] SPARQL hit!
        FBHelper: 66554 domain + 65935 range info loaded.
        FBHelper: 1729 mediator types loaded.
        Filt_Query_Ret = 12 / 23 ( 0.171s)
        FBHelper: 11388 inverse predicate info loaded.
        [Len-1||F1/2||2/2-1] (2020-12-03 14:14:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ypl0 ?p1 ?o1 . ?o1 ?p2 fb:m.06bvp . }
          [2020-12-03 14:14:56] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.187s]
      [Len-1||F2/2] (2020-12-03 14:14:56) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06bvp ?p1 ?o1 . }
        [2020-12-03 14:14:56] SPARQL hit!
        Filt_Query_Ret = 19 / 31 ( 0.000s)
        [Len-1||F2/2||1/2-1] (2020-12-03 14:14:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06bvp ?p1 ?o1 . ?o1 ?p2 fb:m.01ypl0 . }
          [2020-12-03 14:14:56] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.000s]
      [Len-2||F1/2] (2020-12-03 14:14:56) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ypl0 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:14:56] SPARQL hit!
        Filt_Query_Ret = 13 / 467 ( 0.002s)
        [Len-2||F1/2||2/2-1] (2020-12-03 14:14:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01ypl0 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06bvp . }
          [2020-12-03 14:14:56] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F1/2||2/2-2] (2020-12-03 14:14:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01ypl0 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06bvp . }
          [2020-12-03 14:14:56] SPARQL hit!
          Filt_Query_Ret = 0 / 1 ( 0.000s)
        } [0.000s]
      } [0.002s]
      [Len-2||F2/2] (2020-12-03 14:14:56) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06bvp ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:14:56] SPARQL hit!
        Filt_Query_Ret = 13 / 512 ( 0.002s)
        [Len-2||F2/2||1/2-1] (2020-12-03 14:14:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06bvp ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01ypl0 . }
          [2020-12-03 14:14:56] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F2/2||1/2-2] (2020-12-03 14:14:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06bvp ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01ypl0 . }
          [2020-12-03 14:14:56] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.002s]
      57 coarse schemas retrieved from scratch.
      Calculating F1 for 57 coarse schemas: {
        Current: 0 / 57
        Checking schema 0 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01ypl0 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 1 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 2 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 3 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 4 / 57: {
          [('Main', '==', 'm.01ypl0', ['medicine.notable_person_with_medical_condition.condition'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:medicine.notable_person_with_medical_condition.condition ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 5 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 6 / 57: {
          [('Main', '==', 'm.01ypl0', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 7 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 8 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 9 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01ypl0 fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 10 / 57: {
          [('Main', '==', 'm.01ypl0', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 11 / 57: {
          [('Main', '==', 'm.01ypl0', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 12 / 57: {
          [('Main', '==', 'm.06bvp', ['book.book_subject.musical_compositions_about_this_topic'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 13 / 57: {
          [('Main', '==', 'm.06bvp', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 83, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 14 / 57: {
          [('Main', '==', 'm.06bvp', ['book.magazine_genre.magazines_in_this_genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:book.magazine_genre.magazines_in_this_genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 15 / 57: {
          [('Main', '==', 'm.06bvp', ['broadcast.radio_format.stations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:broadcast.radio_format.stations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 63, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 16 / 57: {
          [('Main', '==', 'm.06bvp', ['film.film_genre.films_in_this_genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:film.film_genre.films_in_this_genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 17 / 57: {
          [('Main', '==', 'm.06bvp', ['media_common.literary_genre.books_in_this_genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:media_common.literary_genre.books_in_this_genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 61, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 18 / 57: {
          [('Main', '==', 'm.06bvp', ['tv.tv_genre.programs'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:tv.tv_genre.programs ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 19 / 57: {
          [('Main', '==', 'm.06bvp', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 20 / 57: {
          [('Main', '==', 'm.06bvp', ['award.award_discipline.awards_in_this_discipline'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:award.award_discipline.awards_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 57: {
          [('Main', '==', 'm.06bvp', ['conferences.conference_subject.series_of_conferences_about_this'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:conferences.conference_subject.series_of_conferences_about_this ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 22 / 57: {
          [('Main', '==', 'm.06bvp', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 2679, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 23 / 57: {
          [('Main', '==', 'm.06bvp', ['education.field_of_study.journals_in_this_discipline'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:education.field_of_study.journals_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 24 / 57: {
          [('Main', '==', 'm.06bvp', ['tv.tv_subject.tv_programs'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:tv.tv_subject.tv_programs ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 25 / 57: {
          [('Main', '==', 'm.06bvp', ['architecture.building_function.buildings'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:architecture.building_function.buildings ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 26 / 57: {
          [('Main', '==', 'm.06bvp', ['radio.radio_subject.episodes_with_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:radio.radio_subject.episodes_with_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 27 / 57: {
          [('Main', '==', 'm.06bvp', ['radio.radio_subject.programs_with_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:radio.radio_subject.programs_with_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 28 / 57: {
          [('Main', '==', 'm.06bvp', ['base.events.subject_of_festival.festivals_of_this_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:base.events.subject_of_festival.festivals_of_this_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 29 / 57: {
          [('Main', '==', 'm.06bvp', ['law.legal_subject.legal_cases'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:law.legal_subject.legal_cases ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 30 / 57: {
          [('Main', '==', 'm.06bvp', ['base.argumentmaps.thing_of_disputed_value.disparagement'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06bvp fb:base.argumentmaps.thing_of_disputed_value.disparagement ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 31 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ypl0 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 32 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ypl0 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 33 / 57: {
          [('Main', '==', 'm.01ypl0', ['government.politician.government_positions_held', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ypl0 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 34 / 57: {
          [('Main', '==', 'm.01ypl0', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ypl0 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 35 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ypl0 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 36 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ypl0 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 37 / 57: {
          [('Main', '==', 'm.01ypl0', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ypl0 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 38 / 57: {
          [('Main', '==', 'm.01ypl0', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ypl0 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 39 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ypl0 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 40 / 57: {
          [('Main', '==', 'm.01ypl0', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ypl0 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 41 / 57: {
          [('Main', '==', 'm.01ypl0', ['government.politician.government_positions_held', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ypl0 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 42 / 57: {
          [('Main', '==', 'm.01ypl0', ['government.politician.government_positions_held', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ypl0 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 43 / 57: {
          [('Main', '==', 'm.01ypl0', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.pet'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ypl0 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 44 / 57: {
          [('Main', '==', 'm.06bvp', ['education.field_of_study.students_majoring', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06bvp fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 45 / 57: {
          [('Main', '==', 'm.06bvp', ['education.field_of_study.students_majoring', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06bvp fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 46 / 57: {
          [('Main', '==', 'm.06bvp', ['education.field_of_study.students_majoring', 'education.education.specialization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06bvp fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 47 / 57: {
          [('Main', '==', 'm.06bvp', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06bvp fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 48 / 57: {
          [('Main', '==', 'm.06bvp', ['education.field_of_study.students_majoring', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06bvp fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 49 / 57: {
          [('Main', '==', 'm.06bvp', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06bvp fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 50 / 57: {
          [('Main', '==', 'm.06bvp', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06bvp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 51 / 57: {
          [('Main', '==', 'm.06bvp', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06bvp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 52 / 57: {
          [('Main', '==', 'm.06bvp', ['education.field_of_study.students_majoring', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06bvp fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 53 / 57: {
          [('Main', '==', 'm.06bvp', ['education.field_of_study.students_majoring', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06bvp fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 54 / 57: {
          [('Main', '==', 'm.06bvp', ['education.field_of_study.students_majoring', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06bvp fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 55 / 57: {
          [('Main', '==', 'm.06bvp', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06bvp fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 56 / 57: {
          [('Main', '==', 'm.06bvp', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06bvp fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        57 / 57 coarse schemas kept with ans_size > 0.
      } [0.006s]
      Coarse level ended, resulting in 57 schemas.
    } [0.198s]
    Type level searching (total types = 10): {
      Current: 0 / 57
[{'type.datetime'}]
      FBHelper: 1870 sub/super type pairs loaded.
[{'location.country'}]
[{'religion.religion'}]
[{'location.location'}]
[{'medicine.disease'}]
[{'people.person'}]
[{'book.written_work'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'book.written_work'}]
[{'fictional_universe.fictional_character'}]
[{'music.composition'}]
[{'media_common.quotation'}]
[{'book.magazine'}]
[{'broadcast.radio_station'}]
[{'film.film'}]
[{'book.book'}]
[{'tv.tv_program'}]
[{'film.film'}]
[{'award.award_category'}]
[{'conferences.conference_series'}]
[{'book.written_work'}]
[{'book.journal'}]
[{'tv.tv_program'}]
[{'architecture.building'}]
[{'radio.radio_program_episode'}]
[{'radio.radio_program'}]
[{'base.events.type_of_festival'}]
[{'law.legal_case'}]
[{'base.argumentmaps.expression_of_disvalue'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet_owner'}]
[{'people.place_lived'}, {'location.location'}]
[{'people.marriage'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'education.education'}, {'education.field_of_study'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
      4 typed schemas retrieved from 57 coarse schemas.
      Calculating F1 for 4 typed schemas: {
        Current: 0 / 4
        Checking schema 0 / 4: {
          [('Main', '==', 'm.01ypl0', ['people.person.religion']), ('Type', '==', 'religion.religion', ['type.object.type'])]
          var_types: [{'religion.religion'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:people.person.religion ?o1 . ?o1 fb:type.object.type fb:religion.religion . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 1 / 4: {
          [('Main', '==', 'm.01ypl0', ['people.deceased_person.place_of_death']), ('Type', '==', 'religion.place_of_worship', ['type.object.type'])]
          var_types: [{'location.location', 'religion.place_of_worship'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:religion.place_of_worship . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 2 / 4: {
          [('Main', '==', 'm.01ypl0', ['people.person.place_of_birth']), ('Type', '==', 'religion.place_of_worship', ['type.object.type'])]
          var_types: [{'location.location', 'religion.place_of_worship'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ypl0 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:religion.place_of_worship . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 3 / 4: {
          [('Main', '==', 'm.01ypl0', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'religion.place_of_worship', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'religion.place_of_worship'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ypl0 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:religion.place_of_worship . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:14:56] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        1 / 4 typed schemas kept with ans_size > 0.
      } [0.000s]
      Typed level ended, resulting in 58 schemas.
    } [0.013s]
    Time level searching (total times = 0): {
      Current: 0 / 58
      FBHelper: 31940 predicate names loaded.
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'broadcast.radio_station.founded'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'radio.radio_program_episode.air_date'}]
self.var_time_preds: [{'radio.radio_program.first_broadcast', 'radio.radio_program.final_broadcast'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
      0 timed schemas retrieved from 58 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 58 schemas.
    } [0.212s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 58
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[set()]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[{'media_common.quotation.date'}]
[set()]
[{'broadcast.radio_station.founded'}]
[{'film.film.initial_release_date'}]
[set()]
[{'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[{'film.film.initial_release_date'}]
[{'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[set()]
[{'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[set()]
[{'radio.radio_program_episode.air_date'}]
[{'radio.radio_program.first_broadcast', 'radio.radio_program.final_broadcast'}]
[set()]
[set()]
[set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'base.famouspets.pet_ownership.from', 'base.famouspets.pet_ownership.to'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[set(), set()]
[set(), set()]
[set()]
      0 ordinal schemas retrieved from 58 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 58 schemas.
    } [0.003s]
    [2020-12-03 14:14:56] buffer saved.
    58 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0688_schema].
  } [16.158s]
  Entering Q 689 / 5810 [b'who is the house of representatives made up of?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [2, 6) (the house of representatives) == m.01fw_b (house of representatives (japan)) {'score': 115.877431, 'source': 2.0}
      #01 Entity: [3, 6) (house of representatives) == m.0b3wk (United_States_House_of_Representatives) {'score': 103.329716, 'source': 0.0}
      #02 Type: [7, 9) (up of) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.823485}
      #03 Type: [4, 5) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #04 Type: [4, 5) (of) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.816341}
      #05 Type: [7, 9) (up of) == time.day_of_year (day of year) {'sim': 0.794029}
      #06 Type: [7, 9) (up of) == measurement_unit.time_unit (unit of time) {'sim': 0.793579}
      #07 Type: [4, 7) (of representatives made) == government.form_of_government (form of government) {'sim': 0.791199}
      #08 Type: [7, 9) (up of) == time.day_of_week (day of week) {'sim': 0.776551}
      #09 Type: [0, 3) (who is the) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.776246}
      #10 Type: [2, 5) (the house of) == religion.place_of_worship (place of worship) {'sim': 0.753474}
      #11 Type: [2, 5) (the house of) == measurement_unit.area_unit (unit of area) {'sim': 0.753249}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:15:13) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01fw_b ?p1 ?o1 . }
        [2020-12-03 14:15:13] SPARQL hit!
        Filt_Query_Ret = 2 / 10 ( 0.000s)
      } [0.000s]
      [Len-1||F2/2] (2020-12-03 14:15:13) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0b3wk ?p1 ?o1 . }
        [2020-12-03 14:15:13] SPARQL hit!
        Filt_Query_Ret = 7 / 19 ( 0.000s)
      } [0.000s]
      [Len-2||F1/2] (2020-12-03 14:15:13) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01fw_b ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:13] SPARQL hit!
        Filt_Query_Ret = 8 / 189 ( 0.001s)
      } [0.001s]
      [Len-2||F2/2] (2020-12-03 14:15:13) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0b3wk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:13] SPARQL hit!
        Filt_Query_Ret = 21 / 355 ( 0.001s)
      } [0.002s]
      38 coarse schemas retrieved from scratch.
      Calculating F1 for 38 coarse schemas: {
        Current: 0 / 38
        Checking schema 0 / 38: {
          [('Main', '==', 'm.01fw_b', ['government.governmental_body.jurisdiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01fw_b fb:government.governmental_body.jurisdiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01fw_b fb:government.governmental_body.jurisdiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01fw_b'}
            Query return lines = 1
            Final Answer: {'Japan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 1 / 38: {
          [('Main', '==', 'm.01fw_b', ['government.governmental_body.body_this_is_a_component_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01fw_b fb:government.governmental_body.body_this_is_a_component_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01fw_b fb:government.governmental_body.body_this_is_a_component_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01fw_b'}
            Query return lines = 1
            Final Answer: {'National Diet'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 2 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.jurisdiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:government.governmental_body.jurisdiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:government.governmental_body.jurisdiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 3 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.offices_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:government.governmental_body.offices_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:government.governmental_body.offices_positions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 3
            Final Answer: {'United States Representative', 'Speaker of the United States House of Representatives', 'Minority Whip of the United States House of Representatives'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 4 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.committees'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:government.governmental_body.committees ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:government.governmental_body.committees ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'House Committee on Transportation and Infrastructure'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 5 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.body_this_is_a_component_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:government.governmental_body.body_this_is_a_component_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:government.governmental_body.body_this_is_a_component_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'United States Congress'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 6 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.sessions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:government.governmental_body.sessions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:government.governmental_body.sessions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'Congress'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 7 / 38: {
          [('Main', '==', 'm.0b3wk', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'The House: The History of the House of Representatives'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 8 / 38: {
          [('Main', '==', 'm.0b3wk', ['user.sprocketonline.economics.legislative_body.passed_legislation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:user.sprocketonline.economics.legislative_body.passed_legislation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0b3wk fb:user.sprocketonline.economics.legislative_body.passed_legislation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'Patient Protection and Affordable Care Act'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 9 / 38: {
          [('Main', '==', 'm.01fw_b', ['government.governmental_body.members', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01fw_b'}
            Query return lines = 2
            Final Answer: {'Japan', 'Tokyo 2nd district'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 10 / 38: {
          [('Main', '==', 'm.01fw_b', ['government.governmental_body.members', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01fw_b'}
            Query return lines = 1
            Final Answer: {'Prime minister'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 11 / 38: {
          [('Main', '==', 'm.01fw_b', ['government.governmental_body.members', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01fw_b'}
            Query return lines = 1
            Final Answer: {'House of Representatives'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 12 / 38: {
          [('Main', '==', 'm.01fw_b', ['government.governmental_body.members', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01fw_b'}
            Query return lines = 4
            Final Answer: {'Yukio Edano', 'Yasuo Fukuda', 'Shintaro Ishihara', 'Hisayasu Nagata'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 13 / 38: {
          [('Main', '==', 'm.01fw_b', ['government.governmental_body.members', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01fw_b'}
            Query return lines = 2
            Final Answer: {'Prime Minister of Japan', 'Member of Diet of Japan'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 38: {
          [('Main', '==', 'm.01fw_b', ['government.governmental_body.members', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01fw_b'}
            Query return lines = 1
            Final Answer: {'Chiba Prefecture'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 15 / 38: {
          [('Main', '==', 'm.01fw_b', ['government.governmental_body.members', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01fw_b'}
            Query return lines = 4
            Final Answer: {'1993', '1999', '1972', '2007'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 16 / 38: {
          [('Main', '==', 'm.01fw_b', ['government.governmental_body.members', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 WHERE { fb:m.01fw_b fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01fw_b'}
            Query return lines = 3
            Final Answer: {'2006', '2008', '1995'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 17 / 38: {
          [('Main', '==', 'm.0b3wk', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 9
            Final Answer: {'1998', '1980', '1981', '1966', '1995', '1993', '1997', '1979'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 18 / 38: {
          [('Main', '==', 'm.0b3wk', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 17
            Final Answer: {'Chief of Staff to Representative Henry Waxman', 'Chief of Staff', 'Executive Assistant to Congressman Glenn Browder', 'Deputy Chief of Staff to Representative Dick Gephart', 'Aide to Representative Tom Railsback', 'Aide to Representative Robert Michel', 'Aide to Representative Louise M. Slaughter', 'Press Secretary, Congressman Rick Boucher', 'Legislative Assistant to Senator Thomas Kuchel', 'Senior Investigative Counsel', 'Chief of Staff and Legislative Director to Bill Chappell', 'Legislative Aid to Representative Mark Kirk', 'Aide to Representative Tom Daschle', 'Staff Member to Congressman F. Bradford Morse', 'Press Secretary for Congressman Bob Etheridge', 'Representative', 'Chief of Staff to Representative Dick Armey'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 19 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.members', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 8
            Final Answer: {"Texas's 2nd congressional district", 'Norwalk', 'Ohio', 'Arizona', 'Kentucky', 'Pennsylvania', 'United States of America', 'California'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 20 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.members', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 6
            Final Answer: {'Member of Parliament', 'Senator', 'Member of Congress', 'Chief of Staff', 'Speaker', 'Party leaders of the United States House of Representatives'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 21 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.members', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'United States House of Representatives'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 22 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.members', 'government.government_position_held.legislative_sessions'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.legislative_sessions ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.legislative_sessions ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 105
            Final Answer: {'79th United States Congress', '112th United States Congress', '101st United States Congress', '73rd United States Congress', '10th United States Congress', '4th United States Congress', '68th United States Congress', '58th United States Congress', '54th United States Congress', '85th United States Congress', '6th United States Congress', '22nd United States Congress', '14th United States Congress', '28th United States Congress', '93rd United States Congress', '86th United States Congress', '33rd United States Congress', '98th United States Congress', '52nd United States Congress', '95th United States Congress', '105th United States Congress', '13th United States Congress', '7th United States Congress', '11th United States Congress', '9th United States Congress', '70th United States Congress', '61st United States Congress', '1st United States Congress', '67th United States Congress', '24th United States Congress', '60th United States Congress', '27th United States Congress', '91st United States Congress', '47th United States Congress', '56th United States Congress', '57th United States Congress', '71st United States Congress', '87th United States Congress', '29th United States Congress', '107th United States Congress', '99th United States Congress', '8th United States Congress', '69th United States Congress', '75th United States Congress', '102nd United States Congress', '100th United States Congress', '51st United States Congress', '113th United States Congress', '103rd United States Congress', '34th United States Congress', '88th United States Congress', '23rd United States Congress', '40th United States Congress', '18th United States Congress', '104th United States Congress', '109th United States Congress', '12th United States Congress', '15th United States Congress', '41st United States Congress', '97th United States Congress', '72nd United States Congress', '3rd United States Congress', '37th United States Congress', '44th United States Congress', '39th United States Congress', '31st United States Congress', '64th United States Congress', '2nd United States Congress', '83rd United States Congress', '89th United States Congress', '80th United States Congress', '74th United States Congress', '90th United States Congress', '82nd United States Congress', '92nd United States Congress', '17th United States Congress', '5th United States Congress', '55th United States Congress', '20th United States Congress', '76th United States Congress', '32nd United States Congress', '26th United States Congress', '30th United States Congress', '38th United States Congress', '77th United States Congress', '108th United States Congress', '111th United States Congress', '63rd United States Congress', '66th United States Congress', '78th United States Congress', '94th United States Congress', '59th United States Congress', '62nd United States Congress', '81st United States Congress', '25th United States Congress', '21st United States Congress', '96th United States Congress', '35th United States Congress', '19th United States Congress', '36th United States Congress', '110th United States Congress', '84th United States Congress', '106th United States Congress', '16th United States Congress', '48th United States Congress'}
            Answers = 105, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 105, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 23 / 38: {
          [('Main', '==', 'm.0b3wk', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 7
            Final Answer: {'1998', '1996', '2007', '1980', '2003', '1991', '1987'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 24 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.members', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1511
            Final Answer: {'Danny K. Davis', 'Gregorio Sablan', 'Cheri Bustos', 'Charles Denison', 'John Boyle', 'Nicholas Ruxton Moore', 'Dave Camp', 'J. Edward Roush', 'Michael F. Doyle', 'Matthew Walton', 'Dick Zimmer', 'Milton J. Daniels', 'Zack Space', 'Jeremiah M. Wilson', 'Benjamin Walker', 'Cliff Stearns', 'John Hardy Isakson', 'Thomas B. Miller', 'Lawrence Coughlin', 'Mike Turner', 'Elisha Reynolds Potter', 'Mike Honda', 'Mickey Edwards', 'Morgan B. Williams', 'William Kennedy', 'Dale Kildee', 'Randy Weber', 'James Madison', 'Harrison A. Williams', 'J. Harold Flannery', 'Thaddeus McCotter', 'Thomas Griffin', 'Garner E. Shriver', 'Lamar S. Smith', 'Zephaniah Swift', 'Vern Ehlers', 'Cynthia McKinney', 'Gregg Harper', 'Charles Frederick Crisp', 'Nancy Pelosi', 'Robert A. Grant', 'David Cobb', 'John Thune', 'Spencer Bachus', 'Tom DeLay', 'Chris Murphy', 'Steve Driehaus', 'Ann Kirkpatrick', 'Chris Lee', 'Jon Kyl', 'Eleanor Holmes Norton', 'Fred Upton', 'Silvestre Reyes', 'Jim Bridenstine', 'Benjamin Huger', 'John Steele', 'Dean Heller', 'Lynn Jenkins', 'Upton Sheredine', 'Thomas Morris', 'Roger Nelson', 'Randy Forbes', 'Henry Crist', 'Josiah Smith', 'Howell Cobb', 'Connie Mack IV', 'George Fuller', 'Jon Runyan', 'Diana DeGette', 'Tim Scott', 'William H. Gray III', 'Jim Costa', 'Aaron Lyle', 'Martin Gorski', 'Zoe Lofgren', 'Henry Dearborn', 'George Clymer', 'Samuel Sterett', 'Henry Waxman', 'Leonidas Sexton', 'Michael Patrick Flanagan', 'Pedro Pierluisi', 'Carl Albert', 'Phil Roe', 'Ezra Darby', 'John Brown', 'Mike McIntyre', 'Glenn Thompson', 'Thomas Fielder Bowie', 'Saxby Chambliss', 'Tom Luken', 'Sue Myrick', 'John Samuel Sherburne', 'John R. Murdock', 'John Shadegg', 'Jacob A. Garber', 'Joseph Lewis, Jr.', 'Sam Graves', 'Harry Teague', 'Lincoln Davis', 'John Dawson', 'Joe Wilson', 'Tom Foley', 'John Barrow', 'James Langevin', 'William Craik', 'Mike Thompson', 'John M. McHugh', 'Charles A. Halleck', 'Tim Holden', 'John Hathorn', 'John Otho Marsh, Jr.', 'George Tucker', 'Scott Tipton', 'Edwin Sylvanus Osborne', 'Lincoln Diaz-Balart', 'Phineas Bruce', 'Quico Canseco', 'Israel Smith', 'Allyson Schwartz', 'Ed Perlmutter', 'Mary Jo Kilroy', 'John Stanly', 'Al Gore', 'Thomson J. Skinner', 'William Brown', 'Steny Hoyer', 'Michael J. Stone', 'Ebenezer Mattoon', 'Louise Slaughter', 'Brad Wenstrup', 'James Hillhouse', 'Joshua Seney', 'John McCain', 'Solomon P. Ortiz', 'Nathaniel Freeman, Jr.', 'Tom Cotton', 'Anna Eshoo', 'Wade Hampton I', 'Simon Larned', 'Henry Waldron', 'George W. Campbell', 'Henry M. Ridgely', 'Jim Renacci', 'Clifton Clagett', 'Nancy Boyda', 'Baron Hill', 'John S. Benham', 'Joseph P. Kennedy III', 'Susan Brooks', 'Martin Chittenden', 'Colleen Hanabusa', 'Charles Bass', 'Lloyd Doggett', 'André Carson', 'Benjamin Goodhue', 'Mike Quigley', 'Jack Reed', 'Samuel W. Dana', 'John Bird', 'Timothy Griffin', 'Jim Wright', 'Archibald Henderson', 'Kenny Marchant', 'Emmett Marshall Owen', 'Jackie Walorski', 'Lewis R. Morris', 'Collin Peterson', 'Chip Cravaack', 'Chris Gibson', 'Francis Willis', 'George Ege', 'John Leisenring', 'David Meriwether', 'John Lynch', 'Frank Wolf', 'Stanley Woodward Davenport', 'Sam Johnson', 'Isaac Coles', 'Luis Gutiérrez', 'Howard Coble', 'John Thompson', 'Justin Amash', 'Gus Bilirakis', 'Ralph Hall', 'Harold Ford, Jr.', 'Walter Bowie', 'Betty McCollum', 'Dan Coats', 'Jim Sensenbrenner', 'Thomas Boude', 'Thurman C. Crook', 'George Gale', 'Roger Griswold', 'Bill Flores', 'Daniel Rodney', 'James Richards', 'James Gordon', 'Mary Fallin', 'Andrew Pickens', 'Smith S. Turner', 'Nathaniel Niles', 'Kurt Schrader', 'Ralph Metcalfe', 'Jesse Franklin', 'Cynthia Lummis', 'Thomas Smith', 'Cornelius C. Schoonmaker', 'J. Warren Keifer', 'Fred M. Vinson', 'John Boozman', 'Benjamin Taliaferro', 'John Milledge', 'Nathaniel Macon', 'Sylvester C. Smith', 'James Traficant', 'Amasa Learned', 'John Claiborne', 'Chauncey Goodrich', 'Ileana Ros-Lehtinen', 'Edward H. Kruse', 'Roger Williams', 'George Leonard', 'Jeff Miller', 'Joseph Stanton, Jr.', 'Betsy Markey', 'Brian Bilbray', 'George H. Dunn', 'Richard Brent', 'Bobby Scott', 'Caesar Augustus Rodney', 'Burwell Bassett', 'John Swanwick', 'Joshua Coit', 'Matthew Lyon', 'Mazie Hirono', 'William Temple', 'Aaron Schock', 'Milton Robert Carr', 'Harry R. Sheppard', 'Joseph ""Pleasant Gardens"" McDowell', 'Suzanne Bonamici', 'Rick Renzi', 'Thomas Dwight', 'Steve Kagen', 'Henry Persons', 'Johnathan McCarty', 'Mark Udall', 'Mark Thomson', 'Henry W. Livingston', 'Kendrick Meek', 'Barnabas Bidwell', 'Sereno E. Payne', 'Abraham B. Venable', 'Peter Roskam', 'Charles R. Farnsley', 'Ezekiel Gilbert', 'Jim Marshall', 'John Gallagher Montgomery', 'Joaquín Castro', 'Daniel Morgan', 'Carolyn Cheeks Kilpatrick', 'William Barry Grove', 'Ebenezer Seaver', 'Isaac Goodnight', 'Scott Rigell', 'Victor O. Frazer', 'Scott Garrett', 'Nathaniel Smith', 'Duke Cunningham', 'Chris Smith', 'Frank W. Burke', 'Stephen Ormsby', 'Mark Souder', 'Joseph A. Scranton', 'Maria Cantwell', 'Debbie Halvorson', 'David Valadao', 'Joseph Cao', 'John Davenport', 'Rubén Hinojosa', 'William Hindman', 'Andrew Jackson', 'Richard Stanford', 'Debbie Stabenow', 'Peleg Coffin, Jr.', 'James Eli Watson', 'Daniel W. Connolly', 'William Edmond', 'Jacob Richards', 'Mike Michaud', 'John Evert Van Alen', 'J. Caleb Boggs', 'Jane Harman', 'Speedy Long', 'John Baptiste Charles Lucas', 'Todd Russell Platts', 'Robert Douglas Heaton', 'Lemuel Benton', 'Paul Broun', 'Todd Akin', 'Thomas Wingfield Grimes', 'Kyrsten Sinema', 'Dan Kildee', 'Abiel Foster', 'William Lacy Clay, Jr.', 'Theodore M. Pomeroy', 'Dan Quayle', 'Dutch Ruppersberger', 'Donald Young', 'Jean Schmidt', 'Michael Grimm', 'Eni Faleomavaega', 'Thomas Moore', 'Elias Boudinot', 'Andrew Johnson', 'Chellie Pingree', 'Cedric Richmond', 'John J. Casey', 'James Holland', 'Ed Bethune', 'Rick Berg', 'Elizur Goodrich', 'James Cooper', 'John Boccieri', 'Jill Long Thompson', 'Bradley F. Granger', 'Bobby Rush', 'Mike Rogers', 'John Beatty', 'Silas Lee', 'James Armstrong', 'Jefferson Davis', 'John Taliaferro', 'John Heath', 'John Winston Jones', 'Randy Hultgren', 'Russ Carnahan', 'William Smith', 'Nathaniel P. Banks', 'Daniel Kahikina Akaka', 'Tom Udall', 'Richard Bland Lee', 'Chris Van Hollen', 'Lincoln Dixon', 'Rob Bishop', 'James A. Bayard', 'Bob Inglis', 'Gene Snyder', 'Ron Paul', 'George Washington Shonk', 'Todd Rokita', 'William Helms', 'Donald W. Riegle, Jr.', 'Edolphus Towns', 'Chaka Fattah', 'Jo Ann Emerson', 'William Blackledge', 'John Chew Thomas', 'Peter T. King', 'Harris B. McDowell, Jr.', 'Carter Harrison, Sr.', 'Ed Royce', 'John Chapman', 'Thomas Hartley', 'Pat Tiberi', 'William O. Cowger', 'George M. Bedinger', 'John Blaisdell Corliss', 'John Mitchell', 'Uriah Tracy', 'John Clopton', 'Thomas Clayton', 'Paine Wingate', 'James Clark', 'William K. Brewster', 'James E. Rogan', 'Israel Jacobs', 'Karen McCarthy', 'Michael Leib', 'Everis A. Hayes', 'Andrew Stevenson', 'Mary Bono Mack', 'Frank LoBiondo', 'David Vitter', 'John Adler', 'Paul Cook', 'Hugh Williamson', 'Jonathan Grout', 'Benjamin Huntington', 'Ander Crenshaw', 'Gary Peters', 'Albert Gallatin', 'Joseph Dickson', 'Christopher G. Champlin', 'Josiah Hasbrouck', 'Joe Baca', 'Henry R. Harris', 'Samuel Livermore', 'Carolyn McCarthy', 'Elias Earle', 'Lazarus Denison Shoemaker', 'Stephen A. Douglas', 'Morgan Griffith', 'Derek Kilmer', 'Lucius Jeremiah Gartrell', 'John Stewart', 'Christopher Greenup', 'Sander M. Levin', 'Joseph Barker', 'Sherrod Brown', 'Jerry Costello', 'Tom Cole', 'Theodorus Bailey', 'John Tyler', 'James Elliot', 'Gary Miller', 'Jeremiah Smith', 'Dan Benishek', 'Blair McClenachan', 'Jim Matheson', 'Norman Mineta', 'Oliver Phelps', 'Tom Daschle', 'Frederica Wilson', 'Kay Granger', 'Keith Ellison', 'Tom Tancredo', 'Samuel Riker', 'Paul Tonko', 'Pete Olson', 'Nick Rahall', 'Todd Tiahrt', 'Egbert Benson', 'Dina Titus', 'Erik Paulsen', 'Vicky Hartzler', 'Mike Ross', 'Adam Kinzinger', 'Steve Womack', 'Mark Sanford', 'Jeff Landry', 'Geoff Davis', 'Terry Everett', 'John W. Kittera', 'Bailey Bartlett', 'Ed Koch', 'Pat Meehan', 'Kathy Hochul', 'Carol Shea-Porter', 'Frank Kratovil', 'Joe Walsh', 'Steven Horsford', 'Walt Minnick', 'Ron Klein', 'Aedanus Burke', 'William Johnston Dawson', 'William Lyman', 'Tom McClintock', 'Scott DesJarlais', 'William B. Bankhead', 'Albert Gore, Sr.', 'Cordell Hull', 'Artur Davis', 'Adolph J. Sabath', 'Galusha A. Grow', 'John Telemachus Johnson', 'Donald Rumsfeld', 'Willis Alston', 'Jim McDermott', 'Doris Matsui', 'Thomas W. Harrison', 'Dan Rostenkowski', 'Kevin Yoder', 'Thaddeus M. Machrowicz', 'Fisher Ames', 'Fernando C. Beaman', 'Carlos Moorhead', 'Tim Walberg', 'Philip Pendleton Barbour', 'George Holding', 'James M. Broom', 'Benjamin Bourne', 'Brad Sherman', 'Joseph Peirce', 'Mike Kelly', 'Ron Dellums', 'John C. Box', 'Juan Vargas', 'Lou Barletta', 'Robert H. Michel', 'Trent Franks', 'Frederick Augustus Muhlenberg', 'James Gillespie', 'Walter Jones', 'George Allen', 'Nathan Deal', 'James Davenport', 'John Jacob Rhodes III', 'Lindsey Graham', 'Frederick Muhlenberg', 'Michael D. Rogers', 'Harrison Gray Otis', 'Albert Sidney Camp', 'Pete Stark', 'Henry Glen', 'Rob Andrews', 'Bob Filner', 'Alexander Gillon', 'David Joyce', 'Robert Brown', 'Martha Roby', 'Robert Charles Winthrop', 'Ann McLane Kuster', 'Sanford Bishop', 'Sam Rayburn', 'Wilson Lumpkin', 'Abraham Clark', 'George Chambers', 'Caleb Blood Smith', 'James Shannon', 'Tom Latham', 'Nicholas Gilman', 'William C. Wright', 'David B. Henderson', 'Thomas Scott', 'Mo Brooks', 'Pat Toomey', 'Charles Murphey', 'Richard Nixon', 'Tom Reed', 'Renee Ellmers', 'Marmaduke Williams', 'Sam Coppersmith', 'Jim Inhofe', 'John Whitehill', 'Kevin Brady', 'Jared Huffman', 'John Randolph of Roanoke', 'Richard Neal', 'John Carter', 'George Washington Woodward', 'Joseph William Martin, Jr.', 'Trey Radel', 'Josiah Parker', 'John Sullivan', 'Tim Bishop', 'John Stratton', 'Charles Murray Turpin', 'John Quincy Adams', 'George Paul Miller', 'William Shepard', 'Erasmus W. Beck', 'Shelley Moore Capito', 'Jerry McNerney', 'John K. Delaney', 'Gresham Barrett', 'John Bacon', 'Eric Swalwell', 'Joseph Bryan', 'Thomas M. Foglietta', 'Judy Biggert', 'Steven Palazzo', 'Chilton Allan', 'Richard Cutts', 'Ebenezer J. Penniman', 'John Paul, Sr.', 'William Enyart', 'Steve Stivers', 'Jim Gerlach', 'Denise Majette', 'Barbara Boxer', 'Paul Tsongas', 'Scott Perry', 'George Jackson', 'Jay Inslee', 'Jim Jeffords', 'Alexander D. Orr', 'Thomas Massie', 'Samuel Thatcher', 'Bill Young', 'Larry Craig', 'James White', 'Bob Ehrlich', 'David Wu', 'Thomas Sinnickson', 'Uriah Forrest', 'Marcia Fudge', 'Ann Marie Buerkle', 'Robert Aderholt', 'Hiram B. Warner', 'Brad Ellsworth', 'Abraham Nott', 'Mark Pocan', 'James MacKay', 'Chet Edwards', 'Donald M. Fraser', 'Ed Pastor', 'Robert R. Casey', 'Francis Preston', 'Ron de Lugo', 'John Wesley Davis', 'David McKinley', 'Marc Veasey', 'George Mathews', 'Mark Meadows', 'Joseph Hiester', 'Dennis A. Ross', 'Gary Ackerman', 'Richard Burr', 'Jim Himes', 'Bobby Bright', 'William Matthews', 'Francis Malbone', 'Gloria Negrete McLeod', 'Levi T. Griffin', 'Oscar Underwood', 'Jonathan Sturges', 'John Boehner', 'Frank Ellsworth Doremus', 'Benjamin Williams', 'Leonard Covington', 'Absalom Tatom', 'Jeptha D. New', 'Ignatius L. Donnelly', 'Joe Sestak', 'David Bard', 'Diane Black', 'James Henry Hammond', 'Leven Powell', 'Henry E. Brown, Jr.', 'Dick Durbin', 'Michael C. Kerr', 'Franklin Pierce', 'Dave Reichert', 'Mel Levine', 'Jonathan Brace', 'John Culberson', 'John Condit', 'G. K. Butterfield', 'Corrine Brown', 'Thomas Sammons', 'Lemuel Williams', 'Blake Farenthold', 'Ted Yoho', 'John Scott', 'Lynn Westmoreland', 'Anthony New', 'Robert Goodloe Harper', 'Stephanie Herseth Sandlin', 'John Hoge', 'Frank Lucas', 'Janice Hahn', 'Bill Lipinski', 'Tom Graves', 'Steve Rothman', 'Tom Harkin', 'Don Manzullo', 'Robert Williams', 'Nicholas Longworth', 'Alan Nunnelee', 'Linda Sánchez', 'Rosa DeLauro', 'Daniel Inouye', 'Kristi Noem', 'James Lawrence Orr', 'Orchard Cook', 'William Montgomery', 'Nicholas Van Dyke', 'Mel Watt', 'Mike Pompeo', 'Timothy F. Murphy', 'Linn Boyd', 'Frederick H. Gillett', 'Scott Peters', 'Thomas Claiborne', 'Samuel B. Pettengill', 'Alan Mollohan', 'Richard Shelby', 'Ciro Rodriguez', 'Bill Shuster', 'Mike Coffman', 'Robert Marion Berry', 'Anthony Michalek', 'John Campbell', 'Lawrence Hogan', 'Andrew Moore', 'John C. Calhoun', 'Rick Crawford', 'Mike Simpson', 'William Stedman', 'Samuel Maclay', 'John Archer', 'Yvette Clarke', 'Samuel Dexter', 'Hansen Clarke', 'James Fisk', 'Paul Hodes', 'Tom Marino', 'Henry Wilbur Palmer', 'Hugh Buchanan', 'William A. Burwell', 'John Page', 'James A. Gallagher', 'Norman D. Dicks', 'Mark Kirk', 'Eddie Bernice Johnson', 'Karen Bass', 'David Wilmot', 'Jaime Herrera Beutler', 'John Blake, Jr.', 'Blaine Luetkemeyer', "Tip O'Neill", 'Elijah Cummings', 'Winthrop Welles Ketchum', 'Jerrold Nadler', 'George Hancock', 'Tim Huelskamp', 'Samuel Jordan Cabell', 'Melvin H. Evans', 'Jack Z. Anderson', 'Phil Gingrey', 'Ben Cardin', 'Lucille Roybal-Allard', 'Langdon Cheves', 'Tom Price', 'Ted Poe', 'James Sheafe', 'Dave Obey', 'Jim Turner', 'John Spratt', 'Matthew Clay', 'John C. Kluczynski', 'Clare Boothe Luce', 'Frederick Conrad', 'Peter Early', 'Thomas J. Speer', 'Beriah Palmer', 'Mick Mulvaney', 'Joseph Crowley', 'Leonard Lance', 'Joseph Winston', 'Ron DeSantis', 'Bill Sali', 'Steve Pearce', 'Denny Rehberg', 'Leon Panetta', 'William Barton Wade Dent', 'Bruce Braley', 'Thomas Mann Randolph, Jr.', 'Nahum Mitchell', 'Joe Garcia', 'Ben Chandler', 'Marcy Kaptur', 'Martin Dies, Jr.', 'Harry C. Canfield', 'John Vining', 'Earl Blumenauer', 'Larry Bucshon', 'Robert Dold', 'James K. Polk', 'Jonathan Dayton', 'William Alexander Richardson', 'Gaylord Griswold', 'John Nicholas', 'John Fleming', 'James Jones', 'Terri Sewell', 'Rick Boucher', 'Clarence E. Kilburn', 'Arthur M. Free', 'Michael McMahon', 'Steve Scalise', 'Chuck Grassley', 'Mark Amodei', 'William Francis Strudwick', 'Jack Brooks', 'Dennis Kucinich', 'Louie Gohmert', 'William Jones', 'John Marshall', 'Reid Ribble', 'George Miller', 'Mike Arcuri', 'Daniel Hiester', 'John Sarbanes', 'Dan Lipinski', 'Peleg Sprague', 'Lucas Elmendorf', 'Al Green', 'Rick Larsen', 'Steve Austria', 'Richard Thomas', 'John F. Kennedy', 'Seth Hastings', 'John Salazar', 'Bob Barr', 'Pete Visclosky', 'Jerry Lewis', 'Bart Stupak', 'John Hanson Farquhar', 'Oliver H. Smith', 'William F. Clinger, Jr.', 'Robert Brady', 'James Schureman', 'Thomas Plater', 'Bob Franks', 'Eric Massa', 'Phil Hare', 'Xavier Becerra', 'Samuel Hammond', 'Jim Oberstar', 'Brian Baird', "Beto O'Rourke", 'James Stephenson', 'Andy Barr', 'Donald Payne, Jr.', 'Dick Armey', 'Dan Lungren', 'William Henry Hines', 'Paul Leidy', 'Bill Cassidy', 'Olympia Snowe', 'Peterson Goodwyn', 'Alexander Wilson', 'Donald M. Payne', 'Bob Dornan', 'Matt Cartwright', 'Isaac Anderson', 'Rob Woodall', 'Nehemiah Knight', 'David Davis', 'William Vans Murray', 'Joyce Beatty', 'George H. W. Bush', 'John Rea', 'Jim Moran', 'Charles B. Rangel', 'Philip Van Cortlandt', 'Carter Bassett Harrison', 'Christopher H. Clark', 'John Paterson', 'Tammy Baldwin', 'Thomas Sandford', 'Andrew Gregg', 'Steve Southerland', 'Samuel Sitgreaves', 'Bart Gordon', 'Joseph McDowell, Jr.', 'Ziad S. Ojakli', 'Edwin Gray', 'John Test', 'Daniel Sheffer', 'Charlie Melancon', 'John Forsyth', 'Steve Chabot', 'Jeremiah Wadsworth', 'D. French Slaughter, Jr.', 'Theophilus Bradbury', 'Debbie Wasserman Schultz', 'Adam Schiff', 'Jonathan Nicoll Havens', 'James Indus Farley', 'Rudolph G. Tenerowicz', 'Robert E. Cramer', 'Elias Perkins', 'John Baptista Ashe', 'George Dent', 'Brian Higgins', 'Adam Putnam', 'Francis Walker', 'Nathaniel Alexander', 'Thomas Sumter', 'Anthony Wayne', 'Ed Markey', 'Barbara Lee', 'William Alanson Howard', 'Cory Gardner', 'Thomas Brackett Reed', 'Henry Wynkoop', 'Frank Guinta', 'Rod Blagojevich', 'Robert Wexler', 'Gene Taylor', 'George W. Scranton', 'Abraham Lincoln', 'J.C. Watts', 'John William McCormack', 'David Price', 'Alan Lowenthal', 'Mike Pence', 'James G. Blaine', 'Clement Storer', 'Vern Buchanan', 'Joseph Hemphill', 'John B. Larson', 'Robert Emmett Lee', 'Philip Key', 'Tom Lantos', 'Charles Johnson', 'Daniel Webster', 'John Bell', 'Dick Gephardt', 'Jason Chaffetz', 'Candice Miller', 'Romano L. Mazzoli', 'Greg Walden', 'Harry Reid', 'George B. Cooper', 'Jonas Platt', 'Adam Smith', 'Thomas Pinckney', 'Alphonzo E. Bell, Jr.', 'Charlie Gonzalez', 'Rick Nolan', 'Clement Comer Clay', 'Susan Davis', 'James Machir', 'Vic Snyder', 'Rush D. Holt Jr.', 'Keith Rothfus', 'Henry Lee III', 'Niki Tsongas', 'Roscoe Bartlett', 'Jim McGovern', 'John Mica', 'Dan Boren', 'Thomas Wynns', 'Samuel Hunt', 'Robert Allison', 'Jim Kolbe', 'Jesse Jackson, Jr.', 'Neal Edward Smith', 'Daniel Buck', 'Thomas Tredwell', 'Bill Huizenga', 'Julia Brownley', 'Albio Sires', 'Peter Silvester', 'David Stuart', 'Jeff Duncan', 'George Baer, Jr.', 'Michelle Lujan Grisham', 'John Smilie', 'John Hall', 'Austin Scott', 'Gerry Connolly', 'Jeff Denham', 'John Johns Trigg', 'Ebenezer M. Chamberlain', 'Ginny Brown-Waite', 'Joseph W. Byrns, Sr.', 'Ed Whitfield', 'Barry Goldwater, Jr.', 'Mac Thornberry', 'Anne Northup', 'Samuel D. Purviance', 'Theodore Dwight', 'Lyndon B. Johnson', 'Eric Cantor', 'Jeff Fortenberry', 'Billy Long', 'William Pinkney', 'Richard Winn', 'John Patten', 'Samuel Earle', 'Joe Donnelly', 'Robert Gammage', 'William Hoge', 'Jeff Flake', 'Charlie Dent', 'Benjamin Tallmadge', 'John Linder', 'William J. Jefferson', 'Tulsi Gabbard', 'Bob Goodlatte', 'Tammy Duckworth', 'James Lankford', 'Doug Lamborn', 'Ebon C. Ingersoll', 'Pete Hoekstra', 'Stephen Longfellow', 'Erastus Root', 'Robert Drinan', 'Lynn Woolsey', 'John G. Carlisle', 'Lambert Cadwalader', 'Madeleine Bordallo', 'Abram Trigg', 'William C. Maybury', 'Raul Ruiz', 'Shelley Sekula-Gibbs', 'Maurice Hinchey', 'Samuel Lyman', 'Steve Israel', 'Jacob Crowninshield', 'Donna Edwards', 'Marsha Blackburn', 'James Sloan', 'Suzanne Kosmas', 'Hakeem Jeffries', 'Franklin Davenport', 'William R. Keating', 'Tom Rooney', 'Brad Schneider', 'Robert McClelland', 'Dan Maffei', 'J. Kenneth Robinson', 'Ray Thornton', 'Jerry Moran', 'Archibald C. Hart', 'Richard Lankford', 'Thomas Newton, Jr.', 'Ernest Istook', 'Thomas J. Tauke', 'Ike Skelton', 'Bobby Schilling', 'Benjamin Contee', 'Michael C. Burgess', 'Rodney Frelinghuysen', 'John Dowdy', 'John Stoughton Newberry', 'Andrew P. Harris', 'Jan Schakowsky', 'Jimmy Duncan', 'John Yarmuth', 'Nathan Read', 'Theodorick Bland', 'Mike Fitzpatrick', 'Mike Ward', 'Josiah Bonner', 'Everett G. Burkhalter', 'Robert Hurt', 'Nick Lampson', 'Jim Cooper', 'Jim Mattox', 'James Mott', 'Elton Gallegly', 'Brad Miller', 'Mark Critz', 'John Kline', 'Alexander Mebane', 'John J. Crittenden', 'Wally Herger', 'Patrick Murphy', 'Glenn Nye', 'Joseph Eggleston', 'Jacob C. Davis', 'Peter Van Gaasbeck', 'Edwin Reinecke', 'Kevin Cramer', 'Doc Hastings', 'David Loebsack', 'Randy Neugebauer', 'Pete Sessions', 'Thomas Blount', 'Gregory Meeks', 'William C. C. Claiborne', 'Isaac Smith', 'Gideon Olin', 'Joseph Bradley Varnum', 'Jason Altmire', 'John Logan Chipman', 'John Peter Van Ness', 'Ron Wyden', 'Pat Roberts', 'Howard Berman', 'John Dingell', 'Henry Cuellar', 'Zach Wamp', 'Alcee Hastings', 'Loretta Sanchez', 'Gene Green', 'J. Irving Whalley', 'Chris Collins', 'José E. Serrano', 'Adrian Smith', 'Timothy J. Roemer', 'Lucien N. Nedzi', 'Allen West', 'Bennie Thompson', 'Elliott H. Levitas', 'Ebenezer Elmer', 'Jim Clyburn', 'John Garamendi', 'Ted Deutch', 'Jesse M. Combs', 'Thomas Evans', 'Jonathan Trumbull, Jr.', 'Daniel Carroll', 'Samuel Goode', 'Bill Posey', 'A. Walter Norblad', 'Tom Carper', 'Peter Welch', 'Allen Boyd', 'Mike Conaway', 'Markwayne Mullin', 'Virginia Foxx', 'William Pennington', 'John White', 'Ben R. Luján', 'Burr Harrison', 'Theodore Sedgwick', 'Blanche Lincoln', 'Donald L. Ritter', 'Harry Mitchell', 'Ken Calvert', 'Steve King', 'William Eustis', 'Dan Burton', 'Alfred Lucking', 'Silas Talbot', 'John B. Earle', 'John Smith', 'Laura Richardson', 'John Watts', 'Robert Latta', 'Rodney Alexander', 'Leonard Boswell', 'Killian K. Van Rensselaer', 'Jim DeMint', 'Roy Blunt', 'Lois Frankel', 'Hal Rogers', 'Moses W. Field', 'James F. Byrnes', 'John F. Tierney', 'Henry Woods', 'Duncan D. Hunter', 'John Laurance', 'Thomas Tudor Tucker', 'Ben Quayle', 'William Henry Stanton', 'Edmund Nelson Carpenter', 'Bob Price', 'John Allen', 'John Murtha', 'Raymond F. Lederer', 'John Rhea', 'Tim Hutchinson', 'Gerald Ford', 'David Rivera', 'Tony Cardenas', 'Jeremiah Crabb', 'Bill Delahunt', 'Rahm Emanuel', 'Matthew Locke', "Emmet O'Neal", 'Abraham Baldwin', 'Thomas Lewis, Jr.', 'Ray LaHood', 'Paul E. Kanjorski', 'John G. Fary', 'Henry Mills Fuller', 'Henry W. Lord', 'Kevin McCarthy', 'Jack Kingston', 'Owen Lovejoy', 'Bill Pascrell, Jr.', 'Thomas Tillinghast', 'Matt Salmon', 'Ami Bera', 'Shepard J. Crumpacker, Jr.', 'David Brooks', 'David Cicilline', 'John G. Jackson', 'James Jackson', 'Michael McCaul', 'Bob Gibbs', 'Jeb Hensarling', 'Robert Waln', 'John Chandler', 'Michele Bachmann', 'James Buchanan', 'Samuel W. Parker', 'Ron Kind', 'Sherman Hoar', 'Bill Owens', 'George Thatcher', 'Samuel Holten', 'Charles Boustany', 'Benjamin Edwards', 'Amos Lane', 'Elbridge Gerry', 'James Henry Lane', 'Thomas P. Carnes', 'John Olver', 'Kathy Dahlkemper', 'David Stone', 'Roger Sherman', 'Bob Menendez', 'Michael Ozzie Myers', 'Levi Lincoln, Sr.', 'Samuel Smith', 'Jacob K. Javits', 'Dempsey Burges', 'Sean Duffy', 'Jared Polis', 'Henry Latimer', 'John P. Hiler', 'William Henry Hill', 'Schuyler Colfax', 'Doug LaMalfa', 'William McCreery', 'Bill Johnson', 'Bob Turner', 'Dennis Heck', 'Alpheus S. Williams', 'David Hough', 'Raúl Labrador', 'Almon Heath Read', 'Dan Glickman', 'Jackie Speier', 'George B. Upham', 'Joseph R. Pitts', 'Dick Cheney', 'John B. Sosnowski', 'Joe Barton', 'John Richards', 'Artemas Ward', 'John Jacob Rhodes', 'Travis Childers', 'Buck McKeon', 'Martin Dies, Sr.', 'Bill Nelson', 'Paul Gosar', 'Kirsten Gillibrand', 'Doug Collins', 'Paul Ryan', 'John Rutledge, Jr.', 'Hendrick Bradley Wright', 'David Scott', 'Stephen Lynch', 'Anthony D. Weiner', 'George Radanovich', 'Ivor D. Fenton', 'Richard L. Hanna', 'Bob Etheridge', 'Donna Christian-Christensen', 'Mark Schauer', 'Elizabeth Esty', 'Robert Barnwell', 'Manasseh Cutler', 'Mario Diaz-Balart', 'Diane Watson', 'Joe Heck', 'Tom Rice', 'Chuck Schumer', 'Lois Capps', 'Edwin Denby', 'Leon Sacks', 'William Gordon', 'Robert Pittenger', 'Gwen Moore', 'Chris Stewart', 'Littleton Waller Tazewell', 'Thad Cochran', 'Marlin Stutzman', 'Steve Buyer', 'Joe Courtney', 'Daniel Huger', 'George Tibbits', 'Fiorello H. LaGuardia', 'Parker Griffith', 'Neil Abercrombie', 'Bernie Sanders', 'John W. Taylor', 'Walter B. Jones, Jr.', 'Mark Takano', 'Thomas Fitzsimons', 'Bill Gradison', 'Daniel C. Verplanck', 'John C. Carney, Jr.', 'David Schweikert', 'Tom Petri', 'John Wayles Eppes', 'Hilda Solis', 'Patrick J. Kennedy', 'Francis Bristow', 'Phanuel Bishop', 'Samuel Sewall', 'Hugh A. Haralson', 'Alan Grayson', 'Jefferson F. Long', 'Francis M. Griffith', 'Timothy Bloodworth', 'Tim Walz', 'Steve Stockman', 'Levi Casey', 'David Holmes', 'Rob Portman', 'James Cochran', 'Chuck Fleischmann', 'Samuel F. Gove', 'Stephen Fincher', 'Martin Heinrich', 'Hugh S. Hersman', 'Silas Betton', 'Darrell Issa', 'Sean Patrick Maloney', 'Samuel Taggart', 'Charles N. Brumm', 'Nan Hayworth', 'John Cotton Smith', 'Alexander White', 'Steve LaTourette', 'Thomas Terry Davis', 'Eliot Engel', 'Trey Gowdy', 'Dennis Moore', 'Brett Guthrie', 'Roger Wicker', 'Thomas Patterson', 'Rodney L. Davis', 'Don Cazayoux', 'Lynn Schenk', 'George Partridge', 'Shelley Berkley', 'Andrew McCord', 'William Cooper', 'Peter DeFazio', 'Jim Guy Tucker', 'Jeremiah Van Rensselaer', 'William Henry Harrison', 'Stephanie Tubbs Jones', 'John S. Tanner', 'Lee Terry', 'George Robert Patterson', 'Gladys Spellman', 'Henry Southard', 'Samuel J. Randall', 'Kathy Castor', 'John Williams', 'John Shimkus', 'Tom Perriello', 'Newt Gingrich', 'James Hay', 'George Washington Julian', 'Philip R. Thompson', 'Jonathan Freeman', 'Peter Muhlenberg', 'Heath Shuler', 'George Clinton, Jr.', 'William Dickson', 'Ellen Tauscher', 'Robert Page', 'Joseph Hopper Nicholson', 'Sandy Adams', 'Joseph Neville', 'Henry Johnson', 'Steve Cohen', 'Todd Young', 'Judy Chu', 'Betty Sutton', 'Champ Clark', 'John Nance Garner', 'Samuel Tenney', 'John Francis Mercer', 'George W. Gillie', 'Rich Nugent', 'William Butler', 'Henry Thomas Rainey', 'Richard Hudson', 'Hervey Machen', 'Thomas J. Bliley, Jr.', 'George G. Sadowski', 'William C. Adamson', 'Isaac Parker', 'Robert M. T. Hunter', 'Richard Mentor Johnson', 'Larry Kissell', 'Joseph Clay', 'Ben L. Jones', 'John Hunter', 'Peleg Wadsworth', 'Luke Messer', 'Bill Richardson', 'Ron Barber', 'Aaron Kitchell', 'Michael Myers', 'Samuel Latham Mitchill', 'Shearjashub Bourne', 'James Henderson Imlay', 'Michael Dean Crapo', 'Jeremiah Morrow', 'F. Jay Nimtz', 'Richard Dobbs Spaight', 'Grace Napolitano', 'Michael Castle', 'William Irvine', 'Robert H. Clancy', 'James H. Cravens', 'William Chamberlain', 'William Wyatt Bibb', 'Edward Livingston', 'Estes Kefauver', 'Samuel Griffin', 'Barbara Mikulski', 'John Rowan', 'Ann Wagner', 'George R. Riddle', 'John W. Fishburne', 'William Loughton Smith', 'John Wiley Bryant', 'Robert Roosevelt', 'Dennis Hastert', 'John A. Hanna', 'George P. Codd', 'Gabriel Christie', 'Steve Daines', 'Bill Foster', 'David Dreier', 'Melissa Bean', 'Evan Shelby Alexander', 'Robert Price', 'Hank Johnson', 'William Branch Giles', 'Chris Carney', 'John Brademas', 'Gabriel Duvall', 'Dana Rohrabacher', 'Tom Coburn', 'Earl Pomeroy', 'Peter Plympton Smith', 'Dwight Foster', 'Joshua Sands', 'Dennis Cardoza', 'Maxine Waters', 'Hugh Caperton', 'Thomas Henderson', 'Joseph Gurney Cannon', 'Kerry Bentivolio', 'Tim Johnson', 'John Fowler', 'John Reber', 'William S. Holman', 'John James Flynt, Jr.', 'Cathy McMorris Rodgers', 'John Lewis', 'Filemon Vela, Jr.', 'John P. Saylor', 'Barney Frank', 'Michael E. Capuano', 'Mervyn M. Dymally', 'Simeon Baldwin', 'William V. Roth, Jr.', 'Emanuel Cleaver', 'John Reed, Sr.', 'Charlie Wilson', 'Jim Jordan', 'Nita Lowey', 'Pat Swindall', 'Sheila Jackson Lee', 'Adam Boyd', 'William Floyd', 'John J. McGrath', 'Gabrielle Giffords', 'John Holmes', 'Calvin Goddard', 'Rob Wittman', 'James A. Garfield', 'Bruce Vento', 'Hale Boggs', 'Isaac N. Morris', 'Henry Clay', 'Hezekiah L. Hosmer', 'Tommy F. Robinson', 'Suzan DelBene', 'William A. Barrett', 'Thomas Lowndes', 'Harry C. Ransley', 'Benjamin B. Blackburn', 'Patrick McHenry', 'Alfred Buckwalter Garner', 'Absalom Willis Robertson', 'Alexander W. Buel', 'Frank Pallone', 'Stephen Bullock', 'John Conyers', 'Devin Nunes', 'William Findley', 'Tim Ryan', 'Lyle Williams', 'James Linn', 'Carolyn Maloney', 'Nydia Velázquez', 'Sam Farr', 'Carroll Hubbard', 'Raúl Grijalva', 'Pete Gallego', 'David Thomas', 'Isaac Van Horne', 'E. Ross Adair', 'Robert Rutherford', 'Nathan Bryan', 'Grace Meng', 'John Sevier', 'Richard Sprigg, Jr.', 'John Dennis', 'Max Baucus', 'Thomas Sprigg', 'James M. Beck'}
            Answers = 1503, P = 0.000665, R = 1.000000, F1 = 0.001330
          } [0.048s]
          Answers = 1503, P = 0.000665, R = 1.000000, F1 = 0.001330
        } [0.048s]
        Checking schema 25 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.members', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 9
            Final Answer: {'Chief of Staff', 'Member of Congress', 'United States Representative', 'Speaker of the United States House of Representatives', 'Minority Whip of the United States House of Representatives', 'Minority Leader of the United States House of Representatives', 'Majority leader', 'Minority leader', 'Party leaders of the United States House of Representatives'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 26 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.members', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 512
            Final Answer: {"South Carolina's 8th congressional district", "Washington's 4th congressional district", "Ohio's 15th congressional district", "New Mexico's 1st congressional district", "New Jersey's 13th congressional district", "New Jersey's 6th congressional district", "Texas's 27th congressional district", "Michigan's 14th congressional district", "New Hampshire's at-large congressional district", "Pennsylvania's 7th congressional district", "North Carolina's 8th congressional district", "Arizona's 6th congressional district", "Florida's 16th congressional district", "Texas's 6th congressional district", "Vermont's 4th congressional district", "North Carolina's 6th congressional district", "Michigan's 13th congressional district", "Ohio's 11th congressional district", "Washington's 10th congressional district", "Colorado's 5th congressional district", 'California’s 31st congressional district', "Colorado's 3rd congressional district", "Arizona's 9th congressional district", "Indiana's 3rd congressional district", "New York's 21st congressional district", "Ohio's 13th congressional district", "North Carolina's 5th congressional district", "Oklahoma's 2nd congressional district", "Georgia's 8th congressional district", "Georgia's 1st congressional district", "Pennsylvania's 2nd congressional district", "Indiana's 8th congressional district", "Illinois's 17th congressional district", "Iowa's 4th congressional district", "Texas's 28th congressional district", "West Virginia's 2nd congressional district", "Colorado's 4th congressional district", "Illinois's 11th congressional district", "Virginia's 17th congressional district", "Ohio's 14th congressional district", "Wisconsin's 6th congressional district", "Indiana's 4th congressional district", 'California’s 53rd congressional district', "Washington's 2nd congressional district", "Florida's 11th congressional district", "New York's 14th congressional district", "Oklahoma's 4th congressional district", 'California’s 29th congressional district', "Kentucky's 1st congressional district", "South Carolina's 2nd congressional district", "Maryland's 2nd congressional district", "Indiana's 6th congressional district", "Ohio's at-large congressional district", "Tennessee's 1st congressional district", "Texas's 5th congressional district", 'California’s 32nd congressional district', "Kentucky's 4th congressional district", "Wisconsin's 4th congressional district", "Arkansas's 2nd congressional district", 'California’s 42nd congressional district', 'California’s 51st congressional district', 'California’s 7th congressional district', "Massachusetts's 14th congressional district", "Oklahoma's 6th congressional district", "Illinois's 15th congressional district", "Illinois's 5th congressional district", 'Georgia’s 7th congressional district', "Pennsylvania's 17th congressional district", "New Mexico's 3rd congressional district", "Colorado's 2nd congressional district", "New York's 28th congressional district", "Georgia's 13th congressional district", "Illinois's 12th congressional district", "Indiana's 5th congressional district", "Southwest Territory's at-large congressional district", "Tennessee's 5th congressional district", "Nevada's 2nd congressional district", "Connecticut's at-large congressional district", "Louisiana's 6th congressional district", "Nebraska's 3rd congressional district", "Illinois's 3rd congressional district", 'California’s 47th congressional district', "Virginia's 12th congressional district", "Arizona's 2nd congressional district", "Ohio's 18th congressional district", "Alaska's at-large congressional district", "New Jersey's at-large congressional district", "Pennsylvania's 14th congressional district", "New Jersey's 7th congressional district", "Virginia's 4th congressional district", "Pennsylvania's at-large congressional district", "Puerto Rico's at-large congressional district", "Missouri's 6th congressional district", "Illinois's 1st congressional district", "Massachusetts's 16th congressional district", "Florida's 6th congressional district", "West Virginia's 1st congressional district", "Texas's 34th congressional district", "New Jersey's 2nd congressional district", "Oregon's 1st congressional district", 'California’s 30th congressional district', "North Carolina's 12th congressional district", "Arizona's 4th congressional district", "New York's 5th congressional district", "Tennessee's 8th congressional district", "Texas's 29th congressional district", "Virginia's 7th congressional district", 'California’s 38th congressional district', "Illinois's 6th congressional district", "Indiana's 7th congressional district", "Georgia's 9th congressional district", "Michigan's 15th congressional district", "Massachusetts's 6th congressional district", "Missouri's 5th congressional district", "Maryland's 8th congressional district", "Arkansas's 4th congressional district", "Pennsylvania's 9th congressional district", 'California’s 40th congressional district', "New York's 15th congressional district", "Ohio's 1st congressional district", "Illinois's 13th congressional district", "New York's 24th congressional district", 'California’s 16th congressional district', "Indiana's 9th congressional district", "Virginia's 9th congressional district", "Massachusetts's 1st congressional district", "Michigan's 17th congressional district", "Missouri's 2nd congressional district", 'California’s 46th congressional district', "Massachusetts's 17th congressional district", "Ohio's 7th congressional district", "Pennsylvania's 13th congressional district", "Illinois's 4th congressional district", "New Jersey's 5th congressional district", "Kentucky's 3rd congressional district", "Florida's 24th congressional district", "Washington's 7th congressional district", 'California’s 41st congressional district', "Florida's 12th congressional district", "Minnesota's 6th congressional district", "South Carolina's 6th congressional district", "Idaho's 1st congressional district", "Virginia's 2nd congressional district", "Montana's 1st congressional district", 'California’s 26th congressional district', "New Jersey's 9th congressional district", 'California’s 37th congressional district', "Vermont's 1st congressional district", "Virginia's 11th congressional district", "New York's 12th congressional district", "Michigan's 2nd congressional district", 'California’s 48th congressional district', "Minnesota's 7th congressional district", "Texas's 31st congressional district", "Indiana's 2nd congressional district", 'California’s 2nd congressional district', "Pennsylvania's 23rd congressional district", "Kentucky's 2nd congressional district", "Ohio's 2nd congressional district", 'Alabama House District 2', "Connecticut's 1st congressional district", "Utah's 1st congressional district", "Alabama's 6th congressional district", "Mississippi's 2nd congressional district", "Pennsylvania's 18th congressional district", "Maryland's 3rd congressional district", "Georgia's at-large congressional district", "New York's 10th congressional district", "Alabama's 5th congressional district", "Kansas's 4th congressional district", "Virginia's 22nd congressional district", "Delaware's at-large congressional district", 'California’s 22nd congressional district', "Tennessee's 6th congressional district", "Northern Mariana Islands' At-large congressional district", "Virginia's 6th congressional district", "Pennsylvania's 6th congressional district", "Wisconsin's 8th congressional district", "Oregon's 3rd congressional district", "Georgia's 5th congressional district", "Virginia's 23rd congressional district", "Ohio's 6th congressional district", "Mississippi's at-large congressional district", "Louisiana's 1st congressional district", "Massachusetts's at-large congressional seat", "Virginia's 20th congressional district", "Florida's 26th congressional district", "Florida's 2nd congressional district", "New Jersey's 12th congressional district", "Illinois's 14th congressional district", "Virginia's 18th congressional district", "Illinois's 7th congressional district", "Mississippi's 5th congressional district", "Nevada's 3rd congressional district", 'New Hampshire’s 1st congressional district', "Kansas's 1st congressional district", "Oregon's 2nd congressional district", 'California’s 24th congressional district', "Oklahoma's 3rd congressional district", "Florida's 19th congressional district", "United States Virgin Islands's at-large congressional district", "Tennessee's 7th congressional district", "Pennsylvania's 5th congressional district", "Guam's at-large congressional district", "Louisiana's 5th congressional district", "Virginia's 14th congressional district", "Massachusetts's 3rd congressional district", "Georgia's 12th congressional district", 'California’s 17th congressional district', "North Carolina's 3rd congressional district", "Arizona's 5th congressional district", "Rhode Island's at-large congressional district", "Connecticut's 5th congressional district", "Virginia's 1st congressional district", "Arizona's 1st congressional district", "Iowa's 2nd congressional district", "Michigan's 10th congressional district", "Maine's 2nd congressional district", "Maine's 1st congressional district", "Texas's 3rd congressional district", 'California’s 1st congressional district', "Kansas's 3rd congressional district", "Arkansas's 1st congressional district", "Massachusetts's 9th congressional district", "Pennsylvania's 8th congressional district", "New York's 25th congressional district", "Virginia's 16th congressional district", 'California’s 23rd congressional district', "Wisconsin's 1st congressional district", "Michigan's 5th congressional district", "New York's 3rd congressional district", "Missouri's 8th congressional district", "Indiana's 1st congressional district", "Texas's 22nd congressional district", "Texas's 10th congressional district", 'California’s 33rd congressional district', "Texas's 14th congressional district", "Texas's 13th congressional district", "Florida's 3rd congressional district", 'California’s 45th congressional district', "South Carolina's 7th congressional district", 'Pennsylvania', "Georgia's 10th congressional district", "Georgia's 2nd congressional district", "Michigan's 7th congressional district", "Texas's 36th congressional district", "Utah's 2nd congressional district", "District of Columbia's at-large congressional district", "Rhode Island's 2nd congressional district", "Texas's 23rd congressional district", "Pennsylvania's 4th congressional district", "Iowa's 3rd congressional district", 'California’s 39th congressional district', "Michigan's 6th congressional district", "Alabama's 1st congressional district", "Texas's 11th congressional district", "Wyoming's at-large congressional district", "Minnesota's 1st congressional district", "Mississippi's 3rd congressional district", 'California’s 8th congressional district', "Massachusetts's 13th congressional district", "Pennsylvania's 1st congressional district", 'California’s 49th congressional district', "Florida's 5th congressional district", "West Virginia's 4th Congressional District", "Texas's 18th congressional district", "Tennessee's 3rd congressional district", "Arizona's 8th congressional district", "Ohio's 4th congressional district", "Florida's 17th congressional district", "New York's 20th congressional district", "Kentucky's 9th congressional district", "Missouri's 7th congressional district", "Florida's 1st congressional district", "Michigan's 16th congressional district", "Connecticut's 3rd congressional district", "Wisconsin's 2nd congressional district", "Texas's 17th congressional district", "New Mexico's 2nd congressional district", "New York's 26th congressional district", "Georgia's 11th congressional district", "New York's 23rd congressional district", "Nebraska's 2nd congressional district", "Georgia's 14th congressional district", 'Tennessee', "Tennessee's 4th congressional district", "Pennsylvania's 10th congressional district", "Alabama's 4th congressional district", "Pennsylvania's 16th congressional district", "Kentucky's 8th congressional district", 'California’s 11th congressional district', "Ohio's 12th congressional district", "Virginia's 5th congressional district", "Massachusetts's 12th congressional district", "American Samoa's at-large congressional district", "Colorado's 7th congressional district", "Oregon's 5th congressional district", "Arizona's 7th congressional district", "Vermont's 2nd congressional district", "Illinois's 2nd congressional district", "South Carolina's 4th congressional district", 'California’s 3rd congressional district', "Hawaii's at-large congressional district", 'California’s 5th congressional district', "Florida's 18th congressional district", "MN's 4th Congressional District", "Texas's 26th congressional district", "Virginia's 13th congressional district", "Connecticut's 2nd congressional district", "Florida's 23rd congressional district", 'California’s 15th congressional district', "New York's 2nd congressional district", 'California’s 13th congressional district', "Mississippi's 4th congressional district", 'California’s 34th congressional district', 'California’s 18th congressional district', "Florida's 15th congressional district", 'Hawaiis 2nd congressional district', "Massachusetts's 2nd congressional district", "Alabama's 7th congressional district", "Ohio's 3rd congressional district", "Ohio's 16th congressional district", "Nevada's 1st congressional district", "North Carolina's 1st congressional district", "New York's 29th congressional district", "Missouri's 3rd congressional district", "Texas's 19th congressional district", "Wisconsin's 9th congressional district", 'California’s 6th congressional district', "New York's 8th congressional district", 'Alabama House District 5', "New York's 4th congressional district", "North Carolina's 13th congressional district", "New York's 18th congressional district", "West Virginia's 3rd congressional district", "Massachusetts's 5th congressional district", "Louisiana's 3rd congressional district", "Illinois's 19th congressional district", "Virginia's 15th congressional district", "Ohio's 10th congressional district", "Virginia's 3rd congressional district", "Georgia's 4th congressional district", "Wisconsin's 3rd congressional district", 'California’s 28th congressional district', 'California’s 14th congressional district', 'California’s 50th congressional district', "New York's 17th congressional district", "Montana's at-large congressional district", "Massachusetts's 15th congressional district", "Texas's 12th congressional district", "Florida's 4th congressional district", "Ohio's 5th congressional district", "Oklahoma's 5th congressional district", "Texas's 1st congressional district", "Florida's 8th congressional district", "Minnesota's 5th congressional district", "Kentucky's 6th congressional district", "Pennsylvania's 11th congressional district", "Idaho's 2nd congressional district", "New York's 22nd congressional district", "Maryland's 5th congressional district", "Texas's 32nd congressional district", "Ohio's 17th congressional district", "Colorado's 1st congressional district", "Florida's 21st congressional district", "New York's 9th congressional district", "Florida's 22nd congressional district", 'California’s 27th congressional district', "Maryland's 4th congressional district", "Texas's 7th congressional district", "Vermont's 3rd congressional district", "Virginia's 21st congressional district", "Michigan's 4th congressional district", "Michigan's 9th congressional district", 'California’s 44th congressional district', 'California’s 9th congressional district', "Texas's 4th congressional district", "Massachusetts's 8th congressional district", 'California’s 25th congressional district', "New York's 31st congressional district", "Michigan's 1st congressional district", "Illinois's 20th congressional district", "Alabama's 3rd congressional district", "Rhode Island's 1st congressional district", "New Jersey's 11th congressional district", "Massachusetts's 7th congressional district", "Utah's 4th congressional district", "Michigan's 8th congressional district", "New Jersey's 4th congressional district", "Wisconsin's 5th congressional district", "Utah's 3rd congressional district", "Massachusetts's 10th congressional district", "New York's 11th congressional district", "Illinois's 8th congressional district", "New York's 1st congressional district", 'Hawaiis 1st congressional district', "Minnesota's 8th congressional district", "New York's 30th congressional district", "Massachusetts's 4th congressional district", "Maryland's 7th congressional district", "Tennessee's 9th congressional district", "Texas's 33rd congressional district", "Minnesota's 2nd congressional district", "Mississippi's 1st congressional district", "Missouri's 9th congressional district", "Illinois's 10th congressional district", "Colorado's 6th congressional district", "Texas's 2nd congressional district", "Alabama's 2nd congressional district", "Iowa's 1st congressional district", 'California’s 43rd congressional district', "Wisconsin's 7th congressional district", "Tennessee's 2nd congressional district", "Vermont's at-large congressional district", 'California’s 10th congressional district', "Texas's 9th congressional district", "North Carolina's 11th congressional district", "Missouri's 1st congressional district", "New Jersey's 8th congressional district", "Texas's 16th congressional district", "Missouri's 4th congressional district", "Georgia's 3rd congressional district", "Georgia's 6th congressional district", "Texas's 25th congressional district", "Louisiana's 2nd congressional district", "North Carolina's 2nd congressional district", "Pennsylvania's 15th congressional district", "Washington's 8th congressional district", "Texas's 21st congressional district", "Michigan's 11th congressional district", "Illinois's 18th congressional district", "Maryland's 6th congressional district", "New York's 7th congressional district", "Florida's 27th congressional district", "Florida's 7th congressional district", "Florida's 9th congressional district", "Massachusetts's 11th congressional district", "Tennessee's at-large congressional district", "Ohio's 8th congressional district", "Florida's 10th congressional district", "Florida's 25th congressional district", "Minnesota's 4th congressional district", "Minnesota's 3rd congressional district", "Washington's 6th congressional district", "Louisiana's 7th congressional district", "Iowa's 5th congressional district", "South Dakota's at-large congressional district", "Washington's 5th congressional district", 'California’s 20th congressional district', "New Jersey's 10th congressional district", "New York's 16th congressional district", "Arizona's 3rd congressional district", "Nevada's 4th congressional district", "Texas's 35th congressional district", "Virginia's 19th congressional district", 'California’s 21st congressional district', "South Carolina's 5th congressional district", "Washington's 1st congressional district", "Louisiana's 4th congressional district", "Oklahoma's 1st congressional district", "New Jersey's 1st congressional district", "Kansas's 2nd congressional district", "Pennsylvania's 19th congressional district", 'California’s 36th congressional district', "Florida's 14th congressional district", "South Carolina's 3rd congressional district", "North Carolina's 9th congressional district", "Texas's 15th congressional district", "Ohio's 19th congressional district", "New York's 13th congressional district", 'California’s 52nd congressional district', "North Carolina's 7th congressional district", "Oregon's 4th congressional district", "Pennsylvania's 3rd congressional district", "Nebraska's 1st congressional district", "Washington's 3rd congressional district", "North Dakota's at-large congressional district", "New York's 6th congressional district", "Texas's 30th congressional district", "South Carolina's 1st congressional district", "Maine's 3rd congressional district", 'California’s 35th congressional district', 'New Hampshire’s 2nd congressional district', "Illinois' 21st Congressional District", "Michigan's 3rd congressional district", "New York's 27th congressional district", "Washington's 9th congressional district", 'California’s 4th congressional district', "Texas's at-large congressional seat", "Pennsylvania's 12th congressional district", "Texas's 24th congressional district", "Virginia's 10th congressional district", "Texas's 20th congressional district", "New York's 19th congressional district", "Illinois's 16th congressional district", "Florida's 13th congressional district", 'California’s 19th congressional district', "New Jersey's Third Congressional District", "Maryland's 1st congressional district", "Michigan's 12th congressional district", "Kentucky's 5th congressional district", "Arkansas's 3rd congressional district", "Florida's 20th congressional district", "Texas's 8th congressional district", "North Carolina's 4th congressional district", "Illinois's 9th congressional district", "Virginia's 8th congressional district", "Connecticut's 4th congressional district", 'California’s 12th congressional district', "Ohio's 9th congressional district", "North Carolina's 10th congressional district"}
            Answers = 511, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 511, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 27 / 38: {
          [('Main', '==', 'm.0b3wk', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 18
            Final Answer: {'Robert Gibbs', 'Ray LaHood', 'Phil Schiliro', 'Amy Walter', 'Bill Richardson', 'Julia Allison', 'John M. McHugh', 'David Plouffe', 'Jackie Norris', 'Laurie S. Fulton', 'Hilary McQuaide', 'Lynn Morley Martin', 'Alyssa Mastromonaco', 'Shephard W. Hill', 'Kerry Knott', 'Deborah Rhode', 'Ziad S. Ojakli', 'Leon Panetta'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 28 / 38: {
          [('Main', '==', 'm.0b3wk', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'United States House of Representatives'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 29 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.members', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 408
            Final Answer: {'1855', '1821', '1791', '1946', '1799', '1816', '1993', '1951', '1976', '1996', '1899', '1853', '1974', '2012', '1905', '1807', '2001', '1808', '1925', '1915', '1831', '2013', '1881', '1815', '1817', '1820', '1798', '1849', '1837', '1955', '1975', '1873', '1943', '1916', '1854', '1953', '1922', '1966', '1860', '1927', '1995', '1795', '1796', '1901', '1945', '1897', '1800', '1903', '2004', '1962', '1789', '1933', '1967', '1921', '1936', '1809', '1870', '1941', '1845', '1811', '1868', '1804', '1965', '1919', '1954', '1983', '1875', '2006', '1918', '1949', '1792', '1833', '1971', '1867', '1869', '1893', '1889', '1825', '1942', '1797', '1992', '1864', '1999', '1913', '1819', '1959', '1813', '1879', '1991', '1940', '1779', '1801', '1894', '2010', '1841', '1872', '2993', '1885', '2011', '2005', '1979', '1805', '1822', '1973', '2007', '1863', '1969', '1931', '1883', '1823', '1987', '1827', '1857', '1923', '1988', '1829', '1814', '1793', '1935', '1806', '1865', '1961', '1891', '1835', '1856', '1985', '1907', '1909', '1981', '1947', '1843', '1917', '1990', '1929', '2008', '1963', '1876', '1803', '1794', '1802', '1780', '1790', '1834', '1847', '1871', '1994', '2003', '1986', '1957', '1937', '1877', '1839', '1859', '1939', '1844', '1887', '2009', '1977', '1998', '2002', '1906', '1911', '1895', '1989', '1851', '2989', '1861', '1997'}
            Answers = 168, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 168, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 30 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.members', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 400
            Final Answer: {'1855', '1821', '1791', '1946', '1799', '1816', '1993', '1951', '1976', '1899', '1853', '2000', '1996', '2012', '1905', '1807', '2001', '1808', '1925', '1915', '1831', '2013', '1881', '1815', '1817', '1820', '1798', '1818', '1837', '1849', '1955', '1873', '1975', '1943', '1812', '1916', '1953', '1922', '1860', '1995', '1927', '1795', '1796', '1901', '1945', '1800', '1897', '1903', '1933', '1967', '1921', '1936', '1809', '1941', '1845', '1811', '1804', '1965', '1954', '1919', '1970', '1983', '1875', '2006', '1836', '1949', '1867', '1971', '1833', '1792', '1978', '1869', '1893', '1825', '1942', '1889', '1797', '1992', '1864', '1980', '1999', '1934', '1913', '1819', '1959', '1813', '1879', '1991', '1940', '1801', '2010', '1841', '1872', '1885', '1848', '2011', '1878', '2005', '1979', '1805', '1822', '1973', '2007', '1969', '1863', '1846', '1931', '1883', '1823', '1987', '1827', '1857', '1923', '1829', '1814', '1793', '1806', '1865', '1961', '1891', '1835', '1856', '1782', '1907', '1985', '1909', '1981', '1947', '1843', '1917', '1990', '1929', '1950', '2008', '1963', '1876', '1803', '1794', '1802', '1780', '1790', '1834', '1847', '1871', '1994', '2003', '1957', '1937', '1877', '1810', '1859', '1839', '1939', '1844', '1887', '2009', '1977', '1998', '2002', '1906', '1830', '1911', '1895', '1989', '1851', '1861', '1997'}
            Answers = 167, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 167, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 31 / 38: {
          [('Main', '==', 'm.0b3wk', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 32 / 38: {
          [('Main', '==', 'm.0b3wk', ['government.governmental_body.members', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:government.governmental_body.members ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 2
            Final Answer: {'Mark Souder', 'Dick Armey'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 33 / 38: {
          [('Main', '==', 'm.0b3wk', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'1443'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 34 / 38: {
          [('Main', '==', 'm.0b3wk', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 35 / 38: {
          [('Main', '==', 'm.0b3wk', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'United States House of Representatives'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 36 / 38: {
          [('Main', '==', 'm.0b3wk', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0b3wk fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'United States House of Representatives'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 37 / 38: {
          [('Main', '==', 'm.0b3wk', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:15:13] Q_Schema Request: {
            WebQ_689|SELECT DISTINCT ?o2 WHERE { fb:m.0b3wk fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.0b3wk'}
            Query return lines = 1
            Final Answer: {'1308'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        38 / 38 coarse schemas kept with ans_size > 0.
      } [0.247s]
      Coarse level ended, resulting in 38 schemas.
    } [0.250s]
    Type level searching (total types = 10): {
      Current: 0 / 38
[{'government.governmental_jurisdiction'}]
[{'government.governmental_body'}]
[{'government.governmental_jurisdiction'}]
[{'government.government_office_or_title'}]
[{'government.legislative_committee'}]
[{'government.governmental_body'}]
[{'government.legislative_session'}]
[{'book.written_work'}]
[{'user.sprocketonline.economics.legislation'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'government.government_position_held'}, {'government.legislative_session'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
      0 typed schemas retrieved from 38 coarse schemas.
      Calculating F1 for 0 typed schemas: {
        0 / 0 typed schemas kept with ans_size > 0.
      } [0.000s]
      Typed level ended, resulting in 38 schemas.
    } [0.002s]
    Time level searching (total times = 0): {
      Current: 0 / 38
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.legislative_committee.date_formed', 'government.legislative_committee.date_dissolved'}]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.legislative_session.date_began', 'government.legislative_session.date_ended'}]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [{'user.sprocketonline.economics.legislation.effective_from', 'user.sprocketonline.economics.legislation.date_passed'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.legislative_session.date_began', 'government.legislative_session.date_ended'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 38 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 38 schemas.
    } [0.001s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 38
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[set()]
[set()]
[{'government.legislative_committee.date_formed', 'government.legislative_committee.date_dissolved'}]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.legislative_session.date_began', 'government.legislative_session.date_ended'}]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[{'user.sprocketonline.economics.legislation.effective_from', 'user.sprocketonline.economics.legislation.date_passed'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.legislative_session.date_began', 'government.legislative_session.date_ended'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
      0 ordinal schemas retrieved from 38 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 38 schemas.
    } [0.001s]
    [2020-12-03 14:15:13] buffer saved.
    38 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0689_schema].
  } [37.193s]
  Entering Q 690 / 5810 [b'who all has jason kidd played for?']: {
    Show 1 E + 10 T + 0 Tm + 0 Ord = 11 linkings: {
      #00 Entity: [3, 5) (jason kidd) == m.02cg2v (Jason_Kidd) {'score': 51703.714274, 'source': 0.0}
      #01 Type: [5, 6) (played) == sports.pro_sports_played (sports played) {'sim': 0.790985}
      #02 Type: [5, 6) (played) == theater.play (play) {'sim': 0.787711}
      #03 Type: [5, 7) (played for) == games.playing_card_game_play_direction (playing card game play direction) {'sim': 0.766106}
      #04 Type: [0, 3) (who all has) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.727674}
      #05 Type: [5, 7) (played for) == games.playing_card_game (playing card game) {'sim': 0.723942}
      #06 Type: [0, 3) (who all has) == media_common.lost_work (lost work) {'sim': 0.714005}
      #07 Type: [0, 3) (who all has) == medicine.notable_person_with_medical_condition (public figure with medical condition) {'sim': 0.692172}
      #08 Type: [5, 7) (played for) == cvg.musical_game (musical game) {'sim': 0.678016}
      #09 Type: [0, 2) (who all) == location.us_state (us state) {'sim': 0.674097}
      #10 Type: [1, 3) (all has) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.673878}
    } [0.000s]
    11 link data save to file.
    Coarse level searching (total entities = 1): {
      [Len-1||F1/1] (2020-12-03 14:15:50) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02cg2v ?p1 ?o1 . }
        [2020-12-03 14:15:50] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02cg2v ?p1 ?o1 . }
          Query return lines = 41
        } [0.004s]
        Filt_Query_Ret = 18 / 41 ( 0.005s)
      } [0.005s]
      [Len-2||F1/1] (2020-12-03 14:15:50) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02cg2v ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:50] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02cg2v ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 576
        } [1.647s]
        Filt_Query_Ret = 72 / 576 ( 1.650s)
      } [1.651s]
      90 coarse schemas retrieved from scratch.
      Calculating F1 for 90 coarse schemas: {
        Current: 0 / 90
        Checking schema 0 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02cg2v fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:15:52] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 WHERE { fb:m.02cg2v fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'1973'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [3.708s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [3.709s]
        Checking schema 1 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 2
            Final Answer: {'Irish American', 'African American'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 3 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 2
            Final Answer: {'Anne Kidd', 'Steve Kidd'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 4 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Catholicism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 5 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02cg2v fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 WHERE { fb:m.02cg2v fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'1.93'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 6 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.team'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:basketball.basketball_player.team ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:basketball.basketball_player.team ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 7 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.daylifetopics.daylife_id.daylife_topic_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:base.daylifetopics.daylife_id.daylife_topic_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:base.daylifetopics.daylife_id.daylife_topic_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 8 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 3
            Final Answer: {'Trey Jason Kidd', 'Miah Kidd', 'Jazelle Kidd'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 9 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02cg2v fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 WHERE { fb:m.02cg2v fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'95'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 10 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.position_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:basketball.basketball_player.position_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:basketball.basketball_player.position_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Point guard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 11 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.daylifetopics.daylife_id.daylife_topic_id'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:base.daylifetopics.daylife_id.daylife_topic_id ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:base.daylifetopics.daylife_id.daylife_topic_id ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 12 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Basketball player'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 13 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 14 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'San Francisco'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 15 / 90: {
          [('Main', '==', 'm.02cg2v', ['sports.pro_athlete.career_start'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02cg2v fb:sports.pro_athlete.career_start ?o1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 WHERE { fb:m.02cg2v fb:sports.pro_athlete.career_start ?o1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'1994'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 16 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.former_teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:basketball.basketball_player.former_teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:basketball.basketball_player.former_teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 17 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.daylifetopics.daylife_id.daylife_url_token'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:base.daylifetopics.daylife_id.daylife_url_token ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:base.daylifetopics.daylife_id.daylife_url_token ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 18 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'7.5e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 19 / 90: {
          [('Main', '==', 'm.02cg2v', ['sports.pro_athlete.teams', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Jason Kidd'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 20 / 90: {
          [('Main', '==', 'm.02cg2v', ['sports.pro_athlete.teams', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 21 / 90: {
          [('Main', '==', 'm.02cg2v', ['sports.pro_athlete.teams', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 5
            Final Answer: {'1996', '2012', '2001', '2008', '1994'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 22 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 3
            Final Answer: {'Denise Kidd', 'Kim Kidd'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 23 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 3
            Final Answer: {'Porschla Coleman', 'Joumana Kidd'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 24 / 90: {
          [('Main', '==', 'm.02cg2v', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 25 / 90: {
          [('Main', '==', 'm.02cg2v', ['celebrities.celebrity.sexual_relationships', 'celebrities.romantic_relationship.relationship_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:celebrities.celebrity.sexual_relationships ?o1 . ?o1 fb:celebrities.romantic_relationship.relationship_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:celebrities.celebrity.sexual_relationships ?o1 . ?o1 fb:celebrities.romantic_relationship.relationship_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Dated'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 26 / 90: {
          [('Main', '==', 'm.02cg2v', ['olympics.olympic_athlete.country', 'olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.country ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.country ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Jason Kidd'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 27 / 90: {
          [('Main', '==', 'm.02cg2v', ['olympics.olympic_athlete.country', 'olympics.olympic_athlete_affiliation.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.country ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.country ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 28 / 90: {
          [('Main', '==', 'm.02cg2v', ['olympics.olympic_athlete.medals_won', 'olympics.olympic_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'2000 Summer Olympics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 29 / 90: {
          [('Main', '==', 'm.02cg2v', ['olympics.olympic_athlete.medals_won', 'olympics.olympic_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Basketball at the 2000 Summer Olympics - Men'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 30 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Jason Kidd'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 31 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.blocks'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.blocks ?o2 . }
          [2020-12-03 14:15:55] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.blocks ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 14
            Final Answer: {'19', '11', '15', '9', '26', '23', '25', '24', '8', '28', '29', '12', '20', '14'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 32 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fta'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fta ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fta ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 15
            Final Answer: {'54', '245', '239', '331', '111', '247', '209', '69', '244', '275', '403', '96', '249', '192', '230'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 33 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.ftm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ftm ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ftm ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 16
            Final Answer: {'167', '91', '44', '206', '46', '179', '328', '229', '181', '142', '192', '66', '203', '201', '339', '194'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.037s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.037s]
        Checking schema 34 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.ft_percentage'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ft_percentage ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.ft_percentage ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 15
            Final Answer: {'0.692', '0.815', '0.827', '0.757', '0.667', '0.814', '0.829', '0.698', '0.688', '0.799', '0.778', '0.795', '0.841', '0.82', '0.74'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 35 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.offensive_rebounds'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.offensive_rebounds ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.offensive_rebounds ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 16
            Final Answer: {'91', '59', '129', '86', '110', '135', '108', '87', '94', '34', '96', '203', '30', '85', '152', '36'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 36 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_player_fouls'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_player_fouls ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_player_fouls ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 7
            Final Answer: {'2.6', '2', '2.2', '1.6', '1.8', '1.9', '1.7'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 37 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.three_fga'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fga ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fga ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 16
            Final Answer: {'166', '236', '396', '395', '65', '233', '232', '361', '257', '100', '370', '364', '293', '123', '358', '76'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 38 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.games'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.games ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.games ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 12
            Final Answer: {'82', '81', '80', '22', '77', '67', '79', '51', '33', '66', '29', '50'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 39 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_assists'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_assists ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_assists ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 14
            Final Answer: {'8.3', '10.1', '7.7', '9.5', '8.4', '9', '10.4', '9.2', '9.7', '9.1', '10.8', '8.9', '9.9', '9.8'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 40 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.three_fgm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fgm ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_fgm ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 16
            Final Answer: {'133', '56', '126', '40', '129', '70', '84', '73', '69', '35', '139', '117', '21', '94', '45', '124'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 41 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.player_fouls'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player_fouls ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.player_fouls ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 14
            Final Answer: {'148', '171', '127', '155', '110', '157', '72', '75', '90', '108', '136', '142', '146', '42'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 42 / 90: {
          [('Main', '==', 'm.02cg2v', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Jason Kidd'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 43 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.salary'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.salary ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.salary ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'8.5e+06'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 44 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Dallas Mavericks'}
            Answers = 1, P = 1.000000, R = 0.250000, F1 = 0.400000
          } [0.008s]
          Answers = 1, P = 1.000000, R = 0.250000, F1 = 0.400000
        } [0.008s]
        Checking schema 45 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 46 / 90: {
          [('Main', '==', 'm.02cg2v', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 3
            Final Answer: {'NBA Now! Showmen of Today', '1 Love', 'NBA Finals 2002: Official Championship'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 47 / 90: {
          [('Main', '==', 'm.02cg2v', ['sports.pro_athlete.teams', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 4
            Final Answer: {'2001', '1996', '2008', '2012'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 48 / 90: {
          [('Main', '==', 'm.02cg2v', ['sports.pro_athlete.teams', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 4
            Final Answer: {'Dallas Mavericks', 'Phoenix Suns', 'New York Knicks', 'Brooklyn Nets'}
            Answers = 4, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.005s]
          Answers = 4, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.005s]
        Checking schema 49 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 2
            Final Answer: {'1997', '2011'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 50 / 90: {
          [('Main', '==', 'm.02cg2v', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Like Mike'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 51 / 90: {
          [('Main', '==', 'm.02cg2v', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Jason Kidd'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 52 / 90: {
          [('Main', '==', 'm.02cg2v', ['celebrities.celebrity.sexual_relationships', 'celebrities.romantic_relationship.celebrity'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:celebrities.celebrity.sexual_relationships ?o1 . ?o1 fb:celebrities.romantic_relationship.celebrity ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:celebrities.celebrity.sexual_relationships ?o1 . ?o1 fb:celebrities.romantic_relationship.celebrity ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 2
            Final Answer: {'Hope Dworaczyk'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 53 / 90: {
          [('Main', '==', 'm.02cg2v', ['olympics.olympic_athlete.country', 'olympics.olympic_athlete_affiliation.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.country ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.country ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Basketball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 54 / 90: {
          [('Main', '==', 'm.02cg2v', ['olympics.olympic_athlete.medals_won', 'olympics.olympic_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 55 / 90: {
          [('Main', '==', 'm.02cg2v', ['olympics.olympic_athlete.medals_won', 'olympics.olympic_medal_honor.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Gold medal'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 56 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.rebounds'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.rebounds ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.rebounds ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 16
            Final Answer: {'428', '510', '188', '580', '488', '483', '90', '430', '414', '159', '553', '655', '504', '594', '339', '494'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 57 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_rebounds'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_rebounds ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_rebounds ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 13
            Final Answer: {'6.2', '6.8', '7.4', '4.1', '6.5', '8.2', '5.4', '4.8', '7.3', '6.3', '8.1', '6.4', '7.2'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 58 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fga'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fga ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fga ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 15
            Final Answer: {'698', '1293', '959', '859', '326', '858', '549', '908', '855', '1097', '244', '1244', '203', '905', '1138'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 59 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.turnovers'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.turnovers ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.turnovers ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 15
            Final Answer: {'81', '296', '167', '150', '261', '286', '213', '328', '250', '184', '214', '66', '226', '192', '76'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 60 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fg_percentage'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fg_percentage ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fg_percentage ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 16
            Final Answer: {'0.366', '0.369', '0.416', '0.444', '0.391', '0.404', '0.414', '0.423', '0.406', '0.426', '0.411', '0.384', '0.409', '0.381', '0.398', '0.385'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 61 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.season ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 14
            Final Answer: {'2003–04 NBA season', '1999–2000 NBA season', '2007–08 NBA season', '2004–05 NBA season', '1994–95 NBA season', '1998–99 NBA season', '1996–97 NBA season', '2000–01 NBA season', '1995–96 NBA season', '1997–98 NBA season', '2001–02 NBA season', '2005–06 NBA season', '2006–07 NBA season', '2002–03 NBA season'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 62 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.steals'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.steals ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.steals ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 15
            Final Answer: {'150', '127', '122', '162', '123', '179', '62', '74', '79', '134', '151', '166', '175', '45', '114'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 63 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.fgm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fgm ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.fgm ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 16
            Final Answer: {'366', '357', '310', '493', '330', '451', '445', '75', '340', '350', '515', '138', '369', '201', '368', '104'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 64 / 90: {
          [('Main', '==', 'm.02cg2v', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Basketball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 65 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 66 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Jason Kidd'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 67 / 90: {
          [('Main', '==', 'm.02cg2v', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Jason Kidd'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 68 / 90: {
          [('Main', '==', 'm.02cg2v', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 69 / 90: {
          [('Main', '==', 'm.02cg2v', ['sports.pro_athlete.teams', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.teams ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Point guard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 70 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 2
            Final Answer: {'University of California, Berkeley', 'St. Joseph Notre Dame High School'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 71 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Jason Kidd'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 72 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 73 / 90: {
          [('Main', '==', 'm.02cg2v', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 74 / 90: {
          [('Main', '==', 'm.02cg2v', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'Jason Kidd'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 75 / 90: {
          [('Main', '==', 'm.02cg2v', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'The Turner Family'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 76 / 90: {
          [('Main', '==', 'm.02cg2v', ['olympics.olympic_athlete.country', 'olympics.olympic_athlete_affiliation.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.country ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.country ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 2
            Final Answer: {'2008 Summer Olympics', '2000 Summer Olympics'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 77 / 90: {
          [('Main', '==', 'm.02cg2v', ['olympics.olympic_athlete.medals_won', 'olympics.olympic_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:olympics.olympic_athlete.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 12
            Final Answer: {'Ray Allen', 'Steve Smith', 'Vin Baker', 'Shareef Abdur-Rahim', 'Gary Payton', 'Kevin Garnett', 'Vince Carter', 'Allan Houston', 'Tim Hardaway', 'Alonzo Mourning', 'Antonio McDyess'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 78 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 3
            Final Answer: {'Dallas Mavericks', 'Phoenix Suns', 'Brooklyn Nets'}
            Answers = 3, P = 1.000000, R = 0.750000, F1 = 0.857143
          } [0.005s]
          Answers = 3, P = 1.000000, R = 0.750000, F1 = 0.857143
        } [0.005s]
        Checking schema 79 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_blocks'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_blocks ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_blocks ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 4
            Final Answer: {'0.3', '0.4', '0.2', '0.1'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 80 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.points'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.points ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.points ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 16
            Final Answer: {'1348', '287', '217', '382', '1041', '954', '846', '922', '1299', '1065', '1208', '1036', '959', '951', '1495', '577'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 81 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.defensive_rebounds'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.defensive_rebounds ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.defensive_rebounds ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 15
            Final Answer: {'520', '355', '465', '125', '252', '278', '60', '387', '403', '152', '350', '394', '343', '402', '494'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 82 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_turnovers'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_turnovers ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_turnovers ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 12
            Final Answer: {'2.8', '4', '3.7', '2.3', '3.4', '3.5', '2.7', '2.4', '3.6', '3', '2.5', '3.2'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 83 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_steals'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_steals ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_steals ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 9
            Final Answer: {'2.3', '2', '2.1', '2.2', '1.6', '1.5', '1.8', '1.9', '2.4'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 84 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.three_point_percentage'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_point_percentage ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.three_point_percentage ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 15
            Final Answer: {'0.356', '0.366', '0.297', '0.313', '0.341', '0.36', '0.321', '0.337', '0.352', '0.323', '0.272', '0.336', '0.4', '0.461', '0.343'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 85 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.assists'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.assists ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.assists ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 16
            Final Answer: {'530', '296', '678', '736', '745', '672', '539', '200', '545', '753', '711', '783', '607', '276', '618', '808'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 86 / 90: {
          [('Main', '==', 'm.02cg2v', ['basketball.basketball_player.player_statistics', 'basketball.basketball_player_stats.average_points'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_points ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:basketball.basketball_player.player_statistics ?o1 . ?o1 fb:basketball.basketball_player_stats.average_points ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 13
            Final Answer: {'16.9', '13.3', '14.4', '11.6', '18.7', '11.3', '14.3', '15.5', '13', '16.6', '11.7', '14.7', '9.9'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 87 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.popstra.celebrity.dated', 'base.popstra.dated.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 2
            Final Answer: {'Gabrielle Union'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 88 / 90: {
          [('Main', '==', 'm.02cg2v', ['sports.pro_athlete.sports_played_professionally', 'sports.pro_sports_played.career_start'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_start ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:sports.pro_athlete.sports_played_professionally ?o1 . ?o1 fb:sports.pro_sports_played.career_start ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'1994'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 89 / 90: {
          [('Main', '==', 'm.02cg2v', ['base.schemastaging.athlete_extra.salary', 'base.schemastaging.athlete_salary.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.date ?o2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 WHERE { fb:m.02cg2v fb:base.schemastaging.athlete_extra.salary ?o1 . ?o1 fb:base.schemastaging.athlete_salary.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        84 / 90 coarse schemas kept with ans_size > 0.
      } [4.667s]
      Coarse level ended, resulting in 84 schemas.
    } [6.322s]
    Type level searching (total types = 10): {
      Current: 0 / 84
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'people.person'}]
[{'type.float'}]
[{'basketball.basketball_position'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'celebrities.romantic_relationship'}, {'celebrities.romantic_relationship_type'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_event_competition'}]
[{'basketball.basketball_player_stats'}, {'basketball.basketball_player'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'sports.pro_sports_played'}, {'sports.pro_athlete'}]
[{'base.schemastaging.athlete_salary'}, {'type.float'}]
[{'base.schemastaging.athlete_salary'}, {'base.schemastaging.sports_team_extra'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'film.performance'}, {'film.film'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'celebrities.romantic_relationship'}, {'celebrities.celebrity'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_sport'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_medal'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'sports.sports_league_season'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'sports.pro_sports_played'}, {'sports.sport'}]
[{'base.schemastaging.athlete_salary'}, {'finance.currency'}]
[{'base.schemastaging.athlete_salary'}, {'base.schemastaging.athlete_extra'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_athlete'}]
[{'basketball.basketball_player_stats'}, {'basketball.basketball_team'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'basketball.basketball_player_stats'}, {'type.int'}]
[{'basketball.basketball_player_stats'}, {'type.float'}]
[{'base.popstra.dated'}, {'base.popstra.celebrity'}]
[{'sports.pro_sports_played'}, {'type.datetime'}]
[{'base.schemastaging.athlete_salary'}, {'type.datetime'}]
      6 typed schemas retrieved from 84 coarse schemas.
      Calculating F1 for 6 typed schemas: {
        Current: 0 / 6
        Checking schema 0 / 6: {
          [('Main', '==', 'm.02cg2v', ['people.person.parents']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 6: {
          [('Main', '==', 'm.02cg2v', ['people.person.children']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 2 / 6: {
          [('Main', '==', 'm.02cg2v', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02cg2v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 3 / 6: {
          [('Main', '==', 'm.02cg2v', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 4 / 6: {
          [('Main', '==', 'm.02cg2v', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 5 / 6: {
          [('Main', '==', 'm.02cg2v', ['people.person.education', 'education.education.student']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:56] Q_Schema Request: {
            WebQ_690|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02cg2v fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02cg2v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        0 / 6 typed schemas kept with ans_size > 0.
      } [0.034s]
      Typed level ended, resulting in 84 schemas.
    } [0.039s]
    Time level searching (total times = 0): {
      Current: 0 / 84
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.pro_sports_played.career_end', 'sports.pro_sports_played.career_start'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.pro_sports_played.career_end', 'sports.pro_sports_played.career_start'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
self.var_time_preds: [{'sports.pro_sports_played.career_end', 'sports.pro_sports_played.career_start'}, set()]
self.var_time_preds: [{'base.schemastaging.athlete_salary.date'}, set()]
      0 timed schemas retrieved from 84 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 84 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 84
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'sports.pro_sports_played.career_end', 'sports.pro_sports_played.career_start'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[set(), set()]
[{'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'sports.pro_sports_played.career_end', 'sports.pro_sports_played.career_start'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
[set(), set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
[{'sports.pro_sports_played.career_end', 'sports.pro_sports_played.career_start'}, set()]
[{'base.schemastaging.athlete_salary.date'}, set()]
      0 ordinal schemas retrieved from 84 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 84 schemas.
    } [0.002s]
    [2020-12-03 14:15:56] buffer saved.
    84 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0690_schema].
  } [10.024s]
  Entering Q 691 / 5810 [b'where is headquarters of verizon?']: {
    Show 4 E + 10 T + 0 Tm + 0 Ord = 14 linkings: {
      #00 Entity: [4, 5) (verizon) == m.02d532 (Verizon_Wireless) {'score': 194.498957, 'source': 0.0}
      #01 Entity: [4, 5) (verizon) == m.02rm7b (Verizon_Center) {'score': 1.53485, 'source': 1.0}
      #02 Entity: [4, 5) (verizon) == m.05g_ch (Verizon_FiOS) {'score': 8.472277, 'source': 0.0}
      #03 Entity: [4, 5) (verizon) == m.07_dn (Verizon_Communications) {'score': 9623.356594, 'source': 0.0}
      #04 Type: [3, 4) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #05 Type: [3, 4) (of) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.816341}
      #06 Type: [3, 4) (of) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.814276}
      #07 Type: [1, 4) (is headquarters of) == military.military_unit_place_of_origin (military unit place of origin) {'sim': 0.772996}
      #08 Type: [3, 4) (of) == measurement_unit.time_unit (unit of time) {'sim': 0.759887}
      #09 Type: [1, 4) (is headquarters of) == government.form_of_government (form of government) {'sim': 0.74567}
      #10 Type: [3, 4) (of) == chemistry.phase_of_matter (phase of matter) {'sim': 0.74294}
      #11 Type: [1, 4) (is headquarters of) == measurement_unit.area_unit (unit of area) {'sim': 0.740168}
      #12 Type: [1, 4) (is headquarters of) == location.capital_of_administrative_division (capital of administrative division) {'sim': 0.737169}
      #13 Type: [3, 4) (of) == measurement_unit.potential_unit (unit of potential) {'sim': 0.736018}
    } [0.000s]
    14 link data save to file.
    Coarse level searching (total entities = 4): {
      [Len-1||F1/4] (2020-12-03 14:16:00) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02d532 ?p1 ?o1 . }
        [2020-12-03 14:16:00] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02d532 ?p1 ?o1 . }
          Query return lines = 21
        } [0.003s]
        Filt_Query_Ret = 3 / 21 ( 0.004s)
      } [0.004s]
      [Len-1||F2/4] (2020-12-03 14:16:00) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02rm7b ?p1 ?o1 . }
        [2020-12-03 14:16:00] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02rm7b ?p1 ?o1 . }
          Query return lines = 17
        } [0.004s]
        Filt_Query_Ret = 7 / 17 ( 0.004s)
      } [0.004s]
      [Len-1||F3/4] (2020-12-03 14:16:00) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.05g_ch ?p1 ?o1 . }
        [2020-12-03 14:16:00] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.05g_ch ?p1 ?o1 . }
          Query return lines = 10
        } [0.003s]
        Filt_Query_Ret = 1 / 10 ( 0.003s)
      } [0.003s]
      [Len-1||F4/4] (2020-12-03 14:16:00) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.07_dn ?p1 ?o1 . }
        [2020-12-03 14:16:00] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.07_dn ?p1 ?o1 . }
          Query return lines = 39
        } [0.005s]
        Filt_Query_Ret = 3 / 39 ( 0.005s)
      } [0.006s]
      [Len-2||F1/4] (2020-12-03 14:16:00) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02d532 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:00] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02d532 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 0
        } [1.495s]
        Filt_Query_Ret = 0 / 0 ( 1.495s)
      } [1.495s]
      [Len-2||F2/4] (2020-12-03 14:16:01) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02rm7b ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:01] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02rm7b ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 0
        } [2.516s]
        Filt_Query_Ret = 0 / 0 ( 2.516s)
      } [2.516s]
      [Len-2||F3/4] (2020-12-03 14:16:04) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05g_ch ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:04] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05g_ch ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 65
        } [0.302s]
        Filt_Query_Ret = 6 / 65 ( 0.302s)
      } [0.302s]
      [Len-2||F4/4] (2020-12-03 14:16:04) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.07_dn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:04] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.07_dn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 0
        } [2.504s]
        Filt_Query_Ret = 0 / 0 ( 2.504s)
      } [2.504s]
      20 coarse schemas retrieved from scratch.
      Calculating F1 for 20 coarse schemas: {
        Current: 0 / 20
        Checking schema 0 / 20: {
          [('Main', '==', 'm.02d532', ['organization.organization.locations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d532 fb:organization.organization.locations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d532 fb:organization.organization.locations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d532'}
            Query return lines = 130
            Final Answer: {'Verizon Wireless, Castleton Square', 'Verizon Wireless, Cordova Mall', 'Verizon Wireless, SouthPark Mall - IL', 'Verizon Wireless, Brunswick Square', 'Verizon Wireless, Concord Mills', 'Verizon Wireless, Westfield Garden State Plaza', 'Verizon Wireless, Westfield Chicago Ridge', 'Verizon Wireless, Independence Center', 'Verizon Wireless, Northwoods Mall', 'Verizon Wireless, Tacoma Mall', 'Verizon Wireless, Rockaway Townsquare', 'Verizon Wireless, Emerald Square', 'Verizon Wireless, Livingston Mall', 'Verizon Wireless, Town Center at Cobb', 'Verizon Wireless, Walt Whitman Mall', 'Verizon Wireless, Westfield Palm Desert', 'Verizon Wireless, Pheasant Lane Mall', 'Verizon Wireless, Marley Station', 'Verizon Wireless, Westfield Brandon', 'Verizon Wireless, Westfield Gateway', 'Verizon Wireless, Solomon Pond Mall', 'Verizon Wireless, Westfield Belden Village', 'Verizon Wireless, The Shops at Riverside', 'Verizon Wireless, Westfield Southcenter', 'Verizon Wireless, Smith Haven Mall', 'Verizon Wireless, Eastland Mall', 'Verizon Wireless, Paddock Mall', 'Verizon Wireless, Ingram Park Mall', 'Verizon Wireless, North East Mall', 'Verizon Wireless, Northpark Mall', 'Verizon Wireless, Westfield Trumbull', 'Verizon Wireless, Southern Park Mall', 'Verizon Wireless, Westminster Mall', 'Verizon Wireless, Stoneridge Shopping Center', 'Verizon Wireless, Westfield Fashion Square', 'Verizon Wireless, Town Center at Boca Raton', 'Verizon Wireless, Jefferson Valley Mall', 'Verizon Wireless, Westfield Connecticut Post', 'Verizon Wireless, Miller Hill Mall', 'Verizon Wireless, Westfield Annapolis', 'Verizon Wireless, Santa Rosa Plaza', 'Verizon Wireless, Westfield Franklin Park', 'Verizon Wireless, Cottonwood Mall', 'Verizon Wireless, Tyrone Square Mall', 'Verizon Wireless, Edison Mall', 'Verizon Wireless, Briarwood Mall', 'Verizon Wireless, Orange Park Mall', 'Verizon Wireless, The Mall at Tuttle Crossing', 'Verizon Wireless, Northlake Mall', 'Verizon Wireless, Downtown at the Gardens', 'Verizon Wireless, Orland Square', 'Verizon Wireless, Port Charlotte Town Center', 'Verizon Wireless, Roosevelt Field', 'Verizon Wireless, Westfield Oakridge', 'Verizon Wireless, Northshore Mall', 'Verizon Wireless, Square One Mall', 'Verizon Wireless, Century III Mall', 'Verizon Wireless, Lincolnwood Town Center', 'Verizon Wireless, Maplewood Mall', 'Verizon Wireless, Westfield Fox Valley', 'Verizon Wireless, South Shore Plaza', 'Verizon Wireless, Indian River Mall', 'Verizon Wireless, Longview Mall', 'Verizon Wireless, Tippecanoe Mall', 'Verizon Wireless, West Town Mall', 'Verizon Wireless, Knoxville Center', 'Verizon Wireless, Northfield Square Mall', 'Verizon Wireless, The Westchester', 'Verizon Wireless, Lake Square Mall', 'Verizon Wireless, Westfield South Shore', 'Verizon Wireless, Virginia Center Commons', 'Verizon Wireless, Westfield Sunrise', 'Verizon Wireless, Granite Run Mall', 'Verizon Wireless, Burlington Mall', 'Verizon Wireless, Melbourne Square', 'Verizon Wireless, Menlo Park Mall', 'Verizon Wireless, Columbia Center', 'Verizon Wireless, Westfield Great Northern', 'Verizon Wireless, Oxford Valley Mall', 'Verizon Wireless, Crystal Mall', 'Verizon Wireless, Westfield Southlake', 'Verizon Wireless, Westfield Galleria at Roseville', 'Verizon Wireless, Ocean County Mall', 'Verizon Wireless, University Park Mall', 'Verizon Wireless, The Avenues', 'Verizon Wireless, Sunland Park Mall', 'Verizon Wireless, Westfield Citrus Park', 'Verizon Wireless, Bowie town center', 'Verizon Wireless, SouthPark - NC', 'Verizon Wireless, Treasure coast square', 'Verizon Wireless, South Hills Village', 'Verizon Wireless, Mall of New Hampshire', 'Verizon Wireless, Newport Centre', 'Verizon Wireless, Southdale Center', 'Verizon Wireless, Northgate Mall', 'Verizon Wireless, Lima Mall', 'Verizon Wireless, Fashion Centre at Pentagon City', 'Verizon Wireless, Valle Vista Mall', 'Verizon Wireless, The Mall at Rockingham Park', 'Verizon Wireless, Fashion Valley Mall', 'Verizon Wireless, Cincinnati Mills', 'Verizon Wireless, Chesapeake Square', 'Verizon Wireless, Ross Park Mall', 'Verizon Wireless, Westfield Santa Anita', 'Verizon Wireless, Seminole Towne Center', 'Verizon Wireless, Colorado Mills', 'Verizon Wireless, Meadowood Mall', 'Verizon Wireless, River Oaks Center', 'Verizon Wireless, Phipps Plaza', 'Verizon Wireless, Great Mall', 'Verizon Wireless, Summit Mall', 'Verizon Wireless, Circle Centre', 'Verizon Wireless, Westfield Eastridge', 'Verizon Wireless, Katy Mills', 'Verizon Wireless, Westfield Vancouver', 'Verizon Wireless, Westfield Montgomery', 'Verizon Wireless, Bay Park Square', 'Verizon Wireless, Town Center at Aurora', 'Verizon Wireless, Discover Mills', 'Verizon Wireless, Westfield Capital', 'Verizon Wireless, Greenwood Park Mall', 'Verizon Wireless, Westfield North County', 'Verizon Wireless, Westfield Meriden', 'Verizon Wireless, Westfield Plaza Camino Real', 'Verizon Wireless, Haywood Mall', 'Verizon Wireless, Westfield Parkway', 'Verizon Wireless, Markland Mall', 'Verizon Wireless, Valley Mall', 'Verizon Wireless, Cielo Vista', 'Verizon Wireless, Westfield UTC'}
            Answers = 130, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 130, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 1 / 20: {
          [('Main', '==', 'm.02d532', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02d532 fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 WHERE { fb:m.02d532 fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.02d532'}
            Query return lines = 1
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 2 / 20: {
          [('Main', '==', 'm.02d532', ['business.business_operation.industry'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d532 fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02d532 fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02d532'}
            Query return lines = 3
            Final Answer: {'Wireless Telecommunications Carriers (except Satellite)', 'Telecommunications', 'Radiotelephone Communications'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 3 / 20: {
          [('Main', '==', 'm.02rm7b', ['architecture.structure.architect'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:architecture.structure.architect ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:architecture.structure.architect ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02rm7b'}
            Query return lines = 2
            Final Answer: {'Marshall Purnell', 'Abe Pollin'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 4 / 20: {
          [('Main', '==', 'm.02rm7b', ['sports.sports_facility.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:sports.sports_facility.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:sports.sports_facility.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02rm7b'}
            Query return lines = 2
            Final Answer: {'Washington Wizards', 'Washington Capitals'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 5 / 20: {
          [('Main', '==', 'm.02rm7b', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02rm7b'}
            Query return lines = 42
            Final Answer: {'2007 WNBA All-Star Game', "2002 NCAA Men's Division I Basketball Tournament- East Regional Second Round", "Connecticut-Hampton 2002 NCAA Men's Division I Basketball Tournament Game", "2006 NCAA Men's Division I Basketball Tournament", 'World Domination Tour, Washington, DC Concert', "George Mason-Wichita State 2006 NCAA Men's Division I Basketball Tournament Game", "Wisconsin-St. John's 2002 NCAA Men's Division I Basketball Tournament Game", "2008 NCAA Men's Division I Basketball Tournament- West Regional First Round", "Maryland-Siena 2002 NCAA Men's Division I Basketball Tournament Game", "2002 NCAA Men's Division I Basketball Tournament- East Regional First Round", "West Virginia-Arizona 2008 NCAA Men's Division I Basketball Tournament Game", 'Metallica: World Magnetic Tour, Washington, DC Concert', "Richmond-South Carolina  1998 NCAA Men's Division I Basketball Tournament Game", "2006 NCAA Men's Division I Basketball Tournament - Washington DC Regional Semifinals", 'I Am… Tour, Washington, D.C. Concert', "2002 NCAA Men's Division I Basketball Tournament", "2008 NCAA Men's Division I Basketball Tournament", "Duke-Belmont 2008 NCAA Men's Division I Basketball Tournament Game", "Connecticut-North Carolina State 2002 NCAA Men's Division I Basketball Tournament Game", 'Survivor Series (2009)', 'Jonas Brothers World Tour 2009, Washington, DC, Concert', "Purdue-Xavier 2008 NCAA Men's Division I Basketball Tournament Game", "Maryland-Wisconsin 2002 NCAA Men's Division I Basketball Tournament Game", "Washington-Xavier  1998 NCAA Men's Division I Basketball Tournament Game", "North Carolina State-Michigan State 2002 NCAA Men's Division I Basketball Tournament Game", "Connecticut-Fairleigh 1998 NCAA Men's Division I Basketball Tournament Game", "Xavier-Georgia 2008 NCAA Men's Division I Basketball Tournament Game", "Connecticut-Washington 2006 NCAA Men's Division I Basketball Tournament Game", "2011 NCAA Men's Division I Basketball Tournament", 'Viva la Vida World Tour, Washington, D.C. - August 3, 2008 Concert', 'Black Ice World Tour, Washington, D.C. Concert', "Connecticut-Indiana 1998 NCAA Men's Division I Basketball Tournament Game", 'Viva la Vida World Tour, Washington, D.C. - October 31, 2008 Concert', "2006 NCAA Men's Division I Basketball Tournament - Washington DC Regional Finals", "Purdue-Baylor 2008 NCAA Men's Division I Basketball Tournament Game", "Washington-Richmond 1998 NCAA Men's Division I Basketball Tournament Game", "Indiana-Oklahoma  1998 NCAA Men's Division I Basketball Tournament Game", "George Mason-Connecticut 2006 NCAA Men's Division I Basketball Tournament Game", '2002 WNBA All-Star Game', "2008 NCAA Men's Division I Basketball Tournament- West Regional Second Round", "West Virginia-Duke 2008 NCAA Men's Division I Basketball Tournament Game", 'The Circus Tour Washington, DC Concert'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 6 / 20: {
          [('Main', '==', 'm.02rm7b', ['architecture.structure.architecture_firm'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:architecture.structure.architecture_firm ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:architecture.structure.architecture_firm ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02rm7b'}
            Query return lines = 1
            Final Answer: {'Ellerbe Becket'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 7 / 20: {
          [('Main', '==', 'm.02rm7b', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02rm7b'}
            Query return lines = 1
            Final Answer: {'Eastern Time Zone'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 8 / 20: {
          [('Main', '==', 'm.02rm7b', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02rm7b'}
            Query return lines = 2
            Final Answer: {'Chinatown', 'Washington, D.C.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 9 / 20: {
          [('Main', '==', 'm.02rm7b', ['architecture.venue.capacity'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02rm7b fb:architecture.venue.capacity ?o1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 WHERE { fb:m.02rm7b fb:architecture.venue.capacity ?o1 . }|None|||None||None
            Forbidden mid: {'m.02rm7b'}
            Query return lines = 1
            Final Answer: {'1827'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 10 / 20: {
          [('Main', '==', 'm.05g_ch', ['organization.organization.locations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05g_ch fb:organization.organization.locations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05g_ch fb:organization.organization.locations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05g_ch'}
            Query return lines = 12
            Final Answer: {'Verizon FiOS, Walt Whitman Mall', 'Verizon FiOS, Westfield Garden State Plaza', 'Verizon FiOS, Westfield Annapolis', 'Verizon FiOS, Smith Haven Mall', 'Verizon FiOS, Westfield Montgomery', 'Verizon FiOS, Rockaway Townsquare', 'Verizon FiOS, Livingston Mall', 'Verizon FiOS, Burlington Mall', 'Verizon FiOS, South Shore Plaza', 'Verizon FiOS, Westfield Wheaton', 'Verizon FiOS, Roosevelt Field', 'Verizon FiOS, South Hills Village'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 11 / 20: {
          [('Main', '==', 'm.07_dn', ['business.issuer.issue'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.07_dn fb:business.issuer.issue ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.07_dn fb:business.issuer.issue ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.07_dn'}
            Query return lines = 1
            Final Answer: {'VERIZON COMMUNICATIONS INC Common Stock'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 12 / 20: {
          [('Main', '==', 'm.07_dn', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.07_dn fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 WHERE { fb:m.07_dn fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.07_dn'}
            Query return lines = 1
            Final Answer: {'1983'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 13 / 20: {
          [('Main', '==', 'm.07_dn', ['business.business_operation.industry'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.07_dn fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.07_dn fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.07_dn'}
            Query return lines = 7
            Final Answer: {'Telecommunications', 'Wired Telecommunications Carriers', 'Telephone Communications, Except Radiotelephone', 'Provider (Operator)', 'Cable television', 'Voice over IP', 'Fixed Network Operator'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 20: {
          [('Main', '==', 'm.05g_ch', ['organization.organization.leadership', 'organization.leadership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.05g_ch fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o2 WHERE { fb:m.05g_ch fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.05g_ch'}
            Query return lines = 1
            Final Answer: {'2011'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 15 / 20: {
          [('Main', '==', 'm.05g_ch', ['organization.organization.leadership', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05g_ch fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05g_ch fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05g_ch'}
            Query return lines = 1
            Final Answer: {'Chief Executive Officer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 20: {
          [('Main', '==', 'm.05g_ch', ['business.brand.owner_s', 'business.company_brand_relationship.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05g_ch fb:business.brand.owner_s ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05g_ch fb:business.brand.owner_s ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05g_ch'}
            Query return lines = 1
            Final Answer: {'Verizon FiOS'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 17 / 20: {
          [('Main', '==', 'm.05g_ch', ['organization.organization.leadership', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05g_ch fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05g_ch fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05g_ch'}
            Query return lines = 1
            Final Answer: {'Verizon FiOS'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 18 / 20: {
          [('Main', '==', 'm.05g_ch', ['business.brand.owner_s', 'business.company_brand_relationship.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05g_ch fb:business.brand.owner_s ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05g_ch fb:business.brand.owner_s ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05g_ch'}
            Query return lines = 1
            Final Answer: {'Verizon Communications'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 19 / 20: {
          [('Main', '==', 'm.05g_ch', ['organization.organization.leadership', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05g_ch fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05g_ch fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05g_ch'}
            Query return lines = 1
            Final Answer: {'Lowell C. McAdam'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        20 / 20 coarse schemas kept with ans_size > 0.
      } [0.140s]
      Coarse level ended, resulting in 20 schemas.
    } [6.973s]
    Type level searching (total types = 10): {
      Current: 0 / 20
[{'business.business_location'}]
[{'type.datetime'}]
[{'business.industry'}]
[{'architecture.architect'}]
[{'sports.sports_team'}]
[{'time.event'}]
[{'architecture.architecture_firm'}]
[{'time.time_zone'}]
[{'location.location'}]
[{'type.int'}]
[{'business.business_location'}]
[{'business.issue'}]
[{'type.datetime'}]
[{'business.industry'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.leadership'}, {'organization.role'}]
[{'business.company_brand_relationship'}, {'business.brand'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'business.company_brand_relationship'}, {'business.consumer_company'}]
[{'organization.leadership'}, {'business.board_member'}]
      2 typed schemas retrieved from 20 coarse schemas.
      Calculating F1 for 2 typed schemas: {
        Current: 0 / 2
        Checking schema 0 / 2: {
          [('Main', '==', 'm.02rm7b', ['location.location.containedby']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02rm7b'}
            Query return lines = 1
            Final Answer: {'Washington, D.C.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 1 / 2: {
          [('Main', '==', 'm.02rm7b', ['location.location.containedby']), ('Type', '==', 'location.capital_of_administrative_division', ['type.object.type'])]
          var_types: [{'location.location', 'location.capital_of_administrative_division'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.capital_of_administrative_division . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:07] Q_Schema Request: {
            WebQ_691|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02rm7b fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.capital_of_administrative_division . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02rm7b'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        1 / 2 typed schemas kept with ans_size > 0.
      } [0.010s]
      Typed level ended, resulting in 21 schemas.
    } [0.012s]
    Time level searching (total times = 0): {
      Current: 0 / 21
self.var_time_preds: [{'business.business_location.closing_date', 'business.business_location.opening_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'business.business_location.closing_date', 'business.business_location.opening_date'}]
self.var_time_preds: [{'business.issue.first_issued', 'business.issue.cancellation_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [set()]
      0 timed schemas retrieved from 21 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 21 schemas.
    } [0.001s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 21
[{'business.business_location.closing_date', 'business.business_location.opening_date'}]
[set()]
[set()]
[set()]
[{'sports.sports_team.founded'}]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[{'business.business_location.closing_date', 'business.business_location.opening_date'}]
[{'business.issue.first_issued', 'business.issue.cancellation_date'}]
[set()]
[set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[set()]
      0 ordinal schemas retrieved from 21 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 21 schemas.
    } [0.000s]
    [2020-12-03 14:16:07] buffer saved.
    21 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0691_schema].
  } [8.548s]
  Entering Q 692 / 5810 [b'where is the country of cyprus located?']: {
    Show 4 E + 10 T + 0 Tm + 0 Ord = 14 linkings: {
      #00 Entity: [3, 4) (country) == m.01lff (country) {'score': 2270.820957, 'source': 2.0}
      #01 Entity: [3, 4) (country) == m.01lyv (country music) {'score': 1383.108803, 'source': 2.0}
      #02 Entity: [3, 6) (country of cyprus) == m.01ppq (Cyprus) {'score': 6012.512366, 'source': 1.0}
      #03 Entity: [5, 6) (cyprus) == m.01ppq (cyprus) {'score': 19887.267862, 'source': 2.0}
      #04 Type: [3, 4) (country) == location.country (country) {'sim': 1.0}
      #05 Type: [2, 4) (the country) == government.national_anthem_of_a_country (national anthem of a country) {'sim': 0.858454}
      #06 Type: [4, 5) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #07 Type: [3, 4) (country) == sports.sport_country (sport country) {'sim': 0.818409}
      #08 Type: [4, 5) (of) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.816341}
      #09 Type: [4, 5) (of) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.814276}
      #10 Type: [2, 5) (the country of) == government.form_of_government (form of government) {'sim': 0.806913}
      #11 Type: [2, 5) (the country of) == military.military_unit_place_of_origin (military unit place of origin) {'sim': 0.790861}
      #12 Type: [3, 4) (country) == food.beer_country_region (beer country region) {'sim': 0.790103}
      #13 Type: [2, 5) (the country of) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.771595}
    } [0.000s]
    14 link data save to file.
    Coarse level searching (total entities = 4): {
      [Len-1||F1/4] (2020-12-03 14:16:09) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01lff ?p1 ?o1 . }
        [2020-12-03 14:16:09] SPARQL hit!
        Filt_Query_Ret = 2 / 12 ( 0.000s)
        [Len-1||F1/4||4/4-1] (2020-12-03 14:16:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01lff ?p1 ?o1 . ?o1 ?p2 fb:m.01ppq . }
          [2020-12-03 14:16:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01lff ?p1 ?o1 . ?o1 ?p2 fb:m.01ppq . }
            Query return lines = 0
          } [2.430s]
          Filt_Query_Ret = 0 / 0 ( 2.430s)
        } [2.431s]
      } [2.431s]
      [Len-1||F2/4] (2020-12-03 14:16:11) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01lyv ?p1 ?o1 . }
        [2020-12-03 14:16:11] SPARQL hit!
        Filt_Query_Ret = 14 / 23 ( 0.000s)
        [Len-1||F2/4||4/4-1] (2020-12-03 14:16:11) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01lyv ?p1 ?o1 . ?o1 ?p2 fb:m.01ppq . }
          [2020-12-03 14:16:11] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01lyv ?p1 ?o1 . ?o1 ?p2 fb:m.01ppq . }
            Query return lines = 0
          } [0.931s]
          Filt_Query_Ret = 0 / 0 ( 0.931s)
        } [0.931s]
      } [0.931s]
      [Len-1||F3/4] (2020-12-03 14:16:12) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01ppq ?p1 ?o1 . }
        [2020-12-03 14:16:12] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01ppq ?p1 ?o1 . }
          Query return lines = 98
        } [0.005s]
        Filt_Query_Ret = 37 / 98 ( 0.006s)
      } [0.007s]
      [Len-1||F4/4] (2020-12-03 14:16:12) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01ppq ?p1 ?o1 . }
        [2020-12-03 14:16:12] SPARQL hit!
        Filt_Query_Ret = 37 / 98 ( 0.001s)
        [Len-1||F4/4||1/4-1] (2020-12-03 14:16:12) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ppq ?p1 ?o1 . ?o1 ?p2 fb:m.01lff . }
          [2020-12-03 14:16:12] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ppq ?p1 ?o1 . ?o1 ?p2 fb:m.01lff . }
            Query return lines = 2
          } [0.018s]
          Filt_Query_Ret = 0 / 2 ( 0.019s)
        } [0.019s]
        [Len-1||F4/4||2/4-1] (2020-12-03 14:16:12) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ppq ?p1 ?o1 . ?o1 ?p2 fb:m.01lyv . }
          [2020-12-03 14:16:12] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ppq ?p1 ?o1 . ?o1 ?p2 fb:m.01lyv . }
            Query return lines = 0
          } [2.882s]
          Filt_Query_Ret = 0 / 0 ( 2.882s)
        } [2.882s]
      } [2.902s]
      [Len-2||F1/4] (2020-12-03 14:16:15) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01lff ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:15] SPARQL hit!
        Filt_Query_Ret = 4 / 107 ( 0.000s)
        [Len-2||F1/4||4/4-1] (2020-12-03 14:16:15) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01lff ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01ppq . }
          [2020-12-03 14:16:15] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01lff ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01ppq . }
            Query return lines = 0
          } [0.040s]
          Filt_Query_Ret = 0 / 0 ( 0.040s)
        } [0.040s]
        [Len-2||F1/4||4/4-2] (2020-12-03 14:16:15) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01lff ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01ppq . }
          [2020-12-03 14:16:15] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01lff ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01ppq . }
            Query return lines = 0
          } [0.434s]
          Filt_Query_Ret = 0 / 0 ( 0.434s)
        } [0.435s]
      } [0.475s]
      [Len-2||F2/4] (2020-12-03 14:16:15) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01lyv ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:15] SPARQL hit!
        Filt_Query_Ret = 2 / 577 ( 0.003s)
        [Len-2||F2/4||4/4-1] (2020-12-03 14:16:15) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01lyv ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01ppq . }
          [2020-12-03 14:16:15] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01lyv ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01ppq . }
            Query return lines = 0
          } [2.043s]
          Filt_Query_Ret = 0 / 0 ( 2.043s)
        } [2.043s]
        [Len-2||F2/4||4/4-2] (2020-12-03 14:16:17) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01lyv ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01ppq . }
          [2020-12-03 14:16:17] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01lyv ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01ppq . }
            Query return lines = 1
          } [2.351s]
          Filt_Query_Ret = 0 / 1 ( 2.351s)
        } [2.351s]
      } [4.397s]
      [Len-2||F3/4] (2020-12-03 14:16:20) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ppq ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:20] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ppq ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 0
        } [1.635s]
        Filt_Query_Ret = 0 / 0 ( 1.635s)
      } [1.635s]
      [Len-2||F4/4] (2020-12-03 14:16:21) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ppq ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:21] SPARQL hit!
        Filt_Query_Ret = 0 / 0 ( 0.000s)
      } [0.000s]
      96 coarse schemas retrieved from scratch.
      Calculating F1 for 96 coarse schemas: {
        Current: 0 / 96
        Checking schema 0 / 96: {
          [('Main', '==', 'm.01lff', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lff fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:21] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lff fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lff'}
            Query return lines = 6
            Final Answer: {'Colonies do not cease to be colonies because they are independent.', "It may be true that you can't fool all the people all the time, but you can fool enough of them to rule a large country.", 'My country owes me nothing. It gave me, as it gives every boy and girl, a chance. It gave me schooling, independence of action, opportunity for service and honor. In no other land could a boy from a country village, without inheritance or influential friends, look forward with unbounded hope.', "The common good of a collective -- a race, a class, a state -- was the claim and justification of every tyranny ever established over men. Every major horror of history was committed in the name of an altruistic motive. Has any act of selfishness ever equaled the carnage perpetrated by disciples of altruism? Does the fault lie in men's hypocrisy or in the nature of the principle? The most dreadful butchers were the most sincere. The believed in the perfect society reached through the guillotine and the firing squad. Nobody questioned their right to murder since they were murdering for an altruistic purpose. It was accepted that man must be sacrificed for other men. Actors change, but the course of the tragedy remains the same. A humanitarian who starts with the declarations of love for mankind and ends with a sea of blood. It goes on and will go on so long as men believe that an action is good if it is unselfish. That permits the altruist to act and forces his victims to bear it. The leaders of collectivist movements ask nothing of themselves. But observe the results.", "Shall we then judge a country by the majority, or by the minority? By the minority, surely. 'Tis pedantry to estimate nations by the census, or by square miles of land, or other than by their importance to the mind of the time.", 'The greatness of a nation can be judged by the way its animals are treated.'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 1 / 96: {
          [('Main', '==', 'm.01lff', ['fictional_universe.type_of_fictional_setting.settings'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lff fb:fictional_universe.type_of_fictional_setting.settings ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:21] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lff fb:fictional_universe.type_of_fictional_setting.settings ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lff'}
            Query return lines = 17
            Final Answer: {'Gondor', 'Rohan', 'Kingdom of Rhovanion', 'Ranke', 'United Federation', 'Ruritania', 'Khador', 'Breland', 'Grand Fenwick', 'Freedonia', 'Protectorate of Menoth', 'Arnor', 'Cryx', 'Cygnar', 'Soleanna', 'Kingdom of Zeal', 'Cheliax'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 96: {
          [('Main', '==', 'm.01lyv', ['education.field_of_study.academics_in_this_field'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:education.field_of_study.academics_in_this_field ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:21] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:education.field_of_study.academics_in_this_field ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 1
            Final Answer: {'Tony Russell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 3 / 96: {
          [('Main', '==', 'm.01lyv', ['user.zsi_editorial.editorial.topic.comments'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:user.zsi_editorial.editorial.topic.comments ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:21] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:user.zsi_editorial.editorial.topic.comments ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 1
            Final Answer: {'ZSI on Country'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 4 / 96: {
          [('Main', '==', 'm.01lyv', ['music.genre.artists'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:music.genre.artists ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:21] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:music.genre.artists ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 2729
            Final Answer: {'Hush Arbors', 'The Wrays', 'Charlie Walker', 'Cassandra Vasik', 'Don Henley', 'Norma Jean Beaser', 'Joseph G. Williams', 'Texas Lightning', 'Gram Parsons', 'Archer Park', "Jamie O'Hara", 'Tara Oram', 'Roni Stoneman', 'Wyatt', 'Nicky James', 'Mark D. Sanders', 'Reba McEntire', 'Soozie Tyrell', 'Leon Everette', "Po' Girl", 'The Hepparays', 'John Rich', 'Frida Öhrn', 'Rhett Akins', 'Lee Brice', 'Gibson Miller Band', 'Krista Marie', 'Ana Pupedan', 'Chely Wright', 'Paul Thorn', 'Randy Boudreaux', 'Dallas Smith', 'Jerrod Niemann', 'Jean-Pierre Ferland', 'The Greencards', "Munch's Make Believe Band", 'Amanda Stott', 'Stephanie Beaumont', 'Ruby Lovett', 'Jacky Ward', 'Ricky Lynn Gregg', 'Tom and Doug', 'Donnie Van Zant', 'Randy Houser', 'Tate Stevens', 'Tommy Emmanuel', 'Hoyt Axton', 'Kelly Clarkson', 'Hugh Pool', 'Walt Aldridge', 'Damon Johnson', 'Olaf Keil', 'Emerson Drive', 'Kevin Fowler', 'Leland Martin', 'Johnny Carver', 'Trader-Price', 'Ruby Wright', 'Jerry Leger', 'Bobby Bland', 'Bill Anderson', 'Gunnar Nelson', 'Willie Weeks', 'Kix Brooks', 'Jerry Donahue', 'Blake Chancey', 'Whiskey Falls', 'Justin Townes Earle', 'Eddy Raven', 'Ridley Bent', 'Colin Hay', 'Cornell University Chordials', 'Elvis Costello', 'Jimmie Driftwood', 'Sonya Isaacs', 'Jim Neversink', 'Rednex', "B'eirth", 'Tim Rushlow', 'Dennis Robbins', 'Gary Allan', 'Drifting Cowboys', 'Marie Sisters', 'Adam Levy', 'Jaya', 'Dan Hicks and The Hot Licks', 'John Berry', 'Jim Collins', 'Margie Bowes', 'Buck 65', 'Steve Fox', 'Jon Sholle', 'Nick Nicholson', 'Billy Crain', 'Counting Crows', 'Brian McComas', 'The Blue Sky Boys', 'The Lunabelles', 'Sawyer Brown', 'Johnny Seay', 'Rio Grand', 'James T. Slater', 'Jim Vallance', 'Robert Plant', 'Mark Nesler', 'J.C. Crowley', 'Chantelle Paige', 'Mickie James', 'Tracy Byrd', 'Narvel Felts', 'Con Hunley', 'The Bellamy Brothers', 'Matt Hubbard', "Jamie O'Neal", 'Hasil Adkins', 'The Groovegrass Boyz', 'Brian Kennedy', 'Rattlesnake Annie', 'Eddie London', 'Julienne Irwin', 'Dallas Davidson', 'Baillie & The Boys', 'Joel Feeney', 'Lavender Country', 'Zac Brown Band', 'Buddy Alan', '2 plus 1', 'Jake Mathews', 'Infamous Stringdusters', 'Renee Olstead', 'Scotty Emerick', 'Bobby Long', 'Josh Gracin', 'F. Reid Shippen', 'Wade Hayes', 'Don Rich', 'Eleven Hundred Springs', 'Chris Knight', 'Les Paul', 'Shurman', 'Buchanan Brothers', 'Johnny Jolin', 'Priscilla Mitchell', 'Western Flyer', 'Lyle Lovett', 'Dave Gonzalez', 'Eagles', 'James Taylor', 'Marion Worth', 'Kentucky Blue Collar Band', 'Brantley Gilbert', 'Ted Daffan', 'Marcel Chagnon', 'Tommy Allsup', 'Shannon Bex', 'Clarence ""Gatemouth"" Brown', 'Crawford/West', 'Tex Ritter', 'Jaime Robbie Reyne', 'Rio Grande Band', 'Lisa Brokop', 'Gid Tanner', 'Don Walser', 'Brian Walton', 'Jim Lauderdale', 'Nat Stuckey', 'Dr. Hook & The Medicine Show', 'Jason Aldean', 'Gregg Allman', 'Noel Haggard', 'Thomas Wade', 'Ed Bruce', 'Clinton Gregory', "Jump 'N the Saddle Band", 'Cliff Carlisle', 'Barndance Boys', 'Ronnie Hawkins', 'Deric Ruttan', 'The Wrights', 'Buddy Miller', 'Jimmy Dean', 'Skip Ewing', 'Jonathan Byrd', 'Brenn Hill', 'Mark Gray', 'Frank Rogers', 'Adam Brand', 'Three Day Threshold', 'David Lynn Jones', 'Larry Campbell', 'Toby Keith', 'Duane Steele', 'Riley Puckett', 'Hey Romeo', 'The Johnnys', 'Dean Tuftin', 'Ricky Van Shelton', 'Boy Howdy', 'Williams Riley', 'Canyon', 'The Dodge Brothers', 'Jason DeCorse', 'Matt Jenkins', 'Tim Mensy', 'Headband', 'Jessica Andrews', 'Peter Small', 'Leake County Revelers', 'Eddie Rabbitt', 'Barbara Mandrell', 'Bobby Borchers', 'Johnny and Jonie Mosby', 'Travis Tritt', 'Katzenjammer', 'Little Pattie', 'South 65', 'Steve Wariner', 'Riders of the Purple Sage', 'Richard Fagan', 'Judy Rodman', 'Jackson Browne', 'Jason Roberts', 'Rachel Matkin', 'Tony Brown', 'Straight Clean & Simple', 'Mary Chapin Carpenter', 'Ralph Emery', 'Kim Carnes', 'Jesse Hunter', 'Norro Wilson', 'Larry Pierce', 'David Wills', 'Paul Davis', 'Ilse DeLange', 'Diana Trask', "Crossin' Dixon", 'Billy Parker', 'Jennette McCurdy', 'Lennie Gallant', 'Dickey Lee', 'Coley McCabe', 'Brad Johner', 'Rob Baird', 'The Stellas', 'Eilen Jewell', 'Jerry Salley', 'Helen Carter', 'Hank Mizell', 'James Wesley', 'Jeffrey Frederick', 'Steve Vaus', 'Glenn Barber', 'Paul Cotton', 'Gene Autry', "Nora O'Connor", 'The Watson Twins', 'Bryan Sutton', 'Trent Willmon', 'Curt Kirkwood', 'Leroy Drumm', 'Well Hungarians', 'Roy Orbison', 'Carolina Tar Heels', 'Michael Carey', 'Ken Munshaw', 'Baby Gramps', 'Texas Ruby', 'Matraca Berg', 'The Bama Band', 'Dougie Young', 'Truth & Salvage Co.', 'Sean Patrick McGraw', 'Louise Mandrell', 'Damon Gray', 'Gaute Ormåsen', 'Billy Grammer', 'Joan Osborne', 'Sandy Posey', 'Al and the Transamericans', 'Mumford & Sons', 'David Campbell', 'Juice Newton', 'Little Joe', 'Jeff Chance', 'The Palominos', 'Richard Sterban', 'Jasmine Rae', 'Pete Drake', 'Riders in the Sky', "Bob Delyn a'r Ebillion", 'Kristin Garner', 'Anita Carter', 'Billie Jo Spears', 'Glen D. Hardin', 'Joan Baez', 'Paul Piché', 'Johnny Chester', 'Tonya Mitchell', 'Wilf Carter', 'Donna Ulisse', 'Curley Williams', 'Maria McKee', 'Charlie Floyd', 'Nick Hoffman', 'Chris White', 'Janusz Kruk', 'Betty Everett', 'Jim Ed Brown', 'The Browns', 'Bruce Robison', 'Scott B. Sympathy', 'Old Dogs', 'Emilio Navaira', 'Neal McCoy', 'Dean Dillon', 'Ray Scott', 'Johnny ""Country"" Mathis', 'John Gracie', 'Kim Richey', 'Martie Maguire', 'Harmonica Frank Floyd', "Walker's Run", 'Johnny Gimble', 'Loosegoats', 'Hank Williams', 'Rhonda Vincent', 'Kathleen Edwards', 'Teea Goans', 'Bertie Higgins', 'Ray Kennedy', 'Lloyd Maines', 'Poco', 'Dr. Bombay', 'Coon Creek Girls', 'Bob Regan', 'Sarah Marince', 'Doyle Dykes', 'Kayla King', 'Hank Cochran', 'Johnny Bush', 'Pat Boone', 'Philomena Begley', 'Carrie Underwood', 'Mark Wills', 'Jim Stafford', 'Monte Yoho', 'Richard Hawley', 'J-Min', 'Lucas Hoge', 'Lars Håvard Haugen', 'John McEuen', 'The Wilburn Brothers', 'Casey James', 'Hunter Hayes', 'Don Helms', 'Colleen Peterson', 'Joe Ely', 'Jupiter Ray Project', 'J. Michael Harter', 'Terri Hollowell', 'Rivers Rutherford', 'Aaron Pritchett', 'Bob Boykin', 'Andrew Dorff', 'Shelby Lynne', 'Kandi Girl', 'Meredith Edwards', 'Cowbois Rhos Botwnnog', 'Travis McNabb', 'Billy Hill', 'Raybon Brothers', 'Pappy Daily', 'Waycross', 'Charlene', 'Paul Brunelle', 'The Duhks', 'Brenda Cole', 'Piney Gir Country Roadshow', 'Iris DeMent', 'Bella', 'Joe Diffie', 'George Fox', 'Luke Stricklin', 'Mindy Smith', 'Robin Lee Bruce', 'Sara Evans', 'John & Audrey Wiggins', 'Joe Waters', 'Stephanie Bentley', 'Van Zant', 'Adair Cardoso', 'Michael Martin Murphey', 'The Allen Brothers', 'The Paladins', 'Bering Strait', 'Jerry Reed', 'Roger Alan Wade', 'Tennessee Ernie Ford', "Corb Lund and the Hurtin' Albertans", 'David Baerwald', 'Blaine Larsen', 'Ken Mellons', 'Townes Van Zandt', 'Kacey Musgraves', "Carter's Chord", 'Guy & Ralna', 'Mallary Hope', 'Larry Gottlieb', 'Eivør Pálsdóttir', 'Mike Auldridge', 'Clint Crisher', 'Brady Seals', 'Paul Worley', 'Justin Tubb', 'Victor Sanz', 'Carter Family', 'The Shooters', 'Eddie Bayers', 'Darrell Brown', 'Erika Davies', 'Marshall Chapman', 'Holly Lamar', 'Piney Gir', 'Tish Hinojosa', 'Andy Gibson', 'Chuck Cannon', 'Tommy Overstreet', 'Keni Thomas', 'Al Caiola', 'Michael Bacon', 'Big Sandy and His Fly-Rite Boys', 'Joe Don Rooney', 'Star De Azlan', 'Crystal Gayle', 'Dean Reed', 'Dustin Lynch', 'Gwen Sebastian', 'Bob Andrews', 'Caleb Stine', 'Trey Bruce', 'Penny DeHaven', 'Russell Smith', 'Mickey Newbury', 'Peters & Peters', 'Mike Stevens', 'Tiffany Alvord', 'Sonny Curtis', 'Claudia Church', 'Kathy Mattea', 'The New Seekers', 'Sammi Smith', 'John Fogerty', 'Tim Thorney', 'Jimmy Buffett', 'Matt Odmark', 'Al De Lory', 'Jimmy Velvit', 'Turner Nichols', 'Mark Germino', 'Red Steagall', 'David Lee Murphy', 'The Farm', 'Don Williams', 'Elizabeth Cook', 'Vince Vance & The Valiants', 'Vernon Dalhart', 'Kenneth C. ""Jethro"" Burns', 'Devin Townsend', 'Goldie Hill', 'Craig Campbell', 'Bucky Covington', 'Lauren Alaina', 'Edens Edge', 'Television Hill', 'Saddle River String Band', 'Carmen Rasmusen', 'June Carter Cash', 'Jamie Warren', 'Dale Murray', 'Cooder Graw', 'Hank Williams, Jr.', 'Mac Davis', 'Bobby Lalonde', 'Bill LaBounty', 'Trini Triggs', 'Frontier Ruckus', 'Hal Ketchum', 'Brandon Metcalf', 'Clay Hart', 'The Mavericks', 'Peter Elkas', 'Dale Watson', 'Dann Huff', 'Daniel Levitin', 'Joe Bonsall', 'The Front Porch Country Band', 'Smoky Dawson', 'Cal Smith', 'Don Cook', 'Sydney Devine', 'Jamie Davis', 'Rushlow', 'Mel McDaniel', 'Frank Hannon', 'Pam Tillis', 'Carlene Carter', 'Robie Porter', 'Lorrie Morgan', 'Ray Reach', 'Bernie Leadon', 'Kendel Carson', 'Sheryl Crow', 'Zia McCabe', 'Dorn Beattie', 'Fast Ryde', 'Megama', 'Marilyn Sellars', 'Kitty Wells', 'Stephen Rowe', 'Woody Guthrie', 'Kym Warner', 'Tommy Faile', 'Jeannie C. Riley', 'Rusty York', 'Jerry Haymes', 'Robb Royer', "Bill Haley's New Comets", 'Margo Smith', 'Geezinslaws', 'The Big Bopper', 'Adam Harvey', 'Marty Robbins', 'Lawnie Wallace', 'Joan Morrissey', 'The Warren Brothers', 'Charlie Britton', 'Mikalah Gordon', 'Allan Hatten', 'Kate & Kacey', 'Loretta Lynn', 'Larry Gatlin', 'Ryan Laird', 'Van Stephenson', 'Leftover Salmon', 'Bobbejaan Schoepen', 'Gary Morris', 'Byron Gallimore', 'Billy Swan', 'Amy Dalley', 'Prairie Oyster', 'Howard Perdew', 'Phil Ochs', 'Jimmy Ibbotson', 'Parmalee', 'George Morgan', 'Kacey Jones', 'Eyes Adrift', 'Matt Kennon', 'Betty Jack Davis', 'Simple Kid', 'Max T. Barnes', 'Diane Warren', 'Roger Creager', 'Lenny Gault', 'The Clark Family Experience', "Avec pas d'casque", 'The Aldridge Sisters', 'Tim Malchak', 'Molly & the Heymakers', 'Warner Mack', 'The Poverty Plainsmen', 'Reese Klaiber', 'Lonnie Mack', 'Jim Witter', 'Carl and Pearl Butler', 'Kikki, Bettan & Lotta', 'Sammy Kershaw', 'Kevin Denney', 'James Burton', 'Lost Dogs', 'Tim Nichols', 'Girls Next Door', 'Wesley Dennis', 'Jason Sturgeon', 'Eli Young Band', 'Darius Rucker', 'Marcus Hummon', 'Kirsty MacColl', 'Jo-El Sonnier', 'Bonnie Raitt', 'Commander Cody & His Lost Planet Airmen', 'The Dusty Chaps', 'Eddie Eastman', 'Chad Cromwell', 'Brad Cotter', 'Anthony Armstrong Jones', 'The Whites', 'Shelly Fairchild', 'Cowboy Crush', 'John Ford Coley', 'Amos Garrett', 'Julie Matthews', 'Sky', 'Chips', 'The Dirt Drifters', 'Jessica Robinson', 'Creep Creepersin', 'Kareem Salama', 'Billy Edd Wheeler', 'Chris Hillman', 'The Notorious Cherry Bombs', 'Chris Scruggs', 'Sara Watkins', 'Brenda Lee', 'Babasónicos', 'Country Joe McDonald', 'Steve Robson', 'Ray Smith', 'McAlyster', 'Johnny Paycheck', 'The Foggy Mountain Boys', 'Jason Greeley', 'Douglas Lucas', 'Larry Berrio', 'Roy Heinrich', 'Jessica Harp', 'Mitch Allan', 'Terry McBride', 'Marlee Scott', 'John Leventhal', 'The Red Clay Ramblers', 'Joanna Smith', 'David Nail', 'Scott Hendricks', 'Lane Turner', 'John Hartford', 'James Hutchinson', 'Dale Daniel', 'Richard Bennett', 'The Ranch', 'Terri Sharp', 'Dalmanerea', 'Rose Falcon', 'Tompall & the Glaser Brothers', 'Maurice Bolyer', 'Gord Bamford', 'Annah Mac', 'Roy Nichols', 'David Slater', 'Jason Jones', 'Eduardo Araújo', 'Mary Duff', 'Mike Stinson', 'Warren Zevon', 'James Otto', 'Steve Wickham', 'The Maddox Brothers & Rose', 'Susan Jacks', 'Robert Venable', 'Young Harmony', 'Eva Cassidy', 'Kenny Edwards', 'BR549', 'Glen Templeton', 'Mark McGuinn', 'The Living Sisters', 'George Cole', 'Jenny Simpson', 'Wonderland', 'Jimmy Webb', 'John Prine', 'Bettye LaVette', '33Miles', 'Ray Griff', 'Steve Strongman', 'Angela Hacker', 'Bobby Russell', 'Rosie Flores', "Old 97's", 'Rita Hosking', 'Pete Anderson', 'Natalie D-Napoleon', 'Megan Mullins', 'Peggy Sue', 'Jason Blaine', 'Lori Yates', 'Lionel Cartwright', 'Col Meredith', 'Dana McVicker', 'Cheryl Wheeler', 'Greg Hanna', 'Flynnville Train', 'Craig Porteils', 'Hank Flamingo', 'Billy Hill and the Hillbillies', 'Peter Rowan', 'Montgomery Steele', 'Darren McGinnis', 'Lisa Angelle', 'Leahy', 'Makoto Izumitani', 'Cowboy Copas', 'Martin Zellar', 'Jerry Wallace', 'C.W. McCall', 'Dale Oliver', 'John Paul White', 'John Hiatt', 'Brent Amaker and the Rodeo', 'David Raven', 'Johnny Loughrey', 'Dennis Linde', 'Harley Allen', 'Stoney Edwards', 'The Parsonage', 'Katie Armiger', 'Pat Donohue', 'Clay Davidson', 'Glenn Sutton', 'Del McCoury', 'Maybelle Carter', 'Bruce Channel', 'Kevin Skinner', 'Cassandra Wilson', 'Cake', 'Tamara Walker', 'James Bonamy', 'Jack Grayson', 'LoCash Cowboys', 'Daisy Dern', 'Montgomery Gentry', 'Fleadh Cowboys', 'The Delmore Brothers', 'Christie Allen', 'Clay Walker', 'Billy Mann', 'Gus Hardin', 'Les Taylor', "Fiddlin' Arthur Smith", 'Lana Wolf', 'Tracey Brown', 'Micah Schweinsberg', 'Sugarwall', 'Tony Garnier', 'Hayley Oliver', 'Nathan Carroll', 'Gerry Joly', 'Danny Dill', 'Lauren Lucas', 'Ritchie Pickett', 'Jack Blanchard & Misty Morgan', 'McGee Brothers', 'Stevie Nicks', 'Karen-Lee Batten', 'The Hawking Brothers', 'Marie Bottrell', 'Jim Weatherly', 'The Be Good Tanyas', 'Johnny Mathis', 'Souad Massi', 'Jim Cuddy', 'Jack Anglin', 'Gary Floyd', 'Lonzo and Oscar', 'Radney Foster', 'Jerry Kilgore', 'Joshua Bartholomew', 'Charlie Landsborough', 'Salem Highballers', 'Willy Mason', 'Sherry Kean', 'The Kendalls', 'Old School Freight Train', 'Lisle', 'Tenille', 'Benmont Tench', 'Don King', 'Gene & Debbie', 'Family Brown', 'Gail Davies', 'Chad Brock', 'Karen Brooks', 'Kostas', 'Chad Morgan', 'T. Texas Tyler', 'Tom Hambridge', 'Ronnie Dunn', 'Lonestar', 'Andrew Borger', 'Hawkshaw Hawkins', 'Hayden Thompson', 'Stoney Cooper', 'Mutual Admiration Society', 'Bob Wiseman', 'Spoonful James', 'Don Gibson', 'Anita Perras & Tim Taylor', 'Tayo Reed', 'Atlanta', 'Jan Howard', 'The Nutty Squirrels', 'Court Yard Hounds', 'Debby Boone', 'Shea Fisher', 'John Michael Montgomery', 'Beccy Cole', 'Brush Shiels', "Nothin' Fancy", 'Kenny Rogers', 'Keith Anderson', 'Carolina Rain', 'Jacob Lyda', 'Del Reeves', 'Jake Cinninger', 'The Collins Kids', 'Rusty Buchanan', 'Creedence Clearwater Revival', 'Richard Dobson', 'Roy Drusky', 'Buck Trent', 'Kimberly Caldwell', 'Gordon Pogoda', 'T. Graham Brown', 'Johnny Mooring', 'Tommy Hunter', 'Cledus Maggard', 'Jeffrey Walker', 'Dixie Chicks', 'Richard Betts', 'Peggy Little', 'Norman Blake', 'Two Tons of Steel', 'Steve Holy', 'Paul Rishell and Annie Raines', 'Dave Haywood', 'The Allman Brothers Band', 'Miranda Lambert', 'Robert Bowlin', 'Lee Greenwood', 'Ray Condo', 'Norm Hamlet', 'Amy Cook', 'Jennifer Nettles', 'Girls of the Golden West', 'Stephanie Davis', 'Henry D. ""Homer"" Haynes', 'Adrienne Young', 'Jim Campilongo', 'Mac Wiseman', "Fiddlin' John Carson", 'James Intveld', 'Bonnie Brown', 'Sarah Darling', 'Damon Elliott', 'Tommy Crook', 'Janis Joplin', 'Susan Ashton', 'Sonny James', 'Lizzy Long', 'Eric Lee', 'Chelsea Field', 'Larry Willoughby', 'Nianell', 'Johnnie Wright', 'Skinny Dennis', 'Zach Boddicker', 'Doug Adkins', 'Shawn Camp', 'Jana Kramer', 'Mitch Mills', 'The Dalton Brothers', 'Keith Follesé', 'Doc Watson', 'Lauren-Ashley', "The 69'ers", 'Suzie Dickinson', 'Evangeline', 'The Great Eighties Eight', 'The Desert Rose Band', 'The Band', 'Heartland', 'Sons of Sylvia', 'Jimmie Dale Gilmore', 'Matt Minglewood', 'Jimmy Wayne', 'Harold Shedd', 'The Wilkinsons', 'Merle Travis', 'James Johnston', 'Billy Joe Royal', 'Troy Cassar-Daley', 'Archie Campbell', 'Bluegrass Brothers', 'Sugarland', 'Jann Browne', 'Phil Vassar', 'Darrell Clanton', 'Honeychile Rider', 'Jason Whitehorn', 'Dick Feller', 'Bob DiPiero', 'John Pierce', 'Leah Daniels', 'Micah P. Hinson', 'Lead Belly', 'River City Gang', 'Shenandoah', 'Lee Roy Parnell', 'Smith & Pyle', 'Paul Phillips', 'Ernest Stoneman', 'Mike Scaccia', 'Aaron Benward', 'Matthew Nelson', 'Marsha Thornton', 'Big Tom & The Mainliners', 'Elbert West', 'Roger Springer', 'Georgia Middleman', 'Split Lip Rayfield', 'Eron Falbo', 'Elton Britt', 'Bridie Gallagher', 'Mike Belitsky', 'Peter King', 'Lisa Shaffer', 'Tex Williams', 'Dan Brodie', "Daniel O'Donnell", 'Chance', 'Charlie Poole', 'Chris While', 'The Remingtons', 'The Compton Brothers', '4 Runner', 'Red Rhodes', 'Lacy J. Dalton', 'Rick DePiro', 'Miko Marks', 'Steve Azar', 'Great Plains', 'Chris Waters', 'Ashley Tesoro', 'Honky Tonk Confidential', 'David Hungate', 'Maxine Brown', 'John Richardson', 'Stealing Angels', 'The Brothers Frantzich', 'Gordon Gano', 'E. J. Wells', 'Jimmy Fortune', 'Justin Moore', 'Brenda Best', 'Nickel Creek', 'Jimmy Nail', 'South by Southwest', 'Dierks Bentley', 'Aliff Aziz', 'Vassendgutane', 'Ocha la Rocha', 'John Williamson', 'Thom Schuyler', 'Boom Boom Boom', 'Tennessee Pulleybone', 'Beth Nielsen Chapman', 'Kikki Danielsson', 'Ryan Tyler', 'Joanna Cotten', 'Carolina Chocolate Drops', 'Monty Holmes', 'Jordin Sparks', 'Shaun Huberts', 'Michael Lee Firkins', 'Jim Nesbitt', 'Buddy Emmons', 'Unknown Hinson', 'Bobby G. Rice', 'Lionel Richie', 'Matt Nathanson', 'John Hughey', 'Jo Dee Messina', 'Collin Raye', 'Franne Golde', 'Steven Wayne Horton', 'Vikas Kohli', 'Sonny Throckmorton', 'Ladies of the Canyon', 'Cluster Pluckers', 'Josh Abbott Band', 'Kenny Kosek', 'Yonder Mountain String Band', 'Carroll Baker', 'Mick Jagger', 'Joy Lynn White', 'Palomino Road', 'Renaud Séchan', 'Dave Pomeroy', 'George S. Davis', 'Garth Hudson', 'David Kersh', 'Voltaire', 'T.G. Sheppard', 'Lacey Brown', 'Josh Leo', 'The Wilsons', 'Gary Burr', 'Never the Bride', 'The Marcy Brothers', 'The Light Crust Doughboys', 'Lindsey Cardinale', 'Tim Brummett', 'Olivia Newton-John', 'Allan Frank', 'Gene Watson', 'Charley Pride', 'Craig Morgan', 'Dusty Drake', 'Keith Harling', 'The Judds', 'Brett James', 'Mark Wright', 'Caitlin Cary', 'Sharon Anderson', 'Shane Tutmarc', 'Blackberry Smoke', 'Moriarty', 'Tania Kernaghan', 'Jaydee Bixby', 'Povertyneck Hillbillies', 'Johnnie and Jack', "Margeret Catherine O'Donnell", 'Mark Knopfler', 'JT Hodges', 'Kim Hill', 'James & Michael Younger', 'Julie Miller', 'Glenn Stetson', 'Jeff Carson', 'Carl Frederick Tandberg', 'Captain Stubby and the Buccaneers', 'Earl Scruggs', 'Ashley Gorley', 'Adrianna Freeman', 'Maggie Sajak', 'Stella Parton', 'Jerry Byrd', 'Melinda Schneider', 'Jimmy Sturr', 'No Justice', 'Ned Miller', 'Tanya Kae Manwill', 'Billy Yates', 'Lynyrd Skynyrd', 'Kenny Chesney', 'Rashawn Ross', 'Rick Rubin', 'Wesley Tuttle', 'The Rankin Family', 'Scott McQuaig', 'Mike Manuel', 'Steven Lee Olsen', 'Beck Hansen', 'Darren Holden', 'Hurray for the Riff Raff', 'Lee Clayton', 'Zuoxiao Zuzhou', 'George Strait', 'Moby Grape', 'The DeZurik Sisters', 'Terry Carisse', 'Katie Moore', 'New Riders of the Purple Sage', 'Jonathan Williams', 'Buddy Jewell', 'Gabbie Nolen', 'Clamtones', 'Tompall Glaser', 'Esther Phillips', 'Lucinda Williams', 'Sarah Johns', 'Hot Apple Pie', 'Shane Stockton', 'Vassar Clements', 'Jamey Johnson', 'Jonnie Barnett', 'Stanley Sheldon', 'Ray Pillow', 'Andy Childs', 'Al Dexter', 'Caitlin Rose', 'Sara Storer', 'Felicity Urquhart', 'The Louvin Brothers', 'Jace Everett', 'Sunny Sweeney', 'Carolynne Good', 'One More Girl', 'Country Bones', 'Liz Davis', 'D. Vincent Williams', 'Joe Barnhill', 'David ""Stringbean"" Akeman', 'Apelsin', 'Two Poor Boys', 'Robin & Linda Williams', 'Delta Rae', 'Autumn Hill', 'John Conlee', 'Megon McDonough', 'Sneaky Pete Kleinow', 'Ray Wylie Hubbard', 'Anita Cochran', 'Del Shannon', 'Eric ""Red Mouth"" Gebhardt', 'Blackhawk', 'Bap Kennedy', 'Duane Allen', 'Randy Barlow', 'Mike Plume', 'Liz Hengber', 'David Allan Coe', 'Lefty Frizzell', 'Mississippi John Hurt', 'Glenn Worf', 'Eck Robertson', 'McHayes', 'Harlow Wilcox', 'J. R. Vautour', 'Sebastian LaMar Jones', 'Ryan Murphey', "Mark O'Connor", 'Henson Cargill', 'Laura Canales', 'Chalee Tennison', 'Vern Monnett', 'Brooks & Dunn', 'Si Siman', 'Frank Ifield', 'Geno Arce', 'Jameson Clark', "Whitey Morgan and the 78's", 'O.B. McClinton', 'Mike McClure', 'The Lynns', 'Hylo Brown', 'Tebey', 'Jo Hikk', 'Sierra Noble', 'Lulu Belle & Scotty', 'Jesse Lee', 'Charlie Major', 'Thompson Square', 'Melanie Laine', 'Johnny Solinger', 'Baker and Myers', 'Bobby Valentino', 'Solomon Burke', 'Mark Knopfler & Emmylou Harris', 'Mississippi Sheiks', 'Steve Dorff', 'Pat Bergeson', 'Jake Owen', 'Woody Lee', 'Kristen Hall', 'Waylon Jennings', 'Buster B. Jones', 'Foster and Allen', 'Trailer Choir', 'The Knitters', 'Orval Prophet', 'Tracy Lawrence', 'Buckwheat Zydeco', 'Bret Michaels', 'Michael Organ', 'Dottsy', 'Natalie Maines', 'Dallas Frazier', 'Samantha King', 'Josh Ritter', 'The Tractors', 'Yo Zushi', 'Ivory Joe Hunter', 'Greg Holland', 'Jimmy ""Orion"" Ellis', 'Brent McAthey', 'Kimberley Dahme', 'Matt King', 'Sweet Billy Pilgrim', 'Casey Donahew', 'Little David Wilkins', 'Julie Reeves', 'Kristy Lee Cook', 'Blake Wise', 'Victoria Banks', 'John Jorgenson', 'Rockie Lynne', 'Rab Noakes', 'Hal Willis', 'Martina McBride', 'Roxy Music', 'Cindi Cain', 'Chris Janson', 'Kev Carmody', 'Joe Nichols', 'Mulberry Lane', 'Tomeu Penya', 'Johnny Reid', 'Porter Wagoner', 'Hager Twins', 'Terry Tufts', 'Joel DiGregorio', 'Skeeter Bonn', 'Frank Simes', 'Midnite Rodeo Band', 'Foster & Lloyd', 'Tift Merritt', 'Joni Harms', 'Ali Serhat Baran', 'Admiral Freebee', 'Robert Lange', 'Leon Russell', 'Sheila E.', 'Billy Joe Shaver', 'Shane Yellowbird', 'Danny Mayo', 'Tennessee Ramblers', 'Jean Shepard', 'Bob Hudson', 'Bastard Sons of Johnny Cash', 'Will Oldham', 'John Anderson', 'Pirates of the Mississippi', 'Kevin Collins', 'Mary MacGregor', 'Patti Miner', 'Owen Blundell', 'Troy Olsen', 'Rich McCready', 'Ruth Pointer', 'Roxie Dean', 'Buddy Starcher', 'Bill Haley & His Comets', 'John ac Alun', 'Harley ""Red"" Allen', 'Ryan Shupe & The Rubberband', 'The Springs', 'Sonia Leigh', 'Wally Fowler', 'Jake Bugg', 'David Bromberg', 'Hank Garland', 'Big Kenny', 'Donovan Chapman', 'Melba Montgomery', 'Sebastian Bach', 'Iain Matthews', 'Rick Danko', 'Marc Beeson', 'The BossHoss', 'The Gordons', 'The Heartbroken', 'Jimmy Rankin', 'Larry Mercey', 'James Ervan Parker', 'The Fox Brothers', 'Sixwire', 'Bob Seger', 'David Gates', 'The Dials', 'Cindy Walker', 'Roger Nichols', 'Chris Gaffney', 'Owen Mays', 'Simon Climie', 'Thrasher Shiver', 'Terry Sumsion', 'Rascal Flatts', 'Joey & Rory', 'Aaron Lines', 'Banjo Band', 'Chris Austin', 'Louise Burns', 'Flying Emus', 'Doc Walker', 'Tara Lyn Hart', 'Trent Tomlinson', "Farmer's Daughter", 'Ghost of the Robot', 'Bill Keith', 'The Flying Burrito Brothers', 'Donny Parenteau', 'The Jordanaires', "Molly O'Day", 'Tim McGraw', 'Hank Williams III', 'Neil Diamond', 'Ronnie Lee Keel', 'Celinda Pink', 'Bobby Pinson', 'The Lost Trailers', 'Augie Meyers', 'Kevin Churko', 'Kin Vassy', 'Bucky Baxter', 'Bobby Braddock', 'Steve Hardin', 'Linda Gail Lewis', 'Yankee Grey', 'Paul Jefferson', 'Randy Cornor', 'Ali Harter', 'Conway Twitty', 'Dave Berg', 'Cayouche', 'The Wreckers', 'Brett Eldredge', 'Zaca Creek', 'Scott H. Biram', 'Shelly Lares', 'Bob Woodruff', 'Lee Thomas Miller', 'Marshall Dyllon', 'Sydney City Trash', 'Jordan Galland', 'Duncan Arsenault', 'Bradley Gaskin', 'Angelfire', 'Keyshia Cole', 'In Gowan Ring', 'Wild Horses', 'Red Sky July', 'Diana DeGarmo', 'Jenny Whiteley', 'Carson Chamberlain', 'Charlie McCoy', 'The Bacon Brothers', 'Foy Willing', 'Scotty McCreery', 'Tom Shapiro', 'Ash Bowers', 'Taylor Swift', 'The Osmonds', 'Calexico', 'Ryan Bingham', 'Whiskeytown', 'Rena Gaile', 'Faron Young', 'Paul Moak', 'Colt Prather', 'Sunny Sauceda', 'Coffey Anderson', 'Chris Jagger', 'Ty Herndon', 'Wayne Raney', 'Rob Ickes', 'Carrie Elkin', 'Jennifer Hanson', 'Ronna Reeves', 'Roger Miller', 'Brother Clyde', 'Jedd Hughes', 'The Flatlanders', 'The McClymonts', 'Tony Trischka', 'Suzanne Gitzi', 'Danni Leigh', 'Johnny Dollar', 'Mark Bright', 'Philip Claypool', 'Lace', 'Dave Moody', 'Chris Cagle', 'George Jones', 'Jimmy Byrd', 'Molly Bee', 'Anthony Smith', 'Paula Fernandes', "Burnin' Daylight", 'Charlie Daniels', 'Danielle Peck', 'Henry Paul', 'Mary-Lynn Neil', 'Terence Dudley', 'The Kill Devil Hills', 'The Bittersweets', 'Sheb Wooley', 'Mountain Heart', 'Konrad Wert', 'Dan Hannon', 'Jolie & The Wanted', 'Jeffrey Steele', 'Tony Rice', 'Dan Seals', 'Sons of the Desert', 'Red Sovine', 'Merle Haggard', 'Homer and Jethro', 'Skeeter Davis', 'The Marshall Tucker Band', 'Nations by the River', 'Tres Chicas', 'Brian Ahern', 'Chris Volpe', 'Miley Cyrus', 'Jay DeMarcus', 'Sylvia Tyson', 'Stu Davis', 'Taylor Horn', 'Rodney Crowell', 'Merle Watson', 'Ava Barber', 'Mark Collie', 'Doug Kershaw', 'Rob Crosby', 'Chris Henderson', 'Jolie Holland', 'Jessica Sierra', 'Noah Gordon', 'Smiley Burnette', 'Floyd Tillman', 'Crown Electric Company', 'Lavender Diamond', 'Red McKelvie', 'Michael White', 'LeAnn Rimes', 'Archie Bell', 'Roy Rogers', 'Rosanne Cash', 'Johnny Lee', 'Tommy Collins', 'The Willis Brothers', 'Meic Stevens', 'Luther Perkins', 'Brady Blade', 'Lay Low', 'McGuffey Lane', 'Junior Brown', 'Shannon Brown', 'Christy Sutherland', 'Ambush', 'Billy ""Crash"" Craddock', 'Corey Smith', 'Billy Dean', 'Frankie Laine', 'Brooke McClymont', 'Jenny Beck', 'The Spurs', 'Celeste Scalone', 'Grainne Duffy', 'Hargus ""Pig"" Robbins', 'Freddy Weller', 'Easton Corbin', 'Jill Jack', 'Tanya Tucker', 'Speedy Haworth', 'Ronnie Prophet', 'Aaron Watson', 'Taylor Hicks', 'Linda Davis', 'KT Tunstall', 'Jim Conway', 'Bekka Bramlett', 'Liz Anderson', 'Gil Grand', 'Lisa Hewitt', 'Curly Fox', 'Stephen H. Sholes', 'Rachel Sweet', 'Gloriana', 'Larry Jon Wilson', 'Grandpa Jones', 'Seth and Willie Fred', 'Brent De Boer', 'James Stroud', 'Dale McBride', 'Melissa Lawson', 'Ernie Ashworth', 'Ha-Ash', 'Gary Fjellgaard', 'Corbin-Hanner Band', 'Greg Graffin', 'Garry Lee and the Showdown', 'Velva Darnell', 'Lou Bennett', 'Barbara Fairchild', 'Steve Goodman', 'Kip Moore', 'Claire Lynch', 'Connie Hall', 'Son Volt', 'John Jennings', 'Hank Wangford', 'Lynn Anderson', 'Jenny Lou Carson', 'Wynn Stewart', 'Zeke Manners', 'Emma Donovan', 'Cindy Church', 'Southern Culture on the Skids', 'Bobby Lord', 'Susan Haynes', 'Roy Head', 'Jason Orange', 'Willie Mack', 'Big House', 'The E.L.F.', 'Band of Heathens', 'Deryl Dodd', 'Howard Roberts', 'Sara Carter', 'Jim Glaser', 'Patrick Norman', 'Catherine Britt', 'Shooter Jennings', 'Craig Bickhardt', 'Jeannie Seely', 'A. P. Carter', "Fiddlin' Doc Roberts", 'Vanessa Olivarez', 'Ray Stevens', 'Gary Nichols', 'Gretchen Peters', 'Kevin Kadish', 'Jack Ingram', 'Cher', 'Kieran Kane', 'The Gregory Brothers', 'Kasey Chambers', 'Steven McClintock', 'David Malloy', 'Mike Denver', 'Terri Gibbs', 'Kortney Wilson', 'Quartette', 'Johnny Duncan', 'Dobie Gray', 'Brad Paisley', 'Chad Warrix', 'Ffilharmonious Jug Band', 'The York Brothers', 'Delaney Bramlett', 'Vytautas Babravičius', 'SHeDaisy', 'Blue County', 'Paul Evans', 'Don Schlitz', 'The Legarde Twins', 'The Texas Playboys', 'Sons of the Pioneers', 'Brett Beavers', 'The Morris Brothers', 'Zona Jones', 'Red Perkins', 'Mira Craig', 'Bob James', 'Mary Ford', 'Sweethearts of the Rodeo', 'Link Wray', 'Jessi Alexander', 'Gid Tanner & His Skillet Lickers', 'Susan Raye', 'The Kentucky Headhunters', 'Patti Page', 'Ronnie Milsap', 'Elton John', 'Lisa Loeb', 'The Thompson Brothers Band', 'Nik and Sam', 'Paul Sikes', 'Pam Rose', 'Tyler Dickerson', 'Warren Smith', 'The Triffids', 'West Texas Rednecks', 'Mandy Barnett', 'Mac McAnally', 'Buffy Sainte-Marie', 'Bill Chinnock', 'Imperial Golden Crown Harmonizers', 'Chuck Wicks', 'Abra Moore', "James O'Gwynn", 'Kevin Costner and Modern West', "Th' Legendary Shack*Shakers", 'Mike Badger', 'The Forester Sisters', 'Dan Dugmore', 'Ashley Cooper', 'Ricochet', 'busbee', 'Smith Ballew', 'Chet Atkins', 'Eerie Von', 'Bobby Billings', 'Norah Jones', 'Doug Gray', 'Freddie Hart', 'Jon Christopher Davis', 'Good Lovelies', 'Jennifer Warnes', 'Tiffany Jo Allen', 'Bruce Guthro', 'Arthur Alexander', 'Kevin Welch', 'Jeremy McComb', 'Lonnie Donegan', 'Sean Hogan', 'Liz Rose', 'Haley Scarnato', 'The McCarters', 'Paulette Carlson', 'Ty England', 'Walter Trout', 'Tim Goodman', 'Poslednja Igra Leptira', 'Arlo Guthrie', 'Clayton McMichen', 'Dead End Armory', 'T-Bone Burnett', 'Kellie Pickler', 'Barry Gibb', 'The String Cheese Incident', 'Dorsey Dixon', 'Bobby Goldsboro', 'Chip Taylor', 'Emmylou Harris', 'Miss Amy', 'Buddy Cannon', 'J.C. Jones', 'The Oak Ridge Boys', 'Chris Stapleton', 'Thomas Rhett', 'Love and Theft', 'Jessi Colter', 'Barry Brown', 'The Lost Brothers', 'Rosemary Sharp', 'Highway 101', 'Georgia Pelham', 'Jerry Kennedy', 'Larry Stewart', 'Jennifer Love Hewitt', 'Amanda Wilkinson', 'Kendall Phillips', 'Jerry Douglas', 'J.P. Pennington', 'The Rock-afire Explosion', 'Butch Hancock', 'Tom Douglas', 'Levon Helm', 'Rissi Palmer', "Rich O'Toole", 'The Outlaws', 'Aaron Lewis', 'Joe Sun', 'Big & Rich', 'Jeff Cook', 'Austin Lounge Lizards', 'Morris P. Rainville', 'Wanda Jackson', 'Johnny Bond', 'Craig Wiseman', 'Vicki Vann', 'Karen Tobin', 'Johnny Tillotson', 'Delbert McClinton', 'B.B. Watson', 'Johnny Van Zant', 'Todd Cerney', 'Kenneth Carllile', 'Nigel H Seymour', 'Garth Fundis', 'Billy Montana', 'Lasse Stefanz', 'The Cook Family Singers', 'Kerry Harvick', 'The Impossibles', 'Kate DeAraugo', 'Chad Brownlee', 'Sherry Bryce', 'Alabama', 'Colbie Caillat', 'Dave Dudley', "Rex Cole's Mountaineers", 'Marijohn Wilkin', 'Deborah Allen', 'Anita Pointer', 'Run C&W', 'Mark Howard', 'Harlan Howard', 'The Rolling Stones', 'Darryl & Don Ellis', 'Kal Hourd', 'Shelly West', 'Scud Mountain Boys', 'Les Humphries Singers', 'The Mighty Manatees', 'David Rogers', 'Thunder Road', 'Michael Blakey', 'Wynonna Judd', 'Mary Ann Kennedy', 'Marty Brown', 'Skatt Brothers', "'Little' Jimmy Dickens", 'Terri Clark', 'Melodie Crittenden', 'Dolly Parton', 'Freddy Fender', 'Sugar Plum Fairies', 'Zella Lehr', 'Tommy Shane Steiner', 'Hayseed Dixie', 'Razzy Bailey', 'Micky & the Motorcars', 'Ian Tyson', 'Randy Parton', 'Shark', 'River Road', 'Veal', 'Shot Jackson', 'Becky Hobbs', 'Kevin Bloody Wilson', 'Darrell McCall', 'Grady Martin', 'Gordie Tapp', 'James Kilbane', 'Nine Pound Hammer', 'Bob Luman', 'Kelly Hogan', 'Speedy West', 'Paul Franklin', 'Åsmund Åmli Band', 'Leona Williams', 'Moshe Yess', 'Carson Robison', 'Red Hurley', 'Blake and Brian', 'The Texas Tenors', 'Jimmy Little', 'Brother Phelps', 'Joe Poovey', 'Anne Murray', 'Brent Mason', 'Bob Atcher', 'Robert Ellis Orrall', 'Helen Cornelius', 'Jimmy Wakely', 'Josh Logan', 'Phantom Limb', 'Lighthouse Keepers', 'Gary Stewart', 'Katie Rox', 'Jack Greene', 'Glen Moffatt', 'Jim Matt', 'Josh Thompson', 'Loggins & Messina', 'Nikki Nelson', 'Slim Whitman', 'K.T. Oslin', 'Exile', 'Mason Dixon', 'Emily Erwin', 'Blue Highway', 'Adele', 'Tony Toliver', 'Michelle Wright', 'Chris Whiteley & Caitlin Hanford', 'The Canadian Sweethearts', 'Jason Boland & The Stragglers', 'Jonny Wickersham', 'Randy Crouch', 'The Good Brothers', 'Jeff Knight', 'Leroy van Dyke', 'Nelly', 'Steel Magnolia', 'Carl Jackson', 'The Neilsons', 'Alan Jackson', 'Ben Kweller', 'Billy Walker', 'Bruce Springsteen', 'Eddie Kilroy', 'Moss Creek', 'Jody Raffoul', 'Bekka and Billy', 'Gear Daddies', '1755', 'Gabriella Cilmi', 'Cristy Lane', 'Ben Drew', 'Ida Jenshus', 'Jill Johnson', 'Beverley Mahood', 'Guy Clark', 'Terry Gregory', 'Billy Ray Cyrus', 'Ben Verellen', 'Isaac Yamma', 'Ollabelle', 'Ratchell', 'The Maines Brothers Band', 'Darryl Worley', 'Punch Brothers', 'Don Cox', 'Nathan Chapman', 'Deborah Conway', 'Minor Majority', 'Volbeat', 'Little Big Town', 'Susan Aglukark', 'Zane Banks', 'Kyle Park', 'Rebecca Rippy', 'John Duffey', 'Linda Hargrove', 'Aubrey Haynie', 'William Lee Golden', 'The Little Willies', 'Nikki Hornsby', 'Canadian Zephyr', 'Doug Stone', 'Lester Flatt', 'Brent Anderson', 'William Joseph Hill', 'Redmon & Vale', 'Foxes Faux', 'Jaida Dreyer', 'Randy Montana', 'Levi Weaver', 'Jewel', 'Daniele Alexander', 'Rick Vincent', 'Sarah Jarosz', 'Dick Hyde', 'Diane Chase', 'Cledus T. Judd', 'Cezary Ostrowski', 'Rodney Fisher', 'The Seldom Scene', 'Halfway to Hazard', '3 of Hearts', 'Rick Coonce', 'Dito Godwin', 'Kenny Dale', 'Big Tom', 'Joe Osborn', 'Cait Brennan', 'McBride & The Ride', 'Jeff Pearce', 'J. D. Wilkes', 'Bill Walker', 'Bonepony', 'Keith Palmer', 'Connie Eaton', 'Erika Jo', 'Hao Ge', 'Faith Hill', 'Christina Lindberg', 'Allison Moorer', 'Kira Isabella', 'Phillip Phillips', 'Sons of the San Joaquin', 'Pat McLaughlin', 'Holly Dunn', 'Warren Storm', 'Raul Malo', 'Maury Finney', 'Rebel Meets Rebel', 'Jim Eanes', 'Kent Robbins', 'Richard Manuel', 'Paul Overstreet', 'Michelle Nixon', 'Billy Arnold', 'Davisson Brothers Band', 'Eric Heatherly', 'Vernon Oxford', 'Jackson Rohm', 'Calvin Wiggett', 'Twister Alley', 'The Johner Brothers', 'Jack Owen', 'The Shorts', 'One Flew South', 'Timothy B. Schmit', 'Will Kimbrough', 'Marty Stuart', 'Brett Detar', 'Dean Miller', 'Luke Bryan', 'Travis Wyrick', 'Bad Livers', 'Elvis Presley', 'The Boy Least Likely To', 'Mel Tillis', 'Goose Creek Symphony', 'Michael P. Heeney', 'Larry Cordle', 'Matt Stillwell', 'Eddy Mitchell', 'The Hackensaw Boys', 'Arsen Roulette', 'Ali Matthews', 'Doyle Holly', 'Kingston', 'Houston County', 'Keith Urban', 'Ace in the Hole Band', 'Mark David Manders', 'Susie Allanson', 'Trace Adkins', 'Kendra Smith', 'Ed Masuga', 'Los Tucanes de Tijuana', 'Julianne Hough', 'Don Neilson', 'Mindy McCready', 'Kyle Lehning', 'Albert Lee', 'Gary LeVox', 'James Blundell', 'Bryan White', 'Jeanne Black', 'Or, The Whale', 'Small Town Son', 'Josh Turner', 'Ukigumo', 'Colin Amey', 'Tim Rogers', 'Black Allan Barker', 'Tammy Rogers', 'Amanda Richards', 'Mick Flavin', 'Pal Rakes', 'Tom Russell', 'Zezé Di Camargo & Luciano', 'Jack Hayter', 'Regina Regina', 'Ronnie Rogers', 'Leland Sklar', 'Lady Antebellum', 'Al Hunter', 'Glen Campbell', 'Sylvia', 'Kata Hay', 'Gordon Lightfoot', 'Glory-Anne Carriere', 'Ebiet G. Ade', 'Crooks & Straights', 'Rory Lee Feek', 'Jonathan Edwards', 'Carolyn Dawn Johnson', 'Jerry Lee Lewis', 'Webb Pierce', 'Crystal Swing', 'Mila Mason', 'Joe Stampley', 'Matthew Rogers', 'Elisabeth Andreassen', 'Danny Gokey', 'Sheena Easton', 'Jessie Farrell', 'Jeff Bates', 'Todd Williams', 'John D. Loudermilk', 'Tennessee Three', 'Keith Richards', 'Swampwater', 'Mark Chesnutt', 'Steve Kolander', 'Hometown News', 'Caitlin & Will', 'Sammy Johns', 'Pearl River', 'The Raphaels', 'Doug Paisley', 'Shirley Myers', 'Marvin Rainwater', 'Kieran Goss', 'Larry Groce', 'The Statler Brothers', 'Billy Mason', 'Eileen Rose', 'Michael Sarver', 'Victoria Shaw', 'Jim Post', 'Phil Stacey', 'Ryan Cook', 'Charlie Robison', 'Paul Brandt', 'Trent Summar & The New Row Mob', 'Rodney Atkins', 'J. D. ""Jay"" Miller', 'The Sky Kings', 'Brad Wolf', 'Bird Eater', 'Bob Gallion', 'Bonnie Guitar', 'The Secret Sisters', 'Walker Hayes', 'The Great Divide', 'The Miami Showband', 'Anita Perras', 'Eric Taylor', 'Karyn Rochelle', 'Tommy Cash', 'Stephen Kellogg and the Sixers', 'John Wesley Ryles', 'Lee Hazlewood', 'The Band Perry', 'Kristian Bush', 'John Landry', 'Keith Whitley', 'Caleb Followill', 'Antiseen', 'Bob Childers', 'Darryl Rhoades', 'Jim Reeves', 'Drew Holcomb', 'Ronan Keating', 'Lane Brody', 'Wayne Kemp', 'Camille Bright-Smith', 'Earl Thomas Conley', 'Owen Temple', 'Willy DeVille', 'Miho Fukuhara', 'Dick Curless', 'Jesse & Joy', 'The Moffatts', 'Jason Soroski', 'Pee Wee King', 'Wayne Massey', 'Range Riders', 'Jack Reno', 'The Angels of Light', 'Kellie While', 'Mel Street', 'Ray Price', 'Jimmie Rodgers', 'Jack Clement', 'James House', 'Dave Loggins', 'Brad Martin', 'Everlast', 'Blue Murder', 'Michelle Branch', 'Dude Mowrey', 'Travis Rush', 'Clinton Ford', 'Jason Sellers', 'Michael Nesmith', 'Wilma Burgess', 'Codie Prevost', '16 Horsepower', 'Catalina', 'The Lonely Hearts', 'Jypsi', 'Derailers', 'Luke Laird', 'Rod Bernard', 'Jim Owen', 'Melanie', 'Tony Booth', 'Kevin De Clue', 'Randy Rogers Band', 'Rod Hart', 'Bob McDill', 'Stars', 'Clint Daniels', 'Burch Sisters', 'Elżbieta Dmoch', 'Frazier River', 'Women in Docs', 'Tom Petty', 'Georgia Yellow Hammers', 'John Torres', 'Tom Brumley', 'Carmen Espinoza-Rodriquez', 'The Whoreshoes', 'Jack Harris', 'Jerry Jeff Walker', 'Pake McEntire', 'Martin Delray', 'The Blue Moon Boys', 'Greg Penny', 'George Hamilton IV', 'Terry McMillan', 'Old Crow Medicine Show', 'Ronnie Wood', 'Connie Francis', 'Johnny Hiland', 'Ron Aniello', 'Cheyenne Kimball', 'JJ White', 'Scott Siman', 'Robert Mizzell', 'Vince Melamed', 'Jim Mundy', 'Marie Osmond', 'JB and The Moonshine Band', 'Ray Benson', 'Vincent Vallières', 'Ashley Gearing', 'Cross Canadian Ragweed', 'Kjell Roos Band', 'The Bachelors', 'John 5', 'The Drew Davis Band', 'Wright Brothers Band', 'Rusty & Doug', 'Stu Phillips', 'Pork Tornado', 'Jack Cade and the Everyday Sinners', 'Rick Hall', 'Neil Thrasher', 'Johnny Rodriguez', 'Lissie', 'Rex Allen, Jr.', 'The Dirt Daubers', 'Robert Vincent', 'Curly Chalker', 'Chris Young', 'Rusty Draper', 'Matt Butcher', 'Adam Gregory', 'Davis Daniel', 'Donna Fargo', 'Howard Fishman', 'Roy Buchanan', 'Alex J. Robinson', 'Pat Alger', 'Pat Green', 'Stonewall Jackson', 'Lari White', 'Sue Thompson', 'Casey Beathard', 'Carl Perkins', 'Dick Thomas', 'Johnny Cash', 'The Time Jumpers', 'Perry Como', 'Iwan Fals', 'South Mountain', 'Tom Hampton', 'Jimmy & Johnny', 'Frankie Miller', 'Gayla Earlene', 'Rocket Club', 'Alecia Elliott', 'Patricia Conroy', 'MuzikMafia', 'Diamond Rio', 'Nitty Gritty Dirt Band', 'Cole Deggs & the Lonesome', 'Sean Watkins', 'Damhnait Doyle', 'Uncle Kracker', 'Dean Brody', 'Lazze Ohlyz', 'Cory Morrow', 'Don Drumm', 'Rufus Payne', 'FortyTwenty', 'Lila McCann', 'The Pointer Sisters', 'Rehab', 'The Golden Palominos', 'Jeff Stevens', 'Russ Kunkel', 'Margaret Whiting', 'Vinnie Mele', 'Shannon Noll', 'Amy Sky', 'Gary Portnoy', 'Bomshel', 'Nanci Griffith', 'Rick Treviño', 'Red Simpson', "Travis Shredd and the Good Ol' Homeboys", 'Amunda', 'Billy Burnette', 'Richie McDonald', 'La Costa', 'Merle Kilgore', 'Daniel Joseph Schafer', 'Suzy Bogguss', 'Maria Muldaur', 'Jerry Vandiver', 'Tineta', 'Jessie James', 'Randy Travis', 'PinMonkey', 'Jayne Mansfield', 'Mercey Brothers', 'Shirley Collie', 'Bobby Mackey', 'Mary Gauthier', 'Hillary Lindsey', 'Connie Smith', 'Skeets McDonald', 'Kari Jobe', 'Van Morrison', 'Ray Sanders', 'Trick Pony', 'Dallas Harms', 'Troy Verges', 'J. D. Souther', 'The Country Gentlemen', 'Patsy Cline', 'GG Allin', 'Kid Rock', 'Xtian', 'Lisa Matassa', 'Lindsay Ell', 'David Frizzell', 'Kjell Roos', 'The Reverend Horton Heat', 'Wayne Pride', 'La Diva', 'Johnny Darrell', 'The Moody Brothers', 'Hugo', 'Kenny Starr', 'Danny Davis', 'Amber Dotson', 'Bob Nolan', 'Butch Baker', 'The Cameron Family Singers', 'Camper Van Beethoven', 'Sherrié Austin', 'Chad Klinger', 'Jeremy Stacey', 'Howard Donald', 'Aimee Mayo', 'Sarah Buxton', 'Keith Stegall', 'Rex Griffin', "Rose's Pawn Shop", 'Bob Dylan', 'Jason Truby', 'Bandana', 'Laurence Juber', 'Dwight Yoakam', 'Stephanie Winslow', 'Bam Balams', 'The Supersuckers', 'Heidi Newfield', 'Calamity Jane', 'Bonnie Owens', 'Greg Keelor', 'Jane Comerford', 'Wilma Lee Cooper', 'Lisa Stewart', 'Bobby Bare', 'Chloe Rose Lattanzi', 'Michel Teló', 'Hank Thompson', 'Charlie Louvin', 'Kevin Johnson', 'Andrew Jenkins', 'Topp Twins', 'Voices on the Verge', 'Little Texas', 'Doug Supernaw', 'George Noriega', 'Ray Charles', 'Johnny Horton', 'Bronco', 'Jessica Simpson', 'Diane Solomon', 'Super Grit Cowboy Band', 'The Farmer Boys', 'Lobo', 'Wade Bowen', 'Michael Nesmith & The 1st National Band', 'Jason & The Scorchers', 'Carl Belew', 'Ashton Shepherd', 'Ronnie McDowell', 'Jetsurfers', 'Roy Hogsed', 'Curtis Wright', 'Neal Coty', 'Kris Tyler', 'Roscoe Holcomb', 'Audrey Auld-Mezera', 'The Rarely Herd', 'Michael Johnson', 'Hollywood Hot Sauce', 'Wood Newton', 'Laura Lynch', 'Betsy Rutherford', 'Robert Earl Keen', 'Adge Cutler', 'Jonathan Singleton', 'Hank Cramer', 'Emily West', 'Slim Wilson', 'Johnny Rebel', 'Whitney Duncan', 'Brice Long', 'Mark Endert', 'The Higgins', 'John Arthur Martinez', 'Roy Huskey, Jr.', 'Tammy Graham', 'Mando Diao', 'Desmond Child', 'Dawn Sears', 'Krysta Scoggins', 'Kennedy Rose', 'Hank Locklin', 'Lee Ann Womack', 'Ezra Lee', 'Mungo Jerry', 'Lucy Hale', 'Martha Carson', 'Tim Wilson', 'Wayne Hancock', 'Ralph D. Foster', 'The Sunnysiders', 'David Lindley', 'Restless Heart', 'Mundo Earwood', 'Bobbie Gentry', 'Daron Norwood', 'Lucy Angel', 'Kenny Rogers & The First Edition', 'Guthrie Govan', 'Nashville West', 'Willie Nelson', 'Clint Black', 'Gene Deer', 'Billy Bremner', 'Carus and The True Believers', 'Lamar Morris', 'Chubby Parker', 'J Miller', 'Hacienda Brothers', 'DeFord Bailey', 'Tim Buppert', 'Moe Bandy', 'Cyndi Thomson', 'Denise Murray', 'S-K-O', 'Rachel Proctor', 'The Chipmunks', 'Prescott/Brown', 'Danny Heifetz', 'LaWanda Lindsey', 'Lightspeed Champion', 'Jimmie Skinner', 'Willie P. Bennett', 'Coldwater Jane', 'Minnie Pearl', "Gilley's Urban Cowboy Band", 'Del Wood', 'Daryle Singletary', 'Aaron Tippin', 'Ricky Nelson', 'Terry Stafford', 'Nancy Sinatra', 'Dean Martin', 'Gene MacLellan', 'Joanie Keller', 'Kris Kristofferson', 'Crystal Bowersox', 'New Grass Revival', 'Chris Cummings', 'Gene Clark', 'Dailey & Vincent', 'Marshall Lytle', 'Vern Gosdin', 'R.C. Bannon', 'Bobby Lewis', 'Ian & Sylvia', 'Foggy River Boys', 'Becky Priest', 'The Colorblind James Experience', 'Proud Mary', 'Isabelle Boulay', 'Phil Pritchett', 'Shana', 'High Valley', 'David N. Cole', 'Karl Messner', 'Josh Kelley', 'Brian Joseph Friel', 'Lennie Aleshire', 'Roger Mason', 'k.d. lang', 'Alexander Brothers', 'Roy Acuff', 'Mike Ness', "Kenny O'Dell", 'Wild Rose', 'Larry Boone', 'Brian Haner', 'Cecil Brower', 'John McFee', 'Bobby Helms', 'Asleep at the Wheel', "Stompin' Tom Connors", 'Mark Erelli', 'Johnny Russell', 'The Notting Hillbillies', 'Julius Daniels', 'Billy Currington', 'Richard Smith', 'Kelli Lidell', 'Laura Roppé', 'The Davis Sisters', 'Arthur Lee ""Red"" Smiley', 'Charles Kelley', 'Brian Hyland', 'Florida Georgia Line', 'Vince Gill', 'Ashley Monroe', 'Brad Davis', 'Holly Williams', 'Inara George', 'Kenneth Brian', 'Luan Parle', 'Trey Hill', 'Doug Ashdown', 'Big Dumb Face', 'Eric Appapoulay', 'Deana Carter', 'Warren H Williams', '4Fun', 'Highspeed Hayride', 'Ian Cooper', 'Thom Bresh', 'Kellie Coffey', 'Howard Levy', 'Hillary Scott', 'Patty Loveless', 'The Freight Hoppers', 'Montana Sky', 'James R. Flynn', 'Jason Meadows', 'Chris Thile', 'Bobby Durham', 'Maggie Rose', 'Austin Webb', 'Dixiana', 'Orrall & Wright', 'Eddy Arnold', 'The Jenkins', 'The Wagoneers', 'Helen Darling', 'Ricky Skaggs', 'Kenny Price', 'The Heathens', 'Sid Page', 'Jeanne Pruett', 'Brother Trouble', 'Kurt Nilsen', 'Blake Shelton', 'Jess Lee', 'Cowboy Slim Rinehart', 'Frankie Ballard', 'Marty Raybon', 'Jennifer Day', 'Andrew Fromm', 'Jenny Scheinman', 'Buell Kazee', 'Paul Tutmarc', 'Eric Weissberg', 'Maia Sharp', 'Ralph Peer', 'The Siren Tower', 'Asa Martin', 'Point of Grace', 'Southern Pacific', 'Dave & Sugar', 'Matthews, Wright & King', 'Naomi Judd', 'Michael Peterson', 'Jeff Wood', 'Al Perkins', 'Lee Kernaghan', 'Bobby Edwards', 'Boxcar Willie', 'Red Roots', 'Jalo Walamies', 'George McCorkle', 'Austin Roberts', 'Tiffany', 'Hugh Prestwood', 'The Bottle Rockets', 'The Penny Black Remedy', 'Crystal Shawanda', 'Tom T. Hall', 'Issa Pointer', 'Kelita Haverland & Gilles Godard', 'Jill King', 'Vincent L. Berry', 'Stan Szelest', 'The Quebe Sisters Band', 'Five for Fighting', 'Bill Phillips', 'Roy Clark', 'R. Stevie Moore', "Tim O'Brien", 'Jana Jae', 'Buck Owens', 'Polly and the Billets Doux', 'Kent Blazy', 'Kippi Brannon', 'Charlie Rich', 'Stephen Cochran', 'Gretchen Wilson', 'George Barnes', 'Shoji Tabuchi', 'Keith Perry', 'Brakes', 'Pistol Annies', 'B. J. Thomas', 'Matt Rollings', 'George Richey', 'Miss Willie Brown', 'The Henningsens', 'Maggie Peterson', 'Carol Young', 'Leon Ashley', "The O'Kanes", 'Joe Buck', 'Pinkard & Bowden', 'Carl Smith', 'Eric Paslay', 'Fred Knoblock', 'David Ball', 'Jaime Robbie Reyne and the Paridise Three', 'Laura Bryna', 'Shania Twain', 'Leslie Satcher', 'Rita Coolidge', 'Jesse Brand', 'Royal Wade Kimes', 'Roberto Miguel', 'Alison Krauss', 'Lucille Starr', 'Nicole Skeltys', 'Garth Brooks', 'Kane', 'Al Anderson', 'Eric Church', 'John Denver', 'Due West', 'Hanna-McEuen', 'Kent James', 'The Harters', 'Mickey Gilley', 'R.W. Hampton', 'The John Denver Band', 'Micky Groome', 'Heather Myles', 'Janis Martin', 'Don Warden', 'Jonathan Wilson', 'Ed Hill', 'Susie McEntire', 'Robert Green Brooks', 'Maggs and Trish', 'Bill Kirchen', 'Damian Marshall', 'Herb Pedersen', 'Gillian Welch', 'Ferlin Husky', 'Jud Strunk', 'Canaan Smith', 'Joanna Janét', 'Rebecca Lynn Howard', 'Terry Kelly', 'Joanie Bartels', 'Chris Fryar', 'Tammy Cochran', 'Ernest Tubb', 'Stacy Dean Campbell', 'Johnny Calling and The Cash', 'Patsy Montana', 'The Everly Brothers', 'David Houston', 'Greg Page', 'The Chee-Weez', 'Moon Mullican', 'Murray McLauchlan', 'Dottie West', 'Craig Dillingham', 'Jimmy C. Newman', 'John Scott Sherrill', 'Leighton Meester', 'Cleve Francis', 'Randy Owen', 'Rick Tippe', 'Gary Ruley and Mule Train', 'Sharon Gilchrist', 'Phil Baugh', 'Those Darlins', 'Trisha Yearwood', 'J. J. Barrie', 'The Shoppe', 'Luisa Värk', 'Austins Bridge', 'Autry Inman', 'Red Foley', 'Jason McCoy', 'Taylor Ware', 'Scott Walker', 'Jim Ed Norman', 'Joan Kennedy', 'Amy Grant', 'Amie Comeaux', 'Dead Rodeo', 'Ben Hayslip', 'Greg Fidelman', 'The Buckaroos', 'Maci Wainwright', "Smokin' Armadillos", 'Mamasitas', 'George Canyon', 'Diana Jones', 'Marg Osburne', 'Claude Gray', 'Marshall Grant', 'Los Lobos', 'Rebecca Miller', 'Bobbie Cryner', 'Chris LeDoux', 'Lou Smith', 'Karen Taylor-Good', 'Samantha Bumgarner', 'The JaneDear Girls', 'George Ducas', 'Olga Wilhelmine Munding', 'Mel Bay', 'Ry Cooder', 'Tammy Wynette', 'Lew Dewitt', 'Andy Griggs', 'Claude King', 'Danny Barnes', 'Riley Baugus', 'Million Dollar Band', 'Whitey and Hogan', 'Shannon Lawson', 'Bonnie Lou', 'Ray Flacke', 'Walter Daniels', 'Seasick Steve', 'Kevin Sharp', 'Karen Dalton', 'Eamon McLoughlin', 'George Ellias', 'The Biscuit Burners', 'Laura Cantrell', 'Rich Hope', 'Desert Dolphins', 'Antigone Rising', 'Iris', 'Joe South', 'Ira Louvin', 'Wylie gustafson', 'Margie Singleton', 'The Harden Trio', 'Billy Gilman', 'Confederate Railroad', "Jerry 'Wonder' Duplessis", 'Mike Walker', 'Lesley Roy', 'Jon Randall', 'Ray Vega', 'Victoria Williams', 'Chuck Wagon & the Wheels', 'The Kinleys', 'Julian Austin', 'Lindy Robbins', 'Shane Minor', 'Hank Snow', 'Lena Martell', 'Danny Cummings', 'The Sunny Cowgirls', 'Scott Crago', 'John Walker', 'Charly McClain', 'June Pointer', 'Bashful Brother Oswald', 'Tim Ryan', 'Benny Martin', 'Gary Baker', "Ramblin' Tommy Scott", 'Veronica Ballestrini', 'The Highwaymen', 'Nicki Gillis', 'Mica Roberts', 'Linda Ronstadt', 'Junior Samples', 'Joey Allcorn', 'Ron Hynes', 'Nicolette Larson', 'Julie Roberts', 'Bill Carlisle', 'William Layton Nelson', 'Jason Michael Carroll', 'Fred Rose', 'Starar', 'The Buffalo Club', 'Bryan Austin', 'Andrew Pendlebury', 'Rita MacNeil', 'Jonathan Gunnell', 'Blitzen Trapper', 'Keith Gattis', 'Arlene Harden', 'Josh Kear', 'Donna Summer', 'Ken Lauber', 'Andy Williams', 'Katrina Elam', 'Red Top Young', 'John David Kent'}
            Answers = 2727, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.089s]
          Answers = 2727, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.089s]
        Checking schema 5 / 96: {
          [('Main', '==', 'm.01lyv', ['music.genre.parent_genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:music.genre.parent_genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:21] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:music.genre.parent_genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 4
            Final Answer: {'Old-time music', 'Spiritual', 'Celtic music', 'Blues'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 6 / 96: {
          [('Main', '==', 'm.01lyv', ['book.periodical_subject.periodicals'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:book.periodical_subject.periodicals ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:21] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:book.periodical_subject.periodicals ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 1
            Final Answer: {'Country Weekly'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 7 / 96: {
          [('Main', '==', 'm.01lyv', ['broadcast.radio_format.stations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:broadcast.radio_format.stations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:21] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:broadcast.radio_format.stations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 1490
            Final Answer: {'KRST', 'KJJJ', 'KMFX-FM', 'WBKR', 'KDBM', 'KNCU', 'KBOE', 'KQYB', 'WZTR', 'WYCD', 'CFRM-FM', 'KBRJ', 'KOYN', 'WKNU', 'WVRQ-FM', 'WOKK', 'KTPI-FM', 'WFGI', 'WDHC', 'WZNY', 'KNCI', 'WZZQ', 'CJXL-FM', 'WTGE', 'WKRK', 'CJNS-FM', 'WSGS', 'KORT-FM', 'KTCS-FM', 'WKTT', 'KWYR', 'CHOK', 'WRJW', 'KIQN', 'KIKC-FM', 'WESC-FM', 'WKZC', 'KDST', 'WTHT', 'WAKH', 'WKXC', 'WFMH-FM', 'WOGH', 'WKDO-FM', 'WBCT', 'KGRT-FM', 'WGOG', 'WLFW', 'KWYY', 'KWWK', 'WTIF-FM', 'WTUZ', 'WKAA', 'KWIQ-FM', 'CHUP-FM', 'KEKA-FM', 'WSCZ', 'KOLI', 'WMPM', 'KFLG-FM', 'WYKM', 'KATP', 'CKPC', 'WSTH', 'WIYD', 'WCZE', 'WOOD-FM', 'WXBM-FM', 'WCOE', 'KKGO', 'CJCB', 'KARB', 'WAZU', 'CJFW-FM', 'WCOW-FM', 'WLYU', 'WCUP', 'WWOJ', 'KRSJ', 'KTRP', 'KKYX', 'KFDI-FM', 'KMIT', 'KYKS', 'WBLJ-FM', 'WQXD-LP', 'WXIZ', 'WKYA', 'KDCD', 'WWJO', 'KCYS', 'KFIR', 'WXTA', 'KATJ-FM', 'CKON-FM', 'WFHK', 'KATO-FM', 'WGLR-FM', 'KYCN', 'KSSN', 'CKXC-FM', 'KZPK', 'WKNB', 'CICS-FM', 'WXTU', 'WCJW', 'WRNS', 'KMOO-FM', 'KCNI', 'WAAZ-FM', 'WTNJ', 'KNGT', 'WRHM', 'KWAY', 'WTGR', 'CHAT-FM', 'KARL', 'KATC-FM', 'CJGX', 'WDOS', 'WNFK', 'KWVR-FM', 'WUSJ', 'WQNU', 'WCEF', 'KLXK', 'WHCC', 'CHOY-FM', 'WLBQ', 'WOVK', 'KCHQ', 'WIWF', 'KBKB-FM', 'KBWS-FM', 'KMIN', 'KZMQ-FM', 'WMDJ-FM', 'WPSK-FM', 'KAIR-FM', 'CFCY-FM', 'KRRM', 'KGYN', 'WRAB', 'KTKC-FM', 'KDDL', 'KSGT', 'WHKB', 'WPPG', 'KSOQ-FM', 'KQBR', 'KHCM', 'WWHC', 'WAAG', 'WKMO', 'Country 1035', 'WQDR-FM', 'CKGA', 'WKLB', 'KMPS-FM', 'KBHS', 'WCYE', 'KCPX', 'KACT-FM', 'WAGS', 'WJXY-FM', 'WRON-FM', 'WDAF-FM', 'KILR-FM', 'WZCY-FM', 'KKWF', 'WLND', 'WRAC', 'KCNQ', 'KCCY-FM', 'WWOF', 'CFCW', 'WPLZ', 'CHTD-FM', 'WQTE', 'KCLV-FM', 'KORT', 'KKMV', 'CHLB-FM', 'WCGR', 'KSD', 'WNGA', 'KFTI-FM', 'KNEB-FM', 'CKBI', 'KKCN', 'WCCQ', 'KTOM-FM', 'WILQ', 'KCNM', 'KUJ', 'WPEH', 'KWWR', 'KDAP-FM', 'KSOM', 'WMDR', 'WHUN', 'KKAW', 'WMAD', 'KPAN-FM', 'KBET', 'KOMX', 'KYYZ', 'KCYL', 'KDLX', 'WIIN', 'WHUG', 'WSWV-FM', 'KRKC', 'WRBT', 'KWHQ-FM', 'WNNT-FM', 'KYYX', 'WCND', 'WAGR-FM', 'WWGR', 'WVVR', 'KCSR', 'WSYL', 'CIXM-FM', 'KPLM', 'WBYG', 'KTHQ', 'WMMG-FM', 'KSRA-FM', 'WJNR-FM', 'WQKT', 'KFYN', 'WMNC-FM', 'WKKJ', 'KPUR-FM', 'KTWL', 'KMRK-FM', 'WECB', 'WWAG', 'KSSX', 'WJOD', 'KOVC', 'KVWF', 'KHYI', 'WKXC-FM', 'KACQ', 'WAIN-FM', 'KRKT-FM', 'WCGM', 'WZLF', 'CJQM-FM', 'CKFE-FM', 'KXLG', 'WJGK', 'KEVA', 'WCDD', 'WBGY', 'WYNK-FM', 'KWHT', 'KDDR', 'WBRV-FM', 'WQTX', 'WLDX', 'WRWB-FM', 'KMDL', 'WYJK-FM', 'WXRO', 'WHSL', 'WCHO-FM', 'WBAF', 'KACT', 'WAAO-FM', 'WXLF', 'WCOK', 'WKRX', 'KTMP', 'WQXK', 'KMKV', 'KGMN', 'CFCO', 'KTON', 'WCBK-FM', 'CJXX-FM', 'WHMA-FM', 'KKCY', 'WJCL-FM', 'KEZJ-FM', 'KQSW', 'WBPW', 'WZKZ', 'WNRJ', 'WRWD-FM', 'KBXB', 'KDZN', 'WQCB', 'KYGO-FM', 'WBRM', 'KIOK', 'KOLZ', 'KPET', 'KQSS', 'KKDY', 'WUSY', 'WWYZ', 'WIQO-FM', 'KKJQ', 'WANB', 'KOUT', 'WWBR', 'KAGE', 'KXPO', 'KIZN', 'WWBE', 'WEYE', 'WTXT', 'KIKS-FM', 'WHDG', 'WCVP', 'WJEN', 'KKTY-FM', 'WPVQ', 'KRAI', 'CJSB-FM', 'WKKN', 'WQBE-FM', 'CJWF-FM', 'KMOM', 'KRJB', 'KRAZ', 'New Country', 'CHBD-FM', 'KEYZ', 'KJAM-FM', 'KBCR', 'CIKZ-FM', 'WAAC', 'KCXY', 'WSYD', 'WWQQ-FM', 'WQLK', 'WFLS-FM', 'KRSV-FM', 'KSRV', 'KHNK', 'WEAG', 'WXMT', 'WJDJ', 'KAKT', 'WSCH', 'WRNX', 'WNAX-FM', 'KAGH-FM', 'CJBX-FM', 'KWOF', 'WIGO-FM', 'WBJI', 'KHST', 'WACD', 'KYKR', 'KHUT', 'KCLR-FM', 'WIRK', 'KYUN', 'KSWF', 'KWRK', 'WTNR', 'KOEL-FM', 'KID-FM', 'WALT-FM', 'WITL-FM', 'KBUK', 'KLXS-FM', 'KEKS', 'KMLO', 'KTRY', 'KKNU', 'KDWY', 'KILJ', 'KFLN', 'KDDD', 'CIVH', 'KVTT', 'KSJJ', 'KSBH', 'WFGS', 'KPLO-FM', 'KBEW-FM', 'KZEN', 'KZSN', 'WFKY', 'WNGC', 'WKIK-FM', 'CJDL-FM', 'KAUM', 'WXXK', 'KRVF', 'CJKX-FM', 'KQUS-FM', 'WTRB', 'WCYK-FM', 'KXKC', 'WXLI', 'KWEN', 'WJMA', 'WAKG', 'WKHK', 'WNPT-FM', 'WCTK', 'WYGC', 'KAOC', 'KRMO', 'CFCB', 'KGGL', 'WDBY', 'WOKO', 'WIOV-FM', 'WJVL', 'WAMZ', 'WGYE', 'KXKK', 'KHIL', 'KPLX', 'KLGA', 'WPTL', 'KBOZ-FM', 'KMHT', 'WWFF-FM', 'WEBL', 'KOMG', 'WMNZ', 'KDAK', 'WTNT-FM', 'KSNI-FM', 'CING-FM', 'WNNF', 'WMIL-FM', 'WFFN', 'KAPB-FM', 'KUUB', 'WQRS', 'KIAI', 'CJNB', 'WLRE-LP', 'KAAR', 'WPAP-FM', 'KTTS-FM', 'KCYY', 'KAWO', 'WKBX', 'KALQ-FM', 'KTNN', 'WYKR-FM', 'KKYR-FM', 'WUSH', 'WKPE-FM', 'KATM', 'WWZD-FM', 'CJBT-FM', 'KIKN-FM', 'KSCH', 'KLBF', 'KETX-FM', 'WFLR', 'KMNT', 'KNEI-FM', 'KAAQ', 'KBEX', 'KAUS-FM', 'WKSK', 'WICL', 'WQYK-FM', 'KXBZ', 'WTYS', 'WEAG-FM', 'KVRD-FM', 'KWLV', 'WCKN', 'KWES-FM', 'WGFP', 'WBCH-FM', 'WLSV', 'WMSK-FM', 'KHKI', 'KSOP-FM', 'KPBQ-FM', 'WUUF', 'WAXO', 'WFGY', 'KMAQ', 'WMKC', 'WXDE', 'KTCO', 'KYKX', 'WLCO', 'KUSB', 'WUBB', 'WTCM-FM', 'The Highway', 'WOGG', 'KCOB-FM', 'KTIC', 'WJIP', 'WTRS', 'KTGA', 'KMTI', 'WKSK-FM', 'WSKV-FM', 'CKRY-FM', 'CJSE-FM', 'WBBS', 'WKUL', 'KMON-FM', 'Easy Radio London', 'KTWB', 'CHSJ-FM', 'KXDJ', 'WUBE-FM', 'KAUU', 'KOMS', 'WZBB', 'WKKW', 'KAPS', 'WCVR', 'WBKY', 'KSCS', 'KRXT', 'WZZN', 'WKXR', 'WKXA-FM', 'WSLC-FM', 'WCTY', 'KCHK', 'KITT', 'KHKX', 'WBCU', 'WLVX', 'WGYY', 'KZUA', 'WJEK', 'KVET-FM', 'WLHK', 'WHSX', 'WPFX-FM', 'KSED', 'KMAG', 'WCMM', 'WMKD', 'WLWF', 'WLZZ', 'KXXY-FM', 'KYEL', 'CKGY-FM', 'WQLC', 'KNEU', 'WEFX', 'WHVR', 'WZCH', 'KLER', 'WJQR', 'WPRS', 'WCLT-FM', 'WHQX', 'WWFY', 'WTHI-FM', 'WLWI-FM', 'WHWK', 'KXBG', 'WRSF', 'WDXQ', 'WVRE', 'KLRK', 'WHKX', 'KATX', 'KBHP', 'KDXY', 'WKQH', 'KWYW', 'KORC', 'KIXW-FM', 'WCOL-FM', 'WGTY', 'KXLO', 'KTOP-FM', 'KUZZ', 'WGFG', 'KDBL', 'WCOR', 'KJDX', 'KXDD', 'WMSI-FM', 'WHFB-FM', 'WKRO-FM', 'WFMW', 'WFLK', 'KBMW', 'WQCH', 'KRYS-FM', 'WLST', 'WZOB', 'WLVS-FM', 'CFQX-FM', 'WSNN', 'WDDC', 'WHIM', 'WRAX', 'WIZR', 'KFXR-FM', 'WKHX-FM', 'WGRK', 'KDZY', 'WCMP-FM', 'WYGY', 'CKFU-FM', 'WDHP', 'KASL', 'KYSM-FM', 'WATZ-FM', 'CICX-FM', 'WGIE', 'KHAY', 'WOGI', 'WKVS-FM', 'KNIX-FM', 'WOKQ', 'WBBC-FM', 'KBLR-FM', 'KKWB', 'WKNK', 'WFUL', 'WDBS', 'WAWC', 'CKVO', 'KKOK-FM', 'CKBL-FM', 'KZIN-FM', 'WDSJ', 'WCXZ', 'WWKT-FM', 'WAYZ', 'CHVR-FM', 'KFNA', 'WXLZ-FM', 'KIKV-FM', 'KMZU', 'WFXD', 'KGFX', 'KOKK', 'WJMQ', 'WGRX', 'KHAT', 'WKEY', 'KDXT', 'KLAA-FM', 'WHKR', 'KPXI', 'KDSN', 'WBUL-FM', 'WFDR-FM', 'WCTH', 'WJRS', 'WDEZ', 'KITX', 'CKCH-FM', 'WSEO', 'KRWQ', 'WOXO-FM', 'WNCC-FM', 'KVRP-FM', 'WKZV', 'WARU-FM', 'WWMS', 'KBOW', 'KIAQ', 'KRKX', 'KMTK', 'KPIN', 'WKMM', 'CKHJ', 'KAML', 'WCON-FM', 'WKBC', 'WCKY-FM', 'WEKG', 'KRVN-FM', 'KIAK-FM', 'WKZR', 'WCJC', 'CKLQ', 'WKJC', 'WMPI', 'WAXM', 'KEGA', 'WRHT', 'WYHM', 'KLTI', 'CFSX', 'KCGY', 'WMAQ', 'WOKN', 'WSSL-FM', 'KRBL', 'WBGK', 'WKKS', 'WCNL', 'KZMX', 'WZOH-FM', 'WZOX', 'KZZY', 'WYCT', 'WYTZ', 'WLOC', 'KTFW-FM', 'WPPL', 'WQRB', 'WDZQ', 'KRRV-FM', 'WBRB', 'WRQR', 'KORQ', 'KZAL', 'CJSP-FM', 'KQTY', 'KIXB', 'WCYO', 'KYXK', 'KDMA', 'WKCQ', 'WKXH', 'KAMO-FM', 'KYSX', 'KGTW', 'WDBT', 'KBEQ-FM', 'WBUZ', 'WDZN', 'WIVK-FM', 'WBEY-FM', 'WIOO', 'WWTH', 'WRLV', 'WQZY', 'CHCM', 'WWWW-FM', 'CFNA-FM', 'WLXX', 'KLHV', 'KSNY-FM', 'WRVK', 'KTEX', 'KDBH-FM', 'KPOD-FM', 'WZMR', 'KERR', 'WHIE', 'U.S. Country', 'KGAM', 'WPIG', 'KEZS-FM', 'KCWM', 'KKTS-FM', 'KCIN', 'CKQM-FM', 'CKSA-FM', 'WQDK', 'CHVO-FM', 'WFKN', 'WJMS', 'CIBW-FM', 'KMNB', 'WLEW', 'WFUS', 'WKHI', 'KFFA', 'WTAB', 'KEUN-FM', 'KRZK', 'KVFG', 'WQIK-FM', 'KSYC-FM', 'CKEN-FM', 'WZZK-FM', 'KINO', 'KQTY-FM', 'KUPI-FM', 'WJSN-FM', 'KFIL', 'KKQQ', 'CFGN', 'KZMQ', 'WNHW', 'KUAD-FM', 'WUSQ-FM', 'WJAQ', 'WEBB', 'WIBW-FM', 'WFRE', 'WBYL', 'KLTZ', 'WYND-FM', 'WNBB', 'WGGE', 'WOPP', 'WKIS', 'WPIN', 'WMLM', 'WBDC', 'KGWY', 'KFXZ-FM', 'WNPC', 'KBDZ', 'WGTR', 'WAVW', 'KSTY', 'WGRK-FM', 'WLDR-FM', 'WGAR-FM', 'KFGE', 'KZBG', 'CKRM', 'KIBS', 'KNDY-FM', 'KQMS-FM', 'WRUF-FM', 'WTVY-FM', 'KLCB', 'WMJK', 'WUFF-FM', 'WQMX', 'KBUL-FM', 'WLFV', 'WKVE', 'WKYR-FM', 'WTDR-FM', 'KHSL-FM', 'WCNK', 'KTST', 'KIKT', 'WFGI-FM', 'WKRO', 'KNIA', 'WPAQ', 'WMCM', 'KCNO', 'CKKY', 'KWED', 'KIMM', 'KXKS-FM', 'KFRG', 'KHDV', 'KWNA-FM', 'WTNN', 'WIKE', 'CKXA-FM', 'CFQK-FM', 'WWWH-FM', 'WCVH', 'WALI', 'WLKE', 'WFRB-FM', 'WCAT-FM', 'WFBE', 'KJAE', 'WKPQ', 'KCAD', 'WPCF', 'KPEN-FM', 'WRMJ', 'KSNR', 'KBJM', 'WABO', 'WCQM', 'WHN', 'WLVB', 'KQKI-FM', 'KSLL', 'WZVA', 'WGNE-FM', 'KTOH', 'CJOK-FM', 'WTKK', 'KBST-FM', 'KHEY-FM', 'CKYC-FM', 'KXLY-FM', 'KYTI', 'KSEL-FM', 'KEKB', 'WBKX', 'WYUM', 'WPCK', "Today's Hot Country", 'KJNY', 'WKKT', 'WQWV', 'WKWS', 'KRDE', 'KBDY', 'WPTM', 'WJLS-FM', 'WKNN-FM', 'WEZJ-FM', 'KFIN', 'KERM', 'WKVS', 'WHIZ-FM', 'WVHL', 'WXRS-FM', 'WKWY', 'WDLA-FM', 'WOCO', 'KALP', 'WANT', 'WXFL', 'KATQ-FM', 'WEKS', 'KZZJ', 'KMMR', 'KAYD-FM', 'WSIP-FM', 'WPGI', 'WMON', 'WKCM', 'WHMD', 'WAXX', 'WNKE', 'WKDE-FM', 'WTWS', 'WDKD', 'WSNT-FM', 'WVNW', 'KFGY', 'WPLW', 'WKLB-FM', 'KBCR-FM', 'KSON', 'KWMY', 'KNYN', 'WSME', 'WFLE-FM', 'KJJK-FM', 'WELD-FM', 'WTCR-FM', 'KICK-FM', 'KOFM', 'WFME', 'WZAD', 'KKEG', 'KWCD', 'WQMT', 'WIXY', 'WSKE', 'WKGA', 'WCAB', 'WTID', 'WLVK', 'KRTY', 'CKQQ-FM', 'KKYA', 'WXBQ-FM', 'KTRA-FM', 'KOUU', 'WJSB', 'WWKA', 'WMIC', 'WBTR-FM', 'KVOO-FM', 'KKJG', 'KNUE', 'KTIC-FM', 'KHAK', 'WPCV', 'KORD-FM', 'KXOX', 'KXLB', 'WYNR', 'KKCQ-FM', 'CHSP-FM', 'WTHO-FM', 'WANY', 'KXKT', 'KNCQ', 'WQBR', 'KISZ-FM', 'WPDM', 'WFFG-FM', 'KDXN', 'WNCO-FM', 'KBOE-FM', 'WALS', 'WDJR', 'KWJJ-FM', 'KYSS-FM', 'KMJX', 'KRKY', 'WDXB', 'WDNE-FM', 'KATQ', 'KASE-FM', 'WWGP', 'WWGY', 'WWQM-FM', 'KQRK', 'KKCB', 'WTWF', 'KQDJ', 'KEPD', 'WODX', 'KYSN', 'WHKN', 'KJUG-FM', 'WDEN-FM', 'WMMY', 'KCOM', 'KFXI', 'KWNR', 'WZRO-LP', 'WDXC', 'Prime Country', 'WZNN', 'WKOA', 'KXLW', 'WULF', 'WJDB-FM', 'KWAL', 'WJBE', 'WHBN', 'WOWC', 'KKOW', 'KBDN', 'KWFP', 'WLKS-FM', 'KBOT', 'KPIR', 'KAGG', 'KQFC', 'WXBW', 'WOKA-FM', 'CJWW', 'WCUG', 'WRJY', 'WLJE', 'WSJR', 'CKNX', 'KDLO-FM', 'WCUB', 'WYBL', 'KCYT', 'WHGL-FM', 'KDRO', 'WKXP', 'KEYE', 'WOKR', 'WCTQ', 'KAFF-FM', 'KWYO', 'KRES', 'CKQC-FM', 'CJMS', 'KYNU', 'KDRK-FM', 'KXKZ', 'KRLQ', 'WDMO', 'KROP', 'KQLX-FM', 'KKBQ-FM', 'WDUF', 'KLAM', 'WXCY', 'KMON', 'WKSJ-FM', 'WJNV', 'WVES', 'WUBL', 'KTKU', 'WGRY-FM', 'KXFG', 'KMYY', 'KGAS-FM', 'WLLR-FM', 'WAAI', 'KGNC', 'KOAK', 'KMXN', 'KQIK', 'WQSB', 'KWBT', 'WQAH-FM', 'WHKO', 'WXCL', 'WFGF', 'KEZE', 'KGIM-FM', 'WYII', 'WLGC-FM', 'WSLD', 'WGDN-FM', 'KIHR', 'KKBN', 'WGNA-FM', 'WLAY-FM', 'WDHR', 'KAAN-FM', 'WJTH', 'WQDC', 'KUBB', 'KFAV', 'WDGR', 'WXKQ-FM', 'WPCH', 'KVOK', 'WVVL', 'KLUR', 'KCKL', 'WKKO', 'WTIF', 'KCZE', 'KEAN-FM', 'WVNV', 'KHGE', 'WDSD', 'WKEA-FM', 'WOLF-FM', 'WIMT', 'WCDT', 'KXPC-FM', 'KNTY', 'WNUS', 'KBTO', 'WSRW', 'WBWI-FM', 'KFLS-FM', 'KSKE-FM', 'KCOB', 'WBIO', 'WKDG', 'KPOW', 'WMKZ', 'KHLX', 'KIIM-FM', 'WBXQ', 'KATI', 'KSIB', 'KAJA', 'KILT-FM', 'KCYE', 'KNFM', 'KEGH', 'WKOR-FM', 'WGH-FM', 'WBSZ', 'KWKZ', 'KLEN', 'DZWR', 'WLCY', 'KNDK', 'WEIS', 'WFMS', 'WSOC-FM', 'WBAM-FM', 'KVOX-FM', 'KOVE', 'KBLL-FM', 'KTJJ', 'CJBQ', 'KSLY-FM', 'WKDQ', 'WALH', 'WRUL', 'WMUV', 'WOBL', 'WKDZ-FM', 'WLUS-FM', 'WMTL', 'WKED-FM', 'KCYN', 'WSIX-FM', 'WCYN', 'KBNH', 'WDIC', 'WHLZ', 'KRSV', 'KXQX', 'WMDH-FM', 'WTNS', 'WECR-FM', 'WIBL', 'WJKY', 'WJSE', 'WKVI', 'WJUN-FM', 'KDJF', 'KXKQ', 'WNCY-FM', 'KCSI', 'WCKR', 'CJVR-FM', 'WSAQ', 'KCGM', 'WIZK', 'WHWY', 'KRED-FM', 'KPGE', 'WPUR', 'WKCN', 'KEEY-FM', 'KCHE', 'KCTR-FM', 'WVVI-FM', 'KWUT', 'WOWQ', 'WEEO', 'KJKE', 'WEZL', 'KRJC', 'WIZS', 'KIQK', 'WEGX', 'WXLZ', 'KKLR-FM', 'WFYR', 'KGOS', 'WLSC', 'KKOY', 'KMOG', 'KLCY', 'KXLE-FM', 'WELR-FM', 'KASH-FM', 'WINL', 'KALF', 'WGGY', 'WIL-FM', 'KSUX', 'KATK-FM', 'WFNB', 'CKTY-FM', 'WKMK', 'WHHT', 'WTWX-FM', 'KDBR', 'WSEK', 'KIHK', 'KDSS', 'KFAL', 'WQZX', 'KZZX', 'WXKO', 'WYYD', 'WISK', 'KQRV', 'WKTR', 'KZMX-FM', 'WQHK-FM', 'KTTX', 'WSTH-FM', 'KWGB', 'CJDC', 'WUSN', 'WKUB', 'WLHR-FM', 'WIKB-FM', 'CFLT-FM', 'WPOC', 'WVSL-FM', 'WKFR-FM', 'CHFX-FM', 'KIXQ', 'WMUS', 'WKSF', 'WORM-FM', 'WVRC-FM', 'KONY', 'KBRX-FM', 'WXXQ', 'KJAX', 'WBNN-FM', 'WGGC', 'WACO-FM', 'KKBI', 'WKDF', 'KZIQ-FM', 'WIKQ', 'WMEV-FM', 'KNBQ', 'KXMG', 'KIBR', 'CJCI-FM', 'KMKT', 'KVSI', 'WWKC', 'WTQR', 'KKNG', 'KTAK', 'WBFB', 'KETX', 'WBOP', 'WPOR', 'KGMZ', 'WRBI', 'KMOK', 'WRNS-FM', 'KBGZ', 'KICR', 'WIKX', 'WBWN', 'KRPT', 'WOBB', 'WKBQ', 'KWFS-FM', 'KZBQ', 'WDNB', 'KDJS-FM', 'CIGM-FM', 'WPAW', 'KLPZ', 'WUSZ', 'WZKX', 'KFKF-FM', 'WCLI-FM', 'CKCM', 'KBCY', 'KZZL-FM', 'WSM', 'WKAX', 'WXCC', 'WBYZ', 'KUPL', 'KVVP', 'WJDQ', 'WJPD', 'WDGG', 'WDSY-FM', 'WBFM', 'KTGX', 'KKIA', 'WWFG', 'CKMW-FM', 'WLFF', 'KIXZ-FM', 'KSOK-FM', 'KYCK', 'WBEE-FM', 'KLGT', 'KMAR-FM', 'WCVP-FM', 'KCVL', 'KRHC', 'WKCY-FM', 'KLCI', 'WCTO', 'WCJO', 'KAMS', 'WRCY', 'WDXX', 'KJJY', 'WAGY', 'KRMD-FM', 'WYZB', 'WBGE', 'KBEY', 'KZZI', 'KLQL', 'KRUP', 'WKFM', 'KVLV', 'WLSK', 'WBBN', 'WPGA-FM', 'KSDR-FM', 'KPQX', 'WNFM', 'WIXE', 'KVAK', 'KEWF', 'KFRZ', 'WKIK', 'WBTU', 'KKRV', 'WFRG-FM', 'KDIX', 'WOGT', 'KMAV-FM', 'WCEN-FM', 'WAKM', 'WANY-FM', 'KJDY', 'KIKF', 'WUPY', 'WCKT', 'KMOZ-FM', 'KDKD-FM', 'CFAB', 'WNOE-FM', 'KQDY', 'KZKX', 'KBRV', 'WLLX', 'WKKY', 'KAND', 'KNDC', 'KKEX', 'WNOX', 'WBKT', 'KORA-FM', 'WKYK', 'WSM-FM', 'KKHK', 'CKLJ-FM', 'WKML', 'KERX', 'WKKR', 'WQHL-FM', 'KLMJ', 'KAOL', 'KNLV-FM', 'KUBL-FM', 'WTSH-FM', 'VOCM', 'KIXS', 'CKBY-FM', 'WDWG', 'KTNZ', 'WOGK', 'KTTI', 'WBCK', 'KXNP', 'WYKX', 'KNCY', 'KKWS', 'WOOZ-FM', 'WYTE', 'WDRM', 'KQLT', 'KDMG', 'KPOK', 'WOZN-FM', 'KBVB', 'WUUU', 'WCMS-FM', 'KOSY-FM', 'KWLS', 'WNWN-FM', 'CKAT', 'WBGV', 'KTHK', 'Nashville!', 'KSID', 'KVCK-FM', 'WZZS', 'WQCC', 'WYRY', 'KRMX', 'KUSJ', 'WINQ', 'WBRF', 'WLMI', 'CHCQ-FM', 'WFGE', 'KCLX', 'WERH', 'KTUF', 'WZOM', 'WYMJ', 'WBNZ', 'WKAK', 'KMLE', 'KDDG', 'WWHM', 'KCTN', 'CISN-FM', 'WKWX', 'WYRK', 'WKOS', 'CJJR-FM', 'WQNY', 'KRRG', 'WKDP-FM', 'WVSZ', 'KTGO', 'KYDN', 'WCJM-FM', 'WADI', 'KNZA', 'KMUL-FM', 'WLCY-FM', 'CFRY', 'KVMI', 'WKLY', 'WCOS-FM'}
            Answers = 1490, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.043s]
          Answers = 1490, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.043s]
        Checking schema 8 / 96: {
          [('Main', '==', 'm.01lyv', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 1
            Final Answer: {'The Life and Hard Times of Guy Terrifico'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 9 / 96: {
          [('Main', '==', 'm.01lyv', ['award.award_discipline.awards_in_this_discipline'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:award.award_discipline.awards_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:award.award_discipline.awards_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 9
            Final Answer: {'Academy of Country Music Top Female Vocalist', 'Academy of Country Music Top Male Vocalist', 'Academy of Country Music Top New Female Vocalist', 'Academy of Country Music Top Vocal Group', 'Academy of Country Music Entertainer of the Year', 'Academy of Country Music Top New Vocal Duo or Group', 'Academy of Country Music Top New Male Vocalist', 'Academy of Country Music Top Vocal Duo', 'Academy of Country Music Album of the Year'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 10 / 96: {
          [('Main', '==', 'm.01lyv', ['broadcast.content.broadcast'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:broadcast.content.broadcast ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:broadcast.content.broadcast ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 1
            Final Answer: {'CHAT-FM'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 11 / 96: {
          [('Main', '==', 'm.01lyv', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 6
            Final Answer: {'Country', 'Three chords and the truth', 'Listen to the stories', 'Pure Country: The Leon Kagarise Archives 1961-1971', 'Honky Tonk Kat', 'Pop quiz'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 12 / 96: {
          [('Main', '==', 'm.01lyv', ['broadcast.genre.content'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:broadcast.genre.content ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:broadcast.genre.content ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 93
            Final Answer: {'WIRK', 'radioIO Top 20 Country Hits', 'CONSTANT COUNTRY KRS', "1Club.FM: Tears N' Beers", 'IcebergRadio.com - Hit Country', 'WDVT', 'Owl Radio at KSU', 'NYWradio', 'Gotradio - Classic Country', 'Gospel Grass', 'KWLIHD', 'WYCD', 'Bluegrasscountry.org', 'radioIO Classic Country', 'Radio Free Texas', 'Cowboy Up Radio', 'KFRG', 'BluegrassRadio.org', 'Gospel Twang Radio', 'KUT : Austin Music Minute', 'WTNN', "Devil's Night Radio", 'WIKE', 'Ultimate Oldies Channel', 'radioIO Newgrass', '.997 Radiostorm Oldies', 'Variety96 COUNTRY', 'AllAboutCountryNewMusic', 'KNCI', 'radioIO AltCountry', 'Radio Louisiana', 'WWFY', 'KILT', 'A Prairie Home Companion', 'Country on Sky.fm', 'Keystone Pure Country', '181-Real Country', 'KUPL', 'Big D Jamboree', 'WSOC', 'radioIO Todays Country', '181-kickincountry', 'Retro FM', 'WLVB', 'KVFG', 'RAM Radio', 'WZLF', '1Club.FM: Folk', 'KMPS', '1Club.FM: Hit Kicker', 'ASCAP Nashville', 'Gotradio - Todays Country', 'Cowboy Cultural Society', 'radioIO Country Mix', 'WQYK', 'WOKO', 'WUSN', 'KWLI', 'Icountry Radio', '181-frontporch', 'Louisiana Hayride', 'Vanguard Radio', 'WLFE', 'Big R Radio - Warm 101.6', '1Club.FM: Ladies Of Country', 'Big R Radio - Soft Hits', 'All About Country Hits', 'WDSY', 'WXLF', 'KXFG', 'NBOX Radio: Kickin Country', "LA's HOT Country", 'KEWLcountry', '.977 The Country Channel', 'HellHound Radio', '1.FM Country', '1Club.FM: Classic Country', 'Party Country Radio', '1.FM Classic Country', 'Oldies 104', '1.FM Absolute Country Hits', 'Grand Ole Opry', 'Radio Country', "1Club.FM: Bar Rockin' Country", 'Big R Radio - Star Country', 'ORSRADIO.COM Oldies', 'radioIO BLUEGRASS', '1.FM Disco Ball', '181-highway', 'Big R Radio - 107.7 The Mix', 'WKXH', 'SGM Radio', 'Texas Broadcasting Network'}
            Answers = 93, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 93, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 13 / 96: {
          [('Main', '==', 'm.01lyv', ['music.genre.subgenre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:music.genre.subgenre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:music.genre.subgenre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 19
            Final Answer: {'Lubbock sound', 'Red Dirt', 'Nashville sound', 'Rockabilly', 'Neotraditional country', 'Bakersfield sound', 'Psychobilly', 'Bluegrass', 'Country rock', 'Dansband', 'Outlaw country', 'Deathcountry', 'Alternative country', 'Honky-tonk', 'Christian country music', 'Trash rock', 'Country pop', 'Country rap', 'Jug band'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 14 / 96: {
          [('Main', '==', 'm.01lyv', ['music.genre.albums'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:music.genre.albums ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:music.genre.albums ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 4695
            Final Answer: {'The Electric Horseman', 'Crazy in Love', 'Nothing Sacred', 'Delta Dawn', 'How Do I Live', 'Vägen hem till dej', 'Almeria Club', "Waylon at JD's", "Can't Be Really Gone", 'Easy Money', 'Chet, Floyd & Danny', 'Anthology, Vol. 1: Cowboy Man', '16 & 1', 'Songs of the Ungrateful Living', 'I Love Everybody', 'Rabbit Songs', 'Playlist: The Very Best of Martina McBride', 'Billboard Top Country Hits: 1988', 'Whatever I Say Means I Love You', 'Steam', 'Waking Up Laughing', 'Believe: A Christmas Collection', "Comin' Home to Stay", 'Strait Out of the Box', 'Soul of Country Music', 'Roses in the Snow', 'Buckaroo Blue Grass II', "Lyin', Cheatin', Woman Chasin', Honky Tonkin', Whiskey Drinkin' You", 'I Wanna Be Free', 'Reba McEntire', 'Tea & Sympathy', 'American Recordings', 'Life As A Rodeo Man', 'You Had to Be There', 'Anywhere But Here', 'Connie Smith Sings Her Hits', "Takin' the Country Back", 'Street Language', 'Ballads of the American Indian', 'Ooh, That Could Cost Him the Gold, Bob!', 'Polka Party!', 'Aces', 'Singles Bar', "Lover's Guitar", 'Mutations', 'Once in a Very Blue Moon', 'Compass Point', 'Missing... Presumed Having a Good Time', 'Platinum', 'Read My Mind', 'Saturday Satan Sunday Saint', "Not the Tremblin' Kind", 'American III: Solitary Man', 'Private Radio', "It Won't Be Christmas Without You", 'Cornerstone', 'Americana III', 'Burlap & Satin', 'If You Love Me, Let Me Know', 'Amanda Stott', 'Music Row', 'Back When I Knew It All', 'The Blue Rose of Texas', 'Roll', "It's All Good", 'Red', 'A1A', 'Glen Campbell Collection', 'I Need You', 'Anthology', 'Haunted Woman', 'Tate Stevens', 'My Best Friend', 'Cowboy Christmas: Cowboy Songs II', 'Me and the First Lady', 'The Road and the Radio', 'Between Here and Gone', 'Billboard Top Country Hits: 1987', 'This Is Johnny Cash', 'Emerson Drive', "Live at McCabe's", 'Standing on the Edge', 'When the Roses Bloom in Dixieland: Their Complete Victor Recordings (1929–1930)', 'Love And Luck', 'Where Were You', 'Catalpa', "Ships That Don't Come In", 'Big Time', 'I Wonder Do You Think of Me', 'Hog Wild', 'The Way That I Am', 'This Christmas Time', 'Mr. Snowman', 'Whiskey Falls', 'Moments That Matter', 'A Long Road Home', 'Ironwolf', "Who's Gonna Fill Their Shoes?", 'Five-O', "You're Lookin' at Country", 'Homecoming in Heaven', 'How Do You Like Me Now?', 'Heartbreakers Hall of Fame', 'T-R-O-U-B-L-E', 'Countryman', 'Will the Circle Be Unbroken (side 3)', 'Tennessee Pusher', 'Long Line of Heartaches', 'Who I Am', 'Land That I Love', 'Something Inside So Strong', 'X', 'Some Things I Know', 'Jealousy', 'Remember Me, Volume 1', 'Any Old Wind That Blows', "Don't Rock the Jukebox", 'Chet Atkins at Home', 'Tim Rushlow', "Dust on Mother's Bible", 'Waylon Live', 'Give Me Tonight', 'Encore', 'Songs My Father Left Me', 'Live at the Dome', "Pickin' My Way", 'Backroads', 'Streets of Heaven', 'John Berry', 'Singing Is Believing', "Super Colossal Smash Hits of the 90's: The Best of The Mavericks", 'Bring On the Rain', 'Fluxedo', 'Spinning Around the Sun', 'The Essential Glen Campbell Volume One', 'My Old Friend', 'Brian McComas', 'Lone Wolf', 'The Music Is You: A Tribute to John Denver', "Big & Rich's Super Galactic Fan Pak, Vol. 2", 'Words and Music', 'Connie Francis and Hank Williams, Jr. Sing Great Country Favorites', "Chasin' That Neon Rainbow", 'A Matter of Time', 'No Rules', 'Only the Greatest', 'Keep on Loving You', 'Chaos and Bright Lights', 'The Key', 'Sawyer Brown', 'The Best of Hank Williams, Jr. Volume One: Roots and Branches', 'Today, Tomorrow, and Forever', 'Let It Be Me: Mathis in Nashville', 'Kelly Willis', "Glen Campbell's Greatest Hits", 'All Aboard: A Tribute to Johnny Cash', 'Music From Nashville, My Home Town', 'My Heart', 'The Definitive Collection: Sammy Kershaw', 'Extremes', "Limited Collector's Edition", 'The Long Way Home', 'Craftsman', 'A Moment in Time', 'Red and Rio Grande', 'I Still Like Bologna', 'Perfectly Clear', 'Pure Love', 'The Fairest of Them All', 'The One You Slip Around With', 'Handiwork', '20th Century Masters - The Millennium Collection: The Best Of Nanci Griffith', 'Mr. Country & Western Music', "Losin' Streak", 'Between Now and Forever', 'Tracy Byrd', 'The Hard Way', 'Too Late to Worry, Too Blue to Cry', 'Mr. & Mrs. Used to Be', 'Sing Me Back Home', 'Longnecks & Short Stories', 'Partners, Brothers and Friends', 'Hallelujah He Is Born', 'The Troubled Troubadour', 'Wheelhouse', 'Clearly Love', 'Kicking Stones', 'Steal Another Day', 'The Best of Nanci Griffith', 'I Should Be With You', 'Fearless', "I'm Yours", 'Theatre of the Unheard', 'Set This Circus Down', 'Unearthed', 'Crossing Bridges', 'Come on Over', 'The Bargain Store', 'George Jones Sings Like the Dickens!', "It's Five O'Clock Somewhere", 'In a New Age', 'A Tribute to My Father', 'Tear Me Apart', 'The Outsider', "Here's Willie Nelson", 'Chipmunks in Low Places', "King's Record Shop", 'Jake Mathews', 'Whoa, Nelly!', 'The Atkins-Travis Traveling Show', 'Carrying On', "Love Is the Look You're Looking For", 'Stop, Look & Listen', 'Rough', 'Bloodline', 'Revival', 'Josh Gracin', 'Lie Down in the Light', 'Beautiful Day in the Cold Cruel World', 'Glen Campbell Live', 'Chris Knight', 'There You Are', 'Nightrider', 'If Not for You', 'Traveling Circus', 'Country Boy', 'Seasons', 'Western Flyer', 'At San Quentin', 'The Belle Brigade', 'Lyle Lovett', "Hard Rain Don't Last", 'One Step at a Time', 'Plain Dirt Fashion', 'Under The Influence', "Stringin' Along with Chet Atkins", 'Countrified', 'Almost My Record', 'Lost Highway', 'Sweet Little Dangerous: Live at Bottom Line', 'The Winning Hand', 'Vassar Clements, John Hartford, & Dave Holland', "God's Green Earth", 'The New World', 'The Best of Kenny Rogers', 'The Hits: Chapter 1', 'Forrest Gump: The Soundtrack', 'Polyrically Uncorrect', 'Living in a Moment', 'Michael Murphey', 'Lisa Brokop', "Shock'n Y'All", 'Reintarnation', 'Jason Crabb', 'Reba Live', 'Growing Up Is Getting Old', 'American Idol 10th Anniversary – The Hits', 'The Leo Kottke Anthology', 'Written in Chalk', 'That Lonesome Song', '12 Giant Hits', 'I Love Charley Brown', 'Live at Montezuma Hall', 'Jason Aldean', 'Nite Flights', 'Make up in Love', 'Fighting Fire with Fire', 'Legend in My Time', 'White Mansions - A Tale of the American Civil War 1861-1865', 'New Country Hits', 'Grand Ole Opry Favorites', 'Drifter', 'Foster and Lloyd', 'Gunfighter Ballads and Trail Songs', 'You Do Your Thing', 'The Sound Behind Johnny Cash', 'Walking Away a Winner', 'Come On Come On', 'Crash\'s Smashes: The Hits Of Billy ""Crash"" Craddock', 'The Best of Ray Stevens', 'Southern Rain', 'Hometown Guitar', "I Like 'Em Country", '48 Original Tracks', 'Every Time', 'Rodeo Waltz', 'Deric Ruttan', "Shouldn't a Told You That", 'Highwayman 2', 'Buick', 'The Sweetest Gift', 'Love Is Like a Butterfly', 'A Gift', 'Something in Red', 'King Papaya', 'Skynyrd Frynds', 'Tornado', 'You Lift Me Up To Heaven', 'Moment of Truth', 'Old Golden Throat', 'Cedartown, Georgia', "Still Swingin'", 'All Time Greatest Hits', 'Diamonds & Dirt', 'We Found It', 'Nitty Gritty Surround', 'Nancy', 'Open Up Your Heart', 'Eyes That See In The Dark', 'Life on a Rock', 'The One That Got Away', 'Sweet Sixteen', "For Me It's You", 'Some People Change', "Lovin' and Learnin'", 'Essential Leo Kottke', 'Soul Journey', 'Surely You Joust', 'My World', "A Taste of Yesterday's Wine", 'Girls Will Be Girls', 'The Essential Guy Clark', 'Toby Keith', "Ruby's Torch", 'Half Nelson', 'I Wanna Come Over', 'Never Going Back', 'Galveston', 'Dang Me! (Roger and Out)', 'The Eagle', 'Retrospective', 'Just the Way I Am', 'Mile Markers', 'Breath of Heaven: A Christmas Collection', "Burnin' Up the Road", 'Men & Mascara', 'Ocean Front Property', 'Real Thing', 'Songs of Inspiration', 'Chet Atkins Picks on the Hits / Superpickers', 'In the County of Kings', "Take Me to Your World / I Don't Wanna Play House", 'The Edge Of the World', 'Eddie Rabbitt', "Good Ol' Country Singin'", 'The Journey', 'Why Not Me', '29 Nights', "It Don't Get Any Better Than This", 'Believe', 'Solo Sessions', 'Classic Campbell', 'Give My Love to Rose', 'Alapalooza', 'Sweet Yesterday', 'Your Tender Loving Care', "Texas Cookin'", 'Steve Wariner', 'Simple Dreams', 'Sweet Sounds By The Browns', "If You've Got the Money I've Got the Time / The Sound in Your Mind", "Don't Cheat In Our Hometown", 'Healing Hands of Time', 'Summertime Blues', 'Good Year for the Wine', 'Live: Wherever You Are', 'A Place to Land', 'Kim Carnes', 'Live 1961–2000: Thirty-Nine Years of Great Concert Performances', "You've Still Got a Place in My Heart", 'Classic Crystal', "I'm American", 'Does Fort Worth Ever Cross Your Mind', 'Pontiac', 'Milestones: Greatest Hits', 'Chasing the Sun', 'In Pictures', "Why Can't You", 'Freedom and Justice for All', 'Texas Size Heartache', 'Not Fade Away (Remembering Buddy Holly)', 'Feels Like Today', 'Yellow Rose of Texas', 'Let the Picture Paint Itself', 'USA Today', 'Strong Enough', '20th Century Masters - The Millennium Collection: The Best of Tracy Byrd', 'Wrecking Ball', 'Acoustic Christmas Carols', 'Bob Dylan: the Collection', 'If You See Her', 'Ernest Tubb and His Texas Troubadours', 'Rhinestone Cowboy Live, on the Air & in the Studio', 'A Country Christmas', 'License to Chill', 'Carry On', 'The Foundation', "Alive and Well and Livin' the Dream", 'Something Worth Leaving Behind', 'The Closer You Get', "What a Long Strange Trip It's Been: The Best of the Grateful Dead", 'The Rest of the Dream', 'Love Rules', 'Bo Diddley is a Gunslinger', 'First Time Live', 'Voyageur', 'Carnival', 'Trent Willmon', 'Greatest Hits 3', "Can't Back Down", 'Boogity, Boogity – A Tribute to the Comedic Genius of Ray Stevens', 'Under the Covers', 'Love & Gravity', 'Will the Circle Be Unbroken (side 1)', 'Tight Rope', '20 Greatest Hits', 'Wide Open', 'Carnegie Hall Concert', 'The Capitol Years 65/77', 'Heart Full of Love', 'Human Emotions', "I Never Made a Record I Didn't Like", 'Lost in the Feeling', 'Side Tracks', 'Sunshine in the Shadows: Their Complete Victor Recordings (1931–1932)', 'Sunshine and Rain', 'I Loved Her First', 'Prairie Home Invasion', 'To Lefty From Willie', 'Go', 'Almost Alone', 'iTunes Live From SoHo', 'One More Last Chance', 'Backwoods Barbie', 'Break Up the Concrete', 'Charleston, SC 1966', "It's Up To Me", 'Feels So Right', "Easy Lovin'", 'Well Travelled Love', 'Sunday Morning with Nat Stuckey & Connie Smith', 'The Mountain', '50 Greatest Hits', 'Turning for Home', 'Merry Christmas to You', 'All I Can Do', 'Arkansas', 'I Never Knew (What That Song Meant Before)', 'The Departed', 'Sings His Greatest Hits', 'D-I-V-O-R-C-E', 'Wow', 'Jackass 3-D', 'Cold Hard Truth', 'The 3rd Time Around', 'The Ring', 'Melt', 'Sings Hank Williams', "Waymore's Blues (Part II)", 'Definitive Collection Mini LP Replica CD Boxset', 'Angry All the Time', 'Acoustic Trio Live in Berlin', 'The Platinum Collection', "Makin' Hay", "Chet Atkins' Gallopin' Guitar", 'Good Hearted Woman', '20 år med oss – Vem é dé du vill ha', 'Angel With a Lariat', 'Man with a Memory', 'Crying Time', "Solid Gold '68", "Cowgirl's Prayer", "Hangin' Tough", 'Bootlegger, Vol. 1', 'Songs', 'The Bandit', 'Own the Night', 'Burning Bridges', 'Live 1973', 'Break Every Rule', 'Basic', 'Juarez', 'Just Us', 'Better Be Home Soon', 'Old Dogs', 'Party Doll and Other Favorites', "Don't Overlook Salvation", 'Neal McCoy', 'Strong Enough to Bend', 'Greatest Hits Vol. III', 'Island in the Sea', 'The One and Only', 'Segundo', 'Heartbreak Express', "Let's Face the Music and Dance", 'Stone Country', 'Hell Among the Yearlings', 'C. B. Atkins & C. E. Snow by Special Request', 'I Turn to You', 'Live at Cobo Hall', 'Tonight We Ride', 'Rhythm & Romance', 'The Best of Rascal Flatts Live', 'Souvenirs', 'Love Performance', 'Wild Ride', "Before I'm Over You", 'Country', 'For a Little While', 'Home for Christmas', 'She and I', 'Enjoy Yourself', 'Let It Be Christmas', "Please Help Me, I'm Falling", "Makin' Memories", 'The Christmas Spirit', 'Rose Garden', 'Alright Guy', 'Four the Record', 'Love of the Common People', 'Chet Atkins Picks on Jerry Reed', 'Just a Little Love', 'A Classic Christmas', 'Walk Hard: The Dewey Cox Story', 'The Essential Glen Campbell Volume Three', 'It Just Comes Natural', 'The Way I Should', 'Urban Chipmunk', 'American Child', 'Little Red Boots', "I'm Always On A Mountain When I Fall", 'From the Edge of the World', "Love's Got a Hold on You", 'All I Want', 'No Deeper Blue', 'Tim McGraw & Friends', 'Fire It Up', 'Natural Act', 'The Fox and the Hound 2', 'Alabama Greatest Hits', "Workin' Band", 'Life At Best', "Daddy of 'Em All", 'I Wanna Dance With You', 'Last Man Standing', 'Both Sides Now', "Loretta Lynn Writes 'em & Sings 'em", 'Mark Wills', 'Classic Cash: Hall of Fame Series', "Daphne's Flight", 'Sex & Violins', 'Brad Paisley Christmas', "If It Ain't Love and Other Great Dallas Frazier Songs", 'Great Days: The John Prine Anthology', 'The Red Headed Stranger', 'The Hunger Games: Original Motion Picture Score', 'Strung Up', 'Still within the Sound of My Voice', 'O Brother, Where Art Thou?', 'Christmas with You', 'Taking the Long Way', 'George Jones and Gene Pitney', 'Leave the Light On', 'Hunter Hayes', 'Mood Swings', 'Me and My Guitar', 'Billy Dean discography', 'Radio Romance', 'Joe Ely', 'Greatest Hits: 18 Kids', 'CMT Most Wanted Volume 1', 'Judee Sill', 'America, I Believe in You', 'Evan Almighty', 'Play On', '42 Ultimate Hits', "I'll Be", 'Taylor-Made', 'Country Strong', 'People Like Me', 'Smoke Rings in the Dark', 'Midnight Sunshine', 'Love Can Build a Bridge', 'Heaven, Heartache and the Power of Love', 'Raybon Brothers', 'Compadres: An Anthology of Duets', 'Join The Band', 'Restless on the Farm', 'Soft Talk', 'A Wright Christmas', 'Let Me Tell You About a Song', "You Don't Know Me: The Songs of Cindy Walker", 'Changes', 'Headlights & Tailpipes', '21 Number Ones', 'Somewhere in the Night', 'Honky Tonk Angel', 'Same Trailer Different Park', 'Feels Like Home', 'Super Hits, Volume 2', 'George Fox', "Shriner's Convention", 'Out Where the Bright Lights Are Glowing', 'Weather the Storm', 'Johnny & June', 'The World of Johnny Cash', "Oh Lonesome Me / I Can't Stop Lovin' You", 'New Harvest... First Gathering', 'Not Too Much to Ask', 'Michael Martin Murphey', 'Legend of Bonnie & Clyde', 'Country Gold', 'The Family Who Prays', 'Swampblood', 'The Blue Ridge Rangers Rides Again', 'America (The Way I See It)', 'Wolf Creek Pass', 'Bering Strait', 'Starting Now', 'Buck Owens Sings Tommy Collins', 'Playlist: The Very Best Of', "That's Why I Sing This Way", 'Still Feels Good', 'Moments', 'Heartbreaker', 'Hometown Girl', 'Highly Illogical', 'Confessions of a Nice Girl', 'Ken Mellons', 'Read Between the Lines', 'Classic Ray Stevens', 'Chet Atkins in Hollywood', 'Reba Nell McEntire', 'High Tide in the Heartland', 'One for One', 'Te John, Grease, & Wolfman', 'No. 2 LIVE Dinner', 'The Whole SHeBANG', 'Forever Yours', 'A Satisfied Mind', 'Will the Circle Be Unbroken (side 6)', 'Shotgun Angel', 'Old Friends', "I'll Go On Loving You", 'From My Heart', 'No One Stands Alone', 'Here and Now', 'Hundred Year Hall', 'Outlaws Like Me', 'While We Were Waiting', 'Brady Seals', "She's My Kind of Rain", "Drinkin' Songs & Other Logic", "Goin' Home for Christmas", 'Johnny Cash Remixed', 'Keepers', 'Human Remains', 'Sings Country Classics', 'Playing Favorites', 'Long Way Home', 'Number One Hits', 'Olivia', 'The Way Back Home', 'A John Prine Christmas', 'K sus2', 'Real Love', 'Out of the Shadows', 'Summer of Flatts', 'Ask the Fish', 'The Man in Black: His Greatest Hits', 'Wrong Place, Right Time', 'Crash', 'Row Of Doors', 'Love and Music', 'Beer for My Horses', 'The Very Best of Little Texas: Live and Loud', 'A Traditional Christmas', 'Cheapness and Beauty', 'Barely Famous Hits', '20 of the Best', 'Then Sings My Soul', 'Brand New Year', 'Just Between You and Me', 'Tall, Tall Trees', "Lonesome, On'ry and Mean", "Ol' Waylon Sings Ol' Hank", 'No Time To Kill', 'The Very Best of Tracy Lawrence', 'Welcome to Woody Creek', 'The Delta Sweete', 'Crystal Gayle', 'Tool Box', 'Nothing Ever Hurt Me (Half as Bad as Losing You)', 'Crash Craddock', 'Tammy Wynette Remembered', 'Life So Far', 'All Jacked Up', 'Outside the Frame', 'The Entertainer', 'Lines', 'All American Bluegrass Girl', 'Twisted Angel', "So Wrong/You're Stronger Than Me", 'Fourteen Greatest Hits', "The Devil's Right Hand: An Introduction to Steve Earle", 'The Very Best of Emmylou Harris: Heartaches & Highways', 'Willie and the Wheel', 'Sleepless Nights', '100% Kikki', 'Living Hard', 'Lone Star State of Mind', 'Paradise', 'The Promiseland', 'What Rhymes With Cars and Girls', 'Then & Now: The Hits Collection', 'The Best of Billy ""Crash"" Craddock', 'Unleashed', 'Rhinestoned', 'Live, Laugh, Love', "The Silent Majority: Terry Allen's Greatest Missed Hits", 'The Gambler', 'In My Wildest Dreams', 'Follow Me', 'The Definitive Collection', 'Okonokos', 'Stray Blues', 'Another Way to Go', 'Kathy Mattea', 'Cowboys, Sisters, Rascals and Dirt', 'Leaving Eden', 'If I Never Stop Loving You', 'What Can You Do to Me Now', 'The Ernest Tubb Story', 'Holding My Own', 'Everywhere', 'Rumor Has It', 'the JaneDear girls', 'Best of Dolly Parton, Vol. 3', 'Liberty!', 'Billboard Top Country Hits: 1962', 'Real Things', "If You're Gonna Play in Texas (You Gotta Have a Fiddle in the Band)", 'Greater Need', 'The Farm', 'Blues My Name', 'Born to Boogie', 'Come Along and Ride This Train', 'Days of Our Lives', 'I Miss My Friend', 'Places in Between', 'Craig Campbell', 'Take Me Down', 'Bucky Covington', 'The Great Songs of Roy Orbison', 'A Shot of Whiskey & a Prayer', 'Best of the Sugar Hill Years', 'Magic Fingers', 'Edens Edge', 'Version of the Truth', 'In the Mood: The Love Songs', "Livin' or Dyin'", 'Right on the Money', 'The Legend of Johnny Cash', "Doin' Somethin' Right", "Country Croonin'", 'Fly', 'Grey Dusk of Eve', 'Classics Collection', 'Country Willie', 'Cage the Songbird / Nobody Wants to Be Alone', 'Koncert V Praze', 'Hummingbirds of the Americas', 'Red Dirt Girl', 'Cooder Graw', 'The Rodney Crowell Collection', 'Revolution', 'Big Iron Horses', 'Greatest Hits Collection, Vol. 1', 'Eleven Stories', 'No Nonsense', 'Anthology of American Folk Music (Harry Smith ed.)', 'Only One Love in My Life', 'The Last Sessions', 'American Salute', 'Never Mind the Breeze Blocks', 'Out of the Ashes', "Greatest Hits Volume III: I'm a Survivor", "Progressive Pickin'", 'Dollars and Dimes', 'The Mavericks', "Startin' With Me", 'Buddy & Julie Miller', "Love's Ups and Downs", 'Greatest Hits Volume II', "We Weren't Crazy", 'Favorites', 'Hank Williams on Stage', 'Greatest Hits, Volume 1', 'All About a Feeling', 'Diamond Cut', 'Hillbilly Jedi', 'When You Get to Be You', 'So Help Me Girl', 'Leather and Lace', 'Willie Nelson and Family', "They Don't Make 'em Like My Daddy", 'Genuine Negro Jig', "Let's Make Sure We Kiss Goodbye", 'Guitar Monsters', 'The Other Side', 'Delicious Surprise', 'Stumble Into Grace', 'Never Say Die: The Final Concert', 'Eagle When She Flies', 'Slide Rule', 'Sheryl Crow', 'Giant Step / De Ole Folks at Home', 'I Feel Alright', "This Thing Called Wantin' and Havin' It All", 'The Fabulous Charlie Rich', 'Love in the First Degree', 'Live in Auburn, WA', 'The Road Not Taken', 'Love on the Inside', 'Town Line', 'One Kiss', 'Refried Dreams', 'Nashville Skyline', 'In My Own Backyard', 'Man, You Should Explode', 'Across My Heart', "80's Ladies", 'O Holy Night Live', 'On the Move', 'Under the Kudzu', 'Nothing Fancy', 'Dream Painter', 'Walk the Plank', 'Hardin County Line', 'Entertainer of the Year – Loretta', "Shakin'", 'Blue Ridge', 'Pearl', 'Behind the Scene', 'What a Wonderful World', 'Chill of an Early Fall', 'Born Country', 'One More Time/The MCA Recordings', 'Louisiana Woman, Mississippi Man', 'Storms of Life', 'This Woman', 'Ace in the Hole', "Blood's Too Rich", "My Life's Been a Country Song", 'On Tour', 'Live from Iraq', 'Chiseled in Stone', 'Something Up My Sleeve', 'Reflections: Greatest Hits', "I've Always Been Crazy", 'Deuces', 'Did I Shave My Legs for This?', 'I Think About You', 'Chicago Wind', "Nothin' Like the Summer", "Waitin' on the Wonderful", 'Turning Up and Turning On', 'Together', 'Natural Force', 'The Walls of a Prison', 'Best of the Early Years', 'I Will Stand', "That'd Be Alright", 'Lovers', 'Less and Less', 'I Still Believe in Love', 'Matt Kennon', '24-7-365', 'Root Supposed He Was Out Of The Question...', 'Highly Prized Possession', 'No Promises', 'Higher Ground', 'Long Black Train', 'Corn Fed', 'Clean Shirt', 'Lead Me Not', 'A Six Pack of Judd', 'In A Quiet Room II', 'Forgiving You Was Easy', 'Get Up Yourself', 'Augusta', 'Timepiece', 'Judy', 'Escondida', 'Best Always', 'Totally Country Vol. 6', 'The Clark Family Experience', 'Playlist: The Very Best of Willie Nelson', 'Jag ska aldrig lämna dig', 'Midnight Jamboree', "Broke 'n Broken", 'Write It in Stone', 'Wild Jimbos Two', "Ridin' Shotgun", 'No Shoes, No Shirt, No Problems', 'The Restless Kind', 'Martina', 'Big Bluegrass Special', 'Level', 'Back 2 Back', 'The Nashville String Band', "Touch 'em With Love", 'Turn Me Loose', 'Christmas', "Gettin' Out the Good Stuff", 'Be Good at It', 'Her Story: Scenes From a Lifetime', 'Iron Flowers', 'Gunfight at Carnegie Hall', 'Kevin Denney', 'Any Which Way You Can', 'The Love Album', 'Songs of Love and Heartache', 'Southern Nights', 'Joy to the World', 'Bird in the Tangle', 'United We Stand', 'The Artistry of Glen Campbell', 'The Kenny Rogers Story: 20 Golden Hits', 'Pages of Life', 'Feel the Music', 'Shadowland', 'The Very Best of Jessi Colter an Outlaw...a Lady', 'Somebody Like That', 'The Calling', 'Cheap Thrills', 'Hey Little One', 'Turn the Page', 'Appalachian Gospel', 'Collection', 'Faith in Me, Faith in You', 'Pocket Full of Gold', 'Jolie & the Wanted', "The Feeling's Not Right Again", 'Water From the Wells of Home', 'Glen Campbell in Concert with the South Dakota Symphony', 'W.T.F.', 'One Hell of a Ride', 'Radio Soul', 'Lucky Thirteen', "Chasin' Wild Trains", 'Folklore', 'Loving Every Minute', 'New Kind of Feeling', 'Real Live Woman', 'Rides Again', 'From a Radio Engine to the Photon Wing', 'Cowboy Songs III', 'Love Explosion', "Songwriter's Tribute", 'Easy Does It', 'Solid Ground', 'Two Sides of ""Crash""', 'Need You Now', 'Billboard Top Country Hits: 1959', 'Some Hearts', 'Run with It', 'People Like Us', 'Classic Country Music: A Smithsonian Collection', 'Icon', 'Reba: Duets', 'On Down the Line', 'Out West', 'Hillbilly Hit Parade', 'Harlequin Melodies', 'Looks at Life', 'The Greatest Hits Collection II', 'Legend: The Best of Willie Nelson', 'Mr. Bad Example', 'IV', 'American Spirit', "It's Always Somethin'", 'Uprooted', 'Totally Country Vol. 4', 'The Wake', 'I Prefer the Moonlight', "It's a Business Doing Pleasure with You", 'Too Wild Too Long', 'Cowboys Are Frequently, Secretly Fond of Each Other', 'The Notorious Cherry Bombs', 'Trampoline', 'Bullets in the Gun', 'The Magic of Christmas', 'Columbia Records 1958-1986', 'Grand Theft Auto: The Soundtrack', 'Chet Atkins: Guitar Legend: The RCA Years', 'Just Like You', 'Once Upon a Rhyme', 'Flowing Free Forever', "It's Your Love", 'I Finally Found Someone', 'Spirit Bound Flesh', 'Live from Las Vegas Exclusively at The Palms', 'Live from Austin, TX', 'True Believer', 'Country Music Star No. 1', 'The Willie Way', 'Marlee Scott', 'Only What I Feel', 'Union Street', 'A Collection of Hits', 'The Lonesome Jubilee', 'Steel Magnolia EP', 'Prisoner in Disguise', 'Live at the Royal Festival Hall', "I'll Stay Me", 'Songs for Tsunami Relief: Austin to South Asia', 'Me & Paul', 'Guitar Town', 'See If I Care', 'In Pieces', 'Hey, Do You Know Me', 'The Patty Loveless Collection', "Country Mike's Greatest Hits", 'The Ranch', 'If My Heart Had Windows', 'Is It Cold in Here', 'The Secret of Life', '20th Century Masters – The Millennium Collection: The Best of Ray Stevens', 'Ace', 'Mister Guitar', 'Tempted', 'One More Day', 'Indianola', 'I Wanta Sing', 'Yes!', 'Love Is Strong', 'Sings the Best of Jimmy Webb 1967–1992', "A Little More Livin'", "I'm Countryfied", 'Caitlin & Will – EP', 'Columbia Lane – the Last Sessions', "Honky Tonkin's What I Do Best", "Who Says You Can't?", 'Country Favorites-Willie Nelson Style', '25 Number Ones', 'Mendocino County Line', 'Best of Dolly Parton', 'P.O. Box 423', 'American Man: Greatest Hits Volume II', 'What Am I Gonna Do About You', 'Country Willie: His Own Songs', 'Anchored in Love: A Tribute to June Carter Cash', 'Wild & Blue', 'Come a Little Closer', 'Bra vibrationer', 'The Legend of Jesse James', 'This Is Me', 'Good Day', "Feelin' Good Train", 'Keith Urban in The Ranch', "Chasin' the Sun", 'Pride in What I Am', 'Billboard Top Country Hits: 1966', 'My Kind of Music', 'Latest Greatest Straitest Hits', "Achin' and Shakin'", 'High & Dry', 'Hi-Fi in Focus', 'Merry Christmas From London', 'Loup Garou', 'Warning Sign', 'Take Me to Your World', 'Mark McGuinn', 'Dance with Me', 'Sunday Morning Coming Down', 'On the Bandstand', 'Jenny Simpson', 'Restless', 'From Nashville with Love', 'Love Is a Rose', 'Mi Son', "That's How a Heartache Begins", 'Whiskey Bent and Hell Bound', 'Greatest Hits 2', "Sittin' In", 'Hair in My Eyes Like a Highland Steer', 'In Japan!', 'Wanted', 'In the Shadow of Two Gunmen', 'You Better Move On', 'The Last of the True Believers', 'The Ultimate Alabama', "Grown Men Don't Cry", 'The Good Time Songs of Glen Campbell', 'Johnny Cash Patriot', "I'm a People", 'Love Lessons', 'True Believers', 'Back to You', 'Extra Mile', 'Renegade', 'The Movie Songbook', 'Nothing I Can Do About It Now', 'Twentieth Century', 'The Family Bible', 'This I Gotta See', "Tomorrow's Sounds Today", 'American Sunshine', 'Drive (For Daddy Gene)', 'Alibis', "Comin' On Strong", 'Prop Me Up Beside the Jukebox (If I Die)', 'Life Is Messy', 'Mine', 'Barricades & Brickwalls', 'Lionel Cartwright', 'The Prison: A Book with a Soundtrack', '20/20 Vision', 'Calm Before the Storm', 'NFL Country', "Keep On Rockin'", 'Alone Again', 'Acid Queen', 'Days Gone By', 'Gone, Just Like a Train', 'Essential Alison Krauss', 'Born & Raised in Black & White', 'Big Boss Man', 'Flynnville Train', 'Copperhead Road', 'Scrapbook', 'There Will Come a Day', 'The Best of Country Sing the Best of Disney', 'The Happiest Girl in the Whole U.S.A.', 'Classic Christmas', 'All I Want Is a Life', 'Wherever You Are Tonight', 'Atlanta Blue', 'Easy as Pie', 'It Was Almost Like a Song', '20th Century Masters – The Christmas Collection: The Best of George Strait', 'Vet du vad jag vet', 'The Story of My Life', 'Lisa Angelle', 'Happiness Is You', 'Silver', 'Speak Now', 'My Life', 'This Side of the Moon', 'Neil Hamburger Sings Country Winners', 'Keep It Simple', 'My Favorite Songwriter: Porter Wagoner', 'Will the Circle Be Unbroken, Volume 2', 'Anchored in Love: Their Complete Victor Recordings, 1927-1928', 'iTunes Session', 'Big Wheel', 'Little Bird', 'Shooting Straight in the Dark', 'Thirteen', 'Tribute', 'Right on Time', 'How Great Thou Art', 'Mary and Joseph', 'Original Gold', 'Songs of the Season', "You've Got to Stand for Something", "Sneakin' Around", 'Lookout for Hope', 'And the Crowd Goes Wild', 'Do You Know', 'On the Evening Side', 'Katie Armiger', 'Early Tracks', 'Saddle Tramp', 'Merry Christmas Wherever You Are', "Don't Think Twice", 'We Love to Sing About Jesus', 'Whatever Comes First', 'Single White Female', 'If the Devil Danced (In Empty Pockets)', "Ain't No Trouble At All", 'Winter Marquee', 'Live!', 'Exile on Main St.', "Let's Be Us Again", 'Time Marches On', '20th Century Masters – The Millennium Collection: The Best of Toby Keith', "Livin' Lovin' Losin': Songs of the Louvin Brothers", 'This Is Ty Herndon: Greatest Hits', 'Bound by the Beauty', 'See What You Want To See', 'Columbia Country Classics', 'Lonesome Love', 'Made for Each Other', 'The Bradley Barn Sessions', 'Born That Way', 'Let Me Be There', 'Meet Me in Margaritaville: The Ultimate Collection', 'A Long Way Home', "When It's Just You and Me", 'Country Classics', "What Livin's All About", 'Six of One, Half Dozen of the Other', 'Shotgun Angel 25th Anniversary Issue', '16 Biggest Hits', 'Clay Walker', "Singin' with Feelin'", 'Bluegrass Hootenanny', 'My Kinda Party', 'Greatest Hits (Australian Edition)', 'Heaven and a Dixie Night', 'When I Dream', 'Hits by George', 'Unmistakable', 'Give It Away', 'Two of a Kind', 'It Would Be You', '20 Comedy Hits', 'Wanted Man', 'Unmistakable Trilogy: Love', 'Timeless', 'Tuskegee', 'The Age of Miracles', 'Temptation', 'The Glen Campbell Album', 'Live in Branson, MO, USA', 'Endless Seasons', 'Old No. 1', 'Home at the Golden Light', 'Between Raising Hell and Amazing Grace', 'The Heart of the Matter', 'Reminiscing', "I Got a Lot of Hurtin' Done Today/I've Got My Baby On My Mind", 'Somebody Wrote Love', 'Flyer', "Sissy's Song", 'Greatest Hits Volume Two', 'I Love It', 'Moonlight Becomes You', 'Songs of Rodeo Life', 'Whitehorse', 'Have You Never Been Mellow', 'Golden Streets of Glory', 'Knock Three Times', "That's the Way a Cowboy Rocks and Rolls", "I'd Love You All Over Again", 'Spice of Life', 'Emotional Traffic', 'Sweet Mother Texas', 'Drive', 'Pardners in Rhyme', "Please Don't Hate Me", 'Stand Still, Look Pretty', 'I Wish I Was Santa Claus', 'And Along Came Jones', 'Pretty Paper', 'iTunes Originals – Keith Urban', 'The Wheel', 'From Sea to Shining Sea', 'My Favorites of Hank Williams', 'The Best of Chet Atkins, Vol. 2', 'It Must Be Love', "Travelin'", 'A Little Time for Me', 'Just for a Thrill', 'The Legend', 'Greatest Hits, Vol. 3', 'Easy Tiger', 'Laying My Burdens Down', "Don't Cry Now", 'One of the Boys', 'Show Me How', 'Good Time', 'The Rock: Stone Cold Country 2001', 'Closer', 'Brave', 'La Música de Baldemar Huerta', 'Hell on Heels', 'The Best Day Ever', 'Classics', 'Time of My Life', 'King of Hearts', 'Guitar Slinger', "Cowboy's Sweetheart", "(Who Says) You Can't Have It All", 'Merry Christmas Strait to You', 'Too Cold at Home', 'Chad Brock', 'Looking for Christmas', 'Take Me as I Am', 'Dublin Blues', 'Unlimited', 'The New Will Never Wear Off of You', 'Ronnie Dunn', 'Lonestar', 'Miss the Mississippi', 'Forgive', 'Water & Bridges', 'Långt bortom bergen', "The IRS Tapes: Who'll Buy My Memories?", 'Beautiful Lies', 'El Corazón', 'Cowboy Town', 'Tracy Lawrence Live and Unplugged', 'The Sound in Your Mind', "Hank Williams, Jr.'s Greatest Hits, Vol. 3", 'Dolly, Dolly, Dolly', 'Court Yard Hounds', 'Time Well Wasted', 'More Love', 'Sings the Songs That Made Him Famous', 'Somebody New', 'John Michael Montgomery', 'Numbers', 'My Blue Ridge Mountain Boy', 'All of Me - Live in Concert', 'One More Try for Love', 'Songs of Inspiration II', "In Others' Words", "What If It's You", 'Singer of Sad Songs', 'Train a Comin’', 'The Life of a Song', 'Is He Listening?', 'Rabbitt Trax', 'Be as You Are', 'Whatcha Gonna Do with a Cowboy', 'The Fabulous Country Music Sound of Buck Owens', "Ropin' the Wind", 'For the Record: The First 10 Years', 'Jessica Simpson discography', 'When Somebody Loves You', 'Crazy: The Demo Sessions', 'Pure Hank', 'She Never Lets It Go to Her Heart', 'Ride, Ride, Ride', "That's What Daddy Wants", 'George and Tammy Super Hits', 'All-Time Hits', 'Red Dirt Road', 'Beautiful Door', 'Highways & Dance Halls', 'Catching a Tiger', 'Fri – En samling', 'How I Quit Smoking', 'RCA Country Legends', '1994', 'Hank Live', "You're My Man", "Love's Gonna Get Ya!", 'Something Like That', 'One Emotion', 'Good, Bad & Pretty Things', 'Strong Stuff', "It Won't Be the Last", 'Homesick Heroes', 'Jersey Boy', 'Tales Out of Luck (Me and the Drummer)', 'Southern Voice', 'Three Hanks: Men With Broken Hearts', 'Love Like Crazy', 'The Christmas Album', 'Ride', 'Honeysuckle Rose', 'Thankful', 'Rhythm Country and Blues', 'Three Good Reasons', "I've Got All the Heartaches I Can Handle", 'There Goes', 'My Heart Has a Mind of Its Own', 'Off to Join the World', '20th Century Masters - The Millennium Collection: The Best of Mark Chesnutt', 'II', 'Bang Bang Bang', 'Songs About Me', "Can't Keep a Good Man Down", 'Ghost on the Canvas', 'From a Distance: The Very Best of Nanci Griffith', 'The White Album', 'Honky Tonk Attitude', 'Let Me In', 'Chief', 'Ultimate Waylon Jennings', 'Americana', 'Live från Rondo', 'Golden Ring', 'The Walls Came Down', 'Too Dumb for New York City, Too Ugly for L.A.', 'Nothing But Love', 'Proud to Be Here', 'Sweet and Wild', "More of 'Old Golden Throat'", 'The Road to Ensenada', 'Pay the Devil', 'All I Can Be', 'Get Right with the Man', 'Never Be the Same', 'Just Another Cowboy Song', 'Blood, Sweat and Tears', 'Music from and Inspired by Desperate Housewives', 'Shine', 'So Good Together', '5th Gear', 'Glen Campbell and Friends', 'Pure BS', 'Min barndoms jular', 'Jana Kramer', 'State of the Heart', 'Angels & Devils', 'Love Me or Leave Me', 'Out of a Dream', 'Under the Influences, Volume 1', 'Running', 'This Is the Life', 'Come Darkness, Come Light: Twelve Songs of Christmas', 'Lubbock (On Everything)', 'Larry Gatlin discography', 'Rockabilly Blues', 'Night Train', "Coal Miner's Daughter", 'Counting Sheep', 'My First Holly Golightly Album', 'Evangeline', 'Country-Folk', "Smokin' the Dummy/Bloodlines", 'Trio', 'Up Against My Heart', 'The Desert Rose Band', 'Feminine Fancy', 'Heartland', 'Live Shots', 'Jimmy Wayne', 'Celebración de la Ciudad Natal', 'Greatest Hits: 1994-2004', 'Party Heard Around the World', 'Just Another Day in Parodies', "Rockin' with the Rhythm", 'The Truth', 'Cledus Envy', 'Marty Stuart discography', "Ain't Living Long Like This", 'Regular Joe', 'The Importance of Being Ernest', 'The Best of Billy Ray Cyrus: Cover to Cover', "Let's Go", 'Honesty', 'Girl Out of the Ordinary', 'Think About Love', 'Dreamers Like Us', 'VH1 Storytellers: Johnny Cash & Willie Nelson', 'Wild Angels', 'Honey in the Rock', 'Floridays', 'Phil Vassar', 'This Christmas Celebrate Me Home', 'Come to Me', 'Kentucky Thunder', 'Wanna Be Your Joe', 'Wagonmaster', 'Pictures of Moments to Remember', 'Just Sylvia', "Workin' On It", '444', 'Did I Shave My Back For This?', 'Wichita Lineman', 'Shenandoah', 'Lee Roy Parnell', 'Wild Streak', 'Ultimate Alabama 20 # 1 Hits', "So You Don't Have to Love Me Anymore", 'Daniel Amos', 'Flying Under the Radar', 'Rainbow Connection', 'Soon', 'Bjorøyl', "Hello, I'm Johnny Cash (1970)", 'Almost Goodbye', 'Just to See You Smile', 'Do You Hear…Christmas', 'Consider This', 'Longing for Old Virginia: Their Complete Victor Recordings (1934)', 'Blue Clear Sky', 'Good News', 'Underground Album', 'Now, There Was a Song!', '4 Runner', 'First Impressions', 'The Royal Treatment', 'The Great Hits of Glen Campbell', 'Different Kind of Fire', 'Live: Live Those Songs Again', 'Pretty Little Stranger', 'In This Life', "Somewhere There's a Someone / The Hit Sound of Dean Martin", 'Making a Good Thing Better', 'Night Things', 'Happy, Texas', 'Matters of the Heart', 'Love Songs', "What You Don't Know", 'Burn Your Playhouse Down – The Unreleased Duets', 'Blue Roses from the Moons', 'Live at Austin City Limits Festival', 'Frisco Mabel Joy', 'Totally Country Vol. 2', "Livin' on Love", 'Wine Colored Roses', 'Willis Alan Ramsey', 'Justin Moore', 'For God and Country', "Say Forever You'll Be Mine", 'Sweet Memories', 'Blink of an Eye', 'Dirt', 'Your Man', 'Change', 'Songs from Rabbittland', 'The Touch', "It's America", 'Latest & Greatest', 'Dierks Bentley', 'Country Boy and Country Girl', 'My Very Special Guests', 'San Antonio Rose', 'Buckles and Boots', "You Won't Ever Be Lonely", 'New Morning', 'Roots, Volume 1', 'In My Dreams', 'The Best of C. W. McCall', "I'm About to Come Alive", "The Johnny Cash Children's Album", 'Beyond the Blue Neon', 'Rebel Heart', 'The Best of Olivia Newton-John', 'Grand Theft Auto: San Andreas Official Soundtrack Box Set', 'Full Circle', 'Anything Goes', "On This Winter's Night", 'Trouble in Mind', 'These Are the Moments', 'When the Sun Goes Down', 'The Best of Chet Atkins', '12 Greatest Hits', 'The Red and White', 'The Sound of a Million Dreams', 'The Light That Guides You Home', 'Angel Flying Too Close to the Ground', 'Van Lear Rose', "Hangin' On", 'White Christmas', 'Why Do I Have to Choose', 'Sails', "Somethin' 'Bout You Baby I Like", "A Man Ain't Made of Stone", 'Tennessee River', 'Tall Grass & Cool Water', 'Live a Little', 'Amarillo Sky', 'RCA Country Legends: John Hartford', 'June Carter and Johnny Cash: Duets', 'What Do I Do With Me', 'TNT', "Ruby Don't Take Your Love to Town", 'The Best of Restless Heart', 'Pop a Top', "Ramblin'", 'The Very Best of Alan Jackson', 'Old Things New', 'Famous First Words', 'Young Man', 'Rocky Mountain Music', 'I mitt hjärta', 'Jo Dee Messina', 'Conspiracy of Divine Events', "Just Because I'm a Woman", 'Vote for Love', 'Without a Song', '12 Songs', "Class of '55: Memphis Rock & Roll Homecoming", "Whoever's in New England", 'Repossessed', 'The Junkie and the Juicehead Minus Me', "Hank Williams, Jr.'s Greatest Hits", 'Haywire', 'Bobbie Gentry & Glen Campbell', 'From There to Here: Greatest Hits', 'I Hope You Dance', 'A Place in the World', "Rattlin' Bones", 'Road Dogs', 'She Even Woke Me Up to Say Goodbye', 'Built to Last', 'Willie – Before His Time', "Talkin' 'Bout Men", 'Billboard Top Country Hits: 1967', 'Highways & Heartaches', 'Blood Sweat & Steel', 'Inside', 'Blue Moon', 'A Couple of Days in Larsville', 'The Man I Want to Be', 'Essentials', 'Reach', 'Changing Channels', 'Talking to Myself', 'Love, Pain & the whole crazy thing', 'Greatest Hits Encore', 'I Knew Jesus (Before He Was a Star)', 'The Bocephus Box: The Hank Williams Jr. Collection 1979-1999', 'I Walk the Line', 'Mirriam', 'Mickey Newbury Collection', 'Country Love Songs', 'George Jones (We Can Make It)', 'Craig Morgan', "Waylon Sings Ol' Harlan", 'Dusty Drake', "Cheers, It's Christmas", 'Take It to the Limit', 'Brett James', 'Shotgun Willie', 'Mercury Blues', 'Common Thread: The Songs of the Eagles', 'You Still Got Me', 'Remember December', 'Tell Me Why', 'All I Want For Christmas Is A Real Good Tan', 'Last Thing I Needed First Thing This Morning', "Harry Smith's Anthology of American Folk Music, Vol. 4", 'Yes I Do', 'House on Old Lonesome Road', 'Big River', 'Live Two Five: In Concert', 'Shiver', 'If You Ain’t Lovin’ You Ain’t Livin’', 'Never Love You Enough', 'Ten Rounds', 'Visions of Love', 'Stones in the Road', 'Nothing to Lose', 'The Best Year of My Life', '...Farm Out!', 'Patchwork', 'Big Hopes', 'Everybody Loves a Nut', "Something Goin' On Here", 'Jeff Carson', "Dream Walkin'", 'Spectrum VII', 'Homemade Ice Cream', 'Song Painter', 'Two Lanes of Freedom', 'Come Together: America Salutes the Beatles', 'Highways & Honky Tonks', 'A Tribute to the Best Damn Fiddle Player in the World', 'Hard Hat and a Hammer', 'Beautiful Mess', 'Milsap Magic', "I'm Jessi Colter", 'Ride This Train', 'High-Tech Redneck', 'Sisters', 'Wild-Eyed Dream', 'Dangerous Man', "I'll Help You Forget Her", 'The Dollar', 'Back to Me', 'Strait From the Heart', 'The Merle Travis Guitar', 'Under the Wire', 'Stepping Stone', 'Friendship', '#1 with a Bullet', 'Chase the Sun', 'Celebrate The Difference', 'Cosmic Cowboy Souvenir', 'Have I Got a Deal for You', "Break-Up / I'll Make It All Up to You", 'The Rankin Family', 'Cimarron', 'The Essential Chet Atkins: The Columbia Years', 'Profile II: The Best of Emmylou Harris', 'Everything Is Gonna Work Out Fine', 'Day Job', 'Time Passes By', 'Greatest Times of All', 'Billy: The Early Years', 'Still the Same Ole Me', 'New Way (To Light Up an Old Flame)', 'What Mattered Most', 'Country Music Concert', 'WCW Mayhem: The Music', 'Down from the Mountain', 'George Strait', 'Up!', 'Face of a Fighter', 'One', 'South Of Heaven West Of Hell', 'Goodbye to the Island', 'Buddy Jewell', 'The Very Best of Ray Stevens', 'The Storm', 'Just a Matter of Time', 'Waylon and Company', 'We Only Make Believe', 'Flowing Rivers', 'Kikkis 15 bästa låtar', 'Variations', 'Where Your Road Leads', 'Making Plans', 'Hag', "Ol' Waylon", 'Black on Black', 'Crazy Nights', "Rockin' in the Country", 'Valley Between Love', 'Hot Apple Pie', '100 Proof', 'Honkytonk University', 'Volume One', 'Labor of Love', 'How Great Thou Art: Gospel Favorites from the Grand Ole Opry', 'My Name Is Buddy', 'Indian Outlaw', 'All in Time', 'Five Feet High and Rising', 'The Essential Alabama', 'The Johnny Cash Family Christmas', 'Steve Forde', 'Kristofferson', 'I Wanna Go Home With You', 'Dottie West: Greatest Hits', 'Badlands: Ballads of the Lakota', 'Dwight Sings Buck', 'Billboard Top Country Hits: 1990', 'Rodeo And Living Free', 'Outlaws and Angels', 'After All These Years', 'Country Girl', 'Broken In', 'The Conversation', 'Peaks, Valleys, Honky Tonks & Alleys', 'A Place Called Love', 'The Supremes Sing Country, Western and Pop', 'Sails to the Wind', 'Miss Smith Goes to Nashville', 'Blackhawk', 'Ultimate Dolly Parton', 'Walk Through This World with Me', 'Anyway the Wind Blows', 'When I Call Your Name', 'Stampede', 'White Trash With Money', 'Elvis Christmas', 'Live in San Marcos', 'Not Fade Away', "Geronimo's Cadillac", 'The Essential Dixie Chicks', 'How I Feel', 'The Promised Land', 'Born to Fly', 'The Adventures of Johnny Cash', 'The Best of Collin Raye: Direct Hits', 'Shine On', 'Duke Lion Fights the Terror!!', 'Where the Fast Lane Ends', 'My Farewell to Elvis', 'Lonesome Standard Time', 'American Pride', '20 bästa låtar', 'The Johnny Cash Songbook', 'Essential Steve Earle', 'Gentle On My Mind', 'When Fallen Angels Fly', 'A-Town Blues', 'Heart of Cash', 'Top Marks: His First 20 Hits', 'I Love Dixie Blues... So I Recorded', 'The Big Picture', '7 Wishes', 'Early Years, Vol. 2', 'Jim Edward, Maxine, and Bonnie Brown', 'Playlist: The Very Best Of Dolly Parton', 'Bipolar and Proud', 'Big Dreams in a Small Town', 'Authorized Bootleg: Live – Agara Ballroom – Clevland, Ohio', "Bad Magick: The Best of Shooter Jennings and the .357's", 'Neon', 'Interiors', 'Music for All Occasions', 'Some Gave All', 'God Bless America Again', 'New Orleans Moon', 'This Time', 'Crash Craddock Live!', 'Shut Up and Kiss Me', 'Thunderstorms and Neon Signs', 'Loveline', 'Hypnotize the Moon', 'Will the Circle Be Unbroken (side 2)', 'Earthwords & Music', 'The Sailor', 'It Came from San Antonio', "St. Vincent's Court", 'Connie Smith Sings Bill Anderson', 'Downtown Country', 'The MCA Years: A Retrospective', 'Kentucky Hearts', 'Next Big Thing', 'What Am I Waiting For', 'Porter & Dolly', 'Tougher Than Leather', 'The Pops Goes Country', 'Back in Your Life', "It's Your Call", 'Thompson Square', "I'll Sing You a Song and Harmonize Too", 'First Hand', 'What I Want to Be Remembered For', 'Lucky Man', 'Songs of Kristofferson', 'Carry Me Back', "Here's Some Love", 'The Glen Campbell Collection (1962–1989) Gentle on My Mind', 'Vanishing Point', 'Crystal Lady', 'Thompson Street', 'Hollywood, Tennessee', 'Have Yourself a Tractors Christmas', 'Icon 2', 'Songs by Patsy Cline', 'Old 8x10', 'The Best of James Taylor', 'Bigger Than the Beatles', 'Milk Cow Blues', 'Father Time', 'Patriotic Country', 'Music Man', 'Rock-A-Doodle', 'Have You Forgotten?', 'A New Place in the Sun', 'Strong', 'Tracy Lawrence', 'Shifting Gears', 'Dos Mundos', 'Billboard Top Country Hits: 1986', 'A Lady Named Smith', 'Live at Montreux 2005', 'First Time in a Long Time', "Sweetheart's Dance", 'All the Roadrunning', 'Go Long Mule', 'Give Me the Roses While I Live: Their Complete Victor Recordings (1932–1933)', 'The Tractors', 'Based on a True Story...', 'Unforgiving Mistress', 'Play', "Love's Funny That Way", 'Southern Star', 'A Portrait of Merle Haggard', 'Faith, Hope, Joy', 'Unglamorous', 'The Rock', 'Flowers on the wall', 'Taylor Swift [DELUXE EDITION]', 'Inside Out', 'Blue Plate Special', "Long Time Comin'", 'The Most of Ray Stevens', 'Kerosene Hat', 'Maybe We Should Just Sleep on It', "Souls' Chapel", 'Billboard Top Movie Hits', 'Jumped Right In', 'Fight Like A Girl', 'Old Brush Arbors', 'Pretty Much Your Standard Ranch Stash', 'Where My Heart Is', 'Wilderness', 'Loose, Loud & Crazy', 'The Happiest Girl in the Whole USA', 'The Best of Reba McEntire', 'Love Is Strange', 'What I Do the Best', 'Rockie Lynne', "It's Not Big It's Large", 'The Great Dobro Sessions', 'Get the Best of Ray Stevens', 'Let Them Be Little', 'Nashville', 'I Am Shelby Lynne', 'Joe Nichols', "Back in Baby's Arms", 'The Pressure Is On', 'Harmony', 'The Best of Dolly Parton', 'Greatest Hits/Every Mile a Memory 2003–2008', "Chet Atkins' Workshop", 'Touch Your Woman', 'Coat of Many Colors', 'We Go Together', 'Untamed', 'Meanwhile, Back at the Ranch', "(There's A) Fire in the Night", 'There You Go Again', 'For the Last Time: Live From the Astrodome', 'Put Yourself In My Shoes', 'Always & Forever', 'Honky-Tonk Stardust Cowboy', "Y'All Come Back Saloon", 'To It and At It', 'I Like It, I Love It', 'Waylon & Willie', 'Everybody Knows', "It's All in the Movies", 'With Love', 'Cannonball', 'The Late Great Townes Van Zandt', 'One Good Friend', 'Stars & Stripes, Volume 1', 'Old Flame', 'Arctic Rose', 'I Wish Tonight Would Never End', 'Big City', 'Better Day', 'Deeper Waters', 'The Holy Land', 'Songcatcher', "The Words Don't Fit the Picture", 'The Ballad of Sally Rose', 'Working in Tennessee', 'My Honky Tonk History', 'War Paint', 'John Anderson', 'Black Bear Road', 'Pirates of the Mississippi', '35 Biggest Hits', 'Blame the Vain', "The Definitive Greatest Hits: 'Til the Last Shot's Fired", "I'll Be Your Jukebox Tonight", 'Cocky', 'Living and Dying in 3/4 Time', 'Ghost Dance', 'Cool Country Favorites', 'To the Bone', 'Inside a Tear', 'You Go Your Way', 'How Sweet the Sound: 25 Favorite Hymns and Gospel Greats', 'A Night to Remember', 'The Essential Willie Nelson', 'Right in the Middle of It', 'Man of Steel', 'All in Good Time', 'The Legend and the Legacy', 'Tall Man', 'The Legend of Johnny Cash Vol. II', 'Million Mile Reflections', 'The Song We Fell in Love To', 'My Remembrance of You', 'Even Now', 'Here We Go Again: Celebrating the Genius of Ray Charles', 'On a Good Night', 'Elv1s: 30 #1 Hits', 'A Man Called Hoss', 'Anne Murray / Glen Campbell', "What's Your Mama's Name", 'Surprise', 'Rare Junk', 'Dottie', 'Heart Like a Wheel', "Reba's", 'What If We Fall In Love?', 'Loving Proof', 'In the Good Old Days (When Times Were Bad)', 'Euphoria', 'Honky Tonk Masquerade', 'Loretta Lynn Sings', 'Crystal', "Walkin' the Strings", 'You Oughta Be Here with Me', 'The Chase', 'In Full View', 'The Crybaby', 'Songs of Our Soil', 'Secret of Giving: A Christmas Collection', 'Gravitational Forces', "Nobody's Angel", 'Dean Martin Hits Again / Houston', 'Rabbit on My Wheel', 'This Way Is My Way', 'Wayward Angel', 'Close Harmony', 'Straight Talk: Music From the Original Motion Picture Soundtrack', "That's Why", 'A Country Star Is Born', 'Honky Tonk Christmas', 'Hem till Norden', 'Love Will Turn You Around', 'What I Live to Do', 'We All Get Lucky Sometimes', "Lookin' Back at Myself", 'Emotion', 'Christmas: The Gift', 'Rose Tattoo', 'The Reasons Why', 'Longhaired Redneck', 'The Pilgrim', 'Totally Country', "Ain't Gonna Worry", 'Mr. Country Rock', 'The Band Perry EP', 'Sixwire', 'Simpatico', 'Tokyo, Oklahoma', "If You're Going Through Hell", 'Unbroken', "American VI: Ain't No Grave", 'Light of the Stable', 'Faster & Llouder', 'The Three Bells', "Dancin' on the Boulevard", 'Thrasher Shiver', 'Wrapped Up Good', 'Rascal Flatts', 'Crank It Up: The Music Album', "That's Enough of That", 'All the Best', 'Fried Green Tomatoes', 'Greatest Hits 1987–1997', 'Would You Lay With Me (in a Field of Stone)', 'Spongebob Squarepants: The Yellow Album', "Who's to Bless and Who's to Blame", 'Watch Me', 'Now', 'Letter to Home', 'Until You Walk The Tracks', '40-Hour Week', 'Patty Loveless Sings Songs of Love', 'My Tennessee Mountain Home', 'The Rambler', '17 Greatest Hits', 'On the Front Line', 'Doc Walker', 'Humming by the Flowered Vine', 'Van Zant II', 'Tara Lyn Hart', 'Off the Hillbilly Hook', 'Reason to Believe', 'Two Thousand Miles', 'Tennessee Plates', 'New Miserable Experience', 'Love Travels', 'Live', 'Just the Two of Us', 'Connie Smith Sings Great Sacred Songs', "Farmer's Daughter", 'One Fair Summer Evening', 'Press On', 'Burn', 'Somewhere Over the Rainbow', 'One Horse Blue', 'Man Like Me', 'She Rides Wild Horses', 'Tim McGraw', 'Tim McGraw and The Dance Hall Doctors', 'All the Women I Am', 'The Lost Trailers', 'Hannah Montana: Hits Remixed', "Everything's Gonna Be Alright", 'Me and My Gang', '12 Golden Country Greats', 'When We Make Love', 'Live From Austin, TX', 'I Just Came Home To Count The Memories', "Spooky Lady's Sideshow", 'Who Needs Pictures', 'Roots and Wings', 'The Song Remembers When', 'No Place That Far', 'Two Teardrops', 'What a Wonderful Christmas', 'Already Restless', 'My Second Album', "Thinkin' About You", 'Rollercoaster', 'Modern Times', 'Are You Ready for Freddy?', 'Pain to Kill', 'Totally Country Vol. 5', 'I Told You So: The Ultimate Hits of Randy Travis', 'Where Forever Begins', '10', "Fortuneteller's Melody", 'Boomtown', 'Morning Sun', 'Cheating at Solitaire', 'Brand New Man', 'Greetings from Cairo, Illinois', 'Highwayman', 'Worried Man Blues: Their Complete Victor Recordings (1930)', 'Boogity Boogity', 'John R. Cash', 'Right Back Atcha Babe', "C. W. McCall's Greatest Hits", 'Back When', 'The Good Life', 'White Shoes', 'A Gospel Journey', 'Learning to Breathe', 'Worship & Faith', 'The Man', 'I Got Dreams', 'Face the Promise', 'Black and White', 'Early Recordings', 'Songs from the Grass String Ranch', 'Greatest Hits 1990-1995', 'On the Road', 'Billboard Top Country Hits: 1960', 'Old Yellow Moon', 'Hits Alive', 'A Moment of Forever', "We Can't All Be Angels", 'Better Than I Used to Be', 'Strawberry Cake', 'Behind Closed Doors', 'Aloha Manitoba', 'Cafe on the Corner', 'Joshua', 'Taylor Swift', 'Papaya Coconut', 'U Can Never B2 Straight', '#1s... And Then Some', "Rollin' with the Flow", 'Prayer of a Common Man', 'Absolute Torch and Twang', 'Love Letters', 'What a Way to Live', 'Guitar Country', 'Carolina', 'From Elvis in Memphis', "I've Got Something to Say", 'Honky Tonk Heroes', 'Undeniable', 'X - Ten', 'Unconditional Love', 'Of Your Son', 'Jennifer Hanson', 'Texas Moon', 'BBC Radio 1 Live in Concert', 'Roger Miller', 'Living in the Promiseland', 'Got No Bread, No Milk, No Money, But We Sure Got a Lot of Love', "Let's Say Goodbye Like We Said Hello", 'The Dust Bowl Symphony', 'The Fabulous Johnny Cash', 'Girl of Your Dreams', 'The McClymonts', 'Tony Joe White', "Followin' a Feelin'", 'I Want My Money Back', 'Pull My Chain', "Cute 'n' Country", "It's Alright to Be a Redneck", 'Here You Come Again', 'If Only My Heart Had A Voice', 'Outskirts of Town', 'Mountain Home', 'Lace', 'Wings of a Honky-Tonk Angel', 'Chris Cagle', 'Those Memories of You', 'From the Heart', "Don't Go Near the Water", 'Dusty Smiles and Heartbreak Cures', 'Baby Blue Paper', 'Red Headed Stranger', 'Charlie Daniels', 'Gentle Creatures', 'Small Town Southern Man', 'Danielle Peck', "Nobody's Got It All", 'Welcome to Trini Country', 'By the Light of the Moon', 'Words', 'Waylon', "Someday We'll Look Back", 'Lady Down on Love', 'Missed Me by a Mile', 'Songs Our Daddy Taught Us', '9 to 5 and Odd Jobs', 'Broken (And Other Rogue States)', 'Thank God for Believers', 'Everything I Love', 'Hits and More', 'The Signature Series, Volume 2: Straight, Clean & Simple / Talk It Over in the Morning', 'Playlist: The Very Best of Dixie Chicks', 'J.D. Crowe & The New South', 'Drive Me Wild', 'The Art of Virtue', 'The Games Of The XXVII Olympiad: Official Music From The Opening Ceremony', 'Eli & Young Band', 'Sinners Like Me', 'Steel City Trawler', 'Brokeback Mountain: Original Motion Picture Soundtrack', '(Songbook) A Collection of Hits', 'Modern Pain', 'True Love', 'Step On Out', 'The Sound of Johnny Cash', 'Changing Horses', 'Where the Beat Meets the Street', 'Back With a Heart', 'Big Love in a Small Town', 'Life Happened', 'Still Restless', "Just Lookin' for a Hit", 'View from the House', 'The Night Atlanta Burned', 'Misty', 'Somewhere in the Stars', 'Starting Over Again', 'Tupelo Honey', 'Greetings from Lost Angeles', 'Rodney Crowell', 'Wildflowers', 'Rock and Roll Lullaby', 'A Time to Sing', "Don't Take the Girl", 'Mark Collie', 'Lucille and Other Classics', 'Hank Williams the Roy Orbison Way', 'The Season for Romance', 'Love Goes ON', 'A Horse Called Music', 'Brand New Dance', 'Full Moon', 'Jet Black & Jealous', 'Amigo', 'Love Bug', 'Bigger Hands', 'Little Old Fashioned Karma', 'Watch the Wind Blow By', 'Roll On', 'Love in the Real World', 'Step Inside This House', 'Redemption', 'Del Rio, TX 1959', "We've Got Tonight", 'Rich Rocks!', 'Greatest Hits', 'North Country', 'Greatest Hits... And Then Some', 'Tonight I Climbed the Wall', 'Amazing Grace 3: A Country Salute to Gospel', 'Bulletproof', 'Bouquet of Roses', "Porter 'n' Dolly", 'Daytime Friends – The Very Best of Kenny Rogers', 'All of Me', 'LeAnn Rimes', "It's Sure Gonna Hurt / The Love You Gave", 'Handmade', 'I Honestly Love You: Her Greatest Hits', 'Acoustic Traveller', 'What My Heart Already Knows', 'Wilory Farm', 'Born to Sing', "What's That I Hear?: The Songs of Phil Ochs", 'Patsy Cline Showcase', 'Ghost Town', 'Reunion', 'Rosanne Cash', 'Music in tribute of Iron Maiden', 'This Time Around', 'I Know a Place', 'The List', 'Me & Chet', 'Make Way for Willie Nelson', 'The Essential Johnny Cash (1955-1983)', 'The Best of Porter Wagoner and Dolly Parton', 'Look My Way / Nice to Be Around', 'One Man Band', 'Cold Mountain', 'Eclectic Guitar', 'Ambush', "That Don't Make Me a Bad Guy", 'Billy ""Crash"" Craddock', 'Billy Dean', 'Just Us Kids', 'Wave on Wave', 'Six Days on the Road', 'Everything', 'The Grand Tour', "Ladies' Choice", 'Chet Atkins Picks on the Pops', 'For the Love', "I'm Already There", "Livin'", 'Live From Austin Tx', 'Souvenir', 'Twenty Greatest Hits', 'Used Heart For Sale', 'Dare to Dream', 'Easton Corbin', 'Treasures', 'Better Days', 'Tanya Tucker', 'Strait Country', "Willin'", 'Ernest Tubb Sings Hank Williams', 'Long Stretch of Lonesome', 'Juice', "Country Pickin': The Don Rich Anthology", 'Never Could Toe the Mark', 'Linda Davis', "Men'll Be Boys", 'Hank Williams, Jr. and Friends', 'High Mileage', "After You, Pride's Not Hard to Swallow", 'Reflections', 'Another Story', "Now That's Christmas", 'I Came to Hear the Music', 'Real Life', 'The Revelation', 'A Crystal Christmas', 'Sins, Lies and Angels', 'Simple Man', 'This Time I Almost Made It', 'One Step Closer', 'It Always Will Be', 'In Dreams: The Greatest Hits', "There's a Hippo in My Tub", 'Gloriana', 'In a Quiet Room', 'Together at the Bluebird Café', 'Time Flies', 'Mountain Music', 'Invitation Only', 'Greatest!', 'Cowboy Classics: Playing Favorites II', "Little Ol' Cowgirl", '20th Century Masters: The Millennium Collection: The Best of Steve Earle', 'Elite Hotel', "Goin' Down Rockin'", 'Hartford and Hartford', 'You Get What You Give', 'Way Out Here', 'Christmas, Volume 2', 'Billboard Top Country Hits: 1989', 'Coast Is Clear', 'The Blue Ridge Rangers', 'Golden Road', 'Balls', 'Love Is', 'Viper of Melody', "David's Album", '20th Century Masters: The Millennium Collection: The Best of Billy Ray Cyrus', "If That Ain't Country", 'Spirit Dancer', 'Plow to the End of the Row', 'A Real Live Dolly', 'The Best of the Pirates of the Mississippi', 'Something Special', 'Blue Angel', 'The Collection', 'Stella Parton discography', 'If I Could Only Fly', 'Luxury Liner', "Waitin' In The Country", 'A Tribute to the Delmore Brothers', 'Rhinestone Cowboy / Bloodline: The Lambert & Potter Sessions 1975-1976', 'Beautiful Tragedy', 'Amy Holland', 'Planes, Trains and Automobiles', 'Just in Time for Christmas', 'Small Town Girl', 'Varför är kärleken röd?', 'Lightning on the Strings, Thunder on the Mic', 'Christmas with Glen Campbell', "Somebody's Knockin'", 'Ten Strait Hits', 'East Nashville Skyline', 'Great Gospel Songs', 'The Wolf', '20th Century Masters: The Millennium Collection: The Best of Waylon Jennings', 'These Days', 'The Hits Live', 'Set List', 'My Favorite Guitars', 'The Very Best of John Michael Montgomery', 'Love, God, Murder', 'Red Rag Top', 'Seven Year Ache', 'Tougher Than Nails', "You Ain't Woman Enough", 'Rebels on the Run', 'The Best', 'High on the Hog', 'What This Country Needs', 'Songs of a Love Affair', 'White Limozeen', "Yesterday's Wine", 'Jack Ingram', 'City Lights: Country Favorites', 'Dress Rehearsal', 'A Picture of Me / Nothing Ever Hurt Me', 'Reunited with Jimmy Webb 1974–1988', 'Sea Change', 'Party for Two', "Livin' Lovin' Rockin' Rollin': The 25th Anniversary Collection", 'Work in Progress', 'My Kind of Country', 'Acoustic', 'Down in the Boondocks', 'Fall Into Me', 'Songs From the Crystal Cave', 'The Taker / Tulsa', 'Put Yourself in My Place', 'The Right Place', "Ramblin' Fever", 'Ernest Tubb Record Shop', 'Always on My Mind', 'Streamline', 'Jerry Reed Live, Still!', 'The Best of the West', "Blake Shelton's Barn & Grill", 'The Joan Baez Country Music Album', 'Little Cowpoke', 'Keyed Up', 'String of Pearls: A Greatest Hits Collection', 'This Fiery Road', 'Just an American Boy', 'Sings Heart Songs', 'The First 50 Years', 'Honky Tonk Badonkadonk', "Canzone d'Amore", 'Down the Road I Go', "Connie Smith's Greatest Hits, Vol. 1", 'If I Were a Bird', 'All Time Hits', 'It Takes People Like You', 'Just Who I Am: Poets & Pirates', 'No Ordinary Man', 'For The Record (43 Legendary Hits)', 'Blue County', 'Songs That Made Country Girls Famous', 'Bitter Tears', "Somebody's Waiting", 'Willow in the Wind', 'Once Upon a Time', 'Luke the Drifter, Jr. Vol. 2', 'Surreal Thing', 'General Store', 'Cherry Hill Park', "Just Pickin'", 'World of Filth', 'Heathen Songs', 'Chicken Skin Music', 'Mackintosh & T.J.', 'Just for the Record', '34 Number Ones', 'The Legendary C. W. McCall', 'Dancehall Dreamer', 'Lonesomeville', 'Stay Tuned', "A Woman's Love", 'Jesus Was a Capricorn', 'At Folsom Prison', 'Christmas With Buck Owens and His Buckaroos', 'Seminole Wind', 'Pass The Jar: Zac Brown Band and Friends Live from the Fabulous Fox Theatre In Atlanta', 'Are You Ready for the Country', 'Sweethearts of the Rodeo', 'The Best There Is', 'Southern Child', 'Firefly soundtrack', "Thinkin' Problem", "She Won't Be Lonely Long", 'Last of the Breed', "Christmas Time's A-Comin'", 'From Hell to Paradise', 'Love Without Mercy', 'The Encore Collection', 'American V: A Hundred Highways', "Shakin' Things Up", 'Greatest Hits: From the Beginning', 'Glen Campbell Live! His Greatest Hits', 'The Two Sides of Leonard Nimoy', 'Ronnie Milsap', 'Wheels', 'Let It Rain', 'Gold and Green', 'Country Club', "I'll Be Home for Christmas", 'The Essential Foster and Lloyd', 'Maverick', 'Survivor', 'Do Right By Me', 'The Journey to Miracle River', 'Pages', 'Cafe Carolina', 'Born Free', 'Cactus and a Rose', 'Country Partners', 'Thanks a Lot', "That's the Way Love Goes", "In the Driver's Seat", 'Three Chords and the Truth', 'In Another World', 'Essential Super Hits', 'Well Deserved Obscurity', '#7', 'Hungry Again', 'The Forester Sisters', 'Guy Clark – Greatest Hits', 'Sagebrush Symphony', "Keep Movin' On", "Comin' to Your City", 'Ricochet', 'Love Changes Everything', 'The Best of Willie Nelson', "Burnin'", 'Rare Bird Alert', 'BR5-49', 'The Collection 20 Songs From the Heart', "# 1's", 'Cledus Navidad', 'Childish Things', 'Country Soul', 'Rowdy', 'Folk Songs of the Hills', 'It Matters to Me', 'The Dirt Band', 'Angel Band', 'Lonely Grill', "Touch Me When We're Dancing", 'On Arrival', 'Everything Comes and Goes', 'Hits 1979–1989', "Hittin' the Road", 'A Joyful Noise', "When Lightn' Strikes", "Remember You're A Womble", 'Kerosene', 'Knock On The Sky', 'Late Night Grande Hotel', 'Portrait', "Fadin' Renegade", 'A Truly Western Experience', 'Deep Thoughts from a Shallow Mind', 'Just One Time', 'On the Run', 'Bad Day for Trains', 'Relentless', 'Unbelievable', "Ridin' Rainbows", "Ain't Necessarily So", 'This Is Country Music', 'Troubadour', "Here's Patsy Cline", 'Ty England', 'Love Is Everything', 'Live at Texas Stadium', 'Looking Ahead', "Dwight's Used Records", 'One Time, One Night', 'Sing: Chapter 1', 'Remembering Patsy Cline', 'Passing Through', 'Try a Little Kindness', 'A Public Affair', 'Kellie Pickler', 'The Road Less Traveled', 'Above and Beyond the Doll of Cutey', 'Not a Moment Too Soon', 'A December to Remember', 'Dallas', 'Western Wall: The Tucson Sessions', 'Ihmisten edessä', 'Country Heart', 'How Lucky I Am', "Redneck Fiddlin' Man", 'The Truth About Men', 'Straight from the Heart', 'All Wrapped Up in Christmas', 'The Quiet Times Of A Rock And Roll Farm Boy', 'Singer, Songwriter & Legendary Performer', 'Still', 'The First Christmas', 'Greatest Hits… and Then Some', 'Why Lady Why', 'Beautiful Eyes', 'Honkytonkville', "Now That's What I Call Country Volume 4", 'Country Sunshine', "Robin's Reign", 'The Dark', 'The Heart Never Lies', 'Woman to Woman', 'White Lightning and Other Favorites', "It's Just That Way", 'Back to Tennessee', 'It Works for Me', 'All Aboard the Blue Train', 'Wildest Dreams', "He Thinks He's Ray Stevens", 'Revolutions of Time...The Journey 1975/1993', "I've Got a Tiger by the Tail", 'Brand New Girlfriend', 'Domestic Blues', 'Cold as the Clay', "Sittin' on Top of the World", 'Johnny Cash and His Woman / Give My Love to Rose', "Now That's What I Call Country", "Lookin' at You", "It's Only Rock & Roll", 'Southside', 'Honkytonks and Heartaches', 'Highway 101', 'Love Letter', 'The Gospel Road', 'Buck Owens Sings Harlan Howard', 'Cucumber Castle', 'Brand New Me', '20th Century Masters: The Millennium Collection: The Best of Terri Clark', 'Right About Now', 'Where Is My Castle', 'Love Me Like You Used To', "The Way I'm Made", 'My Town', 'Amanda Wilkinson', 'Beautiful Circle', "I'll Share My World with You", 'The Best of Lari White', 'His All-Time Greatest Comic Hits', 'Live from the Living Room', 'Rub It In', 'Oyster Tracks', 'Everyone Aboard', 'The Best Kept Secret', 'Rissi Palmer', 'Gentle on My Mind', 'Magic and Medicine', 'Little Fauss and Big Halsy', "Now That's What I Call Country Volume 5", "London '66–'67", 'Bubbling Over', 'Live with the Possum', 'Partners', 'Worry the Bone', 'Sure Love', 'Common Thread', 'Best of Buck Owens, Vol. 2', 'Tattoos & Scars', 'Telling Me Lies', 'Whisky Row', 'Blue Sky - Night Thunder', 'All My Tomorrows', 'Chet Atkins Goes to the Movies', 'After the Dust Settles', 'Me', "She's Got You", 'Colorado Cowboy', 'Sings the Songs of Dallas Frazier', 'Me Oh My, How the Time Does Fly: A John Hartford Anthology', 'Back Home Again', 'Welcome to Howdywood', 'The Smithsonian Collection of Classic Country Music', 'Led Zeppelin Boxed Set', 'Please Remember Me', 'Cimarron Manifesto', 'Midnight Angel', 'Chad Brownlee', 'Sunday Afternoon', 'Looking for the Light', "George's Bar", 'Family Bible', 'Chet', 'Real Good Man', "I'm Just a Girl", "A Working Man Can't Get Nowhere Today", "Hey, Y'all", 'The American Farewell Tour', 'River of Time', 'Gone Crazy', 'Hard Country', 'The Nitty Gritty Dirt Band', 'Christmas Duets', 'By the Time I Get to Phoenix', 'The Love Album & Housing Project', "She'd Give Anything", 'Electric', 'American Saturday Night', 'Blue Kentucky Girl', "The Woman I've Become", "I'm Still Here", 'The Complete MCA Studio Recordings', 'Connie in the Country', 'The Metropolitan Hotel', 'Lyle Lovett and His Large Band', 'Every Time Two Fools Collide – The Best of Kenny Rogers and Dottie West', 'Getaway Car', "You Can't Resist", 'Best of Guy Clark', 'When the Stars Go Blue', 'Look at Them Beans', 'Fare Thee Well Love', 'Sacred Ground', 'When the Roses Bloom Again', 'No Doubt About It', 'I Still Believe in You', 'The Midnight Oil', 'Hindsight 21/20: Anthology 1975–1995', 'Dream You', 'Mama Tried / Pride in What I Am', 'Same Train, A Different Time: A Tribute to Jimmie Rodgers', 'Right or Wrong', 'Major Moves', 'Tumbleweed Connection', 'Step by Step', 'In a Different Light', 'The Collection: Live', 'Famous Country Duets', 'Woman of the World / To Make a Man', "It's About Time", 'Terri Clark', 'Barefoot Blue Jean Night', 'Finger Style Guitar', 'Greatest Hits, Volume II', 'Plant Early', 'Johnny Cash Is Coming to Town', 'We Should Be Together', 'Fist City', 'Country Hits Old and New', 'Sharp Dressed Men: A Tribute to ZZ Top', 'Chrome', 'Happy Man', 'Appalachian Blues', '1996', "Sowin' Love", '20th Century Masters - The Millennium Collection: The Best of Sammy Kershaw', 'River Road', 'Come Away With Me', "Cockadoodledon't", 'Wild Together', 'Back to Basics: The Essential Collection 1971-1992', 'One of These Days', 'Live at Irving Plaza 4.18.06', 'Carnival Ride', 'Kikki', "I'm Your Man", 'Easy', 'Ballads of the Hills and Plains', 'Me and You', 'I tomteverkstan', 'Swans Against the Sun', 'Butterfly Kisses', "You've Got a Good Love Comin'", 'Jerusalem', 'This Is Barbara Mandrell', '22 More Hits', 'The Waitress', 'Angel of the Morning', 'Going Where the Lonely Go', 'Souvenir: 1989—1998', 'We Had All the Good Things Going', 'Heartsongs: Live From Home', 'Out of Hand', 'Banjo & Sullivan: The Ultimate Collection', 'The World of Glen Campbell Live', 'The Road That Led Me to You', 'Indianola Mississippi Seeds', 'SpyBoy', 'Twice the Speed of Life', 'Breakaway', 'Asking for Flowers', 'Keeping in Touch', 'Mustang Heart', 'Heartaches', 'Passage', 'The Things That Matter', 'Salivation', 'Swinging Doors', 'Unstoppable', 'Angelfire (tour edition)', 'Letters From Home', 'Greatest Hits, Volume 2', 'Picnic', "I'm a Lonesome Fugitive / Mama Tried", 'The Kenny Rogers Singles Album', 'Reba', "Still Thinkin' 'bout You", 'Sweet Talk & Good Lies', 'The Woman in Me', "Waitin' on Sundown", 'Politics, Religion and Her', 'Three Chord Country and American Rock & Roll', 'A Diamond Rio Christmas: The Star Still Shines', 'Chain Lightning', 'The Deana Carter Collection', 'Ladies Love Outlaws', 'Mr. Christmas', 'Country Is My Rock', "Just Because I'm A Woman: Songs of Dolly Parton", 'As Long as I Love', "Waitin' on Joe", 'Diamond in the Rough', 'Unchained', 'Phantom Limb', 'Halos & Horns', "It's What I Do", 'Poncho & Lefty', 'This Child', 'Hits and Highways Ahead', 'Tailgates & Tanlines', 'The Best of Bob Dylan, Vol. 2', 'The Way It Goes', 'Super Hits Vol. 2', 'Shut Up And Die Like An Aviator', 'Get Out While You Can', 'George & Tammy & Tina', 'Boom Chicka Boom', 'Desperado', 'Super Hits', 'Hymns by Johnny Cash', 'Remembering Patsy Cline & Jim Reeves', 'Love Song', 'Christmas at the Grand', 'The Best of Chet Atkins & Friends', 'Freedom', 'Spotlight on Willie Nelson', "Crystal Gayle's Greatest Hits", 'East Tennessee Christmas', 'Rose Colored Glasses', "Rockin' You Tonight", 'Will You Visit Me on Sunday?', 'Pieces of the Sky', 'I Am What I Am', 'Take It Like a Man', 'Willie Standard Time', 'Drugs or Jesus', 'Serenity', 'American Beauty', 'Fluxology', 'One Piece at a Time', 'Michelle Wright', "Burnin' the Roadhouse Down", 'Some Lessons Learned', 'Together Again', "Songs We Wish We'd Written", 'Joy for Christmas Day', 'Somewhere Inside', 'Personal File', 'Teen Scene', 'Untasted Honey', 'Lucky Ones', 'Lasse Stefanz på Svensktoppen', 'Guitars, Cadillacs Etc. Etc.', 'Somewhere Between', 'Twilight Town', 'Love Songs – A Collection', 'If I Could Make a Living', 'Now and Again', 'The Johnny Cash Show', "Now Here's Johnny Cash", 'Taking Back Sunday', 'Lonestar discography', 'A Paul Brandt Christmas: Shall I Play for You?', 'A Few Questions', 'Old Home Town', 'My Man', 'The Way I Am', 'Tell It Like It Is', 'Steel Magnolia', 'Ride the Times', 'The Essentials: Travis Tritt', 'Harbinger', 'To Get to You: Greatest Hits Collection', 'Grand Theft Auto: San Andreas Official Soundtrack', 'Let There Be Country', 'Say No More', 'I Lived to Tell It All', 'PickUp -56', 'The Cowboy in Me', "That's Life", 'Forget About It', "She's Got the Rhythm (And I Got the Blues)", 'Johnny Cash the King/Tammy Wynette the Queen', 'The Best of Connie Smith', 'What Goes Around Comes Around', 'Holler Back', 'Two Ways to Fall', '10 All Time Greatest Hits', "They Don't Make Them Like They Used To", 'Fire To Fire', 'Would You Take Another Chance on Me', 'Eye of a Hurricane', 'American VI', 'Love Heals', '2 Years On', 'Guy Clark', 'Covers the Hits', 'Terri Clark Live: Road Rage', 'I dag & i morgon', '40 Greatest Hits', 'Long Road Out of Eden', "Can't Run From Yourself", 'Hammer of the Honky Tonk Gods', 'The Best of Glen Campbell', 'What If?', 'Lovescape', "That's How They Do It in Dixie: The Essential Collection", 'High Wide & Handsome: The Charlie Poole Project', 'The Music of Richard Marx: 1987–2009', 'Class Guitar', 'Blue Nun', "Clancy's Tavern", 'Blue Heart', 'Darryl Worley', 'Back on Track', 'Billboard Top Country Hits: 1961', "Coal Miner's Daughter: A Tribute to Loretta Lynn", 'The Willies', '20th Century Masters: Christmas Collection', "Loretta Lynn's Greatest Hits", 'Mirador', 'Little Big Town', 'Fireflies', 'His and Hers', 'What About Me?', 'Hitstory', "I'll Always Love You", "Please Don't Tell Me How the Story Ends: The Publishing Demos 1968-72", 'Country Hit Time', 'Wish You Were Here', 'Beaucoups of Blues', 'You Light Up My Life: Inspirational Songs', 'Matt Butcher Me and My Friends', "The Spirit's In It", "My Kind of Livin'", 'Workbench Songs', 'On a Mission', 'Woman in the Moon', 'The Little Willies', 'Faded Love', 'Midnight Wind', 'Christmas with Ronnie Milsap', 'Sentimentally Yours', 'More Great Dirt', 'To Know Him Is to Love Him', 'Doug Stone', 'I Will Stand by You: The Essential Collection', 'American Ride', '40 #1 Hits', 'Connie Smith Sings Hank Williams Gospel', "Beatin' the Odds", 'One Voice', 'Get Off On The Pain', 'Sticks and Stones', 'Back Home', "Don't Come Home a Drinkin' (With Lovin' on Your Mind)", '50 Number Ones', 'Rabbit Fur Coat', 'A Rose by Any Other Name', 'The Gospel Collection', 'Hasten Down the Wind', 'The New World of Leonard Nimoy', 'Bluebird', 'A Thousand Memories', 'Together Always', "That's the Truth", 'Jasper County', 'Everything and More', 'Time After Time', 'Bing Bang Boom', 'Horse Legends', 'It Only Hurts When I Laugh', 'Modern Day Drifter', 'SPEED of LIFE', 'Ricky Van Shelton Sings Christmas', 'In Search of a Song', "Hits I Missed... And One I Didn't", 'Everywhere We Go', "Dreamin' My Dreams", 'No e det på det gamaste', "Don't Laugh Now", 'Glen Campbell in Concert', 'Completely', 'George Jones with Love', 'Buckaroo Blue Grass', 'Alabama Christmas', 'Like Red on a Rose', 'World Wide Open', 'Car Wheels on a Gravel Road', 'My Own Peculiar Way', 'Mission Temple Fireworks Stand', 'Cledus T. Judd', 'Faith', 'Look It Up', 'Dottie West Sings', 'Halfway to Hazard', 'No Regrets', '3 of Hearts', 'Tattoo', 'We Had It All', 'Honky Tonk Angels', 'Ambush Classics', 'Love and Honor', 'Black Cadillac', "Live and Kickin'", 'Mud on the Tires', 'Familiar Stranger', 'Live Like You Were Dying', 'Down Home', 'The First Time', 'Ten Years of Gold', 'Edge of Day', 'Return of the Grievous Angel: A Tribute to Gram Parsons', 'Dwightyoakamacoustic.net', 'King of the Hill', 'Top of the World Tour: Live', "There's No Gettin' Over Me", 'Shake What God Gave Ya', 'Erika Jo', 'From Nashville to You', 'In the Vicinity of the Heart', 'How I Loved You', 'Live in Concert', 'Busy Bee Cafe', 'Treat Him Right', "Flyin' Shoes", 'Live on the Inside', 'Stars & Stripes', 'Live by Request', 'Ernie Sings & Glen Picks', 'Heart & Soul', 'Neck and Neck', 'Hillbilly Rock', 'Come on Christmas', 'Bluegrass & White Snow: A Mountain Christmas', 'Holly Dunn', 'The Best of Chet on the Road — Live', 'Joy To The World: A Bluegrass Christmas', 'Buffalo Zone', 'The Last Gunfighter Ballad', 'Steers and Stripes', 'Cut to Impress', 'Tall Dark Stranger', 'The Essential Vince Gill', "Big & Rich's Super Galactic Fan Pak", 'If There Was a Way', 'Trail in Life', 'Pedal Steal', 'Lucky Old Sun', 'East/West', 'Some Things Never Change', 'Raising Sand', 'Flying Colors', 'Stereopathetic Soulmanure', 'The Dreamer', "You're for Me", 'Chet Atkins Picks on The Beatles', "Steppin' Stone", 'Concrete', 'Tiny Dancer', 'Rainbow Man', 'Back to the Country', 'Heaven Help the Child', 'October Road', 'Twister Alley', 'An American Trilogy', "It's the World Gone Crazy", 'All That', "Bartender's Blues", 'The Best of SHeDAISY', 'Call of the Wild', 'Girls Like Me', 'The Patsy Cline Story', "World's Greatest Melodies", 'Live at the Nashville Palace', 'Walk the Way the Wind Blows', 'Marty Stuart', "I Don't Care", 'High Lonesome', 'The Best of Connie Smith, Vol. 2', 'Rusty Tracks', 'Dean Miller', "Loretta Lynn's Greatest Hits Vol. II", 'International Superstar', 'iTunes Live from London', 'Storm in the Heartland', 'Around the Bend', 'I Have Returned', 'Guero', "Who's Cheatin' Who", 'Cry Softly Lonely One', '20th Century Masters: The Millennium Collection: The Best of Patty Loveless', 'Times Like These', 'Feel Like a Rock Star', 'Elvis Presley', 'Four Wheel Cowboy', 'One of Those Nights (Radio Edit)', 'American Dreams', 'The Lights of Home', 'Revelation', 'Kidz Bop Country', 'The Boys Are Back', 'AmerIIcana', 'Homemade Biscuits', 'Out with a Bang', 'Tracks', 'Country Love Ballads', "Let's Build A World Together", 'You Gotta Love That', 'Ten Feet Tall and Bulletproof', 'Lyle Lovett and His Large Band Live in Texas', 'III', 'Doyle Holly', 'No More Mr. Nice Guy', 'Can You Hear Me Now', 'Stormy', "Heaven's Just a Sin Away", 'Stranger Things Have Happened', 'Keith Urban', "It's Not Love (But It's Not Bad)", 'Out of Left Field', 'Live At the Opry', 'Hate Lives in a Small Town', 'Flowergirls & Cowgirls', 'Missing Years', 'Life Is Good', 'Julianne Hough', 'Norwood', 'Cheap Seats', "Any Old Arms Won't Do", 'Feel That Fire', 'Baillie & the Boys', 'Sweet', 'Lady & Gentlemen', 'This Is Jean Shepard', 'Making Love from Memory', 'The Mysterious Rhinestone Cowboy', 'Scarecrow', 'A Dozen Roses – Greatest Hits', 'Bryan White', 'Playlist: The Very Best of Brooks & Dunn', 'Take a Back Road', 'Forget About the World', 'Sounds of the Season: The Taylor Swift Holiday Collection', 'Blue Suede Shoes: A Rockabilly Session', 'The Most Popular Guitar', 'Revelations', 'Heartland Cowboy: Cowboy Songs, Vol. 5', 'Fatty Gets a Stylist', 'Learn to Live', 'Kentucky Bluebird', 'Songs of Rodeo and Country', 'Looks Like Rain', 'Ring of Fire: The Best of Johnny Cash', 'Leave a Mark', 'A King & Two Queens', 'Rhinestone Cowboy (New Studio Recordings)', 'Branded Man', 'The Legendary Patsy Cline', 'Lady Antebellum', 'Easter Island', 'Pictures', 'Ett hus med många rum', 'Americana Master Series: Best of the Sugar Hill Years', 'Maybe Not Tonight', 'Gone Country', 'The Essential David Allan Coe', 'Me and Tennessee', 'What the World Needs Now Is Love', "I'm Diggin' It", 'Georgia Clay', 'Laughing and Crying, Living and Dying', 'Sing Great Country Favorites', 'Chester & Lester / Guitar Monsters', '(Red) Christmas', 'Home to You', 'Shot Full of Love', 'Gonna Have a Party... Live', 'Fire in the Dark', 'Heartaches by the Number', 'Roy Clark & Joe Pass Play Hank Williams', "I'll Be Seeing You", 'A White Sport Coat and a Pink Crustacean', 'Cowboy Songs', 'Dawn of a New Day', 'When Love Finds You', 'Billboard Top Country Hits: 1965', 'Cars', 'Beside Myself', 'Country Winners', 'Reflected: Greatest Hits Vol. 2', 'The Long Way', 'Jeff Bates', 'My Next Thirty Years', "The Fightin' Side of Me", 'Greatest Hits (& Some That Will Be)', 'Sweet Right Here', 'Mark Chesnutt', 'The Country Hall of Fame – Patsy Cline', 'Wild Country', 'Outlaw', 'Stars & Stripes Forever', 'Tina Turns the Country On!', 'Room to Grow', "Somebody's Gonna Love You", "Losin' Lately Gambler", 'Southern Nights/Basic', 'Radio Songs', 'Galloping Guitar: The Early Years', 'Right Here and Now', 'Greatest Hits Collection, Volume I', 'Live in Texas', 'The Ultimate Hits', 'Will the Circle Be Unbroken', 'Phil Stacey', 'Song Dog', 'Will the Wolf Survive', 'More of That Guitar Country', 'The Austin Sessions', 'The Stand-In', "There's No Way", 'Complicated', 'Billboard Top Country Hits: 1968', 'All I Need to Know', 'The Drought', 'Live at the Old Quarter, Houston, Texas', 'Alive', 'Country and West', '10 Song Demo', 'How You Live: Deluxe Edition', 'Keys to the Highway', "Hank Williams, Jr.'s Greatest Hits, Vol. 2", 'You and You Alone', 'Swing Shift', "Fate's Right Hand", 'Carnival of Excess: Limited Edition', 'Last Sessions: Their Complete Victor Recordings (1934–1941)', 'The Great Divide', 'Kinda Country', 'Always Never the Same', 'Gone Girl', "Just Because I'm a Woman: Songs of Dolly Parton", 'Roses for Mama', 'Cold Coffee Morning', "Fast Movin' Train", 'Angel Eyes', "Eat at Whitey's", 'Totally Hot', 'Old Ways', 'Voices in the Wind', 'Twenty Years of Dirt', 'But What Will the Neighbors Think', 'The Band Perry', 'Rick Trevino', 'Living Out Loud', "One Man's Crazy", 'One Day At A Time', 'Wildflower', 'Hope Floats: Music from the Motion Picture', 'Fading Fast', 'Golden', 'Past the Point of Rescue', 'At This Moment', 'The Mystery of Life', 'American IV: The Man Comes Around', 'Laredo', 'I See It Now', 'His Very Best', "I'm Alright", 'Outlaws', 'The Strong One', 'Light Years', 'Touched by an Angel: The Album', 'In a Gospel Way', "Killin' Time", 'Man from Another Time', 'Big Iron World', 'All in the Name of Love', 'Transamerica', "If It's All the Same to You", 'Meet Glen Campbell', 'The Captain', 'Be Your Own Best Friend', 'Anyone Can See', 'Red River Blue', 'I Stoled This Record', 'Walking the Wire', 'Born to Roll', 'Double Live', "Sailin'", 'Greatest Hits Vol. II', 'Down the Road', 'Here in the Real World', "Songs You Know by Heart: Jimmy Buffett's Greatest Hit(s)", 'Just As I Am', 'Hobo', 'Wild, Free and Reckless', 'Masterpieces', 'Somewhere Down in Texas', 'Greatest Hits, Vol. 2', 'And Then I Wrote', 'Ray Stevens discography', 'Untold Stories', 'Gene Pitney Anthology 1961-1968', 'Sing the Big Hits', 'The Rose', "C'est C Bon", 'Under This Old Hat', "Startin' Fires", 'Swimming in Champagne', 'Moment of Forever', 'This Old Road', 'The Reason', 'Greatest Hits Volume One', 'Right Now', "Now That's What I Call Country Volume 2", "Next Thing Smokin'", 'Serving 190 Proof', "Let's Make Love", 'Easy to Love', 'Part II', "What I'm For", 'Once More', 'Be Here', 'Sunset Man', 'Say Something Nice to Sarah', "The Train I'm On", 'Sings His Best for Capitol Records', 'New Day Dawning', 'Twice Upon a Time', 'Jypsi', 'Teensville', 'Lost in the Fifties Tonight', 'Blue Frontier', 'Unconditional', 'Welcome to the Woods', 'Just One Love', 'Days Go By', 'The Survivors', 'Runaway Train', 'No Bees, No Honey', 'Symphonion Dream', 'To Win or to Lose', 'www.memory', 'Long Live King George', 'The Battle', 'Randy Rogers Band', 'Christmas Is for You', "A Nod to Bob: An Artists' Tribute to Bob Dylan on His Sixtieth Birthday", 'Everything Is Fine', 'A Travis Tritt Christmas: Loving Time of the Year', '20 Hits Special Collection, Vol. 1', 'Speak Now - World Tour Live', 'Mt. Desolation', "Now That's What I Call a Country Christmas", 'Love & Negotiation', "Kickin' Out the Footlights...Again", 'R.I.D.E.', 'Dressed in Black: A Tribute to Johnny Cash', 'Defying Gravity', "I've Cried the Blue Right Out of My Eyes", "Just a Little Lovin'", 'Days in Avalon', 'Little Love Letters', 'aka Wham Bam Sam', 'Jeff Bridges', 'Up on the Ridge', 'The Sheik of Scrubby Creek', 'Cowboy Classics', 'High Lonesome Sound', 'Jewels', 'A Memory Like You', 'Sweet Baby James', 'Live at the Ryman', 'Invictus (Means) Unconquered', 'Too Tough To Tame', "Houston (I'm Comin' to See You)", 'The Very Best of Dwight Yoakam', 'Different Things', 'Nacogdoches', "It's All About to Change", 'The Time Has Come', 'Just Like Old Times', 'Strong Heart', 'Other Voices - Other Rooms', 'Spirit', 'encores', 'Reunited', 'Old Crow Medicine Show', 'Spend My Time', 'Shake Hands with the Devil', 'Take This Job and Shove It', 'The Graceful Ghost', "Glen Campbell's Twenty Golden Greats", 'Changes in Latitudes, Changes in Attitudes', "Connie's Country", 'Where the Green Grass Grows', 'Real Man', 'In Swings the Tide', "Country 'Til I Die", 'Cowboy Savant', "I'll Paint You a Song", 'A Street Man Named Desire', 'Glen Travis Campbell', 'Come On Over', 'C. W. McCall & Co.', 'Always, Always', 'When and Where', 'If You See Him', 'Montana Cafe', 'Shoplifting 4 Jesus', 'The Life of the Party', 'Blackie and the Rodeo King', 'Discography', 'Just Like a Woman', 'Ghost Train: The Studio B Sessions', 'Fresh Horses', "Dolly Parton's Greatest Hits", 'Golden Feelings', "Johnny's Blues: A Tribute to Johnny Cash", 'Snowbird', 'Roll Out the Red Carpet', 'Years Ago', 'Do You Remember', 'Vivid', 'Hum & Strum Along with Chet Atkins', 'Little Man', "C'mon!", 'An American Dream', "Don't Close Your Eyes", 'Chris Young', 'Nobody Wants to Be Alone', 'The Lure of the Grand Canyon', 'Adam Gregory', 'Decade of Drive', 'Davis Daniel', "It's All Relative (Tillis Sings Tillis)", 'First Time For Everything', 'Music Row II', 'Roy Buchanan', 'Across the Borderline', 'Suffer Time', 'John Deere Green', 'When You Get a Little Lonely', 'Electric Rodeo', "Love Don't Run", 'Johnny 99', "Where Grass Won't Grow", 'If We Make It Through December', 'Horizon', 'Here for a Good Time', "Live -n- Kickin'", 'Me and the Boys', 'Footloose', 'Understand Your Man', 'A Session with Chet Atkins', 'Wishes', 'The Very Best of Glen Campbell', 'Open Season', 'Heroes & Friends', 'Lumdeloo/Through the Years live', 'Lend Me Your Ears', 'Thank Heavens for Dale Evans', 'We Must Believe in Magic', 'Share Your Love', 'The Best of Marie Osmond', 'Alone', 'Back to the Barrooms', 'My Pick of the Hits', 'First Nashville Guitar Quartet', 'Turn the Tide', 'Tuesday Night Music Club', 'My Heroes Have Always Been Cowboys', "My Home's in Alabama", 'For the Good Times', 'What I Do', 'Greatest Hits - Live', 'Diamond Rio', 'What I Deserve', 'Cole Deggs & the Lonesome', "Grand Ole Opry's New Star", 'Dean Brody', 'Hillbilly Deluxe', "I'll Try", 'Out of my Head and Back in my Bed', 'Fade to Black: Memories of Johnny', 'A Woman Needs', 'Give Me Some Wheels', "What's in Our Hearts", 'The Rovers', 'Johnny Cash Sings Precious Memories', "Nothin' to Die For", 'Trail of Tears', 'Somewhere in the Vicinity of the Heart', 'Wynonna', 'Underneath the Same Moon', 'Fresh Cut Christmas', 'Clear as Day', 'A Hard Act to Follow', "My Baby Don't Tolerate", 'The Gift', 'Wide Open Spaces', 'Lovers, Friends and Strangers', 'Glory Train: Songs of Faith, Worship, and Praise', 'Daytime Friends', 'The Roots of My Raising', 'I Believe in Music', 'Across The Rio Grande', 'The Glen Campbell Collection', 'Teatro', 'Rubber Duck', "Don't Stop Believin'", 'The New Nashville Cats', 'Play It Loud', 'Somebody Loves You', 'Snapshot', 'Jewel of the South', '20th Century Masters – The Millennium Collection: The Best of George Strait', "Baby It's So Hard to Be Good", 'Natural Forces', 'Bang Bang', "Cowboy's Back in Town", 'Pinmonkey', 'Damn Right, Rebel Proud', 'Greatest Hits 1990–1992', 'Ragged Old Flag', 'Love Revival', 'Faces', "Savin' the Honky Tonk", 'Stars and Stripes Vol. 1', 'Jessie James', 'Country After All These Years', 'Dreamlovers', 'Greatest Hits Volume 1', 'Willie Nelson & Friends – Stars & Guitars', 'The Hits Chapter 2', 'Turn Your Radio On', 'Rage On', 'Chet Atkins Plays Back Home Hymns', 'Hurry Sundown', 'Cheat the Night', 'Chattahoochee', 'Fiddle Fire: 25 Years of the CDB', 'I Started Out With Nothin and i Still Got Most of it Left', 'The Last One to Know', "Somebody's Someone", 'Gone', 'Blue', 'Semi Crazy', 'Double Trouble', "The Best of Farmer's Daughter", 'Home', 'Connie Smith', 'Count Me In', 'I Thought It Was You', 'The Baron', "I'm from the Country", "Leavin' Town", 'Some Girls', 'Song for the Life', 'Boats to Build', "Haley's Juke Box", 'AMBUSH: Live 4', 'Little Bitty', 'Reunion: The Songs of Jimmy Webb', 'The Silver Tongued Devil and I', 'All of This Love', "The Sky's the Limit", 'Nitty Gritty Ibbotson', 'Sweetheart of the Rodeo', 'Johnny and June', 'The Very Best of Randy Travis', '50 Years of Hits', 'The Greatest Hits Collection', 'Sweet Rosie Jones', "One's on the Way", 'Greatest Hits: Limited Edition', 'Trick Pony', "Ain't Ever Satisfied: The Steve Earle Collection", 'The Best of Chris Cagle', 'Work It out with Chet Atkins C.G.P.', 'Presents His 30th Album', 'Willie Nelson Live', 'Live and Obscure', 'Nothing Like This', 'In Overdrive', 'Hopechest', 'Fokestar', "Won't Be Blue Anymore", 'If We Put Our Heads Together', 'Up from Down Under', "Hard Workin' Man", 'Love Is What We Make It', 'Family', 'Buenas Noches From a Lonely Room', 'Patsy Cline', 'Love in a Small Town', 'Last Dollar (Fly Away)', 'Getting Dressed in the Dark', 'The Best of LeAnn Rimes', 'Heaven Help the Fool', 'Para Toda Vida', "Hemingway's Whiskey", 'The Garth Brooks Collection', 'Chet, Floyd & Boots', "Kickin' It Up", 'Music Through Heartsongs: Songs Based on the Poems of Mattie J.T. Stepanek', "If You're Reading This", 'Great Balls of Fire', 'Shadows and Light', 'Honey', 'Fall', 'The Essential Johnny Cash', 'Rancho Deluxe', 'I Got Your Country Right Here', 'Caribbean Guitar', 'Cowboys and Cadillacs', '20th Century Masters - The Millennium Collection: The Best of Chely Wright', 'Sarah Buxton', 'Candle in the Window', 'Blown Away', 'Stand by Me', 'Will the Circle Be Unbroken, Volume III', 'Like We Never Loved at All', 'Close to the Edge', 'The Right Combination: Burning the Midnight Oil', "The Talkin' Song Repair Blues", 'Room to Breathe', 'Okie From Muskogee: Recorded Live in Muskogee, Oklahoma', 'Lead Me On', 'Secret Love', 'The Great Escape', 'The Great Pretender', 'Midnight in Montgomery', 'Crazy Ex-Girlfriend', 'Almost Blue', 'Home Before Dark', 'The Ones We Never Knew', 'When You Can Fly', 'Little Bit of Life', 'Big Sky', 'A Western Harvest Field by Moonlight', 'Greatest Hits 1995–2005', "Walkin' in the Sun", 'Fame', 'Little Texas', 'Big Dog Daddy', 'Beyond The Dancing', 'Billboard Top Country Hits: 1963', 'Trio II', 'Essential Willie Nelson', 'Friends in High Places', 'Never Been Rocked Enough', 'Blue Eyes Crying in the Rain', 'When You Lie Next to Me', 'AgriDustrial', "Let's Keep It That Way", "Rock'n Yodel", 'In Country', 'Nashville Rebel', 'Rise and Shine', 'Walking the Floor Over You', 'Complete', "My Baby's Gone: The Essential Louvin Brothers 1955-1964", 'Small Towns & Big Dreams', '20 Years of Stony Plain', 'Sunshine', 'All Over the Road', 'Just The Same', 'George Jones Sings Bob Wills', 'Just Call Me Lonesome', 'We Found Heaven Right Here on Earth at ""4033""', "Dreamin' Out Loud", 'Transcendental Blues', 'Long Way to Go', 'Unchained Melody: The Early Years', 'Tony Joe', 'For Now', 'Close Enough to Perfect', 'Feeding Frenzy: Jimmy Buffett Live!', 'Land of Enchantment', 'Kenny', 'Lessons Learned', 'Where I Belong', "Live at Billy Bob's Texas", 'Street Dreams', 'Ingénue', "A Bridge I Didn't Burn", 'A Thousand Winding Roads', 'Greatest Country Hits', 'Down on the Farm', 'The Glen Campbell Goodtime Album', 'Golden Heart', 'På begäran 2', 'Love A Little Stronger', 'Borderline', 'Broken Freedom Song: Live in San Francisco', 'Read My Licks', '20 Great Years', 'Remember When', 'Family Album', 'Getting It Dunn', 'The Dirt Road', "Every Little Girl's Dream", 'Patient Man', 'Bittertown', "Highway Don't Care", 'You Will', 'The Complete Hank Williams', "Waylon's Greatest Hits, Vol. 2", "All the Songs I've Loved Before: 40 Unforgettable Songs", 'Someday', 'Let It Go', 'Surface Paradise', 'The Road Goes on Forever', 'Western Underground', 'The Legacy (1961-2002)', 'Presents His Hits in Concert', 'L.A. to Miami', 'Wrote a Song For Everyone', 'Wild Jimbos', 'They Call Me Cadillac', 'Always', "A Lot About Livin' (And a Little 'bout Love)", 'Greatest Hits Plus', "Playin' for Keeps", 'Lying to the Moon', 'A Decade of Hits', 'I ett fotoalbum', 'Rabbitt', 'Pure Country', 'Prime Prine: The Best of John Prine', 'Solo Flights', 'Alien Inboorling', 'Lee Ann Womack', "Anne Murray's Christmas Album", 'Roll On (Eighteen Wheeler)', 'Songs from My Heart', "Bob Dylan's Greatest Hits, Volume II", 'All-Time Greatest Hits', 'Greatest Hits Volume 2', 'Friday Night in Dixie', "Tryin' to Get There", 'Loaded: The Best of Blake Shelton', 'With All My Heart and Soul', '127 Rose Avenue', 'Honky Tonk Boots', "All the People Are Talkin'", 'My Clinch Mountain Home: Their Complete Victor Recordings, 1928-1929', 'På Österåker', 'Restless Heart', 'I Am Ready', 'Your Squaw Is on the Warpath', 'Golden Favorites', 'Some Things Are Meant to Be', 'Hard Times on Easy Street', 'Roy Orbison Sings Don Gibson', 'Pat Garrett & Billy the Kid', 'Over and Over', 'Nashville West', 'The Early Years', 'Willie Nelson', 'Hummingbird', 'For My Broken Heart', 'Here with Me', 'Glen Campbell Plays 12 String Guitar', 'At Madison Square Garden', 'Back to the Well', 'Welcome to My World', 'Then Came the Night', 'Sounds So Good', 'Are You Ready for the Big Show?', "There's a Little Bit of Hank in Me", 'Where I Come From', 'Electric: Extra Volts', 'High Notes', 'Chet Atkins in Three Dimensions', 'Big Love', 'Uncle Charlie & His Dog Teddy', 'Satin Sheets', 'Images', 'Totally Country Vol. 3', 'Measure of a Man', 'One Woman Man', 'Let Go', 'Texas in My Soul', 'That Gibson Boy', 'Free', '10 Years of Greatest Hits', 'Have a Good Time for Me', 'Good Day to Ride', 'Daryle Singletary', 'Dare to Be Different', 'The Art of Removing Wallpaper', 'Bring It On', 'Testimony', 'Mercury Falling', 'Wings', 'Hillbilly Bone', 'Room with a View', 'The Best Of Ken Mellons', '20th Century Masters - The Millennium Collection: Olivia Newton-John', 'See You There', "Nothin' But the Taillights", 'Last of the Good Guys', 'My Love', 'All I Intended to Be', 'Peachtree Road', 'Sings the Ballads of the True West', 'Me Time', 'Livin Right', 'Our Man in Nashville', "40 Hour Week (For a Livin')", 'Folk-Country', 'Rainbow', 'Soul', 'Bobby & The Midnites', 'Chris Cummings', 'George Jones Salutes Hank Williams', "Life's So Funny", 'Covers', 'Shoot for the Moon', 'Learning as You Go', 'The Early Years 1946–1957', 'Little Acts of Treason', 'Let There Be Peace on Earth', 'I Watched It on the Radio', 'Call Me Crazy', 'Willie and Family Live', 'Musical Shapes', 'Sailing to Philadelphia', 'Freight Train', 'Just to Satisfy You', 'High Valley', 'Picks the Best', 'Something To Be Proud Of: The Best of 1999-2005', 'The Almeria Club Recordings', 'Country Goes Raffi', 'Up All Night – Deric Ruttan Live', "Life's a Dance", 'The 12 String Guitar of Glen Campbell', 'Luck Of Our Own', 'No Fences', 'This Is It', 'Blue Skies Again', 'Gideon', 'Man in Black', 'John Denver’s Greatest Hits', "Key's in the Mailbox", 'Falling From Grace', 'Cold Dog Soup', 'Gold', 'Eleven', 'C.G.P. (Certified Guitar Player)', 'Monday Morning Church', 'Shaken Not Stirred', 'I Never Once Stopped Loving You', 'Will the Circle Be Unbroken (side 5)', 'Kikkis bästa', 'Burning the Day', 'Jessi', 'Lila', 'If You Want Me To', 'Planet Country', 'A Place in the Sun', 'Songs of the West', 'Why Wait', 'Quarter Moon in a Ten Cent Town', 'Twang', 'Easy Come Easy Go', 'Rodeo Songs ""Old & New""', 'Buffett Live: Tuesdays, Thursdays, Saturdays', 'Stardust', 'The Longhorn Jamboree Presents: Willie Nelson & His Friends', "Baby, Don't Get Hooked on Me", 'Too Much of a Good Thing', 'Billy Currington', 'Starlite Lounge', 'Three Days', 'The Road to Here', 'The Lower East Side of Life', 'Yours Always', 'The New Frontier', 'Old Hands', 'Punching Bag', "I'll Keep Calling", 'Porter Wayne and Dolly Rebecca', 'Inspirational Journey', 'Just to Hear You Say That You Love Me', 'The Limited Series', 'Galahs in the Gidgee', 'Only One Moon', 'Greatest Hits II', 'From Elvis Presley Boulevard, Memphis, Tennessee', 'With All My Might', 'Where I Stand', 'Modern Man', "Out Goin' Cattin'", 'Get Closer', 'Infamous Angel', 'The Signature Series, Volume 8: Where Do You Go When You Dream / The Hottest Night of the Year', 'All I Have to Do Is Dream', 'Ode to Billie Joe', 'Kick a Little', 'Riddles in the Sand', 'Sings Kristofferson', 'Patty Loveless', 'Especially for You', 'Mean Old Man', 'Third Rock from the Sun', "It's All in the Game", 'Lead On', 'On Your Way Home', 'Orrall & Wright', 'Do You Want Fries with That', 'Songbird: Rare Tracks & Forgotten Gems', 'A House with No Curtains', 'Make My Move', 'Helen Darling', 'where country grows', 'Heartbreak Town', "Danny's Song", 'Pioneer', 'Slide on Over Here', 'Beautiful Life', 'Wild Kentucky Skies', 'Population Me', 'Heart to Heart', 'The Other Chet Atkins', 'A Christmas Present', 'What a Crying Shame', 'Blake Shelton', 'Way Back Home: Live at New York City', 'Aim for the Heart', 'Gas and Time', 'Long Trip Alone', 'Moody Blue', "Olivia Newton-John's Greatest Hits", 'Frankie Ballard', 'The Ultimate Collection', 'The Reason Why', 'Moments & Memories: The Best of Reba', 'The Incredible Machine', 'Rules of Travel', "Now That's What I Call Country Volume 3", 'The Christmas Guest', 'You Win Again', "We're Gonna Hold On", 'Pam Tillis Collection', 'Anne Murray Duets: Friends & Legends', 'Tennessee Moon', 'The Essential Bob Dylan', 'Miss Donna Fargo', 'Solid Gold 69', 'Michael Peterson', 'The Love Songs', 'Beverley Mitchell', 'RVS III', 'Every Monday Morning', 'Dis-Satisfied', "Waitin' for the Sun to Shine", 'Walk the Line', 'I Remember Hank Williams', 'At My Window', 'Straight, Clean and Simple', 'When it All Goes South', 'The Essential Connie Smith', 'Dixieland Delight', 'All the Good Times', 'Live and Well', 'Paint The Town', 'Country & Western – Golden Hits', 'Life Is Calling My Name', 'God Bless America', 'Stones', 'San Antone', 'The Land of Many Churches', 'Put the O Back in Country', "Now That's What I Call the USA: The Patriotic Country Collection", 'Live At The Philharmonic (1972) {U.S. Pressing}', 'Good Times', 'The Best of Bob Dylan', 'Browns Sing the Big Ones from Country', 'Too Far Gone', 'Louisiana Hayride', 'Tanya', 'RCA Country Legends: Chet Atkins', 'Love Is the Foundation', 'Shane McAnally', 'John Wesley Harding', 'Last Date', 'Country Music', 'Love Is Fair', 'Greatest Hits, Vol. 1', 'Trying to Be Me', "I Don't Even Know Your Name", 'Tailgate', 'Carrying Your Love With Me', 'Hope on the Rocks', "Lovin' Every Minute", "I Don't Wanna Talk It Over Anymore", 'The Apostle', 'Jolene', 'Album Number Two', 'Black Velvet', 'Clock Without Hands', 'Closing in on the Fire', 'Cry', 'And So It Goes', 'Young Love', 'Mardi Gras', 'Buck Owens', 'Music', 'Homeward Looking Angel', 'Faith in You', 'All About Tonight', 'Horse of a Different Color', 'Amerasia', 'Curve', "Doin' My Thing", 'Right for the Time', 'Urban Cowboy', 'Songs for Everyone', 'The Troubled Troubador', 'Son of a Preacher Man', 'The Basement Tapes', 'Hearts in Mind', '20th Century Masters: The Millennium Collection: The Best of Reba McEntire', 'Heard It in a Love Song', 'Sara Smile', 'Songs from the Heart', "Tryin' Like the Devil", 'Pickup Man', 'More', 'Annie', 'Monongahela', "Don't Fence Me In", 'King of Nothing', 'Sing Country Western & Pop', "Ray Stevens' Greatest Hits", 'One on One', 'David Ball', 'Thing About You', 'American Classic', "Here's the Answer", 'Shania Twain', 'Annual Waltz', 'Six Hours at Pedernales (feat. Curtis Potter)', "There's More Where That Came From", 'A Perfect Match', 'Twelve Songs of Christmas', "Collector's Series", 'Christmas to Christmas', 'Yestergroovin', 'Me & Jerry', 'For the Kids', 'Chewing Pine', 'Live at Fenway Park', 'Garth Brooks', "Here's To the Good Times", "I'm One of You", 'Risk', '101²', 'Minstrel Man', 'Nearer My God to Thee', 'Crazy Days', 'This Time: The First Four Years', 'A Black and White Night Live', 'Hard Bargain', 'Hanna-McEuen', 'Five Dollar Bill', "Hello, I'm Dolly", 'A Treasure', 'Little Bit of Everything', 'Generous Peace', 'Gold Watch and Chain: Their Complete Victor Recordings, 1933-34', 'Pass it on Down', 'Greatest Hits: Songs from an Aging Sex Bomb', 'Rhinestone Cowboy', 'Third World Warrior', "Hangin' With Smooth", 'På begäran', 'Cabin Fever', 'Dolly: The Seeker/We Used To', 'I Saw the Light / Six More Miles (to the Graveyard)', 'Honky Tonk Sonatas', 'The Essential Chet Atkins', "Ain't We Havin' Us a Good Time", 'Live In Japan', 'My Love Affair With Trains', "It's a Guitar World", 'Strait Hits', 'Twenty Years and Change', 'Exit 0', "Let's Turn Back the Years", 'Felt Good on My Lips', 'The Original Dixie Hick', 'Rebecca Lynn Howard', 'Before You Go / No One but You', 'Christmas Vol. II', 'What Is This Country?', 'Stretch', 'Old Enough to Know Better', 'Live In London', 'Duets', 'Memories of Us', 'The Real McCall An American Storyteller', 'Tammy Cochran', 'Oklahoma Girl', 'Orange Blossom Special', 'Jones Country', 'Real Fine Place', 'Coming Home', 'Ernest Tubb', 'Sawyer Brown discography', 'Little Love Affairs', 'Now and Then', 'The Unissued Johnny Cash', 'The Chain', 'Kindred Spirits: A Tribute to the Songs of Johnny Cash', 'Countryfied', 'Juddmental', 'Honky Tonk Man', 'Crackin Up', 'Dreaming My Dreams', 'America: A 200-Year Salute in Story and Song', 'Anniversary: 10 Years of Hits', 'Cowboy Songs Four', "What I'm Cut Out to Be", "Your Good Girl's Gonna Go Bad", "D'lectrified", 'The Great Olivia Newton-John', 'By Request', 'The Essential Elvis Presley', 'No More Looking Over My Shoulder', 'Picks on the Hits', 'Evolution', "Freedom's Road", 'The Bee Gees Sing and Play 14 Barry Gibb Songs', 'The Hits', 'The Last Time I Saw Her', 'Never Say Die: Live', 'All Because of You', 'The Essential Glen Campbell Volume Two', 'Trisha Yearwood', 'A Hundred Miles or More: A Collection', 'Pure Country 2: The Gift', 'The Best of Buck Owens', 'Profile: The Best of Emmylou Harris', 'Collections', 'Starting Over', 'Silk Purse', 'Glide', "Every Night's a Saturday Night", 'Austins Bridge', 'Something in the Air', 'Please Read the Letter', 'Tough All Over', 'Beer, Bait & Ammo', 'True Grit', 'Billboard Top Country Hits: 1964', 'Jason McCoy', 'Best of Sawyer Brown', 'Taylor Ware', 'Big Dreams And High Hopes', 'Being Human', 'Tragic Songs of Life', 'Twenty-one Number One Hits: The Ultimate Collection', 'Stronger', 'Johnny Cash With His Hot and Blue Guitar', 'Straight to Hell', 'Livin It Up', 'We Were Alive!', 'Tennessee Woman', '8 Seconds', 'WWII', 'Playlist: The Very Best of Alan Jackson', "Smokin' Armadillos", 'The Very Best of Rosanne Cash', 'George Canyon', 'Suspicions', 'Jacksonville City Nights', 'The Best of Waylon', 'An Old Time Christmas', 'This Is Ray Stevens', "Bed of Rose's", 'Honey, Wheat and Laughter', 'Enjoy the Ride', 'The Best of Tracy Lawrence', 'Goodnight Sweetheart', 'I Fell in Love', 'Walking Among the Living', 'Bobbie Cryner', 'When the Wrong One Loves You Right', 'The Guitar Song', 'Jim Croce: A Nashville Tribute', 'My Little Girl', 'The Trouble With the Truth', 'Satan Is Real', 'Thunder & Roses', 'Billy ""Crash"" Craddock\'s Christmas Favorites', 'George Ducas', 'Between the Devil and Me', 'Early Years, Vol. 1', 'Blue Christmas', "I Don't Want to Miss a Thing", 'Ray Stevens Christmas: Through a Different Window', 'Chippy', 'Habits Old and New', 'Haunted Heart', 'The Prince of Egypt: Nashville', 'Heart Like a Hurricane', 'Live at Oak Tree', 'City of New Orleans', 'Naked Willie', 'The Best of Waylon Jennings', "Ain't It the Truth", 'Sings His Own', 'Do You Believe Me Now', 'Modern Sounds in Country and Western Music', 'Heartbeat', 'Columbus Stockade Blues', 'Those Were The Days', 'John Anderson 2', "Don't Rush", 'The South Coast of Texas', 'I Would Like to See You Again', "It's Just a Matter of Time", 'Ira and Charlie', 'Sweet Sundown', 'Here Comes My Baby', 'My Best Days', 'Ring of Fire', 'Selected Hits', "The Ramblin' Man", 'Phases and Stages', "No Holdin' Back", 'My Turn', '16 Biggest Hits, Volume II', 'A Portrait of Patsy Cline', "Olivia's Live Hits", 'Permanently', 'Home At Last', "I'll Be Alright", 'Alabama Live', 'Billy Gilman', 'What You Leave Behind', 'At the Ryman', 'One Sweet Hello', 'Dottie and Don', 'Dirt, Silver & Gold', 'Final Touches', 'Country Church Time', 'Wild As the Wind', 'Wynonna & Naomi', 'George Jones Sings White Lightning and Other Favorites', 'Ned Kelly', 'Music from Songwriter', 'Shane Minor', 'Juice Newton & Silver Spur', 'Dead Flowers EP', 'Every Little Word', 'Heroes', "It's Only Natural", 'Good Faith', 'Border Lord', 'Sweet Dreams', 'Judge Jerrod & The Hung Jury', 'Highway', 'Born for Trouble', "Last Chance for a Thousand Years: Dwight Yoakam's Greatest Hits from the 90's", 'Biggest Hits', 'Wanted! The Outlaws (1976-1996 20th Anniversary)', 'American Made', 'Introducing Johnny Reid', 'Terry McBride & the Ride', 'Breathe', 'Take The Weather With You', 'Heart Shaped World', '...Continued', 'Hearts in Armor', 'AT&T Team USA Soundtrack', 'Linda Ronstadt', 'Should I Do It', "The Best of Bob Dylan's Theme Time Radio Hour", 'Wings Upon Your Horns', 'Feel the Fire', 'The Very Best of Linda Ronstadt', 'Slow Dancing With the Moon', 'Julie Roberts', 'Hank Williams Jr. (20) Hits', 'Original Outlaw', "Susan Walker's Greatest Tits", 'Windows', 'Short Stories', 'Lasso from El Paso', 'A Thing Called Love', 'Biograph', 'Wishing for This', 'Walls Can Fall', 'Back to the Grindstone', 'Have a Little Faith', 'Summertown Road', 'Identified!', "Patsy Cline's Golden Hits", 'Last Mango in Paris', 'Horse Soldier! Horse Soldier!', 'Make A Little Magic', 'Mountains', 'Rosemary Clooney Sings Country Hits from the Heart', 'En enda gång', 'Stained Glass Window', "Ernest Tubb & Loretta Lynn Singin' Again", 'Here I Am Again', 'For the Record', 'Life Goes On', 'Blitzen Trapper', 'Chet Picks on the Grammys', 'Romance on the Range', 'A Farmhouse Christmas', 'Katrina Elam', "It's Country Time Again!", "Country's Best", "Everything's Alright"}
            Answers = 4333, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.156s]
          Answers = 4333, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.157s]
        Checking schema 15 / 96: {
          [('Main', '==', 'm.01lyv', ['radio.radio_subject.programs_with_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:radio.radio_subject.programs_with_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01lyv fb:radio.radio_subject.programs_with_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 1
            Final Answer: {'Grand Ole Opry'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 3
            Final Answer: {'Unitary state', 'Constitutional republic', 'Presidential system'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 17 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 2
            Final Answer: {'Turkish Language', 'Greek Language'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 18 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 6
            Final Answer: {'Larnaca District', 'Kyrenia District', 'Famagusta District', 'Paphos District', 'Nicosia District', 'Limassol District'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 19 / 96: {
          [('Main', '==', 'm.01ppq', ['travel.travel_destination.tourist_attractions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'Khirokitia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 20 / 96: {
          [('Main', '==', 'm.01ppq', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 21 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'Earth'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 22 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'Sovereign state'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 23 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 24 / 96: {
          [('Main', '==', 'm.01ppq', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'House of Representatives'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 25 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 99
            Final Answer: {'Akis Agiomamitis', 'Yiannis Xipolitas', 'Leonidas Pantelides', 'George Philippou Pierides', 'Giorgos Papadopoulos', 'Marie of Lusignan, Queen of Aragon', 'Angelos Tsiaklis', 'George Constantinides', 'Nouritza Matossian', 'Aggelos Tsiaklis', 'Savvas Houvartas', 'John Hirst', 'Marios Loizides', 'Stephanie Solomonides', 'Ezekias Papaioannou', 'Stylianos Kyriakides', 'C. L. Max Nikias', 'Panayiotis Ioannou', 'Tonia Buxton', 'John Modinos', 'Suat Günsel', 'Spiros Zodhiates', 'Kypros Chrysostomides', 'Charis Drakos', 'Turgay Hilmi', 'Alp Mehmet', 'Alexis Pittas', 'Dimitris Lipertis', 'Fahri Diner', 'Anastasios George Leventis', 'Costas Papacostas', 'Athanasios Orphanides', 'Mine Teber', 'Peter Lyssiotis', 'Andreas Neocleous', 'Ara Bedrossian', 'Ari Sitas', 'Antonis Aresti', 'Jeremy Goss', 'George Kallis', 'Kyriacos Demetriou', 'Jim Lefkos', 'Rami Jarrah', 'Ferdi Sabit Soyer', 'Evangelos Christou', 'Simon Fuller', 'Shoshana Riseman', 'Philip Christopher', 'Theo Theophanous', 'Elena Ierodiakonou', 'James Plaskett', 'Chrysostomos II of Cyprus', 'Antonis Panagi', 'Agni Scott', 'George Theophanous', 'Kostakis Artymatas', 'Reo Stakis', 'George Pastell', 'Savvas Savva', 'Helene Black', 'Michael Patsalos-Fox', 'Alex Konstantinou', 'Yiannis Evangelides', 'Constantinos C. Markides', 'Panos Ioannou', 'Peter Costa', 'John Michael', 'Martino Tirimo', 'Peter Humfrey', 'Jo Katsaras', 'Dora Anastasiou', 'Kikis Kazamias', 'Mary of Lusignan, Countess of Brienne', 'Danis Salman', 'Andreas Moleskis', 'Costas Georgiou', 'Panicos O. Demetriades', 'Kyriacos Triantaphyllides', 'Rob Ryan', 'Osman Türkay', 'Daphne Alexander', 'Andrew Kazamia', 'Symeon C. Symeonides', 'Costas N. Papanicolas', 'Leo V of Armenia', 'Christodoulos Neophytou', 'Androulla Vassiliou', 'Nikos Nicolaou', 'Saint Spyridon', 'Kyprianos', 'Giannos Kranidiotis', 'Marios Nicolaou', 'Sarah-Jane Redmond', 'Marcos Michael', 'Barnabas', 'Ruzen Atakan', 'Stass Paraskos', 'Konstantinos Pantelidis', 'Stephanos Constantinides'}
            Answers = 99, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 99, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 26 / 96: {
          [('Main', '==', 'm.01ppq', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'Cyprus national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 27 / 96: {
          [('Main', '==', 'm.01ppq', ['base.locations.countries.continent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'Asia'}
            Answers = 1, P = 1.000000, R = 0.200000, F1 = 0.333333
          } [0.011s]
          Answers = 1, P = 1.000000, R = 0.200000, F1 = 0.333333
        } [0.012s]
        Checking schema 28 / 96: {
          [('Main', '==', 'm.01ppq', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 2
            Final Answer: {'Leon Beer', 'Keo Beer'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 29 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'Euro'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 30 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 8
            Final Answer: {'Armenian Language', 'English Language', 'German Language', 'French Language', 'Greek Language', 'Turkish Language', 'Cypriot Maronite Arabic', 'Romani language'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 31 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'cy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 32 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.first_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 5
            Final Answer: {'Larnaca District', 'Famagusta District', 'Paphos District', 'Nicosia District', 'Limassol District'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 33 / 96: {
          [('Main', '==', 'm.01ppq', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 4
            Final Answer: {'Cyprus Cup', 'Cyprus Rally', 'Cyprus dispute', 'Cyprus Airways'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 34 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'District of Cyprus'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 35 / 96: {
          [('Main', '==', 'm.01ppq', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01ppq fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 WHERE { fb:m.01ppq fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'1960'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 36 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 181
            Final Answer: {'Kolossi', 'North Nicosia', 'Kiados', 'Limassol', 'Pissouri', 'Girne American University', 'Kantara Castle', 'Zygi', 'Paphos International Airport', 'Petrofani', 'Salamis', 'Moutoullas', 'Ayios Seryios, Cyprus', 'Eastern Mediterranean University', 'Yeroskipou', 'European University - Cyprus', 'KES College', 'Amathus', 'Latsia', 'Dherynia', 'Tymvou', 'Ayia Marina, Cyprus', 'Erimi', 'Paphos District', 'Aglandjia', 'Xylotymbou', 'Kathikas', 'Zodeia', 'Chandria', 'Cytaria', 'Lefkara', 'Pachna', 'Kakopetria', 'Trachoni', 'Ledra', 'Emba, Paphos', 'Nata, Paphos', 'Peristerona', 'Kapilio', 'Tseri', 'Soli, Cyprus', 'Limassol District', 'Kythrea', 'Lefkoniko', 'Lempa, Cyprus', 'Louvaras', 'Akaki, Cyprus', 'Pergamos, Cyprus', 'Akamas', 'Luricina', 'Lympia', 'Vasilikos', 'Vavla', 'Ayia Napa sea monster', 'Khirokitia', 'Limnidi', 'Cyprus University of Technology', 'Selimiye Mosque, Nicosia', 'Ercan International Airport', 'Arodhes', 'Dromolaxia', 'Paphos', 'Higher Technical Institute', 'Morphou', 'Achna', 'Troulloi', 'Askas', 'Trachonas', 'Peyia', 'Kormakitis', 'Frederick University, Nicosia', 'Ayios Dhometios', 'Church of Saint Lazarus, Larnaca', 'University of Nicosia', 'Mount Olympus', 'Larnaca District', 'Pyla', 'Galata', 'Ayia Napa', 'Larnaca', 'Famagusta District', 'Cape Gata', 'RAF Akrotiri', 'Platres', 'Kokkina exclave', 'Potamia', 'Limassol Salt Lake', 'Paralimni', 'The Cyprus Institute', 'Mesa Yitonia', 'Open University of Cyprus', 'Kyrenia Mountains', 'Near East University', 'Gerolakkos', 'Kato Drys', 'Elia, Nicosia', 'Tombs of the Kings', 'Kornokipos', 'Cape Greco', 'Frenaros', 'Palaiometocho', 'Neo Chorio', 'Engomi', 'Cyprus College', 'Frederick University-Limassol Campus', 'Northern Cyprus', 'Bellapais', 'Foini', 'Templos', 'Famagusta', 'Gönyeli', 'Rizokarpaso', 'Ayios Seryios', 'Frederick University, Limassol', 'Kourion', 'Karavas', 'Tala, Paphos', 'Cyprus Forestry College', 'Hala Sultan Tekke', '20 Temmuz Stadium', 'Strovolos', 'Avdimou', 'Lapithos', 'University of Cyprus', 'Nicosia', 'Louroujina Salient', 'Nicosia District', 'Avlona, Cyprus', 'Paramytha', 'Pyrgos, Cyprus', 'Liopetri', 'Kyrenia District', 'Polis', 'Prodromos', 'Kolossi Castle', 'Milia, Famagusta', 'Larnaca International Airport', 'Nikitari', 'Evrychou', 'Kalo Chorio, Limassol', 'Anthoupolis', 'Miliou', 'Chatos', 'Omodos', 'Panagia, Paphos', 'Kouklia', 'Cyprus Museum', 'Ormideia', 'Yerolekko', 'Dali', 'RAF Troodos', 'Pera Orinis', 'Lefka', 'Kyrenia', 'Enkomi', 'Mazotos', 'Phiti', 'The Cyprus Institute of Marketing', 'Idalium', 'Ypsonas', 'Lakatamia', 'Trooditissa Monastery', 'Troodos Mountains', 'Nicosia International Airport', 'Athienou', 'Fig Tree Bay', 'Kissonerga', 'Cyprus International University', 'Tsada', 'Ayios Mamas', 'Ledra Street', 'Lysos', 'Yeri, Cyprus', 'Marion', 'Limnitis', 'Cyprus International Institute of Management, main campus', 'Larnaca Salt Lake', 'Astromeritis', 'RAF Nicosia', 'Mia Milia'}
            Answers = 180, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 180, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 37 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 16
            Final Answer: {'Ottoman wars in Europe', 'German campaign', 'Turkish invasion of Cyprus', 'Ionian Revolt', 'Kitos War', 'Operation Tarnegol', 'Wars of the Delian League', 'Greco-Persian Wars', 'Ottoman–Venetian War', 'Siege of Yoshida Castle', 'War of Chioggia', 'Bloody Christmas', 'Battle of Pentemili beachhead', 'Cypriot intercommunal violence', 'Battle of Agridi', 'Sixth Crusade'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 38 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 39 / 96: {
          [('Main', '==', 'm.01ppq', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 3
            Final Answer: {'2002 Winter Olympics', '1980 Winter Olympics', '2008 Summer Olympics'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 40 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'Nicosia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 41 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01ppq fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 WHERE { fb:m.01ppq fb:location.country.calling_code ?o1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'357'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 42 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.currency_formerly_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'Cypriot pound'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 43 / 96: {
          [('Main', '==', 'm.01ppq', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 6
            Final Answer: {'Cyprus Weekly', 'Simerini', 'Financial Mirror', 'Alithia', 'Phileleftheros', 'Cyprus Mail'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 44 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 6
            Final Answer: {'Larnaca District', 'Kyrenia District', 'Famagusta District', 'Paphos District', 'Nicosia District', 'Limassol District'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 45 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 46 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 2
            Final Answer: {'Municipality of Cyprus', 'District of Cyprus'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 47 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 4
            Final Answer: {'UTC+02:00', 'UTC+03:00', 'Eastern European Summer Time', 'Eastern European Time'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 48 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01ppq fb:location.location.area ?o1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 WHERE { fb:m.01ppq fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'9251'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 49 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 4
            Final Answer: {'Mediterranean Sea', 'Europe', 'Cyprus', 'Eurasia'}
            Answers = 4, P = 1.000000, R = 0.800000, F1 = 0.888889
          } [0.012s]
          Answers = 4, P = 1.000000, R = 0.800000, F1 = 0.888889
        } [0.012s]
        Checking schema 50 / 96: {
          [('Main', '==', 'm.01ppq', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 3
            Final Answer: {'Bitter Lemons', 'Hostage to History', 'Bitter Lemons of Cyprus'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 51 / 96: {
          [('Main', '==', 'm.01ppq', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 16
            Final Answer: {'Pancyprian Federation of Labour', 'New Horizons', 'Movement for Social Democracy', "Cyprus Workers' Confederation", 'United Democrats', 'Fighting Democratic Movement', 'Cyprus Volleyball Federation', 'European Party', 'Progressive Party of Working People', 'Ecological and Environmental Movement', 'Cyprus Union of Bank Employees', 'Democratic Party', "Pancyprian Public Servants' Trade Union", 'European Democracy', 'Democratic Labour Federation of Cyprus', 'Democratic Rally'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 52 / 96: {
          [('Main', '==', 'm.01ppq', ['sports.sport_country.multi_event_tournaments_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'2010 Commonwealth Games'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 53 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 54 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 55 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 56 / 96: {
          [('Main', '==', 'm.01ppq', ['travel.travel_destination.tourist_attractions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 57 / 96: {
          [('Main', '==', 'm.01ppq', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 58 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 59 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 60 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 61 / 96: {
          [('Main', '==', 'm.01ppq', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 62 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 99, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 63 / 96: {
          [('Main', '==', 'm.01ppq', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 64 / 96: {
          [('Main', '==', 'm.01ppq', ['base.locations.countries.continent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 1.000000, R = 0.200000, F1 = 0.333333
        } [0.000s]
        Checking schema 65 / 96: {
          [('Main', '==', 'm.01ppq', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 66 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 67 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 68 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 69 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.first_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 70 / 96: {
          [('Main', '==', 'm.01ppq', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 71 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 72 / 96: {
          [('Main', '==', 'm.01ppq', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01ppq fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 73 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 180, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 74 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 75 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 76 / 96: {
          [('Main', '==', 'm.01ppq', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 77 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 78 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01ppq fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 79 / 96: {
          [('Main', '==', 'm.01ppq', ['location.country.currency_formerly_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 80 / 96: {
          [('Main', '==', 'm.01ppq', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 81 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 82 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 83 / 96: {
          [('Main', '==', 'm.01ppq', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 84 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 85 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01ppq fb:location.location.area ?o1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 86 / 96: {
          [('Main', '==', 'm.01ppq', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 4, P = 1.000000, R = 0.800000, F1 = 0.888889
        } [0.000s]
        Checking schema 87 / 96: {
          [('Main', '==', 'm.01ppq', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 88 / 96: {
          [('Main', '==', 'm.01ppq', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 89 / 96: {
          [('Main', '==', 'm.01ppq', ['sports.sport_country.multi_event_tournaments_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 90 / 96: {
          [('Main', '==', 'm.01lff', ['base.ontologies.ontology_class.equivalent_classes', 'base.ontologies.ontology_class_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lff fb:base.ontologies.ontology_class.equivalent_classes ?o1 . ?o1 fb:base.ontologies.ontology_class_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lff fb:base.ontologies.ontology_class.equivalent_classes ?o1 . ?o1 fb:base.ontologies.ontology_class_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01lff'}
            Query return lines = 2
            Final Answer: {'GeoNames', 'OpenCalais'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 91 / 96: {
          [('Main', '==', 'm.01lff', ['base.ontologies.ontology_class.equivalent_classes', 'base.ontologies.ontology_class_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lff fb:base.ontologies.ontology_class.equivalent_classes ?o1 . ?o1 fb:base.ontologies.ontology_class_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lff fb:base.ontologies.ontology_class.equivalent_classes ?o1 . ?o1 fb:base.ontologies.ontology_class_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01lff'}
            Query return lines = 1
            Final Answer: {'Country'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 92 / 96: {
          [('Main', '==', 'm.01lff', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lff fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lff fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01lff'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 93 / 96: {
          [('Main', '==', 'm.01lff', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lff fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lff fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01lff'}
            Query return lines = 1
            Final Answer: {'Country'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 94 / 96: {
          [('Main', '==', 'm.01lyv', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lyv fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lyv fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 95 / 96: {
          [('Main', '==', 'm.01lyv', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lyv fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01lyv fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01lyv'}
            Query return lines = 1
            Final Answer: {'Country'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        88 / 96 coarse schemas kept with ans_size > 0.
      } [0.756s]
      Coarse level ended, resulting in 88 schemas.
    } [13.534s]
    Type level searching (total types = 10): {
      Current: 0 / 88
[{'media_common.quotation'}]
[{'fictional_universe.fictional_setting'}]
[{'education.academic'}]
[{'user.zsi_editorial.editorial.comment'}]
[{'music.artist'}]
[{'music.genre'}]
[{'book.periodical'}]
[{'broadcast.radio_station'}]
[{'film.film'}]
[{'award.award_category'}]
[{'broadcast.broadcast'}]
[{'book.written_work'}]
[{'broadcast.content'}]
[{'music.genre'}]
[{'music.album'}]
[{'radio.radio_program'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'travel.tourist_attraction'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'people.person'}]
[{'sports.sports_team'}]
[{'base.locations.continents'}]
[{'food.beer'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'location.administrative_division'}]
[{'symbols.namesake'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'olympics.olympic_games'}]
[{'location.citytown'}]
[{'type.int'}]
[{'finance.currency'}]
[{'book.newspaper'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'sports.multi_event_tournament'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'travel.tourist_attraction'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'people.person'}]
[{'sports.sports_team'}]
[{'base.locations.continents'}]
[{'food.beer'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'location.administrative_division'}]
[{'symbols.namesake'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'olympics.olympic_games'}]
[{'location.citytown'}]
[{'type.int'}]
[{'finance.currency'}]
[{'book.newspaper'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'sports.multi_event_tournament'}]
[{'base.ontologies.ontology_class_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_class_mapping'}, {'base.ontologies.ontology_class'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
      9 typed schemas retrieved from 88 coarse schemas.
      Calculating F1 for 9 typed schemas: {
        Current: 0 / 9
        Checking schema 0 / 9: {
          [('Main', '==', 'm.01ppq', ['location.country.form_of_government']), ('Type', '==', 'government.form_of_government', ['type.object.type'])]
          var_types: [{'government.form_of_government'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 3
            Final Answer: {'Unitary state', 'Constitutional republic', 'Presidential system'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 1 / 9: {
          [('Main', '==', 'm.01ppq', ['location.location.contains']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.location', 'location.country'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 1
            Final Answer: {'Northern Cyprus'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 2 / 9: {
          [('Main', '==', 'm.01ppq', ['location.location.contains']), ('Type', '==', 'sports.sport_country', ['type.object.type'])]
          var_types: [{'location.location', 'sports.sport_country'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:sports.sport_country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:sports.sport_country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 3 / 9: {
          [('Main', '==', 'm.01ppq', ['location.location.contains']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 4 / 9: {
          [('Main', '==', 'm.01ppq', ['location.location.contains']), ('Type', '==', 'food.beer_country_region', ['type.object.type'])]
          var_types: [{'location.location', 'food.beer_country_region'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:food.beer_country_region . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:food.beer_country_region . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 5 / 9: {
          [('Main', '==', 'm.01ppq', ['location.location.containedby']), ('Type', '==', 'location.country', ['type.object.type'])]
          var_types: [{'location.location', 'location.country'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 6 / 9: {
          [('Main', '==', 'm.01ppq', ['location.location.containedby']), ('Type', '==', 'sports.sport_country', ['type.object.type'])]
          var_types: [{'location.location', 'sports.sport_country'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:sports.sport_country . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:sports.sport_country . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 7 / 9: {
          [('Main', '==', 'm.01ppq', ['location.location.containedby']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 8 / 9: {
          [('Main', '==', 'm.01ppq', ['location.location.containedby']), ('Type', '==', 'food.beer_country_region', ['type.object.type'])]
          var_types: [{'location.location', 'food.beer_country_region'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:food.beer_country_region . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:22] Q_Schema Request: {
            WebQ_692|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ppq fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:food.beer_country_region . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ppq'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        2 / 9 typed schemas kept with ans_size > 0.
      } [0.097s]
      Typed level ended, resulting in 90 schemas.
    } [0.102s]
    Time level searching (total times = 0): {
      Current: 0 / 90
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'user.zsi_editorial.editorial.comment.reviewed'}]
self.var_time_preds: [{'music.artist.active_start', 'music.artist.active_end'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'broadcast.radio_station.founded'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [{'broadcast.content.production_start', 'broadcast.content.production_end'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'radio.radio_program.first_broadcast', 'radio.radio_program.final_broadcast'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
      0 timed schemas retrieved from 90 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 90 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 90
[{'media_common.quotation.date'}]
[set()]
[set()]
[{'user.zsi_editorial.editorial.comment.reviewed'}]
[{'music.artist.active_start', 'music.artist.active_end'}]
[set()]
[set()]
[{'broadcast.radio_station.founded'}]
[{'film.film.initial_release_date'}]
[{'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[{'broadcast.content.production_start', 'broadcast.content.production_end'}]
[set()]
[{'music.album.release_date'}]
[{'radio.radio_program.first_broadcast', 'radio.radio_program.final_broadcast'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'people.person.date_of_birth'}]
[{'sports.sports_team.founded'}]
[set()]
[{'food.beer.first_brewed'}]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'people.person.date_of_birth'}]
[{'sports.sports_team.founded'}]
[set()]
[{'food.beer.first_brewed'}]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[{'organization.organization.date_founded'}]
[set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set()]
[set()]
      0 ordinal schemas retrieved from 90 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 90 schemas.
    } [0.002s]
    [2020-12-03 14:16:22] buffer saved.
    90 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0692_schema].
  } [2m27.157s]
  Entering Q 693 / 5810 [b'who invented dell computer?']: {
    Show 1 E + 10 T + 0 Tm + 0 Ord = 11 linkings: {
      #00 Entity: [2, 4) (dell computer) == m.0py9b (Dell) {'score': 37831.913584, 'source': 0.0}
      #01 Type: [3, 4) (computer) == computer.computer (computer) {'sim': 1.0}
      #02 Type: [3, 4) (computer) == computer.computer_manufacturer_brand (computer manufacturerbrand) {'sim': 0.987678}
      #03 Type: [3, 4) (computer) == computer.computer_processor (computer processor) {'sim': 0.822763}
      #04 Type: [3, 4) (computer) == computer.computer_emulator (computer emulator) {'sim': 0.81183}
      #05 Type: [3, 4) (computer) == computer.computer_peripheral (computer peripheral) {'sim': 0.803252}
      #06 Type: [3, 4) (computer) == computer.computer_designer (computer designer) {'sim': 0.785016}
      #07 Type: [3, 4) (computer) == computer.computer_peripheral_class (computer peripheral class) {'sim': 0.763286}
      #08 Type: [1, 2) (invented) == law.inventor (inventor) {'sim': 0.698055}
      #09 Type: [3, 4) (computer) == computer.software (software) {'sim': 0.670715}
      #10 Type: [0, 1) (who) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.64018}
    } [0.000s]
    11 link data save to file.
    Coarse level searching (total entities = 1): {
      [Len-1||F1/1] (2020-12-03 14:18:35) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0py9b ?p1 ?o1 . }
        [2020-12-03 14:18:35] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0py9b ?p1 ?o1 . }
          Query return lines = 42
        } [0.007s]
        Filt_Query_Ret = 12 / 42 ( 0.007s)
      } [0.007s]
      [Len-2||F1/1] (2020-12-03 14:18:35) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0py9b ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:35] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0py9b ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 399
        } [0.669s]
        Filt_Query_Ret = 78 / 399 ( 0.671s)
      } [0.672s]
      90 coarse schemas retrieved from scratch.
      Calculating F1 for 90 coarse schemas: {
        Current: 0 / 90
        Checking schema 0 / 90: {
          [('Main', '==', 'm.0py9b', ['business.issuer.issue'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:business.issuer.issue ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:business.issuer.issue ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 2
            Final Answer: {'DELL INC Common Stock', 'DELL INC-T Common Stock'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 1 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.place_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:organization.organization.place_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:organization.organization.place_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Austin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 2 / 90: {
          [('Main', '==', 'm.0py9b', ['base.advertisingcharacters.product.advertising_characters'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:base.advertisingcharacters.product.advertising_characters ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:base.advertisingcharacters.product.advertising_characters ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Steven Jackson'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 3 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization_partnership.members'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:organization.organization_partnership.members ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:organization.organization_partnership.members ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Linux Foundation'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 4 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0py9b fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 WHERE { fb:m.0py9b fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'1984'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 5 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.founders'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Michael S. Dell'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.004s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.004s]
        Checking schema 6 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.geographic_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:organization.organization.geographic_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:organization.organization.geographic_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'World'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 7 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.industry'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:business.business_operation.industry ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 5
            Final Answer: {'Electronic Computer Manufacturing', 'Computer', 'Technology', 'Information technology', 'Software'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 8 / 90: {
          [('Main', '==', 'm.0py9b', ['computer.software_developer.software'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:computer.software_developer.software ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:computer.software_developer.software ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Crowbar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 9 / 90: {
          [('Main', '==', 'm.0py9b', ['conferences.conference_sponsor.conferences'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:conferences.conference_sponsor.conferences ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:conferences.conference_sponsor.conferences ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {"O'Reilly Open Source Convention"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 90: {
          [('Main', '==', 'm.0py9b', ['base.giftcards.gift_card_issuer.gift_cards'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:base.giftcards.gift_card_issuer.gift_cards ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:base.giftcards.gift_card_issuer.gift_cards ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell Gift Card'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 11 / 90: {
          [('Main', '==', 'm.0py9b', ['computer.computer_manufacturer_brand.computer_models'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:computer.computer_manufacturer_brand.computer_models ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0py9b fb:computer.computer_manufacturer_brand.computer_models ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 4
            Final Answer: {'Dell Vostro', 'Dell Latitude', 'Dell XPS', 'Dell Inspiron 560 Desktop Computer'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 12 / 90: {
          [('Main', '==', 'm.0py9b', ['business.employer.number_of_employees', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.employer.number_of_employees ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.employer.number_of_employees ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'87000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 13 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.revenue', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 4
            Final Answer: {'5.7095e+10', '5.742e+10', '2.5265e+10', '6.1101e+10'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 14 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.cash', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'8.352e+09'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 15 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.retained_earnings', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2.0677e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 16 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.net_profit', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 4
            Final Answer: {'2.478e+09', '1.666e+09', '2.614e+09', '2.9e+09'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 17 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.assets', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2.65e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 18 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.operating_income', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 2
            Final Answer: {'3.19e+09', '3.541e+09'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 19 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.liabilities', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2.2229e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 20 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.current_assets', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2.0151e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 21 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.current_liabilities', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'1.4859e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 22 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Round Rock'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 23 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.headquarters', 'location.mailing_address.street_address_2'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address_2 ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address_2 ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 24 / 90: {
          [('Main', '==', 'm.0py9b', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 18
            Final Answer: {'1998', '1996', '2000', '2007', '2001', '1999', '2004', '1984', '1995', '2008', '2005', '1997', '1987', '1992'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 25 / 90: {
          [('Main', '==', 'm.0py9b', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 42
            Final Answer: {'Vice President and General manager, Dell Hosting Group', 'Senior Vice President, Finance and Information Systems', 'SVP and General Manager, Dell Americas', 'President, Americas', 'Vice President, Marketing and e-Business, U.S. Consumer Segment', 'President, Europe, Middle East and Africa', 'President, Global Operations', 'Vice President of Strategy', 'Interim Chief Information Officer', 'Senior Vice President and Chief Financial Officer', 'President, Asia-Pacific and Japan', 'Director, Desktop Development', 'Vice President and General Manager, Relationship Product Group', 'Senior Vice President and General Manager, Worldwide Home and Small Business Group', 'Director and General Manager, U.S. Asset Recovery Business', 'Senior Vice President, Corporate Strategy', 'Vice President, Corporate Business Group, Dell Americas', 'Vice President, Strategy, Enterprise Systems Group', 'Quality  Engineer', 'Chief Operating Officer', 'President, Dell Americas', 'Senior Vice President of Human Resources', 'Senior Vice President, Europe, Middle East and Africa', 'Marketing Executive', 'Vice President and General Manager, Home and Small Business Division', 'Chief Information Officer', 'Senior Vice President, Global Services', 'Director, Human Resources, Product Group', 'Senior Vice President and General Counsel', 'Chief Marketing Officer', 'Vice President and General Manager, Public Business Group', 'Senior Vice President', 'Chief Executive Officer', 'Senior Vice President, Business Product Group', 'President, Global Consumer Group', 'Vice President and General Manager, Mid-Markets and Preferred Corporate Accounts', 'Chief Financial Officer', 'President', 'Senior Vice President, Personal Systems Group', 'Senior Vice President and Chief Information Officer', 'Senior Vice President of Business Development and Strategy', 'Managing Director, Dell Ventures'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 26 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.board_members', 'organization.organization_board_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 11
            Final Answer: {'2000', '2007', '2001', '1999', '2006', '1984', '1991', '1995', '1997', '1992'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 27 / 90: {
          [('Main', '==', 'm.0py9b', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 5
            Final Answer: {'56', '115', '25', '33', '34'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 28 / 90: {
          [('Main', '==', 'm.0py9b', ['business.sponsor.sponsorship', 'business.sponsorship.sponsored_recipient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_recipient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_recipient ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 2
            Final Answer: {'Dell Diamond', 'GPU Technology Conference 2012'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 29 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.child', 'organization.organization_relationship.child'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 260
            Final Answer: {'Dell (China) Company Limited, Beijing Liaison Office', 'Dell International Holdings II LLC', 'Dell Canada Inc', 'Alienware Corporation (Pacific Rim), Pty Ltd', 'Dell Hong Kong ltd', 'Dell N.V.', 'LLC Dell Ukraine', 'Dell Global Holdings LLC', 'Dell Compellent', 'Dell International Holdings III LLC', 'Dell Funding LLC', 'Dell Corp ltd', 'Dell Global Holdings I BV', 'Dell El Salvador S.A. DE C.V.', 'Dell Marketing USA LP LLC', 'Dell Technology Services Inc S.R.L.', 'Dell Asia B.V.', 'Dell Computer spol. sro', 'Dell Emerging Markets (EMEA) Representative Office (Republic of Croatia)', 'Dell Jamaica Ltd', 'MessageOne Europe Ltd', 'Dell Conduit Funding LP', 'Dell Emerging Market (EMEA) Ltd (Russia Representative Office)', 'Dell Emerging Markets (EMEA) Magyarorszagi Kereskedelmi Kepviselet - Rep. Office', 'Dell Asia Pacific Sdn', 'Dell Global Business Center Sdn. Bhd.', 'Dell (China) Company Limited, Shenzhen Liaison Office', 'Dell Procurement (Xiamen) Company Limited, Shanghai Branch', 'Dell SA', 'Dell (Xiamen) Co ltd', 'Alienware Corp', 'Dell World Trade LP', 'Dell Products (Europe) B.V.', 'Dell Computadores do Brasil Ltda', 'Dell Singapore Pte. Ltd.', 'Dell Computer Holdings LP', 'Dell Puerto Rico Corp', 'Dell Emerging Markets (EMEA) - Representative Office Ukraine', 'Dell Revolver Funding LLC', 'Dell Global Holdings II BV', 'Dell India Private Ltd', 'Dell Marketing Corp', 'Dell Products', 'Dell Trinidad & Tobago ltd', 'Dell USA LP LLC', 'Dell Federal Systems GP LLC', 'Dell International Holdings SAS', 'Dell Procurement (Xiamen) Company', 'Dell Products LP', 'Dell Technology & Solutions (Nigeria) Ltd', 'Dell Asset Revolving Trust', 'Dell Receivables LP LLC', 'DFS Funding LLC', 'Dell Asset Securitization Holding LP', 'Dell Catalog Sales L.P. Rep Office', 'Dell Federal Systems LP LLC', 'Dell Computer SA', 'Dell Hungary Technology Solutions Trade LLC', 'Dell Products LP LLC', 'Dell DFS Holdings LLC', 'Dell Colombia Inc Colombia Branch', 'Dell Guatemala Ltda', 'Dell Ecuador Cia Ltda', 'Dell Services LP', 'Dell Emerging Markets (EMEA) Turkey (Istanbul) Liaison Office', 'Dell (Xiamen) Co Ltd Dalian Branch', 'Dell Teknoloji Sirketi', 'Dell Computer Holding II SGPS Unipessoal Lda', 'Dell Halle GmbH', 'Dell Computer de Chile Corp', 'Dell World Trade GP LLC', 'Dell Global Pte. Ltd', 'Dell World Trade LP LLC', 'Oy Dell A.B.', 'Dell Global Holdings GP LLC', 'Dell (China) Company Limited, Beijing Branch', 'Dell Products Manufacturing', 'Dell International Holdings XI', 'Dell International Holdings VIII B.V.', 'Dell (China) Company Limited, Chengdu Liaison Office', 'Dell DFS Corp', 'Dell Global Holdings Ltd', 'Dell Revolver Company L.P.', 'ASAP SOFTWARE EXPRESS INC', 'Dell Corp Northern Ireland Place of Business', 'Dell Global Holdings III BV', 'DFS Equipment Holding LP', 'EqualLogic Canada', 'EqualLogic Deutschland GmbH', 'Dell Computer Services de Mexico SA de CV', 'Dell Australia Pty. Ltd', 'Dell Global BV (Philippines Representative Office)', 'Dell Technology Products and Services S.A', 'Dell Distribution Maroc (Succ)', 'Dell Sales Malaysia Sdn Bhd', 'Dell Global International B.V.', 'Dell', 'Dell Taiwan B.V.', 'Dell Emerging Markets (EMEA) (Kazakhstan Representative Office)', 'Dell Honduras S de RL de CV', 'Dell Emerging Markets (EMEA) - Representative Office', 'Dell USA Corporation', 'Perot Systems', 'Dell India R&D Center Private ltd', 'Dell (China) Company Limited, Hangzhou Liaison Office', 'Dell Panama S. de R.L.', 'Dell Receivables Corporation', 'Dell Gen. P. Corp', 'Dell New Zealand ltd', 'Dell Eastern Europe Corp', 'Dell Solutions (UK) ltd', 'Dell USA LP', 'Dell Emerging Markets (EMEA) Trade Representative Office (Bulgaria)', 'DIH IV C.V.', 'ASAP Software SAS', 'Dell Global BV (Vietnam Representative Office)', 'Bracknell Boulevard Management Company', 'Dell Asia Pacific Sdn. Vietnam Representative Office', 'Dell Global Holdings LP', 'Dell Per', 'Dell Receivables GP LLC', 'Corporacion Dell de Venezuela SA', 'DIH V C.V.', 'Dell International Services', 'Dell Products GP LLC', 'Dell DFS Holdings Kft', 'Dell (Thailand) Co Ltd', 'Dell Marketing LP LLC', 'Dell Colombia Inc', 'Dell Computer Holdings Corp', 'Dell Distribution (EMEA) External Company (Ghana)', 'Networked Storage Co Ltd', 'Dell Computer ltd', 'Dell (China) Company', 'Dell Taiwan B.V. Taiwan Branch', 'Dell FZ-LLC - Bahrain Branch', 'Dell SAS', 'Dell (China) Co., Ltd., Guangzhou Liaison Office', 'DFS SPV LLC', 'Dell Asia Pacific Sdn. Indonesia Representative Office', 'Dell Products (Poland) Sp. z o.o', 'Dell Emerging Markets (EMEA) Egypt Representative Office', 'Dell Services S.r.l.', 'CPS Channel Partner Solutions LP', 'Dell Asia Pte. Ltd', 'Dell Asset Securitization GP LLC', 'Dell Receivables LP', 'Dell Protective Services Inc', 'Plural Acquisition I, Inc', 'Alienware Retail Corp', 'Dell Services GP LLC', 'Dell Research', 'Dell Computer Holding I SGPS Unipessoal Lda', 'Dell International Holdings VI (Ireland)', 'Dell Marketing USA GP LLC', 'Dell Export Sales Corporation', 'Dell (China) Company Limited, Nanjing Liaison Office', 'Dell Global Holdings LP LLC', 'Dell Computer EEIG', 'ACS (India) ltd', 'Dell Computer International (II) - Comercio de Computadores Sociedade Unipessoal Lda', 'License Technologies Group Inc', 'Dell Computer India Corp', 'Dell Conduit GP LLC', 'Dell Global Holdings IV LLC', 'Dell International Services Philippines Inc', 'Dell Procurement (Xiamen) Company Limited, Shenzhen Liaison Office', 'Dell (China) Co Ltd Shanghai Branch', 'Dell Technology & Solutions Israel Ltd', 'PT Dell Indonesia', 'EqualLogic Japan Company', 'Dell Marketing USA LP', 'Dell Emerging Markets (EMEA) Representative Office Lebanon', 'Dell III Comercio de Computadores Unipessoal LDA', 'Dell America Latina Corp., Argentina Branch', 'Dell Global B.V. Singapore Branch', 'Dell International Holdings I L:.L.C.', '26eme Avenue SAS', 'Bracknell Boulevard (Block C) LLC', 'Dell GmbH', 'Dell Global Holdings V LP', 'Dell A/S', 'Dell LLC', 'DCC Executive Security Inc', 'Dell International Services India Private ltd', 'Dell Mexico S.A. de C.V.', 'Alienware Latinoamerica, S.A', 'Dell Equipment GP L.L.C', 'Dell (China) Co Ltd Chengdu Branch', 'Dell B.V. Taiwan Branch', 'Dell International Holdings IX B.V.', 'DFS Equipment General Partner LLC', 'Dell (China) Company Limited, Guangzhou Branch', 'Dell (China) Co Ltd Shanghai Liaison Office', 'EqualLogic UK ltd', 'Dell s.r.o.', 'Dell Revolver GP. LLC', 'Dell Financial Services International ltd', 'Dell (China) Co Ltd Xiamen Branch', 'Dell Federal Systems Corporation', 'Dell International Holdings X B.V.', 'Dell International Holdings Kft', 'SCI New-Tech', 'Dell USA GP LLC', 'Branch of Dell (Free Zone Company L.L.C.)', 'Dell Asia Holdings Pte. Ltd.', 'SCI Siman', 'Dell America Latina Corp', 'Dell (China) Company Limited, Dalian Branch', 'Dell Gesm.b.H.', 'Dell Financial Services LLC', 'Dell Asset Securitization LP', 'Dell Computer de Chile Ltda', 'Dell Marketing LP', 'Dell Japan Inc', 'Dell A.B.', 'Dell A.S.', 'Dell Global BV (Indonesia Representative Office)', 'Bracknell Boulevard (Block D) LLC', 'Dell International Holdings XII Cooperatoef U.A.', 'Dell Services LP LLC', 'Dell Computer Ltd', 'Dell Emerging Markets (EMEA) (Uganda Representative Office)', 'Dell Emerging Markets (EMEA) Representative Office (Jordan)', 'Dell Asia Pacific Sdn. Phillippines Representative Office', 'Alienware', 'Dell Products Corporation', 'Alienware Labs Corp', 'Equalogic Inc', 'Branch of Dell (Free Zone Co LLC)', 'Dell International Holdings Kft. Zurich Branch', 'Dell B.V.', 'Dell Emerging Markets (EMEA) ltd', 'EqualLogic B.V.', 'Dell Global Procurement Malaysia Sdn. Bhd.', 'Dell Asia Pacific Sdn. - India Liaison Office', 'Dell Credit Company, L.L.C.', 'DFS Equipment Remarketing LLC', '26eme Avenue', 'Dell Marketing GP LLC', 'Dell Services Corp', 'Dell Ventures Corp', 'Dell World Trade Corporation', 'Dell Emerging Market (EMEA) Ltd (Russia Representative Officer', 'Dell (III) Comercio de Computadores Unipessoal LDA', 'Dell Asia B.V. Taiwan Branch', 'Dell Federal Systems LP', 'Dell International Inc', 'Dell International Holdings VII (Ireland)', 'Dell Equipment Funding LP', 'Dell Quebec Inc', 'ZING', 'Dell Sp.z.o.o.', 'Dell S.p.A.', 'Dell Global B.V.', 'Dell Ventures LP', 'Dell Procurement International'}
            Answers = 257, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 257, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 30 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.competitive_space', 'business.competitive_space_mediator.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 2
            Final Answer: {'Dell Inspiron', 'Dell Dimension'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 31 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.leadership', 'organization.leadership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }
          [2020-12-03 14:18:36] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 2
            Final Answer: {'1984', '2007'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 32 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.leadership', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Chief Executive Officer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 33 / 90: {
          [('Main', '==', 'm.0py9b', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_language'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_language ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_language ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 34 / 90: {
          [('Main', '==', 'm.0py9b', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.hearing_impaired'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.hearing_impaired ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.hearing_impaired ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 35 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.revenue', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 36 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.cash', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 37 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.retained_earnings', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 38 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.net_profit', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 39 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.assets', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 40 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.operating_income', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 41 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.liabilities', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 42 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.current_assets', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 43 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.current_liabilities', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 44 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.headquarters', 'location.mailing_address.street_address'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 45 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.headquarters', 'location.mailing_address.state_province_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Texas'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 46 / 90: {
          [('Main', '==', 'm.0py9b', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 11
            Final Answer: {'2000', '2007', '2001', '2004', '2006', '2008', '2005'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 47 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.board_members', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 48 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.board_members', 'organization.organization_board_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 4
            Final Answer: {'2001', '2007', '2005', '2008'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 49 / 90: {
          [('Main', '==', 'm.0py9b', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 50 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.companies_acquired', 'business.acquisition.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 3
            Final Answer: {'2007', '2012'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 51 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.companies_acquired', 'business.acquisition.divisions_formed'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.divisions_formed ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.divisions_formed ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'ZING'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 52 / 90: {
          [('Main', '==', 'm.0py9b', ['business.consumer_company.brands', 'business.company_brand_relationship.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell Inspiron'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 53 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.competitive_space', 'business.competitive_space_mediator.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 54 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.leadership', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 55 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.leadership', 'organization.leadership.as_of_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.as_of_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.as_of_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 56 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.leadership', 'organization.leadership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.to ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2004'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 57 / 90: {
          [('Main', '==', 'm.0py9b', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 58 / 90: {
          [('Main', '==', 'm.0py9b', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.toll_free'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.toll_free ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.toll_free ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 59 / 90: {
          [('Main', '==', 'm.0py9b', ['business.consumer_company.product_lines', 'business.company_product_line_relationship.product_line'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.consumer_company.product_lines ?o1 . ?o1 fb:business.company_product_line_relationship.product_line ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.consumer_company.product_lines ?o1 . ?o1 fb:business.company_product_line_relationship.product_line ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell Cloud Computing'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 60 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.revenue', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.revenue ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 4
            Final Answer: {'2000', '2007', '2009'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 61 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.cash', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.cash ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 62 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.retained_earnings', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.retained_earnings ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 63 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.net_profit', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.net_profit ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 3
            Final Answer: {'2000', '2007', '2009'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 64 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.assets', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 65 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.operating_income', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.operating_income ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 2
            Final Answer: {'2007', '2009'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 66 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.liabilities', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 67 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.current_assets', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.current_assets ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 68 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.current_liabilities', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:business.business_operation.current_liabilities ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 69 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.headquarters', 'location.mailing_address.postal_code'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'78682'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 70 / 90: {
          [('Main', '==', 'm.0py9b', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 31
            Final Answer: {'Stephen F. Schuckenbrock', 'Arthur van Hoff', 'Thomas W Sweet', 'Michael R. Cannon', 'Joan S Hooper', 'Michael S. Dell', 'Stephen J. Felice', 'James M. Schneider', 'John S Hamlin', 'Paul D. Bell', 'Andrew Esparza', 'David A. Marmonti', 'Glenn E Neland', 'Jeffrey W. Clarke', 'Brad R. Anderson', 'Tim Bucher', 'Joe Marengi', 'Mark Jarvis', 'Timothy W. Mattox', 'Martin J Garvin', 'Donald J. Carty', 'Lawrence P. Tu', 'Carl Everett', 'Ronald G. Garriques', 'Paul McKinnon', 'Brian T. Gladden', 'Randall D. Mott', 'Thomas J Meredith', 'John K Medica', 'Jerry Hamrock', 'Kevin B. Rollins'}
            Answers = 31, P = 0.032258, R = 1.000000, F1 = 0.062500
          } [0.013s]
          Answers = 31, P = 0.032258, R = 1.000000, F1 = 0.062500
        } [0.013s]
        Checking schema 71 / 90: {
          [('Main', '==', 'm.0py9b', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 72 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.board_members', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 16
            Final Answer: {'Shantanu Narayen', 'Donald J. Carty', 'Alan G. Lafley', 'Alex J. Mandl', 'William H. Gray III', 'Ros Perot JR', 'Jim Breyer', 'Michael S. Dell', 'Klaus Luft', 'Judy C. Lewent', 'Sam Nunn', 'Thomas W. Luce III', 'Michael A. Miles', 'Sallie Krawcheck', 'Mary Alice Taylor', 'Kevin B. Rollins'}
            Answers = 16, P = 0.062500, R = 1.000000, F1 = 0.117647
          } [0.016s]
          Answers = 16, P = 0.062500, R = 1.000000, F1 = 0.117647
        } [0.016s]
        Checking schema 73 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.board_members', 'organization.organization_board_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.board_members ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 74 / 90: {
          [('Main', '==', 'm.0py9b', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 3
            Final Answer: {'Fortune 500', 'Fortune Global 500', 'Fortune 1000'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 75 / 90: {
          [('Main', '==', 'm.0py9b', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 5
            Final Answer: {'2000', '2007', '2006', '2008', '2009'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 76 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.companies_acquired', 'business.acquisition.company_acquired'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.company_acquired ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.company_acquired ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 3
            Final Answer: {'EqualLogic', 'ZING', 'Quest Software'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 77 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.companies_acquired', 'business.acquisition.acquiring_company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.acquiring_company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.companies_acquired ?o1 . ?o1 fb:business.acquisition.acquiring_company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 78 / 90: {
          [('Main', '==', 'm.0py9b', ['business.sponsor.sponsorship', 'business.sponsorship.sponsored_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.sponsor.sponsorship ?o1 . ?o1 fb:business.sponsorship.sponsored_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 79 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.child', 'organization.organization_relationship.parent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 80 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.child', 'organization.organization_relationship.as_of_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.as_of_date ?o2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 WHERE { fb:m.0py9b fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.as_of_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 7
            Final Answer: {'2007', '2003', '2004', '2006', '2008', '2005', '2009'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 81 / 90: {
          [('Main', '==', 'm.0py9b', ['business.consumer_company.brands', 'business.company_brand_relationship.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 82 / 90: {
          [('Main', '==', 'm.0py9b', ['business.business_operation.competitive_space', 'business.competitive_space_mediator.space'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.space ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.business_operation.competitive_space ?o1 . ?o1 fb:business.competitive_space_mediator.space ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Personal computer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 83 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.leadership', 'organization.leadership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 84 / 90: {
          [('Main', '==', 'm.0py9b', ['organization.organization.leadership', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 5
            Final Answer: {'Lawrence P. Tu', 'Michael S. Dell', 'Stephen J. Felice', 'Ronald G. Garriques', 'Thomas W Sweet'}
            Answers = 5, P = 0.200000, R = 1.000000, F1 = 0.333333
          } [0.011s]
          Answers = 5, P = 0.200000, R = 1.000000, F1 = 0.333333
        } [0.011s]
        Checking schema 85 / 90: {
          [('Main', '==', 'm.0py9b', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.caller_category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.caller_category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.caller_category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 4
            Final Answer: {'Existing Customers', 'Premium Customer Service', 'Consumer Service', 'Business Service'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 86 / 90: {
          [('Main', '==', 'm.0py9b', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.contact_category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.contact_category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.contact_category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 4
            Final Answer: {'Claims and Warranty', 'Automated/self-service system', 'Sales', 'Technical Support'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 87 / 90: {
          [('Main', '==', 'm.0py9b', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.service_location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.service_location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 3
            Final Answer: {'United States of America', 'Earth', 'Canada'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 88 / 90: {
          [('Main', '==', 'm.0py9b', ['base.schemastaging.organization_extra.phone_number', 'base.schemastaging.phone_sandbox.product_or_service'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.product_or_service ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:base.schemastaging.organization_extra.phone_number ?o1 . ?o1 fb:base.schemastaging.phone_sandbox.product_or_service ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 5
            Final Answer: {'Dell Outlet Business', 'Home Office Spare Parts', 'Dell Outlet Home', 'Dell Home', 'Dell Home Office'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 89 / 90: {
          [('Main', '==', 'm.0py9b', ['business.consumer_company.product_lines', 'business.company_product_line_relationship.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.consumer_company.product_lines ?o1 . ?o1 fb:business.company_product_line_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.consumer_company.product_lines ?o1 . ?o1 fb:business.company_product_line_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 1
            Final Answer: {'Dell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        83 / 90 coarse schemas kept with ans_size > 0.
      } [1.110s]
      Coarse level ended, resulting in 83 schemas.
    } [1.789s]
    Type level searching (total types = 10): {
      Current: 0 / 83
[{'business.issue'}]
[{'location.location'}]
[{'base.advertisingcharacters.advertising_character'}]
[{'organization.organization'}]
[{'type.datetime'}]
[{'organization.organization_founder'}]
[{'organization.organization_scope'}]
[{'business.industry'}]
[{'computer.software'}]
[{'conferences.conference_series'}]
[{'base.giftcards.gift_card'}]
[{'computer.computer'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'location.mailing_address'}, {'location.location'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'award.ranking'}, {'type.int'}]
[{'business.sponsorship'}, {'business.sponsored_recipient'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'business.competitive_space_mediator'}, {'business.brand'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.leadership'}, {'organization.role'}]
[{'base.schemastaging.phone_sandbox'}, {'language.human_language'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'location.mailing_address'}, {'location.administrative_division'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'business.acquisition'}, {'type.datetime'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'business.company_brand_relationship'}, {'business.brand'}]
[{'business.competitive_space_mediator'}, {'business.business_operation'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'business.company_product_line_relationship'}, {'business.product_line'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'location.mailing_address'}, {'location.postal_code'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'business.acquisition'}, {'organization.organization'}]
[{'business.sponsorship'}, {'business.sponsor'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'organization.organization_relationship'}, {'type.datetime'}]
[{'business.company_brand_relationship'}, {'business.consumer_company'}]
[{'business.competitive_space_mediator'}, {'business.competitive_space'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'base.schemastaging.phone_sandbox'}, {'base.schemastaging.contactor_category'}]
[{'base.schemastaging.phone_sandbox'}, {'organization.contact_category'}]
[{'base.schemastaging.phone_sandbox'}, {'location.location'}]
[{'base.schemastaging.phone_sandbox'}, {'base.schemastaging.contact_product'}]
[{'business.company_product_line_relationship'}, {'business.consumer_company'}]
      1 typed schemas retrieved from 83 coarse schemas.
      Calculating F1 for 1 typed schemas: {
        Current: 0 / 1
        Checking schema 0 / 1: {
          [('Main', '==', 'm.0py9b', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'law.inventor', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'law.inventor'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:law.inventor . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:37] Q_Schema Request: {
            WebQ_693|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0py9b fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:law.inventor . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0py9b'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        0 / 1 typed schemas kept with ans_size > 0.
      } [0.016s]
      Typed level ended, resulting in 83 schemas.
    } [0.020s]
    Time level searching (total times = 0): {
      Current: 0 / 83
self.var_time_preds: [{'business.issue.first_issued', 'business.issue.cancellation_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.advertisingcharacters.advertising_character.debut', 'base.advertisingcharacters.advertising_character.ended'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'computer.software.latest_release_date', 'computer.software.first_released'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'computer.computer.discontinued', 'computer.computer.introduced'}]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.from', 'organization.organization_relationship.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'business.acquisition.date'}, set()]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'business.company_product_line_relationship.to_date', 'business.company_product_line_relationship.from_date'}, {'business.product_line.introduced'}]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.acquisition.date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.from', 'organization.organization_relationship.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.from', 'organization.organization_relationship.to'}, set()]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.company_product_line_relationship.to_date', 'business.company_product_line_relationship.from_date'}, set()]
      0 timed schemas retrieved from 83 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 83 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 83
[{'business.issue.first_issued', 'business.issue.cancellation_date'}]
[set()]
[{'base.advertisingcharacters.advertising_character.debut', 'base.advertisingcharacters.advertising_character.ended'}]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[set()]
[set()]
[{'computer.software.latest_release_date', 'computer.software.first_released'}]
[set()]
[set()]
[{'computer.computer.discontinued', 'computer.computer.introduced'}]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'award.ranking.year'}, set()]
[{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.from', 'organization.organization_relationship.to'}, {'organization.organization.date_founded'}]
[set(), set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'award.ranking.year'}, set()]
[{'business.acquisition.date'}, set()]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[set(), set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[{'business.company_product_line_relationship.to_date', 'business.company_product_line_relationship.from_date'}, {'business.product_line.introduced'}]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'business.acquisition.date'}, {'organization.organization.date_founded'}]
[{'business.sponsorship.to', 'business.sponsorship.from'}, set()]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.from', 'organization.organization_relationship.to'}, {'organization.organization.date_founded'}]
[{'organization.organization_relationship.as_of_date', 'organization.organization_relationship.from', 'organization.organization_relationship.to'}, set()]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[set(), set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'business.company_product_line_relationship.to_date', 'business.company_product_line_relationship.from_date'}, set()]
      0 ordinal schemas retrieved from 83 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 83 schemas.
    } [0.002s]
    [2020-12-03 14:18:37] buffer saved.
    83 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0693_schema].
  } [13.384s]
  Entering Q 694 / 5810 [b'where did morgan freeman come from?']: {
    Show 1 E + 10 T + 0 Tm + 0 Ord = 11 linkings: {
      #00 Entity: [2, 4) (morgan freeman) == m.055c8 (Morgan_Freeman) {'score': 26979.75368, 'source': 0.0}
      #01 Type: [0, 2) (where did) == media_common.lost_work (lost work) {'sim': 0.737278}
      #02 Type: [0, 2) (where did) == people.place_lived (place lived) {'sim': 0.703608}
      #03 Type: [0, 1) (where) == location.place_with_neighborhoods (place with neighborhoods) {'sim': 0.687732}
      #04 Type: [4, 7) (come from ?) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.67481}
      #05 Type: [0, 1) (where) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.659286}
      #06 Type: [0, 1) (where) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.649255}
      #07 Type: [0, 2) (where did) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.641702}
      #08 Type: [0, 2) (where did) == media_common.finished_work (finished work) {'sim': 0.640596}
      #09 Type: [0, 1) (where) == military.military_unit_place_of_origin (military unit place of origin) {'sim': 0.635708}
      #10 Type: [0, 2) (where did) == location.us_state (us state) {'sim': 0.63183}
    } [0.000s]
    11 link data save to file.
    Coarse level searching (total entities = 1): {
      [Len-1||F1/1] (2020-12-03 14:18:49) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.055c8 ?p1 ?o1 . }
        [2020-12-03 14:18:49] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.055c8 ?p1 ?o1 . }
          Query return lines = 47
        } [0.006s]
        Filt_Query_Ret = 17 / 47 ( 0.006s)
      } [0.006s]
      [Len-2||F1/1] (2020-12-03 14:18:49) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.055c8 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:49] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.055c8 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 658
        } [0.087s]
        Filt_Query_Ret = 68 / 658 ( 0.089s)
      } [0.090s]
      85 coarse schemas retrieved from scratch.
      Calculating F1 for 85 coarse schemas: {
        Current: 0 / 85
        Checking schema 0 / 85: {
          [('Main', '==', 'm.055c8', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.055c8 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 WHERE { fb:m.055c8 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'1937'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 2 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 3 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'African American'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 4 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'Mayme Edna Revere', 'Morgan Porterfield Freeman'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 5 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.055c8 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 WHERE { fb:m.055c8 fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'1.88'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 6 / 85: {
          [('Main', '==', 'm.055c8', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'The South', 'Bombs Away'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 7 / 85: {
          [('Main', '==', 'm.055c8', ['film.producer.films_executive_produced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:film.producer.films_executive_produced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:film.producer.films_executive_produced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 5
            Final Answer: {'Under Suspicion', '10 Items or Less', 'Levity', 'Along Came a Spider', 'Invictus'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 8 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 4
            Final Answer: {'Deena Freeman', 'Alfonso Freeman', 'Saifoulaye Freeman', 'Morgana Freeman'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 9 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.055c8 fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 WHERE { fb:m.055c8 fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'79'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 10 / 85: {
          [('Main', '==', 'm.055c8', ['film.director.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'Bopha!', 'Homecoming'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 11 / 85: {
          [('Main', '==', 'm.055c8', ['film.producer.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:film.producer.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:film.producer.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'The 16th Man', 'The Maiden Heist'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 12 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 8
            Final Answer: {'TV Host', 'Television Producer', 'Film Producer', 'Actor', 'Narrator', 'Businessperson', 'Presenter', 'Film Director'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 13 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 14 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Memphis'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.005s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.005s]
        Checking schema 15 / 85: {
          [('Main', '==', 'm.055c8', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'Revelations Entertainment', 'ClickStar'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 16 / 85: {
          [('Main', '==', 'm.055c8', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 17 / 85: {
          [('Main', '==', 'm.055c8', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'9e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 18 / 85: {
          [('Main', '==', 'm.055c8', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Clarksdale'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 19 / 85: {
          [('Main', '==', 'm.055c8', ['organization.organization.headquarters', 'location.mailing_address.street_address_2'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address_2 ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address_2 ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 20 / 85: {
          [('Main', '==', 'm.055c8', ['film.actor.film', 'film.performance.character_note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 21 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 22 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 23
            Final Answer: {'Screen Actors Guild Award for Outstanding Performance by a Male Actor in a Leading Role', "People's Choice Award for Favorite Movie Icon", "People's Choice Award for Favorite Cast", 'Black Reel Award for Best Supporting Actor', 'Tony Award for Best Featured Actor in a Play', 'Independent Spirit Award for Best Supporting Male', 'NAACP Image Award for Outstanding Supporting Actor in a Motion Picture', 'Golden Globe Award for Best Actor - Musical or Comedy Film', 'American Society of Cinematographers Board of the Governors Award', 'Golden Globe Cecil B. DeMille Award', 'MTV Movie Award for Best On-Screen Duo', 'Golden Globe Award for Best Supporting Actor - Film', 'National Society of Film Critics Award for Best Actor', 'Broadcast Film Critics Association Award for Best Actor', 'Academy Award for Actor in a Leading Role', 'Broadcast Film Critics Association Award for Best Cast', 'Golden Globe Award for Best Actor - Drama Film', 'Screen Actors Guild Award for Outstanding Performance by a Cast in a Motion Picture', 'National Society of Film Critics Award for Best Supporting Actor', 'Academy Award for  Actor in a Supporting Role', 'Screen Actors Guild Award for Best Supporting Actor - Motion Picture', 'Broadcast Film Critics Association Award for Best Supporting Actor', 'Satellite Award for Best Supporting Actor – Comedy or Musical'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 23 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 12
            Final Answer: {'Another World', 'Mississippi Rising', 'Through the Wormhole', 'Rabbit Ears Productions', 'The Civil War', "Smithsonian Channel's Sound Revolution", 'The Atlanta Child Murders', 'Slavery and the Making of America', 'The Electric Company', 'Out to Lunch', "Ryan's Hope", 'Texas'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 24 / 85: {
          [('Main', '==', 'm.055c8', ['aviation.aircraft_owner.aircraft_fleet_composition', 'aviation.aircraft_ownership_count.number_owned'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.number_owned ?o2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.number_owned ?o2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 25 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 3
            Final Answer: {'Myrna Colley-Lee', 'Jeanette Adair Bradshaw'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 26 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 27 / 85: {
          [('Main', '==', 'm.055c8', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'Him/Herself', 'Narrator'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 28 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 14
            Final Answer: {'1998', '1996', '2012', '2004', '2010', '2006', '1990', '2011', '1987', '1989', '2008', '2005', '2009', '1988'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 29 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_winner.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 30 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 8
            Final Answer: {'March of the Penguins', 'The Dark Knight', 'Million Dollar Baby', 'Seven', 'Invictus', 'Driving Miss Daisy', 'Street Smart', 'Amistad'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 31 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Narrator'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 32 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_producer.tv_episodes_produced', 'tv.tv_producer_episode_credit.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_producer.tv_episodes_produced ?o1 . ?o1 fb:tv.tv_producer_episode_credit.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_producer.tv_episodes_produced ?o1 . ?o1 fb:tv.tv_producer_episode_credit.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Producer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 33 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 34 / 85: {
          [('Main', '==', 'm.055c8', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 35 / 85: {
          [('Main', '==', 'm.055c8', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'celebritynetworth.com'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 36 / 85: {
          [('Main', '==', 'm.055c8', ['organization.organization.headquarters', 'location.mailing_address.street_address'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 37 / 85: {
          [('Main', '==', 'm.055c8', ['organization.organization.headquarters', 'location.mailing_address.state_province_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Mississippi'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 38 / 85: {
          [('Main', '==', 'm.055c8', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 90
            Final Answer: {'The Art of Romare Bearden', 'Thick as Thieves', 'Guilty by Association', 'Seven', 'Outbreak', 'The Bonfire of the Vanities', 'Hard Rain', 'Eyewitness', 'Teachers', 'Conan the Barbarian', 'Moll Flanders', 'Levity', 'Driving Miss Daisy', 'A Raisin in the Sun', 'Soul Brothas and Sistas: Vol. 4: Quadruple Feature', 'Harry & Son', 'Wish Wizard', 'Where Were You When the Lights Went Out?', 'Red', 'The Pawnbroker', 'Death of a Prophet', 'The Magic of Belle Isle', 'The Love Guru', 'War of the Worlds', 'Nurse Betty', 'Marie', "For Love of Liberty: The Story of America's Black Patriots", 'The Bucket List', '10 Items or Less', 'Fight for Life', 'Lean on Me', 'Deep Impact', 'National Geographic: Inside the White House', 'Now You See Me', 'Resting Place', 'Magnificent Desolation: Walking on the Moon 3D', 'The Shawshank Redemption', 'The Dark Knight Rises', 'Cosmic Voyage', 'The Hunting of the President', 'Unforgiven', 'Johnny Handsome', 'Glory', 'All About Us', 'Chain Reaction', 'Heart Stopper', 'Roll Of Thunder, Hear My Cry', 'Clean and Sober', 'Along Came a Spider', 'Gone Baby Gone', 'Kiss the Girls', 'Bruce Almighty', 'The Long Way Home', 'Robin Hood: Prince of Thieves', 'Unleashed', 'The Big Bounce', 'Dreamcatcher', 'Attica', 'Under Suspicion', 'Edison', 'The Execution of Raymond Graham', 'Invictus', 'The Dark Knight', 'Amistad', 'Lego: The Piece of Resistance', 'Brubaker', 'Dolphin Tale', 'Olympus Has Fallen', 'That Was Then... This Is Now', 'Street Smart', 'Oblivion', 'The Dark Knight: Bonus Material', 'The Civil War', 'Batman Begins', 'We the People', 'America Beyond the Color Line', 'A Man Called Adam', 'The Power of One', 'Clinton and Nadine', 'March of the Penguins', 'Feast of Love', 'Lucky Number Slevin', 'Million Dollar Baby', 'The Contract', 'The Maiden Heist', 'An Unfinished Life', 'Wanted', 'High Crimes', 'The Sum of All Fears', 'Evan Almighty'}
            Answers = 90, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 90, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 39 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 6
            Final Answer: {'Gary', 'Greenwood', 'New York City', 'Memphis', 'Charleston', 'Los Angeles'}
            Answers = 6, P = 0.166667, R = 1.000000, F1 = 0.285714
          } [0.006s]
          Answers = 6, P = 0.166667, R = 1.000000, F1 = 0.285714
        } [0.006s]
        Checking schema 40 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 13
            Final Answer: {'The Mighty Gents', 'Driving Miss Daisy', 'The Shawshank Redemption', 'Robin Hood: Prince of Thieves', 'Street Smart', 'Nurse Betty', 'Million Dollar Baby', 'Seven', 'The Sum of All Fears', 'Invictus', 'The Dark Knight', 'Gone Baby Gone', 'Amistad'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 41 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 20
            Final Answer: {'1998', '1996', '1978', '2007', '1994', '2012', '2001', '2003', '2004', '1987', '2010', '1990', '1989', '1995', '2011', '2008', '2005', '2009', '1988', '1992'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 42 / 85: {
          [('Main', '==', 'm.055c8', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Earth Biofuels'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 43 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:49] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 44 / 85: {
          [('Main', '==', 'm.055c8', ['aviation.aircraft_owner.aircraft_fleet_composition', 'aviation.aircraft_ownership_count.aircraft_owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 45 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'1984', '1967'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 46 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman/Susan Lucci/Joss Stone'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 47 / 85: {
          [('Main', '==', 'm.055c8', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 14
            Final Answer: {'The Long Way Home', 'The Art of Romare Bearden', 'The Massachusetts 54th Colored Infantry: American Experience', 'Prom Night In Mississippi', 'Greasy Rider', 'Wanted: Cast and Characters', 'Born to be Wild 3D', 'Casting By', 'Scandalize My Name', 'Max on Set: Wanted', "For Love of Liberty: The Story of America's Black Patriots", 'Cosmic Voyage', 'The Hunting of the President', 'Last of the Mississippi Jukes'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 48 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 13
            Final Answer: {'Christophe Lioud', 'Yves Darondeau', 'Maggie Gyllenhaal', 'Luc Jacquet', 'Michael Caine', 'Jerôme Maison', 'Aaron Eckhart', 'Laurent Chalet', 'Heath Ledger', 'Gary Oldman', 'Emmanuel Priou', 'Christian Bale'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 49 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 9
            Final Answer: {'77th Academy Awards', '3rd Independent Spirit Awards', "38th People's Choice Awards", 'American Society of Cinematographers Awards 2009', '69th Golden Globe Awards', '47th Golden Globe Awards', "35th People's Choice Awards", '2004 Screen Actors Guild Awards', 'National Society of Film Critics Awards 1987'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 50 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 51 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 52 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_producer.tv_episodes_produced', 'tv.tv_producer_episode_credit.producer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_producer.tv_episodes_produced ?o1 . ?o1 fb:tv.tv_producer_episode_credit.producer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_producer.tv_episodes_produced ?o1 . ?o1 fb:tv.tv_producer_episode_credit.producer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 53 / 85: {
          [('Main', '==', 'm.055c8', ['music.artist.track_contributions', 'music.track_contribution.contributor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 54 / 85: {
          [('Main', '==', 'm.055c8', ['music.artist.track_contributions', 'music.track_contribution.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Vocals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 55 / 85: {
          [('Main', '==', 'm.055c8', ['theater.theater_actor.theater_roles', 'theater.theater_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:theater.theater_actor.theater_roles ?o1 . ?o1 fb:theater.theater_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:theater.theater_actor.theater_roles ?o1 . ?o1 fb:theater.theater_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 56 / 85: {
          [('Main', '==', 'm.055c8', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 57 / 85: {
          [('Main', '==', 'm.055c8', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 58 / 85: {
          [('Main', '==', 'm.055c8', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 59 / 85: {
          [('Main', '==', 'm.055c8', ['organization.organization.headquarters', 'location.mailing_address.postal_code'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'38614'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 60 / 85: {
          [('Main', '==', 'm.055c8', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 67
            Final Answer: {'Siemanowski', 'Charlie Woods', 'Dr. Sherard', 'Sgt. Maj. John Rawlins', 'Frederick Douglass', 'Sloan', 'Police Lieutenant Redding', 'Pastor Miles Evans', 'Morgan Freeman', 'Grand Central Commuter', 'Al Lewis', 'Sam', 'Thaddeus Bradley', 'Warden Pratt', 'Narrator', "Ellis Boyd 'Red' Redding", 'Judge Leonard White', 'Azeem', 'Monte Wildhorn', 'Jack Doyle', 'Hibble', 'Charlie Grimes', 'Frank Carden', 'Malcolm X', 'President Tom Beck', 'William Cabot', 'Voice of Frederick Douglass', 'Charlie', 'Vitruvius', 'Man on Street', 'Eddie Dupris', 'Geel Piet', 'Alex Cross', 'Jim', 'Principal Joe Clark', 'Hoke Colburn', 'The Boss', 'Maxwell Omni', 'Man at Party', 'Luther Johnson', 'Paul Shannon', 'Charles Traughber', 'Carter Chambers', 'Mitch Bradley', 'Walter Crewes', 'God', 'Col. Abraham Curtis', 'Dr. Cameron McCarthy', 'Lucius Fox', 'Walter', 'Detective Lt. William Somerset', 'Neil Armstrong', 'Joe Matheson', 'Ashford', 'Theodore Joadson', 'Lieutenant Black', 'Malcolm Beech', 'Craig', 'Ned Logan', 'Keith Ripley', 'Victor Benezet', 'Brig. Gen. Billy Ford', 'Fast Black', 'Nelson Mandela', 'Harry Scott', 'Lt. A.Z. Drones', 'Charlie Quinn'}
            Answers = 67, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 67, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 61 / 85: {
          [('Main', '==', 'm.055c8', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 62 / 85: {
          [('Main', '==', 'm.055c8', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 4
            Final Answer: {'Him/Herself', 'Voice', 'Uncredited', 'Narrator'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 63 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 64 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'Revelations Entertainment', 'ClickStar'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 65 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'Los Angeles City College', 'Jackson State University'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 66 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 67 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.places_lived', 'people.place_lived.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.start_date ?o2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'1959'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 68 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 16
            Final Answer: {'Clint Eastwood', 'John Ashton', 'Maggie Gyllenhaal', 'Michael Caine', 'Amy Ryan', 'Hilary Swank', 'Aaron Eckhart', 'Kevin Costner', 'Heath Ledger', 'Michelle Monaghan', 'Ed Harris', 'Gary Oldman', 'Casey Affleck', 'Brad Pitt', 'Christian Bale'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 69 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_nominee.award_nominations', 'award.award_nomination.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 70 / 85: {
          [('Main', '==', 'm.055c8', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 71 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 9
            Final Answer: {'Ben Shelter', 'Luther Johnson', 'Cicero Murphy', 'Detective Michaels', 'Tony', 'Clarence Collins', 'Mad Scientist', 'Easy Reader', 'Count Dracula'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 72 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Narrator'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 73 / 85: {
          [('Main', '==', 'm.055c8', ['aviation.aircraft_owner.aircraft_fleet_composition', 'aviation.aircraft_ownership_count.aircraft_model'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_model ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_model ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Emivest SJ30-2'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 74 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 WHERE { fb:m.055c8 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'2010', '1979'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 75 / 85: {
          [('Main', '==', 'm.055c8', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 76 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Celebrity guest'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 77 / 85: {
          [('Main', '==', 'm.055c8', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Morgan Freeman'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 78 / 85: {
          [('Main', '==', 'm.055c8', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 15
            Final Answer: {'American Society of Cinematographers Board of the Governors Award', 'Kennedy Center Honor', 'Golden Icon', 'Golden Globe Cecil B. DeMille Award', 'National Board of Review Award for Best Actor', "People's Choice Award for Favorite Movie Icon", 'London Film Critics Circle Award for Actor of the Year', 'National Society of Film Critics Award for Best Supporting Actor', 'Academy Award for  Actor in a Supporting Role', "People's Choice Award for Favorite Cast", 'Screen Actors Guild Award for Best Supporting Actor - Motion Picture', 'Independent Spirit Award for Best Supporting Male', 'Camie Award', 'NAACP Image Award for Outstanding Supporting Actor in a Motion Picture', 'Golden Globe Award for Best Actor - Musical or Comedy Film'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 79 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 29
            Final Answer: {'Rachel Weisz and Morgan Freeman', 'The 16th Man', 'Show #2847', 'The 77th Annual Academy Awards', 'Morgan Freeman', 'Kyle Chandler, Morgan Freeman', 'The Gospel at Colonus', '31st Annual Kennedy Center Honors', 'Ed McMahon, Morgan Freeman, Jonathan Richman', 'The 65th Annual Academy Awards', 'Resting Place', 'The Massachusetts 54th Colored Infantry', 'The 73rd Annual Academy Awards', 'The Marva Collins Story', 'Partners of the Heart', 'Dances with Dogs', 'The Bridge to Gretna; Rendition; Morgan Freeman', 'Jimmy Timmy Power Hour 2 - When Nerds Collide', 'Series 5, Show 45', 'Show #2950', "Dealer's Choice", 'George Lopez/Morgan Freeman/Natasha Bedingfield', 'Morgan Freeman, Scott Wolf', 'Sibling Rivalry', 'The 78th Annual Academy Awards', 'Morgan Freeman; Ashanti; Diana Krall;', 'Morgan Freeman, Josh Duhamel, Barenaked Ladies', 'Series 1, Show 97'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 80 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 3
            Final Answer: {'Mississippi Rising', 'Through the Wormhole', 'The Promised Land'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 81 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_producer.tv_episodes_produced', 'tv.tv_producer_episode_credit.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_producer.tv_episodes_produced ?o1 . ?o1 fb:tv.tv_producer_episode_credit.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_producer.tv_episodes_produced ?o1 . ?o1 fb:tv.tv_producer_episode_credit.episode ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 19
            Final Answer: {'The 16th Man', 'Can We Travel Faster than Light?', 'Beyond the Darkness', 'What Do Aliens Look Like?', 'Are We Alone?', 'Can We Live Forever?', 'Will We Survive First Contact?', 'Does Time Really Exist?', 'Is Time Travel Possible?', 'What Happened Before the Beginning?', 'Are There More than Three Dimensions?', 'The Riddle of Black Holes', 'How Did We Get Here?', 'Is There a Sixth Sense?', 'What Are We Really Made Of?', 'Is There Life After Death?', 'Is There a Creator?', 'Is There an Edge to the Universe?', 'How Does the Universe Work?'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 82 / 85: {
          [('Main', '==', 'm.055c8', ['music.artist.track_contributions', 'music.track_contribution.track'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 2
            Final Answer: {'Prologue', 'The Reunion'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 83 / 85: {
          [('Main', '==', 'm.055c8', ['theater.theater_actor.theater_roles', 'theater.theater_role.play'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:theater.theater_actor.theater_roles ?o1 . ?o1 fb:theater.theater_role.play ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:theater.theater_actor.theater_roles ?o1 . ?o1 fb:theater.theater_role.play ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'The Mighty Gents'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 84 / 85: {
          [('Main', '==', 'm.055c8', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Through the Wormhole'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        79 / 85 coarse schemas kept with ans_size > 0.
      } [1.020s]
      Coarse level ended, resulting in 79 schemas.
    } [1.116s]
    Type level searching (total types = 10): {
      Current: 0 / 79
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'type.float'}]
[{'music.recording'}]
[{'film.film'}]
[{'people.person'}]
[{'type.float'}]
[{'film.film'}]
[{'film.film'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'location.mailing_address'}, {'location.location'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'aviation.aircraft_ownership_count'}, {'type.int'}]
[{'people.marriage'}, {'people.person'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_program_guest'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'tv.tv_producer_episode_credit'}, {'tv.tv_producer_type'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'location.mailing_address'}, {'location.administrative_division'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'aviation.aircraft_ownership_count'}, {'aviation.aircraft_owner'}]
[{'people.marriage'}, {'type.datetime'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'tv.tv_producer_episode_credit'}, {'tv.tv_producer'}]
[{'music.track_contribution'}, {'music.artist'}]
[{'music.track_contribution'}, {'music.performance_role'}]
[{'theater.theater_role'}, {'theater.theater_actor'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'location.mailing_address'}, {'location.postal_code'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'people.place_lived'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
[{'tv.regular_tv_appearance'}, {'tv.special_tv_performance_type'}]
[{'aviation.aircraft_ownership_count'}, {'aviation.aircraft_model'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.non_character_role'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_program'}]
[{'tv.tv_producer_episode_credit'}, {'tv.tv_series_episode'}]
[{'music.track_contribution'}, {'music.recording'}]
[{'theater.theater_role'}, {'theater.theater_production'}]
[{'tv.tv_producer_term'}, {'tv.tv_program'}]
      10 typed schemas retrieved from 79 coarse schemas.
      Calculating F1 for 10 typed schemas: {
        Current: 0 / 10
        Checking schema 0 / 10: {
          [('Main', '==', 'm.055c8', ['people.person.place_of_birth']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Memphis'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.014s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.014s]
        Checking schema 1 / 10: {
          [('Main', '==', 'm.055c8', ['people.person.place_of_birth']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 2 / 10: {
          [('Main', '==', 'm.055c8', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.055c8 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 3 / 10: {
          [('Main', '==', 'm.055c8', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 4 / 10: {
          [('Main', '==', 'm.055c8', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 5 / 10: {
          [('Main', '==', 'm.055c8', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 6 / 10: {
          [('Main', '==', 'm.055c8', ['organization.organization.headquarters', 'location.mailing_address.state_province_region']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.us_state', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 1
            Final Answer: {'Mississippi'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 7 / 10: {
          [('Main', '==', 'm.055c8', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 4
            Final Answer: {'New York City', 'Gary', 'Memphis', 'Los Angeles'}
            Answers = 4, P = 0.250000, R = 1.000000, F1 = 0.400000
          } [0.010s]
          Answers = 4, P = 0.250000, R = 1.000000, F1 = 0.400000
        } [0.010s]
        Checking schema 8 / 10: {
          [('Main', '==', 'm.055c8', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 9 / 10: {
          [('Main', '==', 'm.055c8', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:50] Q_Schema Request: {
            WebQ_694|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.055c8 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.055c8'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        3 / 10 typed schemas kept with ans_size > 0.
      } [0.097s]
      Typed level ended, resulting in 82 schemas.
    } [0.102s]
    Time level searching (total times = 0): {
      Current: 0 / 82
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'music.artist.active_start', 'music.artist.active_end'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'theater.theater_role.from', 'theater.theater_role.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [set(), {'aviation.aircraft_model.retired', 'aviation.aircraft_model.maiden_flight', 'aviation.aircraft_model.introduced'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), {'music.recording.date'}]
self.var_time_preds: [{'theater.theater_role.from', 'theater.theater_role.to'}, {'theater.theater_production.date_opened', 'theater.theater_production.date_closed'}]
self.var_time_preds: [{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
      0 timed schemas retrieved from 82 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 82 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 82
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'music.recording.date'}]
[{'film.film.initial_release_date'}]
[{'people.person.date_of_birth'}]
[set()]
[{'film.film.initial_release_date'}]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[{'organization.organization.date_founded'}]
[set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[set(), set()]
[{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[set(), set()]
[set(), {'music.artist.active_start', 'music.artist.active_end'}]
[set(), set()]
[{'theater.theater_role.from', 'theater.theater_role.to'}, set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[set(), {'aviation.aircraft_model.retired', 'aviation.aircraft_model.maiden_flight', 'aviation.aircraft_model.introduced'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set(), {'tv.tv_series_episode.air_date'}]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), {'music.recording.date'}]
[{'theater.theater_role.from', 'theater.theater_role.to'}, {'theater.theater_production.date_opened', 'theater.theater_production.date_closed'}]
[{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[set()]
[set(), set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
      0 ordinal schemas retrieved from 82 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 82 schemas.
    } [0.002s]
    [2020-12-03 14:18:50] buffer saved.
    82 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0694_schema].
  } [12.693s]
  Entering Q 695 / 5810 [b'where did bob barker grow up?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [2, 4) (bob barker) == m.01ydhd (Bob_Barker) {'score': 21386.517947, 'source': 0.0}
      #01 Entity: [2, 4) (bob barker) == m.09v1hn_ (MY_Bob_Barker) {'score': 4.073466, 'source': 0.0}
      #02 Type: [0, 2) (where did) == media_common.lost_work (lost work) {'sim': 0.737278}
      #03 Type: [0, 2) (where did) == people.place_lived (place lived) {'sim': 0.703608}
      #04 Type: [0, 1) (where) == location.place_with_neighborhoods (place with neighborhoods) {'sim': 0.687732}
      #05 Type: [0, 1) (where) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.659286}
      #06 Type: [0, 2) (where did) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.650589}
      #07 Type: [0, 1) (where) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.649255}
      #08 Type: [0, 2) (where did) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.641702}
      #09 Type: [0, 2) (where did) == media_common.finished_work (finished work) {'sim': 0.640596}
      #10 Type: [0, 1) (where) == military.military_unit_place_of_origin (military unit place of origin) {'sim': 0.635708}
      #11 Type: [5, 6) (up) == time.day_of_week (day of week) {'sim': 0.633065}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:19:02) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01ydhd ?p1 ?o1 . }
        [2020-12-03 14:19:02] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01ydhd ?p1 ?o1 . }
          Query return lines = 34
        } [0.004s]
        Filt_Query_Ret = 11 / 34 ( 0.004s)
      } [0.004s]
      [Len-1||F2/2] (2020-12-03 14:19:02) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.09v1hn_ ?p1 ?o1 . }
        [2020-12-03 14:19:02] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.09v1hn_ ?p1 ?o1 . }
          Query return lines = 8
        } [0.009s]
        Filt_Query_Ret = 0 / 8 ( 0.009s)
      } [0.009s]
      [Len-2||F1/2] (2020-12-03 14:19:02) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ydhd ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:02] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01ydhd ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 483
        } [0.070s]
        Filt_Query_Ret = 47 / 483 ( 0.072s)
      } [0.072s]
      [Len-2||F2/2] (2020-12-03 14:19:02) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09v1hn_ ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:02] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09v1hn_ ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 55
        } [0.015s]
        Filt_Query_Ret = 2 / 55 ( 0.015s)
      } [0.015s]
      60 coarse schemas retrieved from scratch.
      Calculating F1 for 60 coarse schemas: {
        Current: 0 / 60
        Checking schema 0 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01ydhd fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 WHERE { fb:m.01ydhd fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'1923'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 1 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 2 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 2
            Final Answer: {'Sioux', 'White American'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 3 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 2
            Final Answer: {'Byron John Barker', 'Matilda Kent Tarleton'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 4 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01ydhd fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 WHERE { fb:m.01ydhd fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'1.85'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 5 / 60: {
          [('Main', '==', 'm.01ydhd', ['base.eating.practicer_of_diet.diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:base.eating.practicer_of_diet.diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:base.eating.practicer_of_diet.diet ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Vegetarianism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 6 / 60: {
          [('Main', '==', 'm.01ydhd', ['influence.influence_node.influenced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Richard Karn'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 7 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 5
            Final Answer: {'TV Host', 'Television Producer', 'Actor', 'Game Show Host', 'Presenter'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 8 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 9 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.languages'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.languages ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.languages ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 10 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Darrington'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 11 / 60: {
          [('Main', '==', 'm.01ydhd', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'7e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 12 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Radio Talk Show Host'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 13 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'1941'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 14 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 15 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 3
            Final Answer: {'Daytime Emmy Award for Outstanding Game/Audience Participation Show', 'MTV Movie Award for Best Fight', 'Daytime Emmy Award for Outstanding Game Show Host'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 16 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 2
            Final Answer: {'Kent Valandra'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 17 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'The Price Is Right'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 18 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 2
            Final Answer: {'Dorothy Jo Gideon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 19 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.hall_of_fame_inductee.hall_of_fame_inductions', 'award.hall_of_fame_induction.inductee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.hall_of_fame_inductee.hall_of_fame_inductions ?o1 . ?o1 fb:award.hall_of_fame_induction.inductee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.hall_of_fame_inductee.hall_of_fame_inductions ?o1 . ?o1 fb:award.hall_of_fame_induction.inductee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 20 / 60: {
          [('Main', '==', 'm.01ydhd', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Archive Footage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 21 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 15
            Final Answer: {'1996', '2000', '2007', '2002', '1995', '1982', '2004', '1984', '1988', '1990', '1991', '1987', '1997', '1994', '1992'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 22 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 2
            Final Answer: {'The Price Is Right', 'Happy Gilmore'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 23 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 24 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Game Show Host'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 25 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 26 / 60: {
          [('Main', '==', 'm.01ydhd', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 27 / 60: {
          [('Main', '==', 'm.01ydhd', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'celebritynetworth.com'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 28 / 60: {
          [('Main', '==', 'm.01ydhd', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Happy Gilmore'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 29 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 3
            Final Answer: {'Missouri', 'South Dakota', 'Washington'}
            Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
          } [0.010s]
          Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
        } [0.010s]
        Checking schema 30 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 2
            Final Answer: {'The Price Is Right', 'Happy Gilmore'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 31 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 25
            Final Answer: {'1999', '2004', '1990', '1991', '1982', '1993', '1996', '2000', '2001', '2005', '1994', '1979', '2007', '1986', '2003', '1984', '1987', '1988', '1998', '2002', '1989', '1995', '1985', '1997', '1992'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 32 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 33 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'1945'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 34 / 60: {
          [('Main', '==', 'm.01ydhd', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Flight of the Navigator'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 35 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 6
            Final Answer: {'Stan Blits', 'Phillip W. Rossi', 'Adam Sandler', 'Bart Eskander', 'Roger Dobkowitz'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 36 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 15
            Final Answer: {'34th Daytime Emmy Awards', '14th Daytime Emmy Awards', '9th Daytime Emmy Awards', '18th Daytime Emmy Awards', '22nd Daytime Emmy Awards', '19th Daytime Emmy Awards', '1996 MTV Movie Awards', '23rd Daytime Emmy Awards', '21st Daytime Emmy Awards', '17th Daytime Emmy Awards', '11th Daytime Emmy Awards', '24th Daytime Emmy Awards', '29th Daytime Emmy Awards', '31st Daytime Emmy Awards', '27th Daytime Emmy Awards'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 37 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 38 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 39 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.producer_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.producer_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Executive Producer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 40 / 60: {
          [('Main', '==', 'm.01ydhd', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 41 / 60: {
          [('Main', '==', 'm.01ydhd', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 42 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 43 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 2
            Final Answer: {'KSGF-FM', 'KNX'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 44 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 3
            Final Answer: {'Central High School', 'Drury University'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 45 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 46 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 7
            Final Answer: {'Stan Blits', 'Phillip W. Rossi', 'Adam Sandler', 'Bart Eskander', 'Roger Dobkowitz'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 47 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.award_nominee.award_nominations', 'award.award_nomination.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 48 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'1981'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 49 / 60: {
          [('Main', '==', 'm.01ydhd', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 50 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.hall_of_fame_inductee.hall_of_fame_inductions', 'award.hall_of_fame_induction.hall_of_fame'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.hall_of_fame_inductee.hall_of_fame_inductions ?o1 . ?o1 fb:award.hall_of_fame_induction.hall_of_fame ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.hall_of_fame_inductee.hall_of_fame_inductions ?o1 . ?o1 fb:award.hall_of_fame_induction.hall_of_fame ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Television Hall of Fame'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 51 / 60: {
          [('Main', '==', 'm.01ydhd', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 52 / 60: {
          [('Main', '==', 'm.01ydhd', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 3
            Final Answer: {'Daytime Emmy Award for Outstanding Game/Audience Participation Show', 'MTV Movie Award for Best Fight', 'Daytime Emmy Award for Outstanding Game Show Host'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 53 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 55
            Final Answer: {'Emma Thompson, Eamonn Walker, Joseph Arthur', 'The Fat Guy Strangler', 'The 16th Annual Miss USA Pageant', 'The 30th Annual Miss USA Pageant', 'Screwed the Pooch', 'The 29th Annual Daytime Emmy Awards', 'The Lesser of Two Evils', 'May 18, 2001', 'April 2, 2002', 'February 25, 1966', 'The 22nd Annual Miss USA Pageant', 'Show #2755', 'The 3rd Annual Daytime Emmy Awards', 'The 19th Annual Miss USA Pageant', 'The 31st Annual Miss USA Pageant', 'Bob Barker, Jean Smart', 'The 18th Annual Daytime Emmy Awards', 'Bob Barker', 'The 36th Annual Miss USA Pageant', 'Zach Braff, Bob Barker', 'Something About Thanksgiving', 'The 26th Annual Miss USA Pageant', 'Showdown', 'The 25th Annual Miss USA Pageant', 'The 27th Annual Miss USA Pageant', 'The 18th Annual Miss USA Pageant', 'All Access Pass with LL Cool J', 'The Ticket', 'The 35th Annual Miss USA Pageant', 'The 20th Annual Miss USA Pageant', 'Shanghai Express', 'The 29th Annual Miss USA Pageant', 'The 24th Annual Miss USA Pageant', 'Adrien Brody, Bob Barker, Laura Bush', 'Talk Aint Cheap', 'Bob Barker: Master of Ceremonies', 'The 32nd Annual Miss USA Pageant', 'When You Pish Upon a Star', 'The 21st Annual Miss USA Pageant', 'Bob Barker, Arden Myrin', 'The 23rd Annual Miss USA Pageant', 'Something About a Silver Anniversary', 'The 12th Annual Daytime Emmy Awards', 'The 9th Annual Daytime Emmy Awards', 'Ep. #3759', 'Bob Barker, Elizabeth Banks, Modest Mouse', 'Denver McKee', 'Tales of a Third Grade Nothing', 'The 34th Annual Miss USA Pageant', 'The 33rd Annual Miss USA Pageant', 'The 17th Annual Miss USA Pageant', 'Jillian Reynolds; Bob Barker; snoring; Dr. Ian Kerner; Dr. Heidi Raykeil', 'The 6th Annual Daytime Emmy Awards', 'Seth Green, Bob Barker, Henry Cho', 'The 28th Annual Miss USA Pageant'}
            Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 54 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.from ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 3
            Final Answer: {'1972', '1967', '1956'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 55 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 4
            Final Answer: {'Truth or Consequences', "That's My Line", 'The Price Is Right', 'The Family Game'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 56 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.to ?o2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 WHERE { fb:m.01ydhd fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 2
            Final Answer: {'1975', '1967'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 57 / 60: {
          [('Main', '==', 'm.01ydhd', ['tv.tv_producer.programs_produced', 'tv.tv_producer_term.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:02] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:tv.tv_producer.programs_produced ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 1
            Final Answer: {'The Price Is Right'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 58 / 60: {
          [('Main', '==', 'm.09v1hn_', ['boats.ship.owners', 'boats.ship_ownership.ship'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09v1hn_ fb:boats.ship.owners ?o1 . ?o1 fb:boats.ship_ownership.ship ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09v1hn_ fb:boats.ship.owners ?o1 . ?o1 fb:boats.ship_ownership.ship ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.09v1hn_'}
            Query return lines = 1
            Final Answer: {'MY Bob Barker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 59 / 60: {
          [('Main', '==', 'm.09v1hn_', ['boats.ship.owners', 'boats.ship_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09v1hn_ fb:boats.ship.owners ?o1 . ?o1 fb:boats.ship_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.09v1hn_ fb:boats.ship.owners ?o1 . ?o1 fb:boats.ship_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.09v1hn_'}
            Query return lines = 1
            Final Answer: {'Sea Shepherd Conservation Society'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        59 / 60 coarse schemas kept with ans_size > 0.
      } [0.739s]
      Coarse level ended, resulting in 59 schemas.
    } [0.841s]
    Type level searching (total types = 10): {
      Current: 0 / 59
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'type.float'}]
[{'base.eating.diets'}]
[{'influence.influence_node'}]
[{'people.profession'}]
[{'people.gender'}]
[{'language.human_language'}]
[{'location.location'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'people.marriage'}, {'people.person'}]
[{'award.hall_of_fame_induction'}, {'award.hall_of_fame_inductee'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'tv.tv_guest_role'}, {'tv.special_tv_performance_type'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer_type'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'award.hall_of_fame_induction'}, {'award.hall_of_fame'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'tv.tv_regular_personal_appearance'}, {'type.datetime'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_program'}]
[{'tv.tv_regular_personal_appearance'}, {'type.datetime'}]
[{'tv.tv_producer_term'}, {'tv.tv_program'}]
[{'boats.ship_ownership'}, {'boats.ship'}]
[{'boats.ship_ownership'}, {'boats.ship_owner'}]
      4 typed schemas retrieved from 59 coarse schemas.
      Calculating F1 for 4 typed schemas: {
        Current: 0 / 4
        Checking schema 0 / 4: {
          [('Main', '==', 'm.01ydhd', ['people.person.place_of_birth']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 4: {
          [('Main', '==', 'm.01ydhd', ['people.person.place_of_birth']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01ydhd fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 2 / 4: {
          [('Main', '==', 'm.01ydhd', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 3 / 4: {
          [('Main', '==', 'm.01ydhd', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:03] Q_Schema Request: {
            WebQ_695|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01ydhd fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01ydhd'}
            Query return lines = 3
            Final Answer: {'Missouri', 'South Dakota', 'Washington'}
            Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
          } [0.009s]
          Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
        } [0.009s]
        1 / 4 typed schemas kept with ans_size > 0.
      } [0.042s]
      Typed level ended, resulting in 60 schemas.
    } [0.046s]
    Time level searching (total times = 0): {
      Current: 0 / 60
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.hall_of_fame_induction.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'award.hall_of_fame_induction.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [{'boats.ship_ownership.to_date', 'boats.ship_ownership.from_date'}, {'boats.ship.launched', 'boats.ship.keel_laid'}]
self.var_time_preds: [{'boats.ship_ownership.to_date', 'boats.ship_ownership.from_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
      0 timed schemas retrieved from 60 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 60 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 60
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set(), {'people.person.date_of_birth'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'award.hall_of_fame_induction.date'}, set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'award.hall_of_fame_induction.date'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set(), {'tv.tv_series_episode.air_date'}]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[{'boats.ship_ownership.to_date', 'boats.ship_ownership.from_date'}, {'boats.ship.launched', 'boats.ship.keel_laid'}]
[{'boats.ship_ownership.to_date', 'boats.ship_ownership.from_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
      0 ordinal schemas retrieved from 60 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 60 schemas.
    } [0.001s]
    [2020-12-03 14:19:03] buffer saved.
    60 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0695_schema].
  } [5.999s]
  Entering Q 696 / 5810 [b'what are king charles spaniels?']: {
    Show 6 E + 10 T + 0 Tm + 0 Ord = 16 linkings: {
      #00 Entity: [2, 4) (king charles) == m.0231r (Charles_I_of_England) {'score': 470.70073, 'source': 0.0}
      #01 Entity: [2, 4) (king charles) == m.0clvb (Charles_II_of_England) {'score': 6.901176, 'source': 0.0}
      #02 Entity: [2, 4) (king charles) == m.0hgm4kl (King_Charles_(musician)) {'score': 10.000103, 'source': 0.0}
      #03 Entity: [2, 4) (king charles) == m.0j9gg (Charles_V%2c_Holy_Roman_Emperor) {'score': 5.524027, 'source': 0.0}
      #04 Entity: [2, 4) (king charles) == m.0xnc3 (Charles%2c_Prince_of_Wales) {'score': 1.882952, 'source': 1.0}
      #05 Entity: [4, 5) (spaniels) == m.01p5b6b (the spaniels) {'score': 2342.100371, 'source': 2.0}
      #06 Type: [0, 2) (what are) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.703443}
      #07 Type: [0, 2) (what are) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.676653}
      #08 Type: [0, 2) (what are) == location.us_state (us state) {'sim': 0.671542}
      #09 Type: [0, 2) (what are) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.663943}
      #10 Type: [2, 3) (king) == royalty.kingdom (kingdom) {'sim': 0.660405}
      #11 Type: [0, 2) (what are) == chemistry.phase_of_matter (phase of matter) {'sim': 0.652712}
      #12 Type: [0, 1) (what) == media_common.lost_work (lost work) {'sim': 0.652623}
      #13 Type: [0, 2) (what are) == location.us_cbsa (us core based statistical area) {'sim': 0.65221}
      #14 Type: [0, 2) (what are) == event.presented_work (presented work) {'sim': 0.650616}
      #15 Type: [0, 2) (what are) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.649036}
    } [0.000s]
    16 link data save to file.
    Coarse level searching (total entities = 6): {
      [Len-1||F1/6] (2020-12-03 14:19:08) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01p5b6b ?p1 ?o1 . }
        [2020-12-03 14:19:08] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01p5b6b ?p1 ?o1 . }
          Query return lines = 13
        } [0.005s]
        Filt_Query_Ret = 3 / 13 ( 0.005s)
        [Len-1||F1/6||2/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 fb:m.0231r . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 fb:m.0231r . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
        [Len-1||F1/6||3/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 fb:m.0clvb . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 fb:m.0clvb . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-1||F1/6||4/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 fb:m.0hgm4kl . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 fb:m.0hgm4kl . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-1||F1/6||5/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 fb:m.0j9gg . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 fb:m.0j9gg . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-1||F1/6||6/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 fb:m.0xnc3 . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 fb:m.0xnc3 . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
      } [0.078s]
      [Len-1||F2/6] (2020-12-03 14:19:08) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0231r ?p1 ?o1 . }
        [2020-12-03 14:19:08] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0231r ?p1 ?o1 . }
          Query return lines = 36
        } [0.013s]
        Filt_Query_Ret = 24 / 36 ( 0.013s)
        [Len-1||F2/6||1/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0231r ?p1 ?o1 . ?o1 ?p2 fb:m.01p5b6b . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0231r ?p1 ?o1 . ?o1 ?p2 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.036s]
          Filt_Query_Ret = 0 / 0 ( 0.036s)
        } [0.036s]
      } [0.050s]
      [Len-1||F3/6] (2020-12-03 14:19:08) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0clvb ?p1 ?o1 . }
        [2020-12-03 14:19:08] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0clvb ?p1 ?o1 . }
          Query return lines = 37
        } [0.026s]
        Filt_Query_Ret = 26 / 37 ( 0.026s)
        [Len-1||F3/6||1/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0clvb ?p1 ?o1 . ?o1 ?p2 fb:m.01p5b6b . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0clvb ?p1 ?o1 . ?o1 ?p2 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
      } [0.034s]
      [Len-1||F4/6] (2020-12-03 14:19:08) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0hgm4kl ?p1 ?o1 . }
        [2020-12-03 14:19:08] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0hgm4kl ?p1 ?o1 . }
          Query return lines = 12
        } [0.010s]
        Filt_Query_Ret = 7 / 12 ( 0.010s)
        [Len-1||F4/6||1/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0hgm4kl ?p1 ?o1 . ?o1 ?p2 fb:m.01p5b6b . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0hgm4kl ?p1 ?o1 . ?o1 ?p2 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
      } [0.026s]
      [Len-1||F5/6] (2020-12-03 14:19:08) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0j9gg ?p1 ?o1 . }
        [2020-12-03 14:19:08] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0j9gg ?p1 ?o1 . }
          Query return lines = 32
        } [0.020s]
        Filt_Query_Ret = 20 / 32 ( 0.020s)
        [Len-1||F5/6||1/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j9gg ?p1 ?o1 . ?o1 ?p2 fb:m.01p5b6b . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j9gg ?p1 ?o1 . ?o1 ?p2 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.020s]
          Filt_Query_Ret = 0 / 0 ( 0.020s)
        } [0.020s]
      } [0.040s]
      [Len-1||F6/6] (2020-12-03 14:19:08) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0xnc3 ?p1 ?o1 . }
        [2020-12-03 14:19:08] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0xnc3 ?p1 ?o1 . }
          Query return lines = 42
        } [0.011s]
        Filt_Query_Ret = 16 / 42 ( 0.011s)
        [Len-1||F6/6||1/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0xnc3 ?p1 ?o1 . ?o1 ?p2 fb:m.01p5b6b . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0xnc3 ?p1 ?o1 . ?o1 ?p2 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
      } [0.022s]
      [Len-2||F1/6] (2020-12-03 14:19:08) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:08] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 90
        } [0.059s]
        Filt_Query_Ret = 10 / 90 ( 0.060s)
        [Len-2||F1/6||2/6-1] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0231r . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0231r . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.016s]
        [Len-2||F1/6||2/6-2] (2020-12-03 14:19:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0231r . }
          [2020-12-03 14:19:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0231r . }
            Query return lines = 0
          } [1.345s]
          Filt_Query_Ret = 0 / 0 ( 1.345s)
        } [1.345s]
        [Len-2||F1/6||3/6-1] (2020-12-03 14:19:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0clvb . }
          [2020-12-03 14:19:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0clvb . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
        [Len-2||F1/6||3/6-2] (2020-12-03 14:19:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0clvb . }
          [2020-12-03 14:19:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0clvb . }
            Query return lines = 0
          } [1.311s]
          Filt_Query_Ret = 0 / 0 ( 1.311s)
        } [1.311s]
        [Len-2||F1/6||4/6-1] (2020-12-03 14:19:11) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0hgm4kl . }
          [2020-12-03 14:19:11] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0hgm4kl . }
            Query return lines = 0
          } [0.049s]
          Filt_Query_Ret = 0 / 0 ( 0.049s)
        } [0.049s]
        [Len-2||F1/6||4/6-2] (2020-12-03 14:19:11) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0hgm4kl . }
          [2020-12-03 14:19:11] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0hgm4kl . }
            Query return lines = 0
          } [0.756s]
          Filt_Query_Ret = 0 / 0 ( 0.756s)
        } [0.756s]
        [Len-2||F1/6||5/6-1] (2020-12-03 14:19:11) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0j9gg . }
          [2020-12-03 14:19:11] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0j9gg . }
            Query return lines = 0
          } [0.040s]
          Filt_Query_Ret = 0 / 0 ( 0.040s)
        } [0.040s]
        [Len-2||F1/6||5/6-2] (2020-12-03 14:19:11) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0j9gg . }
          [2020-12-03 14:19:11] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0j9gg . }
            Query return lines = 0
          } [0.162s]
          Filt_Query_Ret = 0 / 0 ( 0.162s)
        } [0.162s]
        [Len-2||F1/6||6/6-1] (2020-12-03 14:19:12) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0xnc3 . }
          [2020-12-03 14:19:12] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0xnc3 . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-2||F1/6||6/6-2] (2020-12-03 14:19:12) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0xnc3 . }
          [2020-12-03 14:19:12] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01p5b6b ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0xnc3 . }
            Query return lines = 0
          } [1.494s]
          Filt_Query_Ret = 0 / 0 ( 1.494s)
        } [1.494s]
      } [5.258s]
      [Len-2||F2/6] (2020-12-03 14:19:13) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0231r ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:13] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0231r ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 454
        } [0.033s]
        Filt_Query_Ret = 14 / 454 ( 0.035s)
        [Len-2||F2/6||1/6-1] (2020-12-03 14:19:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0231r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01p5b6b . }
          [2020-12-03 14:19:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0231r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-2||F2/6||1/6-2] (2020-12-03 14:19:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0231r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01p5b6b . }
          [2020-12-03 14:19:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0231r ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.262s]
          Filt_Query_Ret = 0 / 0 ( 0.262s)
        } [0.262s]
      } [0.314s]
      [Len-2||F3/6] (2020-12-03 14:19:13) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0clvb ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:13] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0clvb ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 504
        } [0.061s]
        Filt_Query_Ret = 13 / 504 ( 0.063s)
        [Len-2||F3/6||1/6-1] (2020-12-03 14:19:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0clvb ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01p5b6b . }
          [2020-12-03 14:19:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0clvb ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-2||F3/6||1/6-2] (2020-12-03 14:19:13) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0clvb ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01p5b6b . }
          [2020-12-03 14:19:13] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0clvb ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01p5b6b . }
            Query return lines = 0
          } [1.843s]
          Filt_Query_Ret = 0 / 0 ( 1.843s)
        } [1.843s]
      } [1.926s]
      [Len-2||F4/6] (2020-12-03 14:19:15) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0hgm4kl ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:15] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0hgm4kl ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 189
        } [0.028s]
        Filt_Query_Ret = 0 / 189 ( 0.028s)
      } [0.028s]
      [Len-2||F5/6] (2020-12-03 14:19:15) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j9gg ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:15] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j9gg ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 439
        } [0.027s]
        Filt_Query_Ret = 15 / 439 ( 0.028s)
        [Len-2||F5/6||1/6-1] (2020-12-03 14:19:15) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j9gg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01p5b6b . }
          [2020-12-03 14:19:15] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j9gg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-2||F5/6||1/6-2] (2020-12-03 14:19:15) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j9gg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01p5b6b . }
          [2020-12-03 14:19:15] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j9gg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01p5b6b . }
            Query return lines = 0
          } [1.063s]
          Filt_Query_Ret = 0 / 0 ( 1.063s)
        } [1.063s]
      } [1.107s]
      [Len-2||F6/6] (2020-12-03 14:19:16) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0xnc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:16] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0xnc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 593
        } [0.035s]
        Filt_Query_Ret = 49 / 593 ( 0.038s)
        [Len-2||F6/6||1/6-1] (2020-12-03 14:19:17) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0xnc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01p5b6b . }
          [2020-12-03 14:19:17] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0xnc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
        [Len-2||F6/6||1/6-2] (2020-12-03 14:19:17) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0xnc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01p5b6b . }
          [2020-12-03 14:19:17] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0xnc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01p5b6b . }
            Query return lines = 0
          } [0.076s]
          Filt_Query_Ret = 0 / 0 ( 0.076s)
        } [0.076s]
      } [0.127s]
      197 coarse schemas retrieved from scratch.
      Calculating F1 for 197 coarse schemas: {
        Current: 0 / 197
        Checking schema 0 / 197: {
          [('Main', '==', 'm.01p5b6b', ['broadcast.artist.content'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01p5b6b fb:broadcast.artist.content ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01p5b6b fb:broadcast.artist.content ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 2
            Final Answer: {'radioIO Classic RNB', 'radioIO Roots of Rock'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 1 / 197: {
          [('Main', '==', 'm.01p5b6b', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01p5b6b fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01p5b6b fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 4
            Final Answer: {'Very Best of the Spaniels', 'The Spaniels Golden Hits', 'Heart & Soul Volume Two', 'Goodnight Sweetheart, Goodnight'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 197: {
          [('Main', '==', 'm.01p5b6b', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01p5b6b fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01p5b6b fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 152
            Final Answer: {'False Love', 'Heart & Soul', 'Bounce', 'Goodnight, Sweetheart', "You Don't Move Me", 'The Bells Ring Out', 'Peace of Mind', "Baby It's You", 'Great Googley Moo', "You're Gonna Cry", 'John Brown', 'The Possee', "I'm Gonna Thank Him", 'I.o.u.', "Please Don't Tease", 'Doo Wah', 'Hey Sister Lizzie', 'Great Googly Moo', 'Play It Cool', 'Lucinda', 'Since I Fell for You', 'Trees', 'The Posse', 'Baby Sweets', 'Danny Boy', 'Lovey, Dovey Baby Be Mine', 'I Like It Like That', 'Goodnight, Sweetheart, Goodnight', 'Tina', 'I Lost You', "I'll Be Waiting", 'These Three Words', 'Lovely Way to Spend an Evening (#2)', 'Fairy Tales', 'I Know', 'Goodnight Sweetheart', 'You Gave Me Peace of Mind', 'Lovely Way to Spend an Evening', 'Here Is Why I Love You', 'Good Night, Sweatheart, Good Night', 'Goodnite, Sweetheart, Goodnite', 'I Know, I Know', "People Will Say We're in Love", 'Turn Out the Lights', 'Peace of Mind (#2)', 'The Bells Ring Out (#2)', 'Lovey Dovey Baby', 'Do-Wah', 'Little Joe', 'Zing, Went the Strings of My Heart', 'Three Little Words (#2)', "Will You Love Me When I'm Old", 'Goodnight, Sweetheart, Goodnight (#3)', 'Three Little Words', 'Jessie Mae', 'Goodnite Sweetheart Goodnite', 'I Need Your Kisses', 'Goodnite Sweetheart, Goodnite', 'House Cleaning', 'So Deep Within', 'Dear Heart', 'Goodnight Sweetheart, Goodnight', 'Crazee Baby', "Baby It's You (#2)", "A Rockin' Good Way", 'Peace of Mind (a cappella)', "Rock n' Roll With Me", "Goodnight, Well It's Time to Go", 'Goodnight, Sweetheart, Goodnight (#2)', 'Do You Really', 'Automobiles', 'A Lovely Way to Spend an Evening', "(Get Away Child) You Don't Move Me", 'You Painted Pictures', 'Goodnite, Sweetheart, Goodnight', 'Baby, I Love You So', 'Goodnight Sweatheart, Goodnight', "Baby, It's You", 'A Rockin Good Way', '(You Give Me) Peace of Mind', 'Bus Fare Home', 'Stormy Weather', 'Jealous Heart', 'Painted Picture', 'Someone (Loves You)', 'Jesse Mae', "Let's Make Up", "Everyone's Laughing", 'A Stranger In Love', 'Goodnight Sweetheart Goodnight', 'Truly', '100 Years From Today', 'Red Sails in the Sunset'}
            Answers = 93, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 93, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 3 / 197: {
          [('Main', '==', 'm.0231r', ['royalty.monarch.kingdom'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:royalty.monarch.kingdom ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:royalty.monarch.kingdom ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 4 / 197: {
          [('Main', '==', 'm.0231r', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0231r fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 WHERE { fb:m.0231r fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'1600'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 5 / 197: {
          [('Main', '==', 'm.0231r', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Kingdom of England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 6 / 197: {
          [('Main', '==', 'm.0231r', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 2
            Final Answer: {'James I of England', 'Anne of Denmark'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 7 / 197: {
          [('Main', '==', 'm.0231r', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 2
            Final Answer: {'Protestantism', 'Anglicanism'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 8 / 197: {
          [('Main', '==', 'm.0231r', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Palace of Whitehall'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 9 / 197: {
          [('Main', '==', 'm.0231r', ['people.deceased_person.place_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {"St George's Chapel, Windsor Castle"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 197: {
          [('Main', '==', 'm.0231r', ['base.kwebbase.kwtopic.assessment'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 11 / 197: {
          [('Main', '==', 'm.0231r', ['visual_art.artwork.art_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:visual_art.artwork.art_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:visual_art.artwork.art_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Charles I of England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 12 / 197: {
          [('Main', '==', 'm.0231r', ['royalty.monarch.royal_line'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:royalty.monarch.royal_line ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:royalty.monarch.royal_line ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'House of Stuart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 13 / 197: {
          [('Main', '==', 'm.0231r', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 7
            Final Answer: {'Charles II of England', 'Henry Stuart, Duke of Gloucester', 'Elizabeth Stuart', 'Anne of England', 'James II of England', 'Mary, Princess Royal and Princess of Orange', 'Princess Henrietta of England'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 14 / 197: {
          [('Main', '==', 'm.0231r', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 2
            Final Answer: {'Decapitation', 'Capital punishment'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 15 / 197: {
          [('Main', '==', 'm.0231r', ['base.kwebbase.kwtopic.category'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 16 / 197: {
          [('Main', '==', 'm.0231r', ['base.kwebbase.kwtopic.has_sentences'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 53
            Final Answer: {'Due to his stammer he often avoided speaking, which made him appear aloof and so he had few friends, mainly enjoying the company of George Villiers, who was later to become the Duke of Buckingham.', 'The Members of Parliament remaining in London sent Charles ""Nineteen Propositions"", including the right of Parliament to reform the Church, control the army and appoint all ministers of state.', "In the same year, an ex-officer of the army assassinated Charles' friend Buckingham.", 'Charles, found guilty of being a traitor, tyrant, murderer and public enemy, received the sentence of death by beheading on 27th  January and was executed on 30th January 1649.', 'In August 1642, the English Civil War began.', 'All of these expeditions failed due to lack of money for manpower, equipment and transport.', 'Charles I was high-minded and devout but he was unrealistic and uncompromising and his downfall weakened the position of the monarchy.', 'A close adviser/jailer was Harrington.', 'His grandson was William of Orange.', "The Royalist plan was to control London and Charles' nephew, Prince Rupert, took command of the army, fighting against Cromwell .", 'Charles ruled without Parliament until 1640,  and all laws were passed by Royal Proclamation.', "Charles' brother-in-law, Frederick, had been forced from his throne in Germany by the Hapsburgs, so an alliance with Spain would have put pressure on Germany.", 'He withdrew support forJonson.', 'The plan was to relieve the Huguenots in France and put Frederick back on the throne in Germany.', "At the battle of Marston Moor in July 1644, Prince Rupert was badly defeated by Cromwell's forces,  and the north of the country was lost.", "In November 1641, the Grand Remonstrance, a list of grievances against the King's rule and a proposal to establish Presbyterianism in place of the Church of England, went through Parliament with a majority of just eleven votes.", "He supported Ussher's high-church tendencies He was opposed by Milton.", 'Henrietta, aged only fifteen at the time of the wedding, was lively and determined but was a committed Catholic, and unpopular at Court.', 'Some of these were defended by the lawyer, Selden.', 'In 1636, Selden produced his ""Mare Clausum seu de Domanio Maris Libris duo"", which argued that the sea was under the dominion of Great Britain.', 'Royalist and Parliamentarians began preparing for Civil War.', 'The following year, Charles left London and the Queen sailed to Holland with the Crown Jewels, to raise money for arms.', 'Charles sent the Queen to France and in 1645, his son, later Charles II, also escaped to join his mother.', 'The artist Rubens visited England as an envoy from the king of Spain and Charles commissioned him to paint the ceiling of the banqueting hall in Whitehall, designed by Inigo Jones.', "In January 1629, Parliament attacked Charles' appointment of  William Laud as Bishop of London because he was High Church.", 'Had an audience with Graham, marquis of Montrose.', "Parliament curbed Charles' behavior by the Petition of Right of 1628.", 'Charles was lonely and, detesting his father James I,  spent his time studying hard.', 'In 1623, James I proposed that Charles marry the Infanta Donna Maria, sister of Philip IV of Spain.', 'One of his Crown servants was Archibald Napier.', 'Charles wanted to quash the 1609 claim by Dutch statesman, Grotius, that the sea was free to all.', 'A supporter was Monck.', 'He ignored the appeal for religious tolerance from John Durie.', 'But Charles refused to adopt the Catholic religion.', 'Laud introduced reforms and in 1637 imposed the Book of Common Prayer, which was rejected by the Scottish Presbyterians.', 'His doctor was Harvey.', 'The king replied courteously, without surrendering his powers.', 'The Puritan members in Parliament distrusted Catholic influence at court and violent scenes erupted when the King dissolved Parliament.', 'He also introduced fines for non- attendance at Church and arresting people who refused to lend him money.', 'In 1635, Selden, released from prison, was commissioned to find a legal justification for the earlier statement by James I, that England could claim dominion of the seas.', 'Charles called in his troops and the leaders of the disturbance, including Selden, were imprisoned.', "To raise money, Charles began selling titles such as 'baronet', created specially as a commodity to be sold.", "One of Rubens's apprentices, van Dyck, became the artist most commonly associated with Charles I. Charles, in need of money, enlisted the help of Gustavus Aldophus, the Swedish King and introduced Ship Money, a tax to help rebuild the navy.", 'Charles took refuge with the Royalist Scots  (after Oxford, where he had set up Court, became surrounded in 1646)  but in January 1647, they made peace with Parliament and handed Charles over.', 'His execution was formally opposed by Wallis.', 'When he was twelve, his elder brother Henry died, leaving him the heir to the throne.', "When he was four, Charles' father, then King James VI of Scotland, also became James I of England and the family moved to the English court.", "The King's trial for treason began on 20th January, before a tribunal of commissioners, but Charles refused to plead,  refusing to accept the legality of the court.", 'Being too weak for the journey, Charles was left behind and, as a result, became a shy and silent boy.', 'As monarch, Charles was Supreme Governor of the Church of England but the Puritans wanted the church to be independent of the Crown.', 'Charles declared war on Catholic Spain,  and a Protestant alliance of England, Denmark and Holland was formed to attack Spain.', 'In 1625, Charles succeeded to the throne,  and married Henrietta Maria, daughter of the late Henry IV of France.', 'On the advice of Thomas Wentworth, Earl of Strafford, Charles sent an army against the Scots in 1639, but, outmanoeuvred, he was forced to sign a truce.'}
            Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 17 / 197: {
          [('Main', '==', 'm.0231r', ['base.saints.saint.venerated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.saints.saint.venerated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.saints.saint.venerated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Anglican Communion'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 18 / 197: {
          [('Main', '==', 'm.0231r', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 19 / 197: {
          [('Main', '==', 'm.0231r', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Dunfermline Palace'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 20 / 197: {
          [('Main', '==', 'm.0231r', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0231r fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 WHERE { fb:m.0231r fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'1649'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 21 / 197: {
          [('Main', '==', 'm.0231r', ['people.deceased_person.date_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0231r fb:people.deceased_person.date_of_burial ?o1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 WHERE { fb:m.0231r fb:people.deceased_person.date_of_burial ?o1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'1649'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 22 / 197: {
          [('Main', '==', 'm.0231r', ['base.kwebbase.kwtopic.connections_from'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 16
            Final Answer: {'charles i of england doctor was william harvey', 'charles i of england grandson was william of orange', 'charles i of england withdrew support for ben jonson', 'charles i of england supported james, bishop ussher', 'charles i of england jailer was james harrington', 'charles i of england commissioned peter paul rubens', 'charles i of england execution opposed by john wallis', 'charles i of england opposed by john milton', 'charles i of england supported by george monck, 1st duke of albemarle', 'charles i of england opposed hugo grotius', 'charles i of england opposed by john selden', 'charles i of england appointed archbishop william laud', 'charles i of england ignored john durie', 'charles i of england commissioned inigo jones', 'charles i of england nephew was prince rupert of the rhine', 'charles i of england beheaded by oliver cromwell'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 23 / 197: {
          [('Main', '==', 'm.0231r', ['base.kwebbase.kwtopic.kwtype'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 24 / 197: {
          [('Main', '==', 'm.0231r', ['base.kwebbase.kwtopic.disciplines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 25 / 197: {
          [('Main', '==', 'm.0231r', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 3
            Final Answer: {'Charles I and His Wife Henrietta Maria with Their Eldest Children Charles and James', 'Charles I of England', 'Charles I with M. de St Antoine'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 26 / 197: {
          [('Main', '==', 'm.0231r', ['dataworld.gardening_hint.split_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Charles I of England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 27 / 197: {
          [('Main', '==', 'm.0clvb', ['royalty.monarch.kingdom'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:royalty.monarch.kingdom ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:royalty.monarch.kingdom ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 28 / 197: {
          [('Main', '==', 'm.0clvb', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0clvb fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 WHERE { fb:m.0clvb fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'1630'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 29 / 197: {
          [('Main', '==', 'm.0clvb', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Kingdom of England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 30 / 197: {
          [('Main', '==', 'm.0clvb', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 2
            Final Answer: {'Henrietta Maria of France', 'Charles I of England'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 31 / 197: {
          [('Main', '==', 'm.0clvb', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 2
            Final Answer: {'Anglicanism', 'Catholicism'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 32 / 197: {
          [('Main', '==', 'm.0clvb', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Palace of Whitehall'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 33 / 197: {
          [('Main', '==', 'm.0clvb', ['people.deceased_person.place_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Henry VII Chapel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 34 / 197: {
          [('Main', '==', 'm.0clvb', ['base.kwebbase.kwtopic.assessment'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 35 / 197: {
          [('Main', '==', 'm.0clvb', ['base.kwebbase.kwtopic.connections_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.connections_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.connections_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'edmond halley patron was charles ii of england'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 36 / 197: {
          [('Main', '==', 'm.0clvb', ['base.kwebbase.kwconnection.other'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwconnection.other ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwconnection.other ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'James Graham, 1st Marquess of Montrose'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 37 / 197: {
          [('Main', '==', 'm.0clvb', ['royalty.monarch.royal_line'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:royalty.monarch.royal_line ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:royalty.monarch.royal_line ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'House of Stuart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 38 / 197: {
          [('Main', '==', 'm.0clvb', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Nell Gwynn'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 39 / 197: {
          [('Main', '==', 'm.0clvb', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 11
            Final Answer: {'Lady Mary Tudor', 'Charles Lennox, 1st Duke of Richmond', 'Charles FitzRoy, 2nd Duke of Cleveland', 'Charles Beauclerk, 1st Duke of St Albans', 'George FitzRoy, 1st Duke of Northumberland', 'Lady Barbara FitzRoy', 'Charles FitzCharles, 1st Earl of Plymouth', 'Anne Lennard, Countess of Sussex', 'James Scott, 1st Duke of Monmouth', 'Charlotte Lee, Countess of Lichfield', 'Henry FitzRoy, 1st Duke of Grafton'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 40 / 197: {
          [('Main', '==', 'm.0clvb', ['base.kwebbase.kwtopic.category'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 41 / 197: {
          [('Main', '==', 'm.0clvb', ['base.kwebbase.kwtopic.has_sentences'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 48
            Final Answer: {'The Treaty and the need to keep the secret put Charles in some debt to Louis XIV of France, which irritated the English Protestants.', 'Parliament gave Charles the right to maintain a standing army, but the grant that he received was not nearly enough to pay for it.', 'He advanced the career of D. North.', 'He was opposed by Milton.', 'In 1667, he initiated reforms at the Treasury and in government administration and attempted to reform the Royal Navy as well.', 'In it, he agreed to grant a general amnesty, to uphold the liberties of the people, including that of religious toleration,  and to be guided in all things by Parliament.', 'The conditions of the Breda agreement were never fully met, however.', 'In the same year, Charles began an affair with the actress Nell Gwynne.', 'Like his father, ignored petition of John Durie.', 'Charles and his brother, under the supervision of Harvey, were present at Edgehill, the first engagement of the war.', 'When Oliver Cromwell died in 1658, England was in a state of discontent and Charles took advantage of the unrest, when he signed the Declaration of Breda in April 1660.', 'He much admired the work of Donne.', 'Purcell composed for him.', 'He betrayed the clan MacGregor.', 'He recommended Graunt to membership of the Royal Society.', 'Charles was true to his word and became a Catholic on his deathbed, after his reign had ended tranquilly.', 'He employed Le Notre.', 'As a young man, Charles had been brought up destined to become the monarch, but this came to a sudden end when the English Civil War broke out in 1642.', 'In general, Charles was a reforming King.', 'For the next four years, Charles remained with the Royalist forces, then went to the safety of France, where he was taught for a time by mathematician Hobbes.', 'In 1661 he married the Portuguese noblewoman, Catherine of Braganza.', 'He imprisoned Oldenburg.', 'In the Treaty of Dover of 1670, Charles promised secretly that he would announce his conversion to Roman Catholicism, if France pledged aid should the conversion cause unrest in England.', 'Supported the explorer Radisson.', 'Appointed Flamsteed.', 'Due mainly to his influence, the Restoration was brought about in a tolerant way and Charles rewarded those people who had supported him, making, for example, Horatio Townshend  a viscount, and standing as godfather to his son the second Viscount Townshend.', 'The Scots, led by the Marquis of Argyll, offered him the Scottish throne, but only if he supported Presbyterianism as the established church and repressed all other forms of religion.', 'His restoration was negotiated by Pepys.', 'He was supported by Evelyn.', 'In the end, Charles went along with Argyll and, by July 1651, was at the head of an army of twenty thousand Royalists which invaded England on 31st July.', "Cardinal Mazarin, France's First Minister, had offered Charles sanctuary but would not commit French forces to the struggle.", "The Royalists were beaten at the battle of Worcester on 3rd September and for forty days Charles was hunted by Cromwell's Republican army, finally escaping to France, where he lived in relative poverty for the next nine years.", 'He gave the Royal Society its charter and was a supporter of overseas investment and expansion.', 'Sometimes he would travel incognito and met, among others, Christina of Sweden in Frankfurt, in 1655.', "The Crown's responsibility for war sank him even further into debt, when the Anglo- Dutch war broke out in 1665, after the British had taken New York from the Dutch the year before.", 'On May 25th, he landed in England and reached London on his 30th birthday.', 'An alternative offer came from Graham, marquis of Montrose, who pledged to raise an army to defeat the Scottish Presbyterians and the English as well, which would lead to Charles gaining the thrones of both Scotland and England.', 'William Penn was a court favorite, as was Petty.', 'He was a patron of Halley.', 'His father was Charles I.', 'In exile he was visited by Barrow.', "Charles wasn't able to stop the execution of a number of the people who had signed his father's death warrant and with the Clarendon Codes (limiting the actions of Free-church believers)  he went back on his promise of religious freedom.", 'Astronomer Royal.', 'Was a patron of Tillotson.', 'He made some attempt to reform a navy that badly needed it and was consistent in his attempts to introduce genuine religious tolerance.', "After the execution of Charles' father on 30th January 1649 (by a republican government whose authority he had never recognised) Ireland and Scotland defied Parliament and declared Charles king.", 'He had a great love of for entertainment and was instrumental in the restoration of the English theatre and was a great admirer of the work of  Dryden.', 'On the whole, Charles behaved reasonably well.'}
            Answers = 48, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 48, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 42 / 197: {
          [('Main', '==', 'm.0clvb', ['base.jewlib.original_owner.originator_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.jewlib.original_owner.originator_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.jewlib.original_owner.originator_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Early Collections of Hebrew Printed Books at the British Library'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 43 / 197: {
          [('Main', '==', 'm.0clvb', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 44 / 197: {
          [('Main', '==', 'm.0clvb', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {"St James's Palace"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 45 / 197: {
          [('Main', '==', 'm.0clvb', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0clvb fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 WHERE { fb:m.0clvb fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'1685'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 46 / 197: {
          [('Main', '==', 'm.0clvb', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Royal Survivor: The Life of Charles II'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 47 / 197: {
          [('Main', '==', 'm.0clvb', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 4
            Final Answer: {'Newmarket Racecourse', "Hudson's Bay Company", 'Royal Mathematical School', 'Royal African Company'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 48 / 197: {
          [('Main', '==', 'm.0clvb', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 3
            Final Answer: {'Charles II of England', 'King Charles II', 'Charles II'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 49 / 197: {
          [('Main', '==', 'm.0clvb', ['base.kwebbase.kwtopic.connections_from'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 21
            Final Answer: {'charles ii of england appointed john flamsteed', 'charles ii of england favorite was william petty', 'charles ii of england mentor was william harvey', 'charles ii of england was supported by john evelyn', 'charles ii of england composer was henry purcell', 'charles ii of england patron of pierre-esprit radisson', 'charles ii of england restoration fixed by samuel pepys', 'charles ii of england supporter of john graunt', 'charles ii of england chartered royal society', 'charles ii of england visited in exile by isaac barrow', 'charles ii of england betrayed robert macgregor', 'charles ii of england ignored john durie', 'charles ii of england financially supported john tillotson', 'charles ii of england favorite was william penn', 'charles ii of england taught by thomas hobbes', 'charles ii of england opposed by john milton', 'charles ii of england fought by oliver cromwell', 'charles ii of england a fan of john dryden', 'charles ii of england a fan of john donne', 'charles ii of england met christina of sweden', 'charles ii of england imprisoned henry oldenburg'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 50 / 197: {
          [('Main', '==', 'm.0clvb', ['base.kwebbase.kwtopic.kwtype'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 51 / 197: {
          [('Main', '==', 'm.0clvb', ['base.kwebbase.kwtopic.disciplines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 52 / 197: {
          [('Main', '==', 'm.0clvb', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Charles I and His Wife Henrietta Maria with Their Eldest Children Charles and James'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 53 / 197: {
          [('Main', '==', 'm.0hgm4kl', ['music.artist.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0hgm4kl'}
            Query return lines = 3
            Final Answer: {'Indie', 'Alternative rock', 'Surf music'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 54 / 197: {
          [('Main', '==', 'm.0hgm4kl', ['music.artist.label'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:music.artist.label ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:music.artist.label ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0hgm4kl'}
            Query return lines = 2
            Final Answer: {'Island Records', 'Universal Republic Records'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 55 / 197: {
          [('Main', '==', 'm.0hgm4kl', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0hgm4kl fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 WHERE { fb:m.0hgm4kl fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0hgm4kl'}
            Query return lines = 1
            Final Answer: {'1988'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 56 / 197: {
          [('Main', '==', 'm.0hgm4kl', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0hgm4kl'}
            Query return lines = 1
            Final Answer: {'LoveBlood'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 57 / 197: {
          [('Main', '==', 'm.0hgm4kl', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0hgm4kl'}
            Query return lines = 28
            Final Answer: {'Loveblood', 'Days / This Time Tomorrow', 'Mississippi Isabel', 'The Brightest Lights (feat. Mumford & Sons)', 'Bam Bam', 'Mr. Flick', 'Beating Hearts', 'Polar Bear', 'Lady Percy', 'LoveBlood', 'The Brightest Lights', 'Coco Chitty', 'Wilde Love', 'Ivory Road', 'Love Lust'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 58 / 197: {
          [('Main', '==', 'm.0hgm4kl', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0hgm4kl'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 59 / 197: {
          [('Main', '==', 'm.0hgm4kl', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0hgm4kl'}
            Query return lines = 1
            Final Answer: {'London'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 60 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0j9gg fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 WHERE { fb:m.0j9gg fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'1500'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 61 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Spain'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 62 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 2
            Final Answer: {'Joanna of Castile', 'Philip I of Castile'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 63 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 2
            Final Answer: {'Roman Catholic Church', 'Catholicism'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 64 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Monastery of Yuste'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 65 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.deceased_person.place_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 2
            Final Answer: {'El Escorial'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 66 / 197: {
          [('Main', '==', 'm.0j9gg', ['base.kwebbase.kwtopic.assessment'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 67 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.family_member.family'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.family_member.family ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.family_member.family ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'House of Habsburg'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 68 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 5
            Final Answer: {'Joanna of Austria, Princess of Portugal', 'Philip II of Spain', 'Maria of Austria, Holy Roman Empress', 'John of Austria', 'Margaret of Parma'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 69 / 197: {
          [('Main', '==', 'm.0j9gg', ['base.kwebbase.kwtopic.category'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 70 / 197: {
          [('Main', '==', 'm.0j9gg', ['base.kwebbase.kwtopic.has_sentences'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 58
            Final Answer: {"Lack of finance was now hindering Charles's continued war with France and the two armies twice came face to face with no action,  before signing the peace of Crepy in 1544.", 'Commissioned work from Erasmus.', 'Charles now faced a rebellion in his native city of Ghent in the Netherlands.', 'On 25 October 1555 he abdicated the crown of  the Netherlands  in favour of Philip, and on 26 January 1556 he passed on to Philip the crown of Spain, the Spanish empire in the New World and Spanish possessions in Italy.', 'When Francis declined, Charles invaded Provence, before a peace was brokered by the Pope in 1538.', "At the same time a new threat appeared in Europe: the Sultan of Turkey who was encroaching on Charles' territory east of Vienna.", 'In 1541 he called for a meeting at Regensburg where he supported the efforts of the Protestant reformer Bucer to reconcile Protestant and Catholics.', "In 1525 Francis I was captured by Charles's army at Pavia in Italy and imprisoned in Spain.", 'He arranged for Philip to marry Mary I of England.', 'He went back to Spain in 1521,  signed a great many death warrants and savagely put down the rebellion.', 'In the same year, another European throne became vacant when Maximilian died,  and with financial backing from the Fugger banking family, Charles beat his rival Francis I of France and was crowned king of Germany and Emperor-elect in 1520 at Aachen, Germany.', 'Charles also had to deal with the trouble caused by the Castilians on the western flank of his empire.', 'In 1530, the Pope travelled to Bologna and crowned Charles as Holy Roman Emperor.', 'After skirmishing with the Barbary pirates, he took Tunis in 1535.', 'His coronation was attended by Trissino.', 'He wrote a political testament about the management of the empire to his son, the future Philip II of Spain, and also had his portrait painted by Titian^.', 'At a meeting of the German Parliament the following year, Charles issued the Edict of Worms,  which attacked Protestantism.', 'He had financial dealings with Nasi.', 'In 1536 he entered Rome and in the presence of the Pope made his famous challenge to engage with Francis in single combat.', 'Charles renounced his claim to Burgundy, and Francis renounced his claim to Milan and Naples.', 'Meanwhile, Francis had taken the opportunity to invade Italy again,  so Charles sailed from Africa to Italy.', 'Meanwhile in Germany he was again being challenged by the German princes.', 'Despite pleas from his brother who had now lost land in Hungary  to the Turks, Charles once again chose to strike at the Sultan by sea \xad an episode which ended in the defeat of imperial forces at Algiers.', 'In 1551 the German princes rose up against imperial authority once again, this time aided by the new king of France, Henri II.', 'Francis had taken over  the Duchy of Milan in Italy and when the ousted Duke turned to Charles and Pope Leo X for help in 1521, war between Spain and France broke out.', 'Charles had now made enemies among the Protestant rulers in Germany like Frederick III the Wise of Saxony, patron of the artists Durer and Cranach and now protector of Luther.', "The Protestant princes banded together in the Schmalkaldic League and won concessions for Lutheranism from Charles when he needed their help to defend Vienna from the Sultan's forces in 1532.", "Meanwhile Margaret of Austria, Charles's aunt, got together with Francis's mother and in 1529 the two women  pushed through the Peace of Cambrai, and the war between Francis and Charles ended.", 'His edicts related to Melanchthon.', 'Charles now turned his attentions to reforming the Catholic church and to an attempt at reconciliation with the German Protestant princes.', 'During an extended stay in Augsburg Charles attempted to set his Empire in order.', 'Charles put a huge army outside Vienna but there was no action.', 'Fought Suleyman over Malta.', 'He arrived there in 1540 and put down the uprising with great severity.', 'In 1554 he gave his German territory to his brother Ferdinand.', 'The Elector of Saxony had given imperial lands to France,  and when Charles attempted unsuccessfully to retake Metz, Burgundy fell to France.', 'He was unpopular and when he left Spain in 1519 the Castilians rebelled against his government.', 'Talks about religious differences took place and were attended by distinguished humanists such as Agricola but in April 1547 the matter was settled at the battle of Muhlberg when Charles defeated the rebellious princes.', "As Holy Roman Emperor, it was Charles's sacred duty to repel the Turks,  but his resources were overstretched.", 'He reorganised the Spanish court, sorted out the responsibilities to the Empire within his Burgundian possessions and made further concessions to the Protestants in Germany.', 'A poem celebrating this event was illustrated by the miniaturist Clovio.', 'Negotiated with Frederick III of Saxony about Luther.', 'Charles was lucky to escape capture but he was still forced to agree that Protestants should have equal rights with Roman Catholics.', 'Francis signed the Treaty of Madrid in 1526 but as soon as he was free he reneged.', 'From this time on, Spain became his true home, and Spanish wealth and soldiers became his prime resource.', 'His apothecary was the father of Vesalius.', 'He commissioned work from Mercator.', 'Exhausted and disillusioned, Charles now occupied himself with plans for retirement.', 'The following year he left for Spain where he concentrated on a plan to conquer Turkish territory in North Africa.', 'He delayed the Council of Trent.', 'Charles arrived in Spain in September 1556 and withdrew to the monastery of Yuste at the beginning of 1557.', 'In May 1527 Charles sacked Rome and the terrified Pope changed sides.', 'Charles was ultimately defeated by the conservatism of the Catholic church and by the new forces of Protestantism and nationalism.', 'Charles had a more threatening enemy in Francis of France.', 'Charles later asked the writer Aretino to write up the Sack of Rome in a good light.', 'Established the Dukedom of Cosimo de Medici (Grand Duke).', 'He had strengthened his hand in Western Europe by marrying Isabella of Portugal in 1526 but Francis of France allied himself with the Pope, both of them resenting Spanish influence in Italy.', 'He knighted Apian.'}
            Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 71 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 72 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Ghent'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 73 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0j9gg fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 WHERE { fb:m.0j9gg fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'1558'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 74 / 197: {
          [('Main', '==', 'm.0j9gg', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'University of Granada'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 75 / 197: {
          [('Main', '==', 'm.0j9gg', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Charles V, Holy Roman Emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 76 / 197: {
          [('Main', '==', 'm.0j9gg', ['base.kwebbase.kwtopic.connections_from'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 15
            Final Answer: {'charles v, holy roman emperor  patron of cranach the elder', 'charles v, holy roman emperor  supported martin bucer', 'charles v, holy roman emperor  protector of martin luther', 'charles v, holy roman emperor  employed pietro aretino', 'charles v, holy roman emperor  apothecary was father of andreas vesalius', 'charles v, holy roman emperor  victory painted by giulio clovio', 'charles v, holy roman emperor  edicts related to philipp melanchthon', 'charles v, holy roman emperor  his troops defended siege of malta', 'charles v, holy roman emperor  patron of albrecht durer', 'charles v, holy roman emperor  fought against suleyman', 'charles v, holy roman emperor  financial dealings with joseph nasi', 'charles v, holy roman emperor  commissioned desiderius erasmus', 'charles v, holy roman emperor  knighted petrus apianus', 'charles v, holy roman emperor  negotiated with georgius agricola', 'charles v, holy roman emperor  coronation attended by giovanni giorgio trissino'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 77 / 197: {
          [('Main', '==', 'm.0j9gg', ['base.kwebbase.kwtopic.kwtype'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 78 / 197: {
          [('Main', '==', 'm.0j9gg', ['base.kwebbase.kwtopic.disciplines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 79 / 197: {
          [('Main', '==', 'm.0j9gg', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 2
            Final Answer: {"Charles V's Ewer and Basin", 'Mars (sign of the Ram)'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 80 / 197: {
          [('Main', '==', 'm.0xnc3', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 81 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0xnc3 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 WHERE { fb:m.0xnc3 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'1948'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 82 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'United Kingdom'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 83 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 3
            Final Answer: {'Elizabeth II', 'Prince Philip, Duke of Edinburgh', 'Elizabeth II, Queen of Great Britain'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 84 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:17] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 3
            Final Answer: {'Anglicanism', 'Church of Scotland', 'Church of England'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 85 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0xnc3 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 WHERE { fb:m.0xnc3 fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'1.778'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 86 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.family_member.family'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.family_member.family ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.family_member.family ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 3
            Final Answer: {'British Royal Family', 'House of Windsor', 'Mountbatten-Windsor'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 87 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 2
            Final Answer: {'Prince Harry of Wales', 'Prince William, Duke of Cambridge'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 88 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 5
            Final Answer: {'Helicopter Pilot', 'Screenwriter', 'Author', 'Philanthropist', 'Pilot'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 89 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 90 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Buckingham Palace'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 91 / 197: {
          [('Main', '==', 'm.0xnc3', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 4
            Final Answer: {"The Prince's Foundation for Integrated Health", "The Prince's Regeneration Trust", "The Prince's Trust", 'Mutton Renaissance Campaign'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 92 / 197: {
          [('Main', '==', 'm.0xnc3', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Prince Charles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 93 / 197: {
          [('Main', '==', 'm.0xnc3', ['user.alexander.default_domain.royal_house_member.royal_house'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:user.alexander.default_domain.royal_house_member.royal_house ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:user.alexander.default_domain.royal_house_member.royal_house ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'House of Windsor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 94 / 197: {
          [('Main', '==', 'm.0xnc3', ['base.americancomedy.impersonated_celebrity.impersonated_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Dana Carvey'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 95 / 197: {
          [('Main', '==', 'm.0xnc3', ['user.alexander.default_domain.royal_house_member.title'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:user.alexander.default_domain.royal_house_member.title ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:user.alexander.default_domain.royal_house_member.title ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 3
            Final Answer: {'Duke of Cornwall', 'Prince of Wales', 'Duke of Rothesay'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 96 / 197: {
          [('Main', '==', 'm.01p5b6b', ['music.musical_group.member', 'music.group_membership.group'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 1
            Final Answer: {'The Spaniels'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 97 / 197: {
          [('Main', '==', 'm.01p5b6b', ['music.musical_group.member', 'music.group_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 1
            Final Answer: {'Pookie Hudson'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 98 / 197: {
          [('Main', '==', 'm.01p5b6b', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 1
            Final Answer: {'The Spaniels'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 99 / 197: {
          [('Main', '==', 'm.01p5b6b', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01p5b6b fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.01p5b6b fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 1
            Final Answer: {'1991'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Current: 100 / 197
        Checking schema 100 / 197: {
          [('Main', '==', 'm.01p5b6b', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 2
            Final Answer: {'AB-1065: The Spaniels', 'AB-164: The Spaniels / Dwight Pullen'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 101 / 197: {
          [('Main', '==', 'm.01p5b6b', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 1
            Final Answer: {'The Spaniels'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 102 / 197: {
          [('Main', '==', 'm.01p5b6b', ['music.artist.track_contributions', 'music.track_contribution.contributor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 1
            Final Answer: {'The Spaniels'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 103 / 197: {
          [('Main', '==', 'm.01p5b6b', ['music.artist.track_contributions', 'music.track_contribution.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 1
            Final Answer: {'Vocals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 104 / 197: {
          [('Main', '==', 'm.01p5b6b', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 1
            Final Answer: {'Rhythm and Blues Foundation Pioneer Award'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 105 / 197: {
          [('Main', '==', 'm.01p5b6b', ['music.artist.track_contributions', 'music.track_contribution.track'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01p5b6b fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01p5b6b'}
            Query return lines = 1
            Final Answer: {"A Rockin' Good Way"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 106 / 197: {
          [('Main', '==', 'm.0231r', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 4
            Final Answer: {'Elizabeth Stuart, Queen of Bohemia', 'Henry Frederick, Prince of Wales', 'Robert Stuart, Duke of Kintyre'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 107 / 197: {
          [('Main', '==', 'm.0231r', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 2
            Final Answer: {'Henrietta Maria of France'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 108 / 197: {
          [('Main', '==', 'm.0231r', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0231r fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.to_date ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0231r fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.to_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'1625'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 109 / 197: {
          [('Main', '==', 'm.0231r', ['base.patronage.patron.related_client', 'base.patronage.patron_client_relationship.not_after'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0231r fb:base.patronage.patron.related_client ?o1 . ?o1 fb:base.patronage.patron_client_relationship.not_after ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0231r fb:base.patronage.patron.related_client ?o1 . ?o1 fb:base.patronage.patron_client_relationship.not_after ?o2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 3
            Final Answer: {'1640', '1639', '1641'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 110 / 197: {
          [('Main', '==', 'm.0231r', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.noble_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 4
            Final Answer: {'Duke of Normandy', 'Duke of Cornwall', 'Duke of York', 'High Steward of Scotland'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 111 / 197: {
          [('Main', '==', 'm.0231r', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 112 / 197: {
          [('Main', '==', 'm.0231r', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Charles I of England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 113 / 197: {
          [('Main', '==', 'm.0231r', ['base.patronage.patron.related_client', 'base.patronage.patron_client_relationship.client'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:base.patronage.patron.related_client ?o1 . ?o1 fb:base.patronage.patron_client_relationship.client ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:base.patronage.patron.related_client ?o1 . ?o1 fb:base.patronage.patron_client_relationship.client ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 3
            Final Answer: {'Anthony van Dyck', 'Orazio Gentileschi', 'Artemisia Gentileschi'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 114 / 197: {
          [('Main', '==', 'm.0231r', ['base.patronage.patron.related_client', 'base.patronage.patron_client_relationship.product_of_relationship'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:base.patronage.patron.related_client ?o1 . ?o1 fb:base.patronage.patron_client_relationship.product_of_relationship ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:base.patronage.patron.related_client ?o1 . ?o1 fb:base.patronage.patron_client_relationship.product_of_relationship ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 3
            Final Answer: {'Portrait of Queen Henrietta Maria and the Dwarf Sir Jeffrey Hudson', 'Charles I and His Wife Henrietta Maria with Their Eldest Children Charles and James', 'Charles I with M. de St Antoine'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 115 / 197: {
          [('Main', '==', 'm.0231r', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 116 / 197: {
          [('Main', '==', 'm.0231r', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.noble_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Charles I of England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 117 / 197: {
          [('Main', '==', 'm.0231r', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0231r fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.from_date ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0231r fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'1612'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 118 / 197: {
          [('Main', '==', 'm.0231r', ['base.patronage.patron.related_client', 'base.patronage.patron_client_relationship.patron'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:base.patronage.patron.related_client ?o1 . ?o1 fb:base.patronage.patron_client_relationship.patron ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0231r fb:base.patronage.patron.related_client ?o1 . ?o1 fb:base.patronage.patron_client_relationship.patron ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 1
            Final Answer: {'Charles I of England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 119 / 197: {
          [('Main', '==', 'm.0231r', ['base.patronage.patron.related_client', 'base.patronage.patron_client_relationship.not_before'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0231r fb:base.patronage.patron.related_client ?o1 . ?o1 fb:base.patronage.patron_client_relationship.not_before ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0231r fb:base.patronage.patron.related_client ?o1 . ?o1 fb:base.patronage.patron_client_relationship.not_before ?o2 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 2
            Final Answer: {'1626', '1638'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 120 / 197: {
          [('Main', '==', 'm.0clvb', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 3
            Final Answer: {'Princess Henrietta of England', 'James II of England'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 121 / 197: {
          [('Main', '==', 'm.0clvb', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 2
            Final Answer: {'Catherine of Braganza'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 122 / 197: {
          [('Main', '==', 'm.0clvb', ['architecture.architectural_structure_owner.structures_owned', 'architecture.ownership.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0clvb fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.start_date ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0clvb fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 2
            Final Answer: {'1675', '1666'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 123 / 197: {
          [('Main', '==', 'm.0clvb', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0clvb fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.to_date ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0clvb fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.to_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'1649'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 124 / 197: {
          [('Main', '==', 'm.0clvb', ['architecture.architectural_structure_owner.structures_owned', 'architecture.ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Charles II of England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 125 / 197: {
          [('Main', '==', 'm.0clvb', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.noble_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 3
            Final Answer: {'Duke of Normandy', 'Duke of Cornwall', 'High Steward of Scotland'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 126 / 197: {
          [('Main', '==', 'm.0clvb', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 127 / 197: {
          [('Main', '==', 'm.0clvb', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Charles II of England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 128 / 197: {
          [('Main', '==', 'm.0clvb', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 129 / 197: {
          [('Main', '==', 'm.0clvb', ['architecture.architectural_structure_owner.structures_owned', 'architecture.ownership.structure'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.structure ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.structure ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 2
            Final Answer: {'Royal Observatory, Greenwich', 'Audley End House'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 130 / 197: {
          [('Main', '==', 'm.0clvb', ['architecture.architectural_structure_owner.structures_owned', 'architecture.ownership.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0clvb fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.end_date ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0clvb fb:architecture.architectural_structure_owner.structures_owned ?o1 . ?o1 fb:architecture.ownership.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'1685'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 131 / 197: {
          [('Main', '==', 'm.0clvb', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.noble_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0clvb fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'Charles II of England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 132 / 197: {
          [('Main', '==', 'm.0clvb', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0clvb fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.from_date ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0clvb fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 1
            Final Answer: {'1630'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 133 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Charles V, Holy Roman Emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 134 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 5
            Final Answer: {'Ferdinand I, Holy Roman Emperor', 'Catherine of Austria, Queen of Portugal', 'Mary of Hungary', 'Eleanor of Austria'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 135 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 2
            Final Answer: {'Isabella of Portugal'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 136 / 197: {
          [('Main', '==', 'm.0j9gg', ['military.military_commander.military_commands', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:military.military_commander.military_commands ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:military.military_commander.military_commands ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 11
            Final Answer: {'Conquest of Tunis', 'Italian War of 1521–26', 'War of the League of Cognac', 'Battle of Mühlberg', 'Italian War of 1551–1559', 'Schmalkaldic War', 'Battle of Renty', 'Italian War of 1542–1546', 'Hungarian campaign of 1527–1528', 'Revolt of the Comuneros', 'Algiers expedition'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 137 / 197: {
          [('Main', '==', 'm.0j9gg', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0j9gg fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.to_date ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0j9gg fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.to_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'1556'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 138 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Ghent'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 139 / 197: {
          [('Main', '==', 'm.0j9gg', ['military.military_commander.military_commands', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:military.military_commander.military_commands ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:military.military_commander.military_commands ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Holy Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 140 / 197: {
          [('Main', '==', 'm.0j9gg', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.noble_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Holy Roman Emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 141 / 197: {
          [('Main', '==', 'm.0j9gg', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 142 / 197: {
          [('Main', '==', 'm.0j9gg', ['military.military_commander.military_commands', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:military.military_commander.military_commands ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:military.military_commander.military_commands ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Charles V, Holy Roman Emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 143 / 197: {
          [('Main', '==', 'm.0j9gg', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.noble_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Charles V, Holy Roman Emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 144 / 197: {
          [('Main', '==', 'm.0j9gg', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0j9gg fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.from_date ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0j9gg fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'1519'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 145 / 197: {
          [('Main', '==', 'm.0j9gg', ['symbols.coat_of_arms_bearer.coat_of_arms_used', 'symbols.armorial_grant.armiger'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?o1 . ?o1 fb:symbols.armorial_grant.armiger ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?o1 . ?o1 fb:symbols.armorial_grant.armiger ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Charles V, Holy Roman Emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 146 / 197: {
          [('Main', '==', 'm.0j9gg', ['symbols.coat_of_arms_bearer.coat_of_arms_used', 'symbols.armorial_grant.used_from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0j9gg fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?o1 . ?o1 fb:symbols.armorial_grant.used_from ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0j9gg fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?o1 . ?o1 fb:symbols.armorial_grant.used_from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'1516'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 147 / 197: {
          [('Main', '==', 'm.0j9gg', ['symbols.coat_of_arms_bearer.coat_of_arms_used', 'symbols.armorial_grant.coat_of_arms'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?o1 . ?o1 fb:symbols.armorial_grant.coat_of_arms ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?o1 . ?o1 fb:symbols.armorial_grant.coat_of_arms ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 1
            Final Answer: {'Coat of arms of Charles V, Holy Roman Emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 148 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 149 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 4
            Final Answer: {'Anne, Princess Royal', 'Prince Andrew, Duke of York', 'Prince Edward, Earl of Wessex'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 150 / 197: {
          [('Main', '==', 'm.0xnc3', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'VC'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 151 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 3
            Final Answer: {'Diana, Princess of Wales', 'Camilla, Duchess of Cornwall'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 152 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 2
            Final Answer: {'Windsor Guildhall', "St Paul's Cathedral"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 153 / 197: {
          [('Main', '==', 'm.0xnc3', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 154 / 197: {
          [('Main', '==', 'm.0xnc3', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'24'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 155 / 197: {
          [('Main', '==', 'm.0xnc3', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 156 / 197: {
          [('Main', '==', 'm.0xnc3', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 157 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.chivalric_order_officer.memberships_presented', 'royalty.chivalric_order_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_officer.memberships_presented ?o1 . ?o1 fb:royalty.chivalric_order_membership.from ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_officer.memberships_presented ?o1 . ?o1 fb:royalty.chivalric_order_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 158 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.chivalric_order_member.belongs_to_order', 'royalty.chivalric_order_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.from ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 4
            Final Answer: {'1978', '1975', '1971', '1977'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 159 / 197: {
          [('Main', '==', 'm.0xnc3', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 2
            Final Answer: {'Donatella Versace'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 160 / 197: {
          [('Main', '==', 'm.0xnc3', ['business.board_member.leader_of', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 2
            Final Answer: {'President', 'Chancellor'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 161 / 197: {
          [('Main', '==', 'm.0xnc3', ['user.alexbl.honorary_title.titled_person.honorary_title', 'user.alexbl.honorary_title.honorary_title_holding.conferred_upon'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:user.alexbl.honorary_title.titled_person.honorary_title ?o1 . ?o1 fb:user.alexbl.honorary_title.honorary_title_holding.conferred_upon ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:user.alexbl.honorary_title.titled_person.honorary_title ?o1 . ?o1 fb:user.alexbl.honorary_title.honorary_title_holding.conferred_upon ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 162 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'London'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 163 / 197: {
          [('Main', '==', 'm.0xnc3', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 164 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 2
            Final Answer: {'1981', '2005'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 165 / 197: {
          [('Main', '==', 'm.0xnc3', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 2
            Final Answer: {'A Queen Is Crowned', "A Man's Story"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 166 / 197: {
          [('Main', '==', 'm.0xnc3', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 167 / 197: {
          [('Main', '==', 'm.0xnc3', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 168 / 197: {
          [('Main', '==', 'm.0xnc3', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 169 / 197: {
          [('Main', '==', 'm.0xnc3', ['military.military_person.service', 'military.military_service.military_force'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.military_force ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.military_force ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Royal Navy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 170 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.noble_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 9
            Final Answer: {'Duke of Cornwall', 'Earl of Carrick', 'Lord of the Isles', 'Baron of Renfrew', 'Prince of Scotland', 'Prince of Wales', 'High Steward of Scotland', 'Earl of Chester', 'Duke of Rothesay'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 171 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.chivalric_order_officer.memberships_presented', 'royalty.chivalric_order_membership.recipient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_officer.memberships_presented ?o1 . ?o1 fb:royalty.chivalric_order_membership.recipient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_officer.memberships_presented ?o1 . ?o1 fb:royalty.chivalric_order_membership.recipient ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Arthur Gilbert'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 172 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.chivalric_order_member.belongs_to_order', 'royalty.chivalric_order_membership.recipient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.recipient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.recipient ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 173 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.chivalric_order_officer.memberships_presented', 'royalty.chivalric_order_membership.presented_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_officer.memberships_presented ?o1 . ?o1 fb:royalty.chivalric_order_membership.presented_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_officer.memberships_presented ?o1 . ?o1 fb:royalty.chivalric_order_membership.presented_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 174 / 197: {
          [('Main', '==', 'm.0xnc3', ['business.board_member.leader_of', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 5
            Final Answer: {'University of Wales', 'Royal College of Music', "The Prince's Regeneration Trust", 'University of Wales, Lampeter', 'Cardiff Metropolitan University'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 175 / 197: {
          [('Main', '==', 'm.0xnc3', ['user.alexbl.honorary_title.titled_person.honorary_title', 'user.alexbl.honorary_title.honorary_title_holding.honorary_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:user.alexbl.honorary_title.titled_person.honorary_title ?o1 . ?o1 fb:user.alexbl.honorary_title.honorary_title_holding.honorary_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:user.alexbl.honorary_title.titled_person.honorary_title ?o1 . ?o1 fb:user.alexbl.honorary_title.honorary_title_holding.honorary_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Members ex officio'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 176 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 177 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Business in the Community'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 178 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 9
            Final Answer: {'Aberystwyth University', 'University of Cambridge', 'Hill House School', 'Cheam School', 'Gordonstoun', 'Royal Air Force College Cranwell', 'Geelong Grammar School', 'Britannia Royal Naval College', 'Trinity College, Cambridge'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 179 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 180 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'1996'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 181 / 197: {
          [('Main', '==', 'm.0xnc3', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 182 / 197: {
          [('Main', '==', 'm.0xnc3', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 183 / 197: {
          [('Main', '==', 'm.0xnc3', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:18] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'100 Worst Britons'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 184 / 197: {
          [('Main', '==', 'm.0xnc3', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'2003'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 185 / 197: {
          [('Main', '==', 'm.0xnc3', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 2
            Final Answer: {'September 10, 2010', 'A Royal Family'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 186 / 197: {
          [('Main', '==', 'm.0xnc3', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 2
            Final Answer: {'Victoria Cross Heroes', 'Grime Goes Green'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 187 / 197: {
          [('Main', '==', 'm.0xnc3', ['military.military_person.service', 'military.military_service.military_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.military_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.military_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 188 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.noble_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.noble_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 189 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.noble_person.titles', 'royalty.noble_title_tenure.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.from_date ?o2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 WHERE { fb:m.0xnc3 fb:royalty.noble_person.titles ?o1 . ?o1 fb:royalty.noble_title_tenure.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 4
            Final Answer: {'1958', '1952'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 190 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.chivalric_order_officer.memberships_presented', 'royalty.chivalric_order_membership.order'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_officer.memberships_presented ?o1 . ?o1 fb:royalty.chivalric_order_membership.order ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_officer.memberships_presented ?o1 . ?o1 fb:royalty.chivalric_order_membership.order ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Order of the British Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 191 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.chivalric_order_member.belongs_to_order', 'royalty.chivalric_order_membership.order'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.order ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.order ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 7
            Final Answer: {'Order of St. Olav', 'Order of the Chrysanthemum', 'Order of the Elephant', 'Order of the Bath', 'Order of the Garter', 'Royal Order of the Seraphim', 'Order of the Thistle'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 192 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.chivalric_order_officer.memberships_presented', 'royalty.chivalric_order_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_officer.memberships_presented ?o1 . ?o1 fb:royalty.chivalric_order_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_officer.memberships_presented ?o1 . ?o1 fb:royalty.chivalric_order_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Member of the Order of the British Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 193 / 197: {
          [('Main', '==', 'm.0xnc3', ['royalty.chivalric_order_member.belongs_to_order', 'royalty.chivalric_order_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Knight Grand Cross of the Order of the Bath'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 194 / 197: {
          [('Main', '==', 'm.0xnc3', ['base.popstra.celebrity.dated', 'base.popstra.dated.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 2
            Final Answer: {'Sabrina Guinness'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 195 / 197: {
          [('Main', '==', 'm.0xnc3', ['business.board_member.leader_of', 'organization.leadership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 196 / 197: {
          [('Main', '==', 'm.0xnc3', ['business.board_member.leader_of', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:business.board_member.leader_of ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 1
            Final Answer: {'Charles, Prince of Wales'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        183 / 197 coarse schemas kept with ans_size > 0.
      } [2.071s]
      Coarse level ended, resulting in 183 schemas.
    } [11.084s]
    Type level searching (total types = 10): {
      Current: 0 / 183
[{'broadcast.content'}]
[{'music.album'}]
[{'music.recording'}]
[{'royalty.kingdom'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'religion.religion'}]
[{'location.location'}]
[{'people.place_of_interment'}]
[{'visual_art.art_subject'}]
[{'royalty.royal_line'}]
[{'people.person'}]
[{'people.cause_of_death'}]
[{'base.kwebbase.kwsentence'}]
[{'religion.religion'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'type.datetime'}]
[{'base.kwebbase.kwconnection'}]
[{'visual_art.artwork'}]
[{'type.object'}]
[{'royalty.kingdom'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'religion.religion'}]
[{'location.location'}]
[{'people.place_of_interment'}]
[{'base.kwebbase.kwconnection'}]
[{'base.kwebbase.kwtopic'}]
[{'royalty.royal_line'}]
[{'film.film'}]
[{'people.person'}]
[{'base.kwebbase.kwsentence'}]
[{'base.jewlib.research_collection'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'base.kwebbase.kwconnection'}]
[{'visual_art.artwork'}]
[{'music.genre'}]
[{'music.record_label'}]
[{'type.datetime'}]
[{'music.album'}]
[{'music.recording'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'religion.religion'}]
[{'location.location'}]
[{'people.place_of_interment'}]
[{'people.family'}]
[{'people.person'}]
[{'base.kwebbase.kwsentence'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'base.kwebbase.kwconnection'}]
[{'visual_art.artwork'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'people.family'}]
[{'people.person'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'user.alexander.default_domain.royal_house'}]
[{'base.americancomedy.celebrity_impressionist'}]
[{'user.alexander.default_domain.royal_title'}]
[{'music.group_membership'}, {'music.musical_group'}]
[{'music.group_membership'}, {'music.group_member'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_program_guest'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'music.track_contribution'}, {'music.artist'}]
[{'music.track_contribution'}, {'music.performance_role'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'music.track_contribution'}, {'music.recording'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'royalty.noble_title_tenure'}, {'type.datetime'}]
[{'base.patronage.patron_client_relationship'}, {'type.datetime'}]
[{'royalty.noble_title_tenure'}, {'royalty.noble_title'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
      Current: 100 / 183
[{'base.patronage.patron_client_relationship'}, {'base.patronage.client'}]
[{'base.patronage.patron_client_relationship'}, {'base.patronage.patronage_product'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'royalty.noble_title_tenure'}, {'royalty.noble_person'}]
[{'royalty.noble_title_tenure'}, {'type.datetime'}]
[{'base.patronage.patron_client_relationship'}, {'base.patronage.patron'}]
[{'base.patronage.patron_client_relationship'}, {'type.datetime'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'architecture.ownership'}, {'type.datetime'}]
[{'royalty.noble_title_tenure'}, {'type.datetime'}]
[{'architecture.ownership'}, {'architecture.architectural_structure_owner'}]
[{'royalty.noble_title_tenure'}, {'royalty.noble_title'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'architecture.ownership'}, {'architecture.structure'}]
[{'architecture.ownership'}, {'type.datetime'}]
[{'royalty.noble_title_tenure'}, {'royalty.noble_person'}]
[{'royalty.noble_title_tenure'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'royalty.noble_title_tenure'}, {'type.datetime'}]
[{'people.place_lived'}, {'location.location'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'royalty.noble_title_tenure'}, {'royalty.noble_title'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'military.military_command'}, {'military.military_commander'}]
[{'royalty.noble_title_tenure'}, {'royalty.noble_person'}]
[{'royalty.noble_title_tenure'}, {'type.datetime'}]
[{'symbols.armorial_grant'}, {'symbols.coat_of_arms_bearer'}]
[{'symbols.armorial_grant'}, {'type.datetime'}]
[{'symbols.armorial_grant'}, {'symbols.coat_of_arms'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.ranking'}, {'type.int'}]
[{'tv.tv_guest_role'}, {'tv.special_tv_performance_type'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'royalty.chivalric_order_membership'}, {'type.datetime'}]
[{'royalty.chivalric_order_membership'}, {'type.datetime'}]
[{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
[{'organization.leadership'}, {'organization.role'}]
[{'user.alexbl.honorary_title.honorary_title_holding'}, {'user.alexbl.honorary_title.titled_person'}]
[{'people.place_lived'}, {'location.location'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'military.military_service'}, {'military.armed_force'}]
[{'royalty.noble_title_tenure'}, {'royalty.noble_title'}]
[{'royalty.chivalric_order_membership'}, {'royalty.chivalric_order_member'}]
[{'royalty.chivalric_order_membership'}, {'royalty.chivalric_order_member'}]
[{'royalty.chivalric_order_membership'}, {'royalty.chivalric_order_officer'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'user.alexbl.honorary_title.honorary_title_holding'}, {'user.alexbl.honorary_title.honorary_title'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_program'}]
[{'military.military_service'}, {'military.military_person'}]
[{'royalty.noble_title_tenure'}, {'royalty.noble_person'}]
[{'royalty.noble_title_tenure'}, {'type.datetime'}]
[{'royalty.chivalric_order_membership'}, {'royalty.order_of_chivalry'}]
[{'royalty.chivalric_order_membership'}, {'royalty.order_of_chivalry'}]
[{'royalty.chivalric_order_membership'}, {'royalty.chivalric_title'}]
[{'royalty.chivalric_order_membership'}, {'royalty.chivalric_title'}]
[{'base.popstra.dated'}, {'base.popstra.celebrity'}]
[{'organization.leadership'}, {'business.board_member'}]
      23 typed schemas retrieved from 183 coarse schemas.
      Calculating F1 for 23 typed schemas: {
        Current: 0 / 23
        Checking schema 0 / 23: {
          [('Main', '==', 'm.0231r', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 1 / 23: {
          [('Main', '==', 'm.0231r', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 2 / 23: {
          [('Main', '==', 'm.0231r', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 3 / 23: {
          [('Main', '==', 'm.0231r', ['people.person.place_of_birth']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0231r fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0231r'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 4 / 23: {
          [('Main', '==', 'm.0clvb', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 5 / 23: {
          [('Main', '==', 'm.0clvb', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 6 / 23: {
          [('Main', '==', 'm.0clvb', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 7 / 23: {
          [('Main', '==', 'm.0clvb', ['people.person.place_of_birth']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 8 / 23: {
          [('Main', '==', 'm.0clvb', ['book.book_subject.works']), ('Type', '==', 'event.presented_work', ['type.object.type'])]
          var_types: [{'book.written_work', 'event.presented_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:event.presented_work . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0clvb fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:event.presented_work . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0clvb'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 9 / 23: {
          [('Main', '==', 'm.0hgm4kl', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0hgm4kl'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 10 / 23: {
          [('Main', '==', 'm.0hgm4kl', ['people.person.place_of_birth']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hgm4kl fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0hgm4kl'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 11 / 23: {
          [('Main', '==', 'm.0j9gg', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 12 / 23: {
          [('Main', '==', 'm.0j9gg', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 13 / 23: {
          [('Main', '==', 'm.0j9gg', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 14 / 23: {
          [('Main', '==', 'm.0j9gg', ['people.person.place_of_birth']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j9gg fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 15 / 23: {
          [('Main', '==', 'm.0xnc3', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 16 / 23: {
          [('Main', '==', 'm.0xnc3', ['people.person.place_of_birth']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0xnc3 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 17 / 23: {
          [('Main', '==', 'm.0j9gg', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 18 / 23: {
          [('Main', '==', 'm.0j9gg', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_cbsa . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j9gg fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_cbsa . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j9gg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 19 / 23: {
          [('Main', '==', 'm.0xnc3', ['people.person.spouse_s', 'people.marriage.location_of_ceremony']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 20 / 23: {
          [('Main', '==', 'm.0xnc3', ['people.person.spouse_s', 'people.marriage.location_of_ceremony']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.type fb:location.us_cbsa . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.type fb:location.us_cbsa . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 21 / 23: {
          [('Main', '==', 'm.0xnc3', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 22 / 23: {
          [('Main', '==', 'm.0xnc3', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.us_cbsa'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_cbsa . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:19] Q_Schema Request: {
            WebQ_696|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0xnc3 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_cbsa . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0xnc3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        0 / 23 typed schemas kept with ans_size > 0.
      } [0.181s]
      Typed level ended, resulting in 183 schemas.
    } [0.193s]
    Time level searching (total times = 0): {
      Current: 0 / 183
self.var_time_preds: [{'broadcast.content.production_start', 'broadcast.content.production_end'}]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'royalty.royal_line.ruled_to', 'royalty.royal_line.ruled_from'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwsentence.until', 'base.kwebbase.kwsentence.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [{'type.object.timestamp'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'royalty.royal_line.ruled_to', 'royalty.royal_line.ruled_from'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'base.kwebbase.kwsentence.until', 'base.kwebbase.kwsentence.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'base.kwebbase.kwsentence.until', 'base.kwebbase.kwsentence.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.group_membership.end', 'music.group_membership.start'}, set()]
self.var_time_preds: [{'music.group_membership.end', 'music.group_membership.start'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), {'music.artist.active_start', 'music.artist.active_end'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set(), {'music.recording.date'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'base.patronage.patron_client_relationship.not_after', 'base.patronage.patron_client_relationship.not_before'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      Current: 100 / 183
self.var_time_preds: [{'base.patronage.patron_client_relationship.not_after', 'base.patronage.patron_client_relationship.not_before'}, set()]
self.var_time_preds: [{'base.patronage.patron_client_relationship.not_after', 'base.patronage.patron_client_relationship.not_before'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'base.patronage.patron_client_relationship.not_after', 'base.patronage.patron_client_relationship.not_before'}, set()]
self.var_time_preds: [{'base.patronage.patron_client_relationship.not_after', 'base.patronage.patron_client_relationship.not_before'}, set()]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, {'architecture.structure.opened', 'architecture.structure.topped_out', 'architecture.structure.closed', 'architecture.structure.destruction_date', 'architecture.structure.construction_started'}]
self.var_time_preds: [{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
self.var_time_preds: [{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
self.var_time_preds: [{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
self.var_time_preds: [{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'user.alexbl.honorary_title.honorary_title_holding.date_conferred'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'user.alexbl.honorary_title.honorary_title_holding.date_conferred'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, {'royalty.order_of_chivalry.date_founded', 'royalty.order_of_chivalry.date_last_awarded'}]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, {'royalty.order_of_chivalry.date_founded', 'royalty.order_of_chivalry.date_last_awarded'}]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
self.var_time_preds: [{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
      0 timed schemas retrieved from 183 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 183 schemas.
    } [0.004s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 183
[{'broadcast.content.production_start', 'broadcast.content.production_end'}]
[{'music.album.release_date'}]
[{'music.recording.date'}]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[{'royalty.royal_line.ruled_to', 'royalty.royal_line.ruled_from'}]
[{'people.person.date_of_birth'}]
[set()]
[{'base.kwebbase.kwsentence.until', 'base.kwebbase.kwsentence.from'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[{'type.object.timestamp'}]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
[set()]
[{'royalty.royal_line.ruled_to', 'royalty.royal_line.ruled_from'}]
[{'film.film.initial_release_date'}]
[{'people.person.date_of_birth'}]
[{'base.kwebbase.kwsentence.until', 'base.kwebbase.kwsentence.from'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[{'organization.organization.date_founded'}]
[set()]
[{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[set()]
[set()]
[set()]
[{'music.album.release_date'}]
[{'music.recording.date'}]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[{'base.kwebbase.kwsentence.until', 'base.kwebbase.kwsentence.from'}]
[set()]
[set()]
[set()]
[{'organization.organization.date_founded'}]
[set()]
[{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[set()]
[set()]
[{'music.group_membership.end', 'music.group_membership.start'}, set()]
[{'music.group_membership.end', 'music.group_membership.start'}, set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[{'award.award_honor.year'}, set()]
[set(), {'music.artist.active_start', 'music.artist.active_end'}]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set(), {'music.recording.date'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'base.patronage.patron_client_relationship.not_after', 'base.patronage.patron_client_relationship.not_before'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[set(), set()]
[set(), set()]
      Current: 100 / 183
[{'base.patronage.patron_client_relationship.not_after', 'base.patronage.patron_client_relationship.not_before'}, set()]
[{'base.patronage.patron_client_relationship.not_after', 'base.patronage.patron_client_relationship.not_before'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'base.patronage.patron_client_relationship.not_after', 'base.patronage.patron_client_relationship.not_before'}, set()]
[{'base.patronage.patron_client_relationship.not_after', 'base.patronage.patron_client_relationship.not_before'}, set()]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[set(), set()]
[set(), set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, {'architecture.structure.opened', 'architecture.structure.topped_out', 'architecture.structure.closed', 'architecture.structure.destruction_date', 'architecture.structure.construction_started'}]
[{'architecture.ownership.end_date', 'architecture.ownership.start_date'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[set(), set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
[{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
[{'symbols.armorial_grant.used_from', 'symbols.armorial_grant.used_until'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'award.ranking.year'}, set()]
[set(), set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
[{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[{'user.alexbl.honorary_title.honorary_title_holding.date_conferred'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.ranking.year'}, set()]
[set(), set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
[{'user.alexbl.honorary_title.honorary_title_holding.date_conferred'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'royalty.noble_title_tenure.from_date', 'royalty.noble_title_tenure.to_date'}, set()]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, {'royalty.order_of_chivalry.date_founded', 'royalty.order_of_chivalry.date_last_awarded'}]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, {'royalty.order_of_chivalry.date_founded', 'royalty.order_of_chivalry.date_last_awarded'}]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
[{'base.popstra.dated.end_date', 'base.popstra.dated.start_date'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
      0 ordinal schemas retrieved from 183 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 183 schemas.
    } [0.004s]
    [2020-12-03 14:19:19] buffer saved.
    183 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0696_schema].
  } [29.692s]
  Entering Q 697 / 5810 [b'when was the chinese flag designed?']: {
    Show 5 E + 10 T + 0 Tm + 0 Ord = 15 linkings: {
      #00 Entity: [2, 4) (the chinese) == m.013y54 (han chinese) {'score': 6075.599825, 'source': 2.0}
      #01 Entity: [2, 4) (the chinese) == m.0d05w3 (china) {'score': 64.731762, 'source': 2.0}
      #02 Entity: [3, 4) (chinese) == m.01r2l (Chinese_language) {'score': 1.035467, 'source': 1.0}
      #03 Entity: [3, 4) (chinese) == m.0d05w3 (China) {'score': 13.021791, 'source': 1.0}
      #04 Entity: [3, 5) (chinese flag) == m.01kjq0 (flag of china) {'score': 222.136421, 'source': 2.0}
      #05 Type: [4, 5) (flag) == symbols.flag (flag) {'sim': 1.0}
      #06 Type: [4, 5) (flag) == symbols.flag_use (flag use) {'sim': 0.835201}
      #07 Type: [4, 5) (flag) == pipeline.review_flag (review flag) {'sim': 0.765517}
      #08 Type: [0, 3) (when was the) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.746067}
      #09 Type: [3, 4) (chinese) == location.cn_province (chinese province) {'sim': 0.745745}
      #10 Type: [3, 4) (chinese) == location.jp_city_town (japanese citytown) {'sim': 0.729512}
      #11 Type: [0, 3) (when was the) == measurement_unit.time_unit (unit of time) {'sim': 0.727476}
      #12 Type: [0, 3) (when was the) == people.cause_of_death (cause of death) {'sim': 0.727339}
      #13 Type: [4, 5) (flag) == symbols.flag_referent (flag referent) {'sim': 0.725504}
      #14 Type: [3, 4) (chinese) == location.cn_prefecture (chinese prefecture) {'sim': 0.725086}
    } [0.000s]
    15 link data save to file.
    Coarse level searching (total entities = 5): {
      [Len-1||F1/5] (2020-12-03 14:19:37) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.013y54 ?p1 ?o1 . }
        [2020-12-03 14:19:37] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.013y54 ?p1 ?o1 . }
          Query return lines = 11
        } [0.006s]
        Filt_Query_Ret = 5 / 11 ( 0.006s)
      } [0.006s]
      [Len-1||F2/5] (2020-12-03 14:19:37) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01kjq0 ?p1 ?o1 . }
        [2020-12-03 14:19:37] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01kjq0 ?p1 ?o1 . }
          Query return lines = 6
        } [0.004s]
        Filt_Query_Ret = 0 / 6 ( 0.004s)
      } [0.004s]
      [Len-1||F3/5] (2020-12-03 14:19:37) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01r2l ?p1 ?o1 . }
        [2020-12-03 14:19:37] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01r2l ?p1 ?o1 . }
          Query return lines = 18
        } [0.015s]
        Filt_Query_Ret = 9 / 18 ( 0.015s)
      } [0.016s]
      [Len-1||F4/5] (2020-12-03 14:19:37) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0d05w3 ?p1 ?o1 . }
        [2020-12-03 14:19:37] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0d05w3 ?p1 ?o1 . }
          Query return lines = 133
        } [0.007s]
        Filt_Query_Ret = 61 / 133 ( 0.007s)
      } [0.008s]
      [Len-1||F5/5] (2020-12-03 14:19:37) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0d05w3 ?p1 ?o1 . }
        [2020-12-03 14:19:37] SPARQL hit!
        Filt_Query_Ret = 61 / 133 ( 0.000s)
      } [0.001s]
      [Len-2||F1/5] (2020-12-03 14:19:37) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.013y54 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:37] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.013y54 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 276
        } [0.021s]
        Filt_Query_Ret = 0 / 276 ( 0.023s)
      } [0.023s]
      [Len-2||F2/5] (2020-12-03 14:19:37) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01kjq0 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:37] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01kjq0 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 39
        } [0.012s]
        Filt_Query_Ret = 3 / 39 ( 0.012s)
      } [0.012s]
      [Len-2||F3/5] (2020-12-03 14:19:37) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01r2l ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:37] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01r2l ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 455
        } [0.025s]
        Filt_Query_Ret = 7 / 455 ( 0.027s)
      } [0.027s]
      [Len-2||F4/5] (2020-12-03 14:19:37) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0d05w3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:37] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0d05w3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 2121
        } [0.321s]
        Filt_Query_Ret = 198 / 2121 ( 0.330s)
      } [0.331s]
      [Len-2||F5/5] (2020-12-03 14:19:38) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0d05w3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:38] SPARQL hit!
        Filt_Query_Ret = 198 / 2121 ( 0.008s)
      } [0.009s]
      542 coarse schemas retrieved from scratch.
      Calculating F1 for 542 coarse schemas: {
        Current: 0 / 542
        Checking schema 0 / 542: {
          [('Main', '==', 'm.013y54', ['people.ethnicity.includes_groups'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.includes_groups ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.includes_groups ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.013y54'}
            Query return lines = 5
            Final Answer: {'Hoklo people', 'Teochew people', 'Cantonese people', 'Hainan people', 'Hakka people'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 1 / 542: {
          [('Main', '==', 'm.013y54', ['people.ethnicity.included_in_group'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.included_in_group ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.included_in_group ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.013y54'}
            Query return lines = 1
            Final Answer: {'Chinese'}
            Answers = 1, P = 1.000000, R = 0.166667, F1 = 0.285714
          } [0.007s]
          Answers = 1, P = 1.000000, R = 0.166667, F1 = 0.285714
        } [0.007s]
        Checking schema 2 / 542: {
          [('Main', '==', 'm.013y54', ['people.ethnicity.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.013y54'}
            Query return lines = 1
            Final Answer: {'Chinese language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 542: {
          [('Main', '==', 'm.013y54', ['people.ethnicity.geographic_distribution'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.geographic_distribution ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.geographic_distribution ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.013y54'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 4 / 542: {
          [('Main', '==', 'm.013y54', ['people.ethnicity.people'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.people ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.people ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.013y54'}
            Query return lines = 39
            Final Answer: {'Fujio Cho', 'Henry Sy', 'Liu Yan', 'Eka Tjipta Widjaja', 'Sudono Salim', "Ts'ao Yung-ho", 'Xin Sheng Mao', 'Wu Xiaoling', 'Lee Shin Cheng', 'Chaleo Yoovidhya', 'Annabel Chong', 'Robert Budi Hartono', 'Robert Kuok', 'Wu Yi', 'Quek Leng Chan', 'Sukanto Tanoto', 'Leon O. Chua', 'Tao Yang', 'Zang Shiyi', 'Lijun', 'Li Zhensheng', 'Huang Boyun', 'Zhang Haipeng', 'Xu Guangqi', 'Charlie Soong', 'Xiaoshenyang', 'Prajogo Pangestu', 'Lucio Tan', 'Hu Jintao', 'Rachman Halim', 'Cen Chunxuan', 'Jia Lu', 'Wang Ganchang', 'Yuli Yang', 'Susilo Wonowidjojo', 'Chearavanont family', 'Tan Yu', 'Li Hao', 'Putera Sampoerna'}
            Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 5 / 542: {
          [('Main', '==', 'm.01r2l', ['base.schemastaging.context_name.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:base.schemastaging.context_name.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:base.schemastaging.context_name.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 6 / 542: {
          [('Main', '==', 'm.01r2l', ['language.human_language.main_country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.main_country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.main_country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 7 / 542: {
          [('Main', '==', 'm.01r2l', ['language.human_language.language_family'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.language_family ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.language_family ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 1
            Final Answer: {'Sino-Tibetan languages'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 8 / 542: {
          [('Main', '==', 'm.01r2l', ['language.human_language.dialects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.dialects ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.dialects ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 2
            Final Answer: {'Qingtian dialect', 'Standard Mandarin'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 9 / 542: {
          [('Main', '==', 'm.01r2l', ['language.human_language.countries_spoken_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.countries_spoken_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.countries_spoken_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 7
            Final Answer: {'Vietnam', 'Canada', 'Malaysia', 'Brunei', 'China', 'Shěn', 'Singapore'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 10 / 542: {
          [('Main', '==', 'm.01r2l', ['education.field_of_study.subdiscipline_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:education.field_of_study.subdiscipline_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:education.field_of_study.subdiscipline_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 1
            Final Answer: {'Sinology'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 11 / 542: {
          [('Main', '==', 'm.01r2l', ['language.human_language.region'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.region ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.region ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 1
            Final Answer: {'East Asia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 12 / 542: {
          [('Main', '==', 'm.01r2l', ['language.human_language.writing_system'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.writing_system ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.writing_system ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 6
            Final Answer: {'Chinese', 'Nüshu script', 'Chinese characters', 'Traditional Chinese characters', 'Simplified Chinese character', "'Phags-pa script"}
            Answers = 6, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.005s]
          Answers = 6, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.006s]
        Checking schema 13 / 542: {
          [('Main', '==', 'm.01r2l', ['dataworld.gardening_hint.split_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 1
            Final Answer: {'Sinitic languages'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 14 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3
            Final Answer: {'Single-party state', 'Socialist state', 'Communist state'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 15 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Standard Mandarin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 16 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 34
            Final Answer: {"Taiwan Province, People's Republic of China", 'Chongqing', 'Anhui', 'Jiangxi', 'Hainan', 'Shanxi', 'Hebei', 'Macau', 'Guangxi', 'Shanghai', 'Liaoning', 'Hong Kong', 'Hunan', 'Beijing', 'Zhejiang', 'Qinghai', 'Heilongjiang', 'Jiangsu', 'Guizhou', 'Ningxia', 'Shandong', 'Gansu', 'Sichuan', 'Henan', 'Tianjin', 'Fujian', 'Hubei', 'Jilin', 'Yunnan', 'Guangdong Province', 'Inner Mongolia', 'Shaanxi', 'Tibet', 'Xinjiang'}
            Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 17 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 18 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 19 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Earth'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 20 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Sovereign state'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 21 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 22 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {"National People's Congress", "State Council of the People's Republic of China"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 23 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 18
            Final Answer: {'Chinese Ministry of Culture', 'Chinese Ministry of Finance', 'Chinese Ministry of Communications', 'Chinese Ministry of Transportation and Communications', 'Chinese Ministry of Foreign Trade and Economic Cooperation', 'Legislative Affairs Office of China', "National Bureau of Statistics of the People's Republic of China", 'Chinese Ministry of Education', 'Chinese Ministry of Commerce', 'Chinese Ministry of National Defense', 'Chinese Ministry of Health', 'Chinese Ministry of Economic Affairs', 'Chinese Ministry of Foreign Affairs', 'Chinese Ministry of Agriculture', 'Chinese Ministry of Justice', 'Chinese Ministry of Public Security', 'Chinese Ministry of Science and Technology', 'Chinese Ministry of Supervision'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 24 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1384
            Final Answer: {'Hsiao Ho', 'Wang Pinxian', 'Pu Shu', 'Wei Yanan', 'Li Kui', 'Francis F. Chen', 'Fuyu Li', 'H. Bentley Glass', 'Ju Wenjun', 'Cao Peng', 'Zhang Zhi', 'Wei Wenhua', 'Sun Rui', 'Cao Xiong', 'Liu Qichao', 'Linlin Sun', 'Mang-Ha Cheng', 'Sui Feifei', 'Ge Zhenfeng', 'Su Shulin', 'Wang Rui', 'Peng Guangqian', 'Xi Murong', 'Liu Xiang', 'Yu Guangyi', 'Daisy True Ryan', 'Cheng Yong', 'Ding Zhongli', 'Chan Tung', 'Wang Lin', 'Tong Hua', 'Shu Yang', 'Guo Jia', 'Huang Hu', 'Fan Yunjie', 'Zhao Tingting', 'Zhao Zuojun', 'Wang Jiancheng', 'Zu Mao', 'Guo Quan', 'Zhang Fusen', 'Deng Xiaoling', 'Shi Feng', 'Mao Yisheng', 'Xu Zhiming', 'Du Qiong', 'Samuel Lamb', 'You Wenhui', 'Guan Hanqing', 'Tom Wong', 'Yu Guohui', 'Dong Mingzhu', 'Quo Tai-chi', 'Li Qing', 'Chen Qimei', 'Tömür Dawamat', 'Tan Chengxuan', 'Ma Yueliang', 'Shi Zhecun', 'Bao Li Gao', 'Chen Yanyan', 'Liu Jue', 'Dong Xiaoqin', 'He Jing', 'Jiang Ximing', 'Zhao Lan', 'Yang Jianhou', 'Sima Zhao', 'Li Yan', 'Saburo Okita', 'Wang Xiaohong', 'King Hui of Wei', 'Liu Qiuhong', 'Katrina Leung', 'Tan Miao', 'Li Keyong', 'Zhu Chenghu', 'Jiang Lan', 'Weilong Song', 'Anthony Yuen', 'Lou Zhenggang', 'Xu Xu', 'Shi Yafeng', 'Yang Zhichao', 'Luo Ronghuan', 'Yang Mingxia', 'Margaret Mellis', 'Hu Kai', 'Guo Peng', 'Ren Chengyuan', 'Yang Erche Namu', 'Li Chunfeng', 'Xu Yonglai', 'He Min', 'Sun Quan', 'Tao Siju', 'Chen Mingde', 'Zhao Tingyang', 'Yuan Aijun', 'Fu Zhihuan', 'Qu Lei Lei', 'Ming Hsieh', 'Duke Fishman', 'Chin Ning Chu', 'Ven Te Chow', 'Cao Hong', 'Huang Zhongming', 'Yang Shou-chung', 'Ji Ting', 'Luo Yanlin', 'Dai Xi', 'Liu Rui', 'Ying Lee', 'Liu Zhihua', 'Pu Zhiqiang', 'Zhang Na', 'Xiao Hailiang', 'Zhang Zhenshi', 'Feng Yunshan', 'Zhiyi', 'Ge Wang', 'Lin Miao', 'Li Jingtian', 'Cai Xiang', 'Peng Chun Chang', 'Chen Xujing', 'Yang Feng', 'Mu Tiezhu', 'Aiping Wang', "Wu Chien-ch'uan", 'Sun Jian', 'Linji Yixuan', 'Wang Min', 'Shi Guangnan', 'Huang Yong', 'Barbara Brooks Wallace', 'Emperor Yuan of Han', 'Sun Long', 'Cao Mao', 'Ding Guangen', 'Lü Meng', 'Wang Yongmin', 'Li Qi', 'Chunli Li', 'Steve Chen', 'T. C. Hsu', 'Sun Yuan & Peng Yu', 'Du Deyin', 'Hou Fenglian', 'John Huang', 'Yung Ho-Yin', 'Jian Yang', 'Chen Huijia', 'John Fernström', 'Zhang Enjian', 'Zhu Dawei', 'Chen Yaoye', 'Sun Ming Sheu', 'Shakti Chen', 'Joseph Neng Shun Kwong', 'Peng Huanwu', 'Wu Jing', 'Liu Jiayi', 'Wen Shizhen', 'Dong-xue Li', 'Ye Duzheng', 'Ye Peijian', 'Li Mi', 'Wang Ruoshui', 'Tang Xianzu', 'Zhang Taofang', 'Gu Changsheng', 'Liu Feng', 'Zhou Yafei', 'Chen Shen', 'Dazu Huike', 'Gong Xiaobin', 'Li Zhengyu', 'Guo Yingqiu', 'Yuan Yin', 'Gu Yue', 'Ng Man-tat', 'Edward Qiu', 'Os Guinness', 'Liang Boqiang', 'Chen Haixia', 'Hu Ning', 'Zhang Xiaoguang', 'Chen Ji', 'Tang Zhengdong', 'Fan Kuan', 'Zhang Hui', 'Gan Siqi', 'Zhang Aiping', 'Xu Yan', 'Zhang Deguang', 'Shen Tong', 'Tung Chee-chen', 'Cai Mingjie', 'Wu Guangxin', 'Bo Caviezel', 'Yim Wing-chun', 'Anzhong Wang', 'Han Qide', 'Cui Hao', 'Xu Liangying', 'Li Chuan Yun', 'Lei Chen', 'Yuanwu Keqin', 'Ren Liping', 'Huang Wei', 'Qinmin Jiang', 'Jing Hao', 'Sun Shuyun', 'Ma Lin', 'Zhang Libin', 'Gu Beibei', 'Cheng Pu', 'Wang Ting', 'Cai Jinbiao', 'Qu Xiao-Song', 'Xu Guangxian', 'Xiaolu Guo', 'Wu Tao', 'Yin Hao', 'Ah Wing', 'Sun Zhongtong', 'Chung-ying Cheng', 'Anqi Tan', 'Lu Keng', 'Cao Chun', 'Yao Zhen', 'Chunyu Qiong', 'Li Wenliang', 'Ling Gu', 'Amanda Zhao', 'Yuan Yida', 'Jiao Huafeng', 'David Ji', 'Arthur W. Hummel, Jr.', 'Alexander Besher', 'Richard Wang', 'Lü Ji', 'Wei Yili', 'Ken Lee', 'Huang Yijun', 'Qiang Wei', 'Zhou Yuan', 'Shi Shen', 'Shi Haoran', 'Wei Zhu', 'Yao Ye', 'Zhu Guo', 'Yang Guoqiang', 'C. C. Wang', 'Li Yu', 'Jiang Hua', 'Liao Hui', 'Lin Sang', 'Qin Hui', 'Pan Haidong', 'Cai Yong', 'Teng Wei', 'Lu Su', 'Yuan An', 'He Jiong', 'Hou Yingli', 'Zhuge Zhan', 'Zhao Yanni', 'Polly Bemis', 'Fong Chong Pik', 'Li Wen', 'Yang Chengwu', 'Liu Dongsheng', 'Huang Xing', 'Feng Liming', 'Duan Ju', 'Ma Rui', 'Pan Song', 'Zhu Zhixin', 'Conrad Lee', 'Ke Hu', 'Deng Jian', 'Zhang Zhao', 'Han Ping Chien', 'Zhang Ai', 'Cui Zizhong', 'Chongzhen Emperor', 'Yiduan', 'Sun Shengnan', 'Hao Xingchen', 'Zhao Shiyan', 'Wang Puchen', 'Yuan Yufang', 'Xi Aihua', 'Xing Aowei', 'Xu Shen', 'Bo Ching', 'Yang Chonghui', 'Zhou Xiaolan', 'Du Zhongyuan', 'Gao Xiqing', 'Tsi-Ang Chin', 'Qin Kanying', 'He Ying', 'Hou Bin', 'Jiang Jianqing', 'Chen Wu', 'Daobin Du', 'Zhang Zhijian', 'Jêmusu Miki', 'Zhou Jihong', 'Cui Jianjun', 'Li Tang', 'Qian Liren', 'Xiulu Ruan', 'Yan Hongyan', 'Su Yiping', 'Tuo Jiaxi', 'Jiang Weixin', 'Guo Weicheng', 'Han Ling', 'Chu Tien Yun', 'Li Na', 'Dao Yang', 'Zhang Shuguang', 'Wu Yuhua', 'Zhu Weiqun', 'Zhao Rui', 'Aiko Nagayama', 'Fan Jie', 'Xu Xing', 'Yan Jiaqi', 'Fang Man', 'Cao Xianming', 'Xiong Qinglai', 'Xu Wenlung', 'Peggy Yu', 'Wang Zhen', 'Zhang Weida', 'Legqog', 'Yong Fujun', 'Jian Li', 'Zhang Qingwei', 'Jigme Gyatso', 'Shi Dan', 'Hu Ge', 'Li Li', 'David Wei', 'Li Zhuo', 'Zhang Qinsheng', 'Zhang Shuqi', 'Zhang Henshui', 'Mazu Daoyi', 'Cao Xiandong', 'Dai Jinhua', 'Wang Jian', 'Bai Jingfu', 'Kim Jiang', 'Lei Kit Meng', 'Li Xiangyu', 'Jimmy Meng', 'Kun-Liang Guan', 'Min Zhou', 'Shoucheng Zhang', 'Xu Kuangdi', 'Ahmet Li', 'Gao Huan', 'Tan Xiao', 'Leung Jan', 'Alvin K C Ng', 'Zhu Zhaoxiang', 'Yao Lifa', 'Bian Lan', 'Mingjie Zhang', 'Sisi Chen', 'David Caviezel', 'Liu Haitao', 'Chen Tianqiao', 'Wang Qingyun', 'Andrew Liao', 'Zeng Guoqiang', 'Li Chengpeng', 'Huang Ji', 'Wang Hui', 'Yingmei Duan', 'Xiaomin Huang', 'Xiaokai Yang', 'Ren Wanding', 'Zhang Haiying', 'Shan Zou Zhou', 'Wang Qiang', 'Zu Geng', 'Zeng-Yuan Guo', 'Li He', 'Zhao Yongsheng', 'Huang Bore', 'Michael Anti', 'Zou Yigui', 'David X. Li', 'Wu Yang', 'Luodan Wang', 'Liu Hulan', 'Yang Xiuqing', 'Wang Jie', 'Pei Songzhi', 'Zhou Guoping', 'Na Jiang', 'Yang Fang', 'Zhu Guangqian', 'Loh Boon Siew', 'Chor-Shan Wong', 'George Price Hays', 'Wang Jinshan', 'Xunzi', 'Liang Jinrong', 'Chen De', 'Li Dequan', 'Li Shongjian', 'M. T. Cheng', 'Mei Qing', 'Xiong Xiling', 'Li Hongxue', 'Wang Yuanlu', 'Ma Hong', 'Mengtao  Xu', 'Anna Guo', 'John Yu', 'Liu Zhiwei', 'Wang Jiarui', 'Charles Luk', 'Wang Nan', 'Zhang Wo', 'Dong Liqiang', 'Han Dayuan', 'Sam Hou Fai', 'Xiaoming Wang', 'Ma Liyun', 'Guan Tong', 'Zhang Peng', 'Hsiang Li', 'Li Shilong', 'Gao Xu', 'Emperor Houshao of Han', 'Ben Zhang', 'Yang Shu', 'Du Huan', 'Mai Cheng', 'Hu Shuli', 'Sunny Xie', 'Li Dan', 'Ouyang Yu', 'Wu Jie', 'Mei Ping Wu', 'Sha Menghai', 'Liu Weishan', 'Chen Changzhi', 'Xin Tong', 'Hu Zhengyue', 'Wu Zhen', 'Chen Kuiyuan', 'Zhaozhou Congshen', 'Wang Yiguang', 'Zhang Hongbo', 'Yang Yan', 'Yang Wenjun', 'Guan Xing', 'Sun Linlin', 'Zhao Hongzhu', 'Wang Liping', 'Dang Ye-Seo', 'Li Shu-hua', 'Xiuxin Deng', 'Man-ming Tao', 'Erin Pizzey', 'Dong Chunhua', 'Song Aimin', 'Zhong Wenjing', 'Wang Shizhen', 'Chen Gang', 'Chester Ronning', 'Hsue-Chu Tsien', 'Li Jie', 'Eva Jin', 'Wang Zheng', 'Katherine Cheung', 'Song Lian', 'Wumen Huikai', 'Chen Hao', 'Liu Junnan', 'Hongbin Zhao', 'Yang Ning', 'An Tsan Hu', 'Dahui Zonggao', 'Huang Qingyi', 'Richard Butson', 'Li Ji', 'Zhang Yufeng', 'Zheng Lihui', 'Faith Cook', 'Jia Yubing', 'Zhao Jiuzhang', 'Lei Donghui', 'Teh Cheang Wan', 'Liu Shilan', 'Qian Qianyi', 'Qiang Huang', 'Chen Youliang', 'Zhang Lixia', 'Yang Jisheng', 'Yao Shi', 'Nene Tomita', 'Zhou Bohua', 'Zeng Jing', 'Li Zhi', 'Ding Fang', 'Hu Xia', 'C. Y. Lee', 'Xiang Jun', 'Melek Hu', 'Wang Chengyi', 'Bik-kin Ho', 'Xiao Jie', 'Jiang Lin', 'Li Shangyin', 'Ling Yun', 'Qin Dongya', 'Mai Lisi', 'Li Haopei', 'Bao Zhong', 'Empress Mao', 'Zhang Ji', 'Yang Yinliu', 'Li Chengyu', 'Wang Dazhi', 'Feng Yong', 'Sang Siu', 'Jia Chong', 'Wu Wenbing', 'Zhang Yang', 'Zhang Qun', 'Bo Ma', 'Su Hui', 'Di Li Feng', 'Yin Mei', 'Xu Xiaoming', 'Yang Dingxin', 'Jia Lanpo', 'Liang Kai', 'Ni Yusong', 'Hu Yaoyu', 'Wang Bo', 'Leanne Liu', 'Chen Jiangong', 'Ho-Kwang Mao', 'Yu Mingtao', 'Han Park', 'Chu Chi Zui', 'Yingdi Sun', 'Wang Chuanfu', 'Chen Jue', 'Zhang Xianliang', 'Zou Zhe', 'Zhang Suozhi', 'Sam Looc', 'Lia Marino', 'Shi Zhiyong', 'Ma Yuan', 'Ma Nancy Chih', 'Chai Songyue', 'Shi Zongyuan', 'Zhu Shijie', 'Sima Shi', 'Wang Daohan', 'Shui-Bo Wang', 'Lung Fong', 'Hua Jianmin', 'Kong Bai Ji', 'Brother Yun', 'Luo Yufeng', 'Zheng Zhong', 'Zhang Zhenwang', 'Tao Hua', 'Liu Xiaomei', 'James Wang', 'Zhaoming Wu', 'Winston Wong', 'Li Qinglong', 'Liu Yali', 'John Chiang', 'Yang Zi', 'Xu Guangchun', 'Paul Yü Pin', 'Han Feng', 'Wang Fuzhou', 'Pai Wei', 'Wu Qi', 'Jiang Weijie', 'King Hou Chang', 'Zhang Yi', 'Jia Yong', 'Lu Min', 'Liang Fa', 'Tang Li', 'Lin Sen', 'Zhuge Jin', 'He Zhenliang', 'Qi Hui', 'Milton Feng', 'Juran', 'Mu Yongjie', 'Zhang Bin', 'Qi Jia', 'Li Xiaopeng', 'Guo Lusheng', 'Kūsankū', 'Victor Ling', 'Hiu Lui Ng', 'Xi Shi', 'Howe Yoon Chong', 'Duan Yongping', 'Cao Zhang', 'Yingjie Jay Guo', 'Tong Yuanming', 'Xie Xide', 'Zhang Chong', 'Yang Hengjun', 'Zhang Ziping', 'Lan Ying', 'Lim Lean Teng', 'Mozi', 'Wang Zhao', 'Ouyang Ziyuan', 'Angus Donald', 'Wu Mingqian', 'Li Shixing', 'Patsy Toh', 'Qu Cheng', 'Wu Xun', 'Chen Qi', 'Wang Guangli', 'Shi Jinsong', 'Li Gonglin', 'Yu Dan', 'Flossie Wong-Staal', 'Tian Fengshan', 'Hanshan', 'Jiang Fangzhou', 'Lin Ta', 'Wang Dongming', 'Xue Muqiao', 'Daoxing Xia', 'Wang Liang', 'Han Mei', 'Sun Dongmei', 'XiXi Yang', 'Yu Jianrong', 'Lin Bin', 'Wei Xu', 'Zhou Dan', 'Yunte Huang', 'An Yang', 'Wang Fei', 'Zhang Ouying', 'Fan Wu', 'Zhang Yutai', 'Jiang Jing', 'Eric Ding', 'Yuan Yao', 'Fang Xuanling', 'Wu Wenjin', 'He Qiuxia', 'Kenneth Chan', 'Wei Liqun', 'Fenggan', 'Zhang Guohua', 'Bin Xie', 'Li Xiang', 'Hsu Ta Tung', 'Cui Zi En', 'Zhang Li', 'Liu Zhongsheng', 'Li Rongxiang', 'Chen Zhaoxia', 'Wang Zi-Ping', 'David K. Lam', 'Yan Hui', 'James Lin Xili', 'Liu Jinli', 'Sun-Yung Alice Chang', 'Yan Tang', 'Wang Pin', 'Chen Mingshu', 'Xu Yuan', 'Zhang Yanmei', 'Zhang Zuoji', 'Tang Di', 'Zheng Min', 'Xu Yinchuan', 'Chen Zhangliang', 'Chen Lu', 'Xiao Yanling', 'Li Bai', 'Zhang Zhiqing', 'Xue Haifeng', 'Xiao Shuxian', 'Tania Verstak', 'Tan Jiazhen', 'Xu Yifan', 'Ding Dang', 'Xu Zhiqiang', 'Mu Chu', 'Wang Libin', 'Huang Longshi', 'Con Slobodchikoff', 'Chung Ping Geung', 'Zhu Yanfeng', 'Li Di', 'Cai Cheng', 'Shao Yong', 'Zhou Ji', 'Zheng Bijian', 'Jin Nakayama', 'Yao Jingyuan', 'Ni Hong', 'Guo Xi', 'Wei-Jun Jean Yeung', 'Chu Lam Yiu', 'Ge Weiqing', 'Wu Qiwei', 'George Chan', 'Da Chen', 'Wang Xiaoyan', 'Sun Jun', 'Zhu Qianzhi', 'Wang Jinping', 'Liu Xingju', 'Hui-fen Huang', 'Wang Sanyun', 'Zhou Jiannan', 'Tian Chengping', 'Wang Jianmin', 'Cai Wen', 'Zhu Hong', 'Zhang Xuezhong', 'Hao Weizhen', 'Zhang Daoling', 'Peter Xu', 'Wang Lu', 'Zhang Rongkun', 'Tian Jia', 'Qian Liu', 'Fan Qunxiao', 'Lu Bing', 'Yu Fengtong', 'Yuan Baohua', 'Xiong Guangkai', 'Xu Zhihong', 'Qin Chuan', 'Zhang Jian', 'Xu Xiaonian', 'Tian Pengfei', 'Xu Wei', 'He Xuntian', 'Stephen S. Chang', 'Yan Liang', 'Tang Xiaoyin', 'Liu Dongdong', 'Wang Shijing', 'Georgette Chen', 'Wang Zili', 'Yu Bin', 'Longqing Emperor', 'Fayun', 'Wu Xue', 'Zhang Yunchuan', 'Henry C. Yuen', 'Yasuki Chiba', 'Liu Zhongli', 'Emperor Zhang of Han', 'Rose Chan', 'Hu Weidong', 'Chen Weiqiang', 'Shen Qing', 'Huang Ding', 'Yue Huang', 'Yuan Weimin', 'Lau Pak Khuan', 'Han Hsieh', 'He Man', 'Ji Desheng', 'Liu Ailing', 'Zhang Yulin', 'Liu Yuxi', 'Xiao Xian', 'Liu Hailong', 'Qi Lu', 'Peter Joseph Fan Xueyan', 'Gee Jon', 'Hefang Wei', 'Yan Yuan', 'Evans Chan', 'Li Yanxi', 'Dongchu', 'Wu Ningkun', 'Cai Wenji', 'Zhou Hexi', 'Qi Guangpu', 'Fan Changjiang', 'Li Delun', 'Chen Ziyuan', 'Lu Zhi', 'Sun Chao', 'Wang Xibin', 'Ban Zhao', 'Mu Shiying', 'Seah Eu Chin', 'Tan Feihu', 'Zhuang Xiaotian', 'He Yong', 'Cao Rui', 'Lei Huang Mendes', 'He Zuoxiu', 'Percy Evans', 'Liu Yijun', 'Mo Xiong', 'Jia Dao', 'Bechet Allen', 'Wong Doc-Fai', 'Liu Kai', 'Dai Zhen', 'Mak Sai Ying', 'Huimin Zhao', 'Zhang Wenkang', 'Xu Xi', 'Wang Kun', 'Ma Liwen', 'Jia Zhanbo', 'Gao Zhongxun', 'Ding Wei', 'Shi Yunsheng', 'Li Huayun', 'Sun Li', 'Yang Rong', 'Shi Yuejun', 'Hua Tian', 'Niki Lin Marino', 'Chen Zhongwei', 'Huang Qiuyan', 'Seok Ha-Jung', 'Wang Zongyue', 'Chu Koyuan Dexing', 'Xun Huisheng', 'Ming Jiang', 'An Zhongxin', 'Larry Zhixing Hu', 'Xiang Huaicheng', 'Ma Chongchong', 'Sun Caiyun', 'Zhu Yu', 'Zeng Fanyi', 'Zhang Guobao', 'Ah Lum', 'Beda Chang', 'Li Chenhao', 'Yuan Zhen', 'Zhang Xiaohuan', 'Pu Wei', 'Li Jiankun', 'Li Caixia', 'Dan Fang', 'Mou Tun Fei', 'Wang Cheng', 'Wang Shouting', 'Wang Shiwei', 'T. C. Chao', 'Betty Kwan Chinn', 'Huang Shaohua', 'Zhang Ren', 'Yuan Zhi', 'Sima Yi', 'David Chiu', 'Fred W. Riggs', 'Ng Ser Miang', 'Murong Xuecun', 'Kefeng Liu', 'Feng Xuemin', 'Liu Wenzhe', 'Philip Wong', 'Li Rui', 'Li Xiaoni', 'Gongsun Du', 'Wu Wei', 'Cao Fang', 'Lung Wei Wang', 'Kwok Ying', 'Bora Vang', 'Zhao Keshi', 'Xue Fei', 'Jiang Jihong', 'David S. Lee', 'Jin Guozhang', 'Yang Lu', 'Frederic Hsieh', 'Ren Qi', 'Sophia Lyon Fahs', 'Li Kan', 'Bian Zhongyun', 'Lady Zhen', 'Jin Na', 'Huang Yongsheng', 'Lu Guang', 'Bian Hongmin', 'Lü Qin', 'Zhang Huikang', 'Wang Xiaotian', 'Ge Hongsheng', 'Yin Zhaohui', 'Zhang Xiaoxian', 'Qiu Yingling', 'Andy Liu', 'Shen Dingyi', 'Xiao Zhen', 'Liu Boming', 'Ning An', 'Li Chunxia', 'Zuo Quan', 'Frank Huang', 'Ni Sichong', 'Shin Dongho', 'Cao Ren', 'Yu Yongzhe', 'Lu Ruihua', 'Li Zunian', 'Joseph Li Shan', 'Huang Zhiquan', 'Chen Qinggang', 'Teoh Tiang Chye', 'Cao Chong', 'Boris Blacher', 'Li Congjun', 'Wang Dongning', 'Liu Yuan', 'Shi Hairong', 'Li Zhijian', 'Jiang Huachen', 'Shang-Hua Teng', 'Li Wenquan', 'Stephen Chang', 'Tan Zhongyi', 'Lester Wong', 'Chen Xiaomin', 'Mary Hon', 'Jia Ruhan', 'Shen Sheng', 'Wang Huan', 'Hongjia Huang', 'Su Zhe', 'Zhou Jin Hua', 'Liu Huana', 'Wang Lina', 'Zhang Weihong', 'Chu Fujia', 'Patrick Leung', 'Yun Chih Tu', 'Li Yaoping', 'Hu Ronghua', 'Zeng Jize', 'Li Huayi', 'Gao Hong', 'Zou Rong', 'Cao Yupeng', 'Ma Jianzhong', 'Wang Ruilin', 'Yin Lichuan', 'Man Dandan', 'Chen Luyu', 'Yeap Chor Ee', 'Shen Quan', 'Liu Zhongqing', 'Yizhi Jane Tao', 'Zhang Xinsheng', 'Scud', 'Zhang Xueling', 'Hu Hanmin', 'Yin Weimin', 'Yang Yuanqing', 'Zhang Lu', 'Obaku Dokuryu', 'Wu Shaoxiang', 'Yang Ying', 'Xu Yaping', 'Ding Song', 'Wang Daqing', 'Li Chunxiu', 'Liu Zongyuan', 'Tom Y. Chan', 'Huang Chuncai', 'Zhu Qi', 'Meng Yan', 'Yan Xuetong', 'Cecilia Chiang', 'Zeng Chengwei', 'Qi Jiguang', 'Haijing Huang', 'Stephanie Sang Xu', 'Chen Chunxian', 'Zhu Dexi', 'Qi Haifeng', 'Wang Zhengwei', 'Wang Chong', 'Wu Yanyan', 'Tan Weiwei', 'Chi Wanchun', 'Jiang Ziya', 'Wang Yuanji', 'Wang Fang', 'Wang Tianpu', 'Le Maosheng', 'Zhang Xiangxiang', 'Du Jin', 'Zhao Jianhua', 'Qi Wei', 'Jin Di', 'David Kuo', 'Li Ju-chen', 'Hu Jia', 'Ji Wei', 'Chen Danyan', 'Li Cheng', 'Zhang Youxia', 'Fang Chengguo', 'Liang Zhenpu', 'Cao Baoping', 'Wang Dandan', 'Chen Lin', 'Hai Ying Wu', 'Bian Jinyang', 'Wu Quanyou', 'Liu Guchang', 'Wang Lü', 'Pan Chengdong', 'Qiu Jian', 'David N.K. Wang', 'Ling Jihua', 'Mia Innes Brisbin', 'Cunzhuang Ge', 'Liu Yun', 'Almen Wong Pui-Ha', 'Li Jun Feng', 'Liu Xiaosheng', 'Yan zhiyu', 'Huang Xiangdong', 'Li Hongchen', 'Yue Li', 'Gu Hongzhong', 'Bi Sheng', 'Chan Heung', 'Lady Wu', 'Sun Lingfeng', 'He Ning', 'Lixin Fan', 'Dongshan Liangjie', 'Tao Yang', 'Helen Ma', 'Wang Yu', 'Han Fuju', 'Yilin Zhong', 'Weng Wenhao', 'Li Fang', 'Xia Nai', 'Ma Jian', 'Li Mo', 'Yu Dawei', 'Lian Yu', 'Guo Si', 'Melissa Lee', 'Yuan Shuai', 'Qin Jiushao', 'Xu Song', 'Huang Da', 'Liu Chengjun', 'Qian Yunlu', 'Yin Jian', 'Tao Sheng', 'Zhang Guozheng', 'Yun Wang', 'Fan Tingyu', 'Jiayu Liu', 'Gao E', 'H.W. Gim', 'Li Shu Fan', 'Cao Ying', 'Lucille Soong', 'Zhao Xuebin', 'Huang Xianzhong', 'Zheng Jianfeng', 'Xu Jianping', 'Liu Zhang', 'Li Zhaozhuo', 'Miao Tien', 'Cao Kun', 'Lu Ji', 'Junying Yu', 'Ma Yue', 'Wang Xufeng', 'Li Jinfang', 'Shuang Zou', 'Zhang Penghui', 'Wang Xiaoyun', 'Meng Lili', 'Yu Xiaoyang', 'Zhao Zhiwen', 'Foon Sham', 'Han Jialiang', 'Chai Zemin', "Wu Ta-ch'i", 'James P. Grant', 'Lufei Kui', 'Bu Bing', 'Lin Ju', 'Kaii Yoshida', 'Zhang Xiu', 'Xiao Yang', 'Mingming Sun', 'Kenny Ho', 'Xu Liang', 'Li Qin', 'Lyn Elizabeth Caviezel', 'Chen Shizeng', 'Dong Zhuo', 'Liang Zhongxing', 'Zhong Yao', 'Jing Fang', 'Johnson Chang', 'Dandan Jia', 'Xie Lingyun', 'Yap Kwan Seng', 'Qian Xinzhong', 'Zhou Peiyuan', 'Li Yong', 'Tan Ying', 'Liu Jianjun', 'Tang Junyi', 'Wang Pu', 'Feng Xu', 'Cui Huo', 'Xiao Junfeng', 'Yang Xian', 'Ma Mon Luk', 'Li Weiwei', 'Huang Yueying', 'Ge Hong', 'William R. Richardson', 'Bruce Lahn', 'Xiao Qing', 'Chin Sophonpanich', 'Dongshan Shouchu', 'Fu Xiancai', 'Jing Ying', 'James C. Wang', 'Meng Haoran', 'Blackie Ke Shou Liang', 'Jianzhi Sengcan', 'Gu Lingyi', 'Taixu', 'Li Zhesi', 'Chang Zhenming', 'Li Zhe', 'Jing Jing Luo', 'Wang Jing', 'Li Hua', 'Liu Yang', 'Peter Pan', 'Ken Liu', 'Hu Haichang', 'Cao Huan', 'Li Hongquan', 'Cai Li', 'Li Fuchun', 'Guo Lei', 'Fang Fenghui', 'Yu Genwei', 'Peng Yun', 'Tak Wah Mak', 'Chen Da', 'Ng Ching-fai', 'Xiaohui Fan', 'Wang Yumei', 'Shao Xianghua', 'Ren Xun', 'Peter Wong', 'Yan Liben', 'Ren Zhengfei', 'Yu Huiyong', 'Ah Louis', 'Gu Tan', 'Marvin Cheung', 'Zhang Han', 'Huang Fu', 'Huang Jialing', 'Stephen S.F. Chen', 'Zhang Shizhao', 'Wu Jin', 'Peng Peiyun', 'Lin Weiguo', 'Raymond Huo', 'Song Weilong', 'Xiangzhong Yang', 'Qin He', 'Luo Xihe', 'Zhongqing  Liu', 'Hou Xuemei', 'Li Wenhao', 'Dead J. Miquia', 'Ban Gu', 'Qi Jingxuan', 'Guo Jie', 'Wang Gang', 'Xia Gui', 'Cheng Hui', 'Andrew Wang', 'Jianying Zha', 'Liu Gong', 'K. C. Hsiao', 'Zhu Xueqin', 'Xie He', 'Geng Biao', 'Puhua', 'Yang Yang', 'An Ni', 'Zhang Lifang', 'Luo Wei', 'Jian Yi', 'Ren Xiujuan', 'Gao Changli', 'Zhang Ying', 'Sang Guowei', 'Li Shanlan', 'Wang Lei', 'Wan Xueyuan', 'Zhou Shengxian', 'Wen Hsueh Erh', 'Sun Xu', 'Y. T. Wu', 'Yu Huili', 'Chen Hang', 'Rose Pak', 'Chai Chunya', 'Wang Shasha', 'George Wang', 'wentao ye', 'Xu Shiyou', 'Liu Xiaojiang', 'Xu Yuanyuan', 'Li Xuemei', 'Chen Xing', 'Shanshan Cui', 'Yi Xing', 'Zhang Guoqiang', 'Lu Ban', 'John Law', 'B6', 'Ni Weidou', 'Qian Du', 'Li Tieying', 'Chien Wei-zang', 'Xu Jie', 'Miki Gorman', 'Kan Xuan', 'Ma Dongbo', 'Zhang Wenyue', 'Feng Dao', 'Yin Fu', 'Wu Kung-i', 'Tung Hua Lin', 'Gu Yuan', 'Xie Fuzhi', 'Li Weiliang', "Julie O'Yang", 'Li Xin', 'Wang Fengchun', 'Ke Yan', 'Lam See Chit', 'Takeo Kunihiro', 'Huang Daopo', 'He Jianjun', 'Sun Liang', 'Masayo Banri', 'Guo Shiqiang', 'Duan Yingying', 'Wang Keqin', 'Zhu Junyi', 'Huang Zuping', 'Lu Bin', 'Ye Chengzhong', 'Wu Guang', 'Li Jing', 'Wang Yang', 'Wang Fu', 'Wang You', 'Song Ci', 'Wang He', 'Jing Li', 'Zhai Biao', 'Fu Quanyou', 'Chen Chun', 'Wang Zuo', 'Xu Jiang', 'Sheng Xuanhuai', 'Peng Xiaomin', 'Wu Shaobin', 'Yu Hua', 'Guan Daosheng', 'Li Hongli', 'Terence McMeekin', 'Weng Shilie', 'Zhang Liang', 'Yang Guanghua', 'Aisiqi', 'Wang Juan', 'Eddie Wang', 'Marsha Yuen', 'Chengwu Guo', 'Zhang Yufei', 'Wai Ren', 'Zhang Weina', 'Xuetong Cai', 'Wu Mengchao', 'Yang Zhongjian', 'Wen Tsing Chow', 'Liu Penzi', 'Tomoko Matsushima', 'Su Qin', 'Hu Fang', 'Ding Yunpeng', 'Gao Xie', 'Ren Jiyu', 'Lu Hao', 'Li Minqi', 'Wu Zhiyu', 'Ren Cancan', 'Meng Lang', 'Niu Jianfeng', 'Liu Qing', 'Tan Liangde', 'Zhang Xianzhong', 'Wang Taihua', 'Huang Chao', 'Zhang Shuang', 'Yu Jing', 'Song Ligang', 'Jingshan Jiang', 'Chen Haijian', 'An Yangfeng', 'Bo Zhang', 'Shuang  Cheng', 'Cao Anmin', 'George Ashmore Fitch', 'Ding Ying', 'Feng Zhenghu', 'Wang Ling', 'Chi Minghua', 'Chuan-Chih Hsiung', 'Wang Chongwei', 'Arthur de Carle Sowerby', 'Bonnie Kathleen Gilliland', 'Piao Wenyao', 'Zhang Xin'}
            Answers = 1369, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.044s]
          Answers = 1369, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.044s]
        Checking schema 25 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.partially_contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 6
            Final Answer: {'Himalayas', 'Mount Everest', 'Broad Peak', 'Karakoram', 'K2', 'Jengish Chokusu'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 26 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.belongs_to_combatant_group'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Triple Entente'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 27 / 542: {
          [('Main', '==', 'm.0d05w3', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Chun-Li', 'Huang Pao-Lin'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 28 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 30
            Final Answer: {"China women's national basketball team", 'China PR national football team', "China women's national softball team", 'China national under-20 football team', "China women's national water polo team", "China men's national volleyball team", "China men's national ice hockey team", 'China national handball team', "China women's national handball team", 'Bayi Yiyang High-Tech District', "China national women's cricket team", "China men's national junior ice hockey team", "China women's national under-17 football team", 'China national cricket team', 'A1 Team China', "China women's national ice hockey team", "China men's national basketball team", 'China national under-23 football team', "China men's national water polo team", 'China Davis Cup team', 'China national under-17 football team', 'China national korfball team', "China women's national under-20 football team", "China women's national rugby union team", 'China PR national beach soccer team', 'China national baseball team', "China women's national football team", 'China PR national futsal team', "China women's national volleyball team", 'China Fed Cup team'}
            Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 29 / 542: {
          [('Main', '==', 'm.0d05w3', ['meteorology.cyclone_affected_area.cyclones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:meteorology.cyclone_affected_area.cyclones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:meteorology.cyclone_affected_area.cyclones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 64
            Final Answer: {'Typhoon Vicente', 'Typhoon Kompasu', 'Typhoon Fred', 'Typhoon Ora', 'Typhoon Xangsane', 'Typhoon Haikui', 'Typhoon Matsa', 'Typhoon Mike', 'Typhoon Damrey', 'Typhoon Megi', 'Typhoon Fanapi', 'Typhoon Pabuk', 'Typhoon Kai-tak', 'Typhoon Parma', 'Typhoon Angela', 'Tropical Storm Kammuri', 'Typhoon Billie', 'Tropical Storm Linfa', 'Typhoon Nina', 'Typhoon Babe', 'Typhoon Joan', 'Typhoon Koryn', 'Typhoon Conson', 'Typhoon Jangmi', 'Typhoon Rananim', 'Typhoon Chanchu', 'Typhoon Babs', 'Typhoon Elsie', 'Typhoon Rammasun', 'Typhoon Wanda', 'Typhoon Dot', 'Typhoon Talim', 'Typhoon Wipha', 'Typhoon Emma', 'Typhoon Prapiroon', 'Tropical Storm Bilis', 'Typhoon Tembin', 'Typhoon Rose', 'Typhoon Wayne', 'Typhoon Imbudo', 'Typhoon Ike', 'Typhoon Haitang', 'Typhoon Aere', 'Typhoon Saola', 'Typhoon Morakot', 'Typhoon Longwang', '1922 Swatow typhoon', 'Typhoon Nari', 'Typhoon Ketsana', 'Typhoon Omar', 'Typhoon Ewiniar', 'Typhoon Sepat', 'Typhoon Sanba', 'Typhoon Herb', 'Typhoon Fung-wong', 'Typhoon Sinlaku', 'Typhoon Winnie', 'Typhoon Hagupit', 'Typhoon Gordon', 'Typhoon Kent'}
            Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 30 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.locations.countries.continent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Asia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 31 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.locations.countries.places_within'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.locations.countries.places_within ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.locations.countries.places_within ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Songhong Road Station'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 32 / 542: {
          [('Main', '==', 'm.0d05w3', ['book.periodical_subject.periodicals'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:book.periodical_subject.periodicals ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:book.periodical_subject.periodicals ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Modern China', 'Far Eastern Economic Review'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 33 / 542: {
          [('Main', '==', 'm.0d05w3', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3
            Final Answer: {'Guangzhou Zhu Jiang Brewery Co.Ltd. Zhu Jiang Beer', 'Tsingtao Beer', 'Harbin Beer'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 34 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.casinos.casino_theme.casinos_in_this_theme'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.casinos.casino_theme.casinos_in_this_theme ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.casinos.casino_theme.casinos_in_this_theme ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'The Quad Resort and Casino'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 35 / 542: {
          [('Main', '==', 'm.0d05w3', ['biology.breed_origin.breeds_originating_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 18
            Final Answer: {'Tibetan Spaniel', 'Tibetan Mastiff', 'Shih Tzu', 'Pekin Bantam', 'Tibetan Terrier', 'Pekingese', 'Silkie', 'Pug', 'Chinese Imperial Dog', 'Lhasa Apso', 'Croad Langshan', 'Cochin', 'Chinese Chongqing Dog', 'Chow Chow', 'Shar Pei', 'Chinese Crested Dog', 'Formosan Mountain Dog', 'Japanese Chin'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 36 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Renminbi'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 37 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 10
            Final Answer: {'Nepali Language', 'Korean Language', 'Standard Tibetan', 'Esperanto Language', 'Chinese language', 'Yue Chinese', 'English Language', 'Mongolian language', 'Portuguese Language', 'Zhuang languages'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 38 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3
            Final Answer: {'cn', 'hk', 'mo'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 39 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.uncommon.topic.exceptions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.uncommon.topic.exceptions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.uncommon.topic.exceptions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 12
            Final Answer: {'The type Chinese City District does not specify where instances may appear.', 'The type Chinese Township does not specify where instances may appear.', 'Chinese autonomous region subdivides types at different levels.', 'Chinese city shi subdivides types at different levels.', 'Chinese province traditional eighteen is subdivided by types at different levels.', 'The type Chinese County Level City does not specify where instances may appear.', 'The type Chinese Autonomous County does not specify where instances may appear.', 'The type Chinese County District does not specify where instances may appear.', 'Chinese autonomous region traditional eighteen is subdivided by types at different levels.', 'The type Chinese Subdistrict does not specify where instances may appear.', 'The type Chinese League does not specify where instances may appear.', 'The type Chinese Town does not specify where instances may appear.'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 40 / 542: {
          [('Main', '==', 'm.0d05w3', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {"Mao's Last Dancer"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 41 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 6
            Final Answer: {'Chinese autonomous region', 'Chinese province traditional eighteen', 'Chinese municipality', 'Chinese province', 'Chinese special administrative region', 'Chinese autonomous region traditional eighteen'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 42 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 4
            Final Answer: {"President of the People's Republic of China", "Vice President of the People's Republic of China", "Vice Premier of the People's Republic of China", "Premier of the People's Republic of China"}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 43 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Government of China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 44 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d05w3 fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 WHERE { fb:m.0d05w3 fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'1949'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 45 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:38] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3739
            Final Answer: {'Mishan', 'Lanzhou', 'Beijing Jiaotong University', 'Guangxi University of Technology', 'LORAN-C transmitter Helong', 'Xintiandi', 'Gyazhug', 'Yarkant County', 'Fahai Temple', 'Ranghulu District', 'Kangrai', 'Yangtze Normal University, Lidu', 'Zhejiang University of Technology', 'Sancam', 'Xinxing County', 'National Judges College', 'Tuglung', 'Yuechi County', 'Wuzhou Changzhoudao Airport', 'Xinjin Airport', 'Jiayuguan Airport', 'Tianjin Radio and Television Tower', 'Morin Dawa Daur Autonomous Banner', 'Fenyang', 'Jianchang County', 'Minqing County', 'Shenyang International Finance Center', 'Hanzhong Chenggu Airport', 'Gaoligongshan Mountain', 'Chongzuo', 'Gêding', 'Boindoi', 'China Europe International Business School', 'Mount Tai', 'Yushan County', 'Wuhan Yangtze River Bridge', 'Jiangxi Blue Sky University, main campus', 'Central University for Nationalities', 'Dangquka', 'Jingbian County', 'Nyingchi Prefecture', 'East China University of Science and Technology', 'Hengli Town', 'Chongqing Railway Station', 'Guma, Pishan County', 'Shantou University', 'Nanjing Normal University', 'Yangzhou', 'Liangyuan District', 'Goicangmai', 'Yongding District', 'Mingyong Glacier', 'Tangshan', 'Kuancheng District', 'Bairi Tibetan Autonomous County', 'Christian Zheng Sheng College', 'Xayag', 'China University of Geosciences, Beijing', 'Tung Wah Group of Hospitals Li Ka Shing College', 'Shaanxi', 'Wangtang, Hunan', 'Yangpu Bridge', 'Jinggangshan University', 'University of Shanghai for Science and Technology', 'She County, Hebei', 'Liuzhou Bailian Airport', 'Shitai County', 'Southwest Agricultural University', 'Pubu', 'Sokai', 'Namcha Barwa', 'Dêngqên County', 'Potou District', 'Hebei', 'Zhanjiang Normal University', 'Donggang, Liaoning', 'Mutou Valley', 'Qi County, Kaifeng', 'Fucheng County', 'Yangchun', 'Yongjia County', 'Lanngazhoinkang', 'Fourth Military Medical University', 'Jokhang', 'The Garden Hotel, Guangzhou', 'Fuping County, Hebei', 'Luancheng County', 'Tang County', 'Huoshan County', 'Xilingol League', 'Yinhai District', 'Xingtai', 'Temple of Azure Clouds', 'Shangcheng District', 'Dalian Mosque', 'Missouri State University Branch Campus Dalian', 'Zhong Lingka', 'Gormain', 'Ili Kazakh Autonomous Prefecture', "Weng'an County", 'Weifang', 'Shanghang County', 'Inner Mongolia University of Science and Technology', 'Honggu District', 'Changlung', 'Hainan Tibetan Autonomous Prefecture', 'Rongcheng, Shandong', 'Huachuan County', 'Lintao County', 'North China Baptist College, main campus', 'Zhengding County', 'Jilin Normal University', 'Xiashan District', 'Three Gorges', 'Wenchang Satellite Launch Center', 'Wulong County', 'Northwest Normal University', 'Jingtai County', 'Hangzhou Wanxiang College, main campus', 'Kunming University of Science and Technology', 'Tancheng County', 'Wanxian Bridge', 'Guanling Buyi-Miao Autonomous County', 'Sok Kwu Wan', 'Taiyuan Normal University', 'Pêxung', 'Jiuyuan District', 'Tongji University', 'Immaculate Heart of Mary College', 'Shijingshan Stadium', 'Jimo', 'Xinxiang Medical University', 'Quanzhou Normal University', 'Haixinsha Island', "Chong'an District", 'Luwan Gymnasium', 'Tianjin Railway Station', 'Dangyang', 'Shancheng District', 'Xinbin Manchu Autonomous County', 'Yudu County', 'Jiulongpo District', 'Tacheng Airport', 'Huairou District', 'Garco', 'Nanchang University of Finance and Economics, main campus', 'Shangrao Normal University, main campus', 'Shandong Peninsula', 'Open University of Hong Kong', 'Dejiang County', 'Binyang County', 'Shandong', 'Anren County', 'Yanbian University', 'Shapingba District', 'Xinhuang Dong Autonomous County', 'Yingtan', 'Siziwang Banner', 'Assembly of God Morrison College', 'Tianjin', 'Chongming County', 'Dulwich College Suzhou', 'Handan College', 'Lianzhou', 'Jiashan County', 'Huojia County', 'Hubei University', 'Hekou Yao Autonomous County', 'Datong Hui and Tu Autonomous County', 'Yuping Dong Autonomous County', 'Chongqing Three Gorges University', 'Jinshui District', 'Tagong', 'Goldin Finance 117', 'Dongcheng District', 'Hoxud County', 'Qimen County', 'Togqên', 'Changzhou', 'Mount Lu', 'Yunnan University of Traditional Chinese Medicine', 'Wenshan Zhuang and Miao Autonomous Prefecture', 'Taonan', 'Yugan County', 'Ankang', 'Shenyang Institute of Chemical Technology', 'Lishui Vocational Technical College, main campus', 'Shenzhen Railway Station', 'Taocheng District', 'Liaocheng University', 'Fenghua', 'Mili Tibetan Autonomous County', 'Garbiutangka', 'Guangzhou North Railway Station', 'Yining Airport', 'Yongchun County', 'Jiaozuo', 'Gambaxoi', 'Chongwen District', 'Shacheng', 'Longquan', 'Zongga', 'Wanbang gardens', 'Xinhui District', 'Weixi Lisu Autonomous County', 'Palcho Monastery', 'Zhanjiang', 'Shanghai Fisheries University', 'Manchuria', 'Wenzhou Longwan International Airport', 'Lanping Bai and Pumi Autonomous County', 'Talu, Tibet', 'Sifangtai District', 'Xikou', 'Jainzhug', 'Xiushan Tujia and Miao Autonomous County', 'Chaoyang District', 'Bordered Yellow Banner, Inner Mongolia', 'Datianwan Stadium', 'Jinxiang County', 'Ankang Wulipu Airport', 'Yibin', 'Dalian Jiaotong University', 'Dehong Dai and Jingpo Autonomous Prefecture', 'Laishui County', 'Mazong Mountain', 'Bangkor', 'Grand Buddha at Ling Shan', 'Gongcheng Yao Autonomous County', 'Beacon Hill School, Hong Kong', 'Hubei Normal University, main campus', 'Zhabei Stadium', 'Sangdê', 'Anshan', 'Sangxung', 'Hunan University', 'Peking University', 'Nantong University', 'Xuankou', 'Gyêwa', 'Agricultural University of Hebei', 'Huludao', 'Sanshui District', 'Honghu', "Ping'an County", 'Beijing Midi School of Music', 'Gêgar', 'Sêrdê', 'Shanghai Institute of Foreign Trade', 'Anhui', 'Günsa', 'Kangshung Glacier', 'Xuzhou Normal University', 'Soochow University', 'Huangshan University, main campus', 'Genbao Football Base', 'Zhengding Airport', 'Macau', 'Chuzhou', 'Loping Airfield', 'Yueyang', 'QualiEd College', 'United International College', 'Luqu County', 'Quanzhou', 'Dalian Zhoushuizi International Airport', 'Siming District', 'Targyailing', 'International Finance Centre', 'Xuanwu District, Beijing', 'Jimei University', 'Shanxi Medical University', 'Wuning County', 'Southwest University', "Humble Administrator's Garden", 'CCC Heep Woh College', 'Ngamring County', 'Purgadala', 'Jilin City', 'Sacred Heart Canossian College', 'Gujiao', 'Licheng County', 'Batang, Batang County', 'Qinghai Medical College', 'Nanjing Agricultural University', 'Putuo Zongcheng Temple', 'Hailar', 'Pavilion of Prince Teng', 'Taikang County', 'Hong Kong International Airport', 'Meihu Sports Centre', 'HKSYC & IA Chan Nam Chong Memorial College', 'Fuping County, Shaanxi', 'Dzongsar Monastery', 'Püncogling', 'Langzhong', 'Xabyai', 'Yongxiu County', 'Dulwich College Beijing', 'Fragrant Mountain Temple', 'Leiyang', 'Chongqing Jiaotong University', 'Huangpu Bridge', 'Kashgar River', 'Beijing International Studies University', 'Kangbao County', 'Chengdu Plain', 'Hunan University of Science and Technology', 'Zham', 'Kangding County', 'Yongtai County', 'Xarlung', 'Tianjin Conservatory of Music', 'Central University of Finance and Economics', 'Lufeng, Guangdong', "Chun'an County", 'Sichuan University', 'Boone University, main campus', 'Summer Palace', 'Hotan', 'Southwestern University of Finance and Economics', 'Hongdong County', 'Anshan Normal University', 'Fudan University School of Law, main campus', 'Baicang', 'Jietai Temple', 'Sheshan Golf Club', 'Gongtang', 'Gohaling', 'Beijing Institute of Graphic Communication', 'University of Ningxia', 'Buddhist Yip Kei Nam Memorial College', 'Chifeng Yulong Airport', 'Xia County', 'Shipu Bay', 'Wulihe Stadium', 'Liandu District', 'Taizhou', 'Qingxin District', 'Jinjiazhuang District', 'Huancui District', 'Beilun District', 'Xinye County', 'Ruili', 'Sifang District', 'Fushun', 'Wuchuan Gelao and Miao Autonomous County', 'Qamdo Bamda Airport', 'Hangzhou', 'Biyang County', 'Wolong National Nature Reserve', 'Luojiang District', 'Tianjin University', 'Shenzhou, Hebei', 'Qinghai University', 'Guangzhou University City Stadium', 'Fuyang, Zhejiang', 'North West Agriculture and Forestry University', 'Aon Center', 'Oriental Pearl Tower', 'Lui Ming Choi Lutheran College', 'Honghe Hani and Yi Autonomous Prefecture', 'École Centrale de Pékin', "Lin'an City", 'Goyü', 'Tianjin University of Commerce China', 'Guichi District', 'Dobqên', 'Wugang', 'Minhang District', 'Taiyuan Satellite Launch Center', 'Kamru', 'Jiaoling County', 'Beijing Zoo Station', 'Tianmen', 'Norma, Tibet', 'Lijiang', 'Jongnag', 'Zhoushan', 'Capital Medical University', 'Huaishang District', 'Têmo', 'Jiaxing', 'Gyaxing', 'Tongchuan', 'Yangtze Normal University, Jiangdong', "Jin'an District, Lu'an", 'Shandong Theological College main campus', 'Sanming Shaxian Airport', 'Civil Aviation Flight University of China', 'Xiluodu Dam', 'Hukou County', 'Shuangqiao District, Chongqing', 'Dongguan Stadium', 'Kaiyuan, Yunnan', 'Eshan Yi Autonomous County', 'Lingyin Temple', 'Camco, Gêrzê County', 'Amoy College', 'Conggo', 'Wenzhou Medical College', 'Linquan County', 'Shaoxing', 'Santai County', 'Qiqihar', 'Xoisar', 'Ling County', 'Lincoln', 'Hangzhou Dianzi University', 'Gomo, Tibet', 'Changzhi Medical College', 'Peking University Law School, main campus', 'China University of Petroleum', 'Jade Buddha Temple', 'Gannan Medical University, main campus', 'Xishuangbanna Gasa Airport', 'Tibet', 'Gaoping', 'Kunming', 'Ningjin County, Hebei', 'Tian Shan', 'Zhidan County', 'Dianbai County', 'Panglin Plaza', 'Jianggan District', 'Northeast Forestry University', 'Islands of Shanghai', 'Zunyi', 'Hengfeng County', 'Liaoning Technical University', 'Xêxung', 'Hangzhou University', 'Wuhan Conservatory of Music, main campus', 'Jianhu County', 'Huzhu Tu Autonomous County', 'Hengyang', 'Dalian', 'Shenyang Taoxian International Airport', 'Liaoning Institute of Technology', 'Shucheng County', 'Guazhou County', 'Binzhou', 'Wuhu', 'Xidi', 'Kau Yan College', 'Sichuan Basin', 'Nanjing Yangtze River Bridge', 'Changsha University of Science and Technology', 'Central China Normal University', 'Susong County', 'Yongxin County', 'Aurora University', 'Gyirong County', 'Stele Forest', 'Linqu County', 'Caina', 'Maiji District', 'Shijiazhuang University of Economics', 'Golog Tibetan Autonomous Prefecture', 'Xuzhou', 'Deqing County, Zhejiang', "Gya'nyima", "Goin'gyibug", 'Chengguan Township, Shangshui County', 'Shaoxing County', 'Zaozhuang', 'Lhünzhub', 'Nanjing Massacre Memorial Hall', 'Qingcheng County', 'Shantou Airport', 'Pamir Mountains', 'Tongliao', 'Shouning County', 'Jintang Bridge', 'Hainan University', 'Chamoling', 'Beijing Dongyue Temple', 'Shangrao', 'Pêlung', 'Xujiahui Passenger Station', 'MKMCF Ma Chan Duen Hey Memorial College', 'Lhotse', 'Fuzhou Chengle International Airport', 'Yaiba, Tibet', "Nong'an County", 'Shijiazhuang Railway Station', 'Zaoqiang County', 'Yiliang County, Kunming', 'Shuitou, Jiaokou County', 'Foochow Girls College, main campus', 'Beita District', 'Luzhi', 'Wuhua County', 'Luding County', 'Yanji Chaoyangchuan Airport', 'Anyang Normal University, main campus', 'Holy Trinity College, Hong Kong', 'Shanxi', 'Shuozhou', 'Dehua County', 'Jinzhou Stadium', 'Jinhua College of Profession and Technology, main campus', 'Jishou', 'Dzogchen Monastery', 'Jiangning District', 'Yangbajing Tunnel', "Hua'an County", 'Lingering Garden', 'Lincang Airport', 'Panshan County', 'Chikan District', 'Nyenchen Tanglha Mountains', 'Beijing Institute of Machinery', 'Danyang, Jiangsu', 'Toiba', 'Shenzhen Graduate School of Tsinghua University, main campus', 'Kuqa Qiuci Airport', 'Sichuan Fine Arts Institute', 'Songtao Miao Autonomous County', 'Dazu District', 'Meixian Airport', 'Xi’an Jiaotong-Liverpool University', 'Sanmenxia', 'Tiananmen Square', 'Huizhou District', 'Kaidu River', 'Tanghe County', 'Youyang Tujia and Miao Autonomous County', 'Chengtu Airfield', 'Riwoqê County', 'Zhangjiachuan Hui Autonomous County', 'Hongor', 'Xiahe County', 'United Christian College', 'The Aowei Church of Holy Rosary', 'Chengwu County', 'Garyarsa', 'Zhuzhou', 'Chibi City', 'Qingchuan Bridge', 'South China Normal University', 'Dongfang, Hainan', 'University of South China', 'Guangdong Provincial Museum', 'Fengzhen', 'Liede Bridge', 'Guangdong Institute of Science and Technology', 'Pok Fu Lam Reservoir', "Shenzhen Bao'an International Airport", 'Sar, Tibet', 'Pengshui Miao and Tujia Autonomous County', 'Jinwan District', 'Shigatse Prefecture', 'Xiangtan Sports Centre', 'Lijiang Naxi Autonomous County', 'Dalian Nationalities University', 'Leizhou', 'Sanglai', 'Songzanlin Monastery', 'Hebei University of Science and Technology', 'Ngoqudoima', 'Zhejiang Yuying College of Vocational Technology', 'Lianjiang County', 'Sinda, Tibet', 'Chuxiong City', 'Zhenjiang', 'Suining County, Jiangsu', 'Têwo County', 'Shanghai University of Political Science and Law', 'Mengjin County', 'Qujing Normal University Main Campus', 'Daoli District', 'Zhijiang Airport', 'Taklamakan Desert', 'Tianjin Polytechnic University', 'Guizhou', 'Haojiang District', 'Hexigten Global Geopark', 'Guangdong Ocean University', 'Longyan University', 'Xuyi County', 'Dai County', 'Ramoche Temple', 'Sakya Monastery', 'China Three Gorges University', 'Baotu Spring', 'Jiujiang Lushan Airport', 'Gejiu', 'Haicheng, Liaoning', 'Liangping County', 'Tacheng', 'School of Law, Wuhan University, main campus', 'Zibo', 'Zhijiang Dong Autonomous County', 'Inner Mongolia University', 'Beijing Normal University', 'University of Science and Technology Beijing', 'Shanghai Conservatory of Music', 'Keshan County', 'Pinggu District', 'Dengzhou', 'Huazhong University of Science and Technology', 'Ganzhou District', 'Choi Uk Tsuen', 'Coqên County', 'Yuxi Normal University, main campus', 'Jiawang District', 'Qinhuangdao', 'Jade Belt Bridge', 'Arza', 'Asog', 'Baise City', 'Chongqing Technology and Business University', 'Fengnan District', "St. Francis Xavier's College", 'Sha County', 'China Conservatory of Music', 'Xinghai County', 'Gutian county', 'Tsingtao, China', 'Longfeng District', 'National Che Kiang University, main campus', 'apm, Hong Kong', 'Jinan', 'An County', "St. Joseph's College, Hong Kong", 'Qinghai University for Nationalities', 'Tsuen Wan Public Ho Chuen Yiu Memorial College', 'Qujiang District, Quzhou', 'Pucheng County, Fujian', 'Baiyun Stadium', 'Tengzhou', 'Zhigung', 'Lunang', 'Anxi County', 'Qianjiang', 'Wizard College', 'Wangfujing', 'Pingchuan District', 'Tianjin Institute of Physical Education', 'Shanghai Concert Hall', 'Beijing International Streetcircuit', 'Yuanbaoshan District', 'Sichuan University Sports Centre', 'Zhongxiang', 'Xiangjiaba Dam', 'Hailanjiang Stadium', 'Zhengzhou Xinzheng International Airport', 'Xiushui County', 'Xichang Qingshan Airport', 'Pingyin County', 'Heilongjiang University of Chinese Medicine', 'Sihui', 'Nyaimai', 'Golmud Railway Station', 'Pingquan County', 'Jiangcheng District', 'Queshi Bridge', 'Longzihu District', 'Harbin University of Commerce', 'Xinzheng', 'Liuhe Pagoda', 'Huaibei Normal University, main campus', 'Xago', 'Beijing Materials Institute', 'Zhenghe County', 'Jintan', 'Chaolai Football Centre', 'Wenzhou University', 'Foshan University', 'Zala, Tibet', 'Former Liang', 'Zhejiang Medical University', 'Langfang Teachers College', 'Lijiang Sanyi Airport', 'Shanxi Teachers University', 'Fuqing', 'Sichuan International Studies University', 'Echeng District', 'Nyigê', 'Fuzhou', 'Huli District', 'Shenyang University', 'Shuiding', 'Anyue County', 'Shijiazhuang', 'Sharp Island', 'Southwest Petroleum University', 'Changsha Technical College, main campus', 'Jiuquan Satellite Launch Center', 'Tengger Desert', 'Wuling Mountains', 'Guangfeng County', 'Banbar County', 'Hechuan District', 'Jincheng', 'Hunan University of Traditional Chinese Medicine', 'Shanghai University of Technology', 'Our Lady of the Rosary College', 'Qitaihe', 'Chokorgyel Monastery', 'Chongqing University of Science and Technology', 'Jinggangshan City', 'China Youth University for Political Sciences', 'Lvliang Higher College, main campus', 'Central Plaza', 'Nanjing Railway Station', 'Gadong, Tibet', 'Manzhouli Xijiao Airport', 'Mojiang Hani Autonomous County', 'Mount Qingyuan', 'Licheng District, Putian', 'Gaoligong Mountains', 'Putian', 'Litang County', 'Yumen City', 'Qian Gorlos Mongol Autonomous County', 'Quangang District', 'Yichang Airport', 'Jingdezhen', 'Doumen District', 'Biru County', 'Shaoyang', 'Xiayi County', 'Zhuolu County', 'Xushui County', "Yi'an County", "Xi'an University of Architecture and Technology", 'Yangyuan County', 'Shandan County', 'Pengshan Air Base', 'Qinshan Nuclear Power Plant', 'Chengdu Shuangliu International Airport', 'Aksu, Xinjiang', 'Guiyang College of Traditional Chinese Medicine', 'Linxia Hui Autonomous Prefecture', 'Qingfeng County', 'Heihe Airport', 'North China University of Technology', 'Luan County', 'Henan', 'Yanting County', 'Qingyuan County, Hebei', 'Jiading District', 'Mengzi', 'Lanzhou Medical College', 'Xiannongtan Stadium', 'Boshan District', 'Ganden Sumtseling Monastery', 'Hedong Sports Centre', 'Jiujiang County', 'Haining City', 'Jinzhou', 'G9211 Ningbo–Zhoushan Expressway', 'Weizhou, Wenchuan County', 'Ganzhou', 'Tongwei County', "Zhag'yab County", 'Hongxing District', 'Haidong', 'Nyizhê', 'Ningde', 'Xinjiang University of Finance and Economics', 'Altay', 'Tung Wah Group of Hospitals S. C. Gaw Memorial College', 'University of Science and Technology of China', 'Cicero/North', 'Xialu District', 'Jungar Banner', 'Nayag', 'Cili County', 'Huanan County', 'Bamda', 'Qianshan National Park', 'Suiyang District', 'Xuanzhou District', "China Women's University", 'Dongxiang Autonomous County', 'Huainan', 'Sainca', 'Qingzhou', 'Qiaocheng District', 'Liujiaxia Reservoir', 'Tongliao Airport', 'Indus River', 'Queshan County', 'Sanjiang College', 'Yangtze University, main campus', 'Wuhan University of Science and Technology', 'Nyingchi County', 'Badain Jaran Desert', 'Hebei District', 'Waibaidu Bridge', 'Yingquan District', 'Nang County', 'Sunan Yugur Autonomous County', 'Lingtai County', 'Heshan, Guangdong', 'Shanxi Traditional Chinese Medicine University', 'Zhoukou Normal University, main campus', 'Karakoram Pass', 'CITIC Plaza', 'Dobê', 'Yongchang County', 'Northwest University, China', 'Yellow River', 'Post & Telecommunication Hub', 'Wenzhou', 'Gariqiong', 'Saga, Tibet', 'Sartu District', 'Shuangtaizi District', 'Bole', 'Luding Bridge', 'Hindutash', 'Sui County, Henan', 'Shanghai University of Electric Power', 'Chengdu Sports Centre', 'Dahua Yao Autonomous County', 'Ngari Prefecture', 'Jiuzhai Huanglong Airport', 'Bazhong', 'Mount Davis, Hong Kong', 'Duyun', 'Baiyun District, Guangzhou', 'Miquan', 'Gasherbrum I', "Tai'an", 'Jingdezhen Luojia Airport', 'Yellow Crane Tower', 'Zaindainxoi', 'Xicheng District', 'Po Leung Kuk Mrs. Ma Kam Ming-Cheung Fook Sien College', 'Li County, Sichuan', 'Xin County', 'Mao County', 'Jiangnan University', 'Argun River', 'Taiyuan University of Science and Technology', 'Yuanshen Sports Centre Stadium', 'Chengde', 'Tekes County', 'Beijing Concord College of Sino-Canada', 'Ziyang', 'Pingyao County', 'Nanjing University', 'Jiayuguan City', 'Hezheng County', 'Gartog', 'Yunyang Medical College, main campus', 'Kanas Lake', 'Hefei University', 'Great Wall of China', "Nan'ao County", 'Shangqiu Normal University', 'Banggaidoi', 'Hegang', 'Rabang', 'Luoshan County', 'Po Leung Kuk Yao Ling Sun College', "Texas Children's Cancer Center", 'Haifeng County', 'Miluo City', 'Donghai Bridge', 'Chengdu', 'Tongren Fenghuang Airport', 'Hebei University', 'Guanling Buyei and Miao Autonomous County', 'Goinsargoin', 'Daqing Radio and Television Tower', 'Nanping', 'Wuhan University of Technology', 'Ganda, Tibet', 'Xinfeng County, Jiangxi', 'Yushu Batang Airport', 'Yagmo', 'Yanping District', 'Zêsum', 'Jiangling County', 'Olympic Green Station', 'Heng Fa Chuen', 'Qingzhen', 'Chinese University for Nationalities, Faculty of Law, main campus', 'Baoshan Yunduan Airport', 'Mount Dingjun', 'Ngawa Tibetan and Qiang Autonomous Prefecture', 'Terracotta Army', 'Miu', 'Tongxiang', 'Shahe, Hebei', 'New Barag Left Banner', 'Hainan', 'Shanghai Hongqiao International Airport', 'Sangyuan, Wuqiao County', 'Gyêrba', 'English School attached to Guangdong University of Foreign Studies', 'Zhengzhou Hanghai Stadium', 'Beijing', 'Guangzhou Gymnasium', 'Y.W.C.A. Hioe Tjo Yoeng College', 'Tieli', 'Gezhouba Dam', 'Western Chongqing University', 'Shatin Pui Ying College', 'Northwest University for Nationalities', 'Hepu County', 'Jinggangshan Airport', 'Xigu District', 'Shunyi Olympic Rowing-Canoeing Park', 'Pingxiang County', 'Qingyang County', 'Chamdo', 'Dongming County', 'Nanyang', 'Liaoning Normal University', 'Shanghai Institute of Physical Education', 'Kurqên', 'Dongyang', 'Dongbei University of Finance and Economics', 'Goicang', 'Chongqing Jiangbei International Airport', 'Yushu County', 'Shangyou County', 'Tulou', 'Beijing Institute of Civil Engineering and Architecture', 'Kangmar County', 'Hong Kong Academy for Performing Arts', 'Egongyan Bridge', 'Saga County', 'Shishapangma', 'Linjialing', 'Gangga, Shannan', 'New Kowloon', 'Taihang Mountains', 'Zari, Tibet', 'Qingyuan County, Zhejiang', 'Rizhao', 'Jinan Yellow River Bridge', 'Tongling', 'Asia Building, Shanghai', 'Yongfu County', 'Huichang County', 'Bank of China Tower', 'CCC Yenching College', 'Heilongjiang University', 'Shiguang Road Station', 'Qagcaka', 'Maijishan Grottoes', 'Xiangtan University', 'Chizhou', 'Harbin International Conference Exhibition and Sports Center', 'Shanghai', 'Qintang District', 'Guilin Liangjiang International Airport', 'Kowloon', 'Zingqi', 'Lingyan Temple', 'Dawa County', 'Zhejiang Provincial College of Medicine', 'Bohai Sea', 'Mogao Caves', 'Nanjing University of Information Science and Technology', 'Jing County, Hebei', 'Gaocheng Astronomical Observatory', 'Jianshan District', 'Yonghe Temple', 'Yangkai Airfield', 'Zhangwu County', 'Shuibuya Dam', 'Lhamo La-tso', 'Yangshupu Road Station', 'Xujiahui', 'Wuchang, Heilongjiang', 'Renqiu', 'World Horti-Expo Garden', 'Subei Mongol Autonomous County', 'Wuhan Tianhe International Airport', 'Yitong Manchu Autonomous County', 'Xuzhou Medical College', 'China Institute of Industrial Relations', 'Quyang County', 'Kwanghan Airfield', 'Highcliff', 'Shanghai World Financial Center', 'University of Macau', 'Shihezi', 'Dêgê County', 'Lishui', 'Haimen', 'Tromzikhang', 'Namgyaigang', "Zhen'an County", 'Yongkang, Zhejiang', 'Wei River', 'Golag', 'Ji County, Tianjin', 'Nanzhao County', 'English Methodist College, main campus', 'Tieling', 'Kangle County', 'Rixoi', 'Longyao County', 'Weiyuan County, Gansu', 'Wangcheng District', 'Huaihua College, main campus', 'Kumbum Monastery', 'Meijiang District', 'Kunshan', 'Jiamusi', 'Southwest Jiaotong University', 'Gengma Dai and Wa Autonomous County', 'New Method College', 'Pingdingshan', "St. Michael's Cathedral, Qingdao", 'Sêlêpug', 'Longmen Grottoes', 'Chongxin County', 'Xianyou County', 'Kashgar', 'Wenshan Teachers College, main campus', 'Guangyuan Panlong Airport', 'Shanxi University of Finance and Economics', 'Yinxu', 'Yangpu Peninsula', 'Pazhou Bridge', 'Wa Ying College', 'Zhejiang Shuren College, main campus', 'Shichahai', 'Shanghai Maglev Train', 'Dachang Hui Autonomous County', 'Guyang County', 'Shandong University of Science and Technology, Qingdao', 'Shicheng County', 'Alxa Right Banner', 'Xingtang County', 'Hanging Temple', 'Mountain Villa with Embracing Beauty', 'Zhejiang Chinese Medical University', 'Guanghan', 'Guangxi Normal University', 'Yichang Bridge', 'Longjing, Jilin', "Tung Wah Group of Hospitals Sun Hoi Directors' College", 'Shanghai Tianma Circuit', 'Yu Chun Keung Memorial College', 'Neiqiu County', 'Shijiazhuang South Railway Station', 'Taikoo Hui Guangzhou Cultural Plaza Office Building 1', 'Qianshan County', 'Tianjin University of Science & Technology', 'Futseling', 'Ju County', 'Tualatin Plains', 'Yining County', 'Chamdo Prefecture', 'Jimei District', 'Anhui University of Science and Technology', 'Chamdo County', 'Huaihua', "Hui'an County", 'Wangkar', 'Shigatse', 'Baotou', 'Barkam', "Xi'an Polytechnic University", 'Toi Shan Association College', 'Goupitan Dam', 'Garbo, Tibet', 'Liancheng County', 'Tianjin Arena', 'Huaiyang County', 'Samding Monastery', 'Toli County', 'Zhamo', 'Paggai', 'Wanping Fortress', 'Mudanjiang Hailang Airport', 'Qushuiting Street', 'Markam County', 'Xiji County', 'Margyang', 'Nanchuan District', 'Taipingyuan', 'Zhuanglang County', 'Hanggin Banner', 'Taiyuan Railway Station', 'Gaqoi', 'Menglian Dai, Lahu and Wa Autonomous County', 'Hunan Agricultural University', 'Beijing City College', 'Chongqing University of Technology', 'Jianghua Yao Autonomous County', 'Shiguai District', 'Oibab', 'Lhari County', 'Hohai University', 'University of Nottingham, Ningbo, China', 'Yutai County', 'Hong Kong International School', 'Qiongzhong Li and Miao Autonomous County', 'Huangpu District, Guangzhou', 'Zoco, Tibet', 'Hubei University of Education, main campus', 'Baidi', 'Hong Kong University of Science and Technology', 'Zhangjiakou South Railway Station', 'Cangshan District', 'Yunnan', 'Wudang Mountains', 'Qugaryartang', 'Zhejiang Industry Polytechnic College, main campus', 'Nancha District', 'Maindu', 'Benxi Manchu Autonomous County', 'Shengao', 'Tianjin University of Technology', 'Fujian Medical University', 'Nanhai District', 'Ninghai County', 'Xunwu County', 'Dongngoin', 'Zhaosu County', 'Huangchuan County', 'Beijing Great Wheel', 'Mercedes-Benz Arena', 'Oriental University City', 'Erqi District', 'Jinzhai County', 'Tsung Tsin College', 'Dongning County', 'Liwan District', 'Wancheng District', 'Church of Christ in China Kei Long College', 'Gyantse', 'Longkou', 'Southern Medical University', 'Dongshan Island', 'Xinghai Square', 'Bayannur', 'Amne Machin', 'Zhouning County', 'Tibet University, Nyingchi', 'Harbin Institute of Technology', 'Kowloon Walled City', 'Guangzhou Maritime College', 'Fuyu, Jilin', 'Guangxi University', 'Chifeng University', 'Junan County', 'Second Northwest Nationalities University, main campus', 'Shanghai Library', 'South Lake', 'Gongshan Dulong and Nu Autonomous County', 'Silk Street', '1999 World Horticultural Exposition', 'Zhanjiang Sports Centre', 'Hong Kong Club Building', "Ji'an", 'Dangshan County', 'Yangpu District', 'Anning District', 'Fanghua Road Station', 'Bolo', 'Po Leung Kuk Ngan Po Ling College', 'Hancheng', 'Kormang', 'Civil Aviation University of China', 'Anhui Laomingguang Stadium', 'Zhongba County', 'Lanzhou University', 'Liuzhou', 'Anguo', 'Ar Horqin Banner', "Jing'an Temple", 'Anshan University of Science and Technology', 'Chaoyang, Liaoning', 'ECF Saint Too Canaan College', 'Jingci Temple', 'White Horse Temple', 'Mengcun Hui Autonomous County', 'Mission Hills Golf Club', 'Mount Mogan', 'Heshui County', 'Laxiwa Dam', 'Jiuquan', 'Rongcheng County', 'Hutubi County', 'Huayuankou, Henan', 'Hunan University of Humanities, Science and Technology', 'Buddhist Sin Tak College', 'Zigar', 'Shanghai University of Engineering Sciences', 'Shaoguan', 'Oroqin Autonomous Banner', 'Qagbasêrag', 'International College Hong Kong', 'North China University of Water Resources and Electric Power , main campus', 'Nanchong Gaoping Airport', 'Dehui', 'Porcelain Tower of Nanjing', 'Shenzhen Radio and TV University', 'Yongzhou', 'Garong', 'Yunnan University', 'Changchun City Stadium', 'Juye County', 'Zhejiang Gongshang University', 'Christian Alliance S. C. Chan Memorial College, main campus', 'Sino-Korean Friendship Bridge', 'Daozhen Gelao and Miao Autonomous County', 'Jiaocheng District', 'Parta, Tibet', 'Xiayanjingxiang', 'Yibin Caiba Airport', 'Inner Mongolia Museum', 'Shunyi District', 'Huazhou, Guangdong', 'Garzê Tibetan Autonomous Prefecture', 'East China Theological College, main campus', 'Jongsong Peak', 'Zixing', 'Three Gorges Dam', 'Zhengzhou', 'Anyang', 'Longgang District, Shenzhen', 'Qinghai Radio & Television University, main campus', 'Northeast Agricultural University', 'National Southwestern Associated University', 'Shürong', 'Huaisheng Mosque', 'Lindian County', 'Guangzhou Academy of Fine Arts', 'Zhangqiu', "St. Paul's College, Hong Kong", 'Beijing central business district', 'Guangdong University of Business Studies', 'Xiajiang County', 'Dingxing County', 'Hotan River', 'Karamay Airport', 'Macau Inter-University Institute', 'Bezeklik Thousand Buddha Caves', 'Yaoli, Jiangxi', 'Nankai University', 'Kandze Monastery', 'Purple Mountain', 'Xinhua County', 'Ashmore Theological Seminary, main campus', 'Hinggan League', 'Haibei Tibetan Autonomous Prefecture', 'Hebi', 'Kunming Vocational and Technical College of Industry, main campus', 'Libo County', 'Jonê County', 'Ningbo', 'Weihui', 'Ejin Horo Banner', 'Ningcheng County', 'North China Coal Medical College', 'Henan University', 'Changtse', 'Gaoqiao, Kai County', 'Tanggula Pass', 'Beizhen', 'Lidu', 'Haigang District', 'Xinhe County, Hebei', 'Zhumadian', 'Gyorxung', "Gongbo'gyamda County", 'Zhejiang University School of Medicine', 'Hunan Provincial Museum', 'Wuhan University International School of Software', 'Yunfu', 'Guangshan County', 'Baekdu Mountain', "Guang'an", 'Yi’ong', 'Gyala Peri', 'Fuyang', 'Xaxa', 'Xianning', 'Qüxü', 'Ming Tomb Reservoir', 'CNEC Christian College', 'Tongcheng County', 'Labrang Monastery', 'Goibo', 'Hualong Hui Autonomous County', 'Chuxiong Normal University, main campus', 'Donghu District', 'Fengqiu County', 'Beibei District', 'Chongqing Institute of Technology', 'Lake Rakshastal', 'Fuchuan Yao Autonomous County', 'Kaifeng Air Base', 'Sog County', 'Baima, Baxoi County', 'Nanhui District', 'Laiwu', 'Iron Lion of Cangzhou', 'Shaksgam Valley', 'Chengguan District, Lanzhou', 'Xaitongmoin County', 'Anyuan County', 'Huoqiu County', 'Harbin Engineering University', "Nong'an, Jilin", 'Hong Kong Baptist University', 'The Bund', 'Lianyungang', 'Huanren Town', 'Küba', 'Gannan Normal University, main campus', 'Fengshan County', 'Gyanbê', 'Thousand Buddha Mountain', 'Amdo Town', 'University of Nanking', 'Wuhan Sports Center Stadium', 'Wanzhou District', 'Zhuji', 'Fujian', 'China Agricultural University', 'Yanchang County', 'Qomo', 'Huating County', 'Hunan Institute of Science and Technology', 'Tanggyai', 'Heheng', 'Mingshan District, Benxi', 'Gaocheng, Sichuan', 'Shenyang Medical College', 'Ning Po College', 'Zhongyuan District', 'Burqin County', "Jian'ou", 'Songpan County', 'Shanghai Oriental Sports Center', "Baoding People's Stadium", 'Yiwu Airport', 'Nanchang Bayi Stadium', 'Kunlun Mountains', 'Amur Bridge Project', 'Hengshui', 'Shengyou', 'Tsondol', 'Sun Yat-sen Mausoleum', 'Gar River', 'Forbidden City', 'Liaoning Medical University', 'Liaoning University', 'Hong Kong Federation of Youth Groups Lee Shau Kee College', 'Drigung Monastery', 'Jiayuguan', 'Tung Wah Group of Hospitals Chang Ming Thien College', 'Luogang District', 'Rushan, Shandong', 'Hebei University of Engineering', 'Hong Kong Management Association K. S. Lo College', 'China University of Geosciences, Wuhan Campus', 'Zhongmu County', 'Southwest Forestry University', 'Kucha', 'Xobando', 'Aberdeen Baptist Lui Ming Choi College', 'Wuyi University', 'Zanhuang County', 'Long Ta', 'Jiaying University', 'Chongren County', 'Hong Kong Institute of Education', 'Henan University of Science and Technology', 'Hohhot City Stadium', 'Lingza', "Yan'an", 'Pailou, Liaoning', 'Loudi', 'Guanting, Minhe County', 'Laohwangping Airfield', 'Shaksgam River', 'Yanchuan County', 'Tortoise Mountain TV Tower', 'Qingdao Railway Station', "Beijing People's Police College", 'Elephant Trunk Hill', 'New World Center', 'Akto County', 'Changsha Medical College', 'Xiangtan', 'Shanghai Theater Academy', 'Guizhou Normal University', 'Wuhu Yangtze River Bridge', 'Tianjin South Railway Station', 'Pingyang County', 'China Central Academy of Fine Arts', 'Lanzhou University of Technology', 'Xuhui District', 'Guizhou Nationalities University', 'Wuchuan, Guangdong', 'Suizhou', 'Lam Tsuen', 'Jiangyin', 'Yarong', 'Hefei University of Technology', 'Huacheng Temple', 'Damxoi', 'Hunjiang', 'Xiangyun Airport', 'Immanuel Lutheran College', 'Shun Tak Fraternal Association Tam Pak Yu College', 'Fei River', 'Weifang Airport', 'Yixing', 'Shandong University', 'Southwest University of Political Science & Law, Yubei campus', 'Zhainzê', 'Weifang University', 'Yanchi County', 'Beijing Dance Academy', 'Nantong', 'Northwest University of Politics and Law, Chang’an Campus', 'Neijiang', 'Shizhong District, Jinan', 'Longnan County', 'Jingyu County', 'Baicheng', 'Xinghai Conservatory of Music', 'Bozhou', 'Yuen Long Town', 'Hongjiang District', 'Shenyang Ligong University', 'Badong County', 'Shanghai Ocean University', 'Huixian', 'Liaoning University of Petroleum and Chemical Technology', 'Hailang Airport', 'Yutian County, Hebei', 'Guangxi Medical University', 'Xihe County', 'Yingdong District', 'The Center', 'Jinjiang, Fujian', 'Gorqu', 'Huaihua Medical College, main campus', 'Damxung Railway Station', 'Muye', 'Guigang', 'Fangchenggang', 'Tieshangang District', 'Yiyang County, Henan', 'Fujian Agriculture and Forestry University', 'Qinglung', 'Shenzhen University', 'Jinan University, Shandong', 'Luquan, Hebei', 'Xianyang', 'Shenyang Pharmaceutical University', 'Ci County', 'Haicang District', 'Gyimda', 'Sanjiang', 'Mount Putuo', 'Guangzhou University', 'Yingjiang District', 'Jiangxi Normal University', 'Wuhua District', 'Guangxi', 'Buddhist Tai Kwong Chi Hong College', 'Harbin Normal University', 'Lhorong County', 'Virginia Discovery Museum', 'Chenzhou', 'Argu Tagh', 'Xiangcheng City', 'Hengshui University', 'Bush Theological Seminary, main campus', 'Huimin County', 'Gase', 'Canton', 'Changning District', 'Sera Monastery', 'Shuangjiang Lahu, Wa, Blang and Dai Autonomous County', 'Xaga', 'Jingning County, Gansu', 'Linshu County', 'Numari', 'North Sichuan Medical College', 'Hangzhou Xiaoshan Sports Centre', 'Sênco', 'Wuchang District', 'Tianjin Academy of Fine Arts', 'Jinzhou City Stadium', 'Baingoin County', 'Yongji, Shanxi', 'Shifang', 'Cheung Chuk Shan College', 'Florida International University Tianjin Center', 'Namoqê', 'Ebian Yizu Zizhixian', 'Lêgzê', 'Luocheng Mulao Autonomous County', 'Tangmai', 'Bayingolin Mongol Autonomous Prefecture', 'Yangtze Normal University', 'East China Normal University', 'Napug', 'Têring', 'Lanxi, Zhejiang', 'Yanjing Union Theological College, main campus', 'Jiande', 'Central', 'Yunxiao County', 'Huadu District', 'Nanjing Lukou International Airport', 'Dingzhou', 'Gulang County', 'University of Chinese Academy of Sciences', 'Xinjiang Sports Centre', 'Huang Xian, Shandong', 'Huaibin County', "Xi'an International Studies University", 'Longzhou County', 'Yuzhou, Henan', 'Rigong', 'Yagra', 'Dacheng County', 'Shizhu Tujia Autonomous County', 'Songxi County', 'Livezey Rock', 'Altyn-Tagh', 'Xagar', 'Penglai, Shandong', 'Yadong County', 'Jiangsu', 'Semo La', 'Shouguang', 'Xungmai', 'Nantong Xingdong Airport', 'Dingyuan County', 'Tung Wah Group of Hospitals Chen Zao Men College', 'Evenk Autonomous Banner', 'Suqian', 'Karrêg', 'Yunnan Vocational College of Land Resources, main campus', 'Liangshan Yi Autonomous Prefecture', "Ya'an", 'Meihekou', 'Shulan', 'Huichun', 'Tianjin Economic-Technological Development Area', 'Chengkung Airfield', 'Qingshanhu District', 'Qi Tai He', 'Beijing Shooting Range Hall', 'Anding District, Dingxi', 'Guangdong Province', 'Lhoka (Shannan) Prefecture', 'Shizishan District', 'Hangzhou Bay Bridge', 'Yangshan County', 'Norbulingka', 'Xiangxiang', 'Quzhou Airport', 'Yanhu Township', 'Ningyang County', 'Yuan River', 'Shenyang Institute of Engineering', 'Rongcheng District', 'Luoyang Normal University, main campus', 'Wudalianchi', 'Hua Hill', 'Linfen', 'Southwest University of Political Science & Law, Shapingba campus', 'Tongling University Cuihu Campus', 'Hangzhou Xiaoshan International Airport', 'Pingdu', 'Puning Temple', 'Jizhou, Hebei', 'Fuzhou University', 'Xuanhua District', 'Gurla Mandhata', 'Yichang Sanxia Airport', 'Zalantun', 'Exchange Square', 'Huashan District', 'Lupu Bridge', 'Tingri County', 'Tianjin University of Finance & Economics', 'Yunnan Vocational College of Tropical Crops, main campus', 'Leifeng Pagoda', 'Jianghan University', 'Sacred Heart Canossian College of Commerce', 'Dalian University of Technology', 'Zhongwei', 'Chashan', 'Sanhe', 'Taiyuan University of Technology', 'Kan Chou Spring', 'Ho Lap College', 'Sandu Shui Autonomous County', 'Zhenjue Temple', 'Maoniupo', 'Ningdu County', 'Za’ngoza’ngoin', 'Chengdu Kinesiology University', 'Hengyang Normal College, main campus', 'Beijing National Aquatics Center', 'Shanghai International Studies University', 'North East Theological College, main campus', 'Millennium City, Hong Kong', 'Taicang', 'Dalian University of Light Industry', 'Ginling College', 'Liu Po Shan Memorial College', 'Si Dao Gou', 'Wenquan County', 'Banzai', 'Zhao County', 'Rila, Tibet', 'Hebei University of Economics and Business', 'Yanhe Tujia and Miao Autonomous County', 'Zayü', 'Yancheng Nanyang Airport', 'Buddhist Tai Hung College', 'Weining Yi, Hui, and Miao Autonomous County', 'Fengtai County', 'Henderson, NV', 'Yi County, Anhui', 'Cogo, Tibet', "Xi'an Xianyang International Airport", 'Hong Kong Institute of Vocational Education,Tsing Yi campus', 'Zhejiang Shuren University, main campus', 'Gaolan County', 'Bazhou, Hebei', 'Mausoleum of the Yellow Emperor', 'Burang County', 'Jinggu Dai and Yi Autonomous County', 'Tanggula Mountains', 'Baochu Pagoda', 'Wuhan Botanical Garden', 'Yanqi Hui Autonomous County', 'Mawei District', 'Anji Bridge', 'Jiuyi Mountains', 'Jiageda', 'Tsuen Wan Plaza', 'Shanggao County', "King's College, Hong Kong", 'Wuzhou', "St. Stephen's College, Hong Kong", 'Zhangjiajie', 'Yantian District', 'Qingdao University', 'China University of Political Science and Law', 'Fanshi County', 'Pagri', 'Huantai County', 'Sutong Bridge', 'Zongyang County', 'Yangbajain', 'Dulwich College Shanghai', 'Keutsang Hermitage', 'Cang County', 'Kunming Metallurgy College', 'Mentougou District', 'Qingcheng District', 'Xinxiang County', 'Weishan Yi and Hui Autonomous County', 'Lincheng County', 'Xinghua, Jiangsu', 'Yiyang County', 'Anhui University of Architecture', 'Qianjiang District', 'Bilung', 'Longhua Temple', 'Didao District', 'Ningbo Fubang Stadium', 'Guizhou University of Finance and Economics', 'Xishan Mountains', 'Putian University', 'Chongqing Medical University', 'Mintaka Pass', 'Shijiazhuang Zhengding International Airport', 'Yunnan Agricultural University, main campus', 'Chu Hai College of Higher Education', 'Quarry Bay', 'Altay Airport', 'Xinjiang', 'Ngamringxoi', 'Qinzhou', 'Ürümqi Diwopu International Airport', 'Longwen District', 'Liling', 'Changde Taohuayuan Airport', 'Ruzhou', 'Ruyang County', 'Longsheng Pan-Nationalities Autonomous County', 'Ulanhot Airport', 'Liangshan County', 'Lianshan Zhuang and Yao Autonomous County', 'Shou County', 'Miran', 'Dahongliutan', 'Kaiping', 'Puji Temple', 'Fuyun County', 'Yuanjiang', 'Dêgên', 'Guangrao County', 'Beijing University of Chinese Medicine', 'Dagzê County', 'Capital Normal University', 'Jia County, Henan', 'Gala, Tibet', 'Shanghai Grand Theatre', 'Lhasa Railway Station', 'Zhowagoin', 'Sanagda', 'Tung Wah Group of Hospitals Wong Fung Ling College', 'Dinggyê County', 'Qapqal Xibe Autonomous County', 'Xinjiang Normal University, main campus', "Nan'an, Fujian", 'Yubzha', 'Dangtu County', 'Songling District', 'Huzhou Teachers’ College, main campus', 'Fushun County, Sichuan', 'Zamar', 'Tianjin Xinda Plaza', 'Beipanjiang River 2009 Bridge', 'New Barag Right Banner', 'Horqin Left Middle Banner', 'Gate of China, Nanjing', "St. Margaret's Girls' College, Hong Kong", 'Karakash River', 'Beijing Youth Politics College', 'Beihai', 'Lhatog', 'Xihua University', 'Hengshan District', 'Otog Front Banner', 'Jiangdong', 'Luqiao District', 'Turpan', 'Ledong Li Autonomous County', 'Tashkurgan, Xinjiang', 'Shanghai Ocean Aquarium', 'Dongchuan District', 'Sai Kung Town', 'Ningxiang County', 'Songhua River', 'Shanghai Institute of Science & Technology', 'Medical College of Nanchang University', 'Fei County', 'Longmen', 'Xishuangbanna Dai Autonomous Prefecture', 'Tai Tam Reservoirs', 'Chinesisch-Deutsche Hochschulkolleg', 'Chaiwopu Lake', 'Nagchu Town', 'Zhejiang', 'Tiger Leaping Gorge', 'Wafangdian', 'Shuangyashan', 'Rutog County', 'Xungru', 'Moincêr', "Bao'en Temple", 'Wannian County', 'Sekiu River', 'Xishan District, Kunming', 'Yulin Xisha Airport', 'Lhajam', 'Bagrax County', 'Southwest University for Nationalities, Shuangliu', 'Suzhou, Anhui', 'Wubu County', 'Jishui County', 'Zhashui County', 'Mount Emei', 'Jiangwan Airport', 'Shandong jianzhu university 山東建築大學', 'Wuhan Baishazhou Yangtze River Bridge', 'Northwest University of Politics and Law, Yanta Campus', 'Changle', 'Dayao, Hunan', 'Zhoukoudian', 'Gêrzê County', 'Lingyuan Subdistrict', 'Oxford International College Shanghai', 'Song County', 'Xinping Yi and Dai Autonomous County', 'Huan County', 'Shanghai Museum', 'Logistical Engineering University of PLA', 'Mang City', 'Gyamotang', 'Changdao County', 'Weihai', 'Kilik Pass', 'Gaoming District', 'Datian County', 'Sanlitun', 'Li County, Hebei', 'Taiyuan', 'Kyêrdo', 'Hulunbuir', 'Yangzhou University', 'Chengqu, Shanwei', 'Yingshang County', 'Gongqing', 'Comai County', 'Luoyang Beijiao Airport', 'Xinji', 'Karamay', 'Luzhou', 'Qingdao Technological University', 'Tianjin Binhai International Airport', 'Olympic Green Archery Field', 'Tianjin University of Technology and Education', 'Zhejiang University City College, main campus', 'Stone Forest', 'Changtu County', 'Anji County', 'Jilin University', 'Chaoyang city', 'Jinchang District', 'Wenchuan County', 'Shandong University of Traditional Chinese Medicine', 'Guanzhou', 'Xia Zayu', 'Fujian University of Technology', 'Republican Building', 'Zapug', 'Luanping County', 'Huma County', 'Zhaojun Tomb', 'Imagination Station Science Museum', 'Haikou Century Bridge', 'Green Lake', 'Xinjiang University', 'Suzhou City Stadium', 'Zhenning Buyi and Miao Autonomous County', 'Wangdu County', 'Huocheng County', 'Changping District', 'Xingba', 'Ningbo Lishe International Airport', 'Sport Science College of Beijing Sport University', 'Xagjang', "Qian'an, Hebei", 'Hechi', 'Macheng', 'Tongjiang, Heilongjiang', 'Xining Caojiabao Airport', 'Changchun Normal University', 'Dezhou', 'Duolun County', 'Wuhu Olympic Stadium', 'Wuxing District', 'Aksu Airport', 'Zhengzhou Institute of Aeronautical Industry Management', "Taiwan Province, People's Republic of China", 'Yangjiang', 'Linxi County, Inner Mongolia', 'Xitang', 'Haiyang', 'Huaibei', 'Yangxi County', 'Xining', 'Nangang', 'Harqin Left Mongol Autonomous County', 'Chongyi County', 'Ruijin', 'Fushun Leifeng Stadium', 'Khumbutse', 'Doilungdêqên County', 'Sichuan Agricultural University', 'Munsang College', 'Nanjing University of Finance and Economics', 'Nechung', 'Ningxia', 'Youguo Temple', "Yu'an District", 'Samka', 'Yanji', 'Qiaotou', 'Lanko·Grand Hyatt Hotel', 'Huaying', 'Karmai', 'Ganyu County', 'Shanghai Pudong International Airport', 'Lop Nur', 'Longyan', 'Tung Wah Group of Hospitals Lee Ching Dea Memorial College', 'Huanghuacheng', 'Anqing Teachers College', 'Huanren Manchu Autonomous County', 'Kuancheng Manchu Autonomous County', 'Guangzhou TV Tower', 'Tianhe District', 'Mianzhu', 'Yunnan Arts University', 'Suzhou', 'Taoyaomen Bridge', 'Lamaling Monastery', 'Xiuning County', 'Chengde County', 'Lishi District', 'Xiangcheng District, Zhangzhou', 'China Foreign Affairs University', 'Huangshi', 'Shantung Christian University, main campus', 'Chaohu', 'SEG Plaza', 'Sershul', 'Qingdao', 'Runan County', 'Zhejiang Oriental Vocational and Technical College, main campus', 'Datong University', 'Wuhe County', 'Ili Normal College, main campus', 'Xihu District, Nanchang', 'Henan University of Traditional Chinese Medicine', 'Chuxiong Yi Autonomous Prefecture', 'Yulin', 'Jianying Jinian Bridge', 'Sun Yat Sen University School of Law Main Campus', 'Zhugqu County', 'Linyi', 'Tomort', 'Horqin District', 'Wannan Medical College', 'Kunming Sailing University, main campus', 'Qiongri’asang', 'Shanghai Normal University', 'Hure Banner', 'Günlu', 'Ezhou', 'Shanghai Television University', 'Wushan County, Gansu', 'Hongshan District, Chifeng', 'Hezuo', 'Juchao District', 'Zogang County', 'Renchaoxi', 'China West Normal University', 'Jingde County', 'Yangzhen', 'Songming County', 'Haikou', 'Dongjin Bridge', 'Luhe County', 'Portas do Cerco', 'Dandong Langtou Airport', 'Lengshuijiang', 'Liangdang County', 'Dongjug', 'Wuxi County', 'Jing County, Anhui', 'Jiangjin District', 'Changchun Longjia International Airport', 'Suifenhe', 'Xainza County', 'Fangcheng County', 'Zhanjiang Airport', 'Qugcang', 'Pabonka Hermitage', 'Wuqiang County', 'Kardag', 'Tianjin Medical University', 'Inner Mongolia Normal University', 'Linhai', 'Anhui Polytechnic University, main campus', 'Shanxi University', 'Weichang Manchu and Mongol Autonomous County', 'Henan Polytechnic University, main campus', 'Jianning County', 'Jongnê', 'Chengde Medical College', 'Yarzhong', 'Fengning Manchu Autonomous County', 'Mancheng County', 'Pagoda of Bailin Temple', 'Longhai City', 'Mui Wo', 'Changge', 'Fengtai District', 'Shantou', 'Korla Airport', 'Qonggyai County', "Tianjia'an District", "China People's Public Security University", 'Taizhou University', 'Juyan Lake Basin', 'Canton Tower', 'Jiangyan District', 'Xiao County', "People's Square", 'Luoyang', 'Mei County, Shaanxi', "Our Lady's College, Hong Kong", 'Qianxi County, Hebei', 'Tuoshan', 'Gulangyu Subdistrict', 'Lüshunkou District', 'Dalian Maritime University', 'Yunju Temple', 'Diexi, Mao County', 'Xifeng District', 'Huanghua', 'Namgyaixoi', 'Chifeng', 'Tianying', 'Golug', 'Hulin', 'Wufeng Tujia Autonomous County', "Lu'an", 'Guangzhou Bridge', 'Beijing Technology and Business University', 'Nanjing', 'Leshan Giant Buddha', 'Baiyin District', 'Raoyang County', 'Gyinkar', 'Qufu Normal University', 'Jinzhong', 'Tunxi District', 'Anhui Medical University', 'Jingdong Yi Autonomous County', 'Xalazakung', 'Historic Centre of Macau', 'Lhünzê County', 'Huadian, Jilin', 'Shaanxi Normal University', 'Guoju', 'Tongnan County', 'Anqing Tianzhushan Airport', 'Qingliu County', 'Xarma', 'Hui County', 'Chenghai District', 'Yanbian County', 'Nianzishan District', 'Xilinhot', 'Zhangpu County', "Xi'an", 'Zhongchuan Airport', 'Baotou Erliban Airport', 'Sanya', 'Zhijinghe River Bridge', 'Nanchang Aviation University', 'China Academy of Art', 'Victoria City, Hong Kong', 'Dazhou Heshi Airport', 'Qamqênxoi', 'Zayü County', 'Gyari', 'Lhasa West Railway Station', 'Poyang County', 'Zhengzhou University', 'Jining', 'Ya’ngamdo', 'Haibowan District', 'Henan Normal University', 'Binhu District', 'Minhe Hui and Tu Autonomous County', 'Shanghai Yangtze River Tunnel and Bridge', 'Yancheng', 'Dorbod Mongol Autonomous County', 'Anhui Agricultural University', 'Tsetang', 'Shihezi University', 'Ningbo University', 'Guangzhou', 'Qilihe District', 'Baoding', 'Paingar', 'Dêmqog, Ngari Prefecture', 'Sêrxü County', 'Changting County', 'Former Qin', 'Langfang', 'Mount Sanqing', 'Lumajangdong Co', 'Yantai Sports Park Stadium', 'Shizhong District, Zaozhuang', 'Beijing Capital International Airport', 'Gasherbrum III', 'Tianjin Normal University', 'Songzi', 'Golmud', 'Midika', 'Gyantse County', 'Yinjiang Tujia and Miao Autonomous County', 'Ganden Monastery', 'Pingchang County', "Lai'an County", 'Wuhan Transportation University', 'Yichun University', 'Kwan Tei', 'Chinese pyramids', 'Dinggo', 'Taizhao', 'Jingzhou Miao and Dong Autonomous County', 'Lingwu', 'Boye County', 'Charklik', 'Kada, Tibet', 'Shanxi Agricultural University', 'Yuhuan County', 'Xiaowan Dam', 'Xuancheng', 'Liannan Yao Autonomous County', 'Shun Hing Square', 'Xinzhai, Mengla County', 'Qiannan Buyei and Miao Autonomous Prefecture', 'Yangshuo County', 'Pungchacheng Airfield', 'Daguan District', 'Northwestern Polytechnical University', 'Zhucheng', 'Jiangxi University of Science and Technology', 'Zanda County', 'Pengze County', 'Xiaowangmiao', 'Tongzhou District, Beijing', 'University of Electronic Science and Technology of China', 'Zhugla', 'Beijing University of Aeronautics and Astronautics', 'Northeast Dianli University', 'Qilihe Stadium', 'Tongcheng, Anhui', 'LORAN-C transmitter Hexian', 'Xiantao', 'Taijiang District', 'Xunyang District', 'Dazhou, Sichuan', 'Golmud Airport', 'Marmê', 'Aihui District', 'Wu Gorge', 'Zhangzhou Normal University', 'Lankao County', 'Dongguang County', 'Funing County, Jiangsu', 'Zhangjiagang', 'White Jade River', "True Light Girls' College", 'Xiamen University', 'Chengbu Miao Autonomous County', 'Shanghai Stadium', 'Xardong', 'University of International Relations', 'Linyi Shubuling Airport', 'Yamdrok Lake', 'Pengzhou', 'Chonghai Bridge', 'Sacred Heart Cathedral', 'Kecheng District', 'Wah Yan College, Kowloon', 'Shek O', 'Jining Qufu Airport', 'Tianshui', 'Shenyang', 'Hebei Medical University', 'Coka, Tibet', 'Yêndum', 'Zhongnan University of Economics and Law', 'Shanghai International Circuit', 'Longjiang County', 'Siping, Jilin', 'Dog Bark Park Inn', 'Henan University of Technology', 'Qinghai', 'Baimai', 'Dianshan Lake', 'Zêba', 'Lintong District', 'Xifeng County, Liaoning', 'Huiyuan', 'Shengzhou', 'Zhenbao Island', 'Dali Bai Autonomous Prefecture', 'Simao Teachers College, main campus', 'Qianxinan Buyei and Miao Autonomous Prefecture', 'Jiangsu Nanjing Broadcast Television Tower', 'Binzhou University', 'Shenyang Jianzhu University', 'Northeast Electrical University, main campus', 'Yuhua District, Shijiazhuang', 'Yuanyang County, Yunnan', 'Xiuyu District', 'Beichuan Qiang Autonomous County', 'Panzhihua', 'Huaining County', 'Kagor, Tibet', 'Geermu East Railway Station', 'Jiayu County', 'Meizhou', 'Sichuan Normal University', 'Aohan Banner', 'Huanggang Normal University', 'Kaifeng', 'Songyue Pagoda', 'Guilin', 'Huilai', 'Kashgar Teachers College Main Campus', 'Mayang Miao Autonomous County', 'Tibet University, Lhasa', 'Dongying Shengli Airport', 'Lok Sin Tong Leung Kau Kui College', 'Luyuan District', 'Hagongda Stadium', 'Gongqên', "Cheng'an County", 'Li Po Chun United World College', 'Hwa Nan College, main campus', 'Xinjiang County', 'Chongqing University', 'Shaoxing YueXiu Foreign Languages College, main campus', 'Luohe', "De'e", 'Chaoyang', 'Xinrong, Tibet', 'Fushan County', 'Qiemo Airport', "Hohhot People's Stadium", 'Kanshi', 'Kashi Airport', 'Tashkurgan Tajik Autonomous County', 'Fudan University', 'Beijing Institute of Petrochemical Technology', 'Damxung County', 'Yuanshi County', 'CUHK School of Law', 'Ertaizi', 'Jinshan Sports Centre', 'Yumco', 'Gansu', 'Inner Mongolia Medical College', 'Shijiazhuang University', 'Baishan', 'Fen River', 'Wuxi', "Queen's College, Hong Kong", 'Jianshui County', 'Luliang Air Base', 'Qiqihar Sanjiazi Airport', 'Wuhan University', 'Yantai University', 'Zunyi Medical College', 'Darhan Muminggan United Banner', "Chang'an University", 'Longxing Monastery', 'Huangyan District', 'Dujiangyan Irrigation System', "Guang'an District", 'Hutiaoxia Town', 'Nanshan', 'Haidianhuangzhuang Station', 'Batang County', 'Gulou District, Fuzhou', 'Dongtan', 'Meishan', 'SIAS University', 'Hubei University of Police, main campus', 'HSBC Building, the Bund', 'China Medical University', 'Beijing TV Centre', 'Wuqiao County', 'Hohai University Stadium', 'Shanting District', 'Xidian University', 'Gannan Tibetan Autonomous Prefecture', 'Shanghai University', 'Mount Luofu', 'Nanxun District', 'Nanfen District', 'Xognga', 'Debao County', 'Jiangxi University of Finance and Economics', 'Union Building, Shanghai', 'Yuncheng University', 'Changyang Tujia Autonomous County', 'Kingkey 100', 'Kowloon Tong', 'Wanshan District', 'Yuquan Campus, Zhejiang University', 'Toudaoban', 'Leizhou Peninsula', 'Jieyang', 'Dangchang County', 'Wangtang, Anhui', 'Qinglong Manchu Autonomous County', 'Baoting Li and Miao Autonomous County', 'Guiyang', 'Harbin University of Science and Technology', 'Hailun', 'Ridung', 'Dalian University of Foreign Languages', 'Central South University', 'Nankai University Law School, main campus', "St. Stephen's Church College", 'National University of Defense Technology', 'Second Wuhan Yangtze River Bridge', 'Henan University of Finance and Economics', 'Conghua', 'Guangdong Province Museum', 'Zhaoqing', 'Lianjiang, Guangdong', 'Shijingshan District', 'Shunchang County', 'Zunhua', 'Menyuan Hui Autonomous County', "Monument to the People's Heroes", "Dong'an District", 'Chengguan, Lixin County', 'Dagdong', 'Paca, Tibet', 'Bengbu', 'Luobei County', 'Hami City', 'Wuhai Airport', "Qingdao Ocean Shipping Mariner's College", 'Renmin University of China', 'Underground Project 131', 'Yushu Tibetan Autonomous Prefecture', 'Meixi District', 'Yantai Laishan International Airport', 'Southeast University', 'Wuhan Polytechnic University', 'Wuyi Shan', 'Hangzhou Railway Station', 'Wüjang', 'Guangzhou East Railway Station', 'Jinling Hotel', 'Ribxi', 'Liaoning', 'Bandera Mountain', 'Huanggang', 'Keriya Town', 'Rinqênzê', 'Panlong District', 'Shaoshan', 'Zhejiang Public Security College, main campus', 'Lingbao City', 'Anshun Bridge', 'Liaoyang', "St. Stephen's Girls' College", 'Shandong Normal University', 'City University of Hong Kong', 'Lhato', 'Dayu County', 'Liuguanghe Bridge', 'Chengde Mountain Resort', 'Nanyang Normal University, main campus', 'China Central Radio and TV University', 'Wolong District', 'Jiazha', 'Lingnan University', 'Chongtar Kangri', 'Ximeng Wa Autonomous County', 'Nanling County', 'Shanghai Institute of Technology', 'YMCA Of Hong Kong Christian College', 'Longmen, Anxi County', 'Zhoukou', 'Changbai Korean Autonomous County', 'Yixiu District', 'Kailu County', 'Gyantse Dzong', 'Min County', 'Baoquan, Heilongjiang', 'CCC Kung Lee College', 'Songyuan', 'Quxam', 'Minqin County', 'Changsha', 'Anhui University of Technology', 'Suzhou District', 'Southern University of Science and Technology, main campus', 'Mükangsar', "Counties of the People's Republic of China", 'Shenyang China International Horticultural Exposition 2006', 'Church of Heavenly Peace, Fuzhou', 'Aigun', 'Chengdu University of Traditional Chinese Medicine', 'Beijing Petroleum Institute', 'Chengdu University of Technology', 'Samyai', "Gê'gyai County", 'Lucheng, Shanxi', 'Zhejiang Guangsha Architecture Technology College, main campus', 'Hanghai Stadium', 'Sangsang', 'Hong Kong Tang King Po College', 'Weifang Medical University', 'Yongjing County', 'Yichang', 'Naqên', 'Liucheng County', 'Qianling Mausoleum', 'Central South University Forestry and Technology, main campus', 'Anyang Technical College', 'Tianjin Locomotive Stadium', 'Rudong County', 'Dalian Medical University', 'Gangbugjiangda County', 'Binhai County', 'Houma', 'Taining County', 'Lhasoi', 'Jiulong County', 'Jinzhou Medical University', 'Geladaindong Peak', 'Zhongguancun', 'Kunming University', 'Yuet Wah College', 'Pingdingshan University', "Bei'an", 'Hohhot Baita International Airport', 'Xinxiang Stadium', 'Hanyang District', 'Shangqiu', 'National Centre for the Performing Arts', 'Tung Wah Group of Hospitals Mr. and Mrs. Kwong Sik Kwan College', 'Alamdo', 'Wuhan', "Xin'an County", 'Zhuxian', 'Fengcheng, Lianjiang County', 'Raohe County', 'Beijing Language and Culture University', 'Shandong Institute of Business and Technology', 'East China University of Politics and Law', 'Purple Mountain Observatory', 'Zitong County', 'Anping County', 'Shangri-La County', 'He County', 'Zhangjiakou', 'Gansu Agricultural University', 'Risum', 'Chongqing', 'Nanjian Yi Autonomous County', 'Nansha District', 'Yingkou', 'Cixi City', 'Gonjo County', 'Lhatse County', 'Nangong', 'Hondlon District', 'Changchun Taxation College', 'Linjiang', 'Beijing City University', 'Qingchuan County', 'Taizhou Sports Center', 'Dragon Tower', 'Yuyao', 'Northeast Normal University', 'Cangshan County', 'Xiong County', 'Zhenyuan Yi, Hani, and Lahu Autonomous County', 'Third Nanjing Yangtze Bridge', 'Xingyi Airport', 'Oiga, Ngari Prefecture', "Jishishan Bao'an, Dongxian and Salar Autonomous County", 'China International Center', 'Yantai', 'Kennedy Town', 'Xiangxi Tujia and Miao Autonomous Prefecture', 'Sichuan', 'Xingzi County', 'Enping', 'Beipiao', 'Pizhou', 'Kuandian Manchu Autonomous County', 'Longnan', 'Zhasa', 'Nanhu District', 'Nanjing Museum', 'Anshun Huangguoshu Airport', 'Yunnan Forestry Technical College, main campus', 'Jiujiang', 'Linfen County', 'Jinghong', 'Ürümqi', 'Kongtong District', 'Taoyuan County, Hunan', 'Sotang', 'Hanshan County', 'Xênkyêr', "Xi'an Jiaotong University", 'Namling County', 'Fuquan, Guizhou', 'Stanley', "Washington's Landing", 'Tongren, Guizhou', 'Hong Kong College of Medicine for Chinese', 'Aksu Prefecture', 'East China', 'Xinmi', 'Qufu', "Drum Tower of Xi'an", 'Niya', 'Skema Business School', 'Xiamen', 'Beijing National Stadium', 'Futian District', 'Ningbo Applied Science University, main campus', 'Ulan Hot', 'Ngawa City', 'Shahekou District', 'Mazhang District', 'Sanju Pass', 'Kunming Wujiaba International Airport', 'Tianmu Mountain', 'Yuhui District', 'Lintan County', 'Future International', 'Yecheng', 'Renaissance College Hong Kong', 'Dunhuang Airport', 'Sêngdo', 'Huaqiao University', 'Dujiangyan City', 'Xiling Bridge', 'Goicangdoi', 'Baqên Town', 'Nanhai District Stadium', 'Guizhou University', 'Inner Mongolia University of Technology', 'Bagar, Lhari County', 'Wenshan Puzhehei Airport', 'Alar', 'Banag', 'Meigu County', 'Wumatang', 'Kangsê', 'Beihai Park', 'Gongyi', 'HHCKLA Buddhist Leung Chik Wai College', 'Wangdian, Tibet', 'Jiangwan Bridge', 'Mei County, Guangdong', 'Longmenshan Fault', 'Sichuan Giant Panda Sanctuaries', 'Jiangmen Stadium', 'Logtang', 'Longyou County', 'Longlin Various Nationalities Autonomous County', 'Hult International Business School, Shanghai', 'Yangbi Yi Autonomous County', 'South China Karst', "Ning'er Hani and Yi Autonomous County", 'Beihua University, main campus', 'Chokpori', 'Cilin, Fenghua', 'Soviet aircraft carrier Kiev', 'Fujian Tulou', "Sa'gya County", 'Wuhai', 'Yongchuan District', 'Tiu Keng Leng', 'Laohekou', 'Sheshan Basilica', 'Beijing Forestry University', 'Sheyang County', 'Xihu District, Hangzhou', 'Gushi County', 'Sumgal', 'Dêlêg', 'Changxing County', 'Handan', 'Kumar, Heilongjiang', 'Luanchuan County', 'Bengbu Medical College', 'Shacheng Railway Station', 'Panjin', "St. Francis' Canossian College", 'Mount Liang', 'Alxa League', 'Buddhist Hung Sean Chau Memorial College', 'Yunnan Vocational College of Judicial Officer, main campus', 'Zongxoi', 'Dailing District', 'Wuyishan, Fujian', 'Fuxin Mongol Autonomous County', 'Yangdong County', 'Lhasa Gonggar Airport', 'Guangzong County', 'Gangu County', 'Nanjing University of Technology, Jiangpu campus', 'Jiangbei District, Chongqing', 'Longhu District', 'Nanjing County', 'Chakragil', 'Doijiang', 'Wujiaqu', 'Yangquan', 'Shanghai Jiao Tong University', 'Xiangshui County', 'Ngükang', 'Central Conservatory of Music', 'Minsheng Bank Building', 'Flower Lane Church', 'Xinyang', 'Ming Xiaoling Mausoleum', 'Kai County', 'Mêdog County', 'Shishi, Fujian', 'Laoshan Bicycle Moto Cross (BMX) Venue', 'Siu Sai Wan', 'Jimsar County', 'Yanshi Bridge', 'Zhaotong Teachers College, main campus', 'Kyi River', 'Qingdao University of Science and Technology', 'Tung Wah Group of Hospitals Lui Yun Choy Memorial College', 'Chekiang Teachers College, main campus', 'Renmin Bridge', 'Tsuyung Airfield', 'Beijing University of Technology', 'Xiajin County', 'Jishishan Bonan, Dongxiang and Salar Autonomous County', 'The University of Hong Kong', 'Kongur Tagh', 'Duchang County', 'Lui Cheung Kwong Lutheran College', 'Nanjing University of Posts and Telecommunications', 'Anhui University of Traditional Chinese Medicine', 'Fuyang Teachers College', 'Guzhen, Guangdong', 'Beipanjiang River 2003 Bridge', 'Xümo', 'Zengcheng', 'Hubei University of Economic, main campus', 'Qangba', 'Domartang', 'Fujian Theological College, main campus', 'Yongquan Temple', 'Anxin County', 'Xinyang Normal University, main campus', 'Lincang Teachers College', 'Shunping County', 'Changshu', 'Congjiang County', 'Lion Grove Garden', 'Paramount', 'Huangshan Tunxi International Airport', 'Shangganling District', 'Diwang International Commerce Center', 'Fengshun County', 'Hanzhong', 'North University of China', 'Quannan County', 'Chahar Right Back Banner', 'Huozhou', 'Ye County', 'Fujian Normal University', 'Xiuyan Manchu Autonomous County', 'Zhêxam', 'Pearl River Tower', 'Xilinhot Airport', 'Yuxi', 'Huainan Normal University, main campus', 'Maonan District', 'Lujiazui', 'Gyibug', 'Liaodong Peninsula', 'Cole Field House', 'Tonglu County', 'Taoranting Park', 'Pingwu County', 'Huzhou Vocational & Technical College, main campus', 'Minjiang University', 'Tseung Kwan O New Town', 'Lake Urru', 'Tai Wai', 'Dongbo', 'Xinmin, Liaoning', 'Maogang District', 'Qingshan District, Baotou', 'Gamba County', 'Lam Tin', 'Iron Gate Pass', 'Miaoying Temple', 'Tanglhai', 'Tengyue Town', 'Beijing Materials University', 'Dalian University', 'Nanchang', 'Southwest University for Nationalities, Taipingyuan', 'Burang Town', 'Bogda Peak', 'Changchun University of Science and Technology', 'Zigui County', 'Jinping District', 'Jishou University, main campus', 'Xidan', 'Heaven Lake of Tian Shan', 'Yinchuan Hedong Airport', 'Fanchang County', 'Peking University Health Science Center', "Ma'anshan", 'Garma, Tibet', 'Yuanjiang Hani, Yi, and Dai Autonomous County', 'Dongfeng', 'Tingri Town', 'Tobgyai', 'Hebei Normal University', 'Rugao', 'Maizhokunggar County', 'Xichan Temple', 'Nantong Shipping College of Jiangsu Province', 'Ocean University of China', 'Nangxian', 'University of Logistics', 'Great Wall of Qi', 'Nanwu Si Monastery', 'Jingchu University of Technology, main campus', 'Xintai', 'Fairmont Beijing', 'Gyaca County', 'Guangde County', 'Oriental manhattan xujiahui', 'Fuxin', 'Zito, Tibet', 'Qionglai Air Base', 'Rucheng Yao Autonomous County', 'Lura, Tibet', 'Qijiang District', 'Olympic Green Hockey Field', 'Yucheng County', 'Beiyue Temple', 'Sanda University', 'Garzê Town', 'Jinzhou Xiaolingzi Airport', 'Ning County', 'Hangzhou East Railway Station', 'Fumin County', 'Changji', 'Province of China', 'Zhaotong', 'Runyang Bridge', 'Nanchang University', 'Lingshui Li Autonomous County', 'Honggang District', 'Zhaxizê', 'Dali', 'Ambassy Club', 'Huating, Shanghai', 'Pudong', 'Jingning She Autonomous County', 'Nyainrong County', 'Shun Tak Fraternal Association Seaward Woo College', 'Changyuan County', 'Anning', 'Qingshui County', 'Tongdao Dong Autonomous County', 'Nyingzhong Township', 'Hubei Institute of Fine Arts', 'Puyang', 'Xungba', 'HKMA David Li Kwok Po College', 'Songyuan River', 'Wuhan Railway Station', 'Jênlung', 'Pok Oi Hospital Chan Kai Memorial College', 'Jingchuan County', 'Gannan County', 'Parling', 'Zhejiang Forestry University', 'Baoshan Teachers College, main campus', 'Helan Mountains', 'Xinjiang Medical University', 'Sichuan Conservatory of Music', 'Xuwen County', 'Fan County', 'Huangshan District', 'Ruyi Lake', 'Southwest China', 'Huanjiang Maonan Autonomous County', 'Yarkand River', 'Port of Shenzhen', 'Yuanyang County, Henan', 'Fuling District', 'Gertrude Simon Lutheran College', 'Zoigê County', 'Muling', 'Jiangkou County', 'Luntai County', 'China Pharmaceutical University', 'Zhaoyuan County', 'Shunde District', 'Nanchong', 'Nyêtang', 'Huizhou Railway Station', 'Caritas Bianchi College of Careers', 'Ru’gyog', 'Xinyu', 'Manchuria Mission College, main campus', 'Datong District, Daqing', 'R&F Centre', 'Xiangyang Liuji Airport', 'Sangzhi County', 'Taobei District', 'Yunnan Normal University Business School', 'Jinning County', 'National Taiwan University of Science and Technology', 'Yilan', 'West China Medical University', 'Fuliang County', 'Hua County, Henan', 'Chongqing Normal University', 'Dêrdoin', 'Xiaogan', 'Wangtan, Zhejiang', "Qin'an County", 'Anqing', 'Xangzha', 'Xuchang', 'Luoyuan County', 'Qusum County', 'Haidong District', 'Guangchang County', 'Khunjerab Pass', "Couple's Retreat Garden", 'Gucheng County, Hebei', 'Tongguanshan District', 'Xinxiang', 'Lushan County, Henan', 'Jimo City Stadium', 'Jiaoqu, Tongling', 'Inner Mongolia', 'Tongji Medical College', 'Bama Yao Autonomous County', 'Beijing Electronic Science and Technology Institute', 'Liyang', 'Shangyu', 'Urmai', 'Tianjin University of Traditional Chinese Medicine', "Pu'er City", 'Huangbaiyu', 'Wanning', 'Guoqing Temple', 'Huanghe Science and Technology University', 'Xuri, Sichuan', 'Changgo, Tibet', 'Artux', 'Melungtse', 'Samsang', 'Korla', 'Shangrao County', 'Haidian District', 'Mission Covenant Church Holm Glad College', 'Tashi Dor', 'Nanning', "Zhao'an County", 'Pingding County', 'Qujing', 'South China Agricultural University', 'Songacha River', 'Northeastern University', 'Xishan District, Wuxi', 'Jiangcheng Hani and Yi Autonomous County', 'Tonghua', 'Astana Cemetery', 'Guiyang Medical University', 'Shenyang Agricultural University', 'Yongding County', 'Wuchuan County, Inner Mongolia', 'Changmar', 'Greater Khingan', 'Tsozong Gongba Monastery', 'Wenzhou World Trade Center', 'Chagyoi', 'Shan County, Shandong', 'Dalian Fisheries University', 'Tarim River', 'Hailar Dongshan Airport', 'Padain', 'Shuangzhuyuan', 'Laibin', 'Nyêmo County', 'Black Dragon Pool', 'Tanzhe Temple', 'Shanyang County', 'Beidaihe District', 'Dongting Lake Bridge', 'Hubei', 'Karakul', 'Abag Banner', 'Kang County', 'Dachong', 'Hanzhong Xiguan Airport', 'Laiyuan County', 'Gangkhar Puensum', 'Wuzhen', 'Shaoguan City Xihe Sports Centre', 'Former Yan', 'Huarong County', 'Dengsheng', 'East Hebei Autonomous Council', 'Shanghai Lixin University of Commerce', 'Narüdo', 'Laoyachen Subdistrict', 'Shiguan River', 'Arizona Ave at Frye', 'Hengduan Mountains', 'Chengdu Goldenport Circuit', 'Gaoyang County', 'Anhui Normal University', 'Zhanyi Airport/Air Base', 'Linhe District', 'Nanjing Medical University', 'Shanghai Medical University', 'South China University of Technology', 'Xiamen Gaoqi International Airport', 'Wansheng District', 'Danzhou', 'Diyag', 'Wenchang', 'Jardine House', 'Kenli County', 'Zaisang', 'Chahar Province', 'Huangnitang', 'Panyu District', 'Chibma', 'Henan Mongol Autonomous County', 'Hohhot', 'Jiyuan', 'Baqu Arena', 'Hor, Tibet', 'Sha Tau Kok', 'Jaggang', 'Xingguo County', 'Zhongyuan Institute of Technology', 'Jingyuan County, Gansu', 'Hainan Normal University', 'Zhejiang University of Science and Technology', 'Beijing Institute of Clothing Technology', 'Yutong International Sports Center', 'Huaxi District', 'Huizhou University', 'Heze', 'Suichuan County', 'Xunhua Salar Autonomous County', 'Gaocheng', 'Chenjia, Shanghai', 'Haixi Mongol and Tibetan Autonomous Prefecture', 'Changjiang Li Autonomous County', 'Liangzhou District', 'Shanhua Temple', 'Bingling Temple', 'Zhongshan Beilu Long-distance Passenger Transport Station', 'Zhuhai', 'Hongjiang', 'Beijing Sport University', 'Mianchi County', 'Zhaotong Airport', 'Aksai Kazakh Autonomous County', 'Nêdong County', 'Guizhou Provincial Stadium', 'Luquan Yi and Miao Autonomous County', 'Sidu River Bridge', 'Fenghuoshan Tunnel', 'Minhou County', 'Nanchang Changbei International Airport', 'Tsurphu Monastery', 'Shaanxi History Museum', 'Barkam County', 'Guilin University of Electronic Technology', 'Hong Kong Shue Yan College', 'Lhünzhub County', 'Zaxoi', 'Gur, Tibet', 'Chaonan District', 'Yunnan Normal University', 'Miyun County', 'Otog Banner', 'Porgyang', 'Pingluo County', 'Anhui Seminary, main campus', 'Iron Pagoda', 'Benxi', 'Laka, Tibet', 'Jiaxing University, main campus', 'Dongying', 'Beiqu Long-distance Passenger Station', 'Pinghe County', 'Ying Wa College', 'Qingtongxia', 'Datong', 'Shanghai New International Expo Center', 'Nanjing University of Science and Technology', 'Beishi District', 'Jieshou', 'Tongli', 'Shiyan', 'Chaohu University', 'Dagzhuka', 'Pingyi County', 'JW Marriott Hotel Hong Kong', 'Hong Kong University of Science and Technology MBA', 'Wanfu Temple', 'Yunnan-Guizhou Plateau', 'Songjiang District', 'La Salle College', 'Nangpa La', 'Yunnan Vocational and Technical College of Science and Technology Information, main campus', 'Dalian Futures Square 1', 'Donghua University', 'Nyima County', 'Mabian Yi Autonomous County', 'Shaxi, Yunnan', 'Plain and Bordered White Banner', 'Li County, Gansu', 'Qingyang Airport', 'Chan Sui Ki Perpetual Help College', 'Baoshan College of Chinese Medicine, main campus', 'Jiujiang Financial and Economic College', 'Xichuan County', 'Mausoleum of Genghis Khan', 'Maqu County', 'Tung Wah Group of Hospitals Mrs Wu York Yu Memorial College', 'Yaohai District', 'Ghulja', 'Karasahr', 'Juancheng County', 'Shek Tong Tsui', 'East China Jiaotong University', 'Taishan', 'Hangya Railway Station', 'Haicheng District', 'Jinchuan District', "Fu'an City", 'Raoping County', 'Anhui University', 'Gamtog', 'Chongqing Baishiyi Air Base', 'Precious Belt Bridge', 'Banan District, Chongqing', 'Guanghua Temple', 'Tianwan Nuclear Power Plant', 'Jilin', 'Tianjin Olympic Center Stadium', 'Zhecheng County', 'Jinxiu Yao Autonomous County', 'Chaoyang Sports Centre', 'Minle County', 'Bishan County', 'Jiguan District', 'Dingtao County', 'Bainang County', 'Zhejiang Vocational College of Commerce, Main Campus', 'Gutian County', 'Window of the World', 'West Anhui University, main campus', 'Foshan', "Hong Kong Chinese Women's Club College", 'Huiji District', 'Dali University, main campus', 'Ulugqat County', 'Baqên County', 'Zhejiang Ocean University', 'Heihe', 'University of International Business and Economics', 'Huangshan City', 'Kunggar', 'Zhouzhuang', 'Guanghe County', 'Pujiang County, Zhejiang', 'Xianfeng County', 'Dongping County', 'S.T.F.A. Lee Shau Kee College', 'Qoi, Tibet', 'Dorbod Autonomous County', 'Guangyuan', 'Baiyangdian Lake', "Du'an Yao Autonomous County", 'Beijing city fortifications', 'Mount Heng', 'Fuding', 'Linxia City', 'Hunan Normal University', 'Oriental Sports Center Station', 'Ninglang Yi Autonomous County', 'Lancang Lahu Autonomous County', 'Gyamug', 'Yudo, Tibet', 'Shenyang University of Technology', 'Dongxiang County, Jiangxi', 'Drepung Monastery', 'Daqing', 'Yerpa', 'Jiamusi Dongjiao Airport', 'Tradruk Temple', 'Infinito College', 'Dongfeng County', 'Ren County', 'Kizil Caves', 'Inner Mongolia Agricultural University', 'Jade Water Village', 'Huilai County', 'World Joyland', 'Daxing District', 'Shanghai Ferry Terminal', 'Wulan Railway Station', 'Shangshui County', 'Suzhou Medical College', 'Weizhou Island', "Pan'an County", 'Xinchang County', 'Mingxi County', 'Wuwei County', 'Kaihua County', 'Port of Guangzhou', 'Zhejiang Normal University', "Dalian People's Stadium", 'Xoi', 'Wenzhou Teachers College, main campus', 'Qinzhou District', 'Nanjing College for Population Programme Management, main campus', 'Tongbai County', 'University of Saint Joseph', 'Cheung Kong Center', 'Happy Valley', 'Yanshan University', 'Gandaingoin', 'Jinan University', 'Dongzhu', 'Guangdong Medical College', 'Zoidê Lhai', 'UNU-IIST', 'Zhongzê', 'Shangnan County', 'Hefei', 'Rongbuk Monastery', 'Dongzhou', 'Buddhist Wai Yan Memorial College', 'Jinping-I Hydropower Station', 'Xinyi', 'Liuan', 'Xoka', 'Jiangsu University', 'Sha Tin Methodist College', 'Guangdong Union Theological Seminary, main campus', 'Raimondi College', 'Shenyang Institute of Aeronautical Engineering', 'Repulse Bay', 'Wuxi Railway Station', 'Weihai Dashuibo Airport', 'Chekiang Province, Republic of China', 'Nyalam County', 'Dongshan County', 'Yinchuan', 'Sanming', 'Shangli County', 'Jiaxing Vocational Technical College, main campus', 'Wai Kiu College', 'Enshi Xujiaping Airport', 'Lijin County', 'Inner Mongolia University of Agriculture', 'Mianyang', 'Wenquan Township, Qinghai', 'Golingka', 'CCC Ming Kei College', 'Huazhong Agricultural University', 'King Ling College', "Nan'an District", 'Haidian Island', 'Anhui University of Finance and Economics', 'Tarrong', 'Hong Kong University Graduate Association College', 'Inner Mongolia College of Farming and Animal Husbandry', 'Beijing Union University', 'Capital University of Economics and Business Campus East', 'Alxa Left Banner', 'Xungqên', 'Shilin Yi Autonomous County', 'Mashan District', 'Yingxiu', 'Altai Mountains', 'Yuzhong District', 'Shaolin Monastery', 'Henan University of Urban Construction,main campus', 'Peking University Founder Technology College', 'Zharen', 'Victoria Peak', 'Nanjing Forestry University', 'Zhangjiajie National Forest Park', 'Shun Tak Fraternal Association Leung Kau Kui College', 'Xinjiao', 'Lop Desert', 'Qinhuangdao Shanhaiguan Airport', 'Tianjin Urban Construction Institute', 'Mainling County', 'Kuytun', 'Shenyang Normal University', "Huai'an", 'Beijing Institute of Technology', 'Tung Wah Group of Hospitals C. Y. Ma Memorial College', 'Qiandongnan Miao and Dong Autonomous Prefecture', 'Suichwan Airfield', 'Dongzhi County', 'Dêxing', 'Quanzhou Jinjiang Airport', 'Zhangping', 'Zaoyang', 'Pingbian Miao Autonomous County', 'Tung Wah Group of Hospitals Wong Fut Nam College', 'Sansui County', 'Tsinghua Law School', 'Changshou District', 'Quzhou', 'Wah Yan College, Hong Kong', 'Sa’gyari', 'Sheqi County', 'Zhangmu', 'Liping County', 'ELCHK Yuen Long Lutheran College', 'Underground City', 'Changsha Huanghua International Airport', 'Yiyang', 'Meishi Film Academy', 'Jiaohe Ruins', 'Zhujiang New Town', 'Huangshan', 'Qüxü County', 'Qingdao Technological University, Fei County', 'Xizhou Teachers University, main campus', 'Shangchuan Island', 'Po Leung Kuk Wai Yin College', 'Dongmen Subdistrict, Shenzhen', 'Bukadaban Feng', 'Qingdao Technological University, Huangdao', 'Sêbrong', 'Baxoi County', 'Clover Bend, Arkansas', 'Tongguan County', 'Tianjin Agricultural College', "Yong'an", 'Mount Genyen', 'Huangdao District', 'Zhangzhou', 'Hejian', 'Marqu', 'McMahon Line', 'Linxi County, Hebei', 'Pingxiang, Guangxi', 'Jiangshan', 'Zhengning County', 'CCC Hoh Fuk Tong College', "Saint John's University, Shanghai", 'Ringtor', 'Qinyang', 'Ordos City', 'Yin Mountains', 'Mohe County', 'Hainan Medical College', 'Guangdong Pharmaceutical University', 'Shandong Agricultural University', 'Hong Kong', 'Qidong, Jiangsu', 'Ningling County', 'Lhozhag County', 'Bogda Shan', 'Xinjiang Agricultural University', 'Fujian University of Traditional Chinese Medicine', 'Linze County', 'China University of Mining and Technology', 'Changzhou Benniu Airport', 'Jixi County', 'St. Bonaventure College and High School', 'Jinping Miao, Yao and Dai Autonomous County', 'Hezhou', 'Tangluqangma', 'Bairiga', 'Muztagh Ata', 'Qizhong', 'Jiangyong County', 'Gar County', 'Gyaidar', 'Sun Yat-sen University', 'Jianyang, Sichuan', 'Baofeng County', 'Yanjin County, Henan', 'Guangji Bridge', 'Lumachomo', 'Qingyuan Railway Station', 'Mabja', 'Cangzhou', 'Zigong', 'Ruicheng County', 'Baisha Li Autonomous County', 'Luonan County', 'Changzhi', 'Danfeng County', 'Inner Mongolia Finance and Economics College', 'Garzê County', 'Beijing University of Posts and Telecommunications', 'Zhejiang Pharmaceutical College, main campus', 'Baixoi', 'Mainda', 'Changchun Wuhuan Gymnasium', 'Lingbi County', 'Jiefang Bridge', 'Three Parallel Rivers of Yunnan Protected Areas', 'Xia Lingka', 'Ani Tsankhung Nunnery', 'Ngiangri', 'Zhanang County', 'Bortala Mongol Autonomous Prefecture', 'Jiamusi University', 'Lianyuan', 'Yizhou', 'Ningbo Cixi Stadium', 'Hejing County', 'Taiyuan Wusu Airport', 'China National School of Administration', 'Xiaoguwei', 'North China Union College for Women, main campus', 'Dongqiao, Tibet', 'Changchun University of Technology, main campus', 'Jiaojiang District', 'Shehong County', 'HSBC Building', 'Xinglong Station', 'Luoding', 'Yuntai Mountain', 'Pi County', "Tong'an District", 'Shanxi Normal University Linfen College, main campus', "De'an County", 'Western Hills', 'Liuzhou Sports Centre', 'Birba', "Xiang'an District", 'Huangpu River', 'Minfeng Town', 'Haidong Region', 'Siachen Muztagh', 'Xiaolan', 'Hankou', 'Honghe University, main campus', 'Shushan District', 'Langham Place', 'Hebei University of Technology', 'Beijing Foreign Studies University', 'Wuping County', 'Third Military Medical University', 'Muhaksan', 'Hongcun, Anhui', 'Gaotai County', 'AIA Central', 'Inner Mongolia University for Nationalities', 'Paibi', 'Hoboksar Mongol Autonomous County', 'Lhazhong', 'Sumzom', 'Xingyang', 'Yuncheng', 'Xichang', 'Port of Ningbo', 'Chubarong', 'Shanhai Pass', 'Zhu Jia Jiao', 'Haiyuan County', 'Zhejiang Wanli University, main campus', 'Victory Plaza', 'Xiangyang', 'Hongkou Football Stadium', 'Yunnan University of Finance and Economics', 'Hunan', 'Langxi County', 'Dunhuang', 'Youxi County', 'Samai', 'Hotan Airport', 'Changchun', 'Yiwu', 'Dagmo', 'Northern Nationalities University, main campus', 'Nagarzê County', 'Huining County', 'Humen', 'Renshou County', 'Jiegao', 'Jingzhou', 'Pingnan County, Fujian', 'Shenzhen', 'Ningxia Medical College, main campus', 'Shikumen', 'Emin Minaret', 'Nujiang Lisu Autonomous Prefecture', 'Zhaxigang', 'Shanghai Maritime University', 'Zhangbei County', 'Yi County, Hebei', 'Hangzhou Jianqiao Airport', 'Yakeshi', 'West Pearl Tower', 'Taihu County', 'School of Medicine, Shanghai Jiao Tong University', 'Huachi County', 'Shaquanzi', 'Ladoi', 'Hsü Chao Spring', 'Jianyang, Fujian', 'Drongtse Monastery', 'Hebei Normal University of Science and Technology', 'Haikou Meilan International Airport', 'Sapügang', 'Kwun Tong Maryknoll College', 'Yungang Grottoes', 'Xingwen County', 'Tianjin Foreign Studies University', 'Macau Security Forces Training College', 'Zangqênrong', '2nd Ring Road', 'Guangdong University of Foreign Studies', 'Baga, Mainling County', 'Wenzhou Vocational and Technical College, main campus', 'Pudacuo National Park', 'Minquan County', 'Qêqên', 'Church of the Saviour, Beijing', 'Zhejiang Theological College, main campus', 'Neixiang County', 'Langham Place Hotel', 'Henan Agricultural University', 'Sewu, Tibet', 'Kangxung', 'Communication University of China', 'Acheng District', 'Shanxi Medical College, main campus', 'Shawan County', 'Liuyang', "People's Square Station", 'Yu County, Hebei', 'Shaoxing University', 'Mamba, Tibet', 'Gasherbrum', 'Chongqing University of Posts and Telecommunications', 'Lanshan County', 'Yanbian Medical College, main campus', 'Fengze District', 'Ningguo City', 'Changji Hui Autonomous Prefecture', 'China Holiness College', 'Leshan', 'Nanfeng County', 'Dengfeng', 'Sha Tin College', 'Xixia County', 'Xagquka', 'Haiyin Bridge', 'Jiamusi Medical College', 'Mount Huangbo', 'School of Law, Xiamen University', 'City College', 'Rongshui Miao Autonomous County', 'Galden Jampaling Monastery', 'Liaoning College of Finance and Trade', 'Cangyuan Wa Autonomous County', 'Wangjiang County', 'Shanghai Urban Planning Exhibition Center', 'Qingyuan Manchu Autonomous County', 'Qarasa', 'Zhuozhou', 'She County, Anhui', 'Guangzhou University of Chinese Medicine', 'Lujiang County', 'Xiapu County', 'Chao Lake', 'Wusu', 'Shing Mun Reservoir', 'Zixi County', 'Chenggong District', 'Salween River', 'Yangtze River', 'Jiangyou', 'Mount Ta', 'Wulian County', 'Hebei North University', 'Shanwei', 'Chabug', 'Guyuan', 'Xarsingma', 'Zhangdong', 'Yongdeng County', 'Yuzhong County', 'Kaiyuan', 'Qinggang County', 'Cathedral of the Immaculate Conception', 'Deyang', 'Palpung Monastery', 'Dadukou District', "Ang'angxi District", 'Liujiaxia Dam', 'Ziyun Miao and Buyi Autonomous County', 'Racaka', 'Harbin', 'Tibetan Plateau', 'Dandong', 'Shuangliu County', 'Duoma', 'Eastern Liaoning University, main campus', 'Longyan Guanzhishan Airport', 'Central Academy of Drama', 'Kizilsu Kirghiz Autonomous Prefecture', 'Qinghai Normal University', 'Luzhou Lantian Airport', 'Dingnan County', 'Hong Kong Polytechnic University', 'Discovery Bay School', 'Qitai', 'Woinbodol', 'Wuwei, Gansu', 'Mianzimu', 'HMS Tamar', 'Gonggar County', 'Kaiping Diaolou', 'Hefei Luogang International Airport', 'China Criminal Police College', 'Mori Kazakh Autonomous County', 'Ulungur Lake', 'Yardoi', 'Guilin Medical University', 'Lingka', "St. Mary's Canossian College", 'Yanqing County', 'Changde', 'Po Leung Kuk Tong Nai Kan College', 'Dabu County', 'Yunnan Medical College, main campus', 'Banqiao Dam', 'Xuzhou Guanyin Airport', 'Wuyi County, Hebei', 'Qingyunpu District', 'Mount Qingcheng', 'School of Geodesy and Geomatics, Wuhan University', 'Yinchuan Helanshan Airport', 'Lingui District', 'Renmin University of China Law School', 'Xiangnan University, main campus', 'Liaocheng', 'Lunghua Civilian Assembly Center', 'Nilka County', 'Dalad Banner', 'Sun Yat-sen University of Medical Sciences', 'Ulanqab', 'Gatang', 'Heilongjiang', 'Datong Yungang Airport', 'Li Ying College', 'Linzhou, Henan', 'Guilin University of Technology', 'Saint Sophia Cathedral in Harbin', 'Banbar Town', 'China Jiliang University', 'Guangdong University of Technology', 'Taizhou Luqiao Airport', 'Têmarxung', 'Xinluo District', 'Dagzê, Dagzê', 'Nanyang Jiangying Airport', 'Zhangshu', 'Yubei District', 'Xingning, Guangdong', 'Weinan', 'Caritas Francis Hsu College', 'Ganjingzi District', 'Barköl Kazakh Autonomous County', 'China Hotel', 'Fudan University Shanghai Medical College', 'Nanjing University of Technology, main campus', 'Guangxi University for Nationalities', 'Ho Fung College', 'Sangri County', 'Laiyang', 'Xiongyue', 'Huma River', 'Güncang', 'Liangping Airport', 'Yuexi County, Anhui', 'Khamber Jong', 'Si County', 'Xundian Hui and Yi Autonomous County', 'Yümai', 'Fangshan District', 'Beijing University of Chemical Technology', 'Madame Tussauds Hong Kong', 'Daxue Mountains', 'Chaozhou', 'Zangxoi', 'Huxian Airport', 'Xuelian Feng', 'Ojok-tong', "Yan'an Ershilipu Airport", 'Tsomon Ling', 'Tashilhunpo Monastery', 'Rimar', 'Jiangxi', 'Dazu Rock Carvings', 'Julu County', 'Huzhou', 'Nanjing Aeronautics and Astronautics University', 'Second Military Medical University', 'Haizhu Bridge', 'Mianyang Nanjiao Airport', 'Moxi Town', 'Tumxuk', "Pu'er Simao Airport", 'Gaoyou', 'Xiaoshangqiao', 'Xiuzhou District', 'Christian Alliance Cheng Wing Gee College', 'Shangjie District', 'Shamian Island', 'Wuyishan Airport', 'Upal', 'Methodist Lee Wai Lee College', 'Suibin County', 'Jingyuan County, Ningxia', 'Yizhang County', 'Nanning Wuxu International Airport', 'Fogang County', "Shandong University of Science and Technology, Tai'an", 'Quanjiao County', 'Cuiheng', 'Shenyang College of Pharmacy, main campus', 'Houhai', 'Retreat & Reflection Garden', 'Guangzhou Railway Station', 'Guigang, Guangxi', 'Shanghai University of Science & Technology', 'Yanghe Stadium', 'Qingdao International Sailing Centre', 'Zara, Tibet', 'Lunan District', 'Yunnan Nationalities University', 'Pulandian', 'Garxincun', 'Huangnan Tibetan Autonomous Prefecture', "Hunan Provincial People's Stadium", 'Mount Kailash', 'Harbin Taiping International Airport', 'Guichi', 'Gardê', 'Shanghai Oriental Art Center', 'Changsha County', 'Macau University of Science and Technology', 'Zhejiang University, main campus', 'Zhengzhou University of Light Industry', 'Pinghu', 'Fukang', 'Abiding College', 'Jinta County', 'Shenyang Conservatory of Music', 'Jiangsu Polytechnic University, main campus', 'Peking Union Medical College', 'Ninghua County', 'Zhenyuan County, Gansu', 'Chong Gene Hang College', 'North China Electric Power University', 'Teram Kangri', 'Shandong Economic University', 'Jon M. Huntsman Center', 'Tumen', 'Tiantan Stadium', 'I-Shou University', 'Wen County, Gansu', 'Changle County', 'Yunnan Vocational College of Mechanical and Electrical Technology, main campus', 'Shanghai Indoor Stadium', 'Yishui County', 'Wudu District', 'Shanghai University of Finance and Economics', 'Qinghe County, Hebei', 'Chongqi Bridge', 'Gasherbrum IV', 'Qingdao Liuting International Airport', 'Akqi County', 'Huailai County', 'Yangtze Insurance Building', 'Beijing Institute of Education', 'Nyalam Town', 'Shaowu', 'Guangzhou Sports University', 'Erenhot', 'Dêqên Tibetan Autonomous Prefecture', 'Gaoqing', 'Pok Oi Hospital Tang Pui King Memorial College', 'Lhasa', 'Laoximen Station', 'Jinhua', 'Xagnag', 'Jelep La', 'Harqin Banner', 'Habahe County', 'Zhaoqing University', 'Guandu District', 'Central (CTA Green)', 'Huizhou', 'Port of Donglian', 'Presidential Palace', 'Shangzhi', 'Beijing Film Academy', 'Zhabsang', 'Gasherbrum II', 'Baoshan, Yunnan', 'Manzhouli', 'Sêrca', 'Guangzhou Baiyun International Airport'}
            Answers = 3721, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.101s]
          Answers = 3721, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.101s]
        Checking schema 46 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 84
            Final Answer: {'Chinese drywall', 'Chu–Han Contention', 'Revolt of the Three Feudatories', 'Sichuan invasion', 'Yellow Turban Rebellion', 'Campaign to Suppress Bandits in Wuping', 'Revolt of Tianshui', 'Campaign to Suppress Bandits in Northern China', 'Second Sino-Japanese War', 'Seven Grievances', 'Bai Lang Rebellion', 'Campaign to Suppress Bandits in Northwestern China', 'Second Opium War', 'Asian and Pacific theatre of World War I', '2007 pet food recalls', 'Northern Expedition', 'China Burma India Theater', 'Taiping Heavenly Kingdom', 'Battle of Guanzhong', 'Protein adulteration in China', "Qin's wars of unification", 'Campaign to Suppress Bandits in Southwestern China', '2008 Chinese milk scandal', 'Campaign against Yuan Shu', 'Battle of Dagu Forts', 'Taiping Rebellion', 'Campaign at the China–Burma border', 'Battle of Dengbu Island', 'Battle of Beitang', 'Campaign to Suppress Bandits in Western Guangxi', 'Boxer Rebellion', 'Battle of Tysami', 'Gongche Shangshu movement', '2008 Chinese heparin adulteration', '2005 anti-Japanese demonstrations', 'Dutch–Portuguese War', 'An Lushan Rebellion', 'Battle of Yangping', '2007 Chinese slave scandal', 'Conquest of Wu by Jin', 'Gaselee Expedition', 'Hundred Flowers Campaign', 'National Protection War', 'Battle of Shiting', 'Irene Incident', '3rd BRICS summit', 'Shanghai pension scandal', 'Liang Province Rebellion', 'Xinhai Revolution', 'Battle of Fatshan Creek', 'Second Zhili–Fengtian War', 'Campaign of the North China Plain Pocket', 'Battle of Bi', 'Chongqing gang trials', 'Opium Wars', 'Seymour Expedition', 'Sino-Soviet split', 'Campaign to Suppress Bandits in Northern Guangdong', 'Battle of Beicang', 'Chinese Civil War', 'Battle of Yangcun', 'Battle of Baxi', 'First Opium War', 'Dungan revolt', 'Campaign to Suppress Bandits in Dabieshan', 'Battle of Shanhai Pass', 'Battle of Banquan', 'Battle of the Leotung', 'Sino-Soviet border conflict', 'Meng Da Rebellion', 'Campaign to Suppress Bandits in Longquan', '1136 B.C.E.lunar eclipse', 'Sino–French War', '2009 Chinese lead poisoning scandal', 'Longhai Campaign', "Sun Ce's conquests in Jiangdong", "Jiang Wei's Northern Expeditions", 'Battle of Lize', 'Battle of Zhenhai', 'International reaction to the 2008 Chinese milk scandal', "Battle of Pai-t'ou-tzu", 'Battle of Taku Forts'}
            Answers = 82, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 82, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 47 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 48 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.contains_major_portion_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Gaobei Tulou Cluster', 'Gaotou Township'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 49 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.skosbase.vocabulary_equivalent_topic.narrower_concept'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.skosbase.vocabulary_equivalent_topic.narrower_concept ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.skosbase.vocabulary_equivalent_topic.narrower_concept ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Book design--Awards--China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 50 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 5
            Final Answer: {'2008 Summer Olympics', '2002 Winter Olympics', '2012 Summer Olympics', '1980 Winter Olympics', '2010 Winter Olympics'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 51 / 542: {
          [('Main', '==', 'm.0d05w3', ['exhibitions.exhibition_subject.exhibitions_created_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China Design Now'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 52 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.mystery.cryptid_area_of_occurrence.cryptid_s_found_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.mystery.cryptid_area_of_occurrence.cryptid_s_found_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.mystery.cryptid_area_of_occurrence.cryptid_s_found_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Yeren'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 53 / 542: {
          [('Main', '==', 'm.0d05w3', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Samsara'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 54 / 542: {
          [('Main', '==', 'm.0d05w3', ['media_common.netflix_genre.titles'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 445
            Final Answer: {'Devils on the Doorstep', 'Father', "Where Is Mama's Boy", 'Murderer', 'Darkness Bride', 'Woman Demon Human', 'Prince of the Himalayas', 'Life Express', "Zhou Yu's Train", 'Late Rose', 'Bat Without Wings', 'Frozen', 'Roaring Across the Horizon', 'Tibetan Buddhism in China', 'My American Grandson', 'Everlasting Regret', 'Mysterious China: Holy Mountain', 'Balzac and the Little Chinese Seamstress', 'Crossing the Mountain', 'Red Cliff II', 'The Sniper', 'Red Fists', 'Apart Together', 'Farewell My Concubine', 'Shaolin Kung Fu: Crutch vs. Spear', 'Labyrinth of Death', 'The Message', 'Waiting in Beijing', 'Special Operating Room', 'Taste of Lemon Yellow', 'Suffocation', 'Shaolin Kung Fu: Nanyuan Big Arms Through Boxing I', 'The Butcher, the Chef and the Swordsman', 'Rickshaw Boy', 'Love Is a Many Stupid Thing', 'Blue Gate Crossing', 'Golden Killah', 'Shaolin Kung Fu: The Eighteen Arhat Skills', 'So Close to Paradise', 'Project 798: New Art in New China', 'The River', 'River People', 'Suzhou River', 'Chocolate Rap: Rise of the B Boyz', 'A Soul Haunted by Painting', 'Fish Eyes', 'Monga', 'Formula 17', 'God of Gamblers III: Back to Shanghai', 'The Blue Kite', 'Treasure Hunt', 'Er Dong', 'Shaolin Kung Fu: Routine I of Shaolin Mizong Quan', 'Fight for the Agreement', 'Shaolin Kung Fu: Elementary Changquan', 'The Invincible Kung Fu Trio', 'Love Battlefield', 'All About Women', 'Crack Shadow Boxer', 'The Invincible Killer', 'Master of Zen', 'Beijing Bicycle', 'Shanghai Triad', 'Shaolin Kung Fu: Nanyuan Big Arms Through Boxing II', 'Dream Weavers: Beijing 2008', 'Migratory Bird', 'Tigers in Zhong Shan Mountain', "Erma's Wedding", "Vive L'Amour", 'Shaolin Kung Fu: Fire Cudgel', 'What Women Want', 'Knitting', '24 City', 'Purple Butterfly', 'Princess Iron Fan', 'Silk', 'Shaolin Kung Fu: Da Hong Quan II', 'The Big Heat', 'The Poet', '1428', 'House of Flying Daggers', 'Shower', "Shaolin Kung Fu: Bodhidharma's Cane", 'Summer Pasture', 'Macho Man', 'Waiting for You in Heaven', 'Still Life', 'The Story of an Abducted Woman', 'Pictoplasma: Characters in Motion: Vol. 1', 'Ninjas and Dragons', 'Chinese Culture: Chinese Paper-Cut and Chinese Kites', 'Postmen in the Mountains', 'The Heirloom', 'Shaolin Kung Fu: Routine II of Shaolin Mizong Quan', 'Liu San Jie', 'A Post in White Birch Forest', 'Wu Tang Clan Presents: Fearless Master', 'Eating the Uneatable', 'Shaolin Kung Fu: Small Arms Through Boxing II', 'Ju Dou', 'Yellow River Fighter', 'Shaolin Kung Fu: Da Hong Quan I', "Wait 'til You're Older", 'The King of Masks', 'Shaolin Kung Fu: Appreciation of Shaolin Kung Fu', 'Challenge of the Shaolin Disciples', 'Wu Tang Clan Presents: Return of Deadly Blade', 'Cape No. 7', 'Shaolin Avengers', 'Taking Father Home', 'Comes the Black Dog', 'Secret of the Water Technique', 'Samsara', 'The Inspector Wears Skirts', 'Shaolin Kung Fu: Zhaoyang Boxing', 'The Matrimony', 'Seventeen Years', 'Useless', 'A Side, B Side, Seaside', 'Riding Alone for Thousands of Miles', 'Moment in Peking', 'Shaolin Kung Fu: Pu Broadsword', 'Dr. Sun Yat-Sen', 'Happy Times', 'Shaolin Kung Fu: Five Tiger Killing Sheep Broadsword', 'Spider Lilies', 'Karmic Mahjong', 'Wheat', 'Yi Yi: A One and a Two', 'Crazy Stone', 'Shaolin Master and the Kid', 'Yasukuni', 'Shaolin Kung Fu: Small Arms Through Boxing III', 'Innocent', 'By the Will of Genghis Khan', 'Judge', 'On the Mountain of Tai Hang', 'So Much Rice', 'The Old Testament', 'Looking for Jackie', 'Shaolin Kung Fu: Convenience Spade', 'Shaolin Kung Fu: Xiao Hong Quan', 'Myriad Twinkling Lights of the City', 'Gallants', 'Shaolin Kung Fu: Seven Star Boxing', 'Crude Oil', 'Shaolin Kung Fu: Shaozi Cudgel vs. Spear', 'Life on a String', 'Samurai Blood, Samurai Guts', 'Saga of Mulan', 'I Wish I Knew', 'Fire Bulls', 'The Emperor and the Assassin', 'Bloody Mask', 'Summer Palace', 'A Woman, A Gun And A Noodle Shop', 'Ling River Shadow Play Practitioners', 'Uniform', 'Snow Flower and the Secret Fan', 'The Black and White Milk Cow', 'Electric Shadows', 'Visitors on the Icy Mountain', 'Sexy Soccer', 'Bodyguards and Assassins', 'Revengeful Swordswoman', 'The Equation of Love and Death', 'Crazy Guy with Super Kung-Fu', 'Island Etude', 'Fish and Elephant', 'Chivalrous Legend', 'On the Beat', 'Little Sister', 'Woman Sesame Oil Maker', 'Song at Midnight', 'Chinese Travel: Tour in Tibet', 'Rebels of the Neon God', 'Sounds of Nature', 'The Longest Night in Shanghai', 'Beijing Taxi', 'Piano in a Factory', 'The Black Cannon Incident', 'Millennium Mambo', 'Hot Summer Days', 'Long Arm of the Law 3', 'I Love Beijing', "The Wooden Man's Bride", 'Dancing in Amdo', 'Memory of Love', 'Home Run', 'Three Times', 'The Lost Sword Ship', 'Red Cherry', 'The Warrior and the Wolf', 'Crouching Tiger, Hidden Dragon', 'Springtime in a Small Town', '14 Blades', 'Shaolin Kung Fu: Single Broadsword', 'Magnificent Bodyguards', 'Shaolin Kung Fu: Fengmo Cudgel', 'Lost in Beijing', 'Police Story 2', 'Shaolin Kung Fu: Meteor Hammer', 'Brothers Five', 'Swordsmen in Double Flag Town', 'In the Wild Mountains', 'The Road', 'The Story of Qiu Ju', 'One Day', 'Sword Masters: Two Champions of Shaolin', 'Winds of September', 'Invincible Obsessed Fighter', 'West Town Girls', 'Journey to the Western Xia Empire', 'Legend of the Dragon', 'Astonishing', 'Twin Daggers', 'Shaolin in the Wind', 'Life Show', 'Human Lanterns', 'Eternal Summer', 'Hero Among Heroes', 'Triangle', 'Petition', 'The Road Home', 'The Prodigal Boxer', 'Slam Dunk', 'Deng Xiaoping: A Legend', 'Reign of Assassins', '2046', 'No Puedo Vivir Sin Ti', 'One, Two, Three, Go', 'Empire of Silver', 'Man of Nasty Spirita', 'Kill Zone: Sha Po Lang', 'The Warlords', 'Country Teachers', 'Feuille', 'Rainbow', 'The World', 'Beauty Remains', 'My Wife Is a Gambling Maestro', 'Wushu', 'Cocktail', 'If You Are the One', 'Feeding Boys, Ayaya', 'Luxury Car', 'Men and Women', 'For Fun', 'Chinese Heroes', 'Basic Interests', 'Parking', 'When My Child is Born', 'Shaolin Kung Fu: Nanyuan Big Arms Through Boxing III', 'Zhou Enlai', 'A Time to Remember', 'Shaolin Kung Fu: Taizu Chang Quan', 'She, a Chinese', 'Three Kingdoms: Resurrection of the Dragon', 'Yang Yang', 'Letter from an Unknown Woman', 'City of Life and Death', 'Ringing Sword', 'The Search', 'Drifting Flowers', 'Good Men, Good Women', 'A West Lake Moment', "A Young Prisoner's Revenge", 'A Railway in the Cloud', 'Battle of Shaolin', 'Book and Sword', 'The Last Days of Hsin Yang', "Tuya's Marriage", 'Unknown Pleasures', 'Raise the Red Lantern', 'Shaolin Kung Fu: Shaozi Cudgel', 'The Founding of a Republic', 'Curse of Lola', 'Miracles', "Sophie's Revenge", 'The Axing of the Coffin', 'Shaolin Kung Fu: Plum Blossom Crutch', 'Shanghai Panic', 'Itchy Heart', 'The Wayward Cloud', 'Kung Fu Hustle', 'King of Kings', 'The Go Master', 'Art of War', 'Gada Meilin', 'Shaolin Kung Fu: Appreciation of Boxing and Weapon', 'Eat Drink Man Woman', 'Dunhuang, My Dream', 'Mongolian Ping Pong', 'Exit no. 6', 'Shaolin Kung Fu: Bodhidharma Channel Changing Scripture', 'Shang Yang', 'Ninja: The Final Duel', 'Drifters', 'Blind Shaft', 'Seven Swords', 'Those Left Behind', 'When Ruoma Was Seventeen', 'Blue Cha Cha', 'Ocean Heaven', 'Breaking the Silence', 'Quitting', 'One Foot Off the Ground', 'Accident', "The Emperor's Shadow", 'Soundless Wind Chime', 'Chinese Culture: Chinese Acrobatics and Chinese Lion Dance', 'Shaolin Kung Fu: Small Arhat Boxing', "Shaolin vs. The Devil's Omen", 'Love At Seventh Sight', 'How Is Your Fish Today?', 'Dam Street', 'Go Go G-Boys', 'My Father and I', 'Rich And Famous', 'Once Upon a Time Proletarian', 'Connected', 'Getting Home', 'Shaolin Kung Fu: Dragon Springs Sword', 'The Last Emperor', 'Shaolin Kung Fu: Big Cannon Boxing I', 'Kung Fu Chefs', 'Fleeing by Night', 'Goodbye, Dragon Inn', 'Purple Sunset', 'Ma Su Chen', 'Welcome to Destination Shanghai', 'Aftershock', 'New Year Sacrifice', 'Not One Less', 'The 13 Worms', 'Honest Official Yu Chenglong', 'Shaolin Kung Fu: Yin Hand Cudgel', 'Red Scarf', 'The Master', 'Siao Yu', 'The Hole', 'Bloody Brothers', 'Puppy', 'Together', 'The Puppetmaster', 'The Promise', 'The Truth: Final Episode', 'The Foliage', 'Ballad of Ocher Land', 'Mulan', 'Spring Subway', 'Shaolin Kung Fu: Basic Skills', 'Four Little Shaolin Kong Fu Stars', 'Kung-Fu Master', 'Shadow Magic', 'True Legend', 'Disciples of Shaolin', 'Rhapsody of Spring', 'The Legend of Chen Zhen', 'Beats of the Heart: No. 17 Cotton Mill Shanghai Blues: Music of China', 'The Young Avengers', 'Chinese Travel: The Secret Mountain', 'Shaolin Kung Fu: Eighteen Methods of Traditional Shaolin Ku fu', 'Lady 9 Flower', 'Red River Valley', 'Flowers of Shanghai', 'Chinese Culture: Chinese Garden and Chinese Sculpture', 'Temptress Moon', 'Withered in a Blooming Season', 'Help Me Eros', 'The Duel', 'A North Chinese Girl', 'Good Cats', 'The Shaft', 'Absurd Brave', 'Tragic Hero', 'The Empress Dowager', 'Shaolin Kung Fu: Small Arms Through Boxing I', 'Son of the Swordsman', 'The Red Detachment of Women', "Dada's Dance", 'Black Sun: The Nanking Massacre', 'Night Scene', 'Last Train Home', 'Star Appeal', 'Shaolin Kung Fu: Small Cannon Boxing', 'Jiang Hu', 'Kekexili: Mountain Patrol', 'Exiled', 'Buddhism in China', 'Red Cliff', 'Shaolin Kung Fu: Big Cannon Boxing II', 'Shaolin Kung Fu: Chang Hu Xin Yi Men Quan', 'Blood Brothers', 'Blind Mountain', 'Warriors of Heaven and Earth', 'Goodbye South, Goodbye', 'Going to School with Dad on My Back', 'The Spring River Flows East', 'Duel with the Devil', 'Autumn Begins', 'The Missing Gun', 'The Tragedie of Prince Zi Dan', 'Super Model', 'The Flying Swordsgirl', 'Sacred Mt. Ali and the Forest Railway', 'Red Guards on Honghu Lake', 'The Trouble Shooters', 'Yang Ban Xi', 'The Bright Red Lanterns Hung High', 'Shaolin Kung Fu: Da Hong Quan III', 'Chongqing Blues', 'For the Children', 'My Fair Son', 'Detective Dee: Mystery of the Phantom Flame', 'My Kung-Fu Sweetheart', 'Karamay', 'Spring Fever', 'Sandcastle', 'Shaolin Kung Fu: Ba Duan Jin', 'Driving Miss Wealthy', 'Shaolin Kung Fu: Liu He Quan', 'Disorder', 'Chinese Iron Man', 'A Symphony of Cooking Utensils', 'Gates of Hell', 'Kids From Shaolin', 'The Banquet', 'Please Vote for Me', 'A World Without Thieves', "I Don't Want to Sleep Alone", 'Stolen Life', 'Wu Tang Clan Presents: Shaolin Chastity Kung Fu', "Who's More Dependable", 'What Time Is It There?', 'Restless', 'Chengdu, I Love You', 'The Golden Lotus: Love and Desire', 'Thru the Moebius Strip', 'In Love We Trust', 'Au Revoir Taipei', 'Inedible Delicacies', 'A Handful of Sour Dates', 'Lust, Caution'}
            Answers = 444, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 444, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 55 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Beijing'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 56 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d05w3 fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 WHERE { fb:m.0d05w3 fb:location.country.calling_code ?o1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'86'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 57 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.currency_formerly_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Gold yuan', 'Huizi'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 58 / 542: {
          [('Main', '==', 'm.0d05w3', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 10
            Final Answer: {'Global Times', "People's Court Daily", 'Xinmin Evening News', 'Legal Daily', "People's Daily", 'Southern Weekly', 'Financial Times', 'China Youth Daily', 'Reference News', "Workers' Daily"}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 59 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 35
            Final Answer: {"Taiwan Province, People's Republic of China", 'Chongqing', 'Anhui', 'Jiangxi', 'Hainan', 'Shanxi', 'Hebei', 'Macau', 'Guangxi', 'Bortala Mongol Autonomous Prefecture', 'Shanghai', 'Liaoning', 'Hong Kong', 'Hunan', 'Beijing', 'Zhejiang', 'Qinghai', 'Heilongjiang', 'Jiangsu', 'Guizhou', 'Shandong', 'Gansu', 'Sichuan', 'Henan', 'Tianjin', 'Ili Kazakh Autonomous Prefecture', 'Changji Hui Autonomous Prefecture', 'Kizilsu Kirghiz Autonomous Prefecture', 'Fujian', 'Hubei', 'Jilin', 'Yunnan', 'Guangdong Province', 'Bayingolin Mongol Autonomous Prefecture', 'Shaanxi'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 60 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 61 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 21
            Final Answer: {'Chinese shixiaqu', 'Chinese county level city', 'Chinese autonomous region traditional eighteen', 'Chinese prefecture', 'Chinese county district', 'Chinese sheng', 'Chinese subdistrict', 'Chinese county', 'Chinese province traditional eighteen', 'Chinese municipality', 'Chinese city district', 'Chinese autonomous county', 'Chinese province', 'Chinese danwei', 'Chinese special administrative region', 'Chinese city shi', 'Chinese shixiaxian', 'Chinese town', 'Chinese league', 'Chinese autonomous region', 'Chinese township'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 62 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Time in China', 'UTC+8'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 63 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d05w3 fb:location.location.area ?o1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 WHERE { fb:m.0d05w3 fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'9.70696e+06'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 64 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Eurasia', 'Asia'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 65 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.nearby_airports'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3
            Final Answer: {'Ganzhou Huangjin Airport', 'Zhijiang Airport', 'Wenshan Puzhehei Airport'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 66 / 542: {
          [('Main', '==', 'm.0d05w3', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 346
            Final Answer: {'Nothing Sacred', 'In the Pond', 'The Vagrants: A Novel', 'Born to fly', 'Knife edge', 'China to Me', 'Sagittarius Rising', 'The Bridegroom: Stories', 'The Wise Man from the West', 'The early arrival of dreams', 'Broken Earth', 'Silicon Dragon: How China Is Winning the Tech Race', 'The Amerasia spy case', 'Looking through Taiwan', '""Socialism Is Great!"": A Worker\'s Memoir of the New China', 'Science in traditional China', 'Zen Poems of China and Japan', 'The other China', 'Dream-of-Jade', 'The Golden Peaches of Samarkand', 'Ocean of Words: Army Stories', 'Sea of Poppies', 'The Analects of Confucius', 'The Opening of Tibet', 'The Dissident', 'China in the World Economy', 'I Ching or Book of Changes', 'The Mandate of Heaven', 'Tiger woman', 'Beijing Coma: A Novel', 'Daisy comes home', 'Seven Years in Tibet', '365 Days in China Calendar 2008', 'Records of the Grand Historian', 'Mao and Me', 'Bureaucracy, Politics, and Decision Making in Post-Mao China', 'The story of the stone', 'The Snow Lion and the Dragon', 'Chinese Cinderella and the Secret Dragon Society', "The Great Wall and the Empty Fortress: China's Search for Security", 'The Road to Samarcand', 'Escape with Me', 'Flower Net', 'Hung Lou Meng', 'The guests at the gate', 'The Painted Veil', 'Privatizing China: The Stock Markets and Their Role In Corporate Reform', 'Korean Tales', 'Peony in Love', 'The Manchus', 'Chuang Tzu', 'The promise', 'The China Dream: The Quest for the Last Great Untapped Market on Earth', 'China syndrome', 'Realms of Freedom in Modern China', 'Peony', 'Rischi fatali', 'Journey to a War', 'Sons', 'The first to land', 'Anthology of World Scriptures', 'China Attacks', 'Discos and democracy', 'Dragon Bones', 'Tai chi morning', 'The third brother', 'The Memory Palace of Matteo Ricci', "The Chan's Great Continent: China in Western Minds", 'The China Story', 'Cousins and Strangers: America, Britain, and Europe in a New Century', 'Flashman and the Dragon', 'Dragon prince', 'Silver City', 'The Moon Lady', 'Serve the People: A Stir-Fried Journey Through China', 'Chinese whispers', 'The flood myths of early China', 'China Fights Back', "Charm Offensive: How China's Soft Power Is Transforming the World", 'Homesick', 'Empress', 'Passing under heaven', 'Never Enough', 'Spring Pearl: The Last Flower', 'Dragon lady', 'The Tso Chuan', 'High Tartary', 'Mei Li', 'Moment in Peking', 'Chin Yu Min and the Ginger Cat', 'In Xanadu: A Quest', 'The insidious Dr. Fu-Manchu', 'Chinese Destinies', 'Pavilion of women', 'The Hundred Secret Senses', 'Life and Death in Shanghai', 'Lost in Translation', 'Li Chi: Book of Rites', 'Beautiful warrior', 'China: Its Most Scenic Places', 'If China Attacks Taiwan: Military Strategy, Politics, Economics', 'China Marches West', 'Aurel Stein', 'Wilde Schwane', 'Women and Property in China, 960-1949', 'Snow Flower and the Secret Fan', 'The Chinese Classics. With a Translation, Critical and Exegetical Notes, Prolegomena, and Copious Indexes', 'Something Like a House', 'Safely Home', 'One Billion Customers: Lessons from the Front Lines of Doing Business in China', 'Hegemon', 'Chinese Local Elites and Patterns of Dominance', 'The road to Oxiana', 'The butterfly boy', 'Year of the Tiger', 'Solution In Asia', 'Across the Sabbath River: In Search of a Lost Tribe of Israel', 'In the Jaws of the Dragon', 'The Religions of China', "China's Communist Party: Atrophy and Adaptation", 'The Woman Warrior', 'One Russia, Two Chinas', 'The Rape of Nanking: The Forgotten Holocaust of World War II', 'China and Japan in the Global Setting', 'Waiting: A Novel', 'From Heaven Lake: Travels Through Sinkiang and Tibet', 'Oriental and Western Siberia', 'Life and Death are Wearing Me Out', 'New Asian Marxisms', 'New Forces in Old China', 'A bend in the Yellow River', 'Relating to a spiritual teacher', 'Chasing Hepburn', 'Billions: Selling to the New Chinese Consumer', 'Pacing the Void', 'Rebellion in nineteenth-century China', 'The Soong Sisters', "Oracle Bones: A Journey Between China's Past and Present", 'Lords of the Rim', 'Judgment on Deltchev', 'Chinese Lessons: Five Classmates and the Story of the New China', 'The Early Chinese Empires', 'China Dawn: The Story of a Technology and Business Revolution', "One's Company", 'The City of Heavenly Tranquility: Beijing in the History of China', 'Tibet', 'The Way and the Word', 'Broadening the horizons of Chinese history', 'The Good Earth', 'Thread of the Silkworm', 'Setting the East ablaze', 'Livre sur la Chine', 'Becoming Madame Mao', 'A guide to all China', 'Little Pear', 'Imperial Woman', "The Shorter Science and Civilisation in China. An Abridgment of Joseph Needham's Original Text. Volume 2", 'Missee Lee', 'The Open Road', 'House on fire', 'Wild Grass: Three Stories of Change in Modern China', 'The language of threads', 'The man who tricked a ghost', 'The extinction club', 'Can Do, Miss Charlie', 'Ten suns', '1421: The Year China Discovered The World', 'River Town: Two Years on the Yangtze', 'Heritage of Chinese Civilization, The', 'The Secrets of Jin-Shei', '1587: A Year of No Significance', 'East and West: China, Power, and the Future of Asia', 'Officers in flight suits', 'The junior thunder lord', 'Hong Kong', 'The drink and dream teahouse', 'The Fu-Manchu omnibus', 'The Construction of Space in Early China', 'Red China Blues: My Long March from Mao to Now', 'Hsun Tzu', 'The Last Days of Old Beijing: Life in the Vanishing Backstreets of a City Transformed', 'Watching the Tree', 'Wild Swans', "When Asia Meets China in the New Millennium: China's Role in Shaping Asia's Post-Crisis Economic Transformation", 'The Great Divergence', 'Challenging the Mandate of Heaven', 'The crippled tree', 'Economic Imperialism', 'Civil Law in Qing and Republican China', 'World Politics at the End of the Nineteenth Century', 'Birdless Summer', 'Lyrics from the Chinese', 'Heaven Lake', 'From Pekin to Calais by Land', 'A Place in the Sun', 'The Gate of Heavenly Peace', 'Empire of the Sun', 'Trespassers on the roof of the world', 'Perils of dominance', 'A Translucent Mirror', 'War and Nationalism in China: 1925-1945', 'Ruth, a Portrait', 'Empress Orchid', 'Son of the Revolution', 'China: Portrait of a Country', 'The Rainbow People', 'The Interior', 'Forging Reform in China: The Fate of State-Owned Industry', 'Orphan Warriors', 'Soul Mountain', 'Dragon teeth', 'The Coming Collapse of China', 'The Great Wall: China Against the World', 'Bridge of Birds', 'Three daughters of Madame Liang', 'Pottery And Porcelain Of All Times And Nations', 'Tibet Travel Adventure Guide', 'Dragon boats', 'The Russian Concubine', 'Eighteen layers of hell', 'States and Social Revolutions', 'China homecoming', 'Stubborn hope', 'Secret War in Shanghai', 'Japan', 'Young Fu of the Upper Yangtze', 'Tibet, Tibet', 'The River at the Center of the World', 'The Man Who Stayed Behind', 'Early English Porcelain', 'The Blue-Grass Region of Kentucky', 'Katherine', '1434: The Year a Magnificent Chinese Fleet Sailed to Italy and Ignited the Renaissance', 'Rivals: How the Power Struggle Between China, India and Japan Will Shape Our Next Decade', 'Scars of War: The Impact of Warfare on Modern China', 'Portraits of Chinese women in revolution', 'The Question of Women in Chinese Feminism', "Please Don't Call Me Human", 'Way of Chuang Tzu', 'Rain storm', 'Encyclopaedia Sinica', 'Season of High Adventure: Edgar Snow in China', 'Virtual Tibet', 'Arming the dragon', 'New Ghosts, Old Ghosts: Prisons and Labor Reform Camps in China', 'Red Star over China', 'Red Mandarin Dress: An Inspector Chen Novel', 'A Personal Narrative of a Journey to the Source of the River Oxus by the Route of the Indus, Kabul, and Badakhshan, Performed under the Sanction of the ... of India, in the Years 1836, 1837, and 1838', 'The Adventures of Mao on the Long March', 'Shanghai shadows', 'Thought Reform and the Psychology of Totalism', 'My House Has Two Doors', 'Lettres de Chine', 'Origins of the Korean War, Vol. 2', 'The March to Glory', 'History of Ming', 'Typical American', 'The desert road to Turkestan', 'The magnificent Savages', 'Tribulations of a Chinaman in China', 'When Red Is Black', 'Wild Ginger', 'Strange Stories from a Chinese Studio', 'Bound', 'Notable Women of Modern China', "China's Stockmarket: A Guide to Its Progress, Players and Prospects", "China's Psychiatric Inquisition: Dissent, Psychiatry and the Law in Post-1949 China", "China on the Lam: On Foot Across the People's Republic", 'Yellowthread Street', 'Journey to the West', 'China: The Photographs of Lois Conner', 'Travels in China', 'Riding the snake', 'When We Were Orphans', 'The Chinese Box', 'Seven Chinese Brothers, The', 'A thousand pieces of gold', 'Inequality Among Brothers', 'Dragon Sim-13', "The Concrete Dragon: China's Urban Revolution and What it Means for the World", 'The Good Women of China', 'The Korean War', 'A Time for Tea', 'More Light', 'The Chinese Cultural Revolution', 'The Real Chinaman', 'Empire', 'Twenty Fragments of a Ravenous Youth', 'The Elephant and the Dragon: The Economic Rise of India and China, and What It Means for the Rest of Us', 'Dragon Seed', 'Noble House', 'Cousin Felix Meets the Buddha: and Other Encounters in China and Tibet', 'Gender Politics in Modern China', 'Losing the New China: A Story of American Commerce, Desire and Betrayal', 'Wuhu Diary', 'The shorter Science and civilisation in China', 'Shore of Pearls', 'Imperial China 900-1800', "Growing Up in The People's Republic: Conversations between Two Daughters of China's Revolution", 'Rhetoric of empire', 'Sanctioned violence in early China', 'Beleaguered In Peking', 'The Power of the Gun', 'Stilwell and the American Experience in China, 1911-45', 'The Divine Woman', 'Music on the Bamboo Radio', 'Chinese Cinderella', 'History of Yuan', 'Foreign devils on the Silk Road', 'The Man Who Loved China', 'Daughter of Heaven', 'The China Lover: A Novel', 'Autumn Alley', 'Beyond the Great Wall: Recipes and Travels in the Other China', 'Disappearing Moon Cafe', 'China', 'MANDATE OF HEAVEN', 'Crusaders against opium', 'William Empson: Against the Christians', "China's Tibet?: Autonomy or Assimilation", 'Red Azalea', 'East of Lo Monthang', 'Tai-Pan: A Novel of Hong Kong', 'The Essential Confucius', 'To the end', 'Peaks and lamas', 'Gypsies', 'A Military History of China', 'No foreign bones in China', 'War at the Top of the World', 'The Emperor and the Kite', 'Beijing', 'Guan Yu', 'Courtier And Commoner In Ancient China', 'The Gunpowder Gardens', 'Lhasa', 'Selling out America', 'The China Threat', 'The Real Chinese Question', 'Mulan saves the day', 'Women of the Silk', 'The Shark Mutiny', 'New Qing Imperial History', 'The tao of love and sex', 'Falling leaves'}
            Answers = 345, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 345, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 67 / 542: {
          [('Main', '==', 'm.0d05w3', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Shanghai Cooperation Organisation'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 68 / 542: {
          [('Main', '==', 'm.0d05w3', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 16
            Final Answer: {'Google China', 'Department of Health', 'Chinputang', 'Program for Appropriate Technology in Health', 'TeleTOP', 'All-China Federation of Trade Unions', 'Chinese Volleyball Association', 'Hong Kong and Kowloon Trades Union Council', 'Cultural Development Center for Rural Women', 'Communist Party of China', 'iProspect', "National Committee of the Chinese Defense Industry, Postal and Telecommunications Workers' Union", 'Joint Organization of Unions – Hong Kong', 'Progressive Party', 'Committee for National Revolution', 'Miaoyin'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 69 / 542: {
          [('Main', '==', 'm.0d05w3', ['tv.tv_location.tv_shows_filmed_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:tv.tv_location.tv_shows_filmed_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:tv.tv_location.tv_shows_filmed_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'The Bride with White Hair'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 70 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.folklore.mythical_creature_location.mythical_creature_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.folklore.mythical_creature_location.mythical_creature_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.folklore.mythical_creature_location.mythical_creature_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3
            Final Answer: {'Tiangou', 'Chinese dragon', 'Chinese guardian lions'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 71 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.narphorium.default_domain.base_equivalent_location.base'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:user.narphorium.default_domain.base_equivalent_location.base ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:user.narphorium.default_domain.base_equivalent_location.base ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'china'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 72 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.mystery.hoax_location.hoax_es'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.mystery.hoax_location.hoax_es ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.mystery.hoax_location.hoax_es ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Archaeoraptor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 73 / 542: {
          [('Main', '==', 'm.0d05w3', ['dataworld.gardening_hint.split_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Shanghai'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 74 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.skud.nuclear_weapons.nuclear_power.nuclear_tests'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:user.skud.nuclear_weapons.nuclear_power.nuclear_tests ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:user.skud.nuclear_weapons.nuclear_power.nuclear_tests ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'596'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 75 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 76 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 77 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 78 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 79 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 80 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 81 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 82 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 83 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 84 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 85 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1369, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 86 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.partially_contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 87 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.belongs_to_combatant_group'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 88 / 542: {
          [('Main', '==', 'm.0d05w3', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 89 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 90 / 542: {
          [('Main', '==', 'm.0d05w3', ['meteorology.cyclone_affected_area.cyclones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:meteorology.cyclone_affected_area.cyclones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 91 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.locations.countries.continent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 92 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.locations.countries.places_within'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.locations.countries.places_within ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 93 / 542: {
          [('Main', '==', 'm.0d05w3', ['book.periodical_subject.periodicals'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:book.periodical_subject.periodicals ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 94 / 542: {
          [('Main', '==', 'm.0d05w3', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 95 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.casinos.casino_theme.casinos_in_this_theme'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.casinos.casino_theme.casinos_in_this_theme ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 96 / 542: {
          [('Main', '==', 'm.0d05w3', ['biology.breed_origin.breeds_originating_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 97 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 98 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 99 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 100 / 542
        Checking schema 100 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.uncommon.topic.exceptions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.uncommon.topic.exceptions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 101 / 542: {
          [('Main', '==', 'm.0d05w3', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 102 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 103 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 104 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 105 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d05w3 fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 106 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 3721, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 107 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 82, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 108 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 109 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.contains_major_portion_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 110 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.skosbase.vocabulary_equivalent_topic.narrower_concept'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.skosbase.vocabulary_equivalent_topic.narrower_concept ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 111 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 112 / 542: {
          [('Main', '==', 'm.0d05w3', ['exhibitions.exhibition_subject.exhibitions_created_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 113 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.mystery.cryptid_area_of_occurrence.cryptid_s_found_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.mystery.cryptid_area_of_occurrence.cryptid_s_found_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 114 / 542: {
          [('Main', '==', 'm.0d05w3', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 115 / 542: {
          [('Main', '==', 'm.0d05w3', ['media_common.netflix_genre.titles'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 444, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 116 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 117 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d05w3 fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 118 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.currency_formerly_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 119 / 542: {
          [('Main', '==', 'm.0d05w3', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 120 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 121 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 122 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 123 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 124 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d05w3 fb:location.location.area ?o1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 125 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 126 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.nearby_airports'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 127 / 542: {
          [('Main', '==', 'm.0d05w3', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 345, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 128 / 542: {
          [('Main', '==', 'm.0d05w3', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 129 / 542: {
          [('Main', '==', 'm.0d05w3', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 130 / 542: {
          [('Main', '==', 'm.0d05w3', ['tv.tv_location.tv_shows_filmed_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:tv.tv_location.tv_shows_filmed_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 131 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.folklore.mythical_creature_location.mythical_creature_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.folklore.mythical_creature_location.mythical_creature_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 132 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.narphorium.default_domain.base_equivalent_location.base'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:user.narphorium.default_domain.base_equivalent_location.base ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 133 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.mystery.hoax_location.hoax_es'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:base.mystery.hoax_location.hoax_es ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 134 / 542: {
          [('Main', '==', 'm.0d05w3', ['dataworld.gardening_hint.split_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 135 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.skud.nuclear_weapons.nuclear_power.nuclear_tests'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:user.skud.nuclear_weapons.nuclear_power.nuclear_tests ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:39] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 136 / 542: {
          [('Main', '==', 'm.01kjq0', ['symbols.flag.used_by', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01kjq0 fb:symbols.flag.used_by ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01kjq0 fb:symbols.flag.used_by ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01kjq0'}
            Query return lines = 2
            Final Answer: {'Paracel Islands', 'China'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 137 / 542: {
          [('Main', '==', 'm.01kjq0', ['symbols.flag.used_by', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01kjq0 fb:symbols.flag.used_by ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01kjq0 fb:symbols.flag.used_by ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01kjq0'}
            Query return lines = 1
            Final Answer: {'Flag of China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 138 / 542: {
          [('Main', '==', 'm.01kjq0', ['symbols.flag.used_by', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01kjq0 fb:symbols.flag.used_by ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.01kjq0 fb:symbols.flag.used_by ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01kjq0'}
            Query return lines = 1
            Final Answer: {'1949'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 139 / 542: {
          [('Main', '==', 'm.01r2l', ['education.field_of_study.students_majoring', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 1
            Final Answer: {'Bachelor of Arts'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 140 / 542: {
          [('Main', '==', 'm.01r2l', ['education.field_of_study.students_majoring', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01r2l fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.01r2l fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 2
            Final Answer: {'1983', '1997'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 141 / 542: {
          [('Main', '==', 'm.01r2l', ['education.field_of_study.students_majoring', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 2
            Final Answer: {'Spanish Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 142 / 542: {
          [('Main', '==', 'm.01r2l', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 143 / 542: {
          [('Main', '==', 'm.01r2l', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 1
            Final Answer: {'Chinese language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 144 / 542: {
          [('Main', '==', 'm.01r2l', ['education.field_of_study.students_majoring', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 3
            Final Answer: {'University of Washington', 'Peking University', 'University at Buffalo, The State University of New York'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 145 / 542: {
          [('Main', '==', 'm.01r2l', ['education.field_of_study.students_majoring', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01r2l fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 4
            Final Answer: {'Peter Ostrow', 'Hu Chunhua', 'Charles Cox', 'Ron Silver'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 146 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 553
            Final Answer: {'Yang Jinghui', 'Qiu Yuhan', 'Hu Jia', 'Cheng Fei', 'Shi Tengfei', 'Liu Hong', 'Du Yu', 'He Hanbin', 'Shuwei Sun', 'Guo Jingjing', 'Yingchao Kong', 'Chen Jinyan', 'Hu Yadan', 'Peng Shuai', 'Xu Jing', 'Liu Zhaowu', 'Cheng Ming', 'Guo Yan', 'Shan Danna', 'Gao Ni', 'Chen Jianghua', 'Peng Yang', 'Gong Lijiao', 'Li Shanshan', 'Jing Yu', 'Xiao Qin', 'Linlin Sun', 'Gao Ao', 'Jun Zhang', 'Dong Bin', 'Chen Cheng', 'Xue Haifeng', 'Ma Huanhuan', 'Wang Ying', 'Sun Yang', 'Shen Jie', 'Pang Jiaying', 'Zhang Guowei', 'Li Jianbo', 'Zhang Juanjuan', 'Huang Li', 'Liang Jiahong', 'Li Jiaxing', 'Dong Guojian', 'Wang Aichen', 'Liu Xiang', 'Peiyu Jin', 'Li Jun', 'Li Hongchen', 'Zhang Zhilei', 'Yi Jianlian', 'Zhang Yawen', 'He Jin', 'Wang Hui', 'Zhang Miao', 'Jun Zhou', 'Feng Zhe', 'Lei Sheng', 'Huang Xufeng', 'Cheng Wen', 'Jiang Fan', 'Lan Xing', 'Fujin Gao', 'Lu Xiuzhi', 'Song Qingling', 'Xu Li', 'Ni Hong', 'Wu Shugen', 'Baiwei Yu', 'Chang Si', 'Sun Dandan', 'Wu Jingbiao', 'Yao Yige', 'Zhang Xiuyun', 'Jiayu Liu', 'Zhang Xi', 'Lü Zhiwu', 'Yue Lou', 'Dong Dong', 'Yi Li', 'Liang Meiyu', 'Liang Tang', 'Xu Jiayu', 'Li Qing', 'Liu Fangyi', 'Chengye Zhang', 'Guo Ailun', 'Liu Xiao', 'Li Guojie', 'Wang Tiexin', 'Na Jiang', 'Ren Wenjun', 'Bai Anqi', 'Wu Jingyu', 'Xie Limei', 'Luo Yutong', 'Lu Chunlong', 'Tong Jian', 'Xu Anqi', 'Huang Xuechen', 'Shi Jian', 'Yang Shi', 'Sui Lu', 'Yang Jun', 'Weilong Song', 'Xue Chen', 'Yu Fengtong', 'Zhang Chongyao', 'Zhang Mengying', 'Li Xuerui', 'Li Hongxue', 'Mengtao  Xu', 'Han Jialiang', 'Zhang Jian', 'Chen Ding', 'Deng Senyue', 'Qiu Bo', 'He Kexin', 'Chen Rong', 'Huang Xiaoxiao', 'Li Ting', 'Xu Lili', 'Wang Mingjuan', 'Yang Yansheng', 'Li Shujin', 'Sun Huizi', 'Zhao Yunlei', 'Lu Huihui', 'Liu Xiaobo', 'Ding Feng', 'Sun Ye', 'Jiang Yuyuan', 'Sun Yujun', 'Zhang Hongpeng', 'Ben Zhang', 'Huang Qiushuang', 'Tan Zongliang', 'He Wenna', 'Fang Yanqiao', 'Dai Xiaoxiang', 'Li Lingwei', 'Zhong Man', 'Wei Qiuyue', 'Liu Xianwei', 'Li Xueying', 'Liu Deli', 'Fu Haifeng', 'Rui Sun', 'Huang Xintong', 'Dandan Jia', 'Bai Faquan', 'Tong Weisong', 'Shao Yiwen', 'A Lamusi', 'Lin Yue', 'Zheng Dongsheng', 'Lao Yi', 'Wang Shijia', 'Cao Zhongrong', 'Yue Qingshuang', 'Wang Haibing', 'Zhang Yangyang', 'Zeng Xiaoye', 'Cui Huo', 'Qieyang Shijie', 'Liang Wenhao', 'Wang Zhiwei', 'Wei Ning', 'Yao Jinnan', 'Liu Rui', 'Gao Min', 'Mi Yang', 'Sheng Jiang', 'Dai Xiaoyang', 'Li Jingjing', 'Guo Shuang', 'Xiao Hailiang', 'Huang Shanshan', 'Na Li', 'Fang Yuting', 'Shi Qinglan', 'Wang Jingzhi', 'Cui Qiuxia', 'Anna Yin', 'Li Deliang', 'Qi Guangpu', 'Huang Maoxing', 'Shu Junrong', 'Zhang Shuai', 'Tian Qing', 'Ma Jin', 'Guo Dan', 'Yu Lamei', 'Chaoqing Song', 'Sun Qinghai', 'Tang Bin', 'Lu Yong', 'Liu Yingzi', 'Dai Jun', 'Wang Beixing', 'Wang Min', 'Zhou Lulu', 'Zhuocheng Yu', 'Sun Yawei', 'Yi Siling', 'Zelin Cai', 'Maimaitituersun Qiong', 'Wang Yimei', 'Zhang Jike', 'Long Qingquan', 'Li Qiang', 'Yu Yang', 'Xu Chen', 'Wang Chunlu', 'Zhu Xiaolin', 'Liang Jing', 'Wang Xueqin', 'Liu Xiaoyu', 'Miao Lijie', 'Xie Zhenye', 'Zhang Fangbing', 'Tong Wen', 'Huang Haiyang', 'Teng Fei', 'Wang Jiali', 'Han Xiaopeng', 'Sun Yating', 'Wang Tao', 'Zhang Dan', 'Ma Yunwen', 'Weiyang Guo', 'Xu Lijia', 'Zhou Yang', 'Zhang Enjian', 'Ma Yunfeng', 'Zou Kai', 'Zhou Jun', 'Jiang Wenwen', 'He Jianbin', 'He Hongmei', 'Sun Wenyan', 'Lü Xiaojun', 'Zhao Shasha', 'Liu Ping', 'Yao Shi', 'Wu Peng', 'Liu Xiangrong', 'Xu Yunli', 'Xin Xin', 'Zhang Nan', 'Zhongqing  Liu', 'Ji Yanyan', 'Jiang Lin', 'Chen Yibing', 'Lin Qingfeng', 'Wang Meng', 'Chen Ying', 'Wang Xuanxuan', 'Guo Fan', 'Huang Zhipeng', 'Sun Jie', 'Gao Chang', 'Li Ling', 'Zhang Ning', 'Wang Shun', 'Song Xiaoyun', 'Chen Qian', 'Zhang Tian', 'Li Ye', 'Jinli Liu', 'Luo Xiaojuan', 'Zhou Chunxiu', 'Huang Zhe', 'Qin Kai', 'Chen Jin', 'Zhang Hui', 'Wu Minxia', 'Chen Fei', 'Li Zhenzhu', 'Jia Zongyang', 'Li Peijing', 'Ren Ye', 'Wang Jiao', 'Wen Tong', 'Sun Longjiang', 'Xu Xiaoming', 'Shi Dongpeng', 'Hou Yuzhuo', 'Yang Yang', 'Ye Shiwen', 'Huang Shancan', 'Fu Mingxia', 'Qin Qiang', 'Si Tianfeng', 'Pang Wei', 'Huang Wenyi', 'Sun Zhifeng', 'Wei Wei', 'Yang Xiuli', 'Chunyan Fu', 'Li Xiayan', 'Cheng Changsong', 'Zheng Xun', 'Chang Yongxiang', 'Zhou Yubo', 'Liu Xin', 'Wang Chengxiang', 'Song Donglun', 'Zhou Peng', 'Ma Long', 'Jie Zhang', 'Teng Zhiqiang', 'Wang Xiaoli', 'Li Yunqi', 'Lu Haojie', 'Song Wenyan', 'Zhao Shuang', 'Ma Lin', 'Shen Xue', 'Yang Yilin', 'Meng Fanlong', 'Hu Binyuan', 'Chen Xiaojun', 'Du Li', 'Xie Wenjun', 'Huang Xu', 'Teng Haibin', 'Zhao Hongbo', 'Cancan Ren', 'Chen Nan', 'Wei Yongli', 'Ma Yibo', 'Xing Yu', 'Wang Weidong', 'Hao Yun', 'Wang Zhizhi', 'Miao Yihua', 'Cai Zilin', 'Chai Biao', 'Xu Linyin', 'Zhang Yage', 'Anqi Tan', 'Zhang Wenxiu', 'Fu Baorong', 'Shanshan Cui', 'Xinxin  Guo', 'Li Jinzhe', 'Cui Zhide', 'Lin Dan', 'Xie Xingfang', 'Zang Jialiang', 'Cao Yuan', 'Wang Mengyu', 'Ding Jinhui', 'Zhongqi Zhang', 'Wei Yili', 'Zhang Fenglin', 'Zhu Weiwei', 'Guo Yue', 'Jiang Haiqi', 'Zheng Jie', 'Zhang Guolin', 'Chen Ruolin', 'Zhao Yudiao', 'Zhang Peimeng', 'Dong Cheng', 'Li Jinzi', 'Ding Ning', 'Gao Xuefeng', 'Luo Xi', 'He Chong', 'Liu Xianying', 'Li Nina', 'Chen Long', 'Zhang Yi', 'Zhang Fan', 'Su Yuling', 'Zeng Chunlei', 'Li Lei', 'Chu Jinling', 'Wang Yihan', 'Gao Yulan', 'Li Zhangli', 'Li Wenquan', 'Li Xin', 'Wang Fengchun', 'Deng Daokun', 'Wang Hao', 'Xu Xiaoxu', 'Guo Wenjun', 'Sun Yujie', 'Jiang Kelu', 'Zhang Lei', 'Xu Yanmei', 'Wang Xin', 'Yang Junjing', 'Li Yanmei', 'Zhao Jin', 'Liu Ou', 'Li Kongzheng', 'Li Xiaopeng', 'Wang Weiyi', 'QI Xueting', 'Wang Guan', 'Cheng Chen', 'Peng Bo', 'Ma Rui', 'Zhu Jun', 'Zhou Yan', 'Lao Lishi', 'Yuan Jing', 'Han Danni', 'Zou Shiming', 'Lu Ying', 'Huo Liang', 'Huang Cunguang', 'Yang Zhixian', 'Liu Haiping', 'Liu Yan', 'Liang Lei', 'Chen Xiaodong', 'Tan Jian', 'Ma Wei', 'Ma Xuejun', 'Chen Yanqing', 'Zhang Zhaoxu', 'Wang Shipeng', 'Sun Yue', 'Liu Wei', 'Li Hongli', 'Zhang Liang', 'Nannan Zhao', 'Li Zicheng', 'Qiushuang Huang', 'Sang Xue', 'Shi Yang', 'De Jiaojiao', 'Su Bingtian', 'Wang Bingyu', 'Linuo Wang', 'Tianyu Fu', 'Yu Dan', 'Zhang Xiaoyi', 'Zhao Jing', 'Xuetong Cai', 'Man Dandan', 'Gong Lei', 'Hui Ruoqi', 'Yu Chenggang', 'Ma Zengyu', 'Chen Xiaoli', 'Zhang Yimeng', 'Xiong Ni', 'Ren Hui', 'Zhang Hao', 'Wang Yinan', 'Yang Wei', 'Xian Dongmei', 'Hu Minghai', 'Jing Ruixue', 'Du Jing', 'Zhang Yanquan', 'Li Yanfeng', 'Sun Tiantian', 'Zhu Qianwei', 'Xing Aihua', 'Jiang Tingting', 'Wu Yiwen', 'Sun Sinan', 'Liu Zige', 'Xia Lina', 'Ziwei Su', 'Guan Xin', 'Deng Linlin', 'Wang Fei', 'Pang Qing', 'Gao Lihua', 'Li Xiaoxia', 'Ren Cancan', 'Liu Chunhong', 'Chen Yin', 'Zhu Fangyu', 'Zhou Jiawei', 'Xu Dongxiang', 'Li Xuanxu', 'Gao Song', 'Wang Yi', 'Liu Yin', 'Li Na', 'Chunli Wang', 'Qinan Zhu', 'Zhang Chenglong', 'Tian Liang', 'Jiao Liuyang', 'Tan Liangde', 'Tan Xue', 'Wu Penggen', 'Cao Lei', 'Wu Chaomei', 'Gong Jinjie', 'Zheng Xingjuan', 'Haijing Huang', 'He Zi', 'Zhang Li', 'Cai Yun', 'Shuang Zhang', 'Zhao Jianguo', 'Zhang Xian', 'Shuang  Cheng', 'Ma Jianfei', 'Cheng Feiyi', 'Fu Yuanhui', 'Zhu Min', 'Cao Shuo', 'Ji Liping', 'Wang Xuejin', 'Xu Wenlung', 'Yin Annuo', 'Liu Qiang', 'Zhang Liangliang', 'Wang Zhen', 'Zhou Yu', 'Wancheng Shi', 'Li Hongxia', 'Alamusi', 'Chen Ling', 'Liu Zhixin', 'Li Zhilong', 'Guo Zhendong', 'Fengling Jin', 'Tang Yi', 'xibei', 'Wu Yanan', 'Liu Jing', 'Jin Ziwei', 'Bao Yingying'}
            Answers = 536, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.036s]
          Answers = 536, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.036s]
        Checking schema 147 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 148 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 46
            Final Answer: {'Snowboarding', 'Freestyle wrestling', 'Diving', 'Field hockey', 'Speed skating', 'Mountain biking', 'Fencing', 'Ice Hockey', 'Weightlifting', 'Volleyball', 'Cross-country skiing', 'Canoe Slalom', 'Boxing', 'Triathlon', 'Judo', 'Beach volleyball', 'Biathlon', 'Tennis', 'Artistic gymnastics', 'Rhythmic gymnastics', 'Trampoline', 'Water polo', 'Canoe Sprint', 'Basketball', 'Road cycling', 'Synchronized swimming', 'Sailing', 'Swimming', 'Rowing', 'Shooting sport', 'Table tennis', 'Curling', 'Track cycling', 'Track and field athletics', 'Taekwondo', 'Modern pentathlon', 'Freestyle skiing', 'Greco-Roman wrestling', 'Road running', 'Short track speed skating', 'Racewalking', 'Archery', 'Alpine skiing', 'Figure skating', 'Badminton', 'Cycling'}
            Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 149 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 13
            Final Answer: {'2008 Summer Olympics', '1984 Summer Olympics', '1988 Summer Olympics', '2006 Winter Olympics', '2004 Summer Olympics', '2002 Winter Olympics', '2012 Summer Paralympics', '1992 Summer Olympics', '1998 Winter Olympics', '2000 Summer Olympics', '2010 Winter Olympics', '2012 Summer Olympics', '1996 Summer Olympics'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 150 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 18
            Final Answer: {'3755000', '3900000', '3200000', '3030000', '3910000', '3750000', '3160000', '2930', '3810000', '3605000', '4130000', '3820000', '2885', '3770000', '3640000', '2945', '4135000', '3500000'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 151 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 109
            Final Answer: {'602664000', '1075', '975428000', '1127', '774510000', '1257', '900350000', '754550000', '1058', '1324', '660330000', '1110', '949737000', '993885000', '667070000', '1271', '841105000', '1307', '1143', '1288', '1340', '1217', '1344', '1299', '862030000', '1164', '1337', '628283000', '614650000', '1051', '1303', '1328', '908591000', '1101', '682335000', '818315000', '672955000', '1016', '1185', '956165000', '1276', '892112000', '1223', '881940000', '1030', '829920000', '1321', '1331', '852291000', '943455000', '796025000', '1241', '1191', '785342000', '806712000', '1296', '1150', '672069000', '871772000', '658591000', '981235000', '735400000', '1043', '704991000', '937175000', '1292', '1204', '665770000', '1311', '659943000', '1262', '1334', '924201000', '763682000', '1247', '916395000', '646533000', '987056000', '1023', '1284', '1211', '1236', '1280', '1084', '1008', '1135', '1178', '1252', '725379000', '1118', '1171', '1314', '1036', '969005000', '1093', '698355000', '1198', '691720000', '930685000', '1230', '745420000', '1158', '1317', '962591000', '1066', '715185000', '662070000', '1000', '1267'}
            Answers = 109, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 109, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 152 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 11
            Final Answer: {'-1884102', '-823659', '-1058829', '-258069', '-12738', '-236257', '-428313', '-1113127', '-677444', '-8163', '-2298055'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 153 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 40
            Final Answer: {'1980', '1999', '1981', '2004', '1990', '1991', '1982', '2008', '1993', '1996', '2000', '1974', '1976', '2001', '2010', '2005', '1994', '1979', '1973', '2007', '2003', '1986', '1972', '1983', '1975', '1984', '2006', '1987', '2009', '1988', '1977', '1998', '1971', '2002', '1978', '1989', '1995', '1985', '1997', '1992'}
            Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 154 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 61
            Final Answer: {'461.798', '172.28', '662.516', '200.56', '2329', '2631', '267.374', '317.02', '869.821', '426.554', '820.986', '548.898', '2943', '285.818', '770.183', '299.198', '362.812', '1184', '281.625', '2457', '511.106', '870.524', '2041', '196.377', '151.202', '246.556', '913.873', '548.889', '993.234', '1379', '1069', '173.792', '162.456', '510.563', '1783', '2040', '1195', '415.097', '913.871', '727.009', '852.646', '1380', '448.281', '487.373', '472.167', '662.538', '336.412', '604.582', '2330', '1077', '381.968', '2456', '2632', '1586', '353.298', '604.597', '993.337', '217.592', '391.352'}
            Answers = 59, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 59, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 155 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 31
            Final Answer: {'5.79802e+09', '3.73457e+11', '2.37193e+10', '1.84059e+11', '6.85418e+11', '1.00457e+11', '1.46697e+11', '2.83293e+11', '1.1809e+11', '5.58344e+11', '4.43155e+11', '5.53014e+10', '1.6699e+10', '1.48564e+11', '7.2428e+10', '4.2439e+10', '6.02592e+10', '1.43982e+11', '8.35997e+09', '1.85196e+11', '8.59277e+10', '2.4591e+11', '3.23117e+11', '9.6117e+09', '2.06535e+11', '1.45648e+11', '1.28817e+11', '3.80165e+11', '3.53395e+10', '4.49325e+10', '1.20888e+10'}
            Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 156 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 35
            Final Answer: {'1480', '7520', '250', '440', '3590', '320', '1170', '2340', '280', '2560', '1640', '2840', '8450', '620', '1960', '1820', '1020', '6840', '750', '370', '6230', '4090', '500', '5580', '1340', '3180', '800', '6820', '2120', '550', '8390', '4750', '890', '700', '7530'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 157 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 53
            Final Answer: {'329.75', '1041', '111.82', '201.44', '175.87', '2651', '774.47', '223.25', '864.73', '1490', '1135', '103.18', '130.11', '117.18', '604.23', '3413.59', '3749.27', '291.77', '83.93', '249.41', '362.81', '154.97', '6100', '182.28', '949.18', '92.01', '75.87', '279.19', '162.92', '97.47', '307.49', '820.86', '1731', '703.12', '280.97', '469.21', '95.5', '2069', '69.79', '5444.79', '90.37', '98.89', '193.02', '155.08', '248.29', '1273', '182.68', '4433.36', '314.43', '73.69', '195.31', '158', '373.8'}
            Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 158 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 35
            Final Answer: {'6.22812e+12', '7.75005e+11', '1.38008e+12', '1.13607e+13', '1.12708e+13', '5.86043e+11', '4.65629e+12', '3.26141e+12', '4.53158e+11', '2.45337e+11', '2.23455e+12', '1.00802e+13', '1.99971e+12', '3.27513e+11', '1.78331e+12', '4.10133e+12', '3.63137e+12', '5.28348e+11', '7.34968e+12', '9.1022e+12', '5.32598e+12', '1.18879e+12', '8.38144e+11', '2.65327e+12', '1.02115e+12', '9.05055e+11', '9.07948e+12', '2.43088e+12', '2.95138e+12', '1.59435e+12', '6.72703e+11', '3.78792e+11', '1.00591e+13', '2.82253e+11', '8.24719e+12'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 159 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 24
            Final Answer: {'1999', '2004', '1990', '1991', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '2003', '2006', '2009', '1998', '2002', '1989', '1995', '1985', '1997', '1992'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 160 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 58
            Final Answer: {'1956', '1980', '1981', '2004', '1999', '1962', '1959', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1996', '1976', '1974', '2000', '2001', '2010', '2011', '1960', '2005', '1979', '1954', '1970', '1994', '1973', '1965', '2007', '1969', '2003', '1986', '1972', '1955', '1975', '1957', '1983', '1984', '2006', '1987', '2009', '1977', '1988', '1998', '1978', '2002', '1971', '1966', '1961', '1968', '1989', '1995', '1958', '1985', '1997', '1992'}
            Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 161 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 11
            Final Answer: {'2000', '1980', '1975', '2010', '1970', '2005', '1990', '1995', '1960', '1985', '1965'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 162 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Electricity consumption per capita, World Development Indicators and Global Development Finance, World Bank', 'Electricity consumption per capita, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 163 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 164 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 165 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 166 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 167 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Debt stock, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 168 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'GNI per capita in PPP dollars, World Development Indicators, World Bank', 'GNI per capita in PPP dollars, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 169 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'GDP per capita (current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 170 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Gross National Income in PPP dollars, World Development Indicators and Global Development Finance, World Bank', 'Gross National Income in PPP dollars, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 171 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Armed forces personnel, total, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 172 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Population (at the end of the year), Demographic Indicators, China, National Bureau of Statistics of China', 'World Bank, World Development Indicators, Population'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 173 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Net migration, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 174 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 31
            Final Answer: {'1981', '2004', '1999', '1990', '1991', '1982', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '1986', '2003', '1983', '1984', '2006', '1987', '2009', '1988', '1998', '2002', '1989', '1995', '1985', '1997', '1992'}
            Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 175 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 32
            Final Answer: {'1980', '1999', '1981', '2004', '1990', '1991', '1982', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '1983', '1986', '2003', '1984', '2006', '1987', '2009', '1988', '1998', '2002', '1989', '1995', '1985', '1997', '1992'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 176 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 52
            Final Answer: {'1980', '1999', '2004', '1981', '1962', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1976', '1996', '1974', '2000', '2001', '2010', '2011', '2005', '1960', '1994', '1970', '1979', '1965', '1973', '2007', '1969', '1986', '2003', '1972', '1983', '1975', '2006', '1984', '1987', '1971', '2009', '1977', '1998', '1988', '2002', '1978', '1966', '1961', '1968', '1989', '1995', '1985', '1997', '1992'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 177 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 32
            Final Answer: {'1980', '1981', '1999', '2004', '1990', '1991', '1982', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '1983', '1986', '2003', '1984', '2006', '1987', '2009', '1988', '1998', '2002', '1989', '1995', '1985', '1997', '1992'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 178 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 52
            Final Answer: {'1.894e+11', '1.08328e+12', '8.56085e+11', '2.03183e+11', '6.99935e+10', '5.02804e+10', '1.1216e+11', '9.52653e+11', '1.01946e+12', '9.8562e+10', '2.97832e+11', '3.49406e+12', '1.32481e+12', '1.3677e+11', '6.13779e+10', '1.93164e+12', '7.87188e+10', '1.45383e+12', '4.22661e+11', '2.57432e+11', '4.40501e+11', '1.64096e+12', '3.09523e+11', '7.58794e+10', '3.06667e+11', '3.56937e+11', '1.76635e+11', '5.86132e+10', '7.28007e+11', '1.61162e+11', '5.59225e+11', '4.52183e+12', '3.43974e+11', '1.72349e+11', '2.2569e+12', '1.42255e+11', '5.01009e+10', '7.2057e+10', '2.71295e+12', '7.3185e+12', '3.79469e+11', '1.48179e+11', '6.97092e+10', '2.70372e+11', '5.93053e+12', '1.51628e+11', '9.15062e+10', '1.19847e+12', '1.94111e+11', '2.28456e+11', '4.6464e+10', '4.99126e+12'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 179 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 33
            Final Answer: {'3.87257e+09', '3.05216e+09', '1999', '43010000', '1756', '1116', '3.19091e+09', '4.26013e+09', '1434', '2.81655e+09', '2.24111e+09', '2.18716e+09', '2126', '3.07113e+09', '1514', '4.05296e+09', '2.30829e+09', '3.91415e+09', '1455', '646110000', '1604', '1165', '2103', '2.46765e+09', '2.75958e+09', '3.38232e+09', '3.10657e+09', '1718', '-739490000', '2.40797e+09', '2109', '3.33397e+09', '1477'}
            Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 180 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 7
            Final Answer: {'-1.70449e+11', '-9.03791e+10', '-1.39095e+11', '-1.0015e+11', '-8.71671e+10', '-1.8575e+11', '-1.14792e+11'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 181 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 9
            Final Answer: {'0.37', '0.24', '0.25', '0.45', '0.43', '1.28', '1.04', '1.01', '0.61'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 182 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:19:39] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 52
            Final Answer: {'70.243', '65.692', '72.613', '62.902', '72.171', '65.984', '43.458', '61.449', '68.797', '68.559', '59.467', '71.765', '70.425', '67.535', '66.251', '71.962', '43.772', '70.055', '71.579', '68.059', '69.862', '64.996', '57.01', '72.39', '69.664', '73.486', '70.766', '51.287', '71.406', '48.574', '66.739', '71.083', '68.313', '73.273', '73.057', '66.994', '66.496', '72.835', '70.599', '65.371', '69.247', '46.324', '67.263', '69.46', '64.514', '69.027', '44.704', '67.8', '70.927', '54.201', '71.242', '63.867'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 183 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 51
            Final Answer: {'1.868', '2.594', '2.907', '1.643', '1.668', '5.523', '1.614', '2.532', '2.007', '2.639', '1.705', '1.776', '1.737', '2.336', '1.656', '1.828', '1.598', '5.906', '5.469', '5.512', '1.799', '2.602', '2.736', '2.589', '2.632', '4.544', '2.106', '1.692', '1.755', '5.914', '5.872', '1.629', '2.219', '2.444', '4.91', '1.68', '2.629', '5.697', '2.586', '5.24', '5.712', '1.72', '5.841', '3.439', '3.144', '1.927', '3.783', '2.625', '5.793', '5.602', '4.16'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 184 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 50
            Final Answer: {'1980', '1999', '2004', '1981', '1962', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1976', '2000', '1996', '1974', '2001', '1960', '2005', '1979', '1965', '1970', '1994', '1973', '2007', '1969', '2003', '1986', '1983', '1972', '1975', '2006', '1984', '1987', '1971', '1977', '2009', '1998', '1988', '2002', '1978', '1966', '1961', '1968', '1989', '1995', '1985', '1997', '1992'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 185 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.measurement_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 51
            Final Answer: {'1980', '1999', '2004', '1981', '1962', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1996', '2000', '1974', '1976', '2001', '2010', '1960', '2005', '1994', '1979', '1970', '1965', '1973', '2007', '1969', '1983', '1986', '2003', '1972', '1975', '2006', '1984', '1987', '1971', '1977', '1988', '1998', '1978', '2002', '2009', '1966', '1961', '1968', '1989', '1995', '1985', '1997', '1992'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 186 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 187 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 8
            Final Answer: {'Premier', 'Vice President', 'Deputy Administrator', 'Deputy prime minister', 'Chairman', 'Deputy Premier', 'President', 'Administrator'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 188 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'State Administration of Foreign Exchange', "State Council of the People's Republic of China"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 189 / 542: {
          [('Main', '==', 'm.0d05w3', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 190 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 216
            Final Answer: {'Datong–Jining Campaign', 'Battle of Niangziguan', 'Battle of Dalushan Islands', 'Sino-Vietnamese War', 'Laotian Civil War', 'Operation Ripper', 'Capture of Nam Định', 'Battle of Chosin Reservoir', 'Tianjin Campaign', 'Battle of Guanzhong', 'Taiyuan Campaign', 'Nanma–Linqu Campaign', 'Battle of Kunlun Pass', 'Battle of Phoenix Peak', 'Linyi Campaign', 'Campaign to Suppress Bandits in Western Guangxi', 'Zhoucun–Zhangdian Campaign', 'Campaign to the North of Daqing River', 'Shuangduiji Campaign', 'Battle of Yiwu', 'Encirclement Campaign against Northeastern Jiangxi Soviet', 'Dongshan Island Campaign', 'Encirclement Campaign against Hunan–Hubei–Sichuan–Guizhou Soviet', 'Zhucheng Campaign', 'Campaign to Defend Siping', 'Meridian Ridge Campaign', 'Siping Campaign', 'UN Offensive, 1950', 'Jingshan–Zhongxiang Campaign', 'Battle of the Twin Tunnels', 'Irene Incident', 'Battle of Dien Bien Phu', 'Operation Killer', 'Chola incident', 'Command & Conquer: Red Alert 2', 'Allied intervention in the Russian Civil War', 'Battle of Cixi', "Western Tai'an Campaign", 'First Quarter Storm', 'Taixing Campaign', 'Battle of Sanhe', 'Ningxia Campaign', 'Pacific Theater of Operations', 'Japanese invasions of Korea', 'Sino-Soviet border conflict', 'Second Encirclement Campaign against Hubei–Henan–Shaanxi Soviet', 'Zhengtai Campaign', 'Heshui Campaign', 'Linfen Campaign', 'First Sino-Japanese War', 'Battle of Shangcai', 'Battle of Guilin–Liuzhou', 'Insurgency in Laos', 'Campaign to Suppress Bandits in Eastern China', 'Beiping–Hankou Railway Operation', 'Encirclement Campaign against Hunan–Jiangxi Soviet', 'Battle of Guningtou', 'Battle of Northern and Eastern Henan', 'Campaign to the North of Nanchuan County', 'Battle of Kumsong', 'Battle of Kalgan', 'Battle of Old Baldy', "Battle of Huaiyin–Huai'an", 'Datong–Puzhou Campaign', 'Campaign at the Eastern Foothills of Funiu Mountain', 'Lanzhou Campaign', 'Southern Jiangsu Campaign', 'Operation Rolling Thunder', 'Gongzhutun Campaign', 'Swatow Operation', 'Battle of Gloster Hill', 'Battle of Noryang', 'Sino-Vietnamese conflicts 1979–90', 'Angolan Civil War', 'Battle of Jianmenguan', 'Lüliang Campaign', 'Korean War', 'Third Battle of Nanking', 'Battle of Dongshan Island', "Battle of Nan'ao Island", '1959 Tibetan uprising', 'Third Taiwan Strait Crisis', 'Battle of Houmajia', 'Gaoyou–Shaobo Campaign', 'Second Encirclement Campaign against Shaanxi–Gansu Soviet', 'Shanghai Campaign', 'Pingjin Campaign', 'Opium Wars', 'Battle of South Shanxi', 'Summer Offensive of 1947 in Northeast China', 'First Encirclement Campaign against Shaanxi–Gansu Soviet', 'First Taiwan Strait Crisis', 'Battle of Pork Chop Hill', 'Battle of Nanking', 'Silla–Tang War', "Battle of Tang'erli", 'Battle of Yunnan-Burma Road', 'First Indochina War', 'Fourth Encirclement Campaign against Jiangxi Soviet', 'Hebei–Rehe–Chahar Campaign', 'Third Encirclement Campaign against Jiangxi Soviet', 'Hainan Island Operation', 'Campaign to Suppress Bandits in Longquan', 'Battle of Shicun', 'Longhai Campaign', 'Battle of West Henan–North Hubei', 'Alice Dollar incident', 'Battle of Kapyong', 'Battle of Nanpēng Archipelago', 'Battle of Heartbreak Ridge', 'Battle of Nanpéng Island', 'Campaign to Suppress Bandits in the Border Region of Hunan–Hubei–Sichuan', 'Operation Courageous', 'Jintian Uprising', 'Dingtao Campaign', 'Xinghua Campaign', 'Linjiang Campaign', 'Winter Offensive of 1947 in Northeast China', 'Battle of Yinji', "Battle of the Ch'ongch'on River", 'Battle of Wawon', 'Battle of Bamianshan', 'Handan Campaign', 'Shangdang Campaign', 'Battle of West Hubei', 'Outpost Harry', 'Nanking Incident', 'Battle of Dachen Archipelago', "Incorporation of Xinjiang into the People's Republic of China", 'Battle of South Henan', 'Battle of Nanri Island', 'Campaign to Suppress Bandits in Western Hunan', 'Battle of Unsan', 'Liaoshen Campaign', 'Battle of Tashan', 'Battle of Yijiangshan Islands', 'Battle of Lingbi', 'Campaign of the North China Plain Pocket', 'Johnson South Reef Skirmish', 'Battle of Bach Dang River', 'Campaign to the North of Baoding', 'Campaign to Suppress Bandits in Northeast China', 'Battle of Pakchon', 'Tianjin–Pukou Railway Operation', 'Pingdu Campaign', 'Huaihai Campaign', 'Campaign to Suppress Bandits in Dabieshan', 'Campaign to the South of Baoding', 'Battle of Xinkou', 'Encirclement Campaign against Hunan–Hubei–Jiangxi Soviet', 'Battle of Jinzhou', 'Cambodian–Vietnamese War', 'Wanshan Archipelago Campaign', 'Bobai Campaign', 'Battle of Lanfeng', 'Battle of White Horse', 'Battle of Siping', 'Operation Ivory Coast', 'Campaign at the China–Burma border', 'Campaign to Suppress Bandits in Central and Southern China', 'Battle of the Imjin River', 'Battle of Tianquan', 'Campaign to Suppress Bandits in Wuping', 'Fifth Encirclement Campaign against Jiangxi Soviet', 'Operation Blaze', 'Autumn Offensive of 1947 in Northeast China', 'Campaign to Suppress Bandits in Northern China', 'Wudi Campaign', 'Battle of Yenangyaung', 'Second Guangxi Campaign', 'Battle of Rugao–Huangqiao', 'Landing Operation on Hainan Island', 'Campaign to Suppress Bandits in Northwestern China', 'Canton Operation', 'Siege of Changchun', 'Battle of Shaobo', 'Houma Campaign', 'Campaign along the Southern Section of Datong–Puzhou Railway', 'Campaign to Suppress Bandits in Southwestern China', "Huaiyin–Huai'an Campaign", 'Weixian–Guangling–Nuanquan Campaign', 'Battle of Sunchon', 'Battle of the Samichon River', 'Campaign to Suppress Bandits in northeastern Guizhou', 'Battle of Dengbu Island', 'Battle of Lishi', 'Yanzhou Campaign', 'Menglianggu Campaign', 'Campaign to Suppress Bandits in Shiwandashan', 'First Encirclement Campaign against Hubei–Henan–Shaanxi Soviet', 'Campaign to Suppress Bandits in Liuwandashan', 'Battle of Fatshan Creek', 'North Star Affair', "Incorporation of Tibet into the People's Republic of China", 'First Battle of Maryang San', 'Linfen–Fushan Campaign', 'Sino-Indian War', 'Campaign to Suppress Bandits in Northern Guangdong', 'USS Monocacy incident', 'Yetaishan Campaign', 'Battle of Hainan', 'Battle of the Leotung', 'First Encirclement Campaign against Jiangxi Soviet', 'Battle of Baoying', 'Vietnam War', 'Battle of Wuhe', 'Battle of Nanjing (1853)', 'Battle of Xiangshuikou', 'Second Taiwan Strait Crisis', 'Third Encirclement Campaign against Shaanxi–Gansu Soviet', 'Battle of Yongjiazhen', 'Naval Battle of the Han River', 'Second Encirclement Campaign against Jiangxi Soviet', '1987 Sino-Indian skirmish', 'Battle of Suixian–Zaoyang', 'Battle of Jiulianshan'}
            Answers = 216, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 216, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 191 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 7
            Final Answer: {'Soviet Union', 'Viet Cong', 'North Vietnam', 'Khmer Rouge', 'Pathet Lao', 'North Korea'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 192 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.military_commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Battle of Nanking', 'Korean War'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 193 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 194 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 7
            Final Answer: {'Yemen', 'Sudan', 'Mozambique', 'Angola', 'Wellington', 'Laos', 'United States of America'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 195 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'2006', '2005'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 196 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3
            Final Answer: {'2006', '2008', '2005'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 197 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 198 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 199 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Current: 200 / 542
        Checking schema 200 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 201 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 202 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Gross Domestic Product'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 203 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Aid flows at constant US$, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 204 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Foreign direct investment, net (BoP, current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 205 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Pump price for fuel, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 206 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Population Growth Rate, World Development Indicators and Global Development Finance, World Bank', 'Population growth rate, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 207 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'GDP expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 208 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Interest rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 209 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'GDP production (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 210 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Total debt service (% of exports of goods, services and income), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 211 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'World Bank, World Development Indicators, GDP Growth Rate', 'GDP growth rate, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 212 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Military expenditure as percentage of GDP, World Development Indicators and Global Development Finance, World Bank', 'Military expenditure as percentage of GDP, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 213 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Internet users as percentage of population, World Development Indicators, World Bank', 'Internet users as percentage of population, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 214 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Gross savings (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 215 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Merchandise trade (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 216 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Market capitalization of listed companies (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 217 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Health expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 218 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Labor participation rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 219 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'High-technology exports (% of manufactured exports), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 220 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Inflation, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 221 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Proportion of seats held by women in national parliaments (%), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 222 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Prevalence of undernourishment (% of population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 223 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Literacy rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 224 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Emigration rate of tertiary educated (% of total tertiary educated population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 225 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 52
            Final Answer: {'1980', '1999', '1981', '2004', '1962', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1976', '2000', '1974', '1996', '2001', '2010', '2011', '1960', '2005', '1994', '1979', '1970', '1965', '1973', '2007', '1969', '2003', '1983', '1972', '1986', '1975', '2006', '1984', '1987', '2009', '1988', '1977', '1998', '1978', '1971', '2002', '1966', '1961', '1968', '1989', '1995', '1985', '1997', '1992'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 226 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 51
            Final Answer: {'1980', '1981', '1999', '2004', '1962', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1996', '2000', '1974', '1976', '2001', '2010', '2005', '1960', '1979', '1970', '1994', '1965', '1973', '2007', '1969', '2003', '1983', '1986', '1972', '1975', '2006', '1984', '1987', '2009', '1988', '1977', '1971', '1978', '2002', '1998', '1966', '1961', '1968', '1989', '1995', '1985', '1997', '1992'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 227 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 51
            Final Answer: {'1.09737', '5.30849', '3.51225', '2.03841', '1.0982', '4.44115', '1.46043', '0.72515', '0.661428', '1.08068', '5.15356', '5.31286', '0.640002', '2.84431', '1.38884', '1.56674', '1.54268', '2.69686', '1.25012', '4.08014', '0.574162', '1.49525', '1.04224', '2.15308', '1.75045', '0.665524', '0.836047', '2.2459', '0.625646', '1.87105', '1.28528', '2.4428', '5.77431', '0.942935', '2.88523', '1.5292', '2.1677', '2.67675', '0.710891', '1.17038', '2.31421', '1.62906', '2.74212', '2.82057', '2.1509', '2.56599', '2.75576', '1.93943', '2.64865', '0.605452', '4.89273'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 228 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 40
            Final Answer: {'1980', '1999', '2004', '1981', '1990', '1991', '1982', '2008', '1993', '1996', '1976', '1974', '2000', '2001', '2010', '2005', '1994', '1979', '1973', '2007', '1983', '2003', '1972', '1986', '1975', '1984', '2006', '1987', '2009', '1988', '1977', '1998', '1978', '2002', '1971', '1989', '1995', '1985', '1997', '1992'}
            Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 229 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Energy use per capita, World Development Indicators, World Bank', 'Energy use per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 230 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Consumer price index (2005 = 100), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 231 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.036s]
        Checking schema 232 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 233 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 13
            Final Answer: {'Jiang Zemin', 'Wu Yi', 'Hu Jintao', 'Mao Zedong', 'Yang Shangkun', 'Xi Jinping', 'Wen Jiabao', 'Zhang Gaoli', 'Zeng Peiyan', 'Zhu Rongji', 'Li Xiannian', 'Wu Xiaoling', 'Li Keqiang'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 234 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 8
            Final Answer: {"Chairman of the Central Military Commission of the People's Republic of China", "Vice President of the People's Republic of China", 'Chairman of the Communist Party of China', 'Chairman of the Central Military Commission', "President of the People's Republic of China", 'General Secretary of the Communist Party of China', "Vice Premier of the People's Republic of China", "Premier of the People's Republic of China"}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 235 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {"National People's Congress"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 236 / 542: {
          [('Main', '==', 'm.0d05w3', ['organization.organization_member.member_of', 'organization.organization_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'1999', '1945'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 237 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.military_commanders', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 238 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 239 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 240 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'2.37e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 241 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'1.4e+09'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 242 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'799.9'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 243 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 52
            Final Answer: {'1980', '1981', '2004', '1999', '1962', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1976', '2000', '1996', '1974', '2001', '2010', '2011', '1960', '2005', '1979', '1994', '1970', '1965', '1973', '2007', '1969', '2003', '1986', '1983', '1972', '1975', '1984', '2006', '1987', '2009', '1971', '1977', '1988', '1978', '2002', '1998', '1966', '1961', '1968', '1989', '1995', '1985', '1997', '1992'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 244 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 33
            Final Answer: {'1980', '1999', '2004', '1981', '1990', '1991', '1982', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1979', '1994', '2007', '1983', '2003', '1986', '1984', '2006', '1987', '2009', '1988', '1998', '2002', '1989', '1995', '1985', '1997', '1992'}
            Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 245 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 7
            Final Answer: {'2007', '2010', '2006', '2011', '2008', '2005', '2009'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 246 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 9
            Final Answer: {'1998', '2000', '2002', '2012', '2004', '2010', '2006', '1995', '2008'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 247 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 47
            Final Answer: {'2.38', '0.59', '1.15', '-1.02', '1.77', '1.6', '2.32', '1.47', '2.07', '0.52', '0.73', '0.96', '2.46', '1.61', '1.09', '2.76', '0.62', '1.31', '2.75', '1.05', '1.25', '1.02', '0.87', '1.49', '0.56', '2.28', '2.61', '1.34', '2.57', '1.36', '0.48', '0.79', '1.83', '1.44', '1.23', '1.28', '1.33', '0.82', '2.79', '0.51', '1.55', '2.74', '1.53', '1.13', '0.67', '0.5', '0.47'}
            Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 248 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 41
            Final Answer: {'7.7', '-2.48', '2.2', '1.18', '4.3', '2.37', '3.92', '3.06', '-0.26', '-1.43', '-4.08', '-0.28', '2.12', '-1.31', '8.8', '-0.24', '2.57', '-0.09', '2.55', '0.11', '2.41', '5.53', '0.02', '2.99', '0.34', '0.51', '4.07', '0.55', '-0.46', '1.32', '-2.68', '1.13', '4.5', '7.72', '-0.37', '0.38', '1.64', '2.65', '2.05', '-0.92', '4.41'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 249 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 16
            Final Answer: {'1.98', '5.67', '11.34', '10.98', '8.64', '5.76', '3.5', '3.78', '2.75', '2.52', '5.4', '7.56', '7.2', '4.14', '2.25', '7.47'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 250 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 52
            Final Answer: {'15.06', '30.17', '32.85', '27.12', '13.74', '25.1', '38.57', '19.96', '12.12', '21.79', '10.1', '28.44', '40.26', '29.42', '39.93', '14.39', '28.19', '37.94', '33.35', '13.39', '37.59', '42.15', '18.29', '19.86', '22.32', '35.22', '32.4', '31.88', '26.81', '32.13', '25.7', '35.51', '33.18', '37.99', '27.14', '19.69', '32.86', '10.04', '34.05', '12.8', '11.11', '10.77', '24.53', '33.39', '39.29', '19.71', '10.33', '31.27', '16.47', '17.56', '10.73', '33.88'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 251 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 30
            Final Answer: {'2.38', '11.59', '8.65', '2.91', '11.92', '8.59', '3.43', '9.11', '2.07', '9.88', '8.09', '7.96', '3.64', '10.21', '9.7', '11.69', '8.8', '8.66', '10.88', '7.49', '9.63', '11.14', '3.55', '8.91', '3.39', '9.59', '2.67', '11.36', '8.37', '8.32'}
            Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 252 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 40
            Final Answer: {'8.3', '8.4', '10.7', '13.5', '7.6', '10.1', '16.363', '15.2', '-5.7', '11.6', '7.9', '9.6', '19.4', '4.1', '-4.1', '8.7', '11.7', '3.8', '12.7', '8.8', '7', '5.2', '16.9', '9.3', '11.3', '9.2', '14.2', '10.342', '-1.6', '10', '7.8', '13.1', '2.3', '10.9', '10.4', '-27.1019', '-6.10534', '15.837', '9.1', '14'}
            Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 253 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 23
            Final Answer: {'2.62484', '1.95186', '1.80298', '2.03155', '2.12041', '1.75619', '1.72715', '2.04228', '2.07013', '2.04934', '2.5591', '2.1773', '2.58941', '1.89569', '1.77721', '2.0541', '2.07032', '2.08955', '1.68412', '2.24111', '2.44703', '2.07166', '1.85457'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 254 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 39
            Final Answer: {'16.0437', '2.65221', '0.032395', '2.63965', '1.78502', '28.9', '0.004992', '16', '1.77591', '0.711999', '34.3', '0.013082', '0.00017', '4.61557', '6.22405', '7.32522', '22.6618', '0.708188', '10.5517', '0.16854', '6.2', '0.0326', '0.013174', '0.001178', '4.5957', '38.3979', '28.9766', '22.6', '8.52326', '10.5232', '34.39', '0', '8.54858', '0.000169', '0.004955', '7.3', '0.001168', '0.169502', '38.3'}
            Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 255 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 30
            Final Answer: {'42.12', '40.3', '52.37', '38.98', '47.97', '36', '36.31', '53.11', '36.83', '46.82', '37.58', '38.19', '51.82', '51.51', '37.11', '43.39', '39.5', '34.63', '41.78', '39.62', '35.68', '43.99', '52.68', '40.19', '53.43', '36.05', '41.83', '36.66', '41.29', '36.01'}
            Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 256 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 52
            Final Answer: {'39.58', '42.31', '50.13', '22.68', '33.29', '8.5', '20.8', '51.86', '7.07', '32.47', '64.89', '6.9', '7.36', '4.98', '63', '5.01', '38.47', '10.47', '59.77', '56.69', '33.86', '20.08', '42.7', '9.69', '22.7', '24.79', '5.83', '8.97', '14.23', '6.92', '32.34', '49.76', '39.16', '34.13', '19.09', '31.78', '6.76', '44.23', '8.51', '5.52', '62.29', '6.8', '6.33', '35.76', '30.57', '16.55', '38.58', '33.21', '44.43', '20.48', '6.3', '8.1'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 257 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 21
            Final Answer: {'61.78', '39.55', '4.33', '41.51', '34.59', '22.69', '80.31', '5.78', '46.31', '31.85', '13.29', '33.12', '21.66', '30.53', '7.78', '48.48', '89.43', '0.53', '100.33', '178.2', '9.22'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 258 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 17
            Final Answer: {'4.63', '4.98', '3.81', '4.05', '4.75', '4.68', '4.35', '5.16', '4.55', '4.51', '4.58', '3.54', '4.85', '4.36', '4.81', '4.62', '5.15'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 259 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 17
            Final Answer: {'44.94', '44.78', '44.77', '44.9', '44.62', '44.99', '44.86', '44.81', '45.01', '44.92', '44.64', '44.88', '44.61', '44.72', '44.53', '45', '44.93'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 260 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 20
            Final Answer: {'8.29', '7.09', '27.53', '15.36', '30.51', '30.84', '18.98', '12.42', '13.12', '27.51', '23.67', '30.06', '20.96', '26.66', '25.57', '6.44', '25.81', '17.2', '27.38', '10.43'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 261 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 25
            Final Answer: {'7.22', '1.46', '4.75', '3.06', '5.41', '5.86', '3.31', '-0.77', '2.81', '6.34', '16.9', '18.33', '24.24', '1.82', '14.58', '-1.41', '3.88', '-0.7', '1.16', '-0.84', '0.26', '0.72', '18.74', '3.54', '8.32'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 262 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 5
            Final Answer: {'21.8', '20.6', '20.3', '20.2', '21.3'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 263 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 5
            Final Answer: {'13.1', '11.5', '14.4', '11.6', '21.4'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 264 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 4
            Final Answer: {'65.51', '77.79', '90.92', '94.27'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 265 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'3.79', '3.01'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 266 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:40] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 52
            Final Answer: {'1980', '1981', '2004', '1999', '1962', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1976', '1996', '1974', '2000', '2001', '2010', '2011', '1960', '2005', '1979', '1965', '1994', '1970', '1973', '2007', '1969', '2003', '1986', '1972', '1983', '1975', '1984', '2006', '1987', '1971', '1977', '2009', '1988', '1978', '2002', '1998', '1966', '1961', '1968', '1989', '1995', '1985', '1997', '1992'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 267 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 42
            Final Answer: {'1980', '1999', '2004', '1981', '1990', '1991', '1982', '2008', '1993', '1996', '2000', '1974', '1976', '2001', '2010', '2011', '2005', '1979', '1970', '1994', '1973', '2007', '1986', '2003', '1972', '1983', '1975', '1984', '2006', '1987', '1971', '1988', '1977', '1998', '1978', '2002', '2009', '1989', '1995', '1985', '1997', '1992'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 268 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 32
            Final Answer: {'1980', '1999', '2004', '1981', '1990', '1991', '1982', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '2003', '1986', '1983', '1984', '2006', '1987', '2009', '1988', '1998', '2002', '1989', '1995', '1985', '1997', '1992'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.052s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.052s]
        Checking schema 269 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 52
            Final Answer: {'1980', '1981', '2004', '1999', '1962', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1996', '2000', '1974', '1976', '2001', '2010', '2011', '1960', '2005', '1994', '1965', '1979', '1970', '1973', '2007', '1969', '1983', '1986', '2003', '1972', '1975', '1984', '2006', '1987', '1971', '1977', '1988', '1998', '2009', '2002', '1978', '1966', '1961', '1968', '1989', '1995', '1985', '1997', '1992'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 270 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 30
            Final Answer: {'1999', '2004', '1990', '1991', '1982', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '1983', '1986', '2003', '2006', '1984', '1987', '2009', '1988', '1998', '2002', '1989', '1995', '1985', '1997', '1992'}
            Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 271 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 51
            Final Answer: {'1980', '1999', '1981', '2004', '1962', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1976', '2000', '1974', '1996', '2001', '2010', '2011', '2005', '1994', '1965', '1970', '1979', '1973', '2007', '1969', '1986', '2003', '1972', '1983', '1975', '2006', '1984', '1987', '2009', '1977', '1988', '1998', '1978', '2002', '1971', '1966', '1961', '1968', '1989', '1995', '1985', '1997', '1992'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 272 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 23
            Final Answer: {'1999', '2004', '1990', '1991', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '2003', '2006', '2009', '1998', '2002', '1989', '1995', '1997', '1992'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 273 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 20
            Final Answer: {'1998', '1996', '2002', '2000', '2007', '2009', '2003', '1999', '2004', '2001', '2010', '2006', '1990', '2011', '1995', '1993', '2008', '2005', '1997', '1994'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 274 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 30
            Final Answer: {'1999', '2004', '1990', '1991', '1982', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '2003', '1983', '1986', '2006', '1984', '1987', '2009', '1988', '1998', '2002', '1989', '1995', '1985', '1997', '1992'}
            Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 275 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 52
            Final Answer: {'1980', '1981', '2004', '1999', '1962', '1964', '1990', '1991', '1967', '1982', '2008', '1993', '1963', '1996', '2000', '1974', '1976', '2001', '2010', '2011', '1960', '2005', '1979', '1970', '1965', '1994', '1973', '2007', '1969', '1986', '1983', '2003', '1972', '1975', '2006', '1984', '1987', '1971', '1988', '2009', '1998', '1978', '1977', '2002', '1966', '1961', '1968', '1989', '1995', '1985', '1997', '1992'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 276 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 21
            Final Answer: {'1999', '2004', '1991', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '2003', '2006', '2009', '1998', '2002', '1995', '1997', '1992'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 277 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 17
            Final Answer: {'1998', '1996', '2000', '2007', '2002', '2001', '1999', '2004', '2003', '2010', '2006', '1997', '2011', '1995', '2008', '2005', '2009'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 278 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 22
            Final Answer: {'1999', '2004', '1990', '1991', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '2003', '2006', '2009', '1998', '2002', '1995', '1997', '1992'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 279 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 20
            Final Answer: {'1998', '1996', '2002', '2007', '2000', '2003', '1999', '2004', '2001', '2010', '2006', '1997', '2011', '1995', '1993', '2008', '2005', '2009', '1994', '1992'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 280 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 25
            Final Answer: {'1999', '2004', '1990', '1991', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '2003', '2006', '1987', '2009', '1988', '1998', '2002', '1989', '1995', '1997', '1992'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 281 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 16
            Final Answer: {'1998', '2000', '2007', '2002', '2012', '2001', '1999', '2004', '2003', '2010', '2006', '1990', '2011', '2008', '2005', '2009'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 282 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 5
            Final Answer: {'2000', '1991', '2011', '2008', '2005'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.065s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.066s]
        Checking schema 283 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 4
            Final Answer: {'2000', '1990', '2010', '1982'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 284 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'2000', '1990'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 285 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Life expectancy, World Development Indicators, World Bank', 'World Bank, World Development Indicators, Life Expectancy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 286 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Fertility Rate'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 287 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'CO2 emissions per capita, World Development Indicators, World Bank', 'CO2 emissions per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 288 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 79
            Final Answer: {'889.98', '867.125', '868.306', '525.641', '528.204', '821.41', '464.226', '465.706', '609.783', '903.991', '768.261', '759.689', '919.326', '1490', '945.162', '874.064', '1574', '671.742', '694.777', '482.527', '1252', '658.78', '622.465', '1342', '477.939', '724.802', '922.915', '936.675', '486.865', '1301', '574.471', '795.387', '724.713', '671.632', '794.515', '619.53', '577.697', '1043', '607.322', '1414', '869.188', '609.933', '617.523', '988.814', '537.781', '1598', '651.354', '1458', '744.067', '822.493', '619.452', '883.991', '597.692', '760.189', '744.486', '484.814', '760.354', '721.109', '1117', '617.605', '607.133', '484.504', '891.007', '476.119', '910.87', '1695', '1806', '858.109', '651.656', '1528', '695.003', '622.256', '1689', '597.516', '1209', '658.399', '720.925', '866.725', '534.962'}
            Answers = 79, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.041s]
          Answers = 79, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.041s]
        Checking schema 289 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 26
            Final Answer: {'1999', '2004', '1990', '1991', '2008', '1993', '1996', '2000', '2001', '2010', '2011', '2005', '1994', '2007', '1986', '2003', '2006', '1987', '2009', '1988', '1998', '2002', '1989', '1995', '1997', '1992'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 290 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.index_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 26
            Final Answer: {'48.41', '94.54', '100', '58.99', '115.43', '111.72', '73.28', '101.46', '92.8', '98.21', '121.67', '93.5', '38.34', '85.67', '30.11', '112.52', '93.27', '45.37', '93.46', '51.48', '95.4', '94.6', '94.18', '46.75', '106.28', '32.29'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 291 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 292 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjusted_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 51
            Final Answer: {'8.38127e+10', '7.92789e+11', '2.94023e+12', '6.15461e+10', '4.44601e+11', '5.12828e+10', '1.82942e+11', '1.92455e+11', '2.45668e+12', '1.07077e+11', '9.53171e+11', '1.29795e+12', '1.33359e+11', '1.00072e+11', '1.22685e+11', '7.16172e+10', '2.32855e+11', '2.68249e+11', '7.03485e+10', '1.41607e+12', '1.57718e+11', '4.81518e+10', '1.10561e+12', '7.47612e+10', '5.31316e+10', '7.92802e+10', '7.1696e+10', '4.85504e+11', '1.31225e+11', '1.02752e+12', '3.69681e+11', '2.69253e+12', '2.09968e+11', '8.72068e+11', '2.15121e+12', '6.32068e+11', '7.14869e+11', '1.19848e+12', '3.31255e+11', '1.55767e+12', '4.11455e+11', '1.90879e+12', '1.715e+12', '3.24307e+12', '1.11146e+11', '5.54445e+11', '1.41198e+11', '1.19927e+11', '4.28324e+11', '1.69705e+11', '3.04462e+11'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 293 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'32.9043'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 294 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'110.468'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 295 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 21
            Final Answer: {'Luang Namtha Province', 'Vietnam', 'Myanmar', 'Indochina', 'Taiwan', 'Pakistan', 'Nepal', 'Mongolia', 'Kazakhstan', 'Tajikistan', 'Kyrgyzstan', 'Laos', 'Phongsaly Province', 'Japan', 'Russia', 'Afghanistan', 'North Korea', 'India', 'Oudomxay Province', 'Bhutan'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 296 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 19
            Final Answer: {'1998', '2002', '2012', '2003', '1983', '2004', '1943', '2013', '1995', '1993', '2008', '2005', '1988'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 297 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 11
            Final Answer: {'1998', '1976', '2012', '2003', '2013', '2008', '1993', '1988'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 298 / 542: {
          [('Main', '==', 'm.0d05w3', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 8
            Final Answer: {'World Bank', 'Caribbean Development Bank', 'Asia-Pacific Economic Cooperation', 'Asian Development Bank', 'African Development Bank', 'Shanghai Cooperation Organisation', 'G-20 major economies', 'United Nations'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 299 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.military_commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3
            Final Answer: {'Peng Dehuai', 'Tang Shengzhi', 'Mao Zedong'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Current: 300 / 542
        Checking schema 300 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 14
            Final Answer: {'Yemen', 'Djibouti', 'Tanzania', 'Uzbekistan', 'New Zealand', 'Nepal', 'Sudan', 'Tuvalu', 'Angola', 'Laos', 'Madagascar', 'Algeria', 'Dubai', 'Sierra Leone'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 301 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 302 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 303 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'701'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 304 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'United Nations Security Council'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 305 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.from ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'1971'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 306 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 307 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.permanent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.permanent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.permanent ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 308 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.force_deployments', 'military.force_strength.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {"Incorporation of Tibet into the People's Republic of China", 'Vietnam War'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 309 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.casualties', 'military.casualties.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 310 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.casualties', 'military.casualties.type_of_casualties'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.type_of_casualties ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.type_of_casualties ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Military - Wounded', 'Military - Dead'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 311 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 14
            Final Answer: {'2008 Summer Olympics', '1984 Summer Olympics', '1988 Summer Olympics', '2006 Winter Olympics', '2004 Summer Olympics', '2002 Winter Olympics', '1992 Summer Olympics', '1992 Winter Olympics', '1998 Winter Olympics', '2000 Summer Olympics', '1994 Winter Olympics', '2010 Winter Olympics', '2012 Summer Olympics', '1996 Summer Olympics'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 312 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 386
            Final Answer: {"Swimming at the 1992 Summer Olympics - Women's 400 metre Individual Medley", "Fencing at the 2012 Summer Olympics – Women's team épée", "Archery at the 2008 Summer Olympics – Women's individual", "Shooting at the 2012 Summer Olympics - Women's 10 metre air pistol", "Table Tennis at the 1988 Summer Olympics - Women's Singles", "Gymnastics at the 2000 Summer Olympics – Men's artistic individual all-around", "Judo at the 2000 Summer Olympics – Women's 52 kg", "Table Tennis at the 1992 Summer Olympics - Women's Singles", "Weightlifting at the 2012 Summer Olympics – Women's 48 kg", "Diving at the 2004 Summer Olympics – Women's 10 metre platform", "Shooting at the 2012 Summer Olympics - Women's Skeet", "Taekwondo at the 2008 Summer Olympics – Women's 49 kg", "Table tennis at the 2012 Summer Olympics – Women's singles", "Athletics at the 2012 Summer Olympics – Women's discus throw", "Volleyball at the 2008 Summer Olympics – Women's tournament", "Diving at the 2008 Summer Olympics – Women's synchronized 3 metre springboard", "Volleyball at the 2000 Summer Olympics – Women's beach volleyball", "Gymnastics at the 2004 Summer Olympics – Women's trampoline", "Table tennis at the 2012 Summer Olympics – Men's singles", "Badminton at the 2008 Summer Olympics – Men's singles", "Volleyball at the 2004 Summer Olympics – Women's volleyball", "Beach volleyball at the 2008 Summer Olympics – Men's tournament", "Gymnastics at the 2008 Summer Olympics – Men's trampoline", "Boxing at the 2012 Summer Olympics – Women's middleweight", "Archery at the 2012 Summer Olympics – Women's team", "Short Track Speed Skating at the 2002 Winter Olympics - Women's 3000 m relay", 'Boxing at the 2008 Summer Olympics – Welterweight', "Diving at the 1992 Summer Olympics – Men's 3 metre springboard", "Weightlifting at the 1984 Summer Olympics - Men's Featherweight 56-60 kg", "Judo at the 2000 Summer Olympics – Women's 78 kg", "Table Tennis at the 2012 Summer Olympics- Men's Team", "Swimming at the 1988 Summer Olympics – Women's 50 metre freestyle", 'Boxing at the 2008 Summer Olympics – Super heavyweight', "Swimming at the 1996 Summer Olympics – Women's 200 metre individual medley", "Gymnastics at the 2008 Summer Olympics – Women's artistic individual all-around", "Badminton at the 1992 Summer Olympics – Women's Singles", "Weightlifting at the 2008 Summer Olympics – Women's 75 kg", "Athletics at the 1992 Summer Olympics – Women's shot put", "Gymnastics at the 2008 Summer Olympics - Men's Floor Exercises", "Short Track Speed Skating at the 1998 Winter Olympics - Women's 3000 m relay", "Shooting at the 2004 Summer Olympics - Men's 50 metre rifle, three positions", "Shooting at the 2004 Summer Olympics - Women's 10 metre air rifle", "Diving at the 2012 Summer Olympics – Men's 10 metre platform", "Shooting at the 2012 Summer Olympics - Men's 25 metre rapid fire pistol", "Wrestling at the 2008 Summer Olympics - Men's Greco-Roman Welterweight", "Taekwondo at the 2012 Summer Olympics – Men's +80 kg", "Swimming at the 2012 Summer Olympics – Women's 200 metre individual medley", "Gymnastics at the 1984 Summer Olympics – Men's pommel horse", "Diving at the 2012 Summer Olympics – Women's synchronized 3 metre springboard", "Judo at the 1992 Summer Olympics - Women's 61 kg", "Gymnastics at the 2004 Summer Olympics – Women's artistic individual all-around", "Badminton at the 2000 Summer Olympics Women's Singles", "Weightlifting at the 2012 Summer Olympics – Men's 56 kg", "Shooting at the 2008 Summer Olympics – Women's 10 metre air pistol", "Badminton at the 2012 Summer Olympics – Men's doubles", "Swimming at the 1988 Summer Olympics – Women's 100 metre butterfly", "Shooting at the 2004 Summer Olympics - Women's 50 metre rifle, three positions", "Gymnastics at the 2000 Summer Olympics – Women's Uneven Bars", "Judo at the 2008 Summer Olympics – Women's 52 kg", "Shooting at the 2000 Summer Olympics – Women's 25 metre pistol", "Sailing at the 2012 Summer Olympics – Women's Laser Radial class", "Table Tennis at the 2012 Summer Olympics- Women's Team", "Speed Skating at the 1992 Winter Olympics - Women's 1000m", "Judo at the 2004 Summer Olympics – Women's 52 kg", "Sailing at the 2008 Summer Olympics – Women's Laser Radial class", "Speed Skating at the 2006 Winter Olympics - Women's 500m", "Volleyball at the 1988 Summer Olympics – Women's tournament", "Volleyball at the 2000 Summer Olympics – Women's tournament", "Swimming at the 2012 Summer Olympics – Women's 100 metre freestyle", "Volleyball at the 2008 Summer Olympics – Men's tournament", "Diving at the 2012 Summer Olympics – Women's synchronized 10 metre platform", "Gymnastics at the 1984 Summer Olympics – Men's artistic individual all-around", "Cycling at the 2008 Summer Olympics - Women's Sprint", "Badminton at the 2012 Summer Olympics – Men's singles", "Badminton at the 2000 Summer Olympics - Men's Singles", "Fencing at the 1992 Summer Olympics - Women's Foil, Individual", 'Boxing at the 2008 Summer Olympics – Light flyweight', "Short Track Speed Skating at the 2002 Winter Olympics – Women's 1000m", "Table Tennis at the 1992 Summer Olympics - Men's Singles", "Athletics at the 2000 Summer Olympics – Women's 20 kilometres walk", "Freestyle Skiing at the 2006 Winter Olympics – Women's Aerials", "Cycling at the 2000 Summer Olympics - Women's time trial", "Shooting at the 2000 Summer Olympics – Men's 10 metre air pistol", "Table Tennis at the 1996 Summer Olympics - Men's Singles", "Athletics at the 2004 Summer Olympics - Men's 110 metre hurdles", "Judo at the 2008 Summer Olympics – Women's 78 kg", "Swimming at the 2008 Summer Olympics – Men's 400 metre freestyle", "Diving at the 1996 Summer Olympics – Men's 3 metre springboard", "Volleyball at the 1992 Summer Olympics – Women's tournament", "Table Tennis at the 2004 Summer Olympics - Men's Singles", "Weightlifting at the 2008 Summer Olympics – Women's 58 kg", "Weightlifting at the 1992 Summer Olympics - Men's Featherweight 56-60 kg", "Weightlifting at the 2012 Summer Olympics – Men's 69 kg", "Diving at the 2000 Summer Olympics – Men's synchronized 3 metre springboard", "Short Track Speed Skating at the 2006 Winter Olympics – Men's 1500m", "Fencing at the 2012 Summer Olympics - Men's Foil, Individual", "Shooting at the 2000 Summer Olympics – Men's 10 metre air rifle", "Judo at the 2004 Summer Olympics – Women's 70 kg", "Gymnastics at the 2008 Summer Olympics - Women's Vault", "Table Tennis at the 2008 Summer Olympics - Men's Singles", "Taekwondo at the 2012 Summer Olympics – Women's 57 kg", "Gymnastics at the 2012 Summer Olympics – Women's trampoline", "Weightlifting at the 1988 Summer Olympics - Men's Featherweight 56-60 kg", "Weightlifting at the 2008 Summer Olympics – Women's 69 kg", "Shooting at the 2000 Summer Olympics – Men's 10 metre running target", "Cycling at the 2012 Summer Olympics – Women's sprint", "Judo at the 2000 Summer Olympics – Women's +78 kg", "Short Track Speed Skating at the 2006 Winter Olympics – Women's 500m", "Weightlifting at the 2000 Summer Olympics - Men's Middleweight 69-77kg", "Shooting at the 2012 Summer Olympics - Men's 50 metre pistol", "Diving at the 2004 Summer Olympics – Men's synchronized 10 metre platform", "Table Tennis at the 1996 Summer Olympics - Women's Singles", "Shooting at the 1996 Summer Olympics – Men's 10 metre air pistol", "Swimming at the 2012 Summer Olympics – Men's 200 metre freestyle", "Table Tennis at the 2004 Summer Olympics - Women's Singles", "Sailing at the 2004 Summer Olympics – Women's sailboard", "Judo at the 2012 Summer Olympics – Women's +78 kg", "Cycling at the 2012 Summer Olympics – Women's Keirin", "Shooting at the 1984 Summer Olympics - Women's 50 metre rifle, three positions", "Taekwondo at the 2004 Summer Olympics – Women's +67 kg", "Freestyle Skiing at the 2006 Winter Olympics – Men's Aerials", "Diving at the 2008 Summer Olympics – Men's 3 metre springboard", "Athletics at the 1996 Summer Olympics – Women's 10,000 metres", "Diving at the 1992 Summer Olympics – Women's 3 metre springboard", "Shooting at the 1988 Summer Olympics – Men's 10 metre air pistol", "Gymnastics at the 1992 Summer Olympics – Men's parallel bars", "Archery at the 1996 Summer Olympics – Women's individual", "Weightlifting at the 2012 Summer Olympics – Women's 58 kg", "Gymnastics at the 2008 Summer Olympics – Men's artistic individual all-around", "Gymnastics at the 2008 Summer Olympics - Men's Horizontal Bar", "Table Tennis at the 2000 Summer Olympics Men's Singles", "Swimming at the 2012 Summer Olympics – Women's 200 metre butterfly", "Shooting at the 1992 Summer Olympics – Men's 50 metre pistol", "Diving at the 2004 Summer Olympics – Men's 10 metre platform", "Weightlifting at the 2012 Summer Olympics – Women's +75 kg", "Cycling at the 2004 Summer Olympics - Women's Time Trial", "Short Track Speed Skating at the 1998 Winter Olympics - Women's 500m", "Gymnastics at the 2004 Summer Olympics – Men's parallel bars", "Athletics at the 2012 Summer Olympics - Women's 20 km Walk", "Wrestling at the 1992 Summer Olympics - Men's Greco-Roman Bantamweight", "Weightlifting at the 1996 Summer Olympics - Men's Flyweight -54 kg", "Freestyle Skiing at the 1998 Winter Olympics - Women's Aerials", "Gymnastics at the 2012 Summer Olympics – Men's rings", "Fencing at the 1984 Summer Olympics - Women's Foil, Individual", "Weightlifting at the 1992 Summer Olympics - Men's Bantamweight 52-56 kg", "Gymnastics at the 1984 Summer Olympics – Women's uneven bars", "Fencing at the 2004 Summer Olympics -Men's Épée, Individual", "Judo at the 2004 Summer Olympics – Women's 48 kg", "Short Track Speed Skating at the 2002 Winter Olympics - Men's 1500m", "Weightlifting at the 2004 Summer Olympics – Women's 48 kg", "Rowing at the 2012 Summer Olympics – Women's lightweight double sculls", "Diving at the 2008 Summer Olympics – Women's 3 metre springboard", "Badminton at the 2008 Summer Olympics – Women's doubles", "Gymnastics at the 1984 Summer Olympics – Men's rings", "Shooting at the 1996 Summer Olympics - Men's Double Trap", "Taekwondo at the 2012 Summer Olympics – Women's 49 kg", "Weightlifting at the 2008 Summer Olympics – Women's 48 kg", "Gymnastics at the 2012 Summer Olympics – Women's balance beam", "Wrestling at the 2008 Summer Olympics - Women's Freestyle Lightweight", 'Figure skating at the 2010 Winter Olympics – Pair skating', "Short Track Speed Skating at the 1992 Winter Olympics - Women's 500m", "Swimming at the 1988 Summer Olympics – Women's 100 metre freestyle", "Weightlifting at the 2008 Summer Olympics - Men's Middleweight 69-77 kg", "Synchronized swimming at the 2012 Summer Olympics – Women's team", "Wrestling at the 2012 Summer Olympics – Women's freestyle 63 kg", "Judo at the 2004 Summer Olympics – Women's +78 kg", "Judo at the 2012 Summer Olympics – Women's 63 kg", "Shooting at the 2008 Summer Olympics – Men's 50 metre rifle three positions", "Weightlifting at the 2004 Summer Olympics – Women's +75 kg", 'Boxing at the 2008 Summer Olympics – Light heavyweight', "Weightlifting at the 2012 Summer Olympics – Men's 77 kg", 'Badminton at the 2008 Summer Olympics – Mixed doubles', "Gymnastics at the 2012 Summer Olympics – Men's artistic team all-around", "Gymnastics at the 2008 Summer Olympics – Men's rings", "Swimming at the 1992 Summer Olympics – Women's 100 metre butterfly", "Basketball at the 1992 Summer Olympics - Women's", "Weightlifting at the 1996 Summer Olympics - Men's Lightweight 64-70 kg", "Boxing at the 2012 Summer Olympics – Men's light flyweight", "Athletics at the 1996 Summer Olympics – Women's shot put", "Diving at the 1988 Summer Olympics – Women's 10 metre platform", "Diving at the 2000 Summer Olympics – Women's 10 metre platform", "Shooting at the 1988 Summer Olympics – Men's 50 metre running target", "Weightlifting at the 2000 Summer Olympics – Women's +75 kg", "Short Track Speed Skating at the 2006 Winter Olympics - Women's 1500m", "Diving at the 2000 Summer Olympics – Women's synchronized 3 metre springboard", "Short track speed skating at the 2010 Winter Olympics – Women's 1000 metres", "Fencing at the 2008 Summer Olympics – Women's team sabre", "Athletics at the 2012 Summer Olympics – Men's 50 kilometres walk", "Badminton at the 2012 Summer Olympics – Women's singles", "Diving at the 2008 Summer Olympics – Men's 10 metre platform", "Diving at the 1996 Summer Olympics – Men's 10 metre platform", "Gymnastics at the 2012 Summer Olympics – Men's trampoline", "Weightlifting at the 2004 Summer Olympics – Women's 69 kg", "Cycling at the 2012 Summer Olympics – Women's team sprint", "Tennis at the 2004 Summer Olympics – Women's doubles", "Archery at the 2008 Summer Olympics – Men's team", "Diving at the 2000 Summer Olympics – Women's 3 metre springboard", "Short Track Speed Skating at the 1998 Winter Olympicss - Men's 1000m", "Curling at the 2010 Winter Olympics – Women's tournament", "Beach volleyball at the 2008 Summer Olympics – Women's tournament", "Shooting at the 1984 Summer Olympics - Men's 50 metre running target", "Swimming at the 2012 Summer Olympics – Men's 1500 metre freestyle", "Wrestling at the 1996 Summer Olympics - Men's Greco-Roman Bantamweight", "Cycling at the 2000 Summer Olympics – Women's cross-country", "Gymnastics at the 1992 Summer Olympics – Women's Balance Beam", "Badminton at the 2004 Summer Olympics – Women's singles", "Football at the 1996 Summer Olympics - Women's tournament", "Weightlifting at the 2000 Summer Olympics – Women's 63 kg", "Diving at the 2012 Summer Olympics – Women's 10 metre platform", "Swimming at the 1992 Summer Olympics – Women's 200 metre butterfly", "Athletics at the 2008 Summer Olympics – Women's marathon", "Short Track Speed Skating at the 1998 Winter Olympics - Women's 1000m", "Athletics at the 1984 Summer Olympics – Men's high jump", "Swimming at the 1992 Summer Olympics - Women's 200 metre Individual Medley", 'Badminton at the 2012 Summer Olympics – Mixed doubles', "Weightlifting at the 2004 Summer Olympics - Men's Lightweight 62-69 kg", "Gymnastics at the 2012 Summer Olympics – Men's parallel bars", "Diving at the 1988 Summer Olympics – Men's 3 metre springboard", "Shooting at the 2000 Summer Olympics - Women's Trap", "Diving at the 2008 Summer Olympics – Women's 10 metre platform", "Shooting at the 2008 Summer Olympics – Women's 25 metre pistol", "Gymnastics at the 2000 Summer Olympics – Women's Balance Beam", "Badminton at the 2012 Summer Olympics – Women's doubles", "Synchronized swimming at the 2012 Summer Olympics – Women's duet", "Shooting at the 2008 Summer Olympics – Men's 10 metre air pistol", "Badminton at the 1996 Summer Olympics - Men's Singles", "Weightlifting at the 2000 Summer Olympics - Men's Bantamweight -56 kg", "Shooting at the 2008 Summer Olympics - Women's 50 metre rifle, three positions", "Diving at the 1984 Summer Olympics – Men's 3 metre springboard", "Gymnastics at the 1988 Summer Olympics - Men's Floor Exercises", "Diving at the 1992 Summer Olympics – Men's 10 metre platform", "Archery at the 2008 Summer Olympics – Women's team", "Taekwondo at the 2004 Summer Olympics – Women's 67 kg", "Weightlifting at the 2008 Summer Olympics - Men's Featherweight 56-62 kg", "Speed Skating at the 1992 Winter Olympics - Women's 500m", "Shooting at the 2012 Summer Olympics - Women's 25 metre pistol", "Short Track Speed Skating at the 2002 Winter Olympics – Women's 500m", "Gymnastics at the 2012 Summer Olympics – Men's horizontal bar", "Freestyle skiing at the 2010 Winter Olympics – Women's aerials", "Sailing at the 2008 Summer Olympics – Women's sailboard", "Weightlifting at the 1984 Summer Olympics - Men's Lightweight 60-67.5 kg", "Speed Skating at the 1994 Winter Olympics - Women's 1000m", "Wrestling at the 2008 Summer Olympics - Women's Freestyle Heavyweight", "Diving at the 1984 Summer Olympics – Men's 10 metre platform", "Sailing at the 1992 Summer Olympics – Lechner A-390 Women's", "Gymnastics at the 1996 Summer Olympics – Women's Vault", "Shooting at the 2008 Summer Olympics – Men's 50 metre pistol", "Swimming at the 1992 Summer Olympics – Women's 100 metre freestyle", "Badminton at the 2008 Summer Olympics – Women's singles", "Table Tennis at the 2000 Summer Olympics Women's Singles", "Shooting at the 2004 Summer Olympics – Men's double trap", "Volleyball at the 2004 Summer Olympics – Women's beach volleyball", "Weightlifting at the 2000 Summer Olympics – Women's 53 kg", "Weightlifting at the 2008 Summer Olympics - Men's Light Heavyweight 77-85 kg", 'Shooting at the 1992 Summer Olympics – Skeet', "Gymnastics at the 2008 Summer Olympics - Women's Balance Beam", "Weightlifting at the 1996 Summer Olympics - Men's 54-59 kg", "Gymnastics at the 2000 Summer Olympics – Women's artistic individual all-around", "Gymnastics at the 1984 Summer Olympics – Men's vault", "Taekwondo at the 2000 Summer Olympics – Women's +67 kg", "Weightlifting at the 2004 Summer Olympics – Women's 58 kg", "Weightlifting at the 1988 Summer Olympics - Men's Flyweight -52 kg", "Fencing at the 2008 Summer Olympics - Men's Sabre, Individual", "Weightlifting at the 1992 Summer Olympics - Men's Flyweight -52 kg", "Weightlifting at the 2008 Summer Olympics - Men's Lightweight 62-69 kg", "Short Track Speed Skating at the 1998 Winter Olympics - Men's 500m", "Shooting at the 2004 Summer Olympics – Women's skeet", "Diving at the 2008 Summer Olympics - Men's Synchronised 3m Springboard", "Diving at the 2012 Summer Olympics – Women's 3 metre springboard", "Gymnastics at the 2008 Summer Olympics – Women's trampoline", "Gymnastics at the 1988 Summer Olympics – Men's Vault", "Tennis at the 2008 Summer Olympics – Women's doubles", "Archery at the 1984 Summer Oympics - Women's Individual", "Athletics at the 1988 Summer Olympics – Women's shot put", "Diving at the 2012 Summer Olympics – Men's 3 metre springboard", "Diving at the 1996 Summer Olympics – Women's 10 metre platform", "Swimming at the 2012 Summer Olympics – Men's 400 metre freestyle", "Diving at the 2000 Summer Olympics – Women's synchronized 10 metre platform", "Weightlifting at the 2000 Summer Olympics – Women's 69 kg", "Short track speed skating at the 2010 Winter Olympics – Women's 3000 metre relay", "Handball at the 1984 Summer Olympics - Women's tournament", "Diving at the 1992 Summer Olympics – Women's 10 metre platform", "Volleyball at the 1996 Summer Olympics – Women's volleyball", "Athletics at the 2004 Summer Olympics – Women's 10,000 metres", "Wrestling at the 2000 Summer Olympics - Men's Greco-Roman Bantamweight", "Short track speed skating at the 2010 Winter Olympics – Women's 500 metres", "Gymnastics at the 1996 Summer Olympics – Women's Uneven Bars", "Gymnastics at the 2008 Summer Olympics - Women's Uneven Bars", "Gymnastics at the 2012 Summer Olympics – Women's uneven bars", "Fencing at the 2004 Summer Olympics – Women's sabre", "Gymnastics at the 1992 Summer Olympics – Men's Floor Exercises", "Diving at the 2008 Summer Olympics - Women's Synchronised 10m Platform", "Short track speed skating at the 2002 Winter Olympics – Men's 5000 metre relay", "Athletics at the 2012 Summer Olympics – Women's shot put", "Diving at the 2012 Summer Olympics – Men's synchronized 10 metre platform", "Gymnastics at the 2008 Summer Olympics – Men's pommel horse", "Athletics at the 2012 Summer Olympics – Men's 20 kilometres walk", "Modern pentathlon at the 2012 Summer Olympics – Men's", "Diving at the 2004 Summer Olympics – Women's 3 metre springboard", "Diving at the 2012 Summer Olympics – Men's synchronized 3 metre springboard", "Short Track Speed Skating at the 1994 Winter Olympics - Women's 500m", "Athletics at the 2008 Summer Olympics – Women's hammer throw", "Weightlifting at the 2004 Summer Olympics - Men's Bantamweight -56 kg", "Gymnastics at the 2004 Summer Olympics – Men's pommel horse", "Weightlifting at the 1984 Summer Olympics - Men's Flyweight -52 kg", "Swimming at the 1988 Summer Olympics – Women's 200 metre breaststroke", "Diving at the 2004 Summer Olympics – Women's synchronized 10 metre platform", "Swimming at the 2004 Summer Olympics – Women's 100 metre breaststroke", "Fencing at the 2012 Summer Olympics - Women's Épée, Individual", "Gymnastics at the 1984 Summer Olympics - Men's Floor Exercises", "Gymnastics at the 1996 Summer Olympics – Men's Horizontal Bar", "Gymnastics at the 1996 Summer Olympics – Men's artistic individual all-around", "Swimming at the 2008 Summer Olympics – Women's 200 metre butterfly", "Gymnastics at the 1996 Summer Olympics – Men's Floor Exercises", "Shooting at the 2000 Summer Olympics – Women's 10 metre air rifle", "Diving at the 1996 Summer Olympics – Women's 3 metre springboard", "Shooting at the 2004 Summer Olympics - Men's 10 metre air pistol", "Swimming at the 2012 Summer Olympics – Women's 100 metre butterfly", "Shooting at the 1984 Summer Olympics - Men's 50 metre pistol", "Swimming at the 1996 Summer Olympics – Women's 100 metre freestyle", "Athletics at the 1996 Summer Olympics – Women's 10 kilometres walk", "Gymnastics at the 2008 Summer Olympics – Men's parallel bars", "Diving at the 2004 Summer Olympics – Women's synchronized 3 metre springboard", "Weightlifting at the 2008 Summer Olympics - Men's Bantamweight -56 kg", "Diving at the 1984 Summer Olympics – Women's 10 metre platform", "Shooting at the 2004 Summer Olympics – Women's double trap", "Gymnastics at the 2008 Summer Olympics – Men's artistic team all-around", "Gymnastics at the 1984 Summer Olympics – Men's horizontal bar", "Weightlifting at the 1996 Summer Olympics - Men's Featherweight 59-64 kg", "Judo at the 2000 Summer Olympics – Women's 63 kg", "Shooting at the 1992 Summer Olympics – Men's 10 metre air pistol", "Table Tennis at the 2008 Summer Olympics - Women's Singles", "Swimming at the 2012 Summer Olympics – Men's 4 × 200 metre freestyle relay", "Gymnastics at the 1992 Summer Olympics – Men's rings", "Weightlifting at the 1984 Summer Olympics - Men's Bantamweight 52-56 kg", "Archery at the 2012 Summer Olympics – Men's individual", "Gymnastics at the 1992 Summer Olympics – Women's Uneven Bars", "Diving at the 2008 Summer Olympics – Men's synchronized 10 metre platform", "Judo at the 2008 Summer Olympics – Women's +78 kg", "Gymnastics at the 2012 Summer Olympics- Men's Floor Exercises", 'Boxing at the 2004 Summer Olympics – Light flyweight', "Shooting at the 1984 Summer Olympics - Women's 10 metre air rifle", "Gymnastics at the 2008 Summer Olympics – Women's artistic team all-around", "Shooting at the 2008 Summer Olympics – Men's 10 metre air rifle", "Athletics at the 1992 Summer Olympics – Women's 10 kilometres walk", "Gymnastics at the 2000 Summer Olympics – Men's parallel bars", "Judo at the 1996 Summer Olympics - Women's Middleweight (66kg)", "Judo at the 1996 Summer Olympics - Women's Heavyweight", "Diving at the 2000 Summer Olympics – Men's 3 metre springboard", "Shooting at the 2004 Summer Olympics - Men's 10 metre air rifle", "Athletics at the 1992 Summer Olympics – Women's 1500 metres", "Athletics at the 1996 Summer Olympics – Women's 5000 metres", "Shooting at the 1996 Summer Olympics – Men's 10 metre running target", "Diving at the 1988 Summer Olympics – Women's 3 metre springboard", "Weightlifting at the 1988 Summer Olympics - Men's Bantamweight 52-56 kg", "Boxing at the 2012 Summer Olympics – Women's flyweight", "Swimming at the 2008 Summer Olympics – Women's 200 metre freestyle", "Taekwondo at the 2008 Summer Olympics – Men's 80 kg", "Shooting at the 1996 Summer Olympics – Women's 25 metre pistol", 'Figure skating at the 2006 Winter Olympics – Pairs', "Short track speed skating at the 2010 Winter Olympics – Women's 1500 metres", "Swimming at the 2012 Summer Olympics – Women's 400 metre individual medley", "Weightlifting at the 1988 Summer Olympics - Men's Lightweight 60-67.5 kg", "Freestyle skiing at the 2010 Winter Olympics – Men's aerials", "Diving at the 2004 Summer Olympics – Men's 3 metre springboard", "Swimming at the 1996 Summer Olympics – Women's 100 metre butterfly", "Swimming at the 1996 Summer Olympics – Women's 50 metre freestyle", "Swimming at the 1992 Summer Olympics – Women's 200 metre breaststroke", "Figure Skating at the 1994 Winter Olympics - Women's Singles", "Diving at the 1988 Summer Olympics – Men's 10 metre platform", "Judo at the 2008 Summer Olympics - Women's 57 kg", "Judo at the 1992 Summer Olympics - Women's Heavyweight", "Shooting at the 2012 Summer Olympics - Women's 10 metre air rifle", "Diving at the 2000 Summer Olympics – Men's synchronized 10 metre platform", "Shooting at the 1992 Summer Olympics – Women's 25 metre pistol", "Diving at the 2000 Summer Olympics – Men's 10 metre platform", "Figure Skating at the 1998 Winter Olympics -Women's Singles", "Wrestling at the 2004 Summer Olympics - Women's Freestyle Heavyweight", "Swimming at the 1992 Summer Olympics – Women's 50 metre freestyle", "Badminton at the 2008 Summer Olympics – Men's doubles", "Judo at the 1992 Summer Olympics - Women's 52 kg", "Shooting at the 2000 Summer Olympics – Women's 10 metre air pistol", "Short Track Speed Skating at the 2006 Winter Olympics - Women's 1000m", "Shooting at the 2008 Summer Olympics - Men's Double Trap", "Weightlifting at the 2004 Summer Olympics - Men's Featherweight 56-62 kg", "Speed skating at the 2010 Winter Olympics – Women's 500 metres"}
            Answers = 386, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 386, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 313 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.nobelprizes.nobel_subject_area.nobel_awards', 'base.nobelprizes.nobel_honor.nobel_prize_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.nobelprizes.nobel_subject_area.nobel_awards ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.nobel_prize_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.nobelprizes.nobel_subject_area.nobel_awards ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.nobel_prize_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Pearl S. Buck'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 314 / 542: {
          [('Main', '==', 'm.0d05w3', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.system'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.system ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.system ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 315 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.coterminous_with', 'location.cotermination.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.coterminous_with ?o1 . ?o1 fb:location.cotermination.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.coterminous_with ?o1 . ?o1 fb:location.cotermination.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Taiwan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 316 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.force_deployments', 'military.force_strength.force_size'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'40000', '520000'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 317 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.force_deployments', 'military.force_strength.resource'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.resource ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.resource ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Personnel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 318 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.casualties', 'military.casualties.lower_estimate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.lower_estimate ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.lower_estimate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'1446', '4200'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 319 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 320 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3
            Final Answer: {'Bronze medal', 'Gold medal', 'Silver medal'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 321 / 542: {
          [('Main', '==', 'm.0d05w3', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Emperor of China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 322 / 542: {
          [('Main', '==', 'm.0d05w3', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 323 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 324 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_since'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'1982'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.044s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.044s]
        Checking schema 325 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.force_deployments', 'military.force_strength.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 6
            Final Answer: {'Soviet Union', 'Viet Cong', 'North Vietnam', 'Khmer Rouge', 'North Korea'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 326 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.force_deployments', 'military.force_strength.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.date ?o2 . }
          [2020-12-03 14:19:41] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'1968'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 327 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.casualties', 'military.casualties.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Vietnam War'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 328 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 467
            Final Answer: {'Zhang Shan', 'Yang Jinghui', 'Hu Jia', 'Jingkun Zhang', 'Cheng Fei', 'Liu Xia', 'Shen Qiong', 'He Hanbin', 'Shuwei Sun', 'Guo Jingjing', 'Zhang Yanmei', 'Tang Lingsheng', 'Xu Jing', 'Cheng Ming', 'Feng Kun', 'Li Ju', 'Gong Lijiao', 'Li Ning', 'Li Shanshan', 'Xianbo Wang', 'Chen Lu', 'Qiu Jian', 'Xiao Qin', 'Xue Haifeng', 'Wang Xu', 'Sun Yang', 'Zhang Lin', 'Pang Jiaying', 'Su Liqun', 'Zhang Juanjuan', 'Yanping Ma', 'Yan Zi', 'Liu Xiang', 'Zhu Jianhua', 'Wei Haiying', 'Zhang Peijun', 'Zhang Zhilei', 'Zhang Yawen', 'Zeng Guoqiang', 'Yang Xiaojun', 'Zhang Yuehong', 'Xiaomin Huang', 'Feng Zhe', 'Lai Yawen', 'Lei Sheng', 'Wu Xiaoxuan', 'Yu Dawei', 'Yao Jingyuan', 'Xie Huilin', 'Yang Xilan', 'Fan Yunjie', 'Zhiyuan Niu', 'Xu Li', 'Ni Hong', 'Jing Gao', 'Chang Si', 'Song Nina', 'Yin Jian', 'Ding Meiyuan', 'Tang Gonghong', 'Sun Dandan', 'Wu Jingbiao', 'Liu Ying', 'Ya-Jun Wang', 'Zhang Guozheng', 'Gao E', 'Zhang Xi', 'Lü Zhiwu', 'You Wenhui', 'Dong Dong', 'Wenjiing Bi', 'Li Duihong', 'Yang Hao', 'Li Qing', 'Luan Jujie', 'Wang Jie', 'Li Jinhe', 'Wu Jingyu', 'Li Yan', 'Wang Lu', 'Tian Jia', 'Luo Yutong', 'Lu Chunlong', 'Tong Jian', 'Liu Limin', 'Wang Xiaohong', 'Xu Anqi', 'Li Juan', 'Huang Xuechen', 'Sui Lu', 'Huang Hua', 'Le Jingyi', 'Xue Chen', 'Chen Yufeng', 'Li Xuerui', 'Zhang Bing', 'Hou Yuzhu', 'Yang Xia', 'Chen Ding', 'Qiu Bo', 'He Kexin', 'Liu Liping', 'Wang Nan', 'Hong Qian', 'Zhan Xugang', 'Li Ting', 'Xu Lili', 'Wang Mingjuan', 'Tao Luna', 'Li Shufang', 'Zhao Lihong', 'Zhao Yunlei', 'Jiao Zhimin', 'Liu Xiaobo', 'Ding Feng', 'Jiang Yuyuan', 'Rong Chi', 'Tan Zongliang', 'He Wenna', 'Ping Zhang', 'Dai Xiaoxiang', 'Zhong Honglian', 'Zhong Man', 'Wei Qiuyue', 'Guo Peng', 'Li Xueying', 'Fu Haifeng', 'Sun Fuming', 'Lin Yue', 'Tang Lin', 'Liu Yumei', 'Cao Zhongrong', 'Yue Qingshuang', 'Chen Weiqiang', 'Zhang Yining', 'Yong-Mei Cui', 'Chen Fengqin', 'Qieyang Shijie', 'Wang Liping', 'Yuan Hua', 'Xing Huina', 'Liu Ailing', 'Wang Zhiwei', 'Wei Ning', 'Chen Zhong', 'He Yingqiang', 'Sang Yang', 'Gao Min', 'Zi Xiong', 'Zhang Na', 'Xu Haifeng', 'Guo Shuang', 'Xiao Hailiang', 'Huang Shanshan', 'Na Li', 'Fang Yuting', 'Wu Wenxiong', 'Li Jie', 'Li Deliang', 'Tian Qing', 'Li Lingiuan', 'Ma Jin', 'Guo Dan', 'Wang Zheng', 'Liu Guoliang', 'Lu Yong', 'Zhuang Yong', 'Dai Jun', 'Wang Beixing', 'Li Zhongyun', 'Zhou Lulu', 'Zhuocheng Yu', 'Yi Siling', 'Wang Yimei', 'Zhang Jike', 'Long Qingquan', 'Ma Yanhong', 'Yu Yang', 'Zhang Xiangsen', 'Zhu Yunying', 'Xu Chen', 'Wang Chunlu', 'Yue-Ming Li', 'Xiao Jun', 'Li Meisu', 'Tong Wen', 'Huang Haiyang', 'Han Xiaopeng', 'Wang Tao', 'Zhang Dan', 'Ma Yunwen', 'Weiyang Guo', 'Kong Linghui', 'Xu Lijia', 'Jia Zhanbo', 'Zhou Yang', 'Sun Wen', 'Shan Li', 'Fang Yingchao', 'Zou Kai', 'Sun Li', 'Jiang Wenwen', 'Gui Chaoran', 'Sun Wenyan', 'Lü Xiaojun', 'Li Huifen', 'Jiong Dong', 'Xu Yunli', 'Zheng Haixia', 'Qu Yunxia', 'Wang Chengyi', 'Zhang Nan', 'Guo-Jun Li', 'Jiang Lin', 'Chen Yibing', 'Lin Qingfeng', 'Qin Dongya', 'Wang Meng', 'Chen Ying', 'Liu Xuan', 'Jiao Shuai', 'Wu Dan', 'Lai Runming', 'Zhang Ning', 'Hongbo Zhao', 'Yin Yin', 'Chen Jing', 'Li Ye', 'Mo Huilan', 'Luo Xiaojuan', 'Zhou Chunxiu', 'Qin Kai', 'Chen Jin', 'Zhang Hui', 'Wu Minxia', 'Xu Yan', 'Tong Fei', 'Wang Linwei', 'Wang Jiao', 'Yuan Zhi', 'Wen Tong', 'Hou Yuzhuo', 'Qiu Aihua', 'Yang Yang', 'Ye Shiwen', 'Fu Mingxia', 'Si Tianfeng', 'Pang Wei', 'Huang Wenyi', 'Fan Bin', 'Zhuang Xiaoyan', 'Cuihua Jiang', 'Luo Wei', 'Zhou Mi', 'Sui Xinmei', 'Yang Xiuli', 'Liu Shoubin', 'Yang Wenyi', 'Chang Yongxiang', 'He Zhuoqiang', 'Lu Li', 'Wang Ziling', 'Chen Yueling', 'Ma Long', 'Li Yunqi', 'Lu Haojie', 'Shi Zhiyong', 'Liu Yuxiang', 'Wang Lei', 'Li Shan', 'Ma Lin', 'Kanat Islam', 'Ren Qi', 'Shen Xue', 'Yang Yilin', 'Hu Binyuan', 'Chen Xiaojun', 'Du Li', 'Huang Xu', 'Wang Junxia', 'Zhang Xiaoping', 'Teng Haibin', 'Cancan Ren', 'Gao Xiumin', 'Lin Qisheng', 'Wang Liqin', 'Zheng Meizhu', 'Sui Shengsheng', 'Deng Yaping', 'Xue Ming', 'Zhou Hong', 'Hao Yun', 'Luo Jianming', 'Wen Lirong', 'Bian Hongmin', 'Xu Linyin', 'Xu Nannan', 'Xiao Jiangang', 'Zhang Wenxiu', 'Pan Wenli', 'Xinxin  Guo', 'Yang Ling', 'He Jianping', 'Ye Qiaobo', 'Lin Dan', 'Xie Xingfang', 'Cao Yuan', 'Zhao Ruirui', 'Jiang Fudong', 'Wang Manli', 'Jiang Yonghua', 'Wei Yili', 'Guo Yue', 'Jiang Haiqi', 'Zhou Suhong', 'Chen Zhen', 'Zheng Jie', 'Wang Mingxing', 'Chen Ruolin', 'Zhou Lüxin', 'Ye Huanming', 'Wu Xingjiang', 'Li Jinzi', 'Ding Ning', 'Shi Guihong', 'Luo Xi', 'He Chong', 'Zhu Guo', 'Wu Shude', 'Li Nina', 'Chen Long', 'Qiao Hong', 'Liao Hui', 'Wang Yihan', 'Ma Fang', 'Zhang Di', 'Shi Hairong', 'Linyao Guo', 'Li Wenquan', 'Gao Lin', 'Cong Xuedi', 'Li Xin', 'Wang Hao', 'Guo Wenjun', 'Sun Yujie', 'Chen Xiaomin', 'Xu Yanmei', 'Wang Xin', 'Sun Qingmei', 'Ma Wenge', 'Ji Xinpeng', 'Liu Ou', 'Cai Yalin', 'Li Kongzheng', 'Xiaodong Zhang', 'Xia Xuanze', 'Li Xiaopeng', 'Jiang Ying', 'Wang Lina', 'Li JiaJun', 'Zhang Weihong', 'Sun Xiulan', 'Peng Bo', 'Li Jing', 'Zhou Yan', 'Lao Lishi', 'Li Xan', 'Hong Zhao', 'Li Yuwei', 'Zou Shiming', 'Lu Ying', 'Huo Liang', 'Wang Feng', 'Gao Hong', 'Li Xiaoshuang', 'Yang Yun', 'Chen Yanqing', 'Li Hongli', 'Liu Yanan', 'Sun Yue', 'Lina Wang', 'Wang Yifu', 'Sang Xue', 'Lou Yun', 'Wang Bingyu', 'Li Lan', 'Yu Dan', 'Chen Xiexia', 'Luo Xuejuan', 'Xiong Ni', 'Ren Hui', 'Zhang Hao', 'Yang Wei', 'Xian Dongmei', 'Liu Zhongqing', 'Huang Zhihong', 'Jing Ruixue', 'Lin Weining', 'Du Jing', 'Zhang Yanquan', 'Li Yanfeng', 'Sun Tiantian', 'Wu Yiwen', 'Su Huijuan', 'Jiang Tingting', 'He Ying', 'An Yulong', 'Liu Zige', 'Deng Linlin', 'Zhou Jihong', 'Cui Jianjun', 'Wang Fei', 'Pang Qing', 'Li Xiaoxia', 'Li Chunxiu', 'Liu Chunhong', 'Xu Dongxiang', 'Wang Yi', 'Li Xuanxu', 'Liu Yin', 'Qi He', 'Li Na', 'Qinan Zhu', 'Zhang Chenglong', 'Huang Shiping', 'Zhu Juefeng', 'Tian Liang', 'Jiao Liuyang', 'Tan Liangde', 'Tan Xue', 'Wu Penggen', 'Yu Hongqi', 'Lin Li', 'Gao Feng', 'Cao Lei', 'Gong Jinjie', 'Dan Wu', 'He Zi', 'Wu Meijin', 'Cai Yun', 'Sheng Zetian', 'Liu Xiaoning', 'Shui Qingxia', 'Gong Zhichao', 'Zhou Peishun', 'Wang Zhen', 'Wu Yongmei', 'Le Maosheng', 'Zhang Xiangxiang', 'Chen Ling', 'Wang Huifeng', 'Tang Jiuhong', 'Liu Jinli', 'Tang Yi', 'Wang Yan', 'Ye Zhaoying', 'Ling Jie', 'Bao Yingying', 'Li Zhuo'}
            Answers = 459, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.061s]
          Answers = 459, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.061s]
        Checking schema 329 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.nobelprizes.nobel_subject_area.nobel_awards', 'base.nobelprizes.nobel_honor.subject_area'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.nobelprizes.nobel_subject_area.nobel_awards ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.subject_area ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.nobelprizes.nobel_subject_area.nobel_awards ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.subject_area ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 330 / 542: {
          [('Main', '==', 'm.0d05w3', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.to_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.to_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'1911'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 331 / 542: {
          [('Main', '==', 'm.0d05w3', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Flag of China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 332 / 542: {
          [('Main', '==', 'm.0d05w3', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'1949'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 333 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.national_anthem', 'government.national_anthem_of_a_country.anthem'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'March of the Volunteers'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 334 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3
            Final Answer: {'2006 World Artistic Gymnastics Championships', '2007 World Championships in Athletics', '2009 World Championships in Athletics'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 335 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.medal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 3
            Final Answer: {'Bronze medal', 'Gold medal', 'Silver medal'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 336 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 337 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competitors'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competitors ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competitors ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 7
            Final Answer: {'Bai Xue', 'Liu Hong', 'Gong Lijiao', 'Yang Wei', 'Liu Xiang', 'Wang Hao'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 338 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.rank ?o2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 339 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.sports'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.sports ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.sports ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Badminton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 340 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.competitor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 15
            Final Answer: {'Yuxiang Huaug', 'Zhuofu Chen', 'Ziwei Song', 'Dongni Ou', 'Xuan Deng', 'Liang Wang', 'Jinhua Tang', 'Di Suo', 'Gen Li', 'Yujing Jiang', 'Cheng Liu', 'Yixin Bao', 'Ruiqing Cai', 'Kai Liu', 'Huan Xia'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.038s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.038s]
        Checking schema 341 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 342 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competition'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competition ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competition ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 6
            Final Answer: {"2009 World Championships in Athletics – Men's 20 kilometres walk", "2009 World Championships in Athletics – Women's 20 kilometres walk", "2009 World Championships in Athletics – Women's Marathon", "2009 World Championships in Athletics – Women's shot put", "2007 World Championships in Athletics – Men's 110 metres hurdles", "2006 World Artistic Gymnastics Championships – Men's individual all-round"}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 343 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'2010 BWF World Junior Championships'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 344 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 536, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 345 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 346 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 347 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 348 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 349 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 109, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 350 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 351 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 352 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 59, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 353 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 354 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 355 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 356 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 357 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 358 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 359 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 360 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 361 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 362 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 363 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 364 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 365 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 366 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 367 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 368 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 369 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 370 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 371 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 372 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 373 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 374 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 375 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 376 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 377 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 378 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 379 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 380 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 381 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 382 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 383 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.measurement_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 384 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 385 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 386 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 387 / 542: {
          [('Main', '==', 'm.0d05w3', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 388 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 216, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 389 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 390 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.military_commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 391 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 392 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 393 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 394 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 395 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 396 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 397 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 398 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 399 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 400 / 542
        Checking schema 400 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 401 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 402 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 403 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 404 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 405 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 406 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 407 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 408 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 409 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 410 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 411 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 412 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 413 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 414 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 415 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 416 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 417 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 418 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 419 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 420 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 421 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 422 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 423 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 424 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 425 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 426 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 427 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 428 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 429 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 430 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 431 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 432 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 433 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 434 / 542: {
          [('Main', '==', 'm.0d05w3', ['organization.organization_member.member_of', 'organization.organization_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 435 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.military_commanders', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 436 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 437 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 438 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 439 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 440 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 441 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 442 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 33, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 443 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 444 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 445 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 446 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 447 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 448 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 449 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 450 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 451 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 452 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 453 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 454 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 455 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 456 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 457 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 458 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 459 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 460 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 461 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 462 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 463 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 464 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 465 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 466 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 467 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 468 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 469 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 470 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 471 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 472 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 473 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 474 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 475 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 476 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 477 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 478 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 479 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 480 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 481 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 482 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 483 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 484 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 485 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 486 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 79, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 487 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 488 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.index_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 489 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 490 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjusted_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 491 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 492 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 493 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 494 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 495 / 542: {
          [('Main', '==', 'm.0d05w3', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 496 / 542: {
          [('Main', '==', 'm.0d05w3', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 497 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.military_commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 498 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 499 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 500 / 542
        Checking schema 500 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 501 / 542: {
          [('Main', '==', 'm.0d05w3', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 502 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 503 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.from ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 504 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 505 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.unitednations.united_nations_member_state.member_of', 'base.unitednations.united_nations_body_membership.permanent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.unitednations.united_nations_member_state.member_of ?o1 . ?o1 fb:base.unitednations.united_nations_body_membership.permanent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 506 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.force_deployments', 'military.force_strength.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 507 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.casualties', 'military.casualties.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 508 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.casualties', 'military.casualties.type_of_casualties'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.type_of_casualties ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 509 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 510 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 386, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 511 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.nobelprizes.nobel_subject_area.nobel_awards', 'base.nobelprizes.nobel_honor.nobel_prize_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.nobelprizes.nobel_subject_area.nobel_awards ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.nobel_prize_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 512 / 542: {
          [('Main', '==', 'm.0d05w3', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.system'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.system ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 513 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.location.coterminous_with', 'location.cotermination.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.coterminous_with ?o1 . ?o1 fb:location.cotermination.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 514 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.force_deployments', 'military.force_strength.force_size'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 515 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.force_deployments', 'military.force_strength.resource'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.resource ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 516 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.casualties', 'military.casualties.lower_estimate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.lower_estimate ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 517 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 518 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 519 / 542: {
          [('Main', '==', 'm.0d05w3', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 520 / 542: {
          [('Main', '==', 'm.0d05w3', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 521 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 522 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_since'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 523 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.force_deployments', 'military.force_strength.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 524 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.force_deployments', 'military.force_strength.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 525 / 542: {
          [('Main', '==', 'm.0d05w3', ['military.military_combatant.casualties', 'military.casualties.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 526 / 542: {
          [('Main', '==', 'm.0d05w3', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 459, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 527 / 542: {
          [('Main', '==', 'm.0d05w3', ['base.nobelprizes.nobel_subject_area.nobel_awards', 'base.nobelprizes.nobel_honor.subject_area'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:base.nobelprizes.nobel_subject_area.nobel_awards ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.subject_area ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 528 / 542: {
          [('Main', '==', 'm.0d05w3', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.to_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 529 / 542: {
          [('Main', '==', 'm.0d05w3', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 530 / 542: {
          [('Main', '==', 'm.0d05w3', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 531 / 542: {
          [('Main', '==', 'm.0d05w3', ['location.country.national_anthem', 'government.national_anthem_of_a_country.anthem'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 532 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 533 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 534 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 535 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competitors'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competitors ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 536 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.rank ?o2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 537 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.sports'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.sports ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 538 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.competitor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 539 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 540 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competition'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competition ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 541 / 542: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        529 / 542 coarse schemas kept with ans_size > 0.
      } [4.051s]
      Coarse level ended, resulting in 529 schemas.
    } [4.488s]
    Type level searching (total types = 10): {
      Current: 0 / 529
[{'people.ethnicity'}]
[{'people.ethnicity'}]
[{'language.human_language'}]
[{'location.location'}]
[{'people.person'}]
[{'location.country'}]
[{'language.language_family'}]
[{'language.language_dialect'}]
[{'location.country'}]
[{'education.field_of_study'}]
[{'location.location'}]
[{'language.language_writing_system'}]
[{'type.object'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'government.government_agency'}]
[{'people.person'}]
[{'location.location'}]
[{'military.military_combatant'}]
[{'fictional_universe.fictional_character'}]
[{'sports.sports_team'}]
[{'meteorology.tropical_cyclone'}]
[{'base.locations.continents'}]
[{'base.locations.place_in_the_world'}]
[{'book.periodical'}]
[{'food.beer'}]
[{'base.casinos.casino'}]
[{'biology.animal_breed'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'base.uncommon.exception'}]
[{'film.film'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.government_office_or_title'}]
[{'government.government'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.location'}]
[{'base.skosbase.skos_concept'}]
[{'olympics.olympic_games'}]
[{'exhibitions.exhibition'}]
[{'base.mystery.cryptid'}]
[{'film.film'}]
[{'media_common.netflix_title'}]
[{'location.citytown'}]
[{'type.int'}]
[{'finance.currency'}]
[{'book.newspaper'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'aviation.airport'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'organization.organization'}]
[{'tv.tv_program'}]
[{'base.folklore.mythical_creature'}]
[{'type.domain'}]
[{'base.mystery.hoax'}]
[{'type.object'}]
[{'user.skud.nuclear_weapons.nuclear_test'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'government.government_agency'}]
[{'people.person'}]
[{'location.location'}]
[{'military.military_combatant'}]
[{'fictional_universe.fictional_character'}]
[{'sports.sports_team'}]
[{'meteorology.tropical_cyclone'}]
[{'base.locations.continents'}]
[{'base.locations.place_in_the_world'}]
[{'book.periodical'}]
[{'food.beer'}]
[{'base.casinos.casino'}]
[{'biology.animal_breed'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'base.uncommon.exception'}]
[{'film.film'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.government_office_or_title'}]
[{'government.government'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.location'}]
      Current: 100 / 529
[{'base.skosbase.skos_concept'}]
[{'olympics.olympic_games'}]
[{'exhibitions.exhibition'}]
[{'base.mystery.cryptid'}]
[{'film.film'}]
[{'media_common.netflix_title'}]
[{'location.citytown'}]
[{'type.int'}]
[{'finance.currency'}]
[{'book.newspaper'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'aviation.airport'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'organization.organization'}]
[{'tv.tv_program'}]
[{'base.folklore.mythical_creature'}]
[{'type.domain'}]
[{'base.mystery.hoax'}]
[{'type.object'}]
[{'user.skud.nuclear_weapons.nuclear_test'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_sport'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_games'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_metric_ton'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
      Current: 200 / 529
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_metric_ton'}, {'type.float'}]
[{'measurement_unit.dated_kgoe'}, {'type.datetime'}]
[{'measurement_unit.dated_kgoe'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_index_value'}, {'dataworld.information_source'}]
[{'measurement_unit.adjusted_money_value'}, {'finance.currency'}]
[{'measurement_unit.adjusted_money_value'}, {'dataworld.information_source'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_metric_ton'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_kgoe'}, {'type.float'}]
[{'measurement_unit.dated_index_value'}, {'type.datetime'}]
[{'measurement_unit.dated_index_value'}, {'type.float'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'military.military_command'}, {'military.military_commander'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.unitednations.united_nations_body_membership'}, {'base.unitednations.united_nations_body'}]
[{'base.unitednations.united_nations_body_membership'}, {'type.datetime'}]
[{'base.unitednations.united_nations_body_membership'}, {'base.unitednations.united_nations_member_state'}]
[{'military.force_strength'}, {'military.military_conflict'}]
[{'military.casualties'}, {'military.military_combatant'}]
[{'military.casualties'}, {'military.casualties_type'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_games'}]
      Current: 300 / 529
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_event_competition'}]
[{'base.nobelprizes.nobel_honor'}, {'base.nobelprizes.nobel_prize_winner'}]
[{'royalty.system_title_relationship'}, {'royalty.system_of_nobility'}]
[{'location.cotermination'}, {'location.location'}]
[{'military.force_strength'}, {'type.int'}]
[{'military.force_strength'}, {'military.military_resource'}]
[{'military.casualties'}, {'type.int'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_medal'}]
[{'royalty.system_title_relationship'}, {'royalty.noble_title'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'military.force_strength'}, {'military.military_combatant'}]
[{'military.force_strength'}, {'type.datetime'}]
[{'military.casualties'}, {'military.military_conflict'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_athlete'}]
[{'base.nobelprizes.nobel_honor'}, {'base.nobelprizes.nobel_subject_area'}]
[{'royalty.system_title_relationship'}, {'type.datetime'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'government.national_anthem_of_a_country'}, {'government.national_anthem'}]
[{'sports.competitor_competition_relationship'}, {'sports.multi_event_tournament'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_medal'}]
[{'sports.competitor_country_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_competition_relationship'}, {'type.int'}]
[{'sports.competitor_country_relationship'}, {'sports.sport'}]
[{'sports.competitor_country_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competition'}]
[{'sports.competitor_country_relationship'}, {'sports.multi_event_tournament'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_sport'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_games'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_metric_ton'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
      Current: 400 / 529
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_metric_ton'}, {'type.float'}]
[{'measurement_unit.dated_kgoe'}, {'type.datetime'}]
[{'measurement_unit.dated_kgoe'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_index_value'}, {'dataworld.information_source'}]
[{'measurement_unit.adjusted_money_value'}, {'finance.currency'}]
[{'measurement_unit.adjusted_money_value'}, {'dataworld.information_source'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_metric_ton'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_kgoe'}, {'type.float'}]
[{'measurement_unit.dated_index_value'}, {'type.datetime'}]
[{'measurement_unit.dated_index_value'}, {'type.float'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'military.military_command'}, {'military.military_commander'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.unitednations.united_nations_body_membership'}, {'base.unitednations.united_nations_body'}]
[{'base.unitednations.united_nations_body_membership'}, {'type.datetime'}]
[{'base.unitednations.united_nations_body_membership'}, {'base.unitednations.united_nations_member_state'}]
[{'military.force_strength'}, {'military.military_conflict'}]
[{'military.casualties'}, {'military.military_combatant'}]
[{'military.casualties'}, {'military.casualties_type'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_event_competition'}]
[{'base.nobelprizes.nobel_honor'}, {'base.nobelprizes.nobel_prize_winner'}]
[{'royalty.system_title_relationship'}, {'royalty.system_of_nobility'}]
      Current: 500 / 529
[{'location.cotermination'}, {'location.location'}]
[{'military.force_strength'}, {'type.int'}]
[{'military.force_strength'}, {'military.military_resource'}]
[{'military.casualties'}, {'type.int'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_medal'}]
[{'royalty.system_title_relationship'}, {'royalty.noble_title'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'military.force_strength'}, {'military.military_combatant'}]
[{'military.force_strength'}, {'type.datetime'}]
[{'military.casualties'}, {'military.military_conflict'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_athlete'}]
[{'base.nobelprizes.nobel_honor'}, {'base.nobelprizes.nobel_subject_area'}]
[{'royalty.system_title_relationship'}, {'type.datetime'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'government.national_anthem_of_a_country'}, {'government.national_anthem'}]
[{'sports.competitor_competition_relationship'}, {'sports.multi_event_tournament'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_medal'}]
[{'sports.competitor_country_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_competition_relationship'}, {'type.int'}]
[{'sports.competitor_country_relationship'}, {'sports.sport'}]
[{'sports.competitor_country_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competition'}]
[{'sports.competitor_country_relationship'}, {'sports.multi_event_tournament'}]
      30 typed schemas retrieved from 529 coarse schemas.
      Calculating F1 for 30 typed schemas: {
        Current: 0 / 30
        Checking schema 0 / 30: {
          [('Main', '==', 'm.013y54', ['people.ethnicity.geographic_distribution']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.geographic_distribution ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.013y54 fb:people.ethnicity.geographic_distribution ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.013y54'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 1 / 30: {
          [('Main', '==', 'm.01r2l', ['language.human_language.region']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.region ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01r2l fb:language.human_language.region ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01r2l'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 2 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.partially_contains']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 3 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.contains']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Hong Kong', 'Macau'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.074s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.075s]
        Checking schema 4 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.contains_major_portion_of']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 5 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.containedby']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 6 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.partially_contains']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 7 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.contains']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 8 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.contains_major_portion_of']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 9 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.containedby']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d05w3 fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:symbols.flag_referent . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 10 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.imported_from']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'symbols.flag_referent', 'location.statistical_region'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 11 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.imported_from']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'symbols.flag_referent', 'location.statistical_region'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 6
            Final Answer: {'Yemen', 'Sudan', 'Mozambique', 'Angola', 'Laos', 'United States of America'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 12 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 17
            Final Answer: {'Vietnam', 'Myanmar', 'Taiwan', 'Pakistan', 'Nepal', 'Mongolia', 'Kazakhstan', 'Tajikistan', 'Kyrgyzstan', 'Laos', 'Japan', 'Russia', 'Afghanistan', 'North Korea', 'India', 'Bhutan'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 13 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.exported_to']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'symbols.flag_referent', 'location.statistical_region'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 13
            Final Answer: {'Yemen', 'Djibouti', 'Tanzania', 'Uzbekistan', 'New Zealand', 'Nepal', 'Sudan', 'Tuvalu', 'Angola', 'Laos', 'Madagascar', 'Algeria', 'Sierra Leone'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 14 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'symbols.flag_referent', 'location.statistical_region'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 15 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.coterminous_with', 'location.cotermination.location']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.cotermination'}, {'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.coterminous_with ?o1 . ?o1 fb:location.cotermination.location ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.coterminous_with ?o1 . ?o1 fb:location.cotermination.location ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 2
            Final Answer: {'Taiwan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 30: {
          [('Main', '==', 'm.0d05w3', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'symbols.flag_use'}, {'symbols.flag_referent'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 17 / 30: {
          [('Main', '==', 'm.0d05w3', ['symbols.flag_referent.flag', 'symbols.flag_use.flag']), ('Type', '==', 'symbols.flag', ['type.object.type'])]
          var_types: [{'symbols.flag_use'}, {'symbols.flag'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.type fb:symbols.flag . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.type fb:symbols.flag . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'Flag of China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 18 / 30: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.country']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'sports.competitor_country_relationship'}, {'symbols.flag_referent', 'sports.sport_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 19 / 30: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.country']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'sports.competitor_competition_relationship'}, {'symbols.flag_referent', 'sports.sport_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema Request: {
            WebQ_697|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d05w3'}
            Query return lines = 1
            Final Answer: {'China'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 20 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.imported_from']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'symbols.flag_referent', 'location.statistical_region'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.imported_from']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'symbols.flag_referent', 'location.statistical_region'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 22 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 23 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.exported_to']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'symbols.flag_referent', 'location.statistical_region'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 24 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'symbols.flag_referent', 'location.statistical_region'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 25 / 30: {
          [('Main', '==', 'm.0d05w3', ['location.location.coterminous_with', 'location.cotermination.location']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'location.cotermination'}, {'location.location', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:location.location.coterminous_with ?o1 . ?o1 fb:location.cotermination.location ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 26 / 30: {
          [('Main', '==', 'm.0d05w3', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'symbols.flag_use'}, {'symbols.flag_referent'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 27 / 30: {
          [('Main', '==', 'm.0d05w3', ['symbols.flag_referent.flag', 'symbols.flag_use.flag']), ('Type', '==', 'symbols.flag', ['type.object.type'])]
          var_types: [{'symbols.flag_use'}, {'symbols.flag'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.type fb:symbols.flag . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 28 / 30: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.country']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'sports.competitor_country_relationship'}, {'symbols.flag_referent', 'sports.sport_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 29 / 30: {
          [('Main', '==', 'm.0d05w3', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.country']), ('Type', '==', 'symbols.flag_referent', ['type.object.type'])]
          var_types: [{'sports.competitor_competition_relationship'}, {'symbols.flag_referent', 'sports.sport_country'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d05w3 fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.type fb:symbols.flag_referent . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:42] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        23 / 30 typed schemas kept with ans_size > 0.
      } [0.351s]
      Typed level ended, resulting in 552 schemas.
    } [0.378s]
    Time level searching (total times = 0): {
      Current: 0 / 552
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'language.language_writing_system.used_from', 'language.language_writing_system.used_until'}]
self.var_time_preds: [{'type.object.timestamp'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [{'meteorology.tropical_cyclone.dissipated', 'meteorology.tropical_cyclone.formed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [{'base.casinos.casino.opened', 'base.casinos.casino.closed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.mystery.hoax.date_initiated'}]
self.var_time_preds: [{'type.object.timestamp'}]
self.var_time_preds: [{'user.skud.nuclear_weapons.nuclear_test.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [{'meteorology.tropical_cyclone.dissipated', 'meteorology.tropical_cyclone.formed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [{'base.casinos.casino.opened', 'base.casinos.casino.closed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
      Current: 100 / 552
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.mystery.hoax.date_initiated'}]
self.var_time_preds: [{'type.object.timestamp'}]
self.var_time_preds: [{'user.skud.nuclear_weapons.nuclear_test.date'}]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
      Current: 200 / 552
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, {'base.unitednations.united_nations_member_state.date_joined', 'base.unitednations.united_nations_member_state.date_of_membership_dissolution'}]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      Current: 300 / 552
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.nobelprizes.nobel_honor.year'}, set()]
self.var_time_preds: [{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, {'royalty.system_of_nobility.used_to_date', 'royalty.system_of_nobility.used_from_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.nobelprizes.nobel_honor.year'}, set()]
self.var_time_preds: [{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
      Current: 400 / 552
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, set()]
self.var_time_preds: [{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, {'base.unitednations.united_nations_member_state.date_joined', 'base.unitednations.united_nations_member_state.date_of_membership_dissolution'}]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.nobelprizes.nobel_honor.year'}, set()]
self.var_time_preds: [{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, {'royalty.system_of_nobility.used_to_date', 'royalty.system_of_nobility.used_from_date'}]
      Current: 500 / 552
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.nobelprizes.nobel_honor.year'}, set()]
self.var_time_preds: [{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 552 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 552 schemas.
    } [0.012s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 552
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'language.language_writing_system.used_from', 'language.language_writing_system.used_until'}]
[{'type.object.timestamp'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_agency.date_founded'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'sports.sports_team.founded'}]
[{'meteorology.tropical_cyclone.dissipated', 'meteorology.tropical_cyclone.formed'}]
[set()]
[set()]
[set()]
[{'food.beer.first_brewed'}]
[{'base.casinos.casino.opened', 'base.casinos.casino.closed'}]
[set()]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[{'organization.organization.date_founded'}]
[{'organization.organization.date_founded'}]
[{'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[set()]
[set()]
[{'base.mystery.hoax.date_initiated'}]
[{'type.object.timestamp'}]
[{'user.skud.nuclear_weapons.nuclear_test.date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'government.government_agency.date_founded'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'sports.sports_team.founded'}]
[{'meteorology.tropical_cyclone.dissipated', 'meteorology.tropical_cyclone.formed'}]
[set()]
[set()]
[set()]
[{'food.beer.first_brewed'}]
[{'base.casinos.casino.opened', 'base.casinos.casino.closed'}]
[set()]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
      Current: 100 / 552
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[{'organization.organization.date_founded'}]
[{'organization.organization.date_founded'}]
[{'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[set()]
[set()]
[{'base.mystery.hoax.date_initiated'}]
[{'type.object.timestamp'}]
[{'user.skud.nuclear_weapons.nuclear_test.date'}]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[set(), set()]
[set(), set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
      Current: 200 / 552
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
[{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[set(), set()]
[{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, set()]
[{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, set()]
[{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, {'base.unitednations.united_nations_member_state.date_joined', 'base.unitednations.united_nations_member_state.date_of_membership_dissolution'}]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
      Current: 300 / 552
[set(), set()]
[{'base.nobelprizes.nobel_honor.year'}, set()]
[{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, {'royalty.system_of_nobility.used_to_date', 'royalty.system_of_nobility.used_from_date'}]
[set(), set()]
[{'military.force_strength.date'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'military.force_strength.date'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[{'base.nobelprizes.nobel_honor.year'}, set()]
[{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_formed', 'government.governmental_body.date_dissolved'}]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
      Current: 400 / 552
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
[{'measurement_unit.dated_index_value.date', 'measurement_unit.dated_index_value.base_period'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[{'measurement_unit.adjusted_money_value.adjustment_date', 'measurement_unit.adjusted_money_value.measurement_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[set(), set()]
[{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, set()]
[{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, set()]
[{'base.unitednations.united_nations_body_membership.to', 'base.unitednations.united_nations_body_membership.from'}, {'base.unitednations.united_nations_member_state.date_joined', 'base.unitednations.united_nations_member_state.date_of_membership_dissolution'}]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.nobelprizes.nobel_honor.year'}, set()]
[{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, {'royalty.system_of_nobility.used_to_date', 'royalty.system_of_nobility.used_from_date'}]
      Current: 500 / 552
[set(), set()]
[{'military.force_strength.date'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'military.force_strength.date'}, set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[{'base.nobelprizes.nobel_honor.year'}, set()]
[{'royalty.system_title_relationship.to_date', 'royalty.system_title_relationship.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set()]
[set()]
[set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[set(), set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[set(), set()]
[set(), set()]
      0 ordinal schemas retrieved from 552 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 552 schemas.
    } [0.013s]
    [2020-12-03 14:19:42] buffer saved.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Socialism Is Great!"": A Worker's Memoir of the New China"@en ?type1 WHERE { fb:m.0d05w3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name """Socialism Is Great!"": A Worker's Memoir of the New China"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
    552 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0697_schema].
  } [7m27.786s]
  Entering Q 698 / 5810 [b'where did boston terriers come from?']: {
    Show 6 E + 10 T + 0 Tm + 0 Ord = 16 linkings: {
      #00 Entity: [2, 3) (boston) == m.016dxh (Boston_(band)) {'score': 3.409205, 'source': 1.0}
      #01 Entity: [2, 3) (boston) == m.01cx_ (Boston) {'score': 3702.651821, 'source': 1.0}
      #02 Entity: [2, 4) (boston terriers) == m.02w6n9g (boston university terriers men's ice hockey) {'score': 178.773743, 'source': 2.0}
      #03 Entity: [2, 4) (boston terriers) == m.05w6gs (boston university terriers) {'score': 62.936275, 'source': 2.0}
      #04 Entity: [2, 4) (boston terriers) == m.0m0lk3l (boston university terriers men's basketball) {'score': 23.506061, 'source': 2.0}
      #05 Entity: [3, 4) (terriers) == m.0cnyhqn (Terriers_(TV_series)) {'score': 51.863516, 'source': 1.0}
      #06 Type: [0, 2) (where did) == media_common.lost_work (lost work) {'sim': 0.737278}
      #07 Type: [0, 2) (where did) == people.place_lived (place lived) {'sim': 0.703608}
      #08 Type: [0, 1) (where) == location.place_with_neighborhoods (place with neighborhoods) {'sim': 0.687732}
      #09 Type: [4, 7) (come from ?) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.67481}
      #10 Type: [0, 1) (where) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.659286}
      #11 Type: [0, 1) (where) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.649255}
      #12 Type: [0, 2) (where did) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.641702}
      #13 Type: [0, 2) (where did) == media_common.finished_work (finished work) {'sim': 0.640596}
      #14 Type: [0, 1) (where) == military.military_unit_place_of_origin (military unit place of origin) {'sim': 0.635708}
      #15 Type: [0, 2) (where did) == location.us_state (us state) {'sim': 0.63183}
    } [0.000s]
    16 link data save to file.
    Coarse level searching (total entities = 6): {
      [Len-1||F1/6] (2020-12-03 14:27:05) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.016dxh ?p1 ?o1 . }
        [2020-12-03 14:27:05] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.016dxh ?p1 ?o1 . }
          Query return lines = 20
        } [0.008s]
        Filt_Query_Ret = 9 / 20 ( 0.008s)
        [Len-1||F1/6||5/6-1] (2020-12-03 14:27:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.016dxh ?p1 ?o1 . ?o1 ?p2 fb:m.0cnyhqn . }
          [2020-12-03 14:27:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.016dxh ?p1 ?o1 . ?o1 ?p2 fb:m.0cnyhqn . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
      } [0.019s]
      [Len-1||F2/6] (2020-12-03 14:27:05) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01cx_ ?p1 ?o1 . }
        [2020-12-03 14:27:05] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01cx_ ?p1 ?o1 . }
          Query return lines = 71
        } [0.005s]
        Filt_Query_Ret = 39 / 71 ( 0.005s)
        [Len-1||F2/6||5/6-1] (2020-12-03 14:27:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01cx_ ?p1 ?o1 . ?o1 ?p2 fb:m.0cnyhqn . }
          [2020-12-03 14:27:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01cx_ ?p1 ?o1 . ?o1 ?p2 fb:m.0cnyhqn . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
      } [0.020s]
      [Len-1||F3/6] (2020-12-03 14:27:05) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02w6n9g ?p1 ?o1 . }
        [2020-12-03 14:27:05] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02w6n9g ?p1 ?o1 . }
          Query return lines = 13
        } [0.006s]
        Filt_Query_Ret = 6 / 13 ( 0.006s)
      } [0.006s]
      [Len-1||F4/6] (2020-12-03 14:27:05) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.05w6gs ?p1 ?o1 . }
        [2020-12-03 14:27:05] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.05w6gs ?p1 ?o1 . }
          Query return lines = 7
        } [0.004s]
        Filt_Query_Ret = 1 / 7 ( 0.004s)
      } [0.004s]
      [Len-1||F5/6] (2020-12-03 14:27:05) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0cnyhqn ?p1 ?o1 . }
        [2020-12-03 14:27:05] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0cnyhqn ?p1 ?o1 . }
          Query return lines = 22
        } [0.006s]
        Filt_Query_Ret = 12 / 22 ( 0.006s)
        [Len-1||F5/6||1/6-1] (2020-12-03 14:27:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 fb:m.016dxh . }
          [2020-12-03 14:27:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 fb:m.016dxh . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-1||F5/6||2/6-1] (2020-12-03 14:27:05) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 fb:m.01cx_ . }
          [2020-12-03 14:27:05] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 fb:m.01cx_ . }
            Query return lines = 2
          } [0.247s]
          Filt_Query_Ret = 2 / 2 ( 0.247s)
        } [0.247s]
      } [0.269s]
      [Len-1||F6/6] (2020-12-03 14:27:05) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0m0lk3l ?p1 ?o1 . }
        [2020-12-03 14:27:05] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0m0lk3l ?p1 ?o1 . }
          Query return lines = 4
        } [0.014s]
        Filt_Query_Ret = 0 / 4 ( 0.014s)
      } [0.014s]
      [Len-2||F1/6] (2020-12-03 14:27:05) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.016dxh ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:05] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.016dxh ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 266
        } [0.051s]
        Filt_Query_Ret = 11 / 266 ( 0.052s)
        [Len-2||F1/6||5/6-1] (2020-12-03 14:27:06) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.016dxh ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cnyhqn . }
          [2020-12-03 14:27:06] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.016dxh ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cnyhqn . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-2||F1/6||5/6-2] (2020-12-03 14:27:06) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.016dxh ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cnyhqn . }
          [2020-12-03 14:27:06] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.016dxh ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cnyhqn . }
            Query return lines = 0
          } [1.466s]
          Filt_Query_Ret = 0 / 0 ( 1.466s)
        } [1.466s]
      } [1.531s]
      [Len-2||F2/6] (2020-12-03 14:27:07) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01cx_ ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:07] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01cx_ ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 2201
        } [0.256s]
        Filt_Query_Ret = 71 / 2201 ( 0.264s)
        [Len-2||F2/6||5/6-1] (2020-12-03 14:27:07) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01cx_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cnyhqn . }
          [2020-12-03 14:27:07] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01cx_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0cnyhqn . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F2/6||5/6-2] (2020-12-03 14:27:07) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01cx_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cnyhqn . }
          [2020-12-03 14:27:07] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01cx_ ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0cnyhqn . }
            Query return lines = 1
          } [0.182s]
          Filt_Query_Ret = 0 / 1 ( 0.182s)
        } [0.182s]
      } [0.455s]
      [Len-2||F3/6] (2020-12-03 14:27:07) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02w6n9g ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:07] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02w6n9g ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 101
        } [0.016s]
        Filt_Query_Ret = 0 / 101 ( 0.017s)
      } [0.017s]
      [Len-2||F4/6] (2020-12-03 14:27:07) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05w6gs ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:07] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05w6gs ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 113
        } [0.011s]
        Filt_Query_Ret = 0 / 113 ( 0.011s)
      } [0.011s]
      [Len-2||F5/6] (2020-12-03 14:27:08) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:08] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 326
        } [0.043s]
        Filt_Query_Ret = 7 / 326 ( 0.045s)
        [Len-2||F5/6||1/6-1] (2020-12-03 14:27:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.016dxh . }
          [2020-12-03 14:27:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.016dxh . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-2||F5/6||1/6-2] (2020-12-03 14:27:08) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.016dxh . }
          [2020-12-03 14:27:08] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.016dxh . }
            Query return lines = 0
          } [1.252s]
          Filt_Query_Ret = 0 / 0 ( 1.252s)
        } [1.252s]
        [Len-2||F5/6||2/6-1] (2020-12-03 14:27:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01cx_ . }
          [2020-12-03 14:27:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01cx_ . }
            Query return lines = 364
          } [0.051s]
          Filt_Query_Ret = 0 / 364 ( 0.053s)
        } [0.053s]
        [Len-2||F5/6||2/6-2] (2020-12-03 14:27:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01cx_ . }
          [2020-12-03 14:27:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0cnyhqn ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01cx_ . }
            Query return lines = 5
          } [0.603s]
          Filt_Query_Ret = 0 / 5 ( 0.603s)
        } [0.603s]
      } [1.972s]
      [Len-2||F6/6] (2020-12-03 14:27:09) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0m0lk3l ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:09] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0m0lk3l ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 17
        } [0.007s]
        Filt_Query_Ret = 0 / 17 ( 0.007s)
      } [0.007s]
      158 coarse schemas retrieved from scratch.
      Calculating F1 for 158 coarse schemas: {
        Current: 0 / 158
        Checking schema 0 / 158: {
          [('Main', '==', 'm.016dxh', ['music.artist.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:09] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 4
            Final Answer: {'Progressive rock', 'Rock music', 'Classic rock', 'Hard rock'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 1 / 158: {
          [('Main', '==', 'm.016dxh', ['music.artist.label'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.label ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:09] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.label ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 4
            Final Answer: {'Epic Records', 'MCA Records', 'Artemis Records', 'Music Corporation of America'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 158: {
          [('Main', '==', 'm.016dxh', ['broadcast.artist.content'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:broadcast.artist.content ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:09] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:broadcast.artist.content ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 35
            Final Answer: {'WOMC', 'WCBS 101.1 HD2', 'KQJK-FM', 'WZLX', 'radioIO Classic Rock', 'Atlantic Sound Factory', 'CRIK FM - The Lynx Classic Hits', 'radioIO 70s POP', ".977 The '80s Channel", '93.1 Jack FM Los Angeles', '107 WANS', 'radioIO 80s POP', 'WZPT', 'WKQC', 'radioIO Top 100 Classic Rock Hits', '1Club.FM: 70s (Pop)', 'Oldies 104', 'Rock & Roll.fm', 'WJMK', 'WTGB', 'WNCX', 'WEAT Sunny 104.3', 'KJAQ-FM', 'WCBS', 'Head Case Radio', 'WQSR', 'EYE97', '181-greatoldies', 'KJKK-FM', 'radioIO Guitar Heroes', 'KEZK', 'KKJJ-FM', 'CRIK FM - The Lynx Classic Rock', 'radioIO Rock Mix', 'KZOK'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 3 / 158: {
          [('Main', '==', 'm.016dxh', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 17
            Final Answer: {"We're Ready", 'Corporate America', 'Rock and Roll Band', "Can'tcha Say (You Believe in Me)", "Feelin' Satisfied", 'Peace of Mind', 'I Need Your Love', 'More Than a Feeling', 'Amanda', "Don't Look Back", 'Boston', 'Third Stage', 'Greatest Hits', "A Man I'll Never Be", 'Walk On'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 4 / 158: {
          [('Main', '==', 'm.016dxh', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 244
            Final Answer: {'Party', 'More Than A Feeling', 'More Than a Feeling (long version)', 'Tell Me', 'Magdalene', 'Corporate America', 'Get Organ-ized', "A Man I'll never be", 'My Destination', 'More Than a Feeling', "Cryin'", 'Cool the Engines', "Livin' for You (live)", "It's Easy", 'Hitch a Ride', 'Amanda', 'Walk On', "Livin' for You", "Feelin' Satisfied", 'Peace of Mind', 'The Star Spangled Banner / 4th of July Reprise', 'Someone', 'More Than a Feeling (Long Version)', 'Rock & Roll Band', 'Higher Power', "Smokin'", 'I Got More Than a Feeling (long version)', "What's Your Name", 'The Journey', 'The Launch', 'A New World', 'With You', "Can'tcha Say (You Believe in Me) / Still in Love", 'I Think I Like It', 'Walk On (Some More)', 'Higher Power (Kalodner edit)', "Can'tcha Say (You Believe in Me) (remix)", 'Feeling Satisfied', 'Hollyann', 'I Need Your Love', 'We Can Make It', 'Something About You', "Don't Look Back", 'Foreplay/Long Time', 'I Had a Good Time', "A Man I'll Never Be", 'You Gave Up on Love', "Walkin' at Night", 'Turn It Off', "We're Ready", 'Let Me Take You Home Tonight', 'To Be a Man', 'Surrender to Me', "Don't Be Afraid", 'Used to Bad News', "More Than a Feelin'", "Didn't Mean to Fall in Love", 'Smokin', 'Long Time', 'More than a Feeling', 'More Than a Feeling (album version)', 'Stare Out Your Window'}
            Answers = 62, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 62, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 5 / 158: {
          [('Main', '==', 'm.016dxh', ['music.artist.active_start'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.016dxh fb:music.artist.active_start ?o1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 WHERE { fb:m.016dxh fb:music.artist.active_start ?o1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 1
            Final Answer: {'1975'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 6 / 158: {
          [('Main', '==', 'm.016dxh', ['music.artist.origin'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.origin ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.origin ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 7 / 158: {
          [('Main', '==', 'm.016dxh', ['music.composer.compositions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.composer.compositions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.composer.compositions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 3
            Final Answer: {'Foreplay/Long Time', 'Rock and Roll Band', 'Peace of Mind'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 8 / 158: {
          [('Main', '==', 'm.016dxh', ['music.lyricist.lyrics_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.lyricist.lyrics_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.lyricist.lyrics_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 2
            Final Answer: {'Rock and Roll Band', 'Peace of Mind'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 9 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.tourist_attractions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 24
            Final Answer: {'Pierce-Hichborn House', 'Museum of Science', 'New England Aquarium', 'Boston Light', 'Paul Revere House', 'African Meeting House', 'Semitic Museum', 'Isabella Stewart Gardner Museum', 'Old State House', 'John F. Kennedy Library', 'Harvard Museum of Natural History', 'Arnold Arboretum', "Boston Children's Museum", 'Mapparium', 'Boston Athenæum', 'MIT Museum', 'Peabody Museum of Archaeology and Ethnology', 'The Butterfly Place', 'Museum of Fine Arts, Boston', 'Harvard Art Museums', 'Collings Foundation collection in Stow, MA', 'Loring-Greenough House', 'Warren Anatomical Museum', 'Revere Beach'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 10 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.local_transportation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:travel.travel_destination.local_transportation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:travel.travel_destination.local_transportation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 5
            Final Answer: {'MBTA Boat', 'MBTA Bus', 'BoltBus', 'MBTA Commuter Rail', 'MBTA crosstown bus routes'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 11 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.accommodation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:travel.travel_destination.accommodation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:travel.travel_destination.accommodation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Courtyard Boston Logan Airport'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 12 / 158: {
          [('Main', '==', 'm.01cx_', ['location.administrative_division.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.administrative_division.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.administrative_division.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.005s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.005s]
        Checking schema 13 / 158: {
          [('Main', '==', 'm.01cx_', ['base.infection.location_of_biosafety_facility.biosafety_facility'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.infection.location_of_biosafety_facility.biosafety_facility ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.infection.location_of_biosafety_facility.biosafety_facility ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'National Emerging Infectious Diseases Laboratories'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 158: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 15 / 158: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 16 / 158: {
          [('Main', '==', 'm.01cx_', ['government.governmental_jurisdiction.agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston Police Department'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 17 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 2601
            Final Answer: {'William E. Caswell', 'Tom Long', 'William J. Bratton', 'Arthur Marder', 'Robert Bergenheim', 'Patricia Avery', 'Donald Keith', 'Edward H. Kendall', 'Matthew Fraser', 'Paul Sparer', 'Robert Deveau', 'Skipp Whitman', 'William Mason', 'Gary Greenberg', 'John W. Sears', 'Carl Mydans', 'John Winthrop', 'Paul Franke', 'A. Arthur Giddon', 'Louis Kronberg', 'Richard Fitzpatrick', 'Joseph Slepian', 'Harriet Nevins', 'Ed French', 'Amos Binney', 'Craig Finn', 'Alexander Hall', 'Samuel Langdon', 'David Black', 'Allen Danziger', 'Keith Yandle', 'Maud Howe Elliott', 'Paul W. Cronin', 'John Paul Caponigro', 'Jean Gillespie', 'Anne Snyder', 'Lewis Hyde', 'Adam Begley', 'Wadsworth Harris', 'Bee Freeman', 'Don Costa', 'Mark Jackson', 'Franklin W. Smith', 'Mark F. Miller', 'Guinevere Turner', 'Victoria Van Duyne', 'David Barstow', 'Dave Eggers', 'Veda Ann Borg', 'Slaine', 'Michael C. Moynihan', 'Dave Lambert', 'Vic Heyliger', 'De Scott Evans', 'Henry Whitney Bellows', 'Henry Ferrini', 'Francis Amasa Walker', 'Jereme Rogers', 'Bill Anderson', 'Joseph Allen Sr.', 'Ant', 'Barbara McMartin', 'Mather Brown', 'Tom Connolly', 'Alexandra Stamler', 'Edwin Vose Sumner', 'Eliot Daniel', 'William Billings', 'Phillips Brooks', 'Dudley Fitts', 'Stefan Schaefer', 'David Nevins, Jr.', 'Alan Shayne', 'Marlene Stewart', 'John Schuck', 'Samuel Francis Smith', 'Allen French', 'Richard Bowes', "Shannon O'Brien", 'Franco Sama', 'William Henry McNeill', 'Peter Guber', 'Albert Francis Hegenberger', 'Christopher T. Walsh', 'Dean Barnett', 'Robert G. Abboud', 'Arthur L. Andrews', 'Jerry Colonna', 'John Rolly Ross', 'Sean Corrigan', 'Al Avalon', 'Kristin Hedstrom', 'John J. McGinty III', 'Erika Smith', 'Dennis Lynch', 'Nicole Axelrod', 'Bob DeBesse', 'Arthur Woods', 'Jay Blotcher', 'Aurelia Plath', 'Alexander Hill Everett', 'Armand Van Helden', 'Seth Howland', 'Madeline Kahn', 'Joseph Grew', 'Erastus Otis Haven', 'Nicholas Batchelder', 'Aidan Layne', 'Caitlin Whoriskey', 'Harry Parke', 'Faith Salie', 'Becky Orenstein', 'William Hill Brown', 'Charles Bulfinch', 'Gid Gardner', 'George Fair', 'Patricia Holihan', 'Louis Sullivan', 'Michael  Bortone', 'Fred F. Sears', 'Jeremiah Birnbaum', 'James F. McNulty, Jr.', 'John Fillis', 'Tony DeMarco', 'Benjamin Rubin', 'Bill McCarthy', 'Jonathan Borofsky', 'Josiah Quincy, Jr.', 'Susan Paul', 'Charles Wheelock', 'Fred Giannelli', 'James Taylor', 'William Moore', 'Keisha Nash Whitaker', 'Teryn Ashley', 'Frederick Cunningham', 'Christopher Edley, Jr.', 'Robert Dana', 'Alice Peisch', 'John Keefe', 'James Crafts', 'Bill Tierney', 'David Wohlman', 'Harriet Boyd-Hawes', 'Joseph Henry Thayer', 'Royall Tyler', 'Thomas Abate', 'William Martin', 'Josiah McElheny', 'Thomas G. Stevenson', 'Wilma Chan', 'Jamie Denbo', 'Michael J. Coppola', 'Robert Hagopian', 'Wayne Previdi', 'Hillary B. Smith', 'George Ferguson', 'Ben Fagan', 'Ben Wilson', 'Henry Theodore Tuckerman', 'Uma Thurman', 'Harry Sherman', 'Charles Loring Jackson', 'Josiah Warren', 'Sheanon Williams', 'Sandy Saddler', 'Evelyn Ellis', 'John D. Harvey', 'Scott McCloud', 'Robert Joseph Banks', 'Irene E. Ryan', 'Joseph Kahn', 'Hannah-Beth Jackson', 'Eugene Roche', 'Ted Donato', 'Philip D. Murphy', 'Hazel Boyne', 'Nerine Kidd', 'Martha B. Sosman', 'Jonathan Mann', 'Owen A. Galvin', 'Harold Zirin', 'Scott Jaffe', 'Augustus Magee', 'Thomas Coffin Amory', 'Ashley Daniels', 'Dick Stello', 'Eric Griffin', 'John Gorman', 'Mary Lou Clements-Mann', 'Charles Brickley', 'Linda Spencer', 'Fred I. Parker', 'Gene Lavanchy', 'Karly Meola', 'Natasha Yi', 'Jimmy Earl', 'Reba Myers Cowan', 'John Gibson', 'John G. Palfrey', 'Gordon R. Sullivan', 'John Yonakor', 'Beating of Michael Cox', 'John Calvin Stevens', 'Peter Crafts', 'Oliver Ryan', 'Gabriel Friedman', 'Joe Wilson', 'Edward Dahlberg', 'Tom Jung', 'Joe Gould', 'Ashwin Madia', 'Toots Mondello', 'Benjamin Russell', 'Samuel Adams', 'Susan Hale', 'Dukes Dalton', 'Beals Wright', 'P. Paul Minieri', 'Aaron Goldberg', 'Ralph Waldo Emerson', 'Adolf Berle', 'Edward Norton', 'Mark Falvo', 'Karyn Bryant', 'Billy Fay', 'Frank Palmer Speare', 'Matt Semino', 'Helen Vendler', 'Sumner Byron Myers', 'Charles Sumner', 'William Cooper Nell', 'Jonathan Cheever', 'Moody Sarno', 'Samuel Kneeland', 'John Thoreau', 'Jamie Walters', 'Cindy Fuller', 'James Brady', 'Samuel Franklin Emmons', 'Peter Dervan', 'Samuel Waldo', 'Chris Petersen', 'Greely S. Curtis', 'Julie Goldman', 'Betty Field', 'Jim Dow', 'Kenny Wormald', 'Paul X. Kelley', 'Marie Cosindas', 'Robert F. Bradford', 'Jack Maxwell', 'Patrick Clement', 'John Homans', 'Austin Abbott', 'Daniel Weinstein', 'Hiram Sherman', 'Josiah Quincy III', 'John Weiss', 'David B. Cohen', 'Cynthia Womack', 'Chris Nilan', 'Francis Winthrop Palfrey', 'Arwa Damon', 'Michael Sahl', 'Charles Ammi Cutter', 'Loni Peristere', 'Peter Haskell', 'Denny Sullivan', 'John Butler', 'Charles Francis Adams IV', 'Felicia Pandolfi', 'Marianne Monson', 'Michael MacAllister', 'John Bernard Fitzpatrick', 'George Nolfi', 'Frederick Lewis Allen', 'Ebenezer Stevens', 'Kevin Mackey', 'Robert H. Marsh', 'Mieka Pauley', 'Kit Bland', 'William Worthy', 'Alexander Vershbow', 'George C. Adams', 'Hugh Cabot III', 'Joseph Dennie', 'Joseph P. Kennedy III', 'Blanchard Ryan', 'John Edwards', 'Ned Dowd', 'Charles Bass', 'Paul Carey', 'Joseph L. Kennedy', 'Anne Clements', 'Nat Ayer', 'Joseph N. Hermann', 'George Twombly', 'Warren Wilson', 'Harriot Kezia Hunt', 'James Ingersoll', 'Joseph F. Timilty', 'Andrea Brown', 'Frank M. Mayo', 'Ken Noguchi', 'Cameron Drew', 'Mark L. Wolf', 'Russ Lee', 'Henry Hewes', 'Victoria Arlen', 'Edward Burnett', 'Scott Wolf', 'Alex Cobb', 'Arthur Fiedler', 'Charles Savage Homer', 'John A. Keliher', 'Paul G. Tremblay', 'Eddie Pellagrini', 'Edwin Francis Carpenter', 'Joseph Cushing Edmands', 'Dorian Cheah', 'Babe Paley', 'Christopher Randolph', 'Charles Brenner', 'Robert Lanza', 'James Lloyd', 'Colm Feore', 'George Eustis, Sr.', 'Roswell Farnham', 'Juliet Polcsa', 'James G. Carr', 'David Rieff', 'Richard Whitney', 'Nicholas Lapolla', 'Ryan Patrick', 'Peter Gammons', 'Mario Roccuzzo', 'Edmund MacDonald', 'Chris Julian', 'Jonathan Kozol', 'Charles Amos Cummings', 'Jane K. Cleland', 'John Phillips', 'William M. Whidden', 'Brian J. White', 'Patrick Renna', 'Jason Solowsky', 'David Crouse', 'Bill Scheft', 'Myron Fuller', 'Tony Levin', 'Courtney Cronin', 'Nathaniel Niles', 'Charles Sumner Hamlin', 'Jack Hagerty', 'Joseph Wightman', 'Lucius Manlius Sargent', 'Chris Rooney', 'Henry Sherman Boutell', 'Craig Ross Jr.', 'Stefan Jackiw', 'John Tortorella', 'Erika de Lone', 'Stephen D. Macmillan', 'Donald De Lue', 'Mel Kendrick', 'Michael Emberley', 'Kimmie Johnson', 'Carlos Castillo', 'Peter Weinberg', 'G.P. Huntley Jr.', 'Molly Birnbaum', 'Jujubee', "Edward John O'Dea", 'Henry Hope', 'Ray Benzino', 'Melvin Johnson', 'Roger Caron', 'Alan Solomont', 'Leone Lane', 'Wilmar H. Shiras', 'Najla Said', 'Samuel Breck', 'H. C. Robbins Landon', 'Sean Sullivan', 'John Copley, 1st Baron Lyndhurst', 'Barbara Cassani', 'Frank Knox', 'Norma Farber', 'John Herlihy', 'Frederick Bradlee', 'Dorothy Iannone', 'Annette Neigut', 'Amos Elkana', 'John Mulhern', 'Michael Kelly', 'John Singleton Copley', 'Rebecca Eaton', 'Stephen A. Higginson', 'John Souther', 'C.J. Bennett', 'Jon Kleinberg', 'Dick Elliott', 'Jeff Miller', 'Shar Jackson', 'Barbara Epstein', 'Richard J. Green', 'Maurice Starr', 'Henry Hornblower II', 'Jewelle Gomez', 'Alexandra Neil', 'Henrietta Benson Homer', 'Dorothy Morkis', 'Joseph Nathaniel French', 'Richard McGonagle', 'Susan Athey', 'William Edward Story', 'Royall H. Switzler', 'Cameron Russell', 'William Finn', 'Nancy Benoit', 'Sidewalk Sam', 'Sonny Stitt', 'Chris Dwyer', 'Jim Nollman', 'Paul Edward Plunkett', 'Natalie Trundy', 'George V. Brown', 'J. Wiley Edmands', 'George Wein', 'Raymond P. Moore', 'Yazmany Arboleda', 'Jerry M. Allen', 'John Flerlage', 'Isabel Florence Hapgood', 'Robert Shalhoub', 'Michael Whalley', 'Kahlil Gibran', 'Sean Kenney', 'George von Lengerke Meyer', 'Ned Rothenberg', 'Nicole Craig', 'George Mack', 'A. Austin Tate', 'Tim Story', 'Robert Fields', 'Jonathan Jackson', 'Regina Carrol', 'F. Van Wyck Mason', 'Curran Oi', 'Don Parsons', 'George Weller', 'Victoria Yin', 'Dick Mills', 'Abbott Lawrence Rotch', 'Ammiel Alcalay', 'Manny Delcarmen', 'Colin Cheney', 'Sheldon Brown', 'Thomas Dwight', 'Miah Murray', 'Kenneth W. Dam', 'Joseph Francis Maguire', 'Anthony Lapsley', 'Ruth Carol Taylor', 'Cosma Shalizi', 'Joshua Hall Bates', 'John James Doran', 'James Petras', 'Maressa Orzack', 'Margaret Green Draper', 'Busty Heart', "Paul O'Keefe", 'Julie Herne', 'Bernard Zilinskas', 'Nathaniel Willis', 'Susan Cabot', 'John H. James', 'Haskell Barkin', 'Phoebe Atwood Taylor', 'Ted Dewan', 'Susan Bottomly', 'Steven Kleiman', 'Susan Howe', 'Francis Boott', 'Jesse Heiman', 'Frances Hamerstrom', 'David Lee Valle', 'John Goetchius', "Stephen O'Reilly", 'Yasmin Siraj', 'Edmund A. Walsh', 'Jonathan Anthony Field', 'Elizabeth Boott', 'Tim Sweeney', 'Eleonora Sears', 'Rob Martino', 'Ephraim Wales Bull', 'Noah Feldman', 'Barbara Delinsky', 'Henry F. Teschemacher', 'Brian Marlow', 'William J. A. Bailey', 'Tracy Bonham', 'Nick Jandl', 'Ben Graves', 'Timothy B. Dyk', 'Beth Howland', 'Alexander Watson', 'Touré', 'Carmen Filpi', 'Peter Bynoe', 'Roy Doliner', 'William M. McVey', 'Robert Christopher Anson, Sr', 'Ruby Braff', 'Edward B. Cole', 'Mr. Lif', 'Kurt Burk', 'Conrad Marca-Relli', 'William J. Le Moyne', 'James A. Gallivan', 'Josephine St. Pierre Ruffin', 'Howard Forinton', 'Joe Leahy', "Sean O'Brien", 'Nathaniel M. Allen', 'Biz Stone', 'Christine Elise', 'Casey Desmond', 'Carroll Quigley', 'Albert K. Cohen', 'Warren Rudman', 'TJ Norris', 'Charles B. Cory', 'Bill Curley', 'William J. McCarthy', 'Benjamin Vaughan Abbott', 'Max Pross', 'Jack Lesberg', 'Mike Sullivan', 'Joshua Fineberg', 'George Goldthwaite', 'Bill Cooney', 'William Newell', 'Larry Francer', 'Cosmo Sardo', 'Moe Dalitz', 'Sean McDonough', 'Gerald Milton', 'Neria Douglass', 'Arnold Hague', 'Paul Zoll', 'Gladys Walton', 'Will Rogers', 'J. Bradford DeLong', 'Roland Winters', 'David Norrie', 'Stephen Anable', 'Ron Stone', 'Bob Quinn', 'Lillie P. Bliss', 'Fred Richmond', 'Dan Kiley', 'George David Woods', 'Allen McCarthy', 'Bruce Hunter', 'Melinda Renee', 'James LaRosa', 'William Henry Channing', 'John Goffe', 'Edith Gardener Shearn', 'Jo Jo Laine', 'Callie Thorne', 'Gordon K. MacLeod', 'George Leigh', 'Anthony T. Shtogren', 'Matthew Wauhkonen', 'Lois Ayres', 'Jennifer Struk', 'Arthur Baker', 'Harry Burkhardt', 'Lowell Davidson', 'Jane Ira Bloom', 'Edward Tuckerman', 'Jeff Austin', 'John Snyder', 'Jonathan Tucker', 'Franco Trombino', 'Scepticism in law', 'Muriel Rahn', 'John Herbert Alger', 'Michael F. Flaherty, Sr.', 'Erik Betts', 'James Donnelly', 'Harold Barlow', 'James Read Chadwick', 'Irving Siders', 'Joseph P. Hoar', 'Sandra Faber', 'Helen Carey', 'Brian Fox', 'David Ochterlony', 'Sarah Parsons', 'L Peter Deutsch', 'John Howard', 'Roland Anderson', 'Francis Ellingwood Abbot', 'James Remar', 'Alexander Perls', 'Susan Porro', 'Erna Lazarus', 'David Linsky', 'Horatio Storer', 'Joe Zapustas', 'George C. Homans', 'Kathleen McCree Lewis', 'Maggie Hassan', 'Louise Brigham', 'Frank Gallop', 'Elmer Ernest Southard', 'Dana Barros', 'James Horton', 'Joseph L. Melnick', 'Darren Turcotte', 'James MacGregor Burns', 'Bill Mills', 'Samuel Cooper', 'Paddy Duffy', 'Nathaniel Carl Goodwin', 'Ron Kuivila', 'Anne Twomey', 'Benjamin John Parrillo', 'John Murray Spear', 'Dave Zeltserman', 'Charles Warren', 'Elodie Pong', 'David Louis Band', 'Isadore Twersky', 'Nicole Raczynski', 'Johnny Ryan', 'Prince Charles Alexander', 'Tom Earley', 'Bertram Ellis', 'Alvin Langdon Coburn', 'Sixto Durán Ballén', 'Will McDonough', 'Charles Furneaux', 'Michelle Thomas', 'Peter Carruthers', 'Arthur Curley', 'Frankie Shaw', 'Charles Edward Wyzanski, Jr.', 'Daniel Jarrett', 'Steven Klein', 'Mike Nugent', 'Oliver Winchester', 'Sam Jones III', 'Peter Rowan', 'Phoebe Carrai', 'Arthur R. Curtis', 'Sargent Claude Johnson', 'Charlie Mariano', 'Chester B. Fernald', 'Susan Tedeschi', 'Eliot Noyes', 'Anne Warner', 'James Driscoll', 'Charles Sellon', 'Susie Abromeit', 'Bobby Buckner', 'Karl Gerhardt', 'Kate Lane', 'Al Carmichael', 'Joseph R. Levenson', 'Frank Blake', 'Deborah Howe', 'Deborah Mourey', 'Philip Greeley Clapp', 'Ronald Ludington', 'Francis Parkman', 'Jimmy Patsos', 'Robert Beaser', 'Robert Emmons', 'Francisco Goldman', 'Frances D. Fergusson', 'Chris Garneau', 'Murray Yeats', 'Richard H. Holm', 'Robert Vincent Daniels', 'Ed Callahan', 'Judith Cowin', 'Madison Ford', 'Leonora Bilger', 'Elliot Richardson', 'Barry Goudreau', 'Sid Ramin', 'Tison Street', 'Clifford Jarvis', 'Adams Sherman Hill', 'Tyler Jewell', 'Julie Allan', 'Ed Wineapple', 'Emily Greene Balch', 'Michael Neimkin', 'Milton Halberstadt', 'Samuel P. Spear', 'Sarah Kemble Knight', 'Peter Siragusa', "Mike O'Malley", 'Jonathan Belcher', 'Robert S. Capers', 'Jerry Bergonzi', 'John Thompson III', 'Edd Hall', 'Frederick S. Neilon', 'Korczak Ziolkowski', 'Henry Simmons Frieze', 'Grace Perkins', 'John Hallowell', 'Patti B. Saris', 'Theophilus Parsons Chandler, Jr.', 'Philip Nichols, Jr.', 'Mariska Aldrich', 'Christopher Gore', 'Freeman Gill', 'Charles Francis Adams, Sr.', 'Julie Belaga', 'Veronica Giguere', 'Hakim Jamal', 'Sally Price', 'Mahlon Hoagland', 'Mason Sears', 'Joseph Francis', 'Michael McShane', 'Cotton Mather', 'John W. Schoen', 'Ken Farnell', 'Burton Dreben', 'Samuel M. Pook', 'Horace Gray', 'Peter T. Zarella', 'Steve Baker', 'Lew Rockwell', 'Donald Schön', 'Richard Storrs Willis', 'Vincent Pepi', 'Jes Staley', 'Joseph R. Sicari', 'Adam Alleca', 'David L. Webster', 'William Starling Burgess', 'Sedley Brown', 'Al Taylor', 'Ford Pier', 'William Troy', 'Rolf Benirschke', 'Matia Karrell', 'Edward M. Kennedy, Jr.', 'Mike Matarazzo', 'Edward H. Gibson', 'Johnny Contardo', 'Sel Vitella', 'Anthony Magro', 'J.L. Frothingham', 'Charles F. Hurley', 'Eddie Cutanda', 'Aaron Paternoster', 'Taylor Stanley', 'Arthur Asahel Shurcliff', 'James Vorenberg', 'Billie Lawless', 'Charles Wilson', 'George Hill', 'Julie Kane', 'Stephen Dunham', 'Donald Foley', 'Aliya Jackson', 'Martha P. Haynes', 'Edwin Lord Weeks', 'Lance Greene', 'Samuel Krafsur', 'Lenny Baker', 'Charles Edward Adams', 'Jack Reilly', 'Harold Jefferson Coolidge, Jr.', 'Jasmine Guy', 'Elaine Showalter', 'John Rennie', 'Robyn Peterson', 'Anna Adams Gordon', 'David Blatt', 'Phillip Truex', 'Marie Ames Byrd', 'David Merkow', 'Robert DeCourcy Ward', 'Roger Wolcott', 'Teresa Norton Wolverson', 'James Jackson Putnam', 'Morton Prince', 'Amy Stroup', 'Charles Einstein', 'Edward Robinson', 'Marita Bonner', 'Hayes Gordon', 'Frank J. Scannell', 'Jim Zyntell', 'George Jung', 'Black Francis', 'Daniela Ruah', 'Dan Long', 'John Andrew Sullivan', 'Catherine C. Blake', 'Michelle Gunn', 'Henry Barber', 'Andy Morse', 'Lawrence Sampson', 'Burleigh Cruikshank', 'Charles William Eliot', 'Frederick Goddard Tuckerman', 'William Joseph Snelling', 'Lev Yilmaz', 'Frank Ross', 'Donal Fox', 'Lilla Cabot Perry', 'John Quincy', 'Paul Roazen', 'Nova Spivack', 'Joe Walsh', 'Jeanie MacPherson', "Nancy O'Meara", 'Edith Fellows', 'Harry Kemelman', 'Brooks Otis', 'Evan Dando', 'Stephen Ratcliffe', 'Francis A. Sullivan', 'Robert F. McDermott', 'Art Richardson', 'Pasquale Caggiano', 'Richard Wernick', 'Jonathan Samson', 'Jim Renner', 'Henry Pelham', 'Ryan Whitney', 'Roy Karch', 'George Fingold', 'Bradford Hill', 'Nosson Zand', 'Allison Janney', 'Alfred Church Lane', 'Brainerd Duffield', 'Dale Resteghini', 'William Thaddeus Coleman III', 'Joseph Potasnik', 'Greg Burke', 'Jay Corcoran', 'Cyril Ring', 'Vanessa Kerry', 'David Lamb', 'Clay Dreslough', 'Robin Moore', 'Greg Selkoe', 'David Lovering', 'George Fabyan', 'Jonathan L. Halperin', 'Thomas Curtis', 'William Sadler', 'Jon Foster', 'Leonard Jarvis', 'Ethan Vogt', 'Nat Hentoff', 'Harvey Mason, Jr.', 'Topper Carew', 'Bill Laimbeer', 'Doug Carlston', 'Elisabeth Subrin', 'Thomas Gold Appleton', 'Charlie Holmes', 'Jason Yee', 'Paul Ainsley', 'George Albert Frost', 'Ellen Becker Gray', 'Edward Charles Pickering', 'Gretchen Donlan', 'Joseph Bradford Diamond', 'Michael James', 'Andrea Barrett', 'Ned Havern', 'Homie Doroodian', 'Myles Connolly', 'McGeorge Bundy', 'David Sutherland Nelson', 'Joseph Nassise', 'Henry Gardner', 'Robert B. Rheault', 'Ed Crane', 'Michael Sullivan', 'Deborah Ann Henderson', 'Marjorie Harris Carr', 'John Greenwood', 'Kelly Lange', 'John Francis Kennedy', 'Jonathan Cohler', 'Jack Burns', 'Alice Parker', 'Omega Red', 'Dick King', 'Alex Karalexis', 'Hettienne Park', 'Harrison Gray Otis', "Aoife O'Donovan", 'Bill Chase', 'Jack Daley', 'Ed Richards', 'Laurence Dreyfus', 'Miss Lasko-Gross', 'Mario Treadway', 'Jeanne Robinson', 'Gloria Fox', 'George Minot', 'Anthony Shriver', 'Amy Farrington', 'Bjorn Poonen', 'Tyler Faith', 'Jimmy McHugh', 'Matthew Brooks', 'Thomas Melvill', 'David Plowden', 'Andy Pratt', 'Virginia Belmont', 'Tim Huntley', "Brian O'Leary", 'Michael Gould', 'David Rapaport', 'Peggy Cass', 'Thomas Patrick Thornton', 'Ashley C. Williams', 'John Brockman', 'Sal Bartolo', 'Franklin Stahl', 'Robert Charles Winthrop', 'George B. Seitz', 'Jeff Kline', 'Margaret Ruthven Lang', 'John Frykman', 'Theodore Dehon', 'Kathy Cornelius', 'Caleb Blood Smith', 'George Dickson', 'Abbott Lawrence Lowell', 'Terre Weisman', 'John Jeffries', 'Richard W. Murphy', 'Tommaso Ciampa', 'John Marston', 'Carl Greenberg', 'Philip Goldberg', 'Perle Fine', 'Clayton Nemrow', 'James Seanor', 'Jim Moroney', 'Norman Corwin', 'Vail Bloom', 'William B. Turner', 'Fannie Hillsmith', 'Percy Davis Steele', 'Jake Honig', 'Theodore Kaghan', 'Paul Donato', 'Daniel Pipes', 'Richard M. Karp', 'Lily Halpern', 'Barbara J. Bishop', 'Nathaniel S. Keith', 'Matthew Arnold', 'Jonathan Sewall', 'Tom Gibson', 'Thomas Handasyd Perkins', 'Algernon Sidney Badger', 'Rob Watts', 'Carl Frederick Tandberg', 'Michael C. McFarland', 'Paul West', 'Benn Ferriero', 'Louise Day Hicks', 'Ben Kurland', 'Alexander C. Eschweiler', 'Javier Ortiz', 'Jennifer Chang', 'Russ Jaquith', 'Ruth Sawyer', 'Charles W. Adams', 'Marty Walsh', 'Michael Cohen', 'Grace Paine Terzian', 'Damian Woetzel', 'William Trufant Foster', 'Kate Collins', 'Frederic W. Lincoln, Jr.', 'Harold Berquist', 'Christopher Tilghman', 'James Wells Champney', 'John Sullivan Dwight', 'Joe Bean', 'Eli ""Paperboy"" Reed', 'Daniel Tarullo', 'Alan David Lourie', 'Courtney Yates', 'Kurt Busiek', 'Charles W. Eldridge', 'Brian Duffy', 'Jennifer Coolidge', 'Allie Strobel', 'Jerry Gray', 'Charlie Wolf', 'Ray Perkins', 'Jen Kirkman', 'Russ Bixler', 'Terrayne Crawford', 'Jonathan Williams', 'Linda Atkins', 'William Parker', 'Jerry Sweeney', 'Robert Grant', 'Octavius Brooks Frothingham', 'Glenn Hyde', 'Leo Reisman', 'Guy Lowell', 'Jim Steeg', 'Morgan Faust', 'William Fogg Osgood', 'Marcia Nardi', 'Bob Hansen', 'Roger Adams', 'Herb Hunter', 'Paul J. Gannon', 'Henry L. Eustis', 'Annie Baker', 'Harvey Rosenfield', 'Mel Casson', 'Jack Knight', 'Al B. Sure!', 'Bunny Madden', 'Lucretia Peabody Hale', 'Ed Cotton', 'Bill Brooks', 'Alexandra Boylan', 'Sarah Wentworth Apthorp Morton', 'Eron Otcasek', 'Paul-Henri Campbell', 'Ram Dass', 'Jan Miner', 'Brett Ainslie', 'Phil Napoleon', 'Thomas J.C. Amory', 'Henry Way Kendall', 'Mina Gleason', 'Kevin DeCoste', 'David Wu', 'Sam Murphy', 'Alex McKinnon', 'Richard Wayne Bogosian', 'Maribel Owen', 'Noah Bean', 'Aida Rodriguez', 'Sarah Smith', 'David M. Raup', 'Jude Christodal', 'Una Green', 'Harper MacKay', 'Will H. Bradley', 'George H. Nee', 'Barry Newman', 'Arthur Caplan', 'Mayoralty of Michael Bloomberg', 'Richard Rust', 'Eliot Stellar', 'Wayne Turner', 'Sabrina Lewis', 'Joy Giovanni', 'Jack Epstein', 'Andrew Bujalski', 'Brian Noonan', 'Barbara Mullen', 'Peter Geissinger', 'William Dawes', 'Meshach Taylor', 'Clifford A. Ruberg', 'William Gilson Farlow', 'Richard Frank', 'Matthew F. Jones', 'Tina Thayer', 'Nathaniel Philbrick', 'John J. Corbett', 'Phil Rasmussen', 'Danny Wood', 'Rosemary Mahoney', 'Charles Pickering Bowditch', 'Michael Capuzzo', 'Patrick Ewing, Jr.', 'Alex Shibutani', 'Levi Yitzchak Horowitz', 'Alexander Kuo', 'Dwight York', 'Tom Smith', 'Stanford Luce', 'Calvin Plimpton', 'Richard France', 'Lynne Cox', 'Flora Foster', 'Richard Evans Schultes', 'Sara Wilford', 'Lois Mailou Jones', 'Lizé Santana', 'Barrett Wendell', 'Lauren Koslow', 'Adam Catino', 'Kenneth Kamal Scott', 'Dan Cronin', 'Gus Salve', 'John Boswell', 'James Greenleaf', 'Matthew Sullivan', 'Edward Brodney', 'Joseph Henry Beale', 'Joan Tozzer', 'Khari Wynn', 'Toppsy Curvey', 'Lily Brown', 'Ben Foster', 'Mike Palm', 'Thomas Nöla', 'Arthur Blake', 'Lisa Monaco', 'Myles Kennedy', 'Joseph Abboud', 'Heidi Berry', 'Derek Yuen', 'Warren Entner', 'Francis James Child', 'Steven Burch', 'James Jackson Jarves', 'Steve DiSalvo', 'Elizabeth Brater', 'William Dummer Powell', 'Eliza Lee Cabot Follen', 'William Robert Daly', 'Cynthia Voigt', 'T. A. Barron', 'Richard Saltonstall Greenough', 'Mike Donovan', 'Edward Seaga', 'Alex Grasshoff', 'Florence Chambers', 'Daniel Imperato', 'Jeremy Roenick', 'Stephen Kulik', 'Gardiner Greene Hubbard', "Tanya O'Debra", 'Austin E. Ford', 'Frances Jalet-Cruz', 'John Strohmeyer', 'Wayne Caparas', 'Jack Frost', 'George Clapp Vaillant', 'Laurence Foley', 'Story Musgrave', 'Charles Janeway', 'Frederick T. Moore, Jr.', 'Julian Blaustein', 'Bruce McCandless II', 'Hannah Mather Crocker', 'Justine Greiner', 'C. Allen Thorndike Rice', "Will O'Neill", 'Steven Kozlowski', 'George Robert Twelves Hewes', 'Benjamin Thomas', 'Will Grant', 'Frederic Tudor', 'David Borden', 'Brittany Flickinger', 'Robert Williams', 'Eric S. Raymond', 'Robert Polito', 'Harry Flemming', 'Nick Pellegrino', 'James Morris Whiton Hall', 'Charles Sprague Pearce', 'Jeffrey Sweet', 'Nathan Matthews, Jr.', 'John Terelak', 'Andrea Barnet', 'Marian Hooper Adams', 'Bill Byrne', 'John Dimond', 'Caroline Zhang', 'Joshua Loring', 'Henry Pickering Bowditch', 'Ruth Channing', 'Joe Kearns Goodwin', 'Johnny Indrisano', 'Jeni Zaharian', 'Robert Cutler', 'Jonathan Roberts', 'Frank Elmer Smith', 'Jack Nance', 'Bob Margarita', 'Archibald Bulloch Roosevelt, Jr.', 'Charles Kopelson', 'Nathaniel Taylor', 'Owen Hawk', 'Keisha Tucker', 'Daniel A. Whelton', 'Thomas Dawes', 'Susan Tracy', 'George Whitaker', 'Mike Stern', 'Benny Rubin', 'Bill Keith', 'Patricia J. Williams', 'Alan Wilson', 'Charles Yancey', 'Geoffrey H. Malins', 'Lawrence Hogan', 'Caroline Howard Gilman', 'Henry A. Miley, Jr.', 'Warren Cook', 'Kenny Greer', 'Edward Margolies', 'Annie Adams Fields', 'Makanda Ken McIntyre', 'Samuel Gridley Howe', 'Dorothy Ward', 'Justin Winsor', 'Stephen Davenport', 'John McFarland', 'J. Lester Madden', 'Jane Cowl', 'Don DiNicola', 'Mark Bellhorn', 'Aaron Howland', 'Matt the Knife', 'Samuel Dexter', 'Richard Dysart', 'Arlie Russell Hochschild', 'Bill Wilson', 'Chub Sullivan', 'T. J. Thyne', 'Stephanie Roth Haberle', 'Richard Brodie', 'Elizabeth McCracken', 'Gregory James Berney', 'Alex Wright', 'Bob DeSimone', 'Laurence Schwab', 'Mason Hammond', 'Connie Britton', 'John J. Fox', 'Paulie Gilmore', 'Francis Greenwood Peabody', 'Richard Collier', 'Peter Oliver', 'Corrine Colarusso', 'Judith Merril', 'Jim Wallace', 'Paul Coyne', 'Seth Putnam', 'Oliver Hudson Kelley', 'Michael Bivins', 'Alexander H. Rice, Jr.', 'Edward Holyoke', 'Kevin Weeks', 'John F. Kelly', 'Gretchen Merrill', 'Charles Russell Lowell', 'Jim Flynn', 'Art Smith', 'Becky DelosSantos', 'Marian Walsh', 'Arthur Korb', 'Louise Taft', 'Janet Morris', 'Theodore Lyman', 'Jeremy Bornstein', 'Keith Powers', 'Daniel Warner', 'William Hale Thompson', 'David John Scannell', 'William Bayle Bernard', 'Marc Draisen', 'Henry Van Brunt', 'Thomas W. Ross', 'John Thomas', 'Clifton R. Wharton, Jr.', 'Ed Brawley', 'Sydney Joseph Freedberg', 'Don Mason', 'John F. Parker', 'Elliot Silverstein', 'John McCarthy', 'Ellen Segal Huvelle', 'Stephen Greenblatt', 'Dorothy Davenport', 'Frederick P. Salvucci', "Mike O'Toole", 'Greg R. Fishbone', 'David Riker', 'Andrew Bowen', 'Danny Murphy', 'Charles Gross', 'Thomas Ridgeway Gould', 'Reese Nance', 'Alexandra East', 'Brendan R. Murphy', 'Morgan Dennis', 'Jonathan Salemi', 'Alonzo Edwin Branch', 'Arthur Redden', 'Howard Deering Johnson', 'Leonard Nimoy', 'Chris Bourque', 'William Barton', 'Samuel Wendell Williston', 'Varick Frissell', 'Kate Taylor', 'John Collins Warren', 'Abraham Paul Sarkis', 'A. Bartlett Giamatti', 'Melissa Satta', 'Gaston Bell', 'Jim McCormick', 'Lauren Greenfield', 'William Ward Watkin', 'James Fitton', 'Francis Ford', 'Janet Tashjian', 'West Funk', 'Mike Schwartz', 'Thomas W. Thompson', 'Gaye Symington', 'Larry Donnelly', 'Michael Sands', 'Holden Furber', 'Berj Zamkochian', 'Wendell Phillips', 'James Herbert', 'Henry Lampe', 'Matilda White Riley', 'Philip Rounsevile Alger', 'Gerard Cowhig', 'Jordan Rich', 'Sherman A. Rose', 'Seno Gumira Ajidarma', 'Fred Joseph', 'Charles Sawyer Russell', 'Gary Conway', 'Robert C. Buell', 'Harry E. T. Thayer', 'Kat Corbett', 'Eric Loren', 'David Parks', 'Peter E. Madden', 'Pearl Mary Teresa Craigie', 'Eloise Gerry', 'James W. Hennigan, Jr.', 'Allen Melancthon Sumner', 'Elliot Kaplan', 'Tom Gaudette', 'Steve Bradley', 'Frank Morrissey', "Lauren D'Marie", 'William F. Downes', 'Ai-Cheng Goh', 'Bo Oshoniyi', 'Howard Koh', 'Alexandra Kerry', 'Peter Abrahams', 'Hyman Spotnitz', 'Peter W. Galbraith', 'David Waltz', 'Daniel Laing, Jr.', 'Cornelius Keefe', 'Daisy Davis', 'Edgar Allan Poe', 'Tony Rumble', 'Robert Morris', 'John Marshall', 'George Heyliger', 'Robert Semple', 'Michael Connolly', 'Nancy Pimental', 'Jeffrey Davidow', 'Eleanor Taylor Bland', 'John Connolly', 'Jon Coleman', 'Kahlil Byrd', 'Joe Pellegrini', 'Ion Lewis', 'Joe Celli', 'James Wm. Chichetto', 'David Lindsay-Abaire', 'Laura E. Richards', 'Harriet Hanson Robinson', 'James Steinberg', 'George Li', 'Kid Butler', 'C. Z. Guest', 'Tony Dize', 'Phyllis Potter', 'G Hannelius', 'Chris Sergi', 'Arthur Kennedy', 'Michael Mathiesen', 'Bradford Ropes', 'Leonora Jackson McKim', 'Edward McNally', 'Al DelBene', 'B.Z. Goldberg', 'John T. Bowen', 'Leo Cleary', 'George A. Hibbard', 'Arnold Aronson', 'William M. Evarts', 'Paul Howard', 'Jack Tretton', 'Henry Oliver Walker', 'George Ticknor', 'David Maysles', 'Tommy McCarthy', 'Andrew Oliver', 'Alfred Charles Hobbs', 'John Little', 'Abbott Handerson Thayer', 'Roger Hale Sheaffe', 'Kiara Muhammad', 'Robert W. Upton', 'Charles Fessenden Morse', 'George Loring Brown', 'John E. Powers', 'Ellen Sturgis Hooper', 'Francis E. Kelly', 'Clarke Canfield', 'Misha Collins', 'Dorothy Nelkin', 'Thomas Burke', 'David Burns', 'Thomas Willis Pratt', 'Johanna Fiedler', 'Patricia Knight', 'Adrian Lamo', 'Richard R. Peabody', 'Samuel Wardwell', 'Jeff Tarpley', 'Tomás Francisco Reilly', 'Steve Trapilo', 'Robert Morss Lovett', 'Ray Doyle', 'Jeremiah Dummer', 'Thomas Harcourt', 'Howard Bryant', 'George W. Meyer', 'Alonzo Price', 'Nicholas Christofilos', 'J.C. Bitzer', 'Will Miller', 'Richard Armitage', 'Helen L. Gilson', 'Peter Driben', 'Andy Carvin', 'Linda Dorcena Forry', 'George Aiken', 'Michael Morse', 'James A. Cunningham', 'William Henry Leonard Poe', 'Jonathan C. Osborne', 'John Kelly', 'Lawrence Keyte', 'Joseph H. Walker', 'Danielle DiLorenzo', 'Wayne Massarelli', 'David Porter', 'Joseph Lovering', 'Sidney Homer', 'William Forsyth Sharpe', 'Arvin Chen', 'Max Pavey', 'Emily Mann', 'Edmund Genest', 'Tim Costello', 'Julian Hawthorne', 'Charles McArther Emmanuel', 'Thomas G. Kelley', 'John Patrick Boles', 'Catherine Filene Shouse', 'Robert Winley', 'William Roscoe Thayer', 'A. J. Godbolt', 'Peter Wylde', 'William E. Hurley', 'Cleon Daskalakis', 'Carolina Barco', 'Ellen Hinsey', 'Rayya Makarim', 'Ellen R. Marram', 'Robert Zildjian', 'Patrick Carroll', 'Scott Wheeler', 'Sumner Redstone', "Lawrence O'Donnell", 'Jason Richard Miller', 'John Rusher', 'Ed Sprague, Sr.', 'Franklyn Farnum', 'Isaiah Thomas', 'Roxxy Rush', 'Gamaliel Bradford', 'Lorna Thayer', 'Alfred W. Crosby', 'Jere Shea', 'John A. Rizzo', 'Ryan Edell', 'Gertrude Maitland', 'Robert Berks', 'Lester Dorr', 'Lauren Crasco', 'Sarah Lamb', 'Mike Ladd', 'Jennifer Jostyn', 'William Murphy', 'Ezra Palmer Gould', 'James Halligan', 'Arthur Cheney Train', 'Frederick Wiseman', 'Bobby Donaldson', 'Joe Gordon', 'Christa McAuliffe', 'Lea Wait', 'David Hurwitz', 'Horatio Greenough', 'John A. Collins', 'Caspar Crowninshield', "Meredith D'Ambrosio", 'Angelina Weld Grimké', 'Elaina P. Schulman', 'Wally Peterson', 'J. Edwin Brown', 'William Stowell', 'Joshua Winget', 'Robert Kelly', 'Marianne Leone Cooper', 'Tony Gaffney', 'Rachel Bissex', 'Candace Allen', 'Liam Waite', 'Mack Maloney', 'Jonathan Mason', 'Jack Palladino', 'Eddie Mottau', 'Christine Griffin', 'Jerry Maren', 'Tom Werman', 'Kevin Kate', 'John William McCormack', 'Barry Brown', 'Mary Gaines Bernard', 'Alex Schemmer', 'Naomi Benaron', 'Winslow Homer', 'Lelia J. Robinson', 'Jason Horgan', 'Joe Coleman', 'John LoVetere', 'Ricky Ford', 'Joanne Simpson', 'Frederick M. Zollo', 'Benjamin Franklin', 'Caris Corfman', 'Ned Chaillet', 'VJ Lucky', 'Abby May Alcott', 'Jim Coburn', 'Claude Davidson', 'Francis Russell', 'Connie Martinson', 'Bill Gillis', 'Stephanie Braxton', 'Robert J. Shillman', 'Henry Morton Robinson', 'Deborah Warren', 'Zoe Yin', 'Dorothy West', 'Deborah Copaken Kogan', 'Nietzchka Keene', 'Harry Harding', 'Percival C. Pope', 'Mel King', 'Jack DeSena', 'Iyeoka Okoawo', 'Matt Tavares', 'George F. Hammond', 'Walter Gilbert', 'Leslie H. Martinson', 'Aidan Mitchell', 'John Joseph Williams', 'Jim Bowden', 'Pauline Frederick', 'Bill Cunningham', 'Pat Hartnett', 'Dorothy Quincy', 'Michael G. Bellotti', 'Kevin Garant', 'Joe Casey', 'Tom Barrasso', 'Charlotte Saunders Cushman', 'Elliot Norton', 'Michael J. McEttrick', 'Ron Polk', 'Eric Littmann', 'Mary Stolz', 'Reed A. Albee', 'Arthur Cantor', 'Phil Hale', 'Stuart  McNay', 'Malcolm A. MacIntyre', 'Anthony Fiato', 'David Ian Salter', 'Marjorie Schwarzer', 'Chuck Pfarrer', 'William B. Colleary', 'Kaitlin Clark', 'Peter Harris', 'Ben Davis', 'Jesse Freidin', 'Henry Oliver Hansen', "Robert M. O'Neil", 'Michael L. Iaccarino', 'John T. Prince', 'Ralph Ince', 'Maturin Murray Ballou', 'Charles A. Coolidge', 'Geoffrey Sayre-McCord', 'Dave Bean', 'Allan Nixon', 'Fred McCarthy', 'Sir Isaac Coffin, 1st Baronet', 'Elisha Collier', 'Michael E. Doyle', 'Peter E. Costello', 'Roland Alexander', 'John Olin', 'Harley Yanoff', 'A. David Lewis', 'David Browning', 'Ryelle Rondo', 'Charles R. Codman', 'Henry James', 'Edward D. Townsend', "Damian O'Flynn", 'Thomas R. DiBenedetto', 'Leif Tilden', 'Charles W. Turner', 'Charles-Edward Amory Winslow', 'Edward P. Barry', 'Jane Liddell', 'Zander Cannon', 'John Amaechi', 'Barry Locke', 'Sylvia Edwards', 'James Barnes', 'Lukas Biewald', 'Gerry Connolly', 'Jonathan Collier', 'Clara Endicott Sears', 'Alexander Mackendrick', 'Matthew Harkins', 'Richard B. Wigglesworth', 'William C. Durant', 'Peter Rodman', 'Big Shug', 'Samuel Lancaster Gerry', 'Hank Garrity', 'Dexter W. Draper', 'Malcolm Margolin', 'Thomas A. Flaherty', 'Edward Erie Poor', 'Philip Weiss', 'Clark Gregg', 'Yvonne Jung', 'Janet Daley', 'Bob Bigelow', 'Milt Raskin', 'Bruce Pearl', 'Marcia Hines', 'Linda Carol', 'Samantha Turk', 'Bob Taft', 'Sidney Sugarman', 'Herbert L. Strock', 'Lee Kinsolving', 'James Lovell', 'Sumner Paine', 'Clemens Herschel', 'David Viscott', 'William C. Hammond', 'Tony Fryklund', 'Tom Ahearne', 'Lake Dawson', 'Fred Ahern', 'Lou Breslow', 'Thomas Coffin', 'Martha Coffin Wright', 'Charles Edward Coffin', 'John A. Canavan', 'Tom Finnegan', 'Frank Stearns', 'Ward Nicholas Boylston', 'Gustaf Sobin', 'Martha Hackett', 'Lucianne Goldberg', 'Jeff Bagwell', 'Maria Cole', 'George Adams Leland', 'Thomas Hubbard Sumner', 'Makoto Fujimura', 'William C. Prout', 'Charles Jackson Paine', 'Roberta McMillan', 'William Davis Merry Howard', 'Robert Drinan', 'Ruth Orkin', 'Charles A. Dinarello', 'Adam Prout', 'Jeanine Heller', 'Ed Herlihy', 'Joey Ray', 'Evelyn Parnell', 'William Lyman Underwood', 'Charles Chapman Grafton', 'John R. McNamara', 'Elliott H. Lieb', 'Charles K. Tuckerman', 'Robert M. Webster', 'Andrew Frisardi', 'Benjamin F. Haines', 'Frances Wayne', 'Al Pierotti', 'Bruce Ayers', 'Alessandra Stanley', 'Kerry Joyce', 'Jane F. Barry', 'Joseph P. Kennedy, Sr.', 'Ana Castellanos Fortin', 'John Ciardi', 'Merton Miller', 'William Joseph Hill', 'Aviva Chomsky', "Brian O'Hara", 'Dan Cotter', 'Bruce Pirnie', 'Ben Harvey', 'Charles Colson', 'Joe Boyd', 'Peter MacKenzie', 'David Bossie', 'Samuel Eliot Morison', 'Henry Burbeck', 'Paul A. Dever', 'Alberto J. Mora', 'Opus Moreschi', 'Deborah Martin', 'George Cabot Lodge', 'Thomas Downey', 'Jonathan Draper', 'Pamela Sneed', 'Leon Adams', 'Ben Tolpin', 'Arnold Chun', 'Jimmy Macullar', 'Godfrey Lowell Cabot', 'Warren Tolman', 'John G. Heyburn II', 'George Patrick Welch', 'Jacob Bannon', 'David Walton', 'Joe Chiccarelli', 'Stuart Milligan', 'Paul Madden', 'Gracie Lane', 'Timothy Dowling', 'George Lyman Kittredge', 'Leech', 'Thomas Cushing', 'Paul D. Harkins', 'Josh Marchette', 'Murder of Samantha Runnion', 'Edna Foster', 'Billy Tibbetts', 'Victor J. Nickerson', 'George Patton IV', 'Jim Fahey', 'Brooke Frieling', 'Walter Russell', 'Christine Frederick', 'Paul Irving', 'William Sweeney', 'Aaron Kelton', 'Percy Jewett Burrell', 'Bob Elliott', 'Walter Lonergan', 'Jeremy Brigham', 'Ed Singer', 'Cheryl Harris', 'Robert Coles', 'Priscilla Morrill', 'Charles F. Sprague', 'Kivie Kaplan', 'Will Dailey', 'Brendan McCarthy', 'Nate Dushku', 'Seth Priebatsch', "Joseph T. O'Callahan", 'Anne Nagel', 'Lisa Edelstein', 'Leah Foster', 'J. Michael Houston', 'Kirk Boott', 'Celia Calle', 'Samuel Atkins Eliot', 'Henry B. Richardson', 'Arnette Lamb', 'Paula Hyman', 'Chris Burden', 'Michelle Gorgone', 'Estar Banks', 'Eliot A. Cohen', 'Keith Dunn', 'Gelett Burgess', 'Robert Bernard Hall', 'James M. Murphy', 'Duncan Ball', 'Sam Cohan', 'Allen Zadoff', 'Virginia Harned', 'Albert Augustus Pope', 'Jane Toppan', 'Kevin White', 'Salvatore Santone', 'Howard P. Boyd', 'Thomas Sherwin', 'Josh McGuire', 'Charles Theodore Dotter', 'Karl Paymah', 'George Lymburn', 'John Bergh', 'Oliver Wendell Holmes, Jr.', 'Arlene Francis', 'Christopher Lydon', 'Herbert N. Maletz', 'John Gilpin Heyburn II', 'Patricia Goedicke', 'Isaac Greenwood', 'Jared Diamond', 'Dick Sudhalter', 'Ruth Provost', 'Dechen Thurman', 'Jonathan L. Austin', 'Allen Hoskins', 'John Benedetto', 'Cornelia Nixon', 'Victor Guillemin', 'Eben Ezra Roberts', 'Samuel Hubbard Scudder', 'Jack Burke', 'Al Lee', 'Caitlin Bilodeaux', 'Lexi Love', 'Norman Foster', 'Christine Cameron', 'Anna Minot', 'Emily  Cook', 'Pike Johnson', 'Frank Wayne', 'John E. Sununu', 'LaVon Hardison', 'Joseph Francis Scott', 'Jeremy Klavens', 'Priscilla White', 'Steven Karidoyanes', 'Joe Nash', 'William Lobkowicz', 'Roger Myerson', 'James D. Morgan', 'Tasha Tudor', 'Irene Sharaff', 'Kaleil Isaza Tuzman', 'William Stanley Braithwaite', 'Richard E. Lyons', 'Robert A. Vinal', 'James Colt', 'Walter Colmes', 'Tyrone D. Burton', 'William Landay', 'Will Blalock', 'John Enos III', 'Wallace Tripp', 'Virginia Walker', 'Vaughn Taylor', 'George Herbert Palmer', 'George Garzone', 'Temple Grandin', 'Nicolai Ouroussoff', 'Peter Walker', 'George Marion Jr.', 'Amy Steinberg', 'Marcella Boveri', 'Fred Newman', 'Eileen Rose', 'Melanie Lambert', 'Robert Edward Mulvee', 'John T. Noonan Jr.', 'Donald Moffitt', 'William Croswell Doane', 'John C. Cremony', 'Kitty Carruthers', 'Steve Tello', 'Casey Walters', 'Marvin Olasky', 'Ted Drury', 'John Lowell', 'Peter Cushman Jones', 'Curtis Guild, Jr.', 'George Henry Sanderson', 'Jimmy Brogan', 'George D. Murray', 'Ron Lee', 'Marc London', 'Dale Bozzio', 'William Henry Pickering', 'Arthur Dehon Little', 'Herbert P. Wasgatt', 'Fandango', 'John Smith', 'Serge Chaloff', 'Sam Handel', 'Georgia Lyman', 'John R. Ross', 'Richard N. Goodwin', 'Don Gilman', 'Frances Sargent Osgood', 'Louis Kafka', 'Jonathan Kale', 'James A. D. Richards', 'Peter McNeeley', 'Frank Wigglesworth Clarke', 'Joseph Pilato', 'Archibald Cary Coolidge', "Lorraine O'Grady", 'Paul Ryan Rudd', 'Jane Langton', 'Gilman Rankin', 'John Callender', 'Alyssa Fong', 'Vincent Dethier', 'William Farnum', 'John Collins Warren, Jr.', 'Harriet Hallowell', 'Thomas Smith Webb', 'Helene Johnson', 'Dexter Perkins', 'Albert Pike', 'Mimi Stillman', 'Larry Stroman', 'William Phillips, Jr.', 'Christopher George Kennedy', 'John Torchetti', 'John Gerstad', 'Gregory Deyermenjian', 'Michael Ryan', 'Sean McGuirk', 'Deborah Lurie', 'Henry E. Turner', 'Bob Durgin', 'Jack Haley', 'P.J. Marino', 'Amy Hunter', 'Frank McCourt', 'Sean Gannon', 'Benjamin C. Bradlee', 'Augustus Lowell', 'Abraham M. Halpern', 'James Bennet', 'Dorothy Loudon', 'John Elliot Cowdin', 'Emma Nutt', 'Danzy Senna', 'Bruce Line', 'Gotham Chopra', 'Charles Flaherty', 'Eugene Fama', 'William H. Blanchard', 'Ed Cotter', 'Jim Hodder', 'Tara VanDerveer', 'Stephen R. Fox', 'John Fenno', 'Jill Quigg', 'John Lothrop Motley', 'Paul Calello', 'Ann Smith Franklin', 'Antoine Bello', 'Amy Vincent', 'Peter R. Orszag', 'David Bowes', 'Julian Jenkins', 'Daniel Goldhagen', 'Herman Young', 'Philip Grosser', 'Al Maginnes', 'John Michael Higgins', 'Guru Ganesha Singh Khalsa', 'James Cutler Dunn Parker', 'Peg La Centra', 'George Willis', 'John Thayer', 'Henry Adams', 'Norman B. Leventhal', 'William Dandridge Peck', 'Donna Loren', 'Elizabeth Cabot Agassiz', 'C. Lee Tocci', 'Jerome Grossman', 'David Nyhan', 'Gerard Alessandrini', 'McElbert Moore', 'Frederick C. Anderson', 'Edward J. McCormack, Jr.', 'Earl Douglas', 'James Jackson', 'Benjamin Hallowell Carew', 'Marty Shay', 'Paul English', 'Nick Baker', 'Lee Marks', 'Neil Burgess', 'James N. Wood', 'Janet Fish', "Thomas P. O'Brien", 'Maya Massar', 'John Andrew Barnes, III', 'Robert H. Rines', 'Henry-Russell Hitchcock', 'James Feeney', 'Peter Brash', 'Henry Gilman', 'Elizabeth Sewall Alcott', 'Caroline Botelho', 'Richard Herd', 'Joseph Levis', 'Lauren Elliott', 'Dick Dale', 'Demetris Nichols', 'Herbert P. Bix', 'Alfred Browning Parker', 'R. H. Quaytman', 'Albert Henry Munsell', 'Carl McCall', 'Josh Roseman', 'Meg Rosoff', 'Joseph Allen', 'Raymond Griffith', 'Myrtle Anderson', 'Lauren Jones', 'Anthony Thomas', 'Andrew Corkin', 'Maxime Bôcher', 'Matthew Neutra', 'Katherine Stewart', 'Dana Bullen', 'John Gough', 'Stu McNay', 'Abraham Edwards', 'Elliot Koffman', 'Ryan Stoute', 'Sara Agnes Mclaughlin Conboy', 'Anthony J. Carson', 'LeVelle Moton', 'Tabitha St. Germain', 'Harold Nelson', 'Alexey Mohr', 'George Wyner', 'Margaret Mills', 'Clarence W. Barron', 'Shubal Stearns', 'P. T. Deutermann', 'Kenneth Roman', 'Alexandre Rockwell', 'Albert Sacco', 'Frederick C. Murphy', 'Brendan Neutra', 'William Hooper', 'John Seymour', 'Samuel Joseph May', 'Nicholas Raymond Cerio', 'Rusty Stevens', 'Joan Sullivan Wilson', 'John Neagle', 'Keith Fulton', 'Mahogany Music', 'Esther Bell', 'Michael Landers', 'Taylor Schilling', 'Joseph Dello Russo', 'Norma Connolly', 'Steven Walsh', 'June Anderson', 'Wilhelm Berger', 'John Paine', 'Mike Tompkins', 'Susan Minot', 'Paul Mockapetris', 'Cathal Pendred', 'Matt Murray', 'Jeff Queen', 'Marilyn R. Goldwater', 'Anton Leader', 'Stephen Lynch', 'Mike Collins', 'Alem Brhan Sapp', 'Charles Stransky', 'Mark Andrew Green', 'Miles Crowley', 'Allan Churchill Butler', 'Billy Porter', 'William Verstille', 'Steve Dignan', 'Charles Francis Adams, Jr.', 'Linda Watkins', 'Ed Rollins', 'Linda Gaboriau', 'Thomas Finneran', 'Abigail Johnson', 'Vincent Connare', 'Frank T.O. Walker', 'Turk Farrell', 'Thomas R. Vozzella', 'Dory Lobel', 'David Shiner', 'William Logan', 'Louise Lorimer', 'Wendell Thompson Perkins', 'Ward Costello', 'Julia Glass', 'Joe Derrane', 'Noel Gourdin', 'Joseph W. Smiley', 'Josiah Quincy II', 'Rob Morris', 'Michael J. Connolly', 'Lisa Harrison', 'Helen Strickland', 'Isaac Bradford', 'Susan Lyne', 'Lisbeth Scott', 'Harrison Gray', 'Bill Lichtenstein', 'Benjamin Apthorp Gould', 'Chris Gamble', 'Therese Murray', 'Blanche Ring', 'Kevin Sullivan', 'Pat Leahy', 'Marc Rotenberg', 'Rai Tasco', 'Mike Slattery', 'Frederick Hartt', 'Derick K. Grant', 'Bernard Robichaud', 'Joseph F. Dunford, Jr.', 'David L. Gunn', 'Jack Beatty', 'Nicholas M. Marino', 'Martha Cahoon', 'Jacquelyn Piro Donovan', 'Julian Sturgis', 'Barbara Walters', 'Bruce Sinofsky', 'David Ian', 'Randy Wayne', 'Larry Vincent', 'Mary Carlisle', 'James T. Austin', 'Elizabeth Metayer', 'Henry Bryant Bigelow', 'Nick Sagan', 'Karen Kondazian', 'John Treadwell Nichols', 'James R. Quirk', 'Jerry Hurley', 'Courtney Kennedy Hill', 'Amy Zimmerman', 'Andrea Kalin', 'Carolyn R. Bertozzi', 'Samuel Eliot', 'Kathy Davis', 'Albert Angus Turbayne', 'Irving Fine', 'Alex Wexo', 'Heather Fogarty', 'Boyce F. Martin, Jr.', 'John Slattery', 'Brian Scannell', 'Sonia Chang-Díaz', 'Norm Prescott', 'Robin Lamont', 'Neil Asher Silberman', 'Richard Chandler', 'Nancy Garden', 'Patrick J. Kennedy', 'Lucy Toulmin Smith', 'Ezekiel Bacon', 'Ruth Weston', 'Caleb Emerson', "Sara Sant'Ambrogio", 'Howard Phillips', 'Jon Zack', 'Forrester Clark', 'Charlotte Gilbertson', 'Chris Maden', 'Paul Caponigro', 'James Franklin', 'Kenny Delmar', 'Thurston Hall', 'Jacob Slichter', 'Theodore D. Mann', 'Robert Lowell', 'Chuck Essegian', 'George Peter Alexander Healy', 'Solomon Stoddard', 'Edward J. Meagher', 'Kempster Blanchard Miller', 'Robert Gould Shaw', 'Adeline Dutton Train Whitney', 'Harold McDevitt', 'Walter L. Cutler', 'James Spader', 'Benzino', 'Harrison Millard', 'William Grinnell', 'Marland P. Billings', 'Hunter Wilichoski', 'Paul Shapiro', 'Dan Mavraides', 'Bernard Kates', 'Tom Sullivan', 'William Morris', 'Richard Gridley', 'Tony Millionaire', 'Mark Driscoll', 'Henry E. Dixey', 'Dick Wesson', 'Philip Leslie Hale', 'Judy Malloy', 'George Francis Train', 'Henry Knox', 'Robert W. Morse', 'Sonny Tufts', 'Dick Donovan', 'Joseph Granby', 'William B. Golden', 'Tom Raftery', 'Michael DeSisto', 'Mary Louise Curtis Bok Zimbalist', 'William Ellery Channing', 'Juliet Corson', 'Louise Gibney', 'Elihu Yale', 'Marco Antonio Rigau', 'Mauro Bruno', 'Adam Robitel', 'Thomas J. Geary', 'Richard Sears', 'Alessandro Nivola', 'Ursula Parrott', 'James G. Maguire', 'John Gorham', 'Jim Ward', 'Stanley Zdonik', 'Charles Russell Lowell, Sr.', 'Caroline Wells Healey Dall', 'Nathaniel Jeremiah Bradlee', 'Charles Logue', 'George De Carlton', 'Yehuda Krinsky', 'Debra Spark', 'Sampson Salter Blowers', 'Glenn Phillips', 'René Ricard', 'Frank Robbins', 'Rod Webber', 'Richard Scarry', 'Ruth Constantine', 'Melissa Peltier', 'Gevvie Stone', 'Thomas Kilby Smith', 'Charles W. Bailey', 'Ryan Sypek', 'Henry Winthrop Sargent', 'James L. Halperin', 'Bob Reed', 'Rich ""Sully"" Sullivan', 'Lew Lehman', 'Seth Carlo Chandler', 'Joan Darling', 'Richard De Angelis', 'Lynn Hoffman', 'Adam Lundquist', 'George Francis McGinnis', 'Gregory J. Pathiakis', 'David Batteau', 'James Augustus Fox', 'Marnie Saitta', 'Estelle Hemsley', 'Daniel Gilfether', 'James Seymour', 'Hillary Saeger', 'Bob Fisher', 'Joanna Barnes', 'James Michael Curley', 'Joseph Lewis Stackpole', 'Henry N. Cobb', 'Kassim Osgood', 'Connor Murphy', 'Charles Sprague', 'Henry Johnson', 'David Park', 'Jeffrey Lurie', 'John Morrill', 'Curt Conway', 'Jen Trynin', 'Charles H. Eglee', 'Walter A. Brown', 'Allan H. Meltzer', 'Raymond Nasher', 'Joyce Ballou Gregorian', 'Horace Brooks', 'Reed Hastings', 'Jennifer Dundas', 'Lydia Millet', 'Elisabeth Ogilvie', 'Anne Dudek', 'Judith Goslin Hall', 'Evan Jacobs', 'Letterio Calapai', 'Thomas Francis Hickey', 'Laurence Curtis', 'Alexander Bradley', 'Frank Norcross', 'Thomas C. Wales', 'Mark Mahoney', 'Steven McLaughlin', 'Martha Lillian Smith', 'Anne Caldwell', 'Isaac Parker', 'Augustus Peabody Gardner', 'Henry Rowen', 'Peyton List', 'Henry Bostick', 'Abraham Lincoln Filene', 'Harry Dexter White', 'Collette Lyons', 'Burton Malkiel', 'Burton Pike', 'Thomas D. Eliot', 'William Healey Dall', 'James T. Bates', 'Paul Stanton', 'Louis A. Bafalis', 'George M. Krey', 'Albert Vincent Casey', 'Thomas H. Dunham', 'Robin Hartshorne', 'James Barr Ames', 'Alfred Henry Miller', 'Henry Davis Sleeper', 'Joseph H. De Castro', 'Lulu Devine', 'Joseph Hart', 'Laura Duke Condominas', 'Oscar Brodney', "Lou D'Allesandro", 'Matthew Weigman', 'Kenneth Harlan', 'John Gould', 'David L. Bertman', 'Rodman Philbrick', 'Timothy Shriver', 'Benjamin Arthur Quarles', 'Brian Pinkney', 'Francesca Alexander', 'Al Cannava', 'Miles Craigwell', 'Peter Guralnick', 'Elliot Hovey', 'Lillian Roth', 'Carolina White', 'Richard Murphy', 'Jack Leaman', 'Elliott Cabot', 'John Kiely', 'Betty Miller', 'Waitstill Sharp', 'Barney Fagan', 'Charles Boultenhouse', 'David G. Nathan', 'Murder of Imette St. Guillen', 'Jacques Derosena', 'Ari Graynor', 'Chandler Hill', 'Julia Meade', 'James Brett', 'Daniel Gorenstein', 'Elizabeth Wade', 'Richard Field Carroll', 'John J. Finnegan', 'Harold Hongju Koh', 'Kevin Reilly', 'Eric Turner', 'William Gallagher', 'Adam Sholder', 'Danielle Langlois', 'Fanny Howe', 'Ahvi Spindell', 'Cindy Baer', 'E. J. Dionne', 'John McCormick', 'Ernest Amory Codman', 'Jill Tasker', 'William Bentley', 'Blair Lent', 'Dan Barry', 'Rene Ceballos', 'Mike McColgan', 'Bill Overton', 'Andrea Bertozzi', 'J. Edwin Ganong', 'Liam Madden', 'Francis J. Ricciardone, Jr.', 'John White Webster', 'Thomas Dolliver Church', 'John Esten Cooke', 'Frederick O. Prince', 'Jim Troy', 'Peter Plympton Smith', 'Anna Head', 'Sarah Sze', 'Claudia Gonson', 'Sarah Van Patten', 'William Osborn', 'James Bowdoin', 'Bill McGunnigle', 'Michelle Citron', 'Charles J. McCarthy', 'Jeffrey Finn', 'John R. Tunis', 'Alicyn Packard', 'Ramiro Torres', 'Watermelon Slim', 'Dick Cunningham', 'Richie Dunn', 'Beverly Swerling', 'June Kenney', 'Duke Riley', 'George Bonhag', 'Frank Newcomb', 'Gerald Murphy', 'Camille Solari', 'Jimmy Flynn', 'Francis Kelly', 'Edward Loomis Davenport', 'Max Tishler', 'Augustine Joseph Hickey Duganne', 'Harry Carney', 'Joseph J. Sullivan', 'Allen Fitzpatrick', 'Bert Waters', 'Anne Day-Jones', 'Robert Treat Paine', 'Frank Craven', 'Livingston Taylor', 'William Holland', 'Herbert Corthell', 'Charles Henry Davis', 'Henry Jacob Bigelow', 'Jeremy Belknap', 'Percival Lowell', 'Robert Burns Woodward', 'Mia Zottoli', 'Louis de Rochemont', 'Martin Lomasney', 'Paul McVey', 'Zita Moulton', 'John Halsey', 'E. Alexander Bergstrom', 'Giovanni Pantaleo', 'Rob Stone', 'Janaka Stucky', 'Philip J. Landrigan', 'Josh Golder', 'Kareem Smith', 'Enoch Wood Perry, Jr.', 'Antonio Sacre', 'Robert Rosenberg', 'Michael Cox', 'Christopher Allport', 'Thomas Wesley Weeks, III', 'Larry Goldings', 'Michelle Phan', 'Paris Themmen', 'Jane Alexander', 'Juliana Cannarozzo', 'Frank Cousins', 'Stephen M. Galvin', 'Joseph Lee', 'Nathaniel Hurd', 'Sidne Anderson', 'Alvin F. Sortwell', 'Siri Baruc', 'Charles D. Ferris', 'Jonathan Anastas', 'Frances Perkins', 'Elizabeth Poirier', 'James Sumner', 'Tom Jennings', 'Frank Sheridan', 'Len Grant', 'Cecil Cox', 'Annie Raines', 'Ray Nazarro', 'Mike Mahoney', "Mark O'Brien", 'David Gilbarg', 'Alison Folland', 'Grafton D. Cushing', 'John Pinette', 'Eva Ellington', 'Nick Wise', 'Jack Germond', 'James Otis', 'Ian Boyd', 'Charles L. Burrill', 'Frank Morey', 'Alexander Steinert', 'Brad Birkenfeld', 'Bob Mover', 'Pat Badger', 'Marjorie Clapprood', 'Jed Prouty', 'Stephanie Wilson', 'Anne Marden', 'Mary Livermore', 'Ian Keith', 'Joseph Lovell', 'Thomas Edward Chickering', 'Joseph E. Levine', 'Jennifer Margulis', 'Michael J. Perkins', 'Timothy George Maden', 'Peter J. Gomes', 'Courtney Fathom Sell', 'Fred Whittingham', 'Randy Barry', 'Hugh Parker Guiler', 'Sid Lovett', 'A. Ross Eckler, Jr.', 'Daniel Dennett', 'Brendan Beiser', 'Henry Cabot Lodge', 'Chris Keating', 'Donna Summer', 'Horace Mann Jr.', 'Steven Hughes', 'Charles Brenner (psychiatrist)', 'Joseph W. Revere', 'Michael Thomas', 'Louis E. Heifetz', 'Ben Stafford', 'Bianca Solorzano'}
            Answers = 2589, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.088s]
          Answers = 2589, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.089s]
        Checking schema 18 / 158: {
          [('Main', '==', 'm.01cx_', ['book.book_subject.musical_compositions_about_this_topic'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 6
            Final Answer: {"I'm Shipping Up to Boston", 'Tessie', 'Dirty Water', 'Boston Asphalt', 'For Boston'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 19 / 158: {
          [('Main', '==', 'm.01cx_', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 5
            Final Answer: {'London Tipton', 'Helen Moynihan', 'Maddie Fitzpatrick', 'Cloak', 'Penny Halliwell'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 20 / 158: {
          [('Main', '==', 'm.01cx_', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 13
            Final Answer: {'Boston Ultimate', 'Boston Bruins', 'Boston Red Sox', "Northeastern University Huskies men's basketball", 'Boston University Terriers', 'Boston Patriots', 'Boston Celtics', 'Boston Militia', "Boston College Eagles men's basketball", 'Boston Cannons', 'Boston College Eagles football', 'Boston Braves'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 21 / 158: {
          [('Main', '==', 'm.01cx_', ['location.place_with_neighborhoods.neighborhoods'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.place_with_neighborhoods.neighborhoods ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.place_with_neighborhoods.neighborhoods ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 45
            Final Answer: {'Longwood Medical and Academic Area', 'Mattapan', 'Dorchester', 'Ann Street', 'East Boston', 'Readville', 'Bay Village', 'West End', 'Combat Zone, Boston', 'Forest Hills', 'Uphams Corner', 'Financial District', 'West Roxbury', 'Maverick Square', 'Kenmore Square', 'Mission Hill', 'Roxbury', 'South End', 'Allston', 'Dudley Square', 'Orient Heights', 'Chelsea Street', 'Chinatown', 'Jamaica Plain', 'Fenway–Kenmore', 'Brighton', 'Roslindale', 'Central Square', 'Haymarket Square', 'Bennington Street', 'Downtown Crossing', 'Beacon Hill', 'Savin Hill', 'Charlestown', 'Leather District', 'Day Square', 'Columbia Point', 'Back Bay', 'North End', 'Hyde Park', 'Cleveland Circle', 'Fort Point', 'South Boston', 'Forest Hills, Massachusetts', 'Louisburg Square'}
            Answers = 45, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 45, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 22 / 158: {
          [('Main', '==', 'm.01cx_', ['user.ameroamigo.default_domain.federal_reserve_bank.number'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01cx_ fb:user.ameroamigo.default_domain.federal_reserve_bank.number ?o1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 WHERE { fb:m.01cx_ fb:user.ameroamigo.default_domain.federal_reserve_bank.number ?o1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 23 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_county_place.county'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.hud_county_place.county ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.hud_county_place.county ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Suffolk County'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 24 / 158: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_location.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.010s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.011s]
        Checking schema 25 / 158: {
          [('Main', '==', 'm.01cx_', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01cx_ fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 WHERE { fb:m.01cx_ fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'1630'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 26 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 510
            Final Answer: {'Sarah J. Baker School', 'Long Wharf', 'Brighton Center Historic District', 'Beth Israel Deaconess Medical Center', 'Annunciation Greek Orthodox Cathedral of New England', 'Combat Zone, Boston', 'Hayden Building', 'Emmanuel College, Boston', 'Charles Sumner House', 'Fenway-Boylston Street District', "Darryl's Corner Bar & Kitchen", 'South End District', 'Boston Navy Yard', 'Haffenreffer Brewery', 'Old West Church', 'Trinity Neighborhood House', 'Boston Opera House', 'Wilbur Theatre', 'Jamaica Plain', "St. John's Seminary", "Youth's Companion Building", 'United States lightship Nantucket (LV-112)', 'Central Square', 'Curry College, Boston Campus', 'Calf Pasture Pumping Station Complex', 'Fenway Park', 'Dorchester Park', 'Bowditch School', 'University of Massachusetts Boston', 'Charles Playhouse', 'Francis Parkman House', 'Quincy College', 'Blaine the Beauty Career School-Boston', 'Bennington Street Burying Ground', 'Old Harbor Reservation Parkways', 'Ann Street', 'Urban College of Boston', "St. Stephen's Church, Boston", 'Chestnut Hill Reservoir', "King's Chapel Burying Ground", 'Boston University School of Law', 'Northeastern University', 'North Terminal Garage', 'Boston African American National Historic Site', 'FANEUIL HALL MARKETPLACE LLC', 'Larz Anderson Auto Museum', 'Dorchester Pottery Works', 'Underbar', "Nick's Comedy Stop", 'The Peabody', 'Massachusetts School of Art', 'Morton Street', "St. Joseph's Roman Catholic Church Complex", 'Washington Street Theatre District', "Boston Young Men's Christian Union", 'Dorchester Temple Baptist Church', 'Agganis Arena', 'Berklee Performance Center', 'Winthrop Building', 'Charlestown Heights', 'Truman Parkway', 'North Bennet Street School', 'Dorchester-Milton Lower Mills Industrial District', 'Louisburg Square', 'William C. Nell House', 'Studio Soto', 'Jacob Wirth', 'Congregation Adath Jeshurun', 'Codman Building', 'Ozias Goodwin House', 'Dillaway School', 'Suffolk County Courthouse', 'Church Green Buildings Historic District', 'House at 17 Cranston Street', 'Institute of Contemporary Art', 'Benedict Fenwick School', 'The Underground', 'South End', 'Hynes Convention Center', 'Ashmont', 'Arnold Arboretum', 'Compton Building', 'Roslindale Baptist Church', 'Simmons College', 'Veterans of Foreign Wars Parkway', 'Fenway Studios', 'Collins Building', 'Beacon Hill', 'Church of Saint John the Evangelist', 'Paine Furniture Building', 'The University of Massachusetts Club', 'Francis B. Austin House', 'Ohiri Field', 'First Congregational Church of Hyde Park', 'Boston Light', 'Paul Revere House', 'Luna', 'Seaport World Trade Center', 'Soldiers and Sailors Monument', 'Tremont Street Subway', 'South Station', 'Post Office Square Park', 'The First Church of Christ, Scientist', 'Wigglesworth Building', 'Boston Convention and Exhibition Center', 'Post Office Square', 'Samuel Gridley and Julia Ward Howe House', 'Roxbury High Fort', 'SoWa Open Market', 'Oficio Summer Art Reception', "Nix's Mate Daybeacon", 'Brandeis University, main campus', 'Trinity Church', 'Stony Brook Reservation Parkways', 'Cathedral of St. George Historic District', 'Phipps Street Burying Ground', 'Cutler Majestic Theatre', 'Building at 138-142 Portland Street', 'Roxbury Presbyterian Church', 'Boston arts academy', 'North End', 'Fort Point', "All Saints' Church", 'New England Hospital for Women and Children', 'Boston Center for the Arts', 'Suffolk University Law School', 'Nixes Mate', 'Kaplan Career Institute-Boston', 'Boston College', 'Weston Jesuit School of Theology', "Upham's Corner Market", 'House at 1 Bay Street', "St. Mary's Episcopal Church", 'Financial District', 'West Roxbury', 'Mount Hope Cemetery', 'Maverick Square', 'Harvard Stadium', 'Exchange Coffee House', 'Brighton Evangelical Congregational Church', 'Students House', "St. Luke's and St. Margaret's Church", 'Club Cafe', 'Boston Garden', 'Boston Common', 'Braves Field', 'Amory Hall', 'New England School of Photography', 'Northeastern University School of Law', 'Boston Baptist College', 'Mattapan', 'Midway Cafe', 'Long Island Head Light', 'Gibbs College of Boston Inc a private two year college', 'Larz Anderson Park', 'Long Wharf and Customhouse Block', 'The Gatehouse', 'Boston Harbor Hotel at Rowes Wharf', 'Harriswood Crescent', 'Regal Fenway Stadium 13 & RPX', 'Boston State College', 'Hibernian Hall', 'Forest Hills', 'McCormack Theatre', 'Gibson House Museum', 'Emerson College', 'The Art Institute of Boston', 'Lesley University', 'Cyclorama Building', 'Chinatown', 'Boston University Theatre', 'Titus Sparrow Park', 'Bulfinch Triangle Historic District', 'Umbria Prime', 'Baker Congregational Church', 'Hyatt Regency Boston', 'Savin Hill', '02201', 'William Clapp House', 'Mugar Omni Theater', 'Codman Square District', "Paul's Mall", 'District', 'First Baptist Church', 'Rogers Building', 'Crawford House', 'Greenwood Memorial United Methodist Church', 'Readville', 'Headquarters House', 'John Eliot Square District', 'Mission Hill Triangle Historic District', 'Charles River Reservation Parkways', 'Paradise Rock Club', 'Mills Gallery', 'Harrison Square Historic District', 'Boston Transit Commission Building', 'Mission Hill', 'Dimock Community Health Center Complex', 'Chestnut Hill Reservation', 'Richardson Block', 'Capiz Bar', 'School of the Museum of Fine Arts, Boston', 'Bunker Hill School', 'Boston Common and Public Garden', 'Timothy Hoxie House', 'Back Bay', 'West Street District', 'Cleveland Circle', 'Fort Independence', 'First Church of Jamaica Plain', 'Boston University College of Arts and Sciences', 'Butera School of Art', 'Trinity Rectory', 'Massachusetts General Hospital', 'Felt Boston', 'Home for Aged Couples', 'Pierce-Hichborn House', 'Boston University Medical Campus, main campus', 'New England Aquarium', 'Metropolitan Park System of Greater Boston VFW Parkway', 'Fisher College', 'Metropolitan Park System of Greater Boston Old Harbor Reservation Parkways', 'Goldsmith Block', 'Bay Village', "King's Chapel", 'Garland Junior College', 'Bigelow School', "St. Paul's Church", 'Dorchester North Burying Ground', 'Boston Center For Adult Education', 'Machine Nightclub', 'The Riviera', 'Berklee College of Music', 'Chelsea', 'Vermont Building', 'Charles Street', 'Brook Farm', 'Ether Dome', 'Leather District', 'Cathedral Church of St. Paul, Boston', 'Hatch Memorial Shell', 'Boston University School of Education', 'Bunker Hill Community College', 'New England Law-Boston', 'Metropolitan Park System of Great Boston MPS Stony Brook Reservation Parkways', 'Massachusetts School of Art, main campus', 'Temple Place Historic District', 'Venu Nightclub', 'Second Brazer Building', 'Royale Nightclub', 'Bellevue Standpipe', "McGann's Irish Pub", 'Improv Asylum', 'Roxbury Highlands Historic District', 'Orient Heights', 'Eliot Burying Ground', 'YWCA Boston', 'Soldiers Field Soccer Stadium', 'Dearborn School', 'Fort Point Channel Historic District', 'Harrison Gray Otis House', 'The Red Room @ Cafe 939', 'Downtown Crossing', 'Eagle Hill Historic District', 'New England College of Optometry', "All Saints' Church, Ashmont", '1767 Milestones', 'Day Square', 'West End Museum', 'Columbia Point', 'Huntington Avenue Grounds', 'Back Bay Historic District', 'District 13 Police Station', 'Bay State College', 'Forest Hills, Massachusetts', 'Old Statehouse', 'Colonial Theatre', "Copp's Hill Burying Ground", 'Adams-Nervine Asylum', 'Emerald Necklace', 'Fulton-Commercial Streets District', 'Oak Square School', 'Charles Street Jail', 'Union Wharf', 'Beach-Knapp District', 'Walter Brown Arena', 'New England School of Law', 'Isabella Stewart Gardner Museum', 'Sackler School of Graduate Biomedical Sciences', 'Fort Warren', 'South Station Headhouse', 'Bedford Block', 'Crowninshield House', 'The Graves Light', 'Quincy Market', 'Boylston Building', 'Faneuil Hall', "Wally's Cafe", 'Franklin Park', 'USS Cassin Young', 'Charlestown', 'Hyde Park', 'Berger Factory', 'Cocoanut Grove', 'David Sears House', "Paddy O's", 'Citi Performing Arts Center', 'Labouré College', "Copp's Hill Terrace", "Copperfield's", 'South Boston Boat Clubs Historic District', 'Brandegee Estate', 'Boston Consumptives Hospital', 'Mariners House', 'The Landsdowne', 'Wentworth Institute of Technology', 'Baseball Tavern', 'Elephant and Castle Inc', 'New Riding Club', 'Christ Church, Hyde Park', "Boston Children's Museum", 'Boston Athenæum', 'Brighton', 'Roslindale', 'New England Conservatory of Music', 'Russia Wharf Buildings', 'Liberty Tree District', 'Frederick Ayer Mansion', 'Tufts University School of Dental Medicine', 'One Post Office Square', 'Boston Architectural College', 'South Boston', 'Eliot Hall', 'Old Corner Bookstore', "Filene's Department Store", 'Harvard School of Public Health', 'Neponset Valley Parkway', "M.J. O'Connor's Waterfront", 'Allston Congregational Church', 'Saint Augustine Chapel and Cemetery', 'Charles Street African Methodist Episcopal Church', 'Moreland Street Historic District', 'Dorchester', 'Harvard Avenue Fire Station', 'Old East Boston High School', 'Lasell College', 'Custom House District', 'Massachusetts College of Art', 'Summer Street', 'Nathan Appleton Residence', 'Long Wharf Marriott Hotel', 'Benjamin Franklin Institute of Technology', 'Pine Manor College', 'Town Hill District', 'Landmark Center', 'Joshua Bates School', 'Suffolk University', 'Olmsted Park', 'Boston City Hall', 'Edward Everett Hale House', 'Chestnut Hill Reservoir Historic District', 'Carolina Avenue', 'Mount Pleasant Historic District', 'Savin Hill Historic District', "Boston Playwrights' Theatre", 'Lower Roxbury Historic District', 'African Meeting House', 'Newspaper Row', 'Sumner Hill Historic District', 'Roughan Hall', 'USS Constitution', 'Wheelock College', 'Dorchester Heights', 'Hult International Business School, Boston', 'Boston Music Hall', 'Boston University College of Engineering', 'Park Street District', 'Dudley Square', 'University of Massachusetts, main campus', 'Ames Building', 'Northeastern University School of Pharmacy', 'The Estate', 'Massachusetts Communications College', 'Massachusetts College of Pharmacy and Health Sciences', 'Harrison Loring House', 'Boston University Medical Campus', 'Peter Faneuil School', 'International Trust Company Building', 'Suffolk College of Arts and Sciences', 'The Boston Conservatory', 'Alvah Kittredge House', 'United Shoe Machinery Corporation Building', 'Tufts University School of Medicine', 'Boston National Historical Park', 'Rowes Wharf', 'Old South Church', 'Massachusetts State House', "Sears' Crescent and Sears' Block", 'William Lloyd Garrison House', "Boston Young Men's Christian Association", 'Woodbourne Historic District', 'Faneuil Hall Marketplace', 'Boston University College of Fine Arts', 'Uphams Corner', 'Bank of America Pavilion', 'Kenmore Square', "Dick's Beantown Comedy Vault", 'Tufts University', 'Allston', 'Boston University, main campus', 'Piano Row District', 'Fenway–Kenmore', 'Orpheum Theatre', 'Dudley Station Historic District', 'Boston Public Library Main Branch', 'Scullers Jazz Club', 'Haymarket Square', 'Museum of Fine Arts, Boston', 'Boston University School of Public Health', 'City Hall Plaza', 'Calderwood Pavilion', 'Old North Church', 'Boston University School of Medicine', 'Nazing Court Apartments', 'Harvard Avenue Historic District', 'Church', 'Abbotsford', 'Loring-Greenough House', 'TD Bank Garden', 'Public Garden', 'Sears Roebuck and Company Mail Order Store', 'Bunker Hill Monument', 'Boston University Science and Engineering Program', 'Longwood Medical and Academic Area', 'Mount Ida College', 'Westin Copley', 'Goldman School of Dental Medicine', 'Engine House No. 34', 'House of Blues, Boston', "Museum of African American History's Abiel Smith School Gallery", 'Massachusetts Historical Society Building', 'West End', 'Hellenic College', 'The Bell In Hand Tavern', 'Metropolitan Park System of Greater Boston Morton Street', 'Grace Hopkinson Eliot Hall', 'Monument Square Historic District', 'Old State House', 'Old City Hall', 'Fields Corner Municipal Building', 'Truman Parkway-Metropolitan Park System of Greater Boston', 'Boston Edison Electric Illuminating Company building', 'Pierce House', 'Lovells Island Range Lights', 'Harvard Medical School', 'Rose Fitzgerald Kennedy Greenway', 'Captain Lemuel Clap House', 'The Beehive', 'Bennington Street', 'Good Life', 'Refectory Hill', 'Massachusetts Mental Health Center', 'Jordan Hall', 'Matthews Arena', 'Old East Boston High School, main campus', 'Harvard Business School', 'Edward H. Haskell Home for Nurses', 'Symphony Hall', 'Congress Street Fire Station', 'Beacon Hill Historic District', "D'Amore-McKim School of Business", 'Boston Federal Reserve Bank HQ', 'Chester Harding House', 'Hill House, Inc.', 'Donald McKay House', 'Franklin Park Zoo', 'South End Grounds', 'William Lloyd Garrison School', 'Boston University School of Theology', 'Empire Beauty School-Boston', 'Boston University School of Management', 'East Boston', 'Old South Meeting House', 'James Blake House', 'Frances and Isabella Apartments', 'Hard Rock Cafe Boston', 'Textile District', 'Wang Theatre', 'Logan International Airport', 'R. H. Stearns Building', 'The Greatest Bar', 'Roxbury', 'Roxbury Community College', 'First Church in Boston', 'Eliot Congregational Church', 'Dill Building', 'Publicity Building', 'Lawrence Model Lodging Houses', 'Blackstone Block Historic District', 'Avenue One', 'F. L. Higginson House', 'St. Joseph Catholic Church', 'Frederick Douglass Square Historic District', 'Symphony and Horticultural Halls', 'Nickerson Field', 'Boston University College of Communication', 'Clapp Houses', 'Stadium Sports Bar & Grill'}
            Answers = 508, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 508, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 27 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 17
            Final Answer: {'Boston Molasses Disaster', '2004 Democratic National Convention', 'Murder of Julissa Brisman', 'Powder Alarm', 'Battle of Boston Harbor', 'Boston Police Strike', 'Fortification of Dorchester Heights', 'Hotel Vendome fire', '1976 Boston desegregation busing protest', 'Wrecking Ball Tour', 'Boston campaign', 'Great Boston Fire of 1872', 'Boston Marathon bombings', 'Siege of Boston', 'Boston Massacre', '1689 Boston revolt', 'ISMB 2010 Boston'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 28 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 29 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.contains_major_portion_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 4
            Final Answer: {'Boston-Cambridge-Quincy, MA-NH Metropolitan Statistical Area', 'Boston-Quincy, MA Metropolitan Division', 'Boston Harbor', 'Greater Boston'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 30 / 158: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_topic.is_really'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_topic.is_really ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_topic.is_really ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 31 / 158: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_topic.subsumes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_topic.subsumes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_topic.subsumes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 3
            Final Answer: {'Boston, N.E.', 'Boston?'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 32 / 158: {
          [('Main', '==', 'm.01cx_', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 13
            Final Answer: {'The Boondock Saints', 'Spartan', 'Dead Heat on a Merry-Go-Round', 'Slave Workshop Boston', 'Next Stop Wonderland', 'Fever Pitch', 'The Departed', 'Knight and Day', 'Good Will Hunting', 'Mystic River', 'Gone Baby Gone', 'The Town', 'The Ghosts of Girlfriends Past'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 33 / 158: {
          [('Main', '==', 'm.01cx_', ['user.ameroamigo.default_domain.federal_reserve_bank.letter'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:user.ameroamigo.default_domain.federal_reserve_bank.letter ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:user.ameroamigo.default_domain.federal_reserve_bank.letter ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 34 / 158: {
          [('Main', '==', 'm.01cx_', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 34
            Final Answer: {'The Boston Post', 'The Phoenix', 'The Boston Globe', 'Boston Post-Boy', 'UNA newspaper', 'Ergo', 'Telegram & Gazette', "Woman's Journal", 'The Real Paper', 'The New-England Courant', 'BostonNOW', 'The Liberator', 'The Tufts Daily', 'B.U. Exposure', 'Boston Gazette', 'Boston Evening Transcript', 'Irish echo (Boston, Mass.)', 'Boston Daily Advertiser', 'New-England Repertory', 'Whats Up Magazine', 'The Christian Science Monitor', 'Editorial Humor', 'The Morning Star', 'Boston Chronicle', 'The Boston Courant', 'Boston Herald', 'DigBoston', 'Beacon Hill Times', 'The Weekly Week', 'The Daily Free Press', 'Boston Guardian', 'Publick Occurrences Both Forreign and Domestick', 'Boston American', 'The Huntington News'}
            Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 35 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_county_place.place'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 36 / 158: {
          [('Main', '==', 'm.01cx_', ['location.citytown.postal_codes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.citytown.postal_codes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.citytown.postal_codes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 43
            Final Answer: {'02196', '02199', '02122', '02115', '02217', '02116', '02124', '02127', '02284', '02211', '02121', '02212', '02206', '02118', '02222', '02123', '02205', '02210', '02297', '02113', '02203', '02119', '02109', '02163', '02114', '02266', '02283', '02120', '02125', '02241', '02110', '02204', '02108', '02293', '02298', '02112', '02295', '02111', '02201', '02133', '02215', '02128', '02117'}
            Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 37 / 158: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_location.state'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.state ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.state ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Massachusetts'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 38 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Eastern Time Zone'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 39 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01cx_ fb:location.location.area ?o1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 WHERE { fb:m.01cx_ fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'232.063'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 40 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 5
            Final Answer: {'Area code 617', 'Massachusetts', 'Area code 857', 'United States of America', 'Suffolk County'}
            Answers = 5, P = 0.200000, R = 1.000000, F1 = 0.333333
          } [0.007s]
          Answers = 5, P = 0.200000, R = 1.000000, F1 = 0.333333
        } [0.007s]
        Checking schema 41 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.nearby_airports'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Logan International Airport'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 42 / 158: {
          [('Main', '==', 'm.01cx_', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 4
            Final Answer: {'Mystic River', 'The Given Day', 'The Hub: Boston Past and Present', 'The city observed, Boston'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 43 / 158: {
          [('Main', '==', 'm.01cx_', ['fictional_universe.fictional_setting.characters_that_have_lived_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:fictional_universe.fictional_setting.characters_that_have_lived_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:fictional_universe.fictional_setting.characters_that_have_lived_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 5
            Final Answer: {'Robert Kelly', 'Frasier Crane', 'Cody Martin', 'Frederick Gaylord Crane', 'Zack Martin'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 44 / 158: {
          [('Main', '==', 'm.01cx_', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Scene of Explosion in Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 45 / 158: {
          [('Main', '==', 'm.01cx_', ['user.ameroamigo.default_domain.federal_reserve_bank.federal_reserve_region'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:user.ameroamigo.default_domain.federal_reserve_bank.federal_reserve_region ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:user.ameroamigo.default_domain.federal_reserve_bank.federal_reserve_region ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 46 / 158: {
          [('Main', '==', 'm.01cx_', ['user.brendan.default_domain.top_architectural_city.structure_count'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01cx_ fb:user.brendan.default_domain.top_architectural_city.structure_count ?o1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 WHERE { fb:m.01cx_ fb:user.brendan.default_domain.top_architectural_city.structure_count ?o1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'45'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 47 / 158: {
          [('Main', '==', 'm.01cx_', ['user.joehughes.default_domain.transit_service_area.transit_agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:user.joehughes.default_domain.transit_service_area.transit_agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:user.joehughes.default_domain.transit_service_area.transit_agencies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Massachusetts Bay Transportation Authority'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 48 / 158: {
          [('Main', '==', 'm.02w6n9g', ['sports.sports_team.team_mascot'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:sports.sports_team.team_mascot ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:sports.sports_team.team_mascot ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02w6n9g'}
            Query return lines = 1
            Final Answer: {'Rhett the Boston Terrier'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 49 / 158: {
          [('Main', '==', 'm.02w6n9g', ['sports.sports_team.colors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:sports.sports_team.colors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:sports.sports_team.colors ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02w6n9g'}
            Query return lines = 2
            Final Answer: {'White', 'Red'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 50 / 158: {
          [('Main', '==', 'm.02w6n9g', ['ice_hockey.hockey_team.historical_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:ice_hockey.hockey_team.historical_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:ice_hockey.hockey_team.historical_roster ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02w6n9g'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 51 / 158: {
          [('Main', '==', 'm.02w6n9g', ['sports.sports_team.arena_stadium'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02w6n9g'}
            Query return lines = 1
            Final Answer: {'Agganis Arena'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 52 / 158: {
          [('Main', '==', 'm.02w6n9g', ['sports.sports_team.fight_song'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:sports.sports_team.fight_song ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:sports.sports_team.fight_song ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02w6n9g'}
            Query return lines = 1
            Final Answer: {'Go B.U.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 53 / 158: {
          [('Main', '==', 'm.02w6n9g', ['ice_hockey.hockey_team.coach'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:ice_hockey.hockey_team.coach ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02w6n9g fb:ice_hockey.hockey_team.coach ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02w6n9g'}
            Query return lines = 1
            Final Answer: {'Jack Parker'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 54 / 158: {
          [('Main', '==', 'm.05w6gs', ['sports.sports_team.location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05w6gs fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05w6gs fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05w6gs'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 55 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.country_of_origin'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.011s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.011s]
        Checking schema 56 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.air_date_of_first_episode'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.air_date_of_first_episode ?o1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.air_date_of_first_episode ?o1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 57 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.seasons'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.seasons ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.seasons ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'Terriers - Season 1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 58 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 3
            Final Answer: {'Crime Fiction', 'Comedy-drama', 'Drama'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 59 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.air_date_of_final_episode'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.air_date_of_final_episode ?o1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.air_date_of_final_episode ?o1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 60 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.number_of_seasons'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.number_of_seasons ?o1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.number_of_seasons ?o1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 61 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.episodes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.episodes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.episodes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 13
            Final Answer: {'Missing Persons', 'Fustercluck', 'Pilot', 'Change Partners', 'Asunder', 'Agua Caliente', 'Sins of the Past', 'Dog and Pony', 'Manifest Destiny', 'Pimp Daddy', 'Ring-a-Ding-Ding', 'Quid Pro Quo', 'Hail Mary'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 62 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.currently_in_production'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.currently_in_production ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.currently_in_production ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 63 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.episode_running_time'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.episode_running_time ?o1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.episode_running_time ?o1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 2
            Final Answer: {'45', '60'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 64 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.number_of_episodes'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.number_of_episodes ?o1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.number_of_episodes ?o1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'13'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 65 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.languages'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.languages ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.languages ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 66 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.theme_song'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.theme_song ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.theme_song ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'Gunfight Epiphany'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 67 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.country_of_origin']), ('Entity', '==', 'm.01cx_', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:location.location.contains fb:m.01cx_ . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:location.location.contains fb:m.01cx_ . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn', 'm.01cx_'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.012s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.012s]
        Checking schema 68 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.country_of_origin']), ('Entity', '==', 'm.01cx_', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:location.country.administrative_divisions fb:m.01cx_ . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnyhqn fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:location.country.administrative_divisions fb:m.01cx_ . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn', 'm.01cx_'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.011s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.011s]
        Checking schema 69 / 158: {
          [('Main', '==', 'm.016dxh', ['music.musical_group.member', 'music.group_membership.group'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 70 / 158: {
          [('Main', '==', 'm.016dxh', ['music.musical_group.member', 'music.group_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 17
            Final Answer: {'Gary Pihl', 'Michael Sweet', 'Fran Cosmo', 'Jeff Neal', 'Barry Goudreau', 'Sib Hashian', 'Fran Sheehan', 'William Smith', 'Jim Masdea', 'Anthony Cosmo', 'Tom Scholz', 'Tracy Ferrie', 'Kimberley Dahme', 'Tommy DeCarlo', 'Tom Hambridge', 'Brad Delp', 'David Victor'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 71 / 158: {
          [('Main', '==', 'm.016dxh', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 2
            Final Answer: {'Grammy Award for Best New Artist', 'Juno Award for International Album of the Year'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 72 / 158: {
          [('Main', '==', 'm.016dxh', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 73 / 158: {
          [('Main', '==', 'm.016dxh', ['music.musical_group.member', 'music.group_membership.start'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016dxh fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.start ?o2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.016dxh fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.start ?o2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 9
            Final Answer: {'1976', '2002', '2012', '2001', '2008', '1993', '1985', '1997', '1994'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 74 / 158: {
          [('Main', '==', 'm.016dxh', ['music.musical_group.member', 'music.group_membership.end'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016dxh fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.end ?o2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.016dxh fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.end ?o2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 9
            Final Answer: {'2002', '2007', '1983', '1981', '2006', '1989', '2011', '1997', '1988'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 75 / 158: {
          [('Main', '==', 'm.016dxh', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 76 / 158: {
          [('Main', '==', 'm.016dxh', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016dxh fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.016dxh fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 2
            Final Answer: {'1978', '1976'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 77 / 158: {
          [('Main', '==', 'm.016dxh', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 1
            Final Answer: {'6th January 1977'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 78 / 158: {
          [('Main', '==', 'm.016dxh', ['music.musical_group.member', 'music.group_membership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:music.musical_group.member ?o1 . ?o1 fb:music.group_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 10
            Final Answer: {'Guitar', 'Backing Vocals', 'Bass guitar', 'Vocals', 'Lead guitar', 'Keyboard', 'harmonica', 'Drums', 'Percussion', 'Lead vocalist'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 79 / 158: {
          [('Main', '==', 'm.016dxh', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016dxh fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 80 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.how_to_get_here', 'travel.transportation.transport_terminus'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_terminus ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_terminus ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 8
            Final Answer: {'South Station', 'T. F. Green Airport', 'Long Wharf', 'Back Bay', 'Logan International Airport', 'Boston Navy Yard', 'North Station', 'Manchester–Boston Regional Airport'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 81 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.average_min_temp_c'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_min_temp_c ?o2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_min_temp_c ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 11
            Final Answer: {'-6', '-5', '18', '4', '15', '-3', '0', '3', '8', '10', '14'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 82 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.average_max_temp_c'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_max_temp_c ?o2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_max_temp_c ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 12
            Final Answer: {'2', '17', '11', '19', '26', '25', '23', '13', '5', '28', '8', '3'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 83 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.how_to_get_here', 'travel.transportation.travel_destination'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 84 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.average_rainfall_mm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_rainfall_mm ?o2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_rainfall_mm ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 12
            Final Answer: {'82', '91', '93', '110', '100', '84', '73', '79', '95', '87', '105', '92'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 85 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.how_to_get_here', 'travel.transportation.mode_of_transportation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.mode_of_transportation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.mode_of_transportation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 4
            Final Answer: {'Train', 'Ferry', 'Air travel', 'Bus'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 86 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.how_to_get_here', 'travel.transportation.transport_operator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_operator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:10] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_operator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 6
            Final Answer: {'Greyhound Lines', 'Peter Pan Bus Lines', "The Woods Hole, Martha's Vineyard and Nantucket Steamship Authority", 'Fung Wah Bus Transportation', 'Concord Coach Lines', 'Amtrak'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 87 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.month'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.month ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.month ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 12
            Final Answer: {'November', 'May', 'February', 'December', 'April', 'January', 'March', 'July', 'September', 'August', 'October', 'June'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 88 / 158: {
          [('Main', '==', 'm.01cx_', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.travel_destination'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 89 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 42
            Final Answer: {'560892', '602380', '625087', '556189', '561153', '555249', '1368', '618147', '33787', '555860', '641071', '645169', '1832', '362839', '554948', '590433', '607367', '558438', '562994', '801444', '550871', '770816', '572479', '781188', '2493', '448477', '609690', '612192', '93383', '2505', '670585', '551911', '697197', '43298', '607931', '748060', '636748', '607871', '552476', '622748', '1778', '61392'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 90 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.total_90_day_vacant_residential_addresses', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'5209'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 91 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.hhuniv', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2396'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 92 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.estimated_number_foreclosures', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'4508'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 93 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.total_residential_addresses', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2493'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 94 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.estimated_number_of_mortgages', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'96982'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 95 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_2', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_2 ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_2 ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'1424'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 96 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_4', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_4 ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_4 ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2046'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 97 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_3', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_3 ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_3 ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'1753'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 98 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_0', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_0 ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_0 ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'1146'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 99 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_1', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_1 ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_1 ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'1218'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Current: 100 / 158
        Checking schema 100 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 42
            Final Answer: {'1980', '1999', '1800', '2004', '1990', '1991', '1840', '1940', '1993', '2008', '1950', '1870', '1996', '2000', '1850', '2001', '2010', '1790', '2011', '1920', '1930', '2005', '1960', '1820', '1994', '1970', '2007', '1900', '2003', '2006', '1810', '1890', '1910', '2009', '1998', '2002', '1830', '1880', '1860', '1995', '1997', '1992'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 101 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.total_90_day_vacant_residential_addresses', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 102 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.hhuniv', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 103 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.estimated_number_foreclosures', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 104 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.total_residential_addresses', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 105 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.estimated_number_of_mortgages', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 106 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_2', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_2 ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_2 ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 107 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_4', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_4 ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_4 ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 108 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_3', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_3 ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_3 ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 109 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_0', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_0 ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_0 ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 110 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_1', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_1 ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_1 ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 111 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Unemployment rate, Unemployment in the U.S., U.S. Bureau of Labor Statistics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 112 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 2
            Final Answer: {'Population, Population in the U.S., U.S. Census Bureau', 'United States Census Bureau, Population'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 113 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.total_90_day_vacant_residential_addresses', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_90_day_vacant_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States Department of Housing and Urban Development'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 114 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.hhuniv', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.hhuniv ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States Department of Housing and Urban Development'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 115 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.estimated_number_foreclosures', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_foreclosures ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States Department of Housing and Urban Development'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 116 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.total_residential_addresses', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.total_residential_addresses ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States Department of Housing and Urban Development'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 117 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.estimated_number_of_mortgages', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.estimated_number_of_mortgages ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'United States Department of Housing and Urban Development'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 118 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_2', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_2 ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_2 ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 119 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_4', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_4 ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_4 ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 120 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_3', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_3 ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_3 ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 121 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_0', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_0 ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_0 ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 122 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.rent50_1', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_1 ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.rent50_1 ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 123 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 67
            Final Answer: {'5.6', '8.3', '7.7', '3.4', '8.4', '5.1', '8.5', '3.5', '7.5', '2.7', '3.6', '5.5', '4.3', '5', '8.2', '8', '5.7', '7.6', '7.1', '8.9', '6.9', '4.9', '4.2', '5.9', '3.9', '6.1', '7.9', '4.1', '6.5', '4.6', '6.7', '8.7', '3.1', '7.2', '8.6', '3.7', '3.8', '8.8', '6.4', '7', '5.2', '2.6', '6.2', '4', '2.8', '9.3', '5.4', '3.3', '3.2', '7.8', '6.8', '6.6', '7.4', '9', '4.5', '5.3', '5.8', '2.9', '6', '3', '4.7', '9.1', '4.4', '7.3', '6.3', '8.1', '4.8'}
            Answers = 67, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 67, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 124 / 158: {
          [('Main', '==', 'm.01cx_', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 279
            Final Answer: {'1999', '2004', '1990', '1991', '2008', '1993', '1996', '2000', '2012', '2001', '2010', '2013', '2011', '2005', '1994', '2007', '2003', '2006', '2009', '1998', '2002', '1995', '1997', '1992'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 125 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.ofheo_price_change', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.ofheo_price_change ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.ofheo_price_change ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'-0.0514'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 126 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.bls_unemployment_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.bls_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.bls_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'0.0557'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 127 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.geolocation', 'location.geocode.datum'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.datum ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.datum ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 128 / 158: {
          [('Main', '==', 'm.01cx_', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 129 / 158: {
          [('Main', '==', 'm.01cx_', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 2
            Final Answer: {'Mayor', 'Councillor'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 130 / 158: {
          [('Main', '==', 'm.01cx_', ['base.petbreeds.city_with_dogs.top_breeds', 'base.petbreeds.dog_city_relationship.cities'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.petbreeds.city_with_dogs.top_breeds ?o1 . ?o1 fb:base.petbreeds.dog_city_relationship.cities ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.petbreeds.city_with_dogs.top_breeds ?o1 . ?o1 fb:base.petbreeds.dog_city_relationship.cities ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 131 / 158: {
          [('Main', '==', 'm.01cx_', ['location.capital_of_administrative_division.capital_of', 'location.administrative_division_capital_relationship.administrative_division'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 2
            Final Answer: {'Massachusetts', 'Suffolk County'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 132 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.ofheo_price_change', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.ofheo_price_change ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.ofheo_price_change ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 133 / 158: {
          [('Main', '==', 'm.01cx_', ['location.hud_foreclosure_area.bls_unemployment_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.bls_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.hud_foreclosure_area.bls_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 134 / 158: {
          [('Main', '==', 'm.01cx_', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 2
            Final Answer: {'Raymond Flynn', 'Thomas Menino'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 135 / 158: {
          [('Main', '==', 'm.01cx_', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Mayor of Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 136 / 158: {
          [('Main', '==', 'm.01cx_', ['base.petbreeds.city_with_dogs.top_breeds', 'base.petbreeds.dog_city_relationship.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:base.petbreeds.city_with_dogs.top_breeds ?o1 . ?o1 fb:base.petbreeds.dog_city_relationship.date ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:base.petbreeds.city_with_dogs.top_breeds ?o1 . ?o1 fb:base.petbreeds.dog_city_relationship.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 137 / 158: {
          [('Main', '==', 'm.01cx_', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 138 / 158: {
          [('Main', '==', 'm.01cx_', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 139 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'42.3583'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 140 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'-71.0603'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 141 / 158: {
          [('Main', '==', 'm.01cx_', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 2
            Final Answer: {'Cambridge'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 142 / 158: {
          [('Main', '==', 'm.01cx_', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 2
            Final Answer: {'1984', '1993'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 143 / 158: {
          [('Main', '==', 'm.01cx_', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'1993'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 144 / 158: {
          [('Main', '==', 'm.01cx_', ['base.petbreeds.city_with_dogs.top_breeds', 'base.petbreeds.dog_city_relationship.dog_breed'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.petbreeds.city_with_dogs.top_breeds ?o1 . ?o1 fb:base.petbreeds.dog_city_relationship.dog_breed ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.petbreeds.city_with_dogs.top_breeds ?o1 . ?o1 fb:base.petbreeds.dog_city_relationship.dog_breed ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 10
            Final Answer: {'Yorkshire Terrier', 'Golden Retriever', 'Labrador Retriever', 'Bulldog', 'German Shepherd Dog', 'Beagle', 'Cavalier King Charles Spaniel', 'Dachshund', 'Boxer', 'Boston Terrier'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 145 / 158: {
          [('Main', '==', 'm.01cx_', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.vacationer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Jennifer Garner'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 146 / 158: {
          [('Main', '==', 'm.01cx_', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Flag of Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 147 / 158: {
          [('Main', '==', 'm.01cx_', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 WHERE { fb:m.01cx_ fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'1917'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 148 / 158: {
          [('Main', '==', 'm.01cx_', ['location.capital_of_administrative_division.capital_of', 'location.administrative_division_capital_relationship.capital'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 149 / 158: {
          [('Main', '==', 'm.01cx_', ['base.aubreymaturin.place.mentions', 'base.aubreymaturin.place_mention.place'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.aubreymaturin.place.mentions ?o1 . ?o1 fb:base.aubreymaturin.place_mention.place ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.aubreymaturin.place.mentions ?o1 . ?o1 fb:base.aubreymaturin.place_mention.place ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 150 / 158: {
          [('Main', '==', 'm.01cx_', ['base.aubreymaturin.place.mentions', 'base.aubreymaturin.place_mention.book'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.aubreymaturin.place.mentions ?o1 . ?o1 fb:base.aubreymaturin.place_mention.book ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:base.aubreymaturin.place.mentions ?o1 . ?o1 fb:base.aubreymaturin.place_mention.book ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'The Fortune of War'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 151 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'Terriers'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 152 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.tv_producer', 'tv.tv_producer_term.producer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.tv_producer ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.tv_producer ?o1 . ?o1 fb:tv.tv_producer_term.producer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'Tim Minear'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 153 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 7
            Final Answer: {'Olivia Williams', 'Rockmond Dunbar', 'Laura Allen', 'Jamie Denbo', 'Donal Logue', 'Michael Raymond-James', 'Kimberly Quinn'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 154 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.original_network', 'tv.tv_network_duration.network'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'FX'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 155 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'Miriam Foster'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 156 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.original_network', 'tv.tv_network_duration.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'Terriers'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 157 / 158: {
          [('Main', '==', 'm.0cnyhqn', ['tv.tv_program.tv_producer', 'tv.tv_producer_term.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.tv_producer ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0cnyhqn fb:tv.tv_program.tv_producer ?o1 . ?o1 fb:tv.tv_producer_term.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0cnyhqn'}
            Query return lines = 1
            Final Answer: {'Terriers'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        150 / 158 coarse schemas kept with ans_size > 0.
      } [1.985s]
      Coarse level ended, resulting in 150 schemas.
    } [6.311s]
    Type level searching (total types = 10): {
      Current: 0 / 150
[{'music.genre'}]
[{'music.record_label'}]
[{'broadcast.content'}]
[{'music.album'}]
[{'music.recording'}]
[{'type.datetime'}]
[{'location.location'}]
[{'music.composition'}]
[{'music.composition'}]
[{'travel.tourist_attraction'}]
[{'metropolitan_transit.transit_system'}]
[{'travel.accommodation'}]
[{'location.country'}]
[{'base.infection.biosafety_facility'}]
[{'government.government_agency'}]
[{'people.person'}]
[{'music.composition'}]
[{'fictional_universe.fictional_character'}]
[{'sports.sports_team'}]
[{'location.neighborhood'}]
[{'type.int'}]
[{'location.us_county'}]
[{'location.location'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.location'}]
[{'base.biblioness.bibs_topic'}]
[{'base.biblioness.bibs_topic'}]
[{'film.film'}]
[{'book.newspaper'}]
[{'location.location'}]
[{'location.postal_code'}]
[{'location.location'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'aviation.airport'}]
[{'book.written_work'}]
[{'fictional_universe.fictional_character'}]
[{'visual_art.artwork'}]
[{'type.int'}]
[{'user.joehughes.default_domain.transit_agency'}]
[{'sports.mascot'}]
[{'visual_art.color'}]
[{'sports.sports_facility'}]
[{'sports.fight_song'}]
[{'ice_hockey.hockey_coach'}]
[{'sports.sports_team_location'}]
[{'location.country'}]
[{'type.datetime'}]
[{'tv.tv_series_season'}]
[{'tv.tv_genre'}]
[{'type.datetime'}]
[{'type.int'}]
[{'tv.tv_series_episode'}]
[{'type.int'}]
[{'type.int'}]
[{'language.human_language'}]
[{'tv.tv_theme_song'}]
[{'location.country'}]
[{'location.country'}]
[{'music.group_membership'}, {'music.musical_group'}]
[{'music.group_membership'}, {'music.group_member'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_program_guest'}]
[{'music.group_membership'}, {'type.datetime'}]
[{'music.group_membership'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
[{'music.group_membership'}, {'music.performance_role'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'travel.transportation'}, {'travel.transport_terminus'}]
[{'travel.travel_destination_monthly_climate'}, {'type.float'}]
[{'travel.travel_destination_monthly_climate'}, {'type.float'}]
[{'travel.transportation'}, {'travel.travel_destination'}]
[{'travel.travel_destination_monthly_climate'}, {'type.int'}]
[{'travel.transportation'}, {'travel.transportation_mode'}]
[{'travel.transportation'}, {'travel.transport_operator'}]
[{'travel.travel_destination_monthly_climate'}, {'time.month'}]
[{'travel.travel_destination_monthly_climate'}, {'travel.travel_destination'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
      Current: 100 / 150
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'base.petbreeds.dog_city_relationship'}, {'base.petbreeds.city_with_dogs'}]
[{'location.administrative_division_capital_relationship'}, {'location.administrative_division'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'base.petbreeds.dog_city_relationship'}, {'type.datetime'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'base.petbreeds.dog_city_relationship'}, {'base.petbreeds.dog_breed'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.celebrity'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'location.administrative_division_capital_relationship'}, {'location.capital_of_administrative_division'}]
[{'base.aubreymaturin.place_mention'}, {'base.aubreymaturin.place'}]
[{'base.aubreymaturin.place_mention'}, {'base.aubreymaturin.book'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'tv.tv_producer_term'}, {'tv.tv_producer'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.tv_network_duration'}, {'tv.tv_network'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
[{'tv.tv_network_duration'}, {'tv.tv_program'}]
[{'tv.tv_producer_term'}, {'tv.tv_program'}]
      27 typed schemas retrieved from 150 coarse schemas.
      Calculating F1 for 27 typed schemas: {
        Current: 0 / 27
        Checking schema 0 / 27: {
          [('Main', '==', 'm.016dxh', ['music.artist.origin']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.origin ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.origin ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 27: {
          [('Main', '==', 'm.016dxh', ['music.artist.origin']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.origin ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.origin ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 2 / 27: {
          [('Main', '==', 'm.016dxh', ['music.artist.origin']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.origin ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:11] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016dxh fb:music.artist.origin ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016dxh'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 3 / 27: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_location.country']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 4 / 27: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_location.country']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 5 / 27: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_location.country']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 6 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.contains']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 7 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.contains']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 8 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.contains']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 9 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.contains_major_portion_of']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Greater Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 10 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.contains_major_portion_of']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 11 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.contains_major_portion_of']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.contains_major_portion_of ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 12 / 27: {
          [('Main', '==', 'm.01cx_', ['location.hud_county_place.place']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Boston'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 13 / 27: {
          [('Main', '==', 'm.01cx_', ['location.hud_county_place.place']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 14 / 27: {
          [('Main', '==', 'm.01cx_', ['location.hud_county_place.place']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.hud_county_place.place ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 15 / 27: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_location.state']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.state ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.state ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 16 / 27: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_location.state']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.state ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.state ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Massachusetts'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 17 / 27: {
          [('Main', '==', 'm.01cx_', ['base.biblioness.bibs_location.state']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.state ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:base.biblioness.bibs_location.state ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Massachusetts'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 18 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.containedby']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 19 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.containedby']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Massachusetts'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 20 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.containedby']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01cx_ fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Massachusetts'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 21 / 27: {
          [('Main', '==', 'm.01cx_', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'location.us_state', 'government.governmental_jurisdiction'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 22 / 27: {
          [('Main', '==', 'm.01cx_', ['location.capital_of_administrative_division.capital_of', 'location.administrative_division_capital_relationship.administrative_division']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.administrative_division_capital_relationship'}, {'location.us_state', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 1
            Final Answer: {'Massachusetts'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 23 / 27: {
          [('Main', '==', 'm.01cx_', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'symbols.flag_use'}, {'location.us_state', 'symbols.flag_referent'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 24 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'location.location', 'location.place_with_neighborhoods'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 2
            Final Answer: {'Cambridge'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 25 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'location.location', 'military.military_unit_place_of_origin'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 26 / 27: {
          [('Main', '==', 'm.01cx_', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.adjoining_relationship'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:12] Q_Schema Request: {
            WebQ_698|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01cx_ fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01cx_'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        9 / 27 typed schemas kept with ans_size > 0.
      } [0.395s]
      Typed level ended, resulting in 159 schemas.
    } [0.405s]
    Time level searching (total times = 0): {
      Current: 0 / 159
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'broadcast.content.production_start', 'broadcast.content.production_end'}]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'metropolitan_transit.transit_system.inception'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'ice_hockey.hockey_coach.first_year_with_current_team'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_series_season.to', 'tv.tv_series_season.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.group_membership.end', 'music.group_membership.start'}, set()]
self.var_time_preds: [{'music.group_membership.end', 'music.group_membership.start'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'music.group_membership.end', 'music.group_membership.start'}, set()]
self.var_time_preds: [{'music.group_membership.end', 'music.group_membership.start'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [{'music.group_membership.end', 'music.group_membership.start'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
      Current: 100 / 159
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'base.petbreeds.dog_city_relationship.date'}, set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'base.petbreeds.dog_city_relationship.date'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'base.petbreeds.dog_city_relationship.date'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'base.aubreymaturin.book.copyright_date'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 159 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 159 schemas.
    } [0.004s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 159
[set()]
[set()]
[{'broadcast.content.production_start', 'broadcast.content.production_end'}]
[{'music.album.release_date'}]
[{'music.recording.date'}]
[set()]
[set()]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[set()]
[{'metropolitan_transit.transit_system.inception'}]
[set()]
[set()]
[set()]
[{'government.government_agency.date_founded'}]
[{'people.person.date_of_birth'}]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[set()]
[{'sports.sports_team.founded'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[set()]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'ice_hockey.hockey_coach.first_year_with_current_team'}]
[set()]
[set()]
[set()]
[{'tv.tv_series_season.to', 'tv.tv_series_season.from'}]
[set()]
[set()]
[set()]
[{'tv.tv_series_episode.air_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'music.group_membership.end', 'music.group_membership.start'}, set()]
[{'music.group_membership.end', 'music.group_membership.start'}, set()]
[{'award.award_nomination.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
[set(), set()]
[{'music.group_membership.end', 'music.group_membership.start'}, set()]
[{'music.group_membership.end', 'music.group_membership.start'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[{'music.group_membership.end', 'music.group_membership.start'}, set()]
[{'award.award_nomination.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
      Current: 100 / 159
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'base.petbreeds.dog_city_relationship.date'}, set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'base.petbreeds.dog_city_relationship.date'}, set()]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'base.petbreeds.dog_city_relationship.date'}, set()]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
[set(), set()]
[set(), {'base.aubreymaturin.book.copyright_date'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[{'tv.tv_producer_term.from', 'tv.tv_producer_term.to'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'location.administrative_division_capital_relationship.from', 'location.administrative_division_capital_relationship.to'}, set()]
[set(), set()]
      0 ordinal schemas retrieved from 159 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 159 schemas.
    } [0.004s]
    [2020-12-03 14:27:12] buffer saved.
    159 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0698_schema].
  } [1m31.678s]
  Entering Q 699 / 5810 [b'what makes einstein smart?']: {
    Show 3 E + 10 T + 0 Tm + 0 Ord = 13 linkings: {
      #00 Entity: [2, 3) (einstein) == m.0jcx (Albert_Einstein) {'score': 7882.528445, 'source': 0.0}
      #01 Entity: [3, 4) (smart) == m.08c35d (smart) {'score': 19486.281809, 'source': 2.0}
      #02 Entity: [3, 4) (smart) == m.0hfkk (Smart_(automobile)) {'score': 1.227826, 'source': 1.0}
      #03 Type: [0, 1) (what) == location.us_state (us state) {'sim': 0.655521}
      #04 Type: [0, 1) (what) == media_common.lost_work (lost work) {'sim': 0.652623}
      #05 Type: [0, 2) (what makes) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.650781}
      #06 Type: [0, 2) (what makes) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.649102}
      #07 Type: [0, 1) (what) == business.company_name_change (organization name change) {'sim': 0.645394}
      #08 Type: [0, 2) (what makes) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.643558}
      #09 Type: [0, 2) (what makes) == chemistry.phase_of_matter (phase of matter) {'sim': 0.640183}
      #10 Type: [0, 2) (what makes) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.638377}
      #11 Type: [0, 1) (what) == government.us_president (us president) {'sim': 0.626289}
      #12 Type: [0, 2) (what makes) == film.film_company_role_or_service (film company role or service) {'sim': 0.618068}
    } [0.000s]
    13 link data save to file.
    Coarse level searching (total entities = 3): {
      [Len-1||F1/3] (2020-12-03 14:28:37) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.08c35d ?p1 ?o1 . }
        [2020-12-03 14:28:37] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.08c35d ?p1 ?o1 . }
          Query return lines = 18
        } [0.007s]
        Filt_Query_Ret = 9 / 18 ( 0.007s)
        [Len-1||F1/3||3/3-1] (2020-12-03 14:28:37) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.08c35d ?p1 ?o1 . ?o1 ?p2 fb:m.0jcx . }
          [2020-12-03 14:28:37] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.08c35d ?p1 ?o1 . ?o1 ?p2 fb:m.0jcx . }
            Query return lines = 0
          } [0.023s]
          Filt_Query_Ret = 0 / 0 ( 0.023s)
        } [0.023s]
      } [0.030s]
      [Len-1||F2/3] (2020-12-03 14:28:37) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0hfkk ?p1 ?o1 . }
        [2020-12-03 14:28:37] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0hfkk ?p1 ?o1 . }
          Query return lines = 14
        } [0.007s]
        Filt_Query_Ret = 3 / 14 ( 0.007s)
        [Len-1||F2/3||3/3-1] (2020-12-03 14:28:37) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0hfkk ?p1 ?o1 . ?o1 ?p2 fb:m.0jcx . }
          [2020-12-03 14:28:37] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0hfkk ?p1 ?o1 . ?o1 ?p2 fb:m.0jcx . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
      } [0.028s]
      [Len-1||F3/3] (2020-12-03 14:28:37) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0jcx ?p1 ?o1 . }
        [2020-12-03 14:28:37] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0jcx ?p1 ?o1 . }
          Query return lines = 68
        } [0.005s]
        Filt_Query_Ret = 47 / 68 ( 0.006s)
        [Len-1||F3/3||1/3-1] (2020-12-03 14:28:37) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 fb:m.08c35d . }
          [2020-12-03 14:28:37] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 fb:m.08c35d . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
        [Len-1||F3/3||2/3-1] (2020-12-03 14:28:37) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 fb:m.0hfkk . }
          [2020-12-03 14:28:37] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 fb:m.0hfkk . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
      } [0.027s]
      [Len-2||F1/3] (2020-12-03 14:28:37) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.08c35d ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:28:37] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.08c35d ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 247
        } [0.026s]
        Filt_Query_Ret = 6 / 247 ( 0.027s)
        [Len-2||F1/3||3/3-1] (2020-12-03 14:28:37) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.08c35d ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0jcx . }
          [2020-12-03 14:28:37] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.08c35d ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0jcx . }
            Query return lines = 0
          } [0.014s]
          Filt_Query_Ret = 0 / 0 ( 0.014s)
        } [0.014s]
        [Len-2||F1/3||3/3-2] (2020-12-03 14:28:37) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.08c35d ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0jcx . }
          [2020-12-03 14:28:37] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.08c35d ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0jcx . }
            Query return lines = 2
          } [0.740s]
          Filt_Query_Ret = 0 / 2 ( 0.740s)
        } [0.740s]
      } [0.781s]
      [Len-2||F2/3] (2020-12-03 14:28:38) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0hfkk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:28:38] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0hfkk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 94
        } [0.047s]
        Filt_Query_Ret = 8 / 94 ( 0.047s)
        [Len-2||F2/3||3/3-1] (2020-12-03 14:28:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0hfkk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0jcx . }
          [2020-12-03 14:28:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0hfkk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0jcx . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-2||F2/3||3/3-2] (2020-12-03 14:28:38) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0hfkk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0jcx . }
          [2020-12-03 14:28:38] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0hfkk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0jcx . }
            Query return lines = 0
          } [1.947s]
          Filt_Query_Ret = 0 / 0 ( 1.947s)
        } [1.948s]
      } [2.001s]
      [Len-2||F3/3] (2020-12-03 14:28:40) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:28:40] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 1259
        } [0.095s]
        Filt_Query_Ret = 40 / 1259 ( 0.100s)
        [Len-2||F3/3||1/3-1] (2020-12-03 14:28:40) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.08c35d . }
          [2020-12-03 14:28:40] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.08c35d . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-2||F3/3||1/3-2] (2020-12-03 14:28:40) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.08c35d . }
          [2020-12-03 14:28:40] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.08c35d . }
            Query return lines = 1
          } [0.092s]
          Filt_Query_Ret = 0 / 1 ( 0.092s)
        } [0.092s]
        [Len-2||F3/3||2/3-1] (2020-12-03 14:28:40) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0hfkk . }
          [2020-12-03 14:28:40] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0hfkk . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F3/3||2/3-2] (2020-12-03 14:28:40) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0hfkk . }
          [2020-12-03 14:28:40] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0jcx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0hfkk . }
            Query return lines = 0
          } [0.076s]
          Filt_Query_Ret = 0 / 0 ( 0.077s)
        } [0.077s]
      } [0.290s]
      113 coarse schemas retrieved from scratch.
      Calculating F1 for 113 coarse schemas: {
        Current: 0 / 113
        Checking schema 0 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.country_of_origin'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.country_of_origin ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 1
            Final Answer: {'United Kingdom'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 1 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.air_date_of_first_episode'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.08c35d fb:tv.tv_program.air_date_of_first_episode ?o1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 WHERE { fb:m.08c35d fb:tv.tv_program.air_date_of_first_episode ?o1 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 1
            Final Answer: {'1994'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 2 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.seasons'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.seasons ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.seasons ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 16
            Final Answer: {'SMart - Season 7', 'SMart - Season 12', 'SMart - Season 8', 'SMart - Season 13', 'SMart - Season 16', 'SMart - Season 3', 'SMart - Season 4', 'SMart - Season 10', 'SMart - Season 2', 'SMart - Season 15', 'SMart - Season 14', 'SMart - Season 9', 'SMart - Season 6', 'SMart - Season 11', 'SMart - Season 5', 'SMart - Season 1'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 3 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 1
            Final Answer: {"Children's television series"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 4 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.air_date_of_final_episode'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.08c35d fb:tv.tv_program.air_date_of_final_episode ?o1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 WHERE { fb:m.08c35d fb:tv.tv_program.air_date_of_final_episode ?o1 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 5 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.episodes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.episodes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.episodes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 201
            Final Answer: {'Series 3, Episode 7', 'Series 16, Episode 4', 'Series 3, Episode 5', 'Series 9, Episode 3', 'Christmas Special', 'Series 15, Episode 12', 'Series 6, Episode 1', 'Series 12, Episode 3', 'Series 12, Episode 13', 'Series 9, Episode 5', 'Series 16, Episode 11', 'Series 3, Episode 3', 'Series 15, Episode 8', 'Series 2, Episode 11', 'Series 1, Episode 5', 'Series 9, Episode 9', 'Series 3, Episode 8', 'Series 14, Episode 10', 'Series 13, Episode 11', 'Series 7, Episode 9', 'Series 15, Episode 2', 'Series 9, Episode 4', 'Series 11, Episode 14', 'Series 16, Episode 6', 'Series 11, Episode 8', 'Series 6, Episode 9', 'Series 7, Episode 7', 'Series 5, Episode 12', 'Series 13, Episode 9', 'Series 2, Episode 10', 'Series 9, Episode 13', 'Series 7, Episode 2', 'Series 13, Episode 13', 'Series 11, Episode 1', 'Series 5, Episode 4', 'Series 14, Episode 6', 'Series 1, Episode 4', 'Series 12, Episode 15', 'Series 14, Episode 7', 'Series 3, Episode 4', 'Series 6, Episode 10', 'Series 16, Episode 5', 'Series 13, Episode 6', 'Series 6, Episode 3', 'Series 8, Episode 5', 'Series 2, Episode 7', 'Series 7, Episode 10', 'Series 13, Episode 7', 'Series 9, Episode 12', 'Series 3, Episode 1', 'Series 11, Episode 9', 'Series 5, Episode 2', 'Series 9, Episode 7', 'Series 12, Episode 8', 'Series 8, Episode 10', 'Series 11, Episode 6', 'Series 14, Episode 15', 'Series 4, Episode 4', 'Series 11, Episode 13', 'Series 8, Episode 7', 'Series 5, Episode 10', 'Series 4, Episode 10', 'Series 8, Episode 11', 'Series 9, Episode 11', 'Series 10, Episode 2', 'Series 2, Episode 6', 'Series 5, Episode 3', 'Series 16, Episode 10', 'Series 2, Episode 1', 'Series 4, Episode 1', 'Series 4, Episode 2', 'Series 8, Episode 2', 'Series 16, Episode 12', 'Series 11, Episode 12', 'Series 11, Episode 5', 'Series 10, Episode 5', 'Series 16, Episode 13', 'Series 2, Episode 5', 'Series 12, Episode 10', 'Series 14, Episode 12', 'Series 2, Episode 2', 'Series 6, Episode 11', 'Series 14, Episode 9', 'Series 4, Episode 7', 'Series 5, Episode 11', 'Series 6, Episode 12', 'Series 8, Episode 3', 'Series 8, Episode 13', 'Series 12, Episode 6', 'Series 1, Episode 3', 'Series 11, Episode 4', 'Series 5, Episode 9', 'Series 13, Episode 8', 'Series 12, Episode 9', 'Series 4, Episode 11', 'Series 4, Episode 5', 'Series 15, Episode 7', 'Series 10, Episode 6', 'Series 1, Episode 2', 'Series 16, Episode 1', 'Series 14, Episode 3', 'Series 7, Episode 5', 'Series 14, Episode 8', 'Series 6, Episode 5', 'Series 10, Episode 1', 'Series 11, Episode 15', 'Series 9, Episode 2', 'Series 14, Episode 4', 'Series 14, Episode 11', 'Series 11, Episode 10', 'Series 15, Episode 13', 'Series 12, Episode 7', 'Series 15, Episode 5', 'Series 13, Episode 14', 'Series 15, Episode 9', 'Series 3, Episode 11', 'Series 4, Episode 8', 'Series 5, Episode 5', 'Series 7, Episode 1', 'Series 7, Episode 8', 'Series 13, Episode 15', 'Series 12, Episode 1', 'Series 9, Episode 6', 'Series 6, Episode 6', 'Series 15, Episode 4', 'Series 14, Episode 1', 'Series 14, Episode 14', 'Series 14, Episode 13', 'Series 13, Episode 12', 'Series 4, Episode 6', 'Series 16, Episode 9', 'Series 2, Episode 8', 'Series 7, Episode 4', 'Series 2, Episode 12', 'Series 13, Episode 3', 'Series 12, Episode 4', 'Series 12, Episode 14', 'Series 2, Episode 4', 'Series 3, Episode 12', 'Series 4, Episode 3', 'Series 4, Episode 9', 'Series 10, Episode 7', 'Series 12, Episode 2', 'Series 6, Episode 4', 'Series 8, Episode 12', 'Series 6, Episode 7', 'Series 15, Episode 6', 'Series 9, Episode 1', 'Series 5, Episode 8', 'Series 11, Episode 7', 'Series 8, Episode 9', 'Series 15, Episode 1', 'Series 4, Episode 12', 'Series 10, Episode 4', 'Series 10, Episode 9', 'Series 3, Episode 10', 'Series 9, Episode 10', 'Series 1, Episode 1', 'Series 2, Episode 3', 'Series 3, Episode 2', 'Series 12, Episode 5', 'Series 13, Episode 5', 'Series 9, Episode 8', 'Series 5, Episode 7', 'Series 13, Episode 4', 'Series 11, Episode 11', 'Series 7, Episode 11', 'Series 5, Episode 6', 'Series 16, Episode 8', 'Series 15, Episode 11', 'Series 12, Episode 12', 'Series 16, Episode 3', 'Series 10, Episode 10', 'Series 6, Episode 2', 'Series 1, Episode 6', 'Series 13, Episode 2', 'Series 6, Episode 8', 'Series 2, Episode 9', 'Series 5, Episode 1', 'Series 7, Episode 6', 'Series 14, Episode 2', 'Series 8, Episode 4', 'Series 3, Episode 6', 'Series 8, Episode 8', 'Series 13, Episode 1', 'Series 11, Episode 2', 'Series 7, Episode 3', 'Series 11, Episode 3', 'Series 8, Episode 6', 'Series 8, Episode 1', 'Series 10, Episode 3', 'Series 15, Episode 10', 'Series 16, Episode 7', 'Series 12, Episode 11', 'Series 10, Episode 8', 'Series 13, Episode 10', 'Series 15, Episode 3', 'Series 3, Episode 9', 'Series 7, Episode 12', 'Series 16, Episode 2', 'Series 14, Episode 5'}
            Answers = 201, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 201, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 6 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.currently_in_production'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.currently_in_production ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.currently_in_production ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 7 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.episode_running_time'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.08c35d fb:tv.tv_program.episode_running_time ?o1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 WHERE { fb:m.08c35d fb:tv.tv_program.episode_running_time ?o1 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 3
            Final Answer: {'30', '60', '25'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 8 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.languages'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.languages ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.08c35d fb:tv.tv_program.languages ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 9 / 113: {
          [('Main', '==', 'm.0hfkk', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0hfkk fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 WHERE { fb:m.0hfkk fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 1
            Final Answer: {'1994'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 10 / 113: {
          [('Main', '==', 'm.0hfkk', ['organization.organization.founders'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hfkk fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hfkk fb:organization.organization.founders ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 1
            Final Answer: {'Nicolas Hayek'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 11 / 113: {
          [('Main', '==', 'm.0hfkk', ['dataworld.gardening_hint.split_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hfkk fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0hfkk fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 1
            Final Answer: {'Smart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 12 / 113: {
          [('Main', '==', 'm.0jcx', ['book.author.series_written_or_contributed_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:book.author.series_written_or_contributed_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:book.author.series_written_or_contributed_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'The Collected Papers of Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 13 / 113: {
          [('Main', '==', 'm.0jcx', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 14 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0jcx fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 WHERE { fb:m.0jcx fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'1879'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 15 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 6
            Final Answer: {'Weimar Republic', 'Switzerland', 'Germany', 'United States of America', 'Austria', 'German Empire'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 16 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 4
            Final Answer: {'Jewish people', 'German American', 'Germans', 'Ashkenazi Jews'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 17 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'Hermann Einstein', 'Pauline Einstein'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 18 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 4
            Final Answer: {'Atheism', 'Deism', 'Agnosticism', 'Judaism'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 19 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0jcx fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 WHERE { fb:m.0jcx fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'1.75'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 20 / 113: {
          [('Main', '==', 'm.0jcx', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Princeton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 21 / 113: {
          [('Main', '==', 'm.0jcx', ['law.inventor.inventions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:law.inventor.inventions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:law.inventor.inventions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Einstein refrigerator'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 22 / 113: {
          [('Main', '==', 'm.0jcx', ['education.academic.advisees'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:education.academic.advisees ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:education.academic.advisees ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 6
            Final Answer: {'Mahmoud Hessaby', 'Ernst G. Straus', 'Leó Szilárd', 'Nathan Rosen', 'Raziuddin Siddiqui', 'Kurt Mendelssohn'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 23 / 113: {
          [('Main', '==', 'm.0jcx', ['base.activism.activist.area_of_activism'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 5
            Final Answer: {'Peace', 'Nonviolence', 'Zionism', 'Anti-fascism', 'Humanitarian'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 24 / 113: {
          [('Main', '==', 'm.0jcx', ['base.kwebbase.kwtopic.assessment'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 25 / 113: {
          [('Main', '==', 'm.0jcx', ['base.kwebbase.kwtopic.connections_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.connections_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.connections_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 29
            Final Answer: {'heinrich rudolf hertz studied by albert einstein', 'walther hermann nernst met albert einstein', 'max von laue early follower of albert einstein', 'hermann von helmholtz laid basis for work of albert einstein', 'ernest rutherford corresponded with albert einstein', 'paul adrien maurice dirac work related to albert einstein', 'benjamin britten met albert einstein', 'relativity theory developed by albert einstein', 'george francis fitzgerald re-interpreted by albert einstein', 'paul ambroise valery knew albert einstein', 'hendrik antoon lorentz influenced albert einstein', 'niels henrik david bohr opposed by albert einstein', 'max born work related to albert einstein', 'philipp eduard anton lenard theory proved by albert einstein', 'oliver heaviside anticipated albert einstein', 'edward teller lobbied roosevelt with albert einstein', 'erwin schrodinger a pal of albert einstein', 'james clerk maxwell laid ground for albert einstein', 'laser based on discovery by albert einstein', 'enrico fermi knew albert einstein', 'frederick alexander lindemann a pal of albert einstein', 'gustav robert kirchhoff influenced albert einstein', 'werner karl heisenberg theory rejected by albert einstein', 'paul langevin might have anticipated albert einstein', 'joseph john thomson work related to albert einstein', 'sergei mikhailovich eisenstein met albert einstein', 'ernst mach influenced albert einstein', 'robert brown work related to albert einstein', 'max planck a supporter of albert einstein'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 26 / 113: {
          [('Main', '==', 'm.0jcx', ['base.eating.practicer_of_diet.diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.eating.practicer_of_diet.diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.eating.practicer_of_diet.diet ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Vegetarianism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 27 / 113: {
          [('Main', '==', 'm.0jcx', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Historic Recordings 1930-1947'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 28 / 113: {
          [('Main', '==', 'm.0jcx', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 5
            Final Answer: {"Einsteins speches and broadcasts: I'm an American [1940]", "The Savoy Hotel fund-raising dinner [1930]: Einstein's speech 'Jewish_community'", 'Einsteins speches and broadcasts: The post-war world [1945]', 'Einsteins speches and broadcasts: The common language of science [1941]', "The Savoy Hotel fund-raising dinner [1930]: Bernard Shaw's speech"}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 29 / 113: {
          [('Main', '==', 'm.0jcx', ['influence.influence_node.influenced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 18
            Final Answer: {'Bernhard Riemann', 'Hermann Minkowski', 'Mahatma Gandhi', 'Arthur Schopenhauer', 'George Bernard Shaw', 'Ernst Mach', 'Isaac Newton', 'Fyodor Dostoyevsky', 'Moritz Schlick', 'Riazuddin', 'Hendrik Lorentz', 'Baruch Spinoza', 'Paul Valéry', 'Karl Pearson', 'James Clerk Maxwell', 'David Hume', 'Thomas Young', 'M. Gandhi'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 30 / 113: {
          [('Main', '==', 'm.0jcx', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 44
            Final Answer: {'Einstein manifold', "Einstein's Dreams", 'Bose–Einstein statistics', 'Russell–Einstein Manifesto', 'Jack D. Weiler Hospital of the Albert Einstein College of Medicine Division', 'Einstein Symposium', 'Einstein solid', 'Albert Einstein Academy Charter School', 'Einstein Cross', 'Ben Shemen Youth Village', 'Einstein refrigerator', 'Albert Einstein Hospital', 'Albert Einstein Award', 'Einstein relation', 'Einstein', 'Bose–Einstein condensate', 'EPR paradox', 'Albert Einstein House', 'Einstein Tower', 'Einstein–Szilárd letter', 'Albert Einstein Institution', 'Albert Einstein Medal', 'The Einstein Factor', 'Universidad Albert Einstein', 'Einstein notation', 'Photoelectrochemical process', 'Einstein ring', 'Tatung Einstein', 'Higher-dimensional Einstein gravity', '2001 Einstein', 'Einstein tensor', 'Einstein field equations', 'Einstein Observatory', 'Little Einsteins', 'Einstein synchronisation', 'Einstein force', 'Einsteinium', 'Albert Einstein High School', 'Einstein radius', 'Einstein syndrome', 'Albert Einstein Medical Center', 'Bohr–Einstein debates', 'Albert Einstein College of Medicine'}
            Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 31 / 113: {
          [('Main', '==', 'm.0jcx', ['book.author.book_editions_published'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'The World As I See It'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 32 / 113: {
          [('Main', '==', 'm.0jcx', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 6
            Final Answer: {'Insignificance', 'Einstein Revealed', "Einstein's Big Idea", 'Einstein and Eddington', 'Young Einstein', 'I.Q.'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 33 / 113: {
          [('Main', '==', 'm.0jcx', ['people.family_member.family'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.family_member.family ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.family_member.family ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Einstein family'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 34 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 194
            Final Answer: {'“I know not with what weapons World War III will be fought, but World War IV will be fought with sticks and stones.”', 'I have no special talent. I am only passionately curious.', 'One strength of the communist system of the East is that it has some of the character of a religion and inspires the emotions of a religion.', 'Not everything that counts can be counted, and not everything that can be counted counts.', 'We all try to escape pain and death, while we seek what is pleasant.', 'Thought is the organizing factor in man, intersected between the causal primary instincts and the resulting actions.', 'Creating a new theory is not like destroying an old barn and erecting a skyscraper in its place. It is rather like climbing a mountain, gaining new and wider views, discovering unexpected connections between our starting points and its rich environment. But the point from which we started out still exists and can be seen, although it appears smaller and forms a tiny part of our broad view gained by the mastery of the obstacles on our adventurous way up.', "According to this conception, the sole function of education was to open the way to thinking and knowing, and the school, as the outstanding organ for the people's education, must serve that end exclusively.", 'It is a very high goal which, with our weak powers, we can reach only very inadequately, but which gives a sure foundation to our aspirations and valuations.', 'At the same time, as social beings, we are moved in the relations with our fellow beings by such feelings as sympathy, pride, hate, need for power, pity, and so on.', 'Each makes this cosmos and its construction the pivot of his emotional life, in order to find in this way peace and security which he can not find in the narrow whirlpool of personal experience.', 'It is theory that decides what can be observed.', 'Never lose a holy curiosity.', 'We have penetrated far less deeply into the regularities obtaining within the realm of living things, but deeply enough nevertheless to sense at least the rule of fixed necessity... what is still lacking here is a grasp of the connections of profound generality, but not a knowledge of order itself.', "To understand the world one must not be worrying about one's self.", 'Great spirits have always found violent opposition from mediocrities. The latter cannot understand it when a man does not thoughtlessly submit to hereditary prejudices, but honestly and courageously uses his intelligence.', 'When the number of factors coming into play in a phenomenological complex is too large scientific method in most cases fails.', 'In that way imagination and intelligence enter into our existence in the part of servants of the primary instincts.', 'Only one who devotes himself to a cause with his whole strength and soul can be a true master. For this reason mastery demands all of a person.', 'Intellectuals solve problems; geniuses prevent them.', 'It is strange to be known so universally and yet to be so lonely.', 'There are only two ways to live your life. One is as though nothing is a miracle. The other is as though everything is a miracle.', 'We shall require a substantially new manner of thinking if mankind is to survive.', 'The pioneers of a warless world are the young men and women who refuse military service.', 'Nothing that I can do will change the structure of the universe. But maybe, by raising my voice I can help the greatest of all causes -- goodwill among men and peace on earth.', "The fear of death is the most unjustified of all fears, for there's no risk of accident for someone who's dead.", 'If A equals success, then the formula is A equals X plus Y and Z, with X being work, Y play, and Z keeping your mouth shut.', 'Science can only ascertain what is, but not what should be, and outside of its domain value judgments of all kinds remain necessary.', 'Never do anything against conscience even if the state demands it.', 'A knowledge of the existence of something we cannot penetrate, of the manifestations of the profoundest reason and the most radiant beauty, which are only accessible to our reason in their most elementary forms—it is this knowledge and this emotion that constitute the truly religious attitude; in this sense, and in this alone, I am a deeply religious man.', 'One need only think of the weather, in which case the prediction even for a few days ahead is impossible.', 'The hardest thing in the world to understand is the income tax.', 'It should be possible to explain the laws of physics to a barmaid.', "All these primary impulses, not easily described in words, are the springs of man's actions.", 'On the other hand, the concept owes its meaning and its justification exclusively to the totality of the sense impressions which we associate with it.', 'And the high destiny of the individual is to serve rather than to rule, or to impose himself in any other way.', 'The difference between what the most and the least learned people know is inexpressibly trivial in relation to that which is unknown.', '""The difference between genius and stupidity is that genius has its limits.""', 'Gravitation can not be held responsible for people falling in love', 'The legs are the wheels of creativity.', 'Reality is merely an illusion, albeit a very persistent one.', 'We are all ruled in what we do by impulses; and these impulses are so organized that our actions in general serve for our self preservation and that of the race.', "I can't believe that God plays dice with the universe.", "Only two things are infinite, the universe and human stupidity, and I'm not sure about the former.", 'The most important human endeavor is the striving for morality in our actions. Our inner balance and even our very existence depend on it. Only morality in our actions can give beauty and dignity to life.', 'As far as the laws of mathematics refer to reality, they are not certain, and as far as they are certain, they do not refer to reality.', 'The grand aim of all science is to cover the greatest number of empirical facts by logical deduction from the smallest number of hypotheses or axioms.', "Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.", 'Man tries to make for himself in the fashion that suits him best a simplified and intelligible picture of the world; he then tries to some extent to substitute this cosmos of his for the world of experience, and thus to overcome it.', 'Knowledge of what is does not open the door directly to what should be.', 'Science without religion is lame, religion without science is blind.', 'How do I work? I grope.', 'The most incomprehensible thing about the world is that it is comprehensible.', 'Never memorize what you can look up in books', 'I live in that solitude which is painful in youth, but delicious in the years of maturity.', 'Sometimes one pays most for the things one gets for nothing.', 'Confusion of goals and perfection of means seems, in my opinion, to characterize our age.', 'To know what is impenetrable to us really exists, manifesting itself as the highest wisdom and the most radiant beauty... this knowledge, this feeling is at the center of true religiousness.', 'The only real valuable thing is intuition.', 'The real difficulty, the difficulty which has baffled the sages of all times, is rather this: how can we make our teaching so potent in the motional life of man, that its influence should withstand the pressure of the elemental psychic forces in the individual?', "When a man sits with a pretty girl for an hour, it seems like a minute. But let him sit on a hot stove for a minute -- then it's longer than any hour. That's relativity!", 'The attempt to combine wisdom and power has only rarely been successful and then only for a short while.', 'It is the supreme art of the teacher to awaken joy in creative expression and knowledge.', 'When I examine myself and my methods of thought, I come to the conclusion that the gift of fantasy has meant more to me than my talent for absorbing positive knowledge.', 'Love is a better teacher than duty.', 'Whoever undertakes to set himself up as judge in the field of truth and knowledge is shipwrecked by the laughter of the Gods.', 'Technological progress is like an ax in the hands of a pathological criminal.', 'How strange is the lot of us mortals! Each of us is here for a brief sojourn; for what purpose he knows not, though he senses it. But without deeper reflection one knows from daily life that one exists for other people.', 'Possessions, outward success, publicity, luxury -- to me these have always been contemptible. I assume that a simple and unassuming manner of life is best for everyone, best for both the body and the mind', 'One must not attempt to justify them, but rather to sense their nature simply and clearly.', 'Each of us is here for a brief sojourn; for what purpose he knows not, though he senses it. But without deeper reflection one knows from daily life that one exists for other people.', 'Things should be made as simple as possible, but not any simpler.', 'The most beautiful emotion we can experience is the mysterious. It is the power of all true art and science. He to whom this emotion is a stranger, who can no longer wonder and stand rapt in awe, is as good as dead. To know that what is impenetrable to us really exists, manifesting itself as the highest wisdom and the most radiant beauty, which our dull faculties can comprehend only in their most primitive forms -- this knowledge, this feeling, is at the center of true religiousness. In this sense, and in this sense only, I belong to the rank of devoutly religious men.', 'God is clever, but not dishonest.', 'It is only to the individual that a soul is given.', 'God always takes the simplest way.', 'A hundred times every day I remind myself that my inner and outer life are based on the labors of other men, living and dead, and that I must exert myself in order to give in the same measure as I have received and am still receiving.', 'Nothing is more destructive of respect for the government and the law of the land than passing laws which cannot be enforced.', 'When the solution is simple, God is answering.', 'If one asks the whence derives the authority of fundamental ends, since they cannot be stated and justified merely by reason, one can only answer: they exist in a healthy society as powerful traditions, which act upon the conduct and aspirations and judgments of the individuals; they are there, that is, as something living, without its being necessary to find justification for their existence.', "The bitter and the sweet come from the outside, the hard from within, from one's own efforts.", 'The opinion prevailed among advanced minds that it was time that belief should be replaced increasingly by knowledge; belief that did not itself rest on knowledge was superstition, and as such had to be opposed.', "A human being is part of the whole, called by us 'universe,' a part limited in time and space. He experiences himself, his thoughts and feelings, as something separate from the rest -- a kind of optical delusion of consciousness. This delusion is a kind of prison for us, restricting us to our personal desires and to affection for a few persons nearest to us. Our task must be to free ourselves from this prison by widening our circle of compassion to embrace all living creatures and the whole of nature in its beauty.", "Your imagination is your preview of life's coming attractions.", "Many of the things you can count, don't count. Many of the things you can't count, really count.", 'Politics is far more complicated than physics.', "Anyone who doesn't take truth seriously in small matters cannot be trusted in large ones either.", 'The ideals which have always shone before me and filled me with the joy of living are goodness, beauty, and truth.', 'Formal symbolic representation of qualitative entities is doomed to its rightful place of minor significance in a world where flowers and beautiful women abound.', "If we knew what we were doing it wouldn't be research.", 'The American lives even more for his goals, for the future, than the European. Life for him is always becoming, never being.', 'The secret to creativity is knowing how to hide your sources.', 'Perfection of means and confusion of goals seem -- in my opinion -- to characterize our age.', 'A photograph never grows old. You and I change, people change all through the months and years, but a photograph always remains the same. How nice to look at a photograph of mother or father taken many years ago. You see them as you remember them. But as people live on, they change completely. That is why I think a photograph can be kind.', 'The formulation of a problem is often more essential than its solution, which may be merely a matter of mathematical or experimental skill.', 'The highest principles for our aspirations and judgments are given to us in the Jewish-Christian religious tradition.', 'All these constructions and the laws connecting them can be arrived at by the principle of looking for the mathematically simplest concepts and the link between them.', 'Every kind of peaceful cooperation among men is primarily based on mutual trust and only secondarily on institutions such as courts of justice and police.', "Imagination is everything. It is the preview of life's coming attractions.", 'If men as individuals surrender to the call of their elementary instincts, avoiding pain and seeking satisfaction only for their own selves, the result for them all taken together must be a state of insecurity, of fear, and of promiscuous misery.', 'To know is nothing at all; to imagine is everything.', 'Problems cannot be solved at the same level of awareness that created them.', 'This is what the painter, the poet, the speculative philosopher, and the natural scientists do, each in his own fashion.', 'Some recent work by E. Fermi and L. Szilard, which has been communicated to me in manuscript, leads me to expect that the element uranium may be turned into a new and important source of energy in the immediate future. Certain aspects of the situation seem to call for watchfulness and, if necessary, quick action on the part of the Administration. This new phenomenon would also lead to the construction of bombs, and it is conceivablethough much less certainthat extremely powerful bombs of a new type may thus be constructed. A single bomb of this type, carried by boat or exploded in a port, might very well destroy the whole port together with some of the surrounding territory. However, such bombs might very well prove to be too heavy for transportation by air.', 'Everything should be made as simple as possible, but not simpler.', 'The whole of science is nothing more than a refinement of everyday thinking.', "When you are courting a nice girl an hour seems like a second. When you sit on a red-hot cinder a second seems like an hour. That's relativity.", 'The true sign of intelligence is not knowledge but imagination.', 'In matters of truth and justice, there is no difference between large and small problems, for issues concerning the treatment of people are all the same.', 'He who can no longer pause to wonder and stand rapt in awe is as good as dead; his eyes are closed.', 'Nothing will benefit human health and increase the chances for survival of life on Earth as much as the evolution to a vegetarian diet', 'Keep on sowing your seed, for you never know which will grow -- perhaps it all will.', 'Imagination is more important than knowledge. For knowledge is limited to all we now know and understand, while imagination embraces the entire world, and all there ever will be to know and understand.', 'The words of language, as they are written or spoken, do not seem to play any role in my mechanism of thought. The physical entities which seem to serve as elements in thought are certain signs and more or less clear images.', 'I have little patience with scientists who take a board of wood, look for its thinnest part, and drill a great number of holes where drilling is easy.', 'If you are out to describe the truth, leave elegance to the tailor.', 'We cannot despair of humanity, since we ourselves are human beings.', 'The only source of knowledge is experience.', 'A theory is the more impressive the greater is the simplicity of its premises, the more different are the kinds of things it relates and the more extended the range of its applicability.', 'To put it boldly, it is the attempt at a posterior reconstruction of existence by the process of conceptualization.', 'I think and think for months and years. Ninety-nine times, the conclusion is false. The hundredth time I am right.', 'Occurrences in this domain are beyond the reach of exact prediction because of the variety of factors in operation, not because of any lack of order in nature.', 'In a healthy nation there is a kind of dramatic balance between the will of the people and the government, which prevents its degeneration into tyranny.', 'Though our conduct seems so very different from that of the higher animals, the primary instincts are much alike in them and in us.', 'All such action would cease if those powerful elemental forces were to cease stirring within us.', 'Many times a day I realize how much my own life is built on the labors of my fellowmen, and how earnestly I must exert myself in order to give in return as much as I have received.', 'The significant problems we face today cannot be solved at the same level of thinking we were at when we created them.', 'Try not to become a man of success but rather try to become a man of value.', 'The ideas that have lighted my way and, time after time, have given me new courage to face life cheerfully have been Kindness, Beauty, and Truth.', 'God is subtle, but He is not malicious. I cannot believe that God plays dice with the world.', 'The man of science is a poor philosopher.', 'Let every man be respected as an individual and no man idolized.', 'Considered logically this concept is not identical with the totality of sense impressions referred to; but it is an arbitrary creation of the human (or animal) mind.', "It's not that I'm so smart, it's just that I stay with problems longer.", 'I do not know with what weapons World War 3 will be fought, but World War 4 will be fought with sticks and stones.', "The world is a dangerous place to live; not because of the people who are evil, but because of the people who don't do anything about it.", "It stands to the everlasting credit of science that by acting on the human mind it has overcome man's insecurity before himself and before nature.", 'He who joyfully marches to music in rank and file has already earned my contempt. He has been given a large brain by mistake, since for him the spinal cord would fully suffice. This disgrace to civilization should be done away with at once. Heroism at command, senseless brutality, deplorable love-of-country stance, how violently I hate all this, how despicable and ignoble war is; I would rather be torn to shreds than be a part of so base an action! It is my conviction that killing under the cloak of war is nothing but an act of murder.', 'The unleashed power of the atom has changed everything save our modes of thinking and we thus drift toward unparalleled catastrophe.', 'An attempt at visualizing the Fourth Dimension: Take a point, stretch it into a line, curl it into a circle, twist it into a sphere, and punch through the sphere.', 'They come into being not through demonstration but through revelation, through the medium of powerful personalities.', 'The important thing is not to stop questioning. Curiosity has its own reason for existing. One cannot help but be in awe when he contemplates the mysteries of eternity, of life, of the marvelous structure of reality. It is enough if one tries merely to comprehend a little of this mystery everyday. Never lose a holy  curiosity.', 'Education is what remains after one has forgotten what one has learned in school.', 'A man should look for what is, and not for what he thinks should be.', "The environment is everything that isn't me.", 'If my theory of relativity is proven successful, Germany will claim me as a German and France will declare that I am a citizen of the world. Should my theory prove untrue, France will say that I am a German and Germany will declare that I am a Jew.', "If the facts don't fit the theory, change the facts.", 'Education is the progressive realization of our ignorance.', 'Great spirits have always encountered violent opposition from mediocre minds.', 'In the middle of difficulty lies opportunity.', 'The person who reads too much and uses his brain too little will fall into lazy habits of thinking.', 'But their intervention makes our acts to serve ever less merely the immediate claims of our instincts.', 'It is not enough that you should understand about applied science in order that your work may increase mans blessings. Concern for the man himself and his fate must always form the chief interest of all technical endeavors; concern for the great unsolved problems of the organization of labor and the distribution of goods in order that the creations of our mind shall be a blessing and not a curse to mankind. Never forget this in the midst of your diagrams and equations.', 'The distinction between the past, present and future is only a stubbornly persistent illusion.', 'All that is valuable in human society depends upon the opportunity for development accorded the individual.', 'A person who never made a mistake never tried anything new.', "To the Master's honor all must turn, each in its track, without a sound, forever tracing Newton's ground.", 'We should take care not to make the intellect our god: it has, of course, powerful muscles, but no personality.', 'If one were to take that goal out of out of its religious form and look merely at its purely human side, one might state it perhaps thus: free and responsible development of the individual, so that he may place his powers freely and gladly in the service of all mankind.', 'The most evident difference springs from the important part which is played in man by a relatively strong power of imagination and by the capacity to think, aided as it is by language and other symbolically devices.', 'It gives me great pleasure indeed to see the stubbornness of an incorrigible nonconformist warmly acclaimed.', 'I never think of the future. It comes soon enough.', 'Science is the century-old endeavor to bring together by means of systematic thought the perceptible phenomena of this world into as thorough-going an association as possible.', 'You cannot simultaneously prevent and prepare for war.', 'Science is the attempt to make the chaotic diversity of our sense experience correspond to a logically uniform system of thought.', 'During the last century, and part of the one before, it was widely held that there was an unreconcilable conflict between knowledge and belief.', "Hunger, love, pain, fear are some of those inner forces which rule the individual's instinct for self preservation.", 'Gravitation cannot be held responsible for people falling in love.', 'The only way to escape the personal corruption of praise is to go on working.', 'I believe that the first step in the setting of a real external world is the formation of the concept of bodily objects and of bodily objects of various kinds.', 'It is a miracle that curiosity survives formal education.', 'My religion consists of a humble admiration of the unlimitable superior who reveals Himself in the slight details we are able to perceive with our frail and feeble minds. That deeply emotional conviction of the presence of a superior reasoning power, which is revealed in the incomprehensible universe, forms my idea of God.', 'Where the world ceases to be the scene of our personal hopes and wishes, where we face it as free beings admiring, asking and observing, there we enter the realm of Art and Science', 'Few people are capable of expressing with equanimity opinions which differ from the prejudices of their social environment. Most people are even incapable of forming such opinions.', 'The distinctions separating the social classes are false; in the last analysis they rest on force.', 'Few are those who see with their own eyes and feel with their own hearts.', 'The high destiny of the individual is to serve rather than to rule...', 'All meaningful and lasting change starts first in your imagination and then works its way out. Imagination is more important than knowledge.', 'It is our American habit if we find the foundations of our educational structure unsatisfactory to add another story or wing. We find it easier to add a new study or course or kind of school than to recognize existing conditions so as to meet the need. strangled the holy curious of inquiry. It is a very grave mistake to think that the enjoyment of seeing and searching can be promoted by means of coercion and a sense of duty.', "You can't blame gravity for falling in love.", 'An empty stomach is not a good political advisor.', 'Out of the multitude of our sense experiences we take, mentally and arbitrarily, certain repeatedly occurring complexes of sense impression (partly in conjunction with sense impressions which are interpreted as signs for sense experiences of others), and we attribute to them a meaning the meaning of the bodily object.', 'Most of the fundamental ideas of science are essentially simple, and may, as a rule, be expressed in a language comprehensible to everyone.', 'God does not play dice with the universe.', 'I know quite certainly that I myself have no special talent; curiosity, obsession and dogged endurance, combined with self-criticism have brought me to my ideas.', 'Only a life lived in the service to others is worth living.', 'A hundred times every day I remind myself that my inner and outer life depend on the labors of other men, living and dead, and that I must exert myself in order to give in the same measure as I have received and am still receiving.', 'When you examine the lives of the most influential people who have ever walked among us, you discover one thread that winds through them all. They have been aligned first with their spiritual nature and only then with their physical selves.', 'Common sense is the collection of prejudices acquired by age eighteen.', 'Imagination is more important than knowledge.', 'Solitude is painful when one is young, but delightful when one is more mature.', 'The pursuit of truth and beauty is a sphere of activity in which we are permitted to remain children all our lives.'}
            Answers = 192, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 192, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 35 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 3
            Final Answer: {'Lieserl Einstein', 'Eduard Einstein', 'Hans Albert Einstein'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 36 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0jcx fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 WHERE { fb:m.0jcx fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'90'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 37 / 113: {
          [('Main', '==', 'm.0jcx', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Abdominal aortic aneurysm'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 38 / 113: {
          [('Main', '==', 'm.0jcx', ['base.kwebbase.kwtopic.category'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 39 / 113: {
          [('Main', '==', 'm.0jcx', ['base.kwebbase.kwtopic.has_sentences'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 70
            Final Answer: {'In 1913, Einstein was made director of scientific research at the Kaiser Wilhelm Institute for Physics in Berlin and given a chair in physics  at the University of Berlin, where he became the colleague of, among others, Planck, Nernst, and later Schrodinger.', 'Einstein\'s publication of his ""Foundation of the General Theory of Relativity"" essentially brought to a close the revolutionary period of his scientific career.', 'If a system were to move at the velocity of light, to an observer its length would be zero, time would be at a stop, and its mass would be infinite.', 'He then extended these ideas into a general theory published as: ""The Foundation of the General Theory of Relativity"" in 1916.', 'In 1939 he was informed by Niels Bohr that at Copenhagen the German refugee physicist Lise Meitner had split the uranium atom in experiments that had been inspired by similar, though less precise, experiments done months earlier in Berlin by two German chemists, Otto Hahn and Fritz Strassmann.', 'After World War II and the bombing of Japan, Einstein became an ardent supporter of nuclear disarmament, while also campaigning for the establishment of a world government and of an independent Jewish state.', 'Was nearly anticipated by Langevin.', "Einstein's conclusions regarding time dilation and mass increase were later verified with observations of fast-moving subatomic particles and cosmic rays, and no velocity greater than the speed of light has ever been detected.", 'In addition to these three great achievements, Einstein wrote two more papers in 1905, one being his doctoral dissertation, and the other titled: ""Does the Inertia of a Body Depend on Its Energy Content?"" which again dealt with relativity and came to the conclusion that the energy and mass of a body are closely interrelated.', "In this work, Einstein showed that Newton's theory of gravitation is in fact a close approximation of his more exact general theory of relativity, but relegated it to a special case, only useful at relatively slow speeds.", "In 1952, after the death of Israel's first president, Chaim Weizmann, Einstein was invited to succeed him as president, but he declined as having a personality unsuited to politics.", 'He was painted by Rothenstein.', "It had also proved impossible to measure the expected changes in the speed of light relative to the motion of the Earth, and in 1881 and 1887 the Michelson-Morley experiment had proved conclusively there was no 'ether,'  and  that the velocity of light does not vary with the motion of either the source or the observer.", 'Einstein\'s second paper (""On a Heuristic Viewpoint Concerning the Production and Transformation of Light"") dealt with the photoelectric effect.', 'He spent only a year teaching there, however, before he was appointed, in 1909, as junior professor of  physics at the University of Zurich.', 'As his reputation grew, Einstein was then appointed as full professor at the German University of Prague in 1911, and then at the Federal Technical Institute at Zurich in 1912.', 'Now attempting to encompass all kinds of motion and accelerations (varying velocities), Einstein introduced the concept that it is not possible to distinguish being in a uniform gravitational field from moving under constant acceleration without gravitation and that therefore, in a general view of relativity, gravitation must be taken into account.', "Einstein's support for de Broglie inspired Schrodinger to establish wave mechanics, but the development of this system into one involving indeterminancy greatly disturbed Einstein.", 'He met composer Britten.', 'Einstein hypothesized that the visible motion of the particles was caused by the random movement of molecules that made up the liquid, and derived a mathematical formula that predicted the distance travelled by particles and their relative speed, from which the number of molecules of liquid per unit volume could be inferred.', 'The second was that a red shift (i.e. to a longer wavelength) is produced if light passes through an intense gravitational field (this was subsequently detected in astronomical observations by the English astronomer Arthur Eddington in 1924).', 'His work related to that of Lenard.', 'He knew Rutherford.', 'He also found that in a system in motion relative to an observer,  not only would length be observed to decrease, but time would slow and mass would increase.', 'Wrote anti-war letter with Russell.', 'Instead, much to the dismay of the majority of his fellow scientists (in particular his close friend the German quantum theorist Born), Einstein devoted the remaining years of his life to the search for a unified field theory, a single mathematical theory that would encompass all physical fields, particularly gravitation and electromagnetism.', 'A precursor was JJ Thomson.', 'As a result, Einstein concluded that no system can move at a velocity equal to or greater than the velocity of light.', "The magnitude of these effects is negligible at ordinary velocities, for which Newton's laws still held good, but at velocities approaching the speed of light they become significant.", 'Owing to the apparent imminence of war, Einstein was persuaded by colleagues to write a letter to President Franklin D. Roosevelt urging that research be funded for an atomic bomb on the grounds that the United States had to possess the weapon before Germany.', "To account for  this, the Irish physicist George Francis FitzGerald, and the Dutch physicist Lorentz independently suggested that all lengths (of the stands,  for example,  holding the mirrors reflecting the light beam whose velocity through the 'ether' was being measured) contract in the direction of motion (the 'FitzGerald-Lorentz contraction'),  and had developed a mathematical formula to  describe the effect of motion on various types of measurement.", 'In 1902, Einstein got a junior-level appointment at the Swiss Patent Office in Bern, working as an appraiser for new electrical machines,  and studying in his spare time for a doctorate from the University of Zurich,  which he achieved in 1905 for a paper titled:  ""A New Determination of Molecular Dimensions"".', 'Up to this time, there had been a steady accumulation of knowledge which suggested that light and other electromagnetic radiation does not behave as predicted by classical physics (e.g. no method had been found to calculate the velocity of light in a single direction, as all the known methods involved a reflection of light rays back along their original path).', 'He was influenced by Helmholtz.', 'Two years later, in 1907, he went on to show that mass is related to energy by the famous equation E=mc2 (energy equals mass times the speed of light squared), which indicates the enormous amount of energy that is stored as mass, some of which is released in radioactivity and nuclear reactions.', 'So when light falls on a metal, electrons in the metal absorb specific quanta of energy, giving them enough energy to escape from the surface of the metal,  with the number of electrons released determined not by the number of quanta (i.e. the intensity) of the light, but by its energy (i.e. its wavelength).', "First observed by Heinrich Hertz in 1888, the photoelectric effect involves the release of electrons from a metal that occurs when light is shone on the metal, the number of electrons released being a function not of the light's intensity (as one might expect) but of the color (i.e. the wavelength) of the light.", 'One of his early followers was Laue.', "During the 1920s he returned to the quantum theory, when in 1923 Louis de Broglie used Einstein's mass-energy equation and Planck's quantum theory to achieve an expression describing the wave nature of a particle.", "Einstein's work on Brownian motion is generally regarded as the first direct experimental evidence for the hypothesis that matter is composed of atoms and molecules.", 'He met Eisenstein.', 'The third, and most revolutionary paper of 1905 (""On the Electrodynamics of Moving Bodies""), which discussed the relationship between measurements made by observers in two separate systems moving at constant velocity with respect to each other, contained the idea which was to make Einstein famous, his special theory of relativity.', 'In addition to his continued work on the unified field theory, he was continually in demand as a speaker and during the 1930s he wrote extensively on many topics, especially peace.', "Einstein's theory was revolutionary because previously scientists had believed that basic quantities of measurement such as time, mass, and length were absolute and unchanging, while his work established the opposite notion - that these measurements could change, depending on the relative motion of the observer.", 'Despite these achievements, when Einstein submitted his paper on relativity to the University of Berne in 1905 in support of his application to become a Privatdozent (unsalaried junior lecturer), his application was rejected and he continued at the Patent Office for another three years.', 'He influenced Heaviside, and Wiener.', 'In order to solve this problem, Einstein - using the quantum hypothesis (1900) of the German physicist Planck - postulated that light travels in tiny discrete bundles, or individual ""quanta"" of energy (later called photons), the energy of which is a function of its wavelength.', 'One of the greatest scientists in history.', "Einstein's hypothesis and accompanying mathematical formula, which has become known as Einstein's photoelectric law, were confirmed by several experiments, laid the practical foundation for the fields of quantum physics and quantitative photoelectric chemistry, and got him the 1921 Nobel Prize in physics.", 'As a result he enrolled for a year at a Swiss cantonal high school.', "In particular, he found it impossible to accept Heisenberg's uncertainty principle, central to quantum mechanics, which states that the movement of a single particle could not be predicted because of a fundamental uncertainty in measuring simultaneously both its speed and its position (which meant, in effect, that the future of any physical system at the subatomic level cannot be predicted).", 'In 1900 he graduated but was unable to find a regular teaching job and instead supported himself as a tutor in a private school in Schaffhausen.', 'During the war years, Einstein became an outspoken opponent of German militarism, but remained primarily engaged in perfecting the extension of his 1905 theory of relativity to a broader context, by considering systems that are not in uniform motion but under acceleration.', 'The first of these (""On the Movement of Small Particles Suspended in a Stationary Liquid Demanded by the Molecular-Kinetic Theory of Heat"") dealt with a phenomenon first observed by the Scottish botanist Robert Brown in 1827, who reported that tiny particles, such as pollen grains, moved about with a rapid and random zigzag motion when suspended in liquid, and that the motion of the particles increased when the temperature increased, but that the motion decreased if larger particles were used.', 'In 1896, Einstein entered the FIT as a student of general science but often failed to attend his classes,  spending much of his time to reading on his own, in particular the works of Kirchhoff, Hertz, Maxwell, Mach and the works on geometry of the mathematician Riemann.', 'Believing in a God and an exactly engineered universe, at the Solvay Conference of 1927 on quantum theory attended by Planck, Bohr, de Broglie, Heisenberg, Schrodinger and Dirac among others - Einstein alienated many of his  colleagues by claiming that quantum mechanics, which could only calculate the probabilities of physical events, although brilliant could not be absolutely correct because ""God does not play dice"" with the universe.', "In 1895 Einstein failed the  entrance examination for the Swiss Federal Institute of Technology  in Zurich, one of Europe's finest institutions for higher learning in science, where he had planned to major in electrical engineering.", 'He discovered the basic laser principle He was a friend of Lindemann.', "This recommendation marked the beginning of the Manhattan Project for the construction of the world's first nuclear weapons, although it was such scientists as Fermi rather than Einstein himself (considered a security risk, in spite of  becoming a U.S. citizen in 1940) who led and participated in the project.", "The same year,  in 'The Annals of Physics'  Einstein published three papers (on Brownian motion, the photoelectric effect, and special relativity) that not only established his genius as a theoretical physicist, but also changed both the face of physics and humanity's view of the universe.", 'In 1901 he became a Swiss citizen, and published his first scientific paper: ""Consequences of Capillary Phenomena"".', 'In 1908 his second application to Berne was accepted.', "During the 1920s, a period when Germany's political situation was deteriorating rapidly and anti-Semitism was on the rise, he instead became involved in anti-nationalist and pacifist causes, and began publicly to support the Zionist movement - all of which made him highly unpopular with Germany's growing right wing.", "The third test was Einstein's prediction that the apparent positions of stars would shift when they are seen near the Sun, because the Sun's intense gravity would bend the light rays from the stars as they pass the Sun (this starlight being visible only during a total eclipse).", 'As a result, he travelled widely - to the United States in 1921, around the world in 1922-23, to South America in 1925 - lecturing on physics and raising money for the Zionist cause.', "Einstein instead postulated that gravitation is not a force, as Newton had believed, but a curved field in the space-time continuum, created by the presence of mass, replacing Newton's theory of gravitational attraction between bodies by a space-time mathematical description in which bodies influence the characteristics of space in their vicinity.", 'Einstein was triumphantly vindicated when observations of a solar eclipse in 1919 showed apparent shifts of exactly the amount he had predicted, and once this result was reported throughout the world Einstein became internationally famous, and relativity a household word.', "With the rise of National Socialism in Germany, Einstein's position as both a Jew and a pacifist became increasingly difficult, and with Hitler's rise to power in 1933 he accepted an appointment at the Institute for Advanced Studies in Princeton, New Jersey, where he spent the rest of his life.", "The first was the explanation of an anomaly in the orbit of the planet Mercury (that its perihelion, or point of orbit closest to the Sun, advanced slightly more than was predicted by Newton's laws) that could not be explained by Newtonian mechanics.", 'In order to extend the special theory, he investigated the effect of gravitation on light, and in 1911 concluded that light rays would be bent in a gravitational field.'}
            Answers = 70, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 70, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 40 / 113: {
          [('Main', '==', 'm.0jcx', ['base.jewlib.original_owner.originator_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.jewlib.original_owner.originator_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.jewlib.original_owner.originator_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 4
            Final Answer: {'Albert Einstein Papers', 'Albert Einstein Archives', 'Albert Einstein Collection'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 41 / 113: {
          [('Main', '==', 'm.0jcx', ['influence.influence_node.influenced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:40] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 13
            Final Answer: {'Wolfgang Pauli', 'Boris Podolsky', 'Merce Cunningham', 'Karl Popper', 'Charles H. Bennett', 'Sean M. Carroll', 'Nathan Rosen', 'Rudolf Carnap', 'Paco Ahlgren', 'David Bohm', 'Sam Harris', 'Léon Brillouin', 'Théophile de Donder'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 42 / 113: {
          [('Main', '==', 'm.0jcx', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 95
            Final Answer: {'Comment je vois le monde', 'The Collected Papers of Albert Einstein, Volume 10: The Berlin Years: Correspondence, May-December 1920', 'Zur Quantentheorie der Strahlung', 'Relativity, the special and the general theory', 'Ideas and opinions', 'La Mentalidad Militar', 'Grundzüge der Relativitätstheorie', 'Test case for humanity', 'Bite-size Einstein', 'Teoria de La Relatividad', 'On the method of theoretical physics', 'MIS Creencias', "L'évolution des idées en physique", 'Geometrie und Erfahrung', 'The Born-Einstein Letters', 'Proceedings of the Fourth International Conference on Coccidioidomycosis', 'The new quotable Einstein', 'Sobre la teoria de la relatividad especial y general (COLECCION FISICA)', 'The meaning of relativity', 'Cosmic religion', 'Isaac Newton', 'Oeuvres choisies, tome 1', 'Demut ʻolami', 'Why war?', 'Este Es Mi Pueblo', 'The Collected Papers of Albert Einstein, Volume 9: The Berlin Years: Correspondence, January 1919-April 1920', 'The gravitational equations and the problem of motion. II', 'Elektron und allgemeine Relativitätstheorie', "Sur l'électrodynamique des corps en mouvement", 'The origins of the general theory of relativity', 'Sidelights on relativity', 'The Collected Papers of Albert Einstein, Volume 5: The Swiss Years: Correspondence, 1902-1914', 'The militarization of America', 'Out of my later years', 'Como Veo El Mundo', 'The Collected Papers of Albert Einstein, Volume 6: The Berlin Years: Writings, 1914-1917', 'The Evolution of Physics', 'Asi Lo veo yo', 'Relativity', 'Aus meinen späten Jahren', 'The Quotable Einstein', 'The Collected Papers of Albert Einstein, Volume 7: The Berlin Years: Writings, 1918-1921', 'Physik als Abenteuer de Erkenntnis', 'Essential Einstein', 'Selections from The Principle of Relativity', 'Akademie-Vorträge', 'Physique, Philosophie, politique', "Untersuchungen über die theorie der 'Brownschen bewegung'", 'Extraits de La théorie de la relativíté restreinte', 'The history of quantum mechanics and the theory of relativity', 'Briefwechsel 1916-1955', 'The principle of relativity', 'Investigations on the theory of the Brownian movement', 'Conceptions scientifiques', 'Pacifismo militante', 'neue Bestimmung der Moleküldimensionen', 'Teorīi͡a︡ otnositelʹnosti', 'Zur einheitlichen Feldtheorie', 'Field theories, old and new', 'Mi Vision Del Mundo / World As I See It', 'The Collected Papers of Albert Einstein, Volume 1: The Early Years: 1879-1902', 'The Collected Papers of Albert Einstein, Volume 4: The Swiss Years: Writings, 1912-1914', 'Mi Credo Humanista', 'Essays In Science', 'Lettres à Maurice Solovine', 'A Stubbornly Persistent Illusion', "Quatre conférences sur la théorie de la relativité faites à l'Université de Princeton", "L'Evoluzione della Fisica. Dai concetti iniziali alla relatività e ai quanti. transl Adele Graziadei", 'Albert Einstein/Mileva Marić--the love letters', 'The Collected Papers of Albert Einstein, Volume 3: The Swiss Years: Writings, 1909-1911', 'Über den Frieden', 'The Collected Papers of Albert Einstein, Volume 2: The Swiss Years: Writings, 1900-1909', 'Äther und relativitäts-theorie', 'About Zionism', 'Notas Autobiograficas/ Autobiographical Notes', 'The Collected Papers of Albert Einstein, Volume 8: The Berlin Years: Correspondence, 1914-1918', 'The Collected Papers of Albert Einstein, Volume 12: The Berlin Years: Correspondence, January-December 1921', 'The fight against war', 'Letters to Solovine', 'Bebuquin ou les dilettantes du miracle', "Einstein's Annalen papers", 'Gelegentliches', 'Autobiographical notes', 'La relativité', 'The Arabs and Palestine', 'Über die spezielle und die allgemeine Relativitätstheorie', 'Mein weltbild', 'fondements de la théorie de la relativité générale', 'Die Grundlage der allgemeinen Relativitätstheorie', 'The World As I See It', 'Lettera a B. Croce', 'La théorie de la relativité restreinte et générale', 'Albert Einstein, Hedwig und Max Born, Briefwechsel', 'Einstein on peace', 'Dios No Juega a Los Dados'}
            Answers = 95, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 95, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 43 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 8
            Final Answer: {'Scientist', 'Physicist', 'Teacher', 'Philosopher', 'Author', 'Writer', 'Theoretical Physicist', 'Mathematician'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 44 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 45 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Ulm'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 46 / 113: {
          [('Main', '==', 'm.0jcx', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0jcx fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 WHERE { fb:m.0jcx fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'1955'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 47 / 113: {
          [('Main', '==', 'm.0jcx', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 13
            Final Answer: {'Einstein, Picasso: Space, Time, and the Beauty That Causes Havoc', 'Einstein: His Life and Universe', 'Relativity in curved spacetime', 'A World Without Time: The Forgotten Legacy of Godel and Einstein', "Einstein's Clocks, Poincare's Maps: Empires of Time", 'Albert Einstein: Creator and Rebel', 'Einstein in Love: A Scientific Romance', "Einstein's Dreams", "Einstein's German World", "Einstein's Mistakes: The Human Failings of Genius", 'Einstein', 'Essential Einstein', 'The Invisible Century: Einstein, Freud, and the Search for Hidden Universes'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 48 / 113: {
          [('Main', '==', 'm.0jcx', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 3
            Final Answer: {'International Rescue Committee', 'Hebrew University of Jerusalem', 'Pugwash Conferences on Science and World Affairs'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 49 / 113: {
          [('Main', '==', 'm.0jcx', ['education.academic.advisors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:education.academic.advisors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:education.academic.advisors ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'Alfred Kleiner', 'Heinrich Friedrich Weber'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 50 / 113: {
          [('Main', '==', 'm.0jcx', ['education.academic.departments_old'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:education.academic.departments_old ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:education.academic.departments_old ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'School of Mathematics, Institute for Advanced Study', 'Humboldt University of Berlin Department of Physics'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 51 / 113: {
          [('Main', '==', 'm.0jcx', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 4
            Final Answer: {'The Professor', 'Albert Einstein'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 52 / 113: {
          [('Main', '==', 'm.0jcx', ['base.kwebbase.kwtopic.connections_from'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 25
            Final Answer: {'albert einstein rejected view of werner karl heisenberg', 'albert einstein studied work of james clerk maxwell', 'albert einstein work related to hendrik antoon lorentz', 'albert einstein influenced norbert wiener', 'albert einstein knew paul adrien maurice dirac', 'albert einstein a pal of max born', 'albert einstein studied work of heinrich rudolf hertz', 'albert einstein work related to philipp eduard anton lenard', 'albert einstein met benjamin britten', 'albert einstein studied phenomenon seen by robert brown', 'albert einstein discovered principle of laser', 'albert einstein knew ernest rutherford', 'albert einstein early follower was max von laue', 'albert einstein knew niels henrik david bohr', 'albert einstein worked with walther hermann nernst', 'albert einstein influenced oliver heaviside', 'albert einstein worked with erwin schrodinger', 'albert einstein work related to george francis fitzgerald', 'albert einstein work related to enrico fermi', 'albert einstein a pal of frederick alexander lindemann', 'albert einstein drew on work of max planck', 'albert einstein met sergei mikhailovich eisenstein', 'albert einstein nearly anticipated by paul langevin', 'albert einstein studied work of gustav robert kirchhoff', 'albert einstein inspired louis, duke de broglie'}
            Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 25, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 53 / 113: {
          [('Main', '==', 'm.0jcx', ['base.kwebbase.kwtopic.kwtype'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 54 / 113: {
          [('Main', '==', 'm.0jcx', ['base.kwebbase.kwtopic.disciplines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 55 / 113: {
          [('Main', '==', 'm.0jcx', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein Memorial'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 56 / 113: {
          [('Main', '==', 'm.0jcx', ['base.argumentmaps.innovator.original_ideas'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.argumentmaps.innovator.original_ideas ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.argumentmaps.innovator.original_ideas ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'General relativity'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 57 / 113: {
          [('Main', '==', 'm.0jcx', ['food.diet_follower.follows_diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'Vegetarian food', 'Veganism'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 58 / 113: {
          [('Main', '==', 'm.0jcx', ['base.concepts.concept_developer.concepts_developed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.concepts.concept_developer.concepts_developed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:base.concepts.concept_developer.concepts_developed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Theory of relativity'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 59 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 1
            Final Answer: {'SMart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 60 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.regular_cast', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.regular_cast ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 3
            Final Answer: {'Mark Speight', "Kirsten O'Brien", "Josie d'Arby"}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 61 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.regular_personal_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.regular_personal_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.regular_personal_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 6
            Final Answer: {'Jay Burridge', "Kirsten O'Brien", 'Zoë Ball', 'Mark Speight', "Josie d'Arby", 'Mike Fischetti'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 62 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.original_network', 'tv.tv_network_duration.network'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.network ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 3
            Final Answer: {'British Broadcasting Corporation', 'BBC One', 'CBBC'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 63 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.regular_personal_appearances', 'tv.tv_regular_personal_appearance.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.regular_personal_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.regular_personal_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 1
            Final Answer: {'SMart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 64 / 113: {
          [('Main', '==', 'm.08c35d', ['tv.tv_program.original_network', 'tv.tv_network_duration.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.08c35d fb:tv.tv_program.original_network ?o1 . ?o1 fb:tv.tv_network_duration.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.08c35d'}
            Query return lines = 1
            Final Answer: {'SMart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 65 / 113: {
          [('Main', '==', 'm.0hfkk', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 1
            Final Answer: {'Böblingen'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 66 / 113: {
          [('Main', '==', 'm.0hfkk', ['organization.organization.leadership', 'organization.leadership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0hfkk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 WHERE { fb:m.0hfkk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 1
            Final Answer: {'2006'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 67 / 113: {
          [('Main', '==', 'm.0hfkk', ['organization.organization.leadership', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 1
            Final Answer: {'Chief Executive Officer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 68 / 113: {
          [('Main', '==', 'm.0hfkk', ['base.schemastaging.entity_hint.corresponds_to', 'base.schemastaging.corresponding_entity.entities'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:base.schemastaging.entity_hint.corresponds_to ?o1 . ?o1 fb:base.schemastaging.corresponding_entity.entities ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:base.schemastaging.entity_hint.corresponds_to ?o1 . ?o1 fb:base.schemastaging.corresponding_entity.entities ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 2
            Final Answer: {'Smart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 69 / 113: {
          [('Main', '==', 'm.0hfkk', ['business.consumer_company.brands', 'business.company_brand_relationship.brand'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.brand ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 1
            Final Answer: {'Smart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 70 / 113: {
          [('Main', '==', 'm.0hfkk', ['organization.organization.leadership', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 1
            Final Answer: {'Smart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 71 / 113: {
          [('Main', '==', 'm.0hfkk', ['business.consumer_company.brands', 'business.company_brand_relationship.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:business.consumer_company.brands ?o1 . ?o1 fb:business.company_brand_relationship.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 1
            Final Answer: {'Smart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 72 / 113: {
          [('Main', '==', 'm.0hfkk', ['organization.organization.leadership', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 1
            Final Answer: {'Annette Winkler'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 73 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 3
            Final Answer: {'1909', '1902', '1933'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 74 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Patent examiner'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.051s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.051s]
        Checking schema 75 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 4
            Final Answer: {'PhD', 'Bachelor of Science', 'High school', 'Primary school'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 76 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 3
            Final Answer: {'1901', '1896', '1905'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 77 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 78 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'Maja Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 79 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 3
            Final Answer: {'Mileva Marić', 'Elsa Einstein'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 80 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Bern'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 81 / 113: {
          [('Main', '==', 'm.0jcx', ['award.hall_of_fame_inductee.hall_of_fame_inductions', 'award.hall_of_fame_induction.inductee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.hall_of_fame_inductee.hall_of_fame_inductions ?o1 . ?o1 fb:award.hall_of_fame_induction.inductee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.hall_of_fame_inductee.hall_of_fame_inductions ?o1 . ?o1 fb:award.hall_of_fame_induction.inductee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 82 / 113: {
          [('Main', '==', 'm.0jcx', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'Archive Footage', 'Him/Herself'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 83 / 113: {
          [('Main', '==', 'm.0jcx', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 5
            Final Answer: {'1935', '1925', '1926', '1929', '1921'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 84 / 113: {
          [('Main', '==', 'm.0jcx', ['award.award_winner.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 85 / 113: {
          [('Main', '==', 'm.0jcx', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 86 / 113: {
          [('Main', '==', 'm.0jcx', ['base.nobelprizes.nobel_prize_winner.nobel_honor', 'base.nobelprizes.nobel_honor.nobel_prize_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:base.nobelprizes.nobel_prize_winner.nobel_honor ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.nobel_prize_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:base.nobelprizes.nobel_prize_winner.nobel_honor ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.nobel_prize_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 87 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.employment_history', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'1955', '1906'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 88 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'Physics', 'Mathematics and Physics'}
            Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
          } [0.036s]
          Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
        } [0.036s]
        Checking schema 89 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 4
            Final Answer: {'Bern', 'Germany', 'Munich', 'Princeton'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 90 / 113: {
          [('Main', '==', 'm.0jcx', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'Black Mountain College', 'Society of Friends of the Jewish National Library'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 91 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'1903', '1919'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 92 / 113: {
          [('Main', '==', 'm.0jcx', ['award.hall_of_fame_inductee.hall_of_fame_inductions', 'award.hall_of_fame_induction.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:award.hall_of_fame_inductee.hall_of_fame_inductions ?o1 . ?o1 fb:award.hall_of_fame_induction.date ?o2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:award.hall_of_fame_inductee.hall_of_fame_inductions ?o1 . ?o1 fb:award.hall_of_fame_induction.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'2008', '1990'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 93 / 113: {
          [('Main', '==', 'm.0jcx', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 13
            Final Answer: {'Occupy LA', 'Elvis: Return to Tupelo', 'Atomic Power', 'Prophets of Science Fiction', 'Hitler, a Career', 'How William Shatner Changed the World', 'Mid Century: Half Way to Where?', 'On the Brink: Doomsday', 'Der ewige Jude', "Journey to Palomar, America's First Journey Into Space", 'World Leaders on Peace and Democracy', 'Trinity and Beyond: The Atomic Bomb Movie', 'The Yellow Star – The Persecution of the Jews in Europe 1933-45'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 94 / 113: {
          [('Main', '==', 'm.0jcx', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 95 / 113: {
          [('Main', '==', 'm.0jcx', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 96 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 97 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 6
            Final Answer: {'Swiss Federal Institute of Intellectual Property', 'University of Zurich', 'Leiden University', 'ETH Zurich', 'Charles University in Prague', 'Institute for Advanced Study'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 98 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 4
            Final Answer: {'Aargau Cantonal School', 'University of Zurich', 'Luitpold Gymnasium', 'ETH Zurich'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 99 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Current: 100 / 113
        Checking schema 100 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'1895'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 101 / 113: {
          [('Main', '==', 'm.0jcx', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 102 / 113: {
          [('Main', '==', 'm.0jcx', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 103 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'1936', '1919'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 104 / 113: {
          [('Main', '==', 'm.0jcx', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:41] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 105 / 113: {
          [('Main', '==', 'm.0jcx', ['award.hall_of_fame_inductee.hall_of_fame_inductions', 'award.hall_of_fame_induction.hall_of_fame'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.hall_of_fame_inductee.hall_of_fame_inductions ?o1 . ?o1 fb:award.hall_of_fame_induction.hall_of_fame ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.hall_of_fame_inductee.hall_of_fame_inductions ?o1 . ?o1 fb:award.hall_of_fame_induction.hall_of_fame ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'The Walhalla', 'New Jersey Hall of Fame'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 106 / 113: {
          [('Main', '==', 'm.0jcx', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Albert Einstein'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 107 / 113: {
          [('Main', '==', 'm.0jcx', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 6
            Final Answer: {'Copley Medal', 'Franklin Medal', 'Max Planck Medal', 'Matteucci Medal', 'Nobel Prize in Physics', 'Gold Medal of the Royal Astronomical Society'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 108 / 113: {
          [('Main', '==', 'm.0jcx', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Time 100: The Most Important People of the Century'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 109 / 113: {
          [('Main', '==', 'm.0jcx', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 WHERE { fb:m.0jcx fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'1999'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 110 / 113: {
          [('Main', '==', 'm.0jcx', ['influence.influence_node.peers', 'influence.peer_relationship.peers'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:influence.influence_node.peers ?o1 . ?o1 fb:influence.peer_relationship.peers ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:influence.influence_node.peers ?o1 . ?o1 fb:influence.peer_relationship.peers ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 8
            Final Answer: {'Werner Heisenberg', 'Edwin Hubble', 'Kurt Gödel', 'Carathéodory Constantin', 'Niels Henrik David Bohr', 'Erwin Schrödinger', 'David Hilbert'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 111 / 113: {
          [('Main', '==', 'm.0jcx', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 2
            Final Answer: {'Royal Society', 'Society of Friends of the Jewish National Library'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 112 / 113: {
          [('Main', '==', 'm.0jcx', ['base.nobelprizes.nobel_prize_winner.nobel_honor', 'base.nobelprizes.nobel_honor.subject_area'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:base.nobelprizes.nobel_prize_winner.nobel_honor ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.subject_area ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:base.nobelprizes.nobel_prize_winner.nobel_honor ?o1 . ?o1 fb:base.nobelprizes.nobel_honor.subject_area ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 1
            Final Answer: {'Photoelectric effect'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        105 / 113 coarse schemas kept with ans_size > 0.
      } [1.818s]
      Coarse level ended, resulting in 105 schemas.
    } [4.976s]
    Type level searching (total types = 10): {
      Current: 0 / 105
[{'location.country'}]
[{'type.datetime'}]
[{'tv.tv_series_season'}]
[{'tv.tv_genre'}]
[{'type.datetime'}]
[{'tv.tv_series_episode'}]
[{'type.int'}]
[{'language.human_language'}]
[{'type.datetime'}]
[{'organization.organization_founder'}]
[{'type.object'}]
[{'book.literary_series'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'location.location'}]
[{'law.invention'}]
[{'education.academic'}]
[{'base.activism.activism_issue'}]
[{'base.kwebbase.kwconnection'}]
[{'base.eating.diets'}]
[{'music.album'}]
[{'music.recording'}]
[{'influence.influence_node'}]
[{'symbols.namesake'}]
[{'book.book_edition'}]
[{'film.film'}]
[{'people.family'}]
[{'media_common.quotation'}]
[{'people.person'}]
[{'type.float'}]
[{'people.cause_of_death'}]
[{'base.kwebbase.kwsentence'}]
[{'base.jewlib.research_collection'}]
[{'influence.influence_node'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'education.academic'}]
[{'education.department'}]
[{'fictional_universe.fictional_character'}]
[{'base.kwebbase.kwconnection'}]
[{'visual_art.artwork'}]
[{'base.argumentmaps.original_idea'}]
[{'food.diet'}]
[{'base.concepts.concept'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'tv.tv_network_duration'}, {'tv.tv_network'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_program'}]
[{'tv.tv_network_duration'}, {'tv.tv_program'}]
[{'location.mailing_address'}, {'location.location'}]
[{'organization.leadership'}, {'type.datetime'}]
[{'organization.leadership'}, {'organization.role'}]
[{'base.schemastaging.corresponding_entity'}, {'base.schemastaging.entity_hint'}]
[{'business.company_brand_relationship'}, {'business.brand'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'business.company_brand_relationship'}, {'business.consumer_company'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'award.hall_of_fame_induction'}, {'award.hall_of_fame_inductee'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'base.nobelprizes.nobel_honor'}, {'base.nobelprizes.nobel_prize_winner'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'location.location'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'people.marriage'}, {'type.datetime'}]
[{'award.hall_of_fame_induction'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'award.hall_of_fame_induction'}, {'award.hall_of_fame'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
      Current: 100 / 105
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'influence.peer_relationship'}, {'influence.influence_node'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'base.nobelprizes.nobel_honor'}, {'base.nobelprizes.nobel_subject_area'}]
      12 typed schemas retrieved from 105 coarse schemas.
      Calculating F1 for 12 typed schemas: {
        Current: 0 / 12
        Checking schema 0 / 12: {
          [('Main', '==', 'm.0jcx', ['people.person.parents']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 1 / 12: {
          [('Main', '==', 'm.0jcx', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 2 / 12: {
          [('Main', '==', 'm.0jcx', ['people.person.children']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 3 / 12: {
          [('Main', '==', 'm.0jcx', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jcx fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 4 / 12: {
          [('Main', '==', 'm.0hfkk', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0hfkk fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0hfkk'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 5 / 12: {
          [('Main', '==', 'm.0jcx', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 6 / 12: {
          [('Main', '==', 'm.0jcx', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 7 / 12: {
          [('Main', '==', 'm.0jcx', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 8 / 12: {
          [('Main', '==', 'm.0jcx', ['people.person.spouse_s', 'people.marriage.location_of_ceremony']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 9 / 12: {
          [('Main', '==', 'm.0jcx', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.location', 'location.us_state'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 10 / 12: {
          [('Main', '==', 'm.0jcx', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 11 / 12: {
          [('Main', '==', 'm.0jcx', ['people.person.education', 'education.education.student']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.person', 'government.us_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:42] Q_Schema Request: {
            WebQ_699|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0jcx fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0jcx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        0 / 12 typed schemas kept with ans_size > 0.
      } [0.230s]
      Typed level ended, resulting in 105 schemas.
    } [0.237s]
    Time level searching (total times = 0): {
      Current: 0 / 105
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_series_season.to', 'tv.tv_series_season.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'type.object.timestamp'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'law.invention.date_of_invention'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.book_edition.publication_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwsentence.until', 'base.kwebbase.kwsentence.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'education.department.date_closed', 'education.department.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
self.var_time_preds: [{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'award.hall_of_fame_induction.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'base.nobelprizes.nobel_honor.year'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'award.hall_of_fame_induction.date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.end_date', 'education.education.start_date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'award.hall_of_fame_induction.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
      Current: 100 / 105
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'base.nobelprizes.nobel_honor.year'}, set()]
      0 timed schemas retrieved from 105 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 105 schemas.
    } [0.003s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 105
[set()]
[set()]
[{'tv.tv_series_season.to', 'tv.tv_series_season.from'}]
[set()]
[set()]
[{'tv.tv_series_episode.air_date'}]
[set()]
[set()]
[set()]
[set()]
[{'type.object.timestamp'}]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'law.invention.date_of_invention'}]
[set()]
[set()]
[{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
[set()]
[{'music.album.release_date'}]
[{'music.recording.date'}]
[set()]
[set()]
[{'book.book_edition.publication_date'}]
[{'film.film.initial_release_date'}]
[set()]
[{'media_common.quotation.date'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'base.kwebbase.kwsentence.until', 'base.kwebbase.kwsentence.from'}]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_written', 'book.written_work.date_of_first_publication', 'book.written_work.copyright_date'}]
[{'organization.organization.date_founded'}]
[set()]
[{'education.department.date_closed', 'education.department.date_founded'}]
[set()]
[{'base.kwebbase.kwconnection.from', 'base.kwebbase.kwconnection.until'}]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[set()]
[set()]
[set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[{'tv.tv_network_duration.from', 'tv.tv_network_duration.to'}, {'tv.tv_program.air_date_of_final_episode', 'tv.tv_program.air_date_of_first_episode'}]
[set(), set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[set(), set()]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
[{'business.company_brand_relationship.from_date', 'business.company_brand_relationship.to_date'}, set()]
[{'organization.leadership.to', 'organization.leadership.from', 'organization.leadership.as_of_date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'award.hall_of_fame_induction.date'}, set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'base.nobelprizes.nobel_honor.year'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, {'organization.organization.date_founded'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'award.hall_of_fame_induction.date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'education.education.end_date', 'education.education.start_date'}, {'people.person.date_of_birth'}]
[{'education.education.end_date', 'education.education.start_date'}, set()]
[{'organization.organization_board_membership.to', 'organization.organization_board_membership.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'award.hall_of_fame_induction.date'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_established', 'award.award_category.date_discontinued'}]
      Current: 100 / 105
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[set(), set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'base.nobelprizes.nobel_honor.year'}, set()]
      0 ordinal schemas retrieved from 105 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 105 schemas.
    } [0.002s]
    [2020-12-03 14:28:42] buffer saved.
    105 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/0600-0699/0699_schema].
  } [30.799s]
  All Done.
} [14m13.015s]
Time tracker display: {
              Name	Avg. (s)	    Freq	Time (s)
          single_q	 70.9259	      12	851.1104
       coarse_comb	  3.2727	      12	 39.2722
      query_sparql	  0.2785	     140	 38.9877
   query_q_sc_stat	  0.0119	    1674	 19.9194
         coarse_F1	  1.5508	      12	 18.6099
           linking	  0.5236	      12	  6.2833
              type	  0.5708	      11	  6.2788
          typed_F1	  0.1211	      12	  1.4538
        timed_comb	  0.0204	      12	  0.2450
        typed_comb	  0.0078	      12	  0.0934
          ord_comb	  0.0030	      12	  0.0355
          timed_F1	  0.0000	      12	  0.0005
        ordinal_F1	  0.0000	      12	  0.0005
              time	  0.0000	      11	  0.0004
           ordinal	  0.0000	      11	  0.0001
            entity	  0.0000	      11	  0.0000
} [0.000s]
